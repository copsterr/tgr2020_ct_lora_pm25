
mlm32l07x01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f4d4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e90  0800f598  0800f598  0001f598  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08010428  08010428  00020428  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08010430  08010430  00020430  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08010434  08010434  00020434  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000002b4  20000000  08010438  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001690  200002b4  080106ec  000302b4  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20001944  080106ec  00031944  2**0
                  ALLOC
  9 .ARM.attributes 00000028  00000000  00000000  000302b4  2**0
                  CONTENTS, READONLY
 10 .debug_line   0002d398  00000000  00000000  000302dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   0004b7b6  00000000  00000000  0005d674  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00009e73  00000000  00000000  000a8e2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001e78  00000000  00000000  000b2ca0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000aa4c0  00000000  00000000  000b4b18  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002de0  00000000  00000000  0015efd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    00017891  00000000  00000000  00161db8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00023c72  00000000  00000000  00179649  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  0019d2bb  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00006124  00000000  00000000  0019d338  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stabstr      0000014d  00000000  00000000  001a345c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200002b4 	.word	0x200002b4
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800f57c 	.word	0x0800f57c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200002b8 	.word	0x200002b8
 8000104:	0800f57c 	.word	0x0800f57c

08000108 <strcmp>:
 8000108:	7802      	ldrb	r2, [r0, #0]
 800010a:	780b      	ldrb	r3, [r1, #0]
 800010c:	2a00      	cmp	r2, #0
 800010e:	d003      	beq.n	8000118 <strcmp+0x10>
 8000110:	3001      	adds	r0, #1
 8000112:	3101      	adds	r1, #1
 8000114:	429a      	cmp	r2, r3
 8000116:	d0f7      	beq.n	8000108 <strcmp>
 8000118:	1ad0      	subs	r0, r2, r3
 800011a:	4770      	bx	lr

0800011c <strlen>:
 800011c:	2300      	movs	r3, #0
 800011e:	5cc2      	ldrb	r2, [r0, r3]
 8000120:	3301      	adds	r3, #1
 8000122:	2a00      	cmp	r2, #0
 8000124:	d1fb      	bne.n	800011e <strlen+0x2>
 8000126:	1e58      	subs	r0, r3, #1
 8000128:	4770      	bx	lr
	...

0800012c <__gnu_thumb1_case_uqi>:
 800012c:	b402      	push	{r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	5c09      	ldrb	r1, [r1, r0]
 8000136:	0049      	lsls	r1, r1, #1
 8000138:	448e      	add	lr, r1
 800013a:	bc02      	pop	{r1}
 800013c:	4770      	bx	lr
 800013e:	46c0      	nop			; (mov r8, r8)

08000140 <__gnu_thumb1_case_shi>:
 8000140:	b403      	push	{r0, r1}
 8000142:	4671      	mov	r1, lr
 8000144:	0849      	lsrs	r1, r1, #1
 8000146:	0040      	lsls	r0, r0, #1
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	5e09      	ldrsh	r1, [r1, r0]
 800014c:	0049      	lsls	r1, r1, #1
 800014e:	448e      	add	lr, r1
 8000150:	bc03      	pop	{r0, r1}
 8000152:	4770      	bx	lr

08000154 <__gnu_thumb1_case_uhi>:
 8000154:	b403      	push	{r0, r1}
 8000156:	4671      	mov	r1, lr
 8000158:	0849      	lsrs	r1, r1, #1
 800015a:	0040      	lsls	r0, r0, #1
 800015c:	0049      	lsls	r1, r1, #1
 800015e:	5a09      	ldrh	r1, [r1, r0]
 8000160:	0049      	lsls	r1, r1, #1
 8000162:	448e      	add	lr, r1
 8000164:	bc03      	pop	{r0, r1}
 8000166:	4770      	bx	lr

08000168 <__udivsi3>:
 8000168:	2200      	movs	r2, #0
 800016a:	0843      	lsrs	r3, r0, #1
 800016c:	428b      	cmp	r3, r1
 800016e:	d374      	bcc.n	800025a <__udivsi3+0xf2>
 8000170:	0903      	lsrs	r3, r0, #4
 8000172:	428b      	cmp	r3, r1
 8000174:	d35f      	bcc.n	8000236 <__udivsi3+0xce>
 8000176:	0a03      	lsrs	r3, r0, #8
 8000178:	428b      	cmp	r3, r1
 800017a:	d344      	bcc.n	8000206 <__udivsi3+0x9e>
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d328      	bcc.n	80001d4 <__udivsi3+0x6c>
 8000182:	0c03      	lsrs	r3, r0, #16
 8000184:	428b      	cmp	r3, r1
 8000186:	d30d      	bcc.n	80001a4 <__udivsi3+0x3c>
 8000188:	22ff      	movs	r2, #255	; 0xff
 800018a:	0209      	lsls	r1, r1, #8
 800018c:	ba12      	rev	r2, r2
 800018e:	0c03      	lsrs	r3, r0, #16
 8000190:	428b      	cmp	r3, r1
 8000192:	d302      	bcc.n	800019a <__udivsi3+0x32>
 8000194:	1212      	asrs	r2, r2, #8
 8000196:	0209      	lsls	r1, r1, #8
 8000198:	d065      	beq.n	8000266 <__udivsi3+0xfe>
 800019a:	0b03      	lsrs	r3, r0, #12
 800019c:	428b      	cmp	r3, r1
 800019e:	d319      	bcc.n	80001d4 <__udivsi3+0x6c>
 80001a0:	e000      	b.n	80001a4 <__udivsi3+0x3c>
 80001a2:	0a09      	lsrs	r1, r1, #8
 80001a4:	0bc3      	lsrs	r3, r0, #15
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x46>
 80001aa:	03cb      	lsls	r3, r1, #15
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0b83      	lsrs	r3, r0, #14
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x52>
 80001b6:	038b      	lsls	r3, r1, #14
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0b43      	lsrs	r3, r0, #13
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x5e>
 80001c2:	034b      	lsls	r3, r1, #13
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0b03      	lsrs	r3, r0, #12
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x6a>
 80001ce:	030b      	lsls	r3, r1, #12
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	0ac3      	lsrs	r3, r0, #11
 80001d6:	428b      	cmp	r3, r1
 80001d8:	d301      	bcc.n	80001de <__udivsi3+0x76>
 80001da:	02cb      	lsls	r3, r1, #11
 80001dc:	1ac0      	subs	r0, r0, r3
 80001de:	4152      	adcs	r2, r2
 80001e0:	0a83      	lsrs	r3, r0, #10
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x82>
 80001e6:	028b      	lsls	r3, r1, #10
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	0a43      	lsrs	r3, r0, #9
 80001ee:	428b      	cmp	r3, r1
 80001f0:	d301      	bcc.n	80001f6 <__udivsi3+0x8e>
 80001f2:	024b      	lsls	r3, r1, #9
 80001f4:	1ac0      	subs	r0, r0, r3
 80001f6:	4152      	adcs	r2, r2
 80001f8:	0a03      	lsrs	r3, r0, #8
 80001fa:	428b      	cmp	r3, r1
 80001fc:	d301      	bcc.n	8000202 <__udivsi3+0x9a>
 80001fe:	020b      	lsls	r3, r1, #8
 8000200:	1ac0      	subs	r0, r0, r3
 8000202:	4152      	adcs	r2, r2
 8000204:	d2cd      	bcs.n	80001a2 <__udivsi3+0x3a>
 8000206:	09c3      	lsrs	r3, r0, #7
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xa8>
 800020c:	01cb      	lsls	r3, r1, #7
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0983      	lsrs	r3, r0, #6
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xb4>
 8000218:	018b      	lsls	r3, r1, #6
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	0943      	lsrs	r3, r0, #5
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xc0>
 8000224:	014b      	lsls	r3, r1, #5
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d301      	bcc.n	8000234 <__udivsi3+0xcc>
 8000230:	010b      	lsls	r3, r1, #4
 8000232:	1ac0      	subs	r0, r0, r3
 8000234:	4152      	adcs	r2, r2
 8000236:	08c3      	lsrs	r3, r0, #3
 8000238:	428b      	cmp	r3, r1
 800023a:	d301      	bcc.n	8000240 <__udivsi3+0xd8>
 800023c:	00cb      	lsls	r3, r1, #3
 800023e:	1ac0      	subs	r0, r0, r3
 8000240:	4152      	adcs	r2, r2
 8000242:	0883      	lsrs	r3, r0, #2
 8000244:	428b      	cmp	r3, r1
 8000246:	d301      	bcc.n	800024c <__udivsi3+0xe4>
 8000248:	008b      	lsls	r3, r1, #2
 800024a:	1ac0      	subs	r0, r0, r3
 800024c:	4152      	adcs	r2, r2
 800024e:	0843      	lsrs	r3, r0, #1
 8000250:	428b      	cmp	r3, r1
 8000252:	d301      	bcc.n	8000258 <__udivsi3+0xf0>
 8000254:	004b      	lsls	r3, r1, #1
 8000256:	1ac0      	subs	r0, r0, r3
 8000258:	4152      	adcs	r2, r2
 800025a:	1a41      	subs	r1, r0, r1
 800025c:	d200      	bcs.n	8000260 <__udivsi3+0xf8>
 800025e:	4601      	mov	r1, r0
 8000260:	4152      	adcs	r2, r2
 8000262:	4610      	mov	r0, r2
 8000264:	4770      	bx	lr
 8000266:	e7ff      	b.n	8000268 <__udivsi3+0x100>
 8000268:	b501      	push	{r0, lr}
 800026a:	2000      	movs	r0, #0
 800026c:	f000 f8f0 	bl	8000450 <__aeabi_idiv0>
 8000270:	bd02      	pop	{r1, pc}
 8000272:	46c0      	nop			; (mov r8, r8)

08000274 <__aeabi_uidivmod>:
 8000274:	2900      	cmp	r1, #0
 8000276:	d0f7      	beq.n	8000268 <__udivsi3+0x100>
 8000278:	e776      	b.n	8000168 <__udivsi3>
 800027a:	4770      	bx	lr

0800027c <__divsi3>:
 800027c:	4603      	mov	r3, r0
 800027e:	430b      	orrs	r3, r1
 8000280:	d47f      	bmi.n	8000382 <__divsi3+0x106>
 8000282:	2200      	movs	r2, #0
 8000284:	0843      	lsrs	r3, r0, #1
 8000286:	428b      	cmp	r3, r1
 8000288:	d374      	bcc.n	8000374 <__divsi3+0xf8>
 800028a:	0903      	lsrs	r3, r0, #4
 800028c:	428b      	cmp	r3, r1
 800028e:	d35f      	bcc.n	8000350 <__divsi3+0xd4>
 8000290:	0a03      	lsrs	r3, r0, #8
 8000292:	428b      	cmp	r3, r1
 8000294:	d344      	bcc.n	8000320 <__divsi3+0xa4>
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d328      	bcc.n	80002ee <__divsi3+0x72>
 800029c:	0c03      	lsrs	r3, r0, #16
 800029e:	428b      	cmp	r3, r1
 80002a0:	d30d      	bcc.n	80002be <__divsi3+0x42>
 80002a2:	22ff      	movs	r2, #255	; 0xff
 80002a4:	0209      	lsls	r1, r1, #8
 80002a6:	ba12      	rev	r2, r2
 80002a8:	0c03      	lsrs	r3, r0, #16
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d302      	bcc.n	80002b4 <__divsi3+0x38>
 80002ae:	1212      	asrs	r2, r2, #8
 80002b0:	0209      	lsls	r1, r1, #8
 80002b2:	d065      	beq.n	8000380 <__divsi3+0x104>
 80002b4:	0b03      	lsrs	r3, r0, #12
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d319      	bcc.n	80002ee <__divsi3+0x72>
 80002ba:	e000      	b.n	80002be <__divsi3+0x42>
 80002bc:	0a09      	lsrs	r1, r1, #8
 80002be:	0bc3      	lsrs	r3, r0, #15
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x4c>
 80002c4:	03cb      	lsls	r3, r1, #15
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0b83      	lsrs	r3, r0, #14
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x58>
 80002d0:	038b      	lsls	r3, r1, #14
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0b43      	lsrs	r3, r0, #13
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x64>
 80002dc:	034b      	lsls	r3, r1, #13
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0b03      	lsrs	r3, r0, #12
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0x70>
 80002e8:	030b      	lsls	r3, r1, #12
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	0ac3      	lsrs	r3, r0, #11
 80002f0:	428b      	cmp	r3, r1
 80002f2:	d301      	bcc.n	80002f8 <__divsi3+0x7c>
 80002f4:	02cb      	lsls	r3, r1, #11
 80002f6:	1ac0      	subs	r0, r0, r3
 80002f8:	4152      	adcs	r2, r2
 80002fa:	0a83      	lsrs	r3, r0, #10
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0x88>
 8000300:	028b      	lsls	r3, r1, #10
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	0a43      	lsrs	r3, r0, #9
 8000308:	428b      	cmp	r3, r1
 800030a:	d301      	bcc.n	8000310 <__divsi3+0x94>
 800030c:	024b      	lsls	r3, r1, #9
 800030e:	1ac0      	subs	r0, r0, r3
 8000310:	4152      	adcs	r2, r2
 8000312:	0a03      	lsrs	r3, r0, #8
 8000314:	428b      	cmp	r3, r1
 8000316:	d301      	bcc.n	800031c <__divsi3+0xa0>
 8000318:	020b      	lsls	r3, r1, #8
 800031a:	1ac0      	subs	r0, r0, r3
 800031c:	4152      	adcs	r2, r2
 800031e:	d2cd      	bcs.n	80002bc <__divsi3+0x40>
 8000320:	09c3      	lsrs	r3, r0, #7
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xae>
 8000326:	01cb      	lsls	r3, r1, #7
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0983      	lsrs	r3, r0, #6
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xba>
 8000332:	018b      	lsls	r3, r1, #6
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	0943      	lsrs	r3, r0, #5
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xc6>
 800033e:	014b      	lsls	r3, r1, #5
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d301      	bcc.n	800034e <__divsi3+0xd2>
 800034a:	010b      	lsls	r3, r1, #4
 800034c:	1ac0      	subs	r0, r0, r3
 800034e:	4152      	adcs	r2, r2
 8000350:	08c3      	lsrs	r3, r0, #3
 8000352:	428b      	cmp	r3, r1
 8000354:	d301      	bcc.n	800035a <__divsi3+0xde>
 8000356:	00cb      	lsls	r3, r1, #3
 8000358:	1ac0      	subs	r0, r0, r3
 800035a:	4152      	adcs	r2, r2
 800035c:	0883      	lsrs	r3, r0, #2
 800035e:	428b      	cmp	r3, r1
 8000360:	d301      	bcc.n	8000366 <__divsi3+0xea>
 8000362:	008b      	lsls	r3, r1, #2
 8000364:	1ac0      	subs	r0, r0, r3
 8000366:	4152      	adcs	r2, r2
 8000368:	0843      	lsrs	r3, r0, #1
 800036a:	428b      	cmp	r3, r1
 800036c:	d301      	bcc.n	8000372 <__divsi3+0xf6>
 800036e:	004b      	lsls	r3, r1, #1
 8000370:	1ac0      	subs	r0, r0, r3
 8000372:	4152      	adcs	r2, r2
 8000374:	1a41      	subs	r1, r0, r1
 8000376:	d200      	bcs.n	800037a <__divsi3+0xfe>
 8000378:	4601      	mov	r1, r0
 800037a:	4152      	adcs	r2, r2
 800037c:	4610      	mov	r0, r2
 800037e:	4770      	bx	lr
 8000380:	e05d      	b.n	800043e <__divsi3+0x1c2>
 8000382:	0fca      	lsrs	r2, r1, #31
 8000384:	d000      	beq.n	8000388 <__divsi3+0x10c>
 8000386:	4249      	negs	r1, r1
 8000388:	1003      	asrs	r3, r0, #32
 800038a:	d300      	bcc.n	800038e <__divsi3+0x112>
 800038c:	4240      	negs	r0, r0
 800038e:	4053      	eors	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	469c      	mov	ip, r3
 8000394:	0903      	lsrs	r3, r0, #4
 8000396:	428b      	cmp	r3, r1
 8000398:	d32d      	bcc.n	80003f6 <__divsi3+0x17a>
 800039a:	0a03      	lsrs	r3, r0, #8
 800039c:	428b      	cmp	r3, r1
 800039e:	d312      	bcc.n	80003c6 <__divsi3+0x14a>
 80003a0:	22fc      	movs	r2, #252	; 0xfc
 80003a2:	0189      	lsls	r1, r1, #6
 80003a4:	ba12      	rev	r2, r2
 80003a6:	0a03      	lsrs	r3, r0, #8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d30c      	bcc.n	80003c6 <__divsi3+0x14a>
 80003ac:	0189      	lsls	r1, r1, #6
 80003ae:	1192      	asrs	r2, r2, #6
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d308      	bcc.n	80003c6 <__divsi3+0x14a>
 80003b4:	0189      	lsls	r1, r1, #6
 80003b6:	1192      	asrs	r2, r2, #6
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d304      	bcc.n	80003c6 <__divsi3+0x14a>
 80003bc:	0189      	lsls	r1, r1, #6
 80003be:	d03a      	beq.n	8000436 <__divsi3+0x1ba>
 80003c0:	1192      	asrs	r2, r2, #6
 80003c2:	e000      	b.n	80003c6 <__divsi3+0x14a>
 80003c4:	0989      	lsrs	r1, r1, #6
 80003c6:	09c3      	lsrs	r3, r0, #7
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x154>
 80003cc:	01cb      	lsls	r3, r1, #7
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0983      	lsrs	r3, r0, #6
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x160>
 80003d8:	018b      	lsls	r3, r1, #6
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	0943      	lsrs	r3, r0, #5
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d301      	bcc.n	80003e8 <__divsi3+0x16c>
 80003e4:	014b      	lsls	r3, r1, #5
 80003e6:	1ac0      	subs	r0, r0, r3
 80003e8:	4152      	adcs	r2, r2
 80003ea:	0903      	lsrs	r3, r0, #4
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x178>
 80003f0:	010b      	lsls	r3, r1, #4
 80003f2:	1ac0      	subs	r0, r0, r3
 80003f4:	4152      	adcs	r2, r2
 80003f6:	08c3      	lsrs	r3, r0, #3
 80003f8:	428b      	cmp	r3, r1
 80003fa:	d301      	bcc.n	8000400 <__divsi3+0x184>
 80003fc:	00cb      	lsls	r3, r1, #3
 80003fe:	1ac0      	subs	r0, r0, r3
 8000400:	4152      	adcs	r2, r2
 8000402:	0883      	lsrs	r3, r0, #2
 8000404:	428b      	cmp	r3, r1
 8000406:	d301      	bcc.n	800040c <__divsi3+0x190>
 8000408:	008b      	lsls	r3, r1, #2
 800040a:	1ac0      	subs	r0, r0, r3
 800040c:	4152      	adcs	r2, r2
 800040e:	d2d9      	bcs.n	80003c4 <__divsi3+0x148>
 8000410:	0843      	lsrs	r3, r0, #1
 8000412:	428b      	cmp	r3, r1
 8000414:	d301      	bcc.n	800041a <__divsi3+0x19e>
 8000416:	004b      	lsls	r3, r1, #1
 8000418:	1ac0      	subs	r0, r0, r3
 800041a:	4152      	adcs	r2, r2
 800041c:	1a41      	subs	r1, r0, r1
 800041e:	d200      	bcs.n	8000422 <__divsi3+0x1a6>
 8000420:	4601      	mov	r1, r0
 8000422:	4663      	mov	r3, ip
 8000424:	4152      	adcs	r2, r2
 8000426:	105b      	asrs	r3, r3, #1
 8000428:	4610      	mov	r0, r2
 800042a:	d301      	bcc.n	8000430 <__divsi3+0x1b4>
 800042c:	4240      	negs	r0, r0
 800042e:	2b00      	cmp	r3, #0
 8000430:	d500      	bpl.n	8000434 <__divsi3+0x1b8>
 8000432:	4249      	negs	r1, r1
 8000434:	4770      	bx	lr
 8000436:	4663      	mov	r3, ip
 8000438:	105b      	asrs	r3, r3, #1
 800043a:	d300      	bcc.n	800043e <__divsi3+0x1c2>
 800043c:	4240      	negs	r0, r0
 800043e:	b501      	push	{r0, lr}
 8000440:	2000      	movs	r0, #0
 8000442:	f000 f805 	bl	8000450 <__aeabi_idiv0>
 8000446:	bd02      	pop	{r1, pc}

08000448 <__aeabi_idivmod>:
 8000448:	2900      	cmp	r1, #0
 800044a:	d0f8      	beq.n	800043e <__divsi3+0x1c2>
 800044c:	e716      	b.n	800027c <__divsi3>
 800044e:	4770      	bx	lr

08000450 <__aeabi_idiv0>:
 8000450:	4770      	bx	lr
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__aeabi_cdrcmple>:
 8000454:	4684      	mov	ip, r0
 8000456:	1c10      	adds	r0, r2, #0
 8000458:	4662      	mov	r2, ip
 800045a:	468c      	mov	ip, r1
 800045c:	1c19      	adds	r1, r3, #0
 800045e:	4663      	mov	r3, ip
 8000460:	e000      	b.n	8000464 <__aeabi_cdcmpeq>
 8000462:	46c0      	nop			; (mov r8, r8)

08000464 <__aeabi_cdcmpeq>:
 8000464:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000466:	f001 f9f5 	bl	8001854 <__ledf2>
 800046a:	2800      	cmp	r0, #0
 800046c:	d401      	bmi.n	8000472 <__aeabi_cdcmpeq+0xe>
 800046e:	2100      	movs	r1, #0
 8000470:	42c8      	cmn	r0, r1
 8000472:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000474 <__aeabi_dcmpeq>:
 8000474:	b510      	push	{r4, lr}
 8000476:	f001 f94d 	bl	8001714 <__eqdf2>
 800047a:	4240      	negs	r0, r0
 800047c:	3001      	adds	r0, #1
 800047e:	bd10      	pop	{r4, pc}

08000480 <__aeabi_dcmplt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 f9e7 	bl	8001854 <__ledf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	db01      	blt.n	800048e <__aeabi_dcmplt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmple>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 f9dd 	bl	8001854 <__ledf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	dd01      	ble.n	80004a2 <__aeabi_dcmple+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_dcmpgt>:
 80004a8:	b510      	push	{r4, lr}
 80004aa:	f001 f96f 	bl	800178c <__gedf2>
 80004ae:	2800      	cmp	r0, #0
 80004b0:	dc01      	bgt.n	80004b6 <__aeabi_dcmpgt+0xe>
 80004b2:	2000      	movs	r0, #0
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	2001      	movs	r0, #1
 80004b8:	bd10      	pop	{r4, pc}
 80004ba:	46c0      	nop			; (mov r8, r8)

080004bc <__aeabi_dcmpge>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f001 f965 	bl	800178c <__gedf2>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	da01      	bge.n	80004ca <__aeabi_dcmpge+0xe>
 80004c6:	2000      	movs	r0, #0
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	2001      	movs	r0, #1
 80004cc:	bd10      	pop	{r4, pc}
 80004ce:	46c0      	nop			; (mov r8, r8)

080004d0 <__aeabi_uldivmod>:
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d111      	bne.n	80004f8 <__aeabi_uldivmod+0x28>
 80004d4:	2a00      	cmp	r2, #0
 80004d6:	d10f      	bne.n	80004f8 <__aeabi_uldivmod+0x28>
 80004d8:	2900      	cmp	r1, #0
 80004da:	d100      	bne.n	80004de <__aeabi_uldivmod+0xe>
 80004dc:	2800      	cmp	r0, #0
 80004de:	d002      	beq.n	80004e6 <__aeabi_uldivmod+0x16>
 80004e0:	2100      	movs	r1, #0
 80004e2:	43c9      	mvns	r1, r1
 80004e4:	1c08      	adds	r0, r1, #0
 80004e6:	b407      	push	{r0, r1, r2}
 80004e8:	4802      	ldr	r0, [pc, #8]	; (80004f4 <__aeabi_uldivmod+0x24>)
 80004ea:	a102      	add	r1, pc, #8	; (adr r1, 80004f4 <__aeabi_uldivmod+0x24>)
 80004ec:	1840      	adds	r0, r0, r1
 80004ee:	9002      	str	r0, [sp, #8]
 80004f0:	bd03      	pop	{r0, r1, pc}
 80004f2:	46c0      	nop			; (mov r8, r8)
 80004f4:	ffffff5d 	.word	0xffffff5d
 80004f8:	b403      	push	{r0, r1}
 80004fa:	4668      	mov	r0, sp
 80004fc:	b501      	push	{r0, lr}
 80004fe:	9802      	ldr	r0, [sp, #8]
 8000500:	f000 f824 	bl	800054c <__udivmoddi4>
 8000504:	9b01      	ldr	r3, [sp, #4]
 8000506:	469e      	mov	lr, r3
 8000508:	b002      	add	sp, #8
 800050a:	bc0c      	pop	{r2, r3}
 800050c:	4770      	bx	lr
 800050e:	46c0      	nop			; (mov r8, r8)

08000510 <__aeabi_d2uiz>:
 8000510:	b570      	push	{r4, r5, r6, lr}
 8000512:	2200      	movs	r2, #0
 8000514:	4b0c      	ldr	r3, [pc, #48]	; (8000548 <__aeabi_d2uiz+0x38>)
 8000516:	0004      	movs	r4, r0
 8000518:	000d      	movs	r5, r1
 800051a:	f7ff ffcf 	bl	80004bc <__aeabi_dcmpge>
 800051e:	2800      	cmp	r0, #0
 8000520:	d104      	bne.n	800052c <__aeabi_d2uiz+0x1c>
 8000522:	0020      	movs	r0, r4
 8000524:	0029      	movs	r1, r5
 8000526:	f001 ffb7 	bl	8002498 <__aeabi_d2iz>
 800052a:	bd70      	pop	{r4, r5, r6, pc}
 800052c:	4b06      	ldr	r3, [pc, #24]	; (8000548 <__aeabi_d2uiz+0x38>)
 800052e:	2200      	movs	r2, #0
 8000530:	0020      	movs	r0, r4
 8000532:	0029      	movs	r1, r5
 8000534:	f001 fc68 	bl	8001e08 <__aeabi_dsub>
 8000538:	f001 ffae 	bl	8002498 <__aeabi_d2iz>
 800053c:	2380      	movs	r3, #128	; 0x80
 800053e:	061b      	lsls	r3, r3, #24
 8000540:	469c      	mov	ip, r3
 8000542:	4460      	add	r0, ip
 8000544:	e7f1      	b.n	800052a <__aeabi_d2uiz+0x1a>
 8000546:	46c0      	nop			; (mov r8, r8)
 8000548:	41e00000 	.word	0x41e00000

0800054c <__udivmoddi4>:
 800054c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800054e:	464f      	mov	r7, r9
 8000550:	4646      	mov	r6, r8
 8000552:	46d6      	mov	lr, sl
 8000554:	b5c0      	push	{r6, r7, lr}
 8000556:	0004      	movs	r4, r0
 8000558:	b082      	sub	sp, #8
 800055a:	000d      	movs	r5, r1
 800055c:	4691      	mov	r9, r2
 800055e:	4698      	mov	r8, r3
 8000560:	428b      	cmp	r3, r1
 8000562:	d82f      	bhi.n	80005c4 <__udivmoddi4+0x78>
 8000564:	d02c      	beq.n	80005c0 <__udivmoddi4+0x74>
 8000566:	4641      	mov	r1, r8
 8000568:	4648      	mov	r0, r9
 800056a:	f002 f8a7 	bl	80026bc <__clzdi2>
 800056e:	0029      	movs	r1, r5
 8000570:	0006      	movs	r6, r0
 8000572:	0020      	movs	r0, r4
 8000574:	f002 f8a2 	bl	80026bc <__clzdi2>
 8000578:	1a33      	subs	r3, r6, r0
 800057a:	469c      	mov	ip, r3
 800057c:	3b20      	subs	r3, #32
 800057e:	469a      	mov	sl, r3
 8000580:	d500      	bpl.n	8000584 <__udivmoddi4+0x38>
 8000582:	e076      	b.n	8000672 <__udivmoddi4+0x126>
 8000584:	464b      	mov	r3, r9
 8000586:	4652      	mov	r2, sl
 8000588:	4093      	lsls	r3, r2
 800058a:	001f      	movs	r7, r3
 800058c:	464b      	mov	r3, r9
 800058e:	4662      	mov	r2, ip
 8000590:	4093      	lsls	r3, r2
 8000592:	001e      	movs	r6, r3
 8000594:	42af      	cmp	r7, r5
 8000596:	d828      	bhi.n	80005ea <__udivmoddi4+0x9e>
 8000598:	d025      	beq.n	80005e6 <__udivmoddi4+0x9a>
 800059a:	4653      	mov	r3, sl
 800059c:	1ba4      	subs	r4, r4, r6
 800059e:	41bd      	sbcs	r5, r7
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	da00      	bge.n	80005a6 <__udivmoddi4+0x5a>
 80005a4:	e07b      	b.n	800069e <__udivmoddi4+0x152>
 80005a6:	2200      	movs	r2, #0
 80005a8:	2300      	movs	r3, #0
 80005aa:	9200      	str	r2, [sp, #0]
 80005ac:	9301      	str	r3, [sp, #4]
 80005ae:	2301      	movs	r3, #1
 80005b0:	4652      	mov	r2, sl
 80005b2:	4093      	lsls	r3, r2
 80005b4:	9301      	str	r3, [sp, #4]
 80005b6:	2301      	movs	r3, #1
 80005b8:	4662      	mov	r2, ip
 80005ba:	4093      	lsls	r3, r2
 80005bc:	9300      	str	r3, [sp, #0]
 80005be:	e018      	b.n	80005f2 <__udivmoddi4+0xa6>
 80005c0:	4282      	cmp	r2, r0
 80005c2:	d9d0      	bls.n	8000566 <__udivmoddi4+0x1a>
 80005c4:	2200      	movs	r2, #0
 80005c6:	2300      	movs	r3, #0
 80005c8:	9200      	str	r2, [sp, #0]
 80005ca:	9301      	str	r3, [sp, #4]
 80005cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <__udivmoddi4+0x8a>
 80005d2:	601c      	str	r4, [r3, #0]
 80005d4:	605d      	str	r5, [r3, #4]
 80005d6:	9800      	ldr	r0, [sp, #0]
 80005d8:	9901      	ldr	r1, [sp, #4]
 80005da:	b002      	add	sp, #8
 80005dc:	bc1c      	pop	{r2, r3, r4}
 80005de:	4690      	mov	r8, r2
 80005e0:	4699      	mov	r9, r3
 80005e2:	46a2      	mov	sl, r4
 80005e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005e6:	42a3      	cmp	r3, r4
 80005e8:	d9d7      	bls.n	800059a <__udivmoddi4+0x4e>
 80005ea:	2200      	movs	r2, #0
 80005ec:	2300      	movs	r3, #0
 80005ee:	9200      	str	r2, [sp, #0]
 80005f0:	9301      	str	r3, [sp, #4]
 80005f2:	4663      	mov	r3, ip
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d0e9      	beq.n	80005cc <__udivmoddi4+0x80>
 80005f8:	07fb      	lsls	r3, r7, #31
 80005fa:	4698      	mov	r8, r3
 80005fc:	4641      	mov	r1, r8
 80005fe:	0872      	lsrs	r2, r6, #1
 8000600:	430a      	orrs	r2, r1
 8000602:	087b      	lsrs	r3, r7, #1
 8000604:	4666      	mov	r6, ip
 8000606:	e00e      	b.n	8000626 <__udivmoddi4+0xda>
 8000608:	42ab      	cmp	r3, r5
 800060a:	d101      	bne.n	8000610 <__udivmoddi4+0xc4>
 800060c:	42a2      	cmp	r2, r4
 800060e:	d80c      	bhi.n	800062a <__udivmoddi4+0xde>
 8000610:	1aa4      	subs	r4, r4, r2
 8000612:	419d      	sbcs	r5, r3
 8000614:	2001      	movs	r0, #1
 8000616:	1924      	adds	r4, r4, r4
 8000618:	416d      	adcs	r5, r5
 800061a:	2100      	movs	r1, #0
 800061c:	3e01      	subs	r6, #1
 800061e:	1824      	adds	r4, r4, r0
 8000620:	414d      	adcs	r5, r1
 8000622:	2e00      	cmp	r6, #0
 8000624:	d006      	beq.n	8000634 <__udivmoddi4+0xe8>
 8000626:	42ab      	cmp	r3, r5
 8000628:	d9ee      	bls.n	8000608 <__udivmoddi4+0xbc>
 800062a:	3e01      	subs	r6, #1
 800062c:	1924      	adds	r4, r4, r4
 800062e:	416d      	adcs	r5, r5
 8000630:	2e00      	cmp	r6, #0
 8000632:	d1f8      	bne.n	8000626 <__udivmoddi4+0xda>
 8000634:	9800      	ldr	r0, [sp, #0]
 8000636:	9901      	ldr	r1, [sp, #4]
 8000638:	4653      	mov	r3, sl
 800063a:	1900      	adds	r0, r0, r4
 800063c:	4169      	adcs	r1, r5
 800063e:	2b00      	cmp	r3, #0
 8000640:	db23      	blt.n	800068a <__udivmoddi4+0x13e>
 8000642:	002b      	movs	r3, r5
 8000644:	4652      	mov	r2, sl
 8000646:	40d3      	lsrs	r3, r2
 8000648:	002a      	movs	r2, r5
 800064a:	4664      	mov	r4, ip
 800064c:	40e2      	lsrs	r2, r4
 800064e:	001c      	movs	r4, r3
 8000650:	4653      	mov	r3, sl
 8000652:	0015      	movs	r5, r2
 8000654:	2b00      	cmp	r3, #0
 8000656:	db2d      	blt.n	80006b4 <__udivmoddi4+0x168>
 8000658:	0026      	movs	r6, r4
 800065a:	4657      	mov	r7, sl
 800065c:	40be      	lsls	r6, r7
 800065e:	0033      	movs	r3, r6
 8000660:	0026      	movs	r6, r4
 8000662:	4667      	mov	r7, ip
 8000664:	40be      	lsls	r6, r7
 8000666:	0032      	movs	r2, r6
 8000668:	1a80      	subs	r0, r0, r2
 800066a:	4199      	sbcs	r1, r3
 800066c:	9000      	str	r0, [sp, #0]
 800066e:	9101      	str	r1, [sp, #4]
 8000670:	e7ac      	b.n	80005cc <__udivmoddi4+0x80>
 8000672:	4662      	mov	r2, ip
 8000674:	2320      	movs	r3, #32
 8000676:	1a9b      	subs	r3, r3, r2
 8000678:	464a      	mov	r2, r9
 800067a:	40da      	lsrs	r2, r3
 800067c:	4661      	mov	r1, ip
 800067e:	0013      	movs	r3, r2
 8000680:	4642      	mov	r2, r8
 8000682:	408a      	lsls	r2, r1
 8000684:	0017      	movs	r7, r2
 8000686:	431f      	orrs	r7, r3
 8000688:	e780      	b.n	800058c <__udivmoddi4+0x40>
 800068a:	4662      	mov	r2, ip
 800068c:	2320      	movs	r3, #32
 800068e:	1a9b      	subs	r3, r3, r2
 8000690:	002a      	movs	r2, r5
 8000692:	4666      	mov	r6, ip
 8000694:	409a      	lsls	r2, r3
 8000696:	0023      	movs	r3, r4
 8000698:	40f3      	lsrs	r3, r6
 800069a:	4313      	orrs	r3, r2
 800069c:	e7d4      	b.n	8000648 <__udivmoddi4+0xfc>
 800069e:	4662      	mov	r2, ip
 80006a0:	2320      	movs	r3, #32
 80006a2:	2100      	movs	r1, #0
 80006a4:	1a9b      	subs	r3, r3, r2
 80006a6:	2200      	movs	r2, #0
 80006a8:	9100      	str	r1, [sp, #0]
 80006aa:	9201      	str	r2, [sp, #4]
 80006ac:	2201      	movs	r2, #1
 80006ae:	40da      	lsrs	r2, r3
 80006b0:	9201      	str	r2, [sp, #4]
 80006b2:	e780      	b.n	80005b6 <__udivmoddi4+0x6a>
 80006b4:	2320      	movs	r3, #32
 80006b6:	4662      	mov	r2, ip
 80006b8:	0026      	movs	r6, r4
 80006ba:	1a9b      	subs	r3, r3, r2
 80006bc:	40de      	lsrs	r6, r3
 80006be:	002f      	movs	r7, r5
 80006c0:	46b0      	mov	r8, r6
 80006c2:	4666      	mov	r6, ip
 80006c4:	40b7      	lsls	r7, r6
 80006c6:	4646      	mov	r6, r8
 80006c8:	003b      	movs	r3, r7
 80006ca:	4333      	orrs	r3, r6
 80006cc:	e7c8      	b.n	8000660 <__udivmoddi4+0x114>
 80006ce:	46c0      	nop			; (mov r8, r8)

080006d0 <__aeabi_fsub>:
 80006d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006d2:	4647      	mov	r7, r8
 80006d4:	46ce      	mov	lr, r9
 80006d6:	0044      	lsls	r4, r0, #1
 80006d8:	0fc2      	lsrs	r2, r0, #31
 80006da:	b580      	push	{r7, lr}
 80006dc:	0247      	lsls	r7, r0, #9
 80006de:	0248      	lsls	r0, r1, #9
 80006e0:	0a40      	lsrs	r0, r0, #9
 80006e2:	4684      	mov	ip, r0
 80006e4:	4666      	mov	r6, ip
 80006e6:	0048      	lsls	r0, r1, #1
 80006e8:	0a7f      	lsrs	r7, r7, #9
 80006ea:	0e24      	lsrs	r4, r4, #24
 80006ec:	00f6      	lsls	r6, r6, #3
 80006ee:	0025      	movs	r5, r4
 80006f0:	4690      	mov	r8, r2
 80006f2:	00fb      	lsls	r3, r7, #3
 80006f4:	0e00      	lsrs	r0, r0, #24
 80006f6:	0fc9      	lsrs	r1, r1, #31
 80006f8:	46b1      	mov	r9, r6
 80006fa:	28ff      	cmp	r0, #255	; 0xff
 80006fc:	d100      	bne.n	8000700 <__aeabi_fsub+0x30>
 80006fe:	e085      	b.n	800080c <__aeabi_fsub+0x13c>
 8000700:	2601      	movs	r6, #1
 8000702:	4071      	eors	r1, r6
 8000704:	1a26      	subs	r6, r4, r0
 8000706:	4291      	cmp	r1, r2
 8000708:	d057      	beq.n	80007ba <__aeabi_fsub+0xea>
 800070a:	2e00      	cmp	r6, #0
 800070c:	dd43      	ble.n	8000796 <__aeabi_fsub+0xc6>
 800070e:	2800      	cmp	r0, #0
 8000710:	d000      	beq.n	8000714 <__aeabi_fsub+0x44>
 8000712:	e07f      	b.n	8000814 <__aeabi_fsub+0x144>
 8000714:	4649      	mov	r1, r9
 8000716:	2900      	cmp	r1, #0
 8000718:	d100      	bne.n	800071c <__aeabi_fsub+0x4c>
 800071a:	e0aa      	b.n	8000872 <__aeabi_fsub+0x1a2>
 800071c:	3e01      	subs	r6, #1
 800071e:	2e00      	cmp	r6, #0
 8000720:	d000      	beq.n	8000724 <__aeabi_fsub+0x54>
 8000722:	e0f7      	b.n	8000914 <__aeabi_fsub+0x244>
 8000724:	1a5b      	subs	r3, r3, r1
 8000726:	015a      	lsls	r2, r3, #5
 8000728:	d400      	bmi.n	800072c <__aeabi_fsub+0x5c>
 800072a:	e08b      	b.n	8000844 <__aeabi_fsub+0x174>
 800072c:	019b      	lsls	r3, r3, #6
 800072e:	099c      	lsrs	r4, r3, #6
 8000730:	0020      	movs	r0, r4
 8000732:	f001 ffa5 	bl	8002680 <__clzsi2>
 8000736:	3805      	subs	r0, #5
 8000738:	4084      	lsls	r4, r0
 800073a:	4285      	cmp	r5, r0
 800073c:	dd00      	ble.n	8000740 <__aeabi_fsub+0x70>
 800073e:	e0d3      	b.n	80008e8 <__aeabi_fsub+0x218>
 8000740:	1b45      	subs	r5, r0, r5
 8000742:	0023      	movs	r3, r4
 8000744:	2020      	movs	r0, #32
 8000746:	3501      	adds	r5, #1
 8000748:	40eb      	lsrs	r3, r5
 800074a:	1b45      	subs	r5, r0, r5
 800074c:	40ac      	lsls	r4, r5
 800074e:	1e62      	subs	r2, r4, #1
 8000750:	4194      	sbcs	r4, r2
 8000752:	4323      	orrs	r3, r4
 8000754:	2407      	movs	r4, #7
 8000756:	2500      	movs	r5, #0
 8000758:	401c      	ands	r4, r3
 800075a:	2201      	movs	r2, #1
 800075c:	4641      	mov	r1, r8
 800075e:	400a      	ands	r2, r1
 8000760:	2c00      	cmp	r4, #0
 8000762:	d004      	beq.n	800076e <__aeabi_fsub+0x9e>
 8000764:	210f      	movs	r1, #15
 8000766:	4019      	ands	r1, r3
 8000768:	2904      	cmp	r1, #4
 800076a:	d000      	beq.n	800076e <__aeabi_fsub+0x9e>
 800076c:	3304      	adds	r3, #4
 800076e:	0159      	lsls	r1, r3, #5
 8000770:	d400      	bmi.n	8000774 <__aeabi_fsub+0xa4>
 8000772:	e080      	b.n	8000876 <__aeabi_fsub+0x1a6>
 8000774:	3501      	adds	r5, #1
 8000776:	b2ec      	uxtb	r4, r5
 8000778:	2dff      	cmp	r5, #255	; 0xff
 800077a:	d000      	beq.n	800077e <__aeabi_fsub+0xae>
 800077c:	e0a3      	b.n	80008c6 <__aeabi_fsub+0x1f6>
 800077e:	24ff      	movs	r4, #255	; 0xff
 8000780:	2300      	movs	r3, #0
 8000782:	025b      	lsls	r3, r3, #9
 8000784:	05e4      	lsls	r4, r4, #23
 8000786:	0a58      	lsrs	r0, r3, #9
 8000788:	07d2      	lsls	r2, r2, #31
 800078a:	4320      	orrs	r0, r4
 800078c:	4310      	orrs	r0, r2
 800078e:	bc0c      	pop	{r2, r3}
 8000790:	4690      	mov	r8, r2
 8000792:	4699      	mov	r9, r3
 8000794:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000796:	2e00      	cmp	r6, #0
 8000798:	d174      	bne.n	8000884 <__aeabi_fsub+0x1b4>
 800079a:	1c60      	adds	r0, r4, #1
 800079c:	b2c0      	uxtb	r0, r0
 800079e:	2801      	cmp	r0, #1
 80007a0:	dc00      	bgt.n	80007a4 <__aeabi_fsub+0xd4>
 80007a2:	e0a7      	b.n	80008f4 <__aeabi_fsub+0x224>
 80007a4:	464a      	mov	r2, r9
 80007a6:	1a9c      	subs	r4, r3, r2
 80007a8:	0162      	lsls	r2, r4, #5
 80007aa:	d500      	bpl.n	80007ae <__aeabi_fsub+0xde>
 80007ac:	e0b6      	b.n	800091c <__aeabi_fsub+0x24c>
 80007ae:	2c00      	cmp	r4, #0
 80007b0:	d1be      	bne.n	8000730 <__aeabi_fsub+0x60>
 80007b2:	2200      	movs	r2, #0
 80007b4:	2400      	movs	r4, #0
 80007b6:	2300      	movs	r3, #0
 80007b8:	e7e3      	b.n	8000782 <__aeabi_fsub+0xb2>
 80007ba:	2e00      	cmp	r6, #0
 80007bc:	dc00      	bgt.n	80007c0 <__aeabi_fsub+0xf0>
 80007be:	e085      	b.n	80008cc <__aeabi_fsub+0x1fc>
 80007c0:	2800      	cmp	r0, #0
 80007c2:	d046      	beq.n	8000852 <__aeabi_fsub+0x182>
 80007c4:	2cff      	cmp	r4, #255	; 0xff
 80007c6:	d049      	beq.n	800085c <__aeabi_fsub+0x18c>
 80007c8:	2280      	movs	r2, #128	; 0x80
 80007ca:	4648      	mov	r0, r9
 80007cc:	04d2      	lsls	r2, r2, #19
 80007ce:	4310      	orrs	r0, r2
 80007d0:	4681      	mov	r9, r0
 80007d2:	2201      	movs	r2, #1
 80007d4:	2e1b      	cmp	r6, #27
 80007d6:	dc09      	bgt.n	80007ec <__aeabi_fsub+0x11c>
 80007d8:	2020      	movs	r0, #32
 80007da:	464c      	mov	r4, r9
 80007dc:	1b80      	subs	r0, r0, r6
 80007de:	4084      	lsls	r4, r0
 80007e0:	464a      	mov	r2, r9
 80007e2:	0020      	movs	r0, r4
 80007e4:	40f2      	lsrs	r2, r6
 80007e6:	1e44      	subs	r4, r0, #1
 80007e8:	41a0      	sbcs	r0, r4
 80007ea:	4302      	orrs	r2, r0
 80007ec:	189b      	adds	r3, r3, r2
 80007ee:	015a      	lsls	r2, r3, #5
 80007f0:	d528      	bpl.n	8000844 <__aeabi_fsub+0x174>
 80007f2:	3501      	adds	r5, #1
 80007f4:	2dff      	cmp	r5, #255	; 0xff
 80007f6:	d100      	bne.n	80007fa <__aeabi_fsub+0x12a>
 80007f8:	e0a8      	b.n	800094c <__aeabi_fsub+0x27c>
 80007fa:	2201      	movs	r2, #1
 80007fc:	2407      	movs	r4, #7
 80007fe:	4994      	ldr	r1, [pc, #592]	; (8000a50 <__aeabi_fsub+0x380>)
 8000800:	401a      	ands	r2, r3
 8000802:	085b      	lsrs	r3, r3, #1
 8000804:	400b      	ands	r3, r1
 8000806:	4313      	orrs	r3, r2
 8000808:	401c      	ands	r4, r3
 800080a:	e7a6      	b.n	800075a <__aeabi_fsub+0x8a>
 800080c:	2e00      	cmp	r6, #0
 800080e:	d000      	beq.n	8000812 <__aeabi_fsub+0x142>
 8000810:	e778      	b.n	8000704 <__aeabi_fsub+0x34>
 8000812:	e775      	b.n	8000700 <__aeabi_fsub+0x30>
 8000814:	2cff      	cmp	r4, #255	; 0xff
 8000816:	d054      	beq.n	80008c2 <__aeabi_fsub+0x1f2>
 8000818:	2280      	movs	r2, #128	; 0x80
 800081a:	4649      	mov	r1, r9
 800081c:	04d2      	lsls	r2, r2, #19
 800081e:	4311      	orrs	r1, r2
 8000820:	4689      	mov	r9, r1
 8000822:	2201      	movs	r2, #1
 8000824:	2e1b      	cmp	r6, #27
 8000826:	dc09      	bgt.n	800083c <__aeabi_fsub+0x16c>
 8000828:	2120      	movs	r1, #32
 800082a:	4648      	mov	r0, r9
 800082c:	1b89      	subs	r1, r1, r6
 800082e:	4088      	lsls	r0, r1
 8000830:	464a      	mov	r2, r9
 8000832:	0001      	movs	r1, r0
 8000834:	40f2      	lsrs	r2, r6
 8000836:	1e48      	subs	r0, r1, #1
 8000838:	4181      	sbcs	r1, r0
 800083a:	430a      	orrs	r2, r1
 800083c:	1a9b      	subs	r3, r3, r2
 800083e:	015a      	lsls	r2, r3, #5
 8000840:	d500      	bpl.n	8000844 <__aeabi_fsub+0x174>
 8000842:	e773      	b.n	800072c <__aeabi_fsub+0x5c>
 8000844:	2201      	movs	r2, #1
 8000846:	4641      	mov	r1, r8
 8000848:	400a      	ands	r2, r1
 800084a:	0759      	lsls	r1, r3, #29
 800084c:	d000      	beq.n	8000850 <__aeabi_fsub+0x180>
 800084e:	e789      	b.n	8000764 <__aeabi_fsub+0x94>
 8000850:	e011      	b.n	8000876 <__aeabi_fsub+0x1a6>
 8000852:	4648      	mov	r0, r9
 8000854:	2800      	cmp	r0, #0
 8000856:	d158      	bne.n	800090a <__aeabi_fsub+0x23a>
 8000858:	2cff      	cmp	r4, #255	; 0xff
 800085a:	d10c      	bne.n	8000876 <__aeabi_fsub+0x1a6>
 800085c:	08db      	lsrs	r3, r3, #3
 800085e:	2b00      	cmp	r3, #0
 8000860:	d100      	bne.n	8000864 <__aeabi_fsub+0x194>
 8000862:	e78c      	b.n	800077e <__aeabi_fsub+0xae>
 8000864:	2080      	movs	r0, #128	; 0x80
 8000866:	03c0      	lsls	r0, r0, #15
 8000868:	4303      	orrs	r3, r0
 800086a:	025b      	lsls	r3, r3, #9
 800086c:	0a5b      	lsrs	r3, r3, #9
 800086e:	24ff      	movs	r4, #255	; 0xff
 8000870:	e787      	b.n	8000782 <__aeabi_fsub+0xb2>
 8000872:	2cff      	cmp	r4, #255	; 0xff
 8000874:	d025      	beq.n	80008c2 <__aeabi_fsub+0x1f2>
 8000876:	08db      	lsrs	r3, r3, #3
 8000878:	2dff      	cmp	r5, #255	; 0xff
 800087a:	d0f0      	beq.n	800085e <__aeabi_fsub+0x18e>
 800087c:	025b      	lsls	r3, r3, #9
 800087e:	0a5b      	lsrs	r3, r3, #9
 8000880:	b2ec      	uxtb	r4, r5
 8000882:	e77e      	b.n	8000782 <__aeabi_fsub+0xb2>
 8000884:	2c00      	cmp	r4, #0
 8000886:	d04d      	beq.n	8000924 <__aeabi_fsub+0x254>
 8000888:	28ff      	cmp	r0, #255	; 0xff
 800088a:	d018      	beq.n	80008be <__aeabi_fsub+0x1ee>
 800088c:	2480      	movs	r4, #128	; 0x80
 800088e:	04e4      	lsls	r4, r4, #19
 8000890:	4272      	negs	r2, r6
 8000892:	4323      	orrs	r3, r4
 8000894:	2a1b      	cmp	r2, #27
 8000896:	dd00      	ble.n	800089a <__aeabi_fsub+0x1ca>
 8000898:	e0c4      	b.n	8000a24 <__aeabi_fsub+0x354>
 800089a:	001c      	movs	r4, r3
 800089c:	2520      	movs	r5, #32
 800089e:	40d4      	lsrs	r4, r2
 80008a0:	1aaa      	subs	r2, r5, r2
 80008a2:	4093      	lsls	r3, r2
 80008a4:	1e5a      	subs	r2, r3, #1
 80008a6:	4193      	sbcs	r3, r2
 80008a8:	4323      	orrs	r3, r4
 80008aa:	464a      	mov	r2, r9
 80008ac:	0005      	movs	r5, r0
 80008ae:	1ad3      	subs	r3, r2, r3
 80008b0:	4688      	mov	r8, r1
 80008b2:	e738      	b.n	8000726 <__aeabi_fsub+0x56>
 80008b4:	1c72      	adds	r2, r6, #1
 80008b6:	d0f8      	beq.n	80008aa <__aeabi_fsub+0x1da>
 80008b8:	43f2      	mvns	r2, r6
 80008ba:	28ff      	cmp	r0, #255	; 0xff
 80008bc:	d1ea      	bne.n	8000894 <__aeabi_fsub+0x1c4>
 80008be:	000a      	movs	r2, r1
 80008c0:	464b      	mov	r3, r9
 80008c2:	25ff      	movs	r5, #255	; 0xff
 80008c4:	e7d7      	b.n	8000876 <__aeabi_fsub+0x1a6>
 80008c6:	019b      	lsls	r3, r3, #6
 80008c8:	0a5b      	lsrs	r3, r3, #9
 80008ca:	e75a      	b.n	8000782 <__aeabi_fsub+0xb2>
 80008cc:	2e00      	cmp	r6, #0
 80008ce:	d141      	bne.n	8000954 <__aeabi_fsub+0x284>
 80008d0:	1c65      	adds	r5, r4, #1
 80008d2:	b2e9      	uxtb	r1, r5
 80008d4:	2901      	cmp	r1, #1
 80008d6:	dd45      	ble.n	8000964 <__aeabi_fsub+0x294>
 80008d8:	2dff      	cmp	r5, #255	; 0xff
 80008da:	d100      	bne.n	80008de <__aeabi_fsub+0x20e>
 80008dc:	e74f      	b.n	800077e <__aeabi_fsub+0xae>
 80008de:	2407      	movs	r4, #7
 80008e0:	444b      	add	r3, r9
 80008e2:	085b      	lsrs	r3, r3, #1
 80008e4:	401c      	ands	r4, r3
 80008e6:	e738      	b.n	800075a <__aeabi_fsub+0x8a>
 80008e8:	2207      	movs	r2, #7
 80008ea:	4b5a      	ldr	r3, [pc, #360]	; (8000a54 <__aeabi_fsub+0x384>)
 80008ec:	1a2d      	subs	r5, r5, r0
 80008ee:	4023      	ands	r3, r4
 80008f0:	4014      	ands	r4, r2
 80008f2:	e732      	b.n	800075a <__aeabi_fsub+0x8a>
 80008f4:	2c00      	cmp	r4, #0
 80008f6:	d11d      	bne.n	8000934 <__aeabi_fsub+0x264>
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d17a      	bne.n	80009f2 <__aeabi_fsub+0x322>
 80008fc:	464b      	mov	r3, r9
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d100      	bne.n	8000904 <__aeabi_fsub+0x234>
 8000902:	e091      	b.n	8000a28 <__aeabi_fsub+0x358>
 8000904:	000a      	movs	r2, r1
 8000906:	2500      	movs	r5, #0
 8000908:	e7b5      	b.n	8000876 <__aeabi_fsub+0x1a6>
 800090a:	3e01      	subs	r6, #1
 800090c:	2e00      	cmp	r6, #0
 800090e:	d119      	bne.n	8000944 <__aeabi_fsub+0x274>
 8000910:	444b      	add	r3, r9
 8000912:	e76c      	b.n	80007ee <__aeabi_fsub+0x11e>
 8000914:	2cff      	cmp	r4, #255	; 0xff
 8000916:	d184      	bne.n	8000822 <__aeabi_fsub+0x152>
 8000918:	25ff      	movs	r5, #255	; 0xff
 800091a:	e7ac      	b.n	8000876 <__aeabi_fsub+0x1a6>
 800091c:	464a      	mov	r2, r9
 800091e:	4688      	mov	r8, r1
 8000920:	1ad4      	subs	r4, r2, r3
 8000922:	e705      	b.n	8000730 <__aeabi_fsub+0x60>
 8000924:	2b00      	cmp	r3, #0
 8000926:	d1c5      	bne.n	80008b4 <__aeabi_fsub+0x1e4>
 8000928:	000a      	movs	r2, r1
 800092a:	28ff      	cmp	r0, #255	; 0xff
 800092c:	d0c8      	beq.n	80008c0 <__aeabi_fsub+0x1f0>
 800092e:	0005      	movs	r5, r0
 8000930:	464b      	mov	r3, r9
 8000932:	e7a0      	b.n	8000876 <__aeabi_fsub+0x1a6>
 8000934:	2b00      	cmp	r3, #0
 8000936:	d149      	bne.n	80009cc <__aeabi_fsub+0x2fc>
 8000938:	464b      	mov	r3, r9
 800093a:	2b00      	cmp	r3, #0
 800093c:	d077      	beq.n	8000a2e <__aeabi_fsub+0x35e>
 800093e:	000a      	movs	r2, r1
 8000940:	25ff      	movs	r5, #255	; 0xff
 8000942:	e798      	b.n	8000876 <__aeabi_fsub+0x1a6>
 8000944:	2cff      	cmp	r4, #255	; 0xff
 8000946:	d000      	beq.n	800094a <__aeabi_fsub+0x27a>
 8000948:	e743      	b.n	80007d2 <__aeabi_fsub+0x102>
 800094a:	e787      	b.n	800085c <__aeabi_fsub+0x18c>
 800094c:	000a      	movs	r2, r1
 800094e:	24ff      	movs	r4, #255	; 0xff
 8000950:	2300      	movs	r3, #0
 8000952:	e716      	b.n	8000782 <__aeabi_fsub+0xb2>
 8000954:	2c00      	cmp	r4, #0
 8000956:	d115      	bne.n	8000984 <__aeabi_fsub+0x2b4>
 8000958:	2b00      	cmp	r3, #0
 800095a:	d157      	bne.n	8000a0c <__aeabi_fsub+0x33c>
 800095c:	28ff      	cmp	r0, #255	; 0xff
 800095e:	d1e6      	bne.n	800092e <__aeabi_fsub+0x25e>
 8000960:	464b      	mov	r3, r9
 8000962:	e77b      	b.n	800085c <__aeabi_fsub+0x18c>
 8000964:	2c00      	cmp	r4, #0
 8000966:	d120      	bne.n	80009aa <__aeabi_fsub+0x2da>
 8000968:	2b00      	cmp	r3, #0
 800096a:	d057      	beq.n	8000a1c <__aeabi_fsub+0x34c>
 800096c:	4649      	mov	r1, r9
 800096e:	2900      	cmp	r1, #0
 8000970:	d053      	beq.n	8000a1a <__aeabi_fsub+0x34a>
 8000972:	444b      	add	r3, r9
 8000974:	015a      	lsls	r2, r3, #5
 8000976:	d568      	bpl.n	8000a4a <__aeabi_fsub+0x37a>
 8000978:	2407      	movs	r4, #7
 800097a:	4a36      	ldr	r2, [pc, #216]	; (8000a54 <__aeabi_fsub+0x384>)
 800097c:	401c      	ands	r4, r3
 800097e:	2501      	movs	r5, #1
 8000980:	4013      	ands	r3, r2
 8000982:	e6ea      	b.n	800075a <__aeabi_fsub+0x8a>
 8000984:	28ff      	cmp	r0, #255	; 0xff
 8000986:	d0eb      	beq.n	8000960 <__aeabi_fsub+0x290>
 8000988:	2280      	movs	r2, #128	; 0x80
 800098a:	04d2      	lsls	r2, r2, #19
 800098c:	4276      	negs	r6, r6
 800098e:	4313      	orrs	r3, r2
 8000990:	2e1b      	cmp	r6, #27
 8000992:	dc53      	bgt.n	8000a3c <__aeabi_fsub+0x36c>
 8000994:	2520      	movs	r5, #32
 8000996:	1bad      	subs	r5, r5, r6
 8000998:	001a      	movs	r2, r3
 800099a:	40ab      	lsls	r3, r5
 800099c:	40f2      	lsrs	r2, r6
 800099e:	1e5c      	subs	r4, r3, #1
 80009a0:	41a3      	sbcs	r3, r4
 80009a2:	4313      	orrs	r3, r2
 80009a4:	444b      	add	r3, r9
 80009a6:	0005      	movs	r5, r0
 80009a8:	e721      	b.n	80007ee <__aeabi_fsub+0x11e>
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d0d8      	beq.n	8000960 <__aeabi_fsub+0x290>
 80009ae:	4649      	mov	r1, r9
 80009b0:	2900      	cmp	r1, #0
 80009b2:	d100      	bne.n	80009b6 <__aeabi_fsub+0x2e6>
 80009b4:	e752      	b.n	800085c <__aeabi_fsub+0x18c>
 80009b6:	2180      	movs	r1, #128	; 0x80
 80009b8:	03c9      	lsls	r1, r1, #15
 80009ba:	420f      	tst	r7, r1
 80009bc:	d100      	bne.n	80009c0 <__aeabi_fsub+0x2f0>
 80009be:	e74d      	b.n	800085c <__aeabi_fsub+0x18c>
 80009c0:	4660      	mov	r0, ip
 80009c2:	4208      	tst	r0, r1
 80009c4:	d000      	beq.n	80009c8 <__aeabi_fsub+0x2f8>
 80009c6:	e749      	b.n	800085c <__aeabi_fsub+0x18c>
 80009c8:	464b      	mov	r3, r9
 80009ca:	e747      	b.n	800085c <__aeabi_fsub+0x18c>
 80009cc:	4648      	mov	r0, r9
 80009ce:	25ff      	movs	r5, #255	; 0xff
 80009d0:	2800      	cmp	r0, #0
 80009d2:	d100      	bne.n	80009d6 <__aeabi_fsub+0x306>
 80009d4:	e74f      	b.n	8000876 <__aeabi_fsub+0x1a6>
 80009d6:	2280      	movs	r2, #128	; 0x80
 80009d8:	03d2      	lsls	r2, r2, #15
 80009da:	4217      	tst	r7, r2
 80009dc:	d004      	beq.n	80009e8 <__aeabi_fsub+0x318>
 80009de:	4660      	mov	r0, ip
 80009e0:	4210      	tst	r0, r2
 80009e2:	d101      	bne.n	80009e8 <__aeabi_fsub+0x318>
 80009e4:	464b      	mov	r3, r9
 80009e6:	4688      	mov	r8, r1
 80009e8:	2201      	movs	r2, #1
 80009ea:	4641      	mov	r1, r8
 80009ec:	25ff      	movs	r5, #255	; 0xff
 80009ee:	400a      	ands	r2, r1
 80009f0:	e741      	b.n	8000876 <__aeabi_fsub+0x1a6>
 80009f2:	4648      	mov	r0, r9
 80009f4:	2800      	cmp	r0, #0
 80009f6:	d01f      	beq.n	8000a38 <__aeabi_fsub+0x368>
 80009f8:	1a1a      	subs	r2, r3, r0
 80009fa:	0150      	lsls	r0, r2, #5
 80009fc:	d520      	bpl.n	8000a40 <__aeabi_fsub+0x370>
 80009fe:	464a      	mov	r2, r9
 8000a00:	2407      	movs	r4, #7
 8000a02:	1ad3      	subs	r3, r2, r3
 8000a04:	401c      	ands	r4, r3
 8000a06:	4688      	mov	r8, r1
 8000a08:	2500      	movs	r5, #0
 8000a0a:	e6a6      	b.n	800075a <__aeabi_fsub+0x8a>
 8000a0c:	1c74      	adds	r4, r6, #1
 8000a0e:	d0c9      	beq.n	80009a4 <__aeabi_fsub+0x2d4>
 8000a10:	43f6      	mvns	r6, r6
 8000a12:	28ff      	cmp	r0, #255	; 0xff
 8000a14:	d1bc      	bne.n	8000990 <__aeabi_fsub+0x2c0>
 8000a16:	464b      	mov	r3, r9
 8000a18:	e720      	b.n	800085c <__aeabi_fsub+0x18c>
 8000a1a:	4699      	mov	r9, r3
 8000a1c:	464b      	mov	r3, r9
 8000a1e:	2500      	movs	r5, #0
 8000a20:	08db      	lsrs	r3, r3, #3
 8000a22:	e72b      	b.n	800087c <__aeabi_fsub+0x1ac>
 8000a24:	2301      	movs	r3, #1
 8000a26:	e740      	b.n	80008aa <__aeabi_fsub+0x1da>
 8000a28:	2200      	movs	r2, #0
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	e6a9      	b.n	8000782 <__aeabi_fsub+0xb2>
 8000a2e:	2380      	movs	r3, #128	; 0x80
 8000a30:	2200      	movs	r2, #0
 8000a32:	03db      	lsls	r3, r3, #15
 8000a34:	24ff      	movs	r4, #255	; 0xff
 8000a36:	e6a4      	b.n	8000782 <__aeabi_fsub+0xb2>
 8000a38:	2500      	movs	r5, #0
 8000a3a:	e71c      	b.n	8000876 <__aeabi_fsub+0x1a6>
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	e7b1      	b.n	80009a4 <__aeabi_fsub+0x2d4>
 8000a40:	2a00      	cmp	r2, #0
 8000a42:	d0f1      	beq.n	8000a28 <__aeabi_fsub+0x358>
 8000a44:	0013      	movs	r3, r2
 8000a46:	2500      	movs	r5, #0
 8000a48:	e6fc      	b.n	8000844 <__aeabi_fsub+0x174>
 8000a4a:	2500      	movs	r5, #0
 8000a4c:	e6fa      	b.n	8000844 <__aeabi_fsub+0x174>
 8000a4e:	46c0      	nop			; (mov r8, r8)
 8000a50:	7dffffff 	.word	0x7dffffff
 8000a54:	fbffffff 	.word	0xfbffffff

08000a58 <__aeabi_ui2f>:
 8000a58:	b570      	push	{r4, r5, r6, lr}
 8000a5a:	1e04      	subs	r4, r0, #0
 8000a5c:	d034      	beq.n	8000ac8 <__aeabi_ui2f+0x70>
 8000a5e:	f001 fe0f 	bl	8002680 <__clzsi2>
 8000a62:	229e      	movs	r2, #158	; 0x9e
 8000a64:	1a12      	subs	r2, r2, r0
 8000a66:	2a96      	cmp	r2, #150	; 0x96
 8000a68:	dc07      	bgt.n	8000a7a <__aeabi_ui2f+0x22>
 8000a6a:	b2d2      	uxtb	r2, r2
 8000a6c:	2808      	cmp	r0, #8
 8000a6e:	dd2e      	ble.n	8000ace <__aeabi_ui2f+0x76>
 8000a70:	3808      	subs	r0, #8
 8000a72:	4084      	lsls	r4, r0
 8000a74:	0260      	lsls	r0, r4, #9
 8000a76:	0a40      	lsrs	r0, r0, #9
 8000a78:	e021      	b.n	8000abe <__aeabi_ui2f+0x66>
 8000a7a:	2a99      	cmp	r2, #153	; 0x99
 8000a7c:	dd09      	ble.n	8000a92 <__aeabi_ui2f+0x3a>
 8000a7e:	0003      	movs	r3, r0
 8000a80:	0021      	movs	r1, r4
 8000a82:	331b      	adds	r3, #27
 8000a84:	4099      	lsls	r1, r3
 8000a86:	1e4b      	subs	r3, r1, #1
 8000a88:	4199      	sbcs	r1, r3
 8000a8a:	2305      	movs	r3, #5
 8000a8c:	1a1b      	subs	r3, r3, r0
 8000a8e:	40dc      	lsrs	r4, r3
 8000a90:	430c      	orrs	r4, r1
 8000a92:	2805      	cmp	r0, #5
 8000a94:	dd01      	ble.n	8000a9a <__aeabi_ui2f+0x42>
 8000a96:	1f43      	subs	r3, r0, #5
 8000a98:	409c      	lsls	r4, r3
 8000a9a:	0023      	movs	r3, r4
 8000a9c:	490d      	ldr	r1, [pc, #52]	; (8000ad4 <__aeabi_ui2f+0x7c>)
 8000a9e:	400b      	ands	r3, r1
 8000aa0:	0765      	lsls	r5, r4, #29
 8000aa2:	d009      	beq.n	8000ab8 <__aeabi_ui2f+0x60>
 8000aa4:	250f      	movs	r5, #15
 8000aa6:	402c      	ands	r4, r5
 8000aa8:	2c04      	cmp	r4, #4
 8000aaa:	d005      	beq.n	8000ab8 <__aeabi_ui2f+0x60>
 8000aac:	3304      	adds	r3, #4
 8000aae:	015c      	lsls	r4, r3, #5
 8000ab0:	d502      	bpl.n	8000ab8 <__aeabi_ui2f+0x60>
 8000ab2:	229f      	movs	r2, #159	; 0x9f
 8000ab4:	400b      	ands	r3, r1
 8000ab6:	1a12      	subs	r2, r2, r0
 8000ab8:	019b      	lsls	r3, r3, #6
 8000aba:	0a58      	lsrs	r0, r3, #9
 8000abc:	b2d2      	uxtb	r2, r2
 8000abe:	0240      	lsls	r0, r0, #9
 8000ac0:	05d2      	lsls	r2, r2, #23
 8000ac2:	0a40      	lsrs	r0, r0, #9
 8000ac4:	4310      	orrs	r0, r2
 8000ac6:	bd70      	pop	{r4, r5, r6, pc}
 8000ac8:	2200      	movs	r2, #0
 8000aca:	2000      	movs	r0, #0
 8000acc:	e7f7      	b.n	8000abe <__aeabi_ui2f+0x66>
 8000ace:	0260      	lsls	r0, r4, #9
 8000ad0:	0a40      	lsrs	r0, r0, #9
 8000ad2:	e7f4      	b.n	8000abe <__aeabi_ui2f+0x66>
 8000ad4:	fbffffff 	.word	0xfbffffff

08000ad8 <__aeabi_dadd>:
 8000ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ada:	464f      	mov	r7, r9
 8000adc:	4646      	mov	r6, r8
 8000ade:	46d6      	mov	lr, sl
 8000ae0:	000c      	movs	r4, r1
 8000ae2:	0309      	lsls	r1, r1, #12
 8000ae4:	b5c0      	push	{r6, r7, lr}
 8000ae6:	0a49      	lsrs	r1, r1, #9
 8000ae8:	0f47      	lsrs	r7, r0, #29
 8000aea:	005e      	lsls	r6, r3, #1
 8000aec:	4339      	orrs	r1, r7
 8000aee:	031f      	lsls	r7, r3, #12
 8000af0:	0fdb      	lsrs	r3, r3, #31
 8000af2:	469c      	mov	ip, r3
 8000af4:	0065      	lsls	r5, r4, #1
 8000af6:	0a7b      	lsrs	r3, r7, #9
 8000af8:	0f57      	lsrs	r7, r2, #29
 8000afa:	431f      	orrs	r7, r3
 8000afc:	0d6d      	lsrs	r5, r5, #21
 8000afe:	0fe4      	lsrs	r4, r4, #31
 8000b00:	0d76      	lsrs	r6, r6, #21
 8000b02:	46a1      	mov	r9, r4
 8000b04:	00c0      	lsls	r0, r0, #3
 8000b06:	46b8      	mov	r8, r7
 8000b08:	00d2      	lsls	r2, r2, #3
 8000b0a:	1bab      	subs	r3, r5, r6
 8000b0c:	4564      	cmp	r4, ip
 8000b0e:	d07b      	beq.n	8000c08 <__aeabi_dadd+0x130>
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	dd5f      	ble.n	8000bd4 <__aeabi_dadd+0xfc>
 8000b14:	2e00      	cmp	r6, #0
 8000b16:	d000      	beq.n	8000b1a <__aeabi_dadd+0x42>
 8000b18:	e0a4      	b.n	8000c64 <__aeabi_dadd+0x18c>
 8000b1a:	003e      	movs	r6, r7
 8000b1c:	4316      	orrs	r6, r2
 8000b1e:	d100      	bne.n	8000b22 <__aeabi_dadd+0x4a>
 8000b20:	e112      	b.n	8000d48 <__aeabi_dadd+0x270>
 8000b22:	1e5e      	subs	r6, r3, #1
 8000b24:	2e00      	cmp	r6, #0
 8000b26:	d000      	beq.n	8000b2a <__aeabi_dadd+0x52>
 8000b28:	e19e      	b.n	8000e68 <__aeabi_dadd+0x390>
 8000b2a:	1a87      	subs	r7, r0, r2
 8000b2c:	4643      	mov	r3, r8
 8000b2e:	42b8      	cmp	r0, r7
 8000b30:	4180      	sbcs	r0, r0
 8000b32:	2501      	movs	r5, #1
 8000b34:	1ac9      	subs	r1, r1, r3
 8000b36:	4240      	negs	r0, r0
 8000b38:	1a09      	subs	r1, r1, r0
 8000b3a:	020b      	lsls	r3, r1, #8
 8000b3c:	d400      	bmi.n	8000b40 <__aeabi_dadd+0x68>
 8000b3e:	e131      	b.n	8000da4 <__aeabi_dadd+0x2cc>
 8000b40:	0249      	lsls	r1, r1, #9
 8000b42:	0a4e      	lsrs	r6, r1, #9
 8000b44:	2e00      	cmp	r6, #0
 8000b46:	d100      	bne.n	8000b4a <__aeabi_dadd+0x72>
 8000b48:	e16e      	b.n	8000e28 <__aeabi_dadd+0x350>
 8000b4a:	0030      	movs	r0, r6
 8000b4c:	f001 fd98 	bl	8002680 <__clzsi2>
 8000b50:	0003      	movs	r3, r0
 8000b52:	3b08      	subs	r3, #8
 8000b54:	2b1f      	cmp	r3, #31
 8000b56:	dd00      	ble.n	8000b5a <__aeabi_dadd+0x82>
 8000b58:	e161      	b.n	8000e1e <__aeabi_dadd+0x346>
 8000b5a:	2220      	movs	r2, #32
 8000b5c:	0039      	movs	r1, r7
 8000b5e:	1ad2      	subs	r2, r2, r3
 8000b60:	409e      	lsls	r6, r3
 8000b62:	40d1      	lsrs	r1, r2
 8000b64:	409f      	lsls	r7, r3
 8000b66:	430e      	orrs	r6, r1
 8000b68:	429d      	cmp	r5, r3
 8000b6a:	dd00      	ble.n	8000b6e <__aeabi_dadd+0x96>
 8000b6c:	e151      	b.n	8000e12 <__aeabi_dadd+0x33a>
 8000b6e:	1b5d      	subs	r5, r3, r5
 8000b70:	1c6b      	adds	r3, r5, #1
 8000b72:	2b1f      	cmp	r3, #31
 8000b74:	dd00      	ble.n	8000b78 <__aeabi_dadd+0xa0>
 8000b76:	e17c      	b.n	8000e72 <__aeabi_dadd+0x39a>
 8000b78:	2120      	movs	r1, #32
 8000b7a:	1ac9      	subs	r1, r1, r3
 8000b7c:	003d      	movs	r5, r7
 8000b7e:	0030      	movs	r0, r6
 8000b80:	408f      	lsls	r7, r1
 8000b82:	4088      	lsls	r0, r1
 8000b84:	40dd      	lsrs	r5, r3
 8000b86:	1e79      	subs	r1, r7, #1
 8000b88:	418f      	sbcs	r7, r1
 8000b8a:	0031      	movs	r1, r6
 8000b8c:	2207      	movs	r2, #7
 8000b8e:	4328      	orrs	r0, r5
 8000b90:	40d9      	lsrs	r1, r3
 8000b92:	2500      	movs	r5, #0
 8000b94:	4307      	orrs	r7, r0
 8000b96:	403a      	ands	r2, r7
 8000b98:	2a00      	cmp	r2, #0
 8000b9a:	d009      	beq.n	8000bb0 <__aeabi_dadd+0xd8>
 8000b9c:	230f      	movs	r3, #15
 8000b9e:	403b      	ands	r3, r7
 8000ba0:	2b04      	cmp	r3, #4
 8000ba2:	d005      	beq.n	8000bb0 <__aeabi_dadd+0xd8>
 8000ba4:	1d3b      	adds	r3, r7, #4
 8000ba6:	42bb      	cmp	r3, r7
 8000ba8:	41bf      	sbcs	r7, r7
 8000baa:	427f      	negs	r7, r7
 8000bac:	19c9      	adds	r1, r1, r7
 8000bae:	001f      	movs	r7, r3
 8000bb0:	020b      	lsls	r3, r1, #8
 8000bb2:	d400      	bmi.n	8000bb6 <__aeabi_dadd+0xde>
 8000bb4:	e226      	b.n	8001004 <__aeabi_dadd+0x52c>
 8000bb6:	1c6a      	adds	r2, r5, #1
 8000bb8:	4bc6      	ldr	r3, [pc, #792]	; (8000ed4 <__aeabi_dadd+0x3fc>)
 8000bba:	0555      	lsls	r5, r2, #21
 8000bbc:	0d6d      	lsrs	r5, r5, #21
 8000bbe:	429a      	cmp	r2, r3
 8000bc0:	d100      	bne.n	8000bc4 <__aeabi_dadd+0xec>
 8000bc2:	e106      	b.n	8000dd2 <__aeabi_dadd+0x2fa>
 8000bc4:	4ac4      	ldr	r2, [pc, #784]	; (8000ed8 <__aeabi_dadd+0x400>)
 8000bc6:	08ff      	lsrs	r7, r7, #3
 8000bc8:	400a      	ands	r2, r1
 8000bca:	0753      	lsls	r3, r2, #29
 8000bcc:	0252      	lsls	r2, r2, #9
 8000bce:	433b      	orrs	r3, r7
 8000bd0:	0b12      	lsrs	r2, r2, #12
 8000bd2:	e08e      	b.n	8000cf2 <__aeabi_dadd+0x21a>
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d000      	beq.n	8000bda <__aeabi_dadd+0x102>
 8000bd8:	e0b8      	b.n	8000d4c <__aeabi_dadd+0x274>
 8000bda:	1c6b      	adds	r3, r5, #1
 8000bdc:	055b      	lsls	r3, r3, #21
 8000bde:	0d5b      	lsrs	r3, r3, #21
 8000be0:	2b01      	cmp	r3, #1
 8000be2:	dc00      	bgt.n	8000be6 <__aeabi_dadd+0x10e>
 8000be4:	e130      	b.n	8000e48 <__aeabi_dadd+0x370>
 8000be6:	1a87      	subs	r7, r0, r2
 8000be8:	4643      	mov	r3, r8
 8000bea:	42b8      	cmp	r0, r7
 8000bec:	41b6      	sbcs	r6, r6
 8000bee:	1acb      	subs	r3, r1, r3
 8000bf0:	4276      	negs	r6, r6
 8000bf2:	1b9e      	subs	r6, r3, r6
 8000bf4:	0233      	lsls	r3, r6, #8
 8000bf6:	d500      	bpl.n	8000bfa <__aeabi_dadd+0x122>
 8000bf8:	e14c      	b.n	8000e94 <__aeabi_dadd+0x3bc>
 8000bfa:	003b      	movs	r3, r7
 8000bfc:	4333      	orrs	r3, r6
 8000bfe:	d1a1      	bne.n	8000b44 <__aeabi_dadd+0x6c>
 8000c00:	2200      	movs	r2, #0
 8000c02:	2400      	movs	r4, #0
 8000c04:	2500      	movs	r5, #0
 8000c06:	e070      	b.n	8000cea <__aeabi_dadd+0x212>
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	dc00      	bgt.n	8000c0e <__aeabi_dadd+0x136>
 8000c0c:	e0e5      	b.n	8000dda <__aeabi_dadd+0x302>
 8000c0e:	2e00      	cmp	r6, #0
 8000c10:	d100      	bne.n	8000c14 <__aeabi_dadd+0x13c>
 8000c12:	e083      	b.n	8000d1c <__aeabi_dadd+0x244>
 8000c14:	4eaf      	ldr	r6, [pc, #700]	; (8000ed4 <__aeabi_dadd+0x3fc>)
 8000c16:	42b5      	cmp	r5, r6
 8000c18:	d060      	beq.n	8000cdc <__aeabi_dadd+0x204>
 8000c1a:	2680      	movs	r6, #128	; 0x80
 8000c1c:	0436      	lsls	r6, r6, #16
 8000c1e:	4337      	orrs	r7, r6
 8000c20:	46b8      	mov	r8, r7
 8000c22:	2b38      	cmp	r3, #56	; 0x38
 8000c24:	dc00      	bgt.n	8000c28 <__aeabi_dadd+0x150>
 8000c26:	e13e      	b.n	8000ea6 <__aeabi_dadd+0x3ce>
 8000c28:	4643      	mov	r3, r8
 8000c2a:	4313      	orrs	r3, r2
 8000c2c:	001f      	movs	r7, r3
 8000c2e:	1e7a      	subs	r2, r7, #1
 8000c30:	4197      	sbcs	r7, r2
 8000c32:	183f      	adds	r7, r7, r0
 8000c34:	4287      	cmp	r7, r0
 8000c36:	4180      	sbcs	r0, r0
 8000c38:	4240      	negs	r0, r0
 8000c3a:	1809      	adds	r1, r1, r0
 8000c3c:	020b      	lsls	r3, r1, #8
 8000c3e:	d400      	bmi.n	8000c42 <__aeabi_dadd+0x16a>
 8000c40:	e0b0      	b.n	8000da4 <__aeabi_dadd+0x2cc>
 8000c42:	4ba4      	ldr	r3, [pc, #656]	; (8000ed4 <__aeabi_dadd+0x3fc>)
 8000c44:	3501      	adds	r5, #1
 8000c46:	429d      	cmp	r5, r3
 8000c48:	d100      	bne.n	8000c4c <__aeabi_dadd+0x174>
 8000c4a:	e0c3      	b.n	8000dd4 <__aeabi_dadd+0x2fc>
 8000c4c:	4aa2      	ldr	r2, [pc, #648]	; (8000ed8 <__aeabi_dadd+0x400>)
 8000c4e:	087b      	lsrs	r3, r7, #1
 8000c50:	400a      	ands	r2, r1
 8000c52:	2101      	movs	r1, #1
 8000c54:	400f      	ands	r7, r1
 8000c56:	431f      	orrs	r7, r3
 8000c58:	0851      	lsrs	r1, r2, #1
 8000c5a:	07d3      	lsls	r3, r2, #31
 8000c5c:	2207      	movs	r2, #7
 8000c5e:	431f      	orrs	r7, r3
 8000c60:	403a      	ands	r2, r7
 8000c62:	e799      	b.n	8000b98 <__aeabi_dadd+0xc0>
 8000c64:	4e9b      	ldr	r6, [pc, #620]	; (8000ed4 <__aeabi_dadd+0x3fc>)
 8000c66:	42b5      	cmp	r5, r6
 8000c68:	d038      	beq.n	8000cdc <__aeabi_dadd+0x204>
 8000c6a:	2680      	movs	r6, #128	; 0x80
 8000c6c:	0436      	lsls	r6, r6, #16
 8000c6e:	4337      	orrs	r7, r6
 8000c70:	46b8      	mov	r8, r7
 8000c72:	2b38      	cmp	r3, #56	; 0x38
 8000c74:	dd00      	ble.n	8000c78 <__aeabi_dadd+0x1a0>
 8000c76:	e0dc      	b.n	8000e32 <__aeabi_dadd+0x35a>
 8000c78:	2b1f      	cmp	r3, #31
 8000c7a:	dc00      	bgt.n	8000c7e <__aeabi_dadd+0x1a6>
 8000c7c:	e130      	b.n	8000ee0 <__aeabi_dadd+0x408>
 8000c7e:	001e      	movs	r6, r3
 8000c80:	4647      	mov	r7, r8
 8000c82:	3e20      	subs	r6, #32
 8000c84:	40f7      	lsrs	r7, r6
 8000c86:	46bc      	mov	ip, r7
 8000c88:	2b20      	cmp	r3, #32
 8000c8a:	d004      	beq.n	8000c96 <__aeabi_dadd+0x1be>
 8000c8c:	2640      	movs	r6, #64	; 0x40
 8000c8e:	1af3      	subs	r3, r6, r3
 8000c90:	4646      	mov	r6, r8
 8000c92:	409e      	lsls	r6, r3
 8000c94:	4332      	orrs	r2, r6
 8000c96:	0017      	movs	r7, r2
 8000c98:	4663      	mov	r3, ip
 8000c9a:	1e7a      	subs	r2, r7, #1
 8000c9c:	4197      	sbcs	r7, r2
 8000c9e:	431f      	orrs	r7, r3
 8000ca0:	e0cc      	b.n	8000e3c <__aeabi_dadd+0x364>
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d100      	bne.n	8000ca8 <__aeabi_dadd+0x1d0>
 8000ca6:	e204      	b.n	80010b2 <__aeabi_dadd+0x5da>
 8000ca8:	4643      	mov	r3, r8
 8000caa:	4313      	orrs	r3, r2
 8000cac:	d100      	bne.n	8000cb0 <__aeabi_dadd+0x1d8>
 8000cae:	e159      	b.n	8000f64 <__aeabi_dadd+0x48c>
 8000cb0:	074b      	lsls	r3, r1, #29
 8000cb2:	08c0      	lsrs	r0, r0, #3
 8000cb4:	4318      	orrs	r0, r3
 8000cb6:	2380      	movs	r3, #128	; 0x80
 8000cb8:	08c9      	lsrs	r1, r1, #3
 8000cba:	031b      	lsls	r3, r3, #12
 8000cbc:	4219      	tst	r1, r3
 8000cbe:	d008      	beq.n	8000cd2 <__aeabi_dadd+0x1fa>
 8000cc0:	4645      	mov	r5, r8
 8000cc2:	08ed      	lsrs	r5, r5, #3
 8000cc4:	421d      	tst	r5, r3
 8000cc6:	d104      	bne.n	8000cd2 <__aeabi_dadd+0x1fa>
 8000cc8:	4643      	mov	r3, r8
 8000cca:	08d0      	lsrs	r0, r2, #3
 8000ccc:	0759      	lsls	r1, r3, #29
 8000cce:	4308      	orrs	r0, r1
 8000cd0:	0029      	movs	r1, r5
 8000cd2:	0f42      	lsrs	r2, r0, #29
 8000cd4:	00c9      	lsls	r1, r1, #3
 8000cd6:	4d7f      	ldr	r5, [pc, #508]	; (8000ed4 <__aeabi_dadd+0x3fc>)
 8000cd8:	4311      	orrs	r1, r2
 8000cda:	00c0      	lsls	r0, r0, #3
 8000cdc:	074b      	lsls	r3, r1, #29
 8000cde:	08ca      	lsrs	r2, r1, #3
 8000ce0:	497c      	ldr	r1, [pc, #496]	; (8000ed4 <__aeabi_dadd+0x3fc>)
 8000ce2:	08c0      	lsrs	r0, r0, #3
 8000ce4:	4303      	orrs	r3, r0
 8000ce6:	428d      	cmp	r5, r1
 8000ce8:	d068      	beq.n	8000dbc <__aeabi_dadd+0x2e4>
 8000cea:	0312      	lsls	r2, r2, #12
 8000cec:	056d      	lsls	r5, r5, #21
 8000cee:	0b12      	lsrs	r2, r2, #12
 8000cf0:	0d6d      	lsrs	r5, r5, #21
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	0312      	lsls	r2, r2, #12
 8000cf6:	0018      	movs	r0, r3
 8000cf8:	0b13      	lsrs	r3, r2, #12
 8000cfa:	0d0a      	lsrs	r2, r1, #20
 8000cfc:	0512      	lsls	r2, r2, #20
 8000cfe:	431a      	orrs	r2, r3
 8000d00:	4b76      	ldr	r3, [pc, #472]	; (8000edc <__aeabi_dadd+0x404>)
 8000d02:	052d      	lsls	r5, r5, #20
 8000d04:	4013      	ands	r3, r2
 8000d06:	432b      	orrs	r3, r5
 8000d08:	005b      	lsls	r3, r3, #1
 8000d0a:	07e4      	lsls	r4, r4, #31
 8000d0c:	085b      	lsrs	r3, r3, #1
 8000d0e:	4323      	orrs	r3, r4
 8000d10:	0019      	movs	r1, r3
 8000d12:	bc1c      	pop	{r2, r3, r4}
 8000d14:	4690      	mov	r8, r2
 8000d16:	4699      	mov	r9, r3
 8000d18:	46a2      	mov	sl, r4
 8000d1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d1c:	003e      	movs	r6, r7
 8000d1e:	4316      	orrs	r6, r2
 8000d20:	d012      	beq.n	8000d48 <__aeabi_dadd+0x270>
 8000d22:	1e5e      	subs	r6, r3, #1
 8000d24:	2e00      	cmp	r6, #0
 8000d26:	d000      	beq.n	8000d2a <__aeabi_dadd+0x252>
 8000d28:	e100      	b.n	8000f2c <__aeabi_dadd+0x454>
 8000d2a:	1887      	adds	r7, r0, r2
 8000d2c:	4287      	cmp	r7, r0
 8000d2e:	4180      	sbcs	r0, r0
 8000d30:	4441      	add	r1, r8
 8000d32:	4240      	negs	r0, r0
 8000d34:	1809      	adds	r1, r1, r0
 8000d36:	2501      	movs	r5, #1
 8000d38:	020b      	lsls	r3, r1, #8
 8000d3a:	d533      	bpl.n	8000da4 <__aeabi_dadd+0x2cc>
 8000d3c:	2502      	movs	r5, #2
 8000d3e:	e785      	b.n	8000c4c <__aeabi_dadd+0x174>
 8000d40:	4664      	mov	r4, ip
 8000d42:	0033      	movs	r3, r6
 8000d44:	4641      	mov	r1, r8
 8000d46:	0010      	movs	r0, r2
 8000d48:	001d      	movs	r5, r3
 8000d4a:	e7c7      	b.n	8000cdc <__aeabi_dadd+0x204>
 8000d4c:	2d00      	cmp	r5, #0
 8000d4e:	d000      	beq.n	8000d52 <__aeabi_dadd+0x27a>
 8000d50:	e0da      	b.n	8000f08 <__aeabi_dadd+0x430>
 8000d52:	000c      	movs	r4, r1
 8000d54:	4304      	orrs	r4, r0
 8000d56:	d0f3      	beq.n	8000d40 <__aeabi_dadd+0x268>
 8000d58:	1c5c      	adds	r4, r3, #1
 8000d5a:	d100      	bne.n	8000d5e <__aeabi_dadd+0x286>
 8000d5c:	e19f      	b.n	800109e <__aeabi_dadd+0x5c6>
 8000d5e:	4c5d      	ldr	r4, [pc, #372]	; (8000ed4 <__aeabi_dadd+0x3fc>)
 8000d60:	42a6      	cmp	r6, r4
 8000d62:	d100      	bne.n	8000d66 <__aeabi_dadd+0x28e>
 8000d64:	e12f      	b.n	8000fc6 <__aeabi_dadd+0x4ee>
 8000d66:	43db      	mvns	r3, r3
 8000d68:	2b38      	cmp	r3, #56	; 0x38
 8000d6a:	dd00      	ble.n	8000d6e <__aeabi_dadd+0x296>
 8000d6c:	e166      	b.n	800103c <__aeabi_dadd+0x564>
 8000d6e:	2b1f      	cmp	r3, #31
 8000d70:	dd00      	ble.n	8000d74 <__aeabi_dadd+0x29c>
 8000d72:	e183      	b.n	800107c <__aeabi_dadd+0x5a4>
 8000d74:	2420      	movs	r4, #32
 8000d76:	0005      	movs	r5, r0
 8000d78:	1ae4      	subs	r4, r4, r3
 8000d7a:	000f      	movs	r7, r1
 8000d7c:	40dd      	lsrs	r5, r3
 8000d7e:	40d9      	lsrs	r1, r3
 8000d80:	40a0      	lsls	r0, r4
 8000d82:	4643      	mov	r3, r8
 8000d84:	40a7      	lsls	r7, r4
 8000d86:	1a5b      	subs	r3, r3, r1
 8000d88:	1e44      	subs	r4, r0, #1
 8000d8a:	41a0      	sbcs	r0, r4
 8000d8c:	4698      	mov	r8, r3
 8000d8e:	432f      	orrs	r7, r5
 8000d90:	4338      	orrs	r0, r7
 8000d92:	1a17      	subs	r7, r2, r0
 8000d94:	42ba      	cmp	r2, r7
 8000d96:	4192      	sbcs	r2, r2
 8000d98:	4643      	mov	r3, r8
 8000d9a:	4252      	negs	r2, r2
 8000d9c:	1a99      	subs	r1, r3, r2
 8000d9e:	4664      	mov	r4, ip
 8000da0:	0035      	movs	r5, r6
 8000da2:	e6ca      	b.n	8000b3a <__aeabi_dadd+0x62>
 8000da4:	2207      	movs	r2, #7
 8000da6:	403a      	ands	r2, r7
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	d000      	beq.n	8000dae <__aeabi_dadd+0x2d6>
 8000dac:	e6f6      	b.n	8000b9c <__aeabi_dadd+0xc4>
 8000dae:	074b      	lsls	r3, r1, #29
 8000db0:	08ca      	lsrs	r2, r1, #3
 8000db2:	4948      	ldr	r1, [pc, #288]	; (8000ed4 <__aeabi_dadd+0x3fc>)
 8000db4:	08ff      	lsrs	r7, r7, #3
 8000db6:	433b      	orrs	r3, r7
 8000db8:	428d      	cmp	r5, r1
 8000dba:	d196      	bne.n	8000cea <__aeabi_dadd+0x212>
 8000dbc:	0019      	movs	r1, r3
 8000dbe:	4311      	orrs	r1, r2
 8000dc0:	d100      	bne.n	8000dc4 <__aeabi_dadd+0x2ec>
 8000dc2:	e19e      	b.n	8001102 <__aeabi_dadd+0x62a>
 8000dc4:	2180      	movs	r1, #128	; 0x80
 8000dc6:	0309      	lsls	r1, r1, #12
 8000dc8:	430a      	orrs	r2, r1
 8000dca:	0312      	lsls	r2, r2, #12
 8000dcc:	0b12      	lsrs	r2, r2, #12
 8000dce:	4d41      	ldr	r5, [pc, #260]	; (8000ed4 <__aeabi_dadd+0x3fc>)
 8000dd0:	e78f      	b.n	8000cf2 <__aeabi_dadd+0x21a>
 8000dd2:	0015      	movs	r5, r2
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	e78b      	b.n	8000cf2 <__aeabi_dadd+0x21a>
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d000      	beq.n	8000de0 <__aeabi_dadd+0x308>
 8000dde:	e0c7      	b.n	8000f70 <__aeabi_dadd+0x498>
 8000de0:	1c6b      	adds	r3, r5, #1
 8000de2:	055f      	lsls	r7, r3, #21
 8000de4:	0d7f      	lsrs	r7, r7, #21
 8000de6:	2f01      	cmp	r7, #1
 8000de8:	dc00      	bgt.n	8000dec <__aeabi_dadd+0x314>
 8000dea:	e0f1      	b.n	8000fd0 <__aeabi_dadd+0x4f8>
 8000dec:	4d39      	ldr	r5, [pc, #228]	; (8000ed4 <__aeabi_dadd+0x3fc>)
 8000dee:	42ab      	cmp	r3, r5
 8000df0:	d100      	bne.n	8000df4 <__aeabi_dadd+0x31c>
 8000df2:	e0b9      	b.n	8000f68 <__aeabi_dadd+0x490>
 8000df4:	1885      	adds	r5, r0, r2
 8000df6:	000a      	movs	r2, r1
 8000df8:	4285      	cmp	r5, r0
 8000dfa:	4189      	sbcs	r1, r1
 8000dfc:	4442      	add	r2, r8
 8000dfe:	4249      	negs	r1, r1
 8000e00:	1851      	adds	r1, r2, r1
 8000e02:	2207      	movs	r2, #7
 8000e04:	07cf      	lsls	r7, r1, #31
 8000e06:	086d      	lsrs	r5, r5, #1
 8000e08:	432f      	orrs	r7, r5
 8000e0a:	0849      	lsrs	r1, r1, #1
 8000e0c:	403a      	ands	r2, r7
 8000e0e:	001d      	movs	r5, r3
 8000e10:	e6c2      	b.n	8000b98 <__aeabi_dadd+0xc0>
 8000e12:	2207      	movs	r2, #7
 8000e14:	4930      	ldr	r1, [pc, #192]	; (8000ed8 <__aeabi_dadd+0x400>)
 8000e16:	1aed      	subs	r5, r5, r3
 8000e18:	4031      	ands	r1, r6
 8000e1a:	403a      	ands	r2, r7
 8000e1c:	e6bc      	b.n	8000b98 <__aeabi_dadd+0xc0>
 8000e1e:	003e      	movs	r6, r7
 8000e20:	3828      	subs	r0, #40	; 0x28
 8000e22:	4086      	lsls	r6, r0
 8000e24:	2700      	movs	r7, #0
 8000e26:	e69f      	b.n	8000b68 <__aeabi_dadd+0x90>
 8000e28:	0038      	movs	r0, r7
 8000e2a:	f001 fc29 	bl	8002680 <__clzsi2>
 8000e2e:	3020      	adds	r0, #32
 8000e30:	e68e      	b.n	8000b50 <__aeabi_dadd+0x78>
 8000e32:	4643      	mov	r3, r8
 8000e34:	4313      	orrs	r3, r2
 8000e36:	001f      	movs	r7, r3
 8000e38:	1e7a      	subs	r2, r7, #1
 8000e3a:	4197      	sbcs	r7, r2
 8000e3c:	1bc7      	subs	r7, r0, r7
 8000e3e:	42b8      	cmp	r0, r7
 8000e40:	4180      	sbcs	r0, r0
 8000e42:	4240      	negs	r0, r0
 8000e44:	1a09      	subs	r1, r1, r0
 8000e46:	e678      	b.n	8000b3a <__aeabi_dadd+0x62>
 8000e48:	000e      	movs	r6, r1
 8000e4a:	003b      	movs	r3, r7
 8000e4c:	4306      	orrs	r6, r0
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	2d00      	cmp	r5, #0
 8000e52:	d161      	bne.n	8000f18 <__aeabi_dadd+0x440>
 8000e54:	2e00      	cmp	r6, #0
 8000e56:	d000      	beq.n	8000e5a <__aeabi_dadd+0x382>
 8000e58:	e0f4      	b.n	8001044 <__aeabi_dadd+0x56c>
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d100      	bne.n	8000e60 <__aeabi_dadd+0x388>
 8000e5e:	e11b      	b.n	8001098 <__aeabi_dadd+0x5c0>
 8000e60:	4664      	mov	r4, ip
 8000e62:	0039      	movs	r1, r7
 8000e64:	0010      	movs	r0, r2
 8000e66:	e739      	b.n	8000cdc <__aeabi_dadd+0x204>
 8000e68:	4f1a      	ldr	r7, [pc, #104]	; (8000ed4 <__aeabi_dadd+0x3fc>)
 8000e6a:	42bb      	cmp	r3, r7
 8000e6c:	d07a      	beq.n	8000f64 <__aeabi_dadd+0x48c>
 8000e6e:	0033      	movs	r3, r6
 8000e70:	e6ff      	b.n	8000c72 <__aeabi_dadd+0x19a>
 8000e72:	0030      	movs	r0, r6
 8000e74:	3d1f      	subs	r5, #31
 8000e76:	40e8      	lsrs	r0, r5
 8000e78:	2b20      	cmp	r3, #32
 8000e7a:	d003      	beq.n	8000e84 <__aeabi_dadd+0x3ac>
 8000e7c:	2140      	movs	r1, #64	; 0x40
 8000e7e:	1acb      	subs	r3, r1, r3
 8000e80:	409e      	lsls	r6, r3
 8000e82:	4337      	orrs	r7, r6
 8000e84:	1e7b      	subs	r3, r7, #1
 8000e86:	419f      	sbcs	r7, r3
 8000e88:	2207      	movs	r2, #7
 8000e8a:	4307      	orrs	r7, r0
 8000e8c:	403a      	ands	r2, r7
 8000e8e:	2100      	movs	r1, #0
 8000e90:	2500      	movs	r5, #0
 8000e92:	e789      	b.n	8000da8 <__aeabi_dadd+0x2d0>
 8000e94:	1a17      	subs	r7, r2, r0
 8000e96:	4643      	mov	r3, r8
 8000e98:	42ba      	cmp	r2, r7
 8000e9a:	41b6      	sbcs	r6, r6
 8000e9c:	1a59      	subs	r1, r3, r1
 8000e9e:	4276      	negs	r6, r6
 8000ea0:	1b8e      	subs	r6, r1, r6
 8000ea2:	4664      	mov	r4, ip
 8000ea4:	e64e      	b.n	8000b44 <__aeabi_dadd+0x6c>
 8000ea6:	2b1f      	cmp	r3, #31
 8000ea8:	dd00      	ble.n	8000eac <__aeabi_dadd+0x3d4>
 8000eaa:	e0ad      	b.n	8001008 <__aeabi_dadd+0x530>
 8000eac:	2620      	movs	r6, #32
 8000eae:	4647      	mov	r7, r8
 8000eb0:	1af6      	subs	r6, r6, r3
 8000eb2:	40b7      	lsls	r7, r6
 8000eb4:	46b9      	mov	r9, r7
 8000eb6:	0017      	movs	r7, r2
 8000eb8:	46b2      	mov	sl, r6
 8000eba:	40df      	lsrs	r7, r3
 8000ebc:	464e      	mov	r6, r9
 8000ebe:	433e      	orrs	r6, r7
 8000ec0:	0037      	movs	r7, r6
 8000ec2:	4656      	mov	r6, sl
 8000ec4:	40b2      	lsls	r2, r6
 8000ec6:	1e56      	subs	r6, r2, #1
 8000ec8:	41b2      	sbcs	r2, r6
 8000eca:	4317      	orrs	r7, r2
 8000ecc:	4642      	mov	r2, r8
 8000ece:	40da      	lsrs	r2, r3
 8000ed0:	1889      	adds	r1, r1, r2
 8000ed2:	e6ae      	b.n	8000c32 <__aeabi_dadd+0x15a>
 8000ed4:	000007ff 	.word	0x000007ff
 8000ed8:	ff7fffff 	.word	0xff7fffff
 8000edc:	800fffff 	.word	0x800fffff
 8000ee0:	2620      	movs	r6, #32
 8000ee2:	4647      	mov	r7, r8
 8000ee4:	1af6      	subs	r6, r6, r3
 8000ee6:	40b7      	lsls	r7, r6
 8000ee8:	46b9      	mov	r9, r7
 8000eea:	0017      	movs	r7, r2
 8000eec:	46b2      	mov	sl, r6
 8000eee:	40df      	lsrs	r7, r3
 8000ef0:	464e      	mov	r6, r9
 8000ef2:	433e      	orrs	r6, r7
 8000ef4:	0037      	movs	r7, r6
 8000ef6:	4656      	mov	r6, sl
 8000ef8:	40b2      	lsls	r2, r6
 8000efa:	1e56      	subs	r6, r2, #1
 8000efc:	41b2      	sbcs	r2, r6
 8000efe:	4317      	orrs	r7, r2
 8000f00:	4642      	mov	r2, r8
 8000f02:	40da      	lsrs	r2, r3
 8000f04:	1a89      	subs	r1, r1, r2
 8000f06:	e799      	b.n	8000e3c <__aeabi_dadd+0x364>
 8000f08:	4c7f      	ldr	r4, [pc, #508]	; (8001108 <__aeabi_dadd+0x630>)
 8000f0a:	42a6      	cmp	r6, r4
 8000f0c:	d05b      	beq.n	8000fc6 <__aeabi_dadd+0x4ee>
 8000f0e:	2480      	movs	r4, #128	; 0x80
 8000f10:	0424      	lsls	r4, r4, #16
 8000f12:	425b      	negs	r3, r3
 8000f14:	4321      	orrs	r1, r4
 8000f16:	e727      	b.n	8000d68 <__aeabi_dadd+0x290>
 8000f18:	2e00      	cmp	r6, #0
 8000f1a:	d10c      	bne.n	8000f36 <__aeabi_dadd+0x45e>
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d100      	bne.n	8000f22 <__aeabi_dadd+0x44a>
 8000f20:	e0cb      	b.n	80010ba <__aeabi_dadd+0x5e2>
 8000f22:	4664      	mov	r4, ip
 8000f24:	0039      	movs	r1, r7
 8000f26:	0010      	movs	r0, r2
 8000f28:	4d77      	ldr	r5, [pc, #476]	; (8001108 <__aeabi_dadd+0x630>)
 8000f2a:	e6d7      	b.n	8000cdc <__aeabi_dadd+0x204>
 8000f2c:	4f76      	ldr	r7, [pc, #472]	; (8001108 <__aeabi_dadd+0x630>)
 8000f2e:	42bb      	cmp	r3, r7
 8000f30:	d018      	beq.n	8000f64 <__aeabi_dadd+0x48c>
 8000f32:	0033      	movs	r3, r6
 8000f34:	e675      	b.n	8000c22 <__aeabi_dadd+0x14a>
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d014      	beq.n	8000f64 <__aeabi_dadd+0x48c>
 8000f3a:	074b      	lsls	r3, r1, #29
 8000f3c:	08c0      	lsrs	r0, r0, #3
 8000f3e:	4318      	orrs	r0, r3
 8000f40:	2380      	movs	r3, #128	; 0x80
 8000f42:	08c9      	lsrs	r1, r1, #3
 8000f44:	031b      	lsls	r3, r3, #12
 8000f46:	4219      	tst	r1, r3
 8000f48:	d007      	beq.n	8000f5a <__aeabi_dadd+0x482>
 8000f4a:	08fc      	lsrs	r4, r7, #3
 8000f4c:	421c      	tst	r4, r3
 8000f4e:	d104      	bne.n	8000f5a <__aeabi_dadd+0x482>
 8000f50:	0779      	lsls	r1, r7, #29
 8000f52:	08d0      	lsrs	r0, r2, #3
 8000f54:	4308      	orrs	r0, r1
 8000f56:	46e1      	mov	r9, ip
 8000f58:	0021      	movs	r1, r4
 8000f5a:	464c      	mov	r4, r9
 8000f5c:	0f42      	lsrs	r2, r0, #29
 8000f5e:	00c9      	lsls	r1, r1, #3
 8000f60:	4311      	orrs	r1, r2
 8000f62:	00c0      	lsls	r0, r0, #3
 8000f64:	4d68      	ldr	r5, [pc, #416]	; (8001108 <__aeabi_dadd+0x630>)
 8000f66:	e6b9      	b.n	8000cdc <__aeabi_dadd+0x204>
 8000f68:	001d      	movs	r5, r3
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	e6c0      	b.n	8000cf2 <__aeabi_dadd+0x21a>
 8000f70:	2d00      	cmp	r5, #0
 8000f72:	d15b      	bne.n	800102c <__aeabi_dadd+0x554>
 8000f74:	000d      	movs	r5, r1
 8000f76:	4305      	orrs	r5, r0
 8000f78:	d100      	bne.n	8000f7c <__aeabi_dadd+0x4a4>
 8000f7a:	e6e2      	b.n	8000d42 <__aeabi_dadd+0x26a>
 8000f7c:	1c5d      	adds	r5, r3, #1
 8000f7e:	d100      	bne.n	8000f82 <__aeabi_dadd+0x4aa>
 8000f80:	e0b0      	b.n	80010e4 <__aeabi_dadd+0x60c>
 8000f82:	4d61      	ldr	r5, [pc, #388]	; (8001108 <__aeabi_dadd+0x630>)
 8000f84:	42ae      	cmp	r6, r5
 8000f86:	d01f      	beq.n	8000fc8 <__aeabi_dadd+0x4f0>
 8000f88:	43db      	mvns	r3, r3
 8000f8a:	2b38      	cmp	r3, #56	; 0x38
 8000f8c:	dc71      	bgt.n	8001072 <__aeabi_dadd+0x59a>
 8000f8e:	2b1f      	cmp	r3, #31
 8000f90:	dd00      	ble.n	8000f94 <__aeabi_dadd+0x4bc>
 8000f92:	e096      	b.n	80010c2 <__aeabi_dadd+0x5ea>
 8000f94:	2520      	movs	r5, #32
 8000f96:	000f      	movs	r7, r1
 8000f98:	1aed      	subs	r5, r5, r3
 8000f9a:	40af      	lsls	r7, r5
 8000f9c:	46b9      	mov	r9, r7
 8000f9e:	0007      	movs	r7, r0
 8000fa0:	46aa      	mov	sl, r5
 8000fa2:	40df      	lsrs	r7, r3
 8000fa4:	464d      	mov	r5, r9
 8000fa6:	433d      	orrs	r5, r7
 8000fa8:	002f      	movs	r7, r5
 8000faa:	4655      	mov	r5, sl
 8000fac:	40a8      	lsls	r0, r5
 8000fae:	40d9      	lsrs	r1, r3
 8000fb0:	1e45      	subs	r5, r0, #1
 8000fb2:	41a8      	sbcs	r0, r5
 8000fb4:	4488      	add	r8, r1
 8000fb6:	4307      	orrs	r7, r0
 8000fb8:	18bf      	adds	r7, r7, r2
 8000fba:	4297      	cmp	r7, r2
 8000fbc:	4192      	sbcs	r2, r2
 8000fbe:	4251      	negs	r1, r2
 8000fc0:	4441      	add	r1, r8
 8000fc2:	0035      	movs	r5, r6
 8000fc4:	e63a      	b.n	8000c3c <__aeabi_dadd+0x164>
 8000fc6:	4664      	mov	r4, ip
 8000fc8:	0035      	movs	r5, r6
 8000fca:	4641      	mov	r1, r8
 8000fcc:	0010      	movs	r0, r2
 8000fce:	e685      	b.n	8000cdc <__aeabi_dadd+0x204>
 8000fd0:	000b      	movs	r3, r1
 8000fd2:	4303      	orrs	r3, r0
 8000fd4:	2d00      	cmp	r5, #0
 8000fd6:	d000      	beq.n	8000fda <__aeabi_dadd+0x502>
 8000fd8:	e663      	b.n	8000ca2 <__aeabi_dadd+0x1ca>
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d0f5      	beq.n	8000fca <__aeabi_dadd+0x4f2>
 8000fde:	4643      	mov	r3, r8
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	d100      	bne.n	8000fe6 <__aeabi_dadd+0x50e>
 8000fe4:	e67a      	b.n	8000cdc <__aeabi_dadd+0x204>
 8000fe6:	1887      	adds	r7, r0, r2
 8000fe8:	4287      	cmp	r7, r0
 8000fea:	4180      	sbcs	r0, r0
 8000fec:	2207      	movs	r2, #7
 8000fee:	4441      	add	r1, r8
 8000ff0:	4240      	negs	r0, r0
 8000ff2:	1809      	adds	r1, r1, r0
 8000ff4:	403a      	ands	r2, r7
 8000ff6:	020b      	lsls	r3, r1, #8
 8000ff8:	d400      	bmi.n	8000ffc <__aeabi_dadd+0x524>
 8000ffa:	e6d5      	b.n	8000da8 <__aeabi_dadd+0x2d0>
 8000ffc:	4b43      	ldr	r3, [pc, #268]	; (800110c <__aeabi_dadd+0x634>)
 8000ffe:	3501      	adds	r5, #1
 8001000:	4019      	ands	r1, r3
 8001002:	e5c9      	b.n	8000b98 <__aeabi_dadd+0xc0>
 8001004:	0038      	movs	r0, r7
 8001006:	e669      	b.n	8000cdc <__aeabi_dadd+0x204>
 8001008:	001e      	movs	r6, r3
 800100a:	4647      	mov	r7, r8
 800100c:	3e20      	subs	r6, #32
 800100e:	40f7      	lsrs	r7, r6
 8001010:	46bc      	mov	ip, r7
 8001012:	2b20      	cmp	r3, #32
 8001014:	d004      	beq.n	8001020 <__aeabi_dadd+0x548>
 8001016:	2640      	movs	r6, #64	; 0x40
 8001018:	1af3      	subs	r3, r6, r3
 800101a:	4646      	mov	r6, r8
 800101c:	409e      	lsls	r6, r3
 800101e:	4332      	orrs	r2, r6
 8001020:	0017      	movs	r7, r2
 8001022:	4663      	mov	r3, ip
 8001024:	1e7a      	subs	r2, r7, #1
 8001026:	4197      	sbcs	r7, r2
 8001028:	431f      	orrs	r7, r3
 800102a:	e602      	b.n	8000c32 <__aeabi_dadd+0x15a>
 800102c:	4d36      	ldr	r5, [pc, #216]	; (8001108 <__aeabi_dadd+0x630>)
 800102e:	42ae      	cmp	r6, r5
 8001030:	d0ca      	beq.n	8000fc8 <__aeabi_dadd+0x4f0>
 8001032:	2580      	movs	r5, #128	; 0x80
 8001034:	042d      	lsls	r5, r5, #16
 8001036:	425b      	negs	r3, r3
 8001038:	4329      	orrs	r1, r5
 800103a:	e7a6      	b.n	8000f8a <__aeabi_dadd+0x4b2>
 800103c:	4308      	orrs	r0, r1
 800103e:	1e41      	subs	r1, r0, #1
 8001040:	4188      	sbcs	r0, r1
 8001042:	e6a6      	b.n	8000d92 <__aeabi_dadd+0x2ba>
 8001044:	2b00      	cmp	r3, #0
 8001046:	d100      	bne.n	800104a <__aeabi_dadd+0x572>
 8001048:	e648      	b.n	8000cdc <__aeabi_dadd+0x204>
 800104a:	1a87      	subs	r7, r0, r2
 800104c:	4643      	mov	r3, r8
 800104e:	42b8      	cmp	r0, r7
 8001050:	41b6      	sbcs	r6, r6
 8001052:	1acb      	subs	r3, r1, r3
 8001054:	4276      	negs	r6, r6
 8001056:	1b9e      	subs	r6, r3, r6
 8001058:	0233      	lsls	r3, r6, #8
 800105a:	d54b      	bpl.n	80010f4 <__aeabi_dadd+0x61c>
 800105c:	1a17      	subs	r7, r2, r0
 800105e:	4643      	mov	r3, r8
 8001060:	42ba      	cmp	r2, r7
 8001062:	4192      	sbcs	r2, r2
 8001064:	1a59      	subs	r1, r3, r1
 8001066:	4252      	negs	r2, r2
 8001068:	1a89      	subs	r1, r1, r2
 800106a:	2207      	movs	r2, #7
 800106c:	4664      	mov	r4, ip
 800106e:	403a      	ands	r2, r7
 8001070:	e592      	b.n	8000b98 <__aeabi_dadd+0xc0>
 8001072:	4301      	orrs	r1, r0
 8001074:	000f      	movs	r7, r1
 8001076:	1e79      	subs	r1, r7, #1
 8001078:	418f      	sbcs	r7, r1
 800107a:	e79d      	b.n	8000fb8 <__aeabi_dadd+0x4e0>
 800107c:	001c      	movs	r4, r3
 800107e:	000f      	movs	r7, r1
 8001080:	3c20      	subs	r4, #32
 8001082:	40e7      	lsrs	r7, r4
 8001084:	2b20      	cmp	r3, #32
 8001086:	d003      	beq.n	8001090 <__aeabi_dadd+0x5b8>
 8001088:	2440      	movs	r4, #64	; 0x40
 800108a:	1ae3      	subs	r3, r4, r3
 800108c:	4099      	lsls	r1, r3
 800108e:	4308      	orrs	r0, r1
 8001090:	1e41      	subs	r1, r0, #1
 8001092:	4188      	sbcs	r0, r1
 8001094:	4338      	orrs	r0, r7
 8001096:	e67c      	b.n	8000d92 <__aeabi_dadd+0x2ba>
 8001098:	2200      	movs	r2, #0
 800109a:	2400      	movs	r4, #0
 800109c:	e625      	b.n	8000cea <__aeabi_dadd+0x212>
 800109e:	1a17      	subs	r7, r2, r0
 80010a0:	4643      	mov	r3, r8
 80010a2:	42ba      	cmp	r2, r7
 80010a4:	4192      	sbcs	r2, r2
 80010a6:	1a59      	subs	r1, r3, r1
 80010a8:	4252      	negs	r2, r2
 80010aa:	1a89      	subs	r1, r1, r2
 80010ac:	4664      	mov	r4, ip
 80010ae:	0035      	movs	r5, r6
 80010b0:	e543      	b.n	8000b3a <__aeabi_dadd+0x62>
 80010b2:	4641      	mov	r1, r8
 80010b4:	0010      	movs	r0, r2
 80010b6:	4d14      	ldr	r5, [pc, #80]	; (8001108 <__aeabi_dadd+0x630>)
 80010b8:	e610      	b.n	8000cdc <__aeabi_dadd+0x204>
 80010ba:	2280      	movs	r2, #128	; 0x80
 80010bc:	2400      	movs	r4, #0
 80010be:	0312      	lsls	r2, r2, #12
 80010c0:	e680      	b.n	8000dc4 <__aeabi_dadd+0x2ec>
 80010c2:	001d      	movs	r5, r3
 80010c4:	000f      	movs	r7, r1
 80010c6:	3d20      	subs	r5, #32
 80010c8:	40ef      	lsrs	r7, r5
 80010ca:	46bc      	mov	ip, r7
 80010cc:	2b20      	cmp	r3, #32
 80010ce:	d003      	beq.n	80010d8 <__aeabi_dadd+0x600>
 80010d0:	2540      	movs	r5, #64	; 0x40
 80010d2:	1aeb      	subs	r3, r5, r3
 80010d4:	4099      	lsls	r1, r3
 80010d6:	4308      	orrs	r0, r1
 80010d8:	0007      	movs	r7, r0
 80010da:	4663      	mov	r3, ip
 80010dc:	1e78      	subs	r0, r7, #1
 80010de:	4187      	sbcs	r7, r0
 80010e0:	431f      	orrs	r7, r3
 80010e2:	e769      	b.n	8000fb8 <__aeabi_dadd+0x4e0>
 80010e4:	1887      	adds	r7, r0, r2
 80010e6:	4297      	cmp	r7, r2
 80010e8:	419b      	sbcs	r3, r3
 80010ea:	4441      	add	r1, r8
 80010ec:	425b      	negs	r3, r3
 80010ee:	18c9      	adds	r1, r1, r3
 80010f0:	0035      	movs	r5, r6
 80010f2:	e5a3      	b.n	8000c3c <__aeabi_dadd+0x164>
 80010f4:	003b      	movs	r3, r7
 80010f6:	4333      	orrs	r3, r6
 80010f8:	d0ce      	beq.n	8001098 <__aeabi_dadd+0x5c0>
 80010fa:	2207      	movs	r2, #7
 80010fc:	0031      	movs	r1, r6
 80010fe:	403a      	ands	r2, r7
 8001100:	e652      	b.n	8000da8 <__aeabi_dadd+0x2d0>
 8001102:	2300      	movs	r3, #0
 8001104:	001a      	movs	r2, r3
 8001106:	e5f4      	b.n	8000cf2 <__aeabi_dadd+0x21a>
 8001108:	000007ff 	.word	0x000007ff
 800110c:	ff7fffff 	.word	0xff7fffff

08001110 <__aeabi_ddiv>:
 8001110:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001112:	4657      	mov	r7, sl
 8001114:	46de      	mov	lr, fp
 8001116:	464e      	mov	r6, r9
 8001118:	4645      	mov	r5, r8
 800111a:	b5e0      	push	{r5, r6, r7, lr}
 800111c:	4683      	mov	fp, r0
 800111e:	0007      	movs	r7, r0
 8001120:	030e      	lsls	r6, r1, #12
 8001122:	0048      	lsls	r0, r1, #1
 8001124:	b085      	sub	sp, #20
 8001126:	4692      	mov	sl, r2
 8001128:	001c      	movs	r4, r3
 800112a:	0b36      	lsrs	r6, r6, #12
 800112c:	0d40      	lsrs	r0, r0, #21
 800112e:	0fcd      	lsrs	r5, r1, #31
 8001130:	2800      	cmp	r0, #0
 8001132:	d100      	bne.n	8001136 <__aeabi_ddiv+0x26>
 8001134:	e09d      	b.n	8001272 <__aeabi_ddiv+0x162>
 8001136:	4b95      	ldr	r3, [pc, #596]	; (800138c <__aeabi_ddiv+0x27c>)
 8001138:	4298      	cmp	r0, r3
 800113a:	d039      	beq.n	80011b0 <__aeabi_ddiv+0xa0>
 800113c:	2380      	movs	r3, #128	; 0x80
 800113e:	00f6      	lsls	r6, r6, #3
 8001140:	041b      	lsls	r3, r3, #16
 8001142:	431e      	orrs	r6, r3
 8001144:	4a92      	ldr	r2, [pc, #584]	; (8001390 <__aeabi_ddiv+0x280>)
 8001146:	0f7b      	lsrs	r3, r7, #29
 8001148:	4333      	orrs	r3, r6
 800114a:	4699      	mov	r9, r3
 800114c:	4694      	mov	ip, r2
 800114e:	0003      	movs	r3, r0
 8001150:	4463      	add	r3, ip
 8001152:	9300      	str	r3, [sp, #0]
 8001154:	2300      	movs	r3, #0
 8001156:	2600      	movs	r6, #0
 8001158:	00ff      	lsls	r7, r7, #3
 800115a:	9302      	str	r3, [sp, #8]
 800115c:	0323      	lsls	r3, r4, #12
 800115e:	0b1b      	lsrs	r3, r3, #12
 8001160:	4698      	mov	r8, r3
 8001162:	0063      	lsls	r3, r4, #1
 8001164:	0fe4      	lsrs	r4, r4, #31
 8001166:	4652      	mov	r2, sl
 8001168:	0d5b      	lsrs	r3, r3, #21
 800116a:	9401      	str	r4, [sp, #4]
 800116c:	d100      	bne.n	8001170 <__aeabi_ddiv+0x60>
 800116e:	e0b3      	b.n	80012d8 <__aeabi_ddiv+0x1c8>
 8001170:	4986      	ldr	r1, [pc, #536]	; (800138c <__aeabi_ddiv+0x27c>)
 8001172:	428b      	cmp	r3, r1
 8001174:	d100      	bne.n	8001178 <__aeabi_ddiv+0x68>
 8001176:	e09e      	b.n	80012b6 <__aeabi_ddiv+0x1a6>
 8001178:	4642      	mov	r2, r8
 800117a:	00d1      	lsls	r1, r2, #3
 800117c:	2280      	movs	r2, #128	; 0x80
 800117e:	0412      	lsls	r2, r2, #16
 8001180:	430a      	orrs	r2, r1
 8001182:	4651      	mov	r1, sl
 8001184:	0f49      	lsrs	r1, r1, #29
 8001186:	4311      	orrs	r1, r2
 8001188:	468b      	mov	fp, r1
 800118a:	4981      	ldr	r1, [pc, #516]	; (8001390 <__aeabi_ddiv+0x280>)
 800118c:	4652      	mov	r2, sl
 800118e:	468c      	mov	ip, r1
 8001190:	9900      	ldr	r1, [sp, #0]
 8001192:	4463      	add	r3, ip
 8001194:	1acb      	subs	r3, r1, r3
 8001196:	2100      	movs	r1, #0
 8001198:	00d2      	lsls	r2, r2, #3
 800119a:	9300      	str	r3, [sp, #0]
 800119c:	002b      	movs	r3, r5
 800119e:	4063      	eors	r3, r4
 80011a0:	469a      	mov	sl, r3
 80011a2:	2e0f      	cmp	r6, #15
 80011a4:	d900      	bls.n	80011a8 <__aeabi_ddiv+0x98>
 80011a6:	e105      	b.n	80013b4 <__aeabi_ddiv+0x2a4>
 80011a8:	4b7a      	ldr	r3, [pc, #488]	; (8001394 <__aeabi_ddiv+0x284>)
 80011aa:	00b6      	lsls	r6, r6, #2
 80011ac:	599b      	ldr	r3, [r3, r6]
 80011ae:	469f      	mov	pc, r3
 80011b0:	465b      	mov	r3, fp
 80011b2:	4333      	orrs	r3, r6
 80011b4:	4699      	mov	r9, r3
 80011b6:	d000      	beq.n	80011ba <__aeabi_ddiv+0xaa>
 80011b8:	e0b8      	b.n	800132c <__aeabi_ddiv+0x21c>
 80011ba:	2302      	movs	r3, #2
 80011bc:	2608      	movs	r6, #8
 80011be:	2700      	movs	r7, #0
 80011c0:	9000      	str	r0, [sp, #0]
 80011c2:	9302      	str	r3, [sp, #8]
 80011c4:	e7ca      	b.n	800115c <__aeabi_ddiv+0x4c>
 80011c6:	46cb      	mov	fp, r9
 80011c8:	003a      	movs	r2, r7
 80011ca:	9902      	ldr	r1, [sp, #8]
 80011cc:	9501      	str	r5, [sp, #4]
 80011ce:	9b01      	ldr	r3, [sp, #4]
 80011d0:	469a      	mov	sl, r3
 80011d2:	2902      	cmp	r1, #2
 80011d4:	d027      	beq.n	8001226 <__aeabi_ddiv+0x116>
 80011d6:	2903      	cmp	r1, #3
 80011d8:	d100      	bne.n	80011dc <__aeabi_ddiv+0xcc>
 80011da:	e280      	b.n	80016de <__aeabi_ddiv+0x5ce>
 80011dc:	2901      	cmp	r1, #1
 80011de:	d044      	beq.n	800126a <__aeabi_ddiv+0x15a>
 80011e0:	496d      	ldr	r1, [pc, #436]	; (8001398 <__aeabi_ddiv+0x288>)
 80011e2:	9b00      	ldr	r3, [sp, #0]
 80011e4:	468c      	mov	ip, r1
 80011e6:	4463      	add	r3, ip
 80011e8:	001c      	movs	r4, r3
 80011ea:	2c00      	cmp	r4, #0
 80011ec:	dd38      	ble.n	8001260 <__aeabi_ddiv+0x150>
 80011ee:	0753      	lsls	r3, r2, #29
 80011f0:	d000      	beq.n	80011f4 <__aeabi_ddiv+0xe4>
 80011f2:	e213      	b.n	800161c <__aeabi_ddiv+0x50c>
 80011f4:	08d2      	lsrs	r2, r2, #3
 80011f6:	465b      	mov	r3, fp
 80011f8:	01db      	lsls	r3, r3, #7
 80011fa:	d509      	bpl.n	8001210 <__aeabi_ddiv+0x100>
 80011fc:	4659      	mov	r1, fp
 80011fe:	4b67      	ldr	r3, [pc, #412]	; (800139c <__aeabi_ddiv+0x28c>)
 8001200:	4019      	ands	r1, r3
 8001202:	468b      	mov	fp, r1
 8001204:	2180      	movs	r1, #128	; 0x80
 8001206:	00c9      	lsls	r1, r1, #3
 8001208:	468c      	mov	ip, r1
 800120a:	9b00      	ldr	r3, [sp, #0]
 800120c:	4463      	add	r3, ip
 800120e:	001c      	movs	r4, r3
 8001210:	4b63      	ldr	r3, [pc, #396]	; (80013a0 <__aeabi_ddiv+0x290>)
 8001212:	429c      	cmp	r4, r3
 8001214:	dc07      	bgt.n	8001226 <__aeabi_ddiv+0x116>
 8001216:	465b      	mov	r3, fp
 8001218:	0564      	lsls	r4, r4, #21
 800121a:	075f      	lsls	r7, r3, #29
 800121c:	025b      	lsls	r3, r3, #9
 800121e:	4317      	orrs	r7, r2
 8001220:	0b1b      	lsrs	r3, r3, #12
 8001222:	0d62      	lsrs	r2, r4, #21
 8001224:	e002      	b.n	800122c <__aeabi_ddiv+0x11c>
 8001226:	2300      	movs	r3, #0
 8001228:	2700      	movs	r7, #0
 800122a:	4a58      	ldr	r2, [pc, #352]	; (800138c <__aeabi_ddiv+0x27c>)
 800122c:	2100      	movs	r1, #0
 800122e:	031b      	lsls	r3, r3, #12
 8001230:	0b1c      	lsrs	r4, r3, #12
 8001232:	0d0b      	lsrs	r3, r1, #20
 8001234:	051b      	lsls	r3, r3, #20
 8001236:	4323      	orrs	r3, r4
 8001238:	0514      	lsls	r4, r2, #20
 800123a:	4a5a      	ldr	r2, [pc, #360]	; (80013a4 <__aeabi_ddiv+0x294>)
 800123c:	0038      	movs	r0, r7
 800123e:	4013      	ands	r3, r2
 8001240:	431c      	orrs	r4, r3
 8001242:	4653      	mov	r3, sl
 8001244:	0064      	lsls	r4, r4, #1
 8001246:	07db      	lsls	r3, r3, #31
 8001248:	0864      	lsrs	r4, r4, #1
 800124a:	431c      	orrs	r4, r3
 800124c:	0021      	movs	r1, r4
 800124e:	b005      	add	sp, #20
 8001250:	bc3c      	pop	{r2, r3, r4, r5}
 8001252:	4690      	mov	r8, r2
 8001254:	4699      	mov	r9, r3
 8001256:	46a2      	mov	sl, r4
 8001258:	46ab      	mov	fp, r5
 800125a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800125c:	2201      	movs	r2, #1
 800125e:	4252      	negs	r2, r2
 8001260:	2301      	movs	r3, #1
 8001262:	1b1b      	subs	r3, r3, r4
 8001264:	2b38      	cmp	r3, #56	; 0x38
 8001266:	dc00      	bgt.n	800126a <__aeabi_ddiv+0x15a>
 8001268:	e1ad      	b.n	80015c6 <__aeabi_ddiv+0x4b6>
 800126a:	2200      	movs	r2, #0
 800126c:	2300      	movs	r3, #0
 800126e:	2700      	movs	r7, #0
 8001270:	e7dc      	b.n	800122c <__aeabi_ddiv+0x11c>
 8001272:	465b      	mov	r3, fp
 8001274:	4333      	orrs	r3, r6
 8001276:	4699      	mov	r9, r3
 8001278:	d05e      	beq.n	8001338 <__aeabi_ddiv+0x228>
 800127a:	2e00      	cmp	r6, #0
 800127c:	d100      	bne.n	8001280 <__aeabi_ddiv+0x170>
 800127e:	e18a      	b.n	8001596 <__aeabi_ddiv+0x486>
 8001280:	0030      	movs	r0, r6
 8001282:	f001 f9fd 	bl	8002680 <__clzsi2>
 8001286:	0003      	movs	r3, r0
 8001288:	3b0b      	subs	r3, #11
 800128a:	2b1c      	cmp	r3, #28
 800128c:	dd00      	ble.n	8001290 <__aeabi_ddiv+0x180>
 800128e:	e17b      	b.n	8001588 <__aeabi_ddiv+0x478>
 8001290:	221d      	movs	r2, #29
 8001292:	1ad3      	subs	r3, r2, r3
 8001294:	465a      	mov	r2, fp
 8001296:	0001      	movs	r1, r0
 8001298:	40da      	lsrs	r2, r3
 800129a:	3908      	subs	r1, #8
 800129c:	408e      	lsls	r6, r1
 800129e:	0013      	movs	r3, r2
 80012a0:	465f      	mov	r7, fp
 80012a2:	4333      	orrs	r3, r6
 80012a4:	4699      	mov	r9, r3
 80012a6:	408f      	lsls	r7, r1
 80012a8:	4b3f      	ldr	r3, [pc, #252]	; (80013a8 <__aeabi_ddiv+0x298>)
 80012aa:	2600      	movs	r6, #0
 80012ac:	1a1b      	subs	r3, r3, r0
 80012ae:	9300      	str	r3, [sp, #0]
 80012b0:	2300      	movs	r3, #0
 80012b2:	9302      	str	r3, [sp, #8]
 80012b4:	e752      	b.n	800115c <__aeabi_ddiv+0x4c>
 80012b6:	4641      	mov	r1, r8
 80012b8:	4653      	mov	r3, sl
 80012ba:	430b      	orrs	r3, r1
 80012bc:	493b      	ldr	r1, [pc, #236]	; (80013ac <__aeabi_ddiv+0x29c>)
 80012be:	469b      	mov	fp, r3
 80012c0:	468c      	mov	ip, r1
 80012c2:	9b00      	ldr	r3, [sp, #0]
 80012c4:	4463      	add	r3, ip
 80012c6:	9300      	str	r3, [sp, #0]
 80012c8:	465b      	mov	r3, fp
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d13b      	bne.n	8001346 <__aeabi_ddiv+0x236>
 80012ce:	2302      	movs	r3, #2
 80012d0:	2200      	movs	r2, #0
 80012d2:	431e      	orrs	r6, r3
 80012d4:	2102      	movs	r1, #2
 80012d6:	e761      	b.n	800119c <__aeabi_ddiv+0x8c>
 80012d8:	4643      	mov	r3, r8
 80012da:	4313      	orrs	r3, r2
 80012dc:	469b      	mov	fp, r3
 80012de:	d037      	beq.n	8001350 <__aeabi_ddiv+0x240>
 80012e0:	4643      	mov	r3, r8
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d100      	bne.n	80012e8 <__aeabi_ddiv+0x1d8>
 80012e6:	e162      	b.n	80015ae <__aeabi_ddiv+0x49e>
 80012e8:	4640      	mov	r0, r8
 80012ea:	f001 f9c9 	bl	8002680 <__clzsi2>
 80012ee:	0003      	movs	r3, r0
 80012f0:	3b0b      	subs	r3, #11
 80012f2:	2b1c      	cmp	r3, #28
 80012f4:	dd00      	ble.n	80012f8 <__aeabi_ddiv+0x1e8>
 80012f6:	e153      	b.n	80015a0 <__aeabi_ddiv+0x490>
 80012f8:	0002      	movs	r2, r0
 80012fa:	4641      	mov	r1, r8
 80012fc:	3a08      	subs	r2, #8
 80012fe:	4091      	lsls	r1, r2
 8001300:	4688      	mov	r8, r1
 8001302:	211d      	movs	r1, #29
 8001304:	1acb      	subs	r3, r1, r3
 8001306:	4651      	mov	r1, sl
 8001308:	40d9      	lsrs	r1, r3
 800130a:	000b      	movs	r3, r1
 800130c:	4641      	mov	r1, r8
 800130e:	430b      	orrs	r3, r1
 8001310:	469b      	mov	fp, r3
 8001312:	4653      	mov	r3, sl
 8001314:	4093      	lsls	r3, r2
 8001316:	001a      	movs	r2, r3
 8001318:	9b00      	ldr	r3, [sp, #0]
 800131a:	4925      	ldr	r1, [pc, #148]	; (80013b0 <__aeabi_ddiv+0x2a0>)
 800131c:	469c      	mov	ip, r3
 800131e:	4460      	add	r0, ip
 8001320:	0003      	movs	r3, r0
 8001322:	468c      	mov	ip, r1
 8001324:	4463      	add	r3, ip
 8001326:	9300      	str	r3, [sp, #0]
 8001328:	2100      	movs	r1, #0
 800132a:	e737      	b.n	800119c <__aeabi_ddiv+0x8c>
 800132c:	2303      	movs	r3, #3
 800132e:	46b1      	mov	r9, r6
 8001330:	9000      	str	r0, [sp, #0]
 8001332:	260c      	movs	r6, #12
 8001334:	9302      	str	r3, [sp, #8]
 8001336:	e711      	b.n	800115c <__aeabi_ddiv+0x4c>
 8001338:	2300      	movs	r3, #0
 800133a:	9300      	str	r3, [sp, #0]
 800133c:	3301      	adds	r3, #1
 800133e:	2604      	movs	r6, #4
 8001340:	2700      	movs	r7, #0
 8001342:	9302      	str	r3, [sp, #8]
 8001344:	e70a      	b.n	800115c <__aeabi_ddiv+0x4c>
 8001346:	2303      	movs	r3, #3
 8001348:	46c3      	mov	fp, r8
 800134a:	431e      	orrs	r6, r3
 800134c:	2103      	movs	r1, #3
 800134e:	e725      	b.n	800119c <__aeabi_ddiv+0x8c>
 8001350:	3301      	adds	r3, #1
 8001352:	431e      	orrs	r6, r3
 8001354:	2200      	movs	r2, #0
 8001356:	2101      	movs	r1, #1
 8001358:	e720      	b.n	800119c <__aeabi_ddiv+0x8c>
 800135a:	2300      	movs	r3, #0
 800135c:	469a      	mov	sl, r3
 800135e:	2380      	movs	r3, #128	; 0x80
 8001360:	2700      	movs	r7, #0
 8001362:	031b      	lsls	r3, r3, #12
 8001364:	4a09      	ldr	r2, [pc, #36]	; (800138c <__aeabi_ddiv+0x27c>)
 8001366:	e761      	b.n	800122c <__aeabi_ddiv+0x11c>
 8001368:	2380      	movs	r3, #128	; 0x80
 800136a:	4649      	mov	r1, r9
 800136c:	031b      	lsls	r3, r3, #12
 800136e:	4219      	tst	r1, r3
 8001370:	d100      	bne.n	8001374 <__aeabi_ddiv+0x264>
 8001372:	e0e2      	b.n	800153a <__aeabi_ddiv+0x42a>
 8001374:	4659      	mov	r1, fp
 8001376:	4219      	tst	r1, r3
 8001378:	d000      	beq.n	800137c <__aeabi_ddiv+0x26c>
 800137a:	e0de      	b.n	800153a <__aeabi_ddiv+0x42a>
 800137c:	430b      	orrs	r3, r1
 800137e:	031b      	lsls	r3, r3, #12
 8001380:	0017      	movs	r7, r2
 8001382:	0b1b      	lsrs	r3, r3, #12
 8001384:	46a2      	mov	sl, r4
 8001386:	4a01      	ldr	r2, [pc, #4]	; (800138c <__aeabi_ddiv+0x27c>)
 8001388:	e750      	b.n	800122c <__aeabi_ddiv+0x11c>
 800138a:	46c0      	nop			; (mov r8, r8)
 800138c:	000007ff 	.word	0x000007ff
 8001390:	fffffc01 	.word	0xfffffc01
 8001394:	0800fadc 	.word	0x0800fadc
 8001398:	000003ff 	.word	0x000003ff
 800139c:	feffffff 	.word	0xfeffffff
 80013a0:	000007fe 	.word	0x000007fe
 80013a4:	800fffff 	.word	0x800fffff
 80013a8:	fffffc0d 	.word	0xfffffc0d
 80013ac:	fffff801 	.word	0xfffff801
 80013b0:	000003f3 	.word	0x000003f3
 80013b4:	45d9      	cmp	r9, fp
 80013b6:	d900      	bls.n	80013ba <__aeabi_ddiv+0x2aa>
 80013b8:	e0cb      	b.n	8001552 <__aeabi_ddiv+0x442>
 80013ba:	d100      	bne.n	80013be <__aeabi_ddiv+0x2ae>
 80013bc:	e0c6      	b.n	800154c <__aeabi_ddiv+0x43c>
 80013be:	003c      	movs	r4, r7
 80013c0:	4648      	mov	r0, r9
 80013c2:	2700      	movs	r7, #0
 80013c4:	9b00      	ldr	r3, [sp, #0]
 80013c6:	3b01      	subs	r3, #1
 80013c8:	9300      	str	r3, [sp, #0]
 80013ca:	465b      	mov	r3, fp
 80013cc:	0e16      	lsrs	r6, r2, #24
 80013ce:	021b      	lsls	r3, r3, #8
 80013d0:	431e      	orrs	r6, r3
 80013d2:	0213      	lsls	r3, r2, #8
 80013d4:	4698      	mov	r8, r3
 80013d6:	0433      	lsls	r3, r6, #16
 80013d8:	0c1b      	lsrs	r3, r3, #16
 80013da:	4699      	mov	r9, r3
 80013dc:	0c31      	lsrs	r1, r6, #16
 80013de:	9101      	str	r1, [sp, #4]
 80013e0:	f7fe ff48 	bl	8000274 <__aeabi_uidivmod>
 80013e4:	464a      	mov	r2, r9
 80013e6:	4342      	muls	r2, r0
 80013e8:	040b      	lsls	r3, r1, #16
 80013ea:	0c21      	lsrs	r1, r4, #16
 80013ec:	0005      	movs	r5, r0
 80013ee:	4319      	orrs	r1, r3
 80013f0:	428a      	cmp	r2, r1
 80013f2:	d907      	bls.n	8001404 <__aeabi_ddiv+0x2f4>
 80013f4:	1989      	adds	r1, r1, r6
 80013f6:	3d01      	subs	r5, #1
 80013f8:	428e      	cmp	r6, r1
 80013fa:	d803      	bhi.n	8001404 <__aeabi_ddiv+0x2f4>
 80013fc:	428a      	cmp	r2, r1
 80013fe:	d901      	bls.n	8001404 <__aeabi_ddiv+0x2f4>
 8001400:	1e85      	subs	r5, r0, #2
 8001402:	1989      	adds	r1, r1, r6
 8001404:	1a88      	subs	r0, r1, r2
 8001406:	9901      	ldr	r1, [sp, #4]
 8001408:	f7fe ff34 	bl	8000274 <__aeabi_uidivmod>
 800140c:	0409      	lsls	r1, r1, #16
 800140e:	468c      	mov	ip, r1
 8001410:	464a      	mov	r2, r9
 8001412:	0421      	lsls	r1, r4, #16
 8001414:	4664      	mov	r4, ip
 8001416:	4342      	muls	r2, r0
 8001418:	0c09      	lsrs	r1, r1, #16
 800141a:	0003      	movs	r3, r0
 800141c:	4321      	orrs	r1, r4
 800141e:	428a      	cmp	r2, r1
 8001420:	d904      	bls.n	800142c <__aeabi_ddiv+0x31c>
 8001422:	1989      	adds	r1, r1, r6
 8001424:	3b01      	subs	r3, #1
 8001426:	428e      	cmp	r6, r1
 8001428:	d800      	bhi.n	800142c <__aeabi_ddiv+0x31c>
 800142a:	e0f1      	b.n	8001610 <__aeabi_ddiv+0x500>
 800142c:	042d      	lsls	r5, r5, #16
 800142e:	431d      	orrs	r5, r3
 8001430:	46ab      	mov	fp, r5
 8001432:	4643      	mov	r3, r8
 8001434:	1a89      	subs	r1, r1, r2
 8001436:	4642      	mov	r2, r8
 8001438:	0c28      	lsrs	r0, r5, #16
 800143a:	0412      	lsls	r2, r2, #16
 800143c:	0c1d      	lsrs	r5, r3, #16
 800143e:	465b      	mov	r3, fp
 8001440:	0c14      	lsrs	r4, r2, #16
 8001442:	0022      	movs	r2, r4
 8001444:	041b      	lsls	r3, r3, #16
 8001446:	0c1b      	lsrs	r3, r3, #16
 8001448:	435a      	muls	r2, r3
 800144a:	9403      	str	r4, [sp, #12]
 800144c:	436b      	muls	r3, r5
 800144e:	4344      	muls	r4, r0
 8001450:	9502      	str	r5, [sp, #8]
 8001452:	4368      	muls	r0, r5
 8001454:	191b      	adds	r3, r3, r4
 8001456:	0c15      	lsrs	r5, r2, #16
 8001458:	18eb      	adds	r3, r5, r3
 800145a:	429c      	cmp	r4, r3
 800145c:	d903      	bls.n	8001466 <__aeabi_ddiv+0x356>
 800145e:	2480      	movs	r4, #128	; 0x80
 8001460:	0264      	lsls	r4, r4, #9
 8001462:	46a4      	mov	ip, r4
 8001464:	4460      	add	r0, ip
 8001466:	0c1c      	lsrs	r4, r3, #16
 8001468:	0415      	lsls	r5, r2, #16
 800146a:	041b      	lsls	r3, r3, #16
 800146c:	0c2d      	lsrs	r5, r5, #16
 800146e:	1820      	adds	r0, r4, r0
 8001470:	195d      	adds	r5, r3, r5
 8001472:	4281      	cmp	r1, r0
 8001474:	d377      	bcc.n	8001566 <__aeabi_ddiv+0x456>
 8001476:	d073      	beq.n	8001560 <__aeabi_ddiv+0x450>
 8001478:	1a0c      	subs	r4, r1, r0
 800147a:	4aa2      	ldr	r2, [pc, #648]	; (8001704 <__aeabi_ddiv+0x5f4>)
 800147c:	1b7d      	subs	r5, r7, r5
 800147e:	42af      	cmp	r7, r5
 8001480:	41bf      	sbcs	r7, r7
 8001482:	4694      	mov	ip, r2
 8001484:	9b00      	ldr	r3, [sp, #0]
 8001486:	427f      	negs	r7, r7
 8001488:	4463      	add	r3, ip
 800148a:	1be0      	subs	r0, r4, r7
 800148c:	001c      	movs	r4, r3
 800148e:	4286      	cmp	r6, r0
 8001490:	d100      	bne.n	8001494 <__aeabi_ddiv+0x384>
 8001492:	e0db      	b.n	800164c <__aeabi_ddiv+0x53c>
 8001494:	9901      	ldr	r1, [sp, #4]
 8001496:	f7fe feed 	bl	8000274 <__aeabi_uidivmod>
 800149a:	464a      	mov	r2, r9
 800149c:	4342      	muls	r2, r0
 800149e:	040b      	lsls	r3, r1, #16
 80014a0:	0c29      	lsrs	r1, r5, #16
 80014a2:	0007      	movs	r7, r0
 80014a4:	4319      	orrs	r1, r3
 80014a6:	428a      	cmp	r2, r1
 80014a8:	d907      	bls.n	80014ba <__aeabi_ddiv+0x3aa>
 80014aa:	1989      	adds	r1, r1, r6
 80014ac:	3f01      	subs	r7, #1
 80014ae:	428e      	cmp	r6, r1
 80014b0:	d803      	bhi.n	80014ba <__aeabi_ddiv+0x3aa>
 80014b2:	428a      	cmp	r2, r1
 80014b4:	d901      	bls.n	80014ba <__aeabi_ddiv+0x3aa>
 80014b6:	1e87      	subs	r7, r0, #2
 80014b8:	1989      	adds	r1, r1, r6
 80014ba:	1a88      	subs	r0, r1, r2
 80014bc:	9901      	ldr	r1, [sp, #4]
 80014be:	f7fe fed9 	bl	8000274 <__aeabi_uidivmod>
 80014c2:	0409      	lsls	r1, r1, #16
 80014c4:	464a      	mov	r2, r9
 80014c6:	4689      	mov	r9, r1
 80014c8:	0429      	lsls	r1, r5, #16
 80014ca:	464d      	mov	r5, r9
 80014cc:	4342      	muls	r2, r0
 80014ce:	0c09      	lsrs	r1, r1, #16
 80014d0:	0003      	movs	r3, r0
 80014d2:	4329      	orrs	r1, r5
 80014d4:	428a      	cmp	r2, r1
 80014d6:	d907      	bls.n	80014e8 <__aeabi_ddiv+0x3d8>
 80014d8:	1989      	adds	r1, r1, r6
 80014da:	3b01      	subs	r3, #1
 80014dc:	428e      	cmp	r6, r1
 80014de:	d803      	bhi.n	80014e8 <__aeabi_ddiv+0x3d8>
 80014e0:	428a      	cmp	r2, r1
 80014e2:	d901      	bls.n	80014e8 <__aeabi_ddiv+0x3d8>
 80014e4:	1e83      	subs	r3, r0, #2
 80014e6:	1989      	adds	r1, r1, r6
 80014e8:	043f      	lsls	r7, r7, #16
 80014ea:	1a89      	subs	r1, r1, r2
 80014ec:	003a      	movs	r2, r7
 80014ee:	9f03      	ldr	r7, [sp, #12]
 80014f0:	431a      	orrs	r2, r3
 80014f2:	0038      	movs	r0, r7
 80014f4:	0413      	lsls	r3, r2, #16
 80014f6:	0c1b      	lsrs	r3, r3, #16
 80014f8:	4358      	muls	r0, r3
 80014fa:	4681      	mov	r9, r0
 80014fc:	9802      	ldr	r0, [sp, #8]
 80014fe:	0c15      	lsrs	r5, r2, #16
 8001500:	436f      	muls	r7, r5
 8001502:	4343      	muls	r3, r0
 8001504:	4345      	muls	r5, r0
 8001506:	4648      	mov	r0, r9
 8001508:	0c00      	lsrs	r0, r0, #16
 800150a:	4684      	mov	ip, r0
 800150c:	19db      	adds	r3, r3, r7
 800150e:	4463      	add	r3, ip
 8001510:	429f      	cmp	r7, r3
 8001512:	d903      	bls.n	800151c <__aeabi_ddiv+0x40c>
 8001514:	2080      	movs	r0, #128	; 0x80
 8001516:	0240      	lsls	r0, r0, #9
 8001518:	4684      	mov	ip, r0
 800151a:	4465      	add	r5, ip
 800151c:	4648      	mov	r0, r9
 800151e:	0c1f      	lsrs	r7, r3, #16
 8001520:	0400      	lsls	r0, r0, #16
 8001522:	041b      	lsls	r3, r3, #16
 8001524:	0c00      	lsrs	r0, r0, #16
 8001526:	197d      	adds	r5, r7, r5
 8001528:	1818      	adds	r0, r3, r0
 800152a:	42a9      	cmp	r1, r5
 800152c:	d200      	bcs.n	8001530 <__aeabi_ddiv+0x420>
 800152e:	e084      	b.n	800163a <__aeabi_ddiv+0x52a>
 8001530:	d100      	bne.n	8001534 <__aeabi_ddiv+0x424>
 8001532:	e07f      	b.n	8001634 <__aeabi_ddiv+0x524>
 8001534:	2301      	movs	r3, #1
 8001536:	431a      	orrs	r2, r3
 8001538:	e657      	b.n	80011ea <__aeabi_ddiv+0xda>
 800153a:	2380      	movs	r3, #128	; 0x80
 800153c:	464a      	mov	r2, r9
 800153e:	031b      	lsls	r3, r3, #12
 8001540:	4313      	orrs	r3, r2
 8001542:	031b      	lsls	r3, r3, #12
 8001544:	0b1b      	lsrs	r3, r3, #12
 8001546:	46aa      	mov	sl, r5
 8001548:	4a6f      	ldr	r2, [pc, #444]	; (8001708 <__aeabi_ddiv+0x5f8>)
 800154a:	e66f      	b.n	800122c <__aeabi_ddiv+0x11c>
 800154c:	42ba      	cmp	r2, r7
 800154e:	d900      	bls.n	8001552 <__aeabi_ddiv+0x442>
 8001550:	e735      	b.n	80013be <__aeabi_ddiv+0x2ae>
 8001552:	464b      	mov	r3, r9
 8001554:	07dc      	lsls	r4, r3, #31
 8001556:	0858      	lsrs	r0, r3, #1
 8001558:	087b      	lsrs	r3, r7, #1
 800155a:	431c      	orrs	r4, r3
 800155c:	07ff      	lsls	r7, r7, #31
 800155e:	e734      	b.n	80013ca <__aeabi_ddiv+0x2ba>
 8001560:	2400      	movs	r4, #0
 8001562:	42af      	cmp	r7, r5
 8001564:	d289      	bcs.n	800147a <__aeabi_ddiv+0x36a>
 8001566:	4447      	add	r7, r8
 8001568:	4547      	cmp	r7, r8
 800156a:	41a4      	sbcs	r4, r4
 800156c:	465b      	mov	r3, fp
 800156e:	4264      	negs	r4, r4
 8001570:	19a4      	adds	r4, r4, r6
 8001572:	1864      	adds	r4, r4, r1
 8001574:	3b01      	subs	r3, #1
 8001576:	42a6      	cmp	r6, r4
 8001578:	d21e      	bcs.n	80015b8 <__aeabi_ddiv+0x4a8>
 800157a:	42a0      	cmp	r0, r4
 800157c:	d86d      	bhi.n	800165a <__aeabi_ddiv+0x54a>
 800157e:	d100      	bne.n	8001582 <__aeabi_ddiv+0x472>
 8001580:	e0b6      	b.n	80016f0 <__aeabi_ddiv+0x5e0>
 8001582:	1a24      	subs	r4, r4, r0
 8001584:	469b      	mov	fp, r3
 8001586:	e778      	b.n	800147a <__aeabi_ddiv+0x36a>
 8001588:	0003      	movs	r3, r0
 800158a:	465a      	mov	r2, fp
 800158c:	3b28      	subs	r3, #40	; 0x28
 800158e:	409a      	lsls	r2, r3
 8001590:	2700      	movs	r7, #0
 8001592:	4691      	mov	r9, r2
 8001594:	e688      	b.n	80012a8 <__aeabi_ddiv+0x198>
 8001596:	4658      	mov	r0, fp
 8001598:	f001 f872 	bl	8002680 <__clzsi2>
 800159c:	3020      	adds	r0, #32
 800159e:	e672      	b.n	8001286 <__aeabi_ddiv+0x176>
 80015a0:	0003      	movs	r3, r0
 80015a2:	4652      	mov	r2, sl
 80015a4:	3b28      	subs	r3, #40	; 0x28
 80015a6:	409a      	lsls	r2, r3
 80015a8:	4693      	mov	fp, r2
 80015aa:	2200      	movs	r2, #0
 80015ac:	e6b4      	b.n	8001318 <__aeabi_ddiv+0x208>
 80015ae:	4650      	mov	r0, sl
 80015b0:	f001 f866 	bl	8002680 <__clzsi2>
 80015b4:	3020      	adds	r0, #32
 80015b6:	e69a      	b.n	80012ee <__aeabi_ddiv+0x1de>
 80015b8:	42a6      	cmp	r6, r4
 80015ba:	d1e2      	bne.n	8001582 <__aeabi_ddiv+0x472>
 80015bc:	45b8      	cmp	r8, r7
 80015be:	d9dc      	bls.n	800157a <__aeabi_ddiv+0x46a>
 80015c0:	1a34      	subs	r4, r6, r0
 80015c2:	469b      	mov	fp, r3
 80015c4:	e759      	b.n	800147a <__aeabi_ddiv+0x36a>
 80015c6:	2b1f      	cmp	r3, #31
 80015c8:	dc65      	bgt.n	8001696 <__aeabi_ddiv+0x586>
 80015ca:	4c50      	ldr	r4, [pc, #320]	; (800170c <__aeabi_ddiv+0x5fc>)
 80015cc:	9900      	ldr	r1, [sp, #0]
 80015ce:	46a4      	mov	ip, r4
 80015d0:	465c      	mov	r4, fp
 80015d2:	4461      	add	r1, ip
 80015d4:	0008      	movs	r0, r1
 80015d6:	408c      	lsls	r4, r1
 80015d8:	0011      	movs	r1, r2
 80015da:	4082      	lsls	r2, r0
 80015dc:	40d9      	lsrs	r1, r3
 80015de:	1e50      	subs	r0, r2, #1
 80015e0:	4182      	sbcs	r2, r0
 80015e2:	430c      	orrs	r4, r1
 80015e4:	4314      	orrs	r4, r2
 80015e6:	465a      	mov	r2, fp
 80015e8:	40da      	lsrs	r2, r3
 80015ea:	0013      	movs	r3, r2
 80015ec:	0762      	lsls	r2, r4, #29
 80015ee:	d009      	beq.n	8001604 <__aeabi_ddiv+0x4f4>
 80015f0:	220f      	movs	r2, #15
 80015f2:	4022      	ands	r2, r4
 80015f4:	2a04      	cmp	r2, #4
 80015f6:	d005      	beq.n	8001604 <__aeabi_ddiv+0x4f4>
 80015f8:	0022      	movs	r2, r4
 80015fa:	1d14      	adds	r4, r2, #4
 80015fc:	4294      	cmp	r4, r2
 80015fe:	4189      	sbcs	r1, r1
 8001600:	4249      	negs	r1, r1
 8001602:	185b      	adds	r3, r3, r1
 8001604:	021a      	lsls	r2, r3, #8
 8001606:	d562      	bpl.n	80016ce <__aeabi_ddiv+0x5be>
 8001608:	2201      	movs	r2, #1
 800160a:	2300      	movs	r3, #0
 800160c:	2700      	movs	r7, #0
 800160e:	e60d      	b.n	800122c <__aeabi_ddiv+0x11c>
 8001610:	428a      	cmp	r2, r1
 8001612:	d800      	bhi.n	8001616 <__aeabi_ddiv+0x506>
 8001614:	e70a      	b.n	800142c <__aeabi_ddiv+0x31c>
 8001616:	1e83      	subs	r3, r0, #2
 8001618:	1989      	adds	r1, r1, r6
 800161a:	e707      	b.n	800142c <__aeabi_ddiv+0x31c>
 800161c:	230f      	movs	r3, #15
 800161e:	4013      	ands	r3, r2
 8001620:	2b04      	cmp	r3, #4
 8001622:	d100      	bne.n	8001626 <__aeabi_ddiv+0x516>
 8001624:	e5e6      	b.n	80011f4 <__aeabi_ddiv+0xe4>
 8001626:	1d17      	adds	r7, r2, #4
 8001628:	4297      	cmp	r7, r2
 800162a:	4192      	sbcs	r2, r2
 800162c:	4253      	negs	r3, r2
 800162e:	449b      	add	fp, r3
 8001630:	08fa      	lsrs	r2, r7, #3
 8001632:	e5e0      	b.n	80011f6 <__aeabi_ddiv+0xe6>
 8001634:	2800      	cmp	r0, #0
 8001636:	d100      	bne.n	800163a <__aeabi_ddiv+0x52a>
 8001638:	e5d7      	b.n	80011ea <__aeabi_ddiv+0xda>
 800163a:	1871      	adds	r1, r6, r1
 800163c:	1e53      	subs	r3, r2, #1
 800163e:	42b1      	cmp	r1, r6
 8001640:	d327      	bcc.n	8001692 <__aeabi_ddiv+0x582>
 8001642:	42a9      	cmp	r1, r5
 8001644:	d315      	bcc.n	8001672 <__aeabi_ddiv+0x562>
 8001646:	d058      	beq.n	80016fa <__aeabi_ddiv+0x5ea>
 8001648:	001a      	movs	r2, r3
 800164a:	e773      	b.n	8001534 <__aeabi_ddiv+0x424>
 800164c:	2b00      	cmp	r3, #0
 800164e:	dc00      	bgt.n	8001652 <__aeabi_ddiv+0x542>
 8001650:	e604      	b.n	800125c <__aeabi_ddiv+0x14c>
 8001652:	2301      	movs	r3, #1
 8001654:	2200      	movs	r2, #0
 8001656:	449b      	add	fp, r3
 8001658:	e5cd      	b.n	80011f6 <__aeabi_ddiv+0xe6>
 800165a:	2302      	movs	r3, #2
 800165c:	4447      	add	r7, r8
 800165e:	4547      	cmp	r7, r8
 8001660:	4189      	sbcs	r1, r1
 8001662:	425b      	negs	r3, r3
 8001664:	469c      	mov	ip, r3
 8001666:	4249      	negs	r1, r1
 8001668:	1989      	adds	r1, r1, r6
 800166a:	190c      	adds	r4, r1, r4
 800166c:	44e3      	add	fp, ip
 800166e:	1a24      	subs	r4, r4, r0
 8001670:	e703      	b.n	800147a <__aeabi_ddiv+0x36a>
 8001672:	4643      	mov	r3, r8
 8001674:	005f      	lsls	r7, r3, #1
 8001676:	4547      	cmp	r7, r8
 8001678:	419b      	sbcs	r3, r3
 800167a:	46b8      	mov	r8, r7
 800167c:	425b      	negs	r3, r3
 800167e:	199e      	adds	r6, r3, r6
 8001680:	3a02      	subs	r2, #2
 8001682:	1989      	adds	r1, r1, r6
 8001684:	42a9      	cmp	r1, r5
 8001686:	d000      	beq.n	800168a <__aeabi_ddiv+0x57a>
 8001688:	e754      	b.n	8001534 <__aeabi_ddiv+0x424>
 800168a:	4540      	cmp	r0, r8
 800168c:	d000      	beq.n	8001690 <__aeabi_ddiv+0x580>
 800168e:	e751      	b.n	8001534 <__aeabi_ddiv+0x424>
 8001690:	e5ab      	b.n	80011ea <__aeabi_ddiv+0xda>
 8001692:	001a      	movs	r2, r3
 8001694:	e7f6      	b.n	8001684 <__aeabi_ddiv+0x574>
 8001696:	211f      	movs	r1, #31
 8001698:	465f      	mov	r7, fp
 800169a:	4249      	negs	r1, r1
 800169c:	1b0c      	subs	r4, r1, r4
 800169e:	40e7      	lsrs	r7, r4
 80016a0:	2b20      	cmp	r3, #32
 80016a2:	d007      	beq.n	80016b4 <__aeabi_ddiv+0x5a4>
 80016a4:	491a      	ldr	r1, [pc, #104]	; (8001710 <__aeabi_ddiv+0x600>)
 80016a6:	9b00      	ldr	r3, [sp, #0]
 80016a8:	468c      	mov	ip, r1
 80016aa:	4463      	add	r3, ip
 80016ac:	0018      	movs	r0, r3
 80016ae:	465b      	mov	r3, fp
 80016b0:	4083      	lsls	r3, r0
 80016b2:	431a      	orrs	r2, r3
 80016b4:	1e50      	subs	r0, r2, #1
 80016b6:	4182      	sbcs	r2, r0
 80016b8:	433a      	orrs	r2, r7
 80016ba:	2707      	movs	r7, #7
 80016bc:	2300      	movs	r3, #0
 80016be:	4017      	ands	r7, r2
 80016c0:	d009      	beq.n	80016d6 <__aeabi_ddiv+0x5c6>
 80016c2:	210f      	movs	r1, #15
 80016c4:	2300      	movs	r3, #0
 80016c6:	4011      	ands	r1, r2
 80016c8:	0014      	movs	r4, r2
 80016ca:	2904      	cmp	r1, #4
 80016cc:	d195      	bne.n	80015fa <__aeabi_ddiv+0x4ea>
 80016ce:	0022      	movs	r2, r4
 80016d0:	075f      	lsls	r7, r3, #29
 80016d2:	025b      	lsls	r3, r3, #9
 80016d4:	0b1b      	lsrs	r3, r3, #12
 80016d6:	08d2      	lsrs	r2, r2, #3
 80016d8:	4317      	orrs	r7, r2
 80016da:	2200      	movs	r2, #0
 80016dc:	e5a6      	b.n	800122c <__aeabi_ddiv+0x11c>
 80016de:	2380      	movs	r3, #128	; 0x80
 80016e0:	4659      	mov	r1, fp
 80016e2:	031b      	lsls	r3, r3, #12
 80016e4:	430b      	orrs	r3, r1
 80016e6:	031b      	lsls	r3, r3, #12
 80016e8:	0017      	movs	r7, r2
 80016ea:	0b1b      	lsrs	r3, r3, #12
 80016ec:	4a06      	ldr	r2, [pc, #24]	; (8001708 <__aeabi_ddiv+0x5f8>)
 80016ee:	e59d      	b.n	800122c <__aeabi_ddiv+0x11c>
 80016f0:	42bd      	cmp	r5, r7
 80016f2:	d8b2      	bhi.n	800165a <__aeabi_ddiv+0x54a>
 80016f4:	469b      	mov	fp, r3
 80016f6:	2400      	movs	r4, #0
 80016f8:	e6bf      	b.n	800147a <__aeabi_ddiv+0x36a>
 80016fa:	4580      	cmp	r8, r0
 80016fc:	d3b9      	bcc.n	8001672 <__aeabi_ddiv+0x562>
 80016fe:	001a      	movs	r2, r3
 8001700:	e7c3      	b.n	800168a <__aeabi_ddiv+0x57a>
 8001702:	46c0      	nop			; (mov r8, r8)
 8001704:	000003ff 	.word	0x000003ff
 8001708:	000007ff 	.word	0x000007ff
 800170c:	0000041e 	.word	0x0000041e
 8001710:	0000043e 	.word	0x0000043e

08001714 <__eqdf2>:
 8001714:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001716:	464f      	mov	r7, r9
 8001718:	4646      	mov	r6, r8
 800171a:	46d6      	mov	lr, sl
 800171c:	4684      	mov	ip, r0
 800171e:	b5c0      	push	{r6, r7, lr}
 8001720:	4680      	mov	r8, r0
 8001722:	4e19      	ldr	r6, [pc, #100]	; (8001788 <__eqdf2+0x74>)
 8001724:	0318      	lsls	r0, r3, #12
 8001726:	030f      	lsls	r7, r1, #12
 8001728:	004d      	lsls	r5, r1, #1
 800172a:	0b00      	lsrs	r0, r0, #12
 800172c:	005c      	lsls	r4, r3, #1
 800172e:	4682      	mov	sl, r0
 8001730:	0b3f      	lsrs	r7, r7, #12
 8001732:	0d6d      	lsrs	r5, r5, #21
 8001734:	0fc9      	lsrs	r1, r1, #31
 8001736:	4691      	mov	r9, r2
 8001738:	0d64      	lsrs	r4, r4, #21
 800173a:	0fdb      	lsrs	r3, r3, #31
 800173c:	2001      	movs	r0, #1
 800173e:	42b5      	cmp	r5, r6
 8001740:	d00a      	beq.n	8001758 <__eqdf2+0x44>
 8001742:	42b4      	cmp	r4, r6
 8001744:	d003      	beq.n	800174e <__eqdf2+0x3a>
 8001746:	42a5      	cmp	r5, r4
 8001748:	d101      	bne.n	800174e <__eqdf2+0x3a>
 800174a:	4557      	cmp	r7, sl
 800174c:	d00c      	beq.n	8001768 <__eqdf2+0x54>
 800174e:	bc1c      	pop	{r2, r3, r4}
 8001750:	4690      	mov	r8, r2
 8001752:	4699      	mov	r9, r3
 8001754:	46a2      	mov	sl, r4
 8001756:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001758:	4666      	mov	r6, ip
 800175a:	433e      	orrs	r6, r7
 800175c:	d1f7      	bne.n	800174e <__eqdf2+0x3a>
 800175e:	42ac      	cmp	r4, r5
 8001760:	d1f5      	bne.n	800174e <__eqdf2+0x3a>
 8001762:	4654      	mov	r4, sl
 8001764:	4314      	orrs	r4, r2
 8001766:	d1f2      	bne.n	800174e <__eqdf2+0x3a>
 8001768:	2001      	movs	r0, #1
 800176a:	45c8      	cmp	r8, r9
 800176c:	d1ef      	bne.n	800174e <__eqdf2+0x3a>
 800176e:	4299      	cmp	r1, r3
 8001770:	d007      	beq.n	8001782 <__eqdf2+0x6e>
 8001772:	2d00      	cmp	r5, #0
 8001774:	d1eb      	bne.n	800174e <__eqdf2+0x3a>
 8001776:	4663      	mov	r3, ip
 8001778:	431f      	orrs	r7, r3
 800177a:	0038      	movs	r0, r7
 800177c:	1e47      	subs	r7, r0, #1
 800177e:	41b8      	sbcs	r0, r7
 8001780:	e7e5      	b.n	800174e <__eqdf2+0x3a>
 8001782:	2000      	movs	r0, #0
 8001784:	e7e3      	b.n	800174e <__eqdf2+0x3a>
 8001786:	46c0      	nop			; (mov r8, r8)
 8001788:	000007ff 	.word	0x000007ff

0800178c <__gedf2>:
 800178c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800178e:	464f      	mov	r7, r9
 8001790:	4646      	mov	r6, r8
 8001792:	46d6      	mov	lr, sl
 8001794:	004d      	lsls	r5, r1, #1
 8001796:	b5c0      	push	{r6, r7, lr}
 8001798:	030e      	lsls	r6, r1, #12
 800179a:	0fc9      	lsrs	r1, r1, #31
 800179c:	468a      	mov	sl, r1
 800179e:	492c      	ldr	r1, [pc, #176]	; (8001850 <__gedf2+0xc4>)
 80017a0:	031f      	lsls	r7, r3, #12
 80017a2:	005c      	lsls	r4, r3, #1
 80017a4:	4680      	mov	r8, r0
 80017a6:	0b36      	lsrs	r6, r6, #12
 80017a8:	0d6d      	lsrs	r5, r5, #21
 80017aa:	4691      	mov	r9, r2
 80017ac:	0b3f      	lsrs	r7, r7, #12
 80017ae:	0d64      	lsrs	r4, r4, #21
 80017b0:	0fdb      	lsrs	r3, r3, #31
 80017b2:	428d      	cmp	r5, r1
 80017b4:	d01e      	beq.n	80017f4 <__gedf2+0x68>
 80017b6:	428c      	cmp	r4, r1
 80017b8:	d016      	beq.n	80017e8 <__gedf2+0x5c>
 80017ba:	2d00      	cmp	r5, #0
 80017bc:	d11e      	bne.n	80017fc <__gedf2+0x70>
 80017be:	4330      	orrs	r0, r6
 80017c0:	4684      	mov	ip, r0
 80017c2:	2c00      	cmp	r4, #0
 80017c4:	d101      	bne.n	80017ca <__gedf2+0x3e>
 80017c6:	433a      	orrs	r2, r7
 80017c8:	d023      	beq.n	8001812 <__gedf2+0x86>
 80017ca:	4662      	mov	r2, ip
 80017cc:	2a00      	cmp	r2, #0
 80017ce:	d01a      	beq.n	8001806 <__gedf2+0x7a>
 80017d0:	459a      	cmp	sl, r3
 80017d2:	d029      	beq.n	8001828 <__gedf2+0x9c>
 80017d4:	4651      	mov	r1, sl
 80017d6:	2002      	movs	r0, #2
 80017d8:	3901      	subs	r1, #1
 80017da:	4008      	ands	r0, r1
 80017dc:	3801      	subs	r0, #1
 80017de:	bc1c      	pop	{r2, r3, r4}
 80017e0:	4690      	mov	r8, r2
 80017e2:	4699      	mov	r9, r3
 80017e4:	46a2      	mov	sl, r4
 80017e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017e8:	0039      	movs	r1, r7
 80017ea:	4311      	orrs	r1, r2
 80017ec:	d0e5      	beq.n	80017ba <__gedf2+0x2e>
 80017ee:	2002      	movs	r0, #2
 80017f0:	4240      	negs	r0, r0
 80017f2:	e7f4      	b.n	80017de <__gedf2+0x52>
 80017f4:	4330      	orrs	r0, r6
 80017f6:	d1fa      	bne.n	80017ee <__gedf2+0x62>
 80017f8:	42ac      	cmp	r4, r5
 80017fa:	d00f      	beq.n	800181c <__gedf2+0x90>
 80017fc:	2c00      	cmp	r4, #0
 80017fe:	d10f      	bne.n	8001820 <__gedf2+0x94>
 8001800:	433a      	orrs	r2, r7
 8001802:	d0e7      	beq.n	80017d4 <__gedf2+0x48>
 8001804:	e00c      	b.n	8001820 <__gedf2+0x94>
 8001806:	2201      	movs	r2, #1
 8001808:	3b01      	subs	r3, #1
 800180a:	4393      	bics	r3, r2
 800180c:	0018      	movs	r0, r3
 800180e:	3001      	adds	r0, #1
 8001810:	e7e5      	b.n	80017de <__gedf2+0x52>
 8001812:	4663      	mov	r3, ip
 8001814:	2000      	movs	r0, #0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d0e1      	beq.n	80017de <__gedf2+0x52>
 800181a:	e7db      	b.n	80017d4 <__gedf2+0x48>
 800181c:	433a      	orrs	r2, r7
 800181e:	d1e6      	bne.n	80017ee <__gedf2+0x62>
 8001820:	459a      	cmp	sl, r3
 8001822:	d1d7      	bne.n	80017d4 <__gedf2+0x48>
 8001824:	42a5      	cmp	r5, r4
 8001826:	dcd5      	bgt.n	80017d4 <__gedf2+0x48>
 8001828:	42a5      	cmp	r5, r4
 800182a:	db05      	blt.n	8001838 <__gedf2+0xac>
 800182c:	42be      	cmp	r6, r7
 800182e:	d8d1      	bhi.n	80017d4 <__gedf2+0x48>
 8001830:	d008      	beq.n	8001844 <__gedf2+0xb8>
 8001832:	2000      	movs	r0, #0
 8001834:	42be      	cmp	r6, r7
 8001836:	d2d2      	bcs.n	80017de <__gedf2+0x52>
 8001838:	4650      	mov	r0, sl
 800183a:	2301      	movs	r3, #1
 800183c:	3801      	subs	r0, #1
 800183e:	4398      	bics	r0, r3
 8001840:	3001      	adds	r0, #1
 8001842:	e7cc      	b.n	80017de <__gedf2+0x52>
 8001844:	45c8      	cmp	r8, r9
 8001846:	d8c5      	bhi.n	80017d4 <__gedf2+0x48>
 8001848:	2000      	movs	r0, #0
 800184a:	45c8      	cmp	r8, r9
 800184c:	d3f4      	bcc.n	8001838 <__gedf2+0xac>
 800184e:	e7c6      	b.n	80017de <__gedf2+0x52>
 8001850:	000007ff 	.word	0x000007ff

08001854 <__ledf2>:
 8001854:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001856:	464f      	mov	r7, r9
 8001858:	4646      	mov	r6, r8
 800185a:	46d6      	mov	lr, sl
 800185c:	004d      	lsls	r5, r1, #1
 800185e:	b5c0      	push	{r6, r7, lr}
 8001860:	030e      	lsls	r6, r1, #12
 8001862:	0fc9      	lsrs	r1, r1, #31
 8001864:	468a      	mov	sl, r1
 8001866:	492e      	ldr	r1, [pc, #184]	; (8001920 <__ledf2+0xcc>)
 8001868:	031f      	lsls	r7, r3, #12
 800186a:	005c      	lsls	r4, r3, #1
 800186c:	4680      	mov	r8, r0
 800186e:	0b36      	lsrs	r6, r6, #12
 8001870:	0d6d      	lsrs	r5, r5, #21
 8001872:	4691      	mov	r9, r2
 8001874:	0b3f      	lsrs	r7, r7, #12
 8001876:	0d64      	lsrs	r4, r4, #21
 8001878:	0fdb      	lsrs	r3, r3, #31
 800187a:	428d      	cmp	r5, r1
 800187c:	d018      	beq.n	80018b0 <__ledf2+0x5c>
 800187e:	428c      	cmp	r4, r1
 8001880:	d011      	beq.n	80018a6 <__ledf2+0x52>
 8001882:	2d00      	cmp	r5, #0
 8001884:	d118      	bne.n	80018b8 <__ledf2+0x64>
 8001886:	4330      	orrs	r0, r6
 8001888:	4684      	mov	ip, r0
 800188a:	2c00      	cmp	r4, #0
 800188c:	d11e      	bne.n	80018cc <__ledf2+0x78>
 800188e:	433a      	orrs	r2, r7
 8001890:	d11c      	bne.n	80018cc <__ledf2+0x78>
 8001892:	4663      	mov	r3, ip
 8001894:	2000      	movs	r0, #0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d030      	beq.n	80018fc <__ledf2+0xa8>
 800189a:	4651      	mov	r1, sl
 800189c:	2002      	movs	r0, #2
 800189e:	3901      	subs	r1, #1
 80018a0:	4008      	ands	r0, r1
 80018a2:	3801      	subs	r0, #1
 80018a4:	e02a      	b.n	80018fc <__ledf2+0xa8>
 80018a6:	0039      	movs	r1, r7
 80018a8:	4311      	orrs	r1, r2
 80018aa:	d0ea      	beq.n	8001882 <__ledf2+0x2e>
 80018ac:	2002      	movs	r0, #2
 80018ae:	e025      	b.n	80018fc <__ledf2+0xa8>
 80018b0:	4330      	orrs	r0, r6
 80018b2:	d1fb      	bne.n	80018ac <__ledf2+0x58>
 80018b4:	42ac      	cmp	r4, r5
 80018b6:	d026      	beq.n	8001906 <__ledf2+0xb2>
 80018b8:	2c00      	cmp	r4, #0
 80018ba:	d126      	bne.n	800190a <__ledf2+0xb6>
 80018bc:	433a      	orrs	r2, r7
 80018be:	d124      	bne.n	800190a <__ledf2+0xb6>
 80018c0:	4651      	mov	r1, sl
 80018c2:	2002      	movs	r0, #2
 80018c4:	3901      	subs	r1, #1
 80018c6:	4008      	ands	r0, r1
 80018c8:	3801      	subs	r0, #1
 80018ca:	e017      	b.n	80018fc <__ledf2+0xa8>
 80018cc:	4662      	mov	r2, ip
 80018ce:	2a00      	cmp	r2, #0
 80018d0:	d00f      	beq.n	80018f2 <__ledf2+0x9e>
 80018d2:	459a      	cmp	sl, r3
 80018d4:	d1e1      	bne.n	800189a <__ledf2+0x46>
 80018d6:	42a5      	cmp	r5, r4
 80018d8:	db05      	blt.n	80018e6 <__ledf2+0x92>
 80018da:	42be      	cmp	r6, r7
 80018dc:	d8dd      	bhi.n	800189a <__ledf2+0x46>
 80018de:	d019      	beq.n	8001914 <__ledf2+0xc0>
 80018e0:	2000      	movs	r0, #0
 80018e2:	42be      	cmp	r6, r7
 80018e4:	d20a      	bcs.n	80018fc <__ledf2+0xa8>
 80018e6:	4650      	mov	r0, sl
 80018e8:	2301      	movs	r3, #1
 80018ea:	3801      	subs	r0, #1
 80018ec:	4398      	bics	r0, r3
 80018ee:	3001      	adds	r0, #1
 80018f0:	e004      	b.n	80018fc <__ledf2+0xa8>
 80018f2:	2201      	movs	r2, #1
 80018f4:	3b01      	subs	r3, #1
 80018f6:	4393      	bics	r3, r2
 80018f8:	0018      	movs	r0, r3
 80018fa:	3001      	adds	r0, #1
 80018fc:	bc1c      	pop	{r2, r3, r4}
 80018fe:	4690      	mov	r8, r2
 8001900:	4699      	mov	r9, r3
 8001902:	46a2      	mov	sl, r4
 8001904:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001906:	433a      	orrs	r2, r7
 8001908:	d1d0      	bne.n	80018ac <__ledf2+0x58>
 800190a:	459a      	cmp	sl, r3
 800190c:	d1c5      	bne.n	800189a <__ledf2+0x46>
 800190e:	42a5      	cmp	r5, r4
 8001910:	dcc3      	bgt.n	800189a <__ledf2+0x46>
 8001912:	e7e0      	b.n	80018d6 <__ledf2+0x82>
 8001914:	45c8      	cmp	r8, r9
 8001916:	d8c0      	bhi.n	800189a <__ledf2+0x46>
 8001918:	2000      	movs	r0, #0
 800191a:	45c8      	cmp	r8, r9
 800191c:	d3e3      	bcc.n	80018e6 <__ledf2+0x92>
 800191e:	e7ed      	b.n	80018fc <__ledf2+0xa8>
 8001920:	000007ff 	.word	0x000007ff

08001924 <__aeabi_dmul>:
 8001924:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001926:	4657      	mov	r7, sl
 8001928:	46de      	mov	lr, fp
 800192a:	464e      	mov	r6, r9
 800192c:	4645      	mov	r5, r8
 800192e:	b5e0      	push	{r5, r6, r7, lr}
 8001930:	4683      	mov	fp, r0
 8001932:	0006      	movs	r6, r0
 8001934:	030f      	lsls	r7, r1, #12
 8001936:	0048      	lsls	r0, r1, #1
 8001938:	b087      	sub	sp, #28
 800193a:	4692      	mov	sl, r2
 800193c:	001d      	movs	r5, r3
 800193e:	0b3f      	lsrs	r7, r7, #12
 8001940:	0d40      	lsrs	r0, r0, #21
 8001942:	0fcc      	lsrs	r4, r1, #31
 8001944:	2800      	cmp	r0, #0
 8001946:	d100      	bne.n	800194a <__aeabi_dmul+0x26>
 8001948:	e06f      	b.n	8001a2a <__aeabi_dmul+0x106>
 800194a:	4bde      	ldr	r3, [pc, #888]	; (8001cc4 <__aeabi_dmul+0x3a0>)
 800194c:	4298      	cmp	r0, r3
 800194e:	d038      	beq.n	80019c2 <__aeabi_dmul+0x9e>
 8001950:	2380      	movs	r3, #128	; 0x80
 8001952:	00ff      	lsls	r7, r7, #3
 8001954:	041b      	lsls	r3, r3, #16
 8001956:	431f      	orrs	r7, r3
 8001958:	0f73      	lsrs	r3, r6, #29
 800195a:	433b      	orrs	r3, r7
 800195c:	9301      	str	r3, [sp, #4]
 800195e:	4bda      	ldr	r3, [pc, #872]	; (8001cc8 <__aeabi_dmul+0x3a4>)
 8001960:	2700      	movs	r7, #0
 8001962:	4699      	mov	r9, r3
 8001964:	2300      	movs	r3, #0
 8001966:	469b      	mov	fp, r3
 8001968:	00f6      	lsls	r6, r6, #3
 800196a:	4481      	add	r9, r0
 800196c:	032b      	lsls	r3, r5, #12
 800196e:	0069      	lsls	r1, r5, #1
 8001970:	0b1b      	lsrs	r3, r3, #12
 8001972:	4652      	mov	r2, sl
 8001974:	4698      	mov	r8, r3
 8001976:	0d49      	lsrs	r1, r1, #21
 8001978:	0fed      	lsrs	r5, r5, #31
 800197a:	2900      	cmp	r1, #0
 800197c:	d100      	bne.n	8001980 <__aeabi_dmul+0x5c>
 800197e:	e085      	b.n	8001a8c <__aeabi_dmul+0x168>
 8001980:	4bd0      	ldr	r3, [pc, #832]	; (8001cc4 <__aeabi_dmul+0x3a0>)
 8001982:	4299      	cmp	r1, r3
 8001984:	d100      	bne.n	8001988 <__aeabi_dmul+0x64>
 8001986:	e073      	b.n	8001a70 <__aeabi_dmul+0x14c>
 8001988:	4643      	mov	r3, r8
 800198a:	00da      	lsls	r2, r3, #3
 800198c:	2380      	movs	r3, #128	; 0x80
 800198e:	041b      	lsls	r3, r3, #16
 8001990:	4313      	orrs	r3, r2
 8001992:	4652      	mov	r2, sl
 8001994:	48cc      	ldr	r0, [pc, #816]	; (8001cc8 <__aeabi_dmul+0x3a4>)
 8001996:	0f52      	lsrs	r2, r2, #29
 8001998:	4684      	mov	ip, r0
 800199a:	4313      	orrs	r3, r2
 800199c:	4652      	mov	r2, sl
 800199e:	2000      	movs	r0, #0
 80019a0:	4461      	add	r1, ip
 80019a2:	00d2      	lsls	r2, r2, #3
 80019a4:	4489      	add	r9, r1
 80019a6:	0021      	movs	r1, r4
 80019a8:	4069      	eors	r1, r5
 80019aa:	9100      	str	r1, [sp, #0]
 80019ac:	468c      	mov	ip, r1
 80019ae:	2101      	movs	r1, #1
 80019b0:	4449      	add	r1, r9
 80019b2:	468a      	mov	sl, r1
 80019b4:	2f0f      	cmp	r7, #15
 80019b6:	d900      	bls.n	80019ba <__aeabi_dmul+0x96>
 80019b8:	e090      	b.n	8001adc <__aeabi_dmul+0x1b8>
 80019ba:	49c4      	ldr	r1, [pc, #784]	; (8001ccc <__aeabi_dmul+0x3a8>)
 80019bc:	00bf      	lsls	r7, r7, #2
 80019be:	59cf      	ldr	r7, [r1, r7]
 80019c0:	46bf      	mov	pc, r7
 80019c2:	465b      	mov	r3, fp
 80019c4:	433b      	orrs	r3, r7
 80019c6:	9301      	str	r3, [sp, #4]
 80019c8:	d000      	beq.n	80019cc <__aeabi_dmul+0xa8>
 80019ca:	e16a      	b.n	8001ca2 <__aeabi_dmul+0x37e>
 80019cc:	2302      	movs	r3, #2
 80019ce:	2708      	movs	r7, #8
 80019d0:	2600      	movs	r6, #0
 80019d2:	4681      	mov	r9, r0
 80019d4:	469b      	mov	fp, r3
 80019d6:	e7c9      	b.n	800196c <__aeabi_dmul+0x48>
 80019d8:	0032      	movs	r2, r6
 80019da:	4658      	mov	r0, fp
 80019dc:	9b01      	ldr	r3, [sp, #4]
 80019de:	4661      	mov	r1, ip
 80019e0:	9100      	str	r1, [sp, #0]
 80019e2:	2802      	cmp	r0, #2
 80019e4:	d100      	bne.n	80019e8 <__aeabi_dmul+0xc4>
 80019e6:	e075      	b.n	8001ad4 <__aeabi_dmul+0x1b0>
 80019e8:	2803      	cmp	r0, #3
 80019ea:	d100      	bne.n	80019ee <__aeabi_dmul+0xca>
 80019ec:	e1fe      	b.n	8001dec <__aeabi_dmul+0x4c8>
 80019ee:	2801      	cmp	r0, #1
 80019f0:	d000      	beq.n	80019f4 <__aeabi_dmul+0xd0>
 80019f2:	e12c      	b.n	8001c4e <__aeabi_dmul+0x32a>
 80019f4:	2300      	movs	r3, #0
 80019f6:	2700      	movs	r7, #0
 80019f8:	2600      	movs	r6, #0
 80019fa:	2500      	movs	r5, #0
 80019fc:	033f      	lsls	r7, r7, #12
 80019fe:	0d2a      	lsrs	r2, r5, #20
 8001a00:	0b3f      	lsrs	r7, r7, #12
 8001a02:	48b3      	ldr	r0, [pc, #716]	; (8001cd0 <__aeabi_dmul+0x3ac>)
 8001a04:	0512      	lsls	r2, r2, #20
 8001a06:	433a      	orrs	r2, r7
 8001a08:	4002      	ands	r2, r0
 8001a0a:	051b      	lsls	r3, r3, #20
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	9a00      	ldr	r2, [sp, #0]
 8001a10:	005b      	lsls	r3, r3, #1
 8001a12:	07d1      	lsls	r1, r2, #31
 8001a14:	085b      	lsrs	r3, r3, #1
 8001a16:	430b      	orrs	r3, r1
 8001a18:	0030      	movs	r0, r6
 8001a1a:	0019      	movs	r1, r3
 8001a1c:	b007      	add	sp, #28
 8001a1e:	bc3c      	pop	{r2, r3, r4, r5}
 8001a20:	4690      	mov	r8, r2
 8001a22:	4699      	mov	r9, r3
 8001a24:	46a2      	mov	sl, r4
 8001a26:	46ab      	mov	fp, r5
 8001a28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a2a:	465b      	mov	r3, fp
 8001a2c:	433b      	orrs	r3, r7
 8001a2e:	9301      	str	r3, [sp, #4]
 8001a30:	d100      	bne.n	8001a34 <__aeabi_dmul+0x110>
 8001a32:	e12f      	b.n	8001c94 <__aeabi_dmul+0x370>
 8001a34:	2f00      	cmp	r7, #0
 8001a36:	d100      	bne.n	8001a3a <__aeabi_dmul+0x116>
 8001a38:	e1a5      	b.n	8001d86 <__aeabi_dmul+0x462>
 8001a3a:	0038      	movs	r0, r7
 8001a3c:	f000 fe20 	bl	8002680 <__clzsi2>
 8001a40:	0003      	movs	r3, r0
 8001a42:	3b0b      	subs	r3, #11
 8001a44:	2b1c      	cmp	r3, #28
 8001a46:	dd00      	ble.n	8001a4a <__aeabi_dmul+0x126>
 8001a48:	e196      	b.n	8001d78 <__aeabi_dmul+0x454>
 8001a4a:	221d      	movs	r2, #29
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	465a      	mov	r2, fp
 8001a50:	0001      	movs	r1, r0
 8001a52:	40da      	lsrs	r2, r3
 8001a54:	465e      	mov	r6, fp
 8001a56:	3908      	subs	r1, #8
 8001a58:	408f      	lsls	r7, r1
 8001a5a:	0013      	movs	r3, r2
 8001a5c:	408e      	lsls	r6, r1
 8001a5e:	433b      	orrs	r3, r7
 8001a60:	9301      	str	r3, [sp, #4]
 8001a62:	4b9c      	ldr	r3, [pc, #624]	; (8001cd4 <__aeabi_dmul+0x3b0>)
 8001a64:	2700      	movs	r7, #0
 8001a66:	1a1b      	subs	r3, r3, r0
 8001a68:	4699      	mov	r9, r3
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	469b      	mov	fp, r3
 8001a6e:	e77d      	b.n	800196c <__aeabi_dmul+0x48>
 8001a70:	4641      	mov	r1, r8
 8001a72:	4653      	mov	r3, sl
 8001a74:	430b      	orrs	r3, r1
 8001a76:	4993      	ldr	r1, [pc, #588]	; (8001cc4 <__aeabi_dmul+0x3a0>)
 8001a78:	468c      	mov	ip, r1
 8001a7a:	44e1      	add	r9, ip
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d000      	beq.n	8001a82 <__aeabi_dmul+0x15e>
 8001a80:	e11a      	b.n	8001cb8 <__aeabi_dmul+0x394>
 8001a82:	2202      	movs	r2, #2
 8001a84:	2002      	movs	r0, #2
 8001a86:	4317      	orrs	r7, r2
 8001a88:	2200      	movs	r2, #0
 8001a8a:	e78c      	b.n	80019a6 <__aeabi_dmul+0x82>
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	d100      	bne.n	8001a92 <__aeabi_dmul+0x16e>
 8001a90:	e10d      	b.n	8001cae <__aeabi_dmul+0x38a>
 8001a92:	4643      	mov	r3, r8
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d100      	bne.n	8001a9a <__aeabi_dmul+0x176>
 8001a98:	e181      	b.n	8001d9e <__aeabi_dmul+0x47a>
 8001a9a:	4640      	mov	r0, r8
 8001a9c:	f000 fdf0 	bl	8002680 <__clzsi2>
 8001aa0:	0002      	movs	r2, r0
 8001aa2:	3a0b      	subs	r2, #11
 8001aa4:	2a1c      	cmp	r2, #28
 8001aa6:	dd00      	ble.n	8001aaa <__aeabi_dmul+0x186>
 8001aa8:	e172      	b.n	8001d90 <__aeabi_dmul+0x46c>
 8001aaa:	0001      	movs	r1, r0
 8001aac:	4643      	mov	r3, r8
 8001aae:	3908      	subs	r1, #8
 8001ab0:	408b      	lsls	r3, r1
 8001ab2:	4698      	mov	r8, r3
 8001ab4:	231d      	movs	r3, #29
 8001ab6:	1a9a      	subs	r2, r3, r2
 8001ab8:	4653      	mov	r3, sl
 8001aba:	40d3      	lsrs	r3, r2
 8001abc:	001a      	movs	r2, r3
 8001abe:	4643      	mov	r3, r8
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	4652      	mov	r2, sl
 8001ac4:	408a      	lsls	r2, r1
 8001ac6:	4649      	mov	r1, r9
 8001ac8:	1a08      	subs	r0, r1, r0
 8001aca:	4982      	ldr	r1, [pc, #520]	; (8001cd4 <__aeabi_dmul+0x3b0>)
 8001acc:	4689      	mov	r9, r1
 8001ace:	4481      	add	r9, r0
 8001ad0:	2000      	movs	r0, #0
 8001ad2:	e768      	b.n	80019a6 <__aeabi_dmul+0x82>
 8001ad4:	4b7b      	ldr	r3, [pc, #492]	; (8001cc4 <__aeabi_dmul+0x3a0>)
 8001ad6:	2700      	movs	r7, #0
 8001ad8:	2600      	movs	r6, #0
 8001ada:	e78e      	b.n	80019fa <__aeabi_dmul+0xd6>
 8001adc:	0c14      	lsrs	r4, r2, #16
 8001ade:	0412      	lsls	r2, r2, #16
 8001ae0:	0c12      	lsrs	r2, r2, #16
 8001ae2:	0011      	movs	r1, r2
 8001ae4:	0c37      	lsrs	r7, r6, #16
 8001ae6:	0436      	lsls	r6, r6, #16
 8001ae8:	0c35      	lsrs	r5, r6, #16
 8001aea:	4379      	muls	r1, r7
 8001aec:	0028      	movs	r0, r5
 8001aee:	468c      	mov	ip, r1
 8001af0:	002e      	movs	r6, r5
 8001af2:	4360      	muls	r0, r4
 8001af4:	4460      	add	r0, ip
 8001af6:	4683      	mov	fp, r0
 8001af8:	4356      	muls	r6, r2
 8001afa:	0021      	movs	r1, r4
 8001afc:	0c30      	lsrs	r0, r6, #16
 8001afe:	4680      	mov	r8, r0
 8001b00:	4658      	mov	r0, fp
 8001b02:	4379      	muls	r1, r7
 8001b04:	4440      	add	r0, r8
 8001b06:	9102      	str	r1, [sp, #8]
 8001b08:	4584      	cmp	ip, r0
 8001b0a:	d906      	bls.n	8001b1a <__aeabi_dmul+0x1f6>
 8001b0c:	4688      	mov	r8, r1
 8001b0e:	2180      	movs	r1, #128	; 0x80
 8001b10:	0249      	lsls	r1, r1, #9
 8001b12:	468c      	mov	ip, r1
 8001b14:	44e0      	add	r8, ip
 8001b16:	4641      	mov	r1, r8
 8001b18:	9102      	str	r1, [sp, #8]
 8001b1a:	0436      	lsls	r6, r6, #16
 8001b1c:	0c01      	lsrs	r1, r0, #16
 8001b1e:	0c36      	lsrs	r6, r6, #16
 8001b20:	0400      	lsls	r0, r0, #16
 8001b22:	468b      	mov	fp, r1
 8001b24:	1981      	adds	r1, r0, r6
 8001b26:	0c1e      	lsrs	r6, r3, #16
 8001b28:	041b      	lsls	r3, r3, #16
 8001b2a:	0c1b      	lsrs	r3, r3, #16
 8001b2c:	9103      	str	r1, [sp, #12]
 8001b2e:	0019      	movs	r1, r3
 8001b30:	4379      	muls	r1, r7
 8001b32:	468c      	mov	ip, r1
 8001b34:	0028      	movs	r0, r5
 8001b36:	4375      	muls	r5, r6
 8001b38:	4465      	add	r5, ip
 8001b3a:	46a8      	mov	r8, r5
 8001b3c:	4358      	muls	r0, r3
 8001b3e:	0c05      	lsrs	r5, r0, #16
 8001b40:	4445      	add	r5, r8
 8001b42:	4377      	muls	r7, r6
 8001b44:	42a9      	cmp	r1, r5
 8001b46:	d903      	bls.n	8001b50 <__aeabi_dmul+0x22c>
 8001b48:	2180      	movs	r1, #128	; 0x80
 8001b4a:	0249      	lsls	r1, r1, #9
 8001b4c:	468c      	mov	ip, r1
 8001b4e:	4467      	add	r7, ip
 8001b50:	0c29      	lsrs	r1, r5, #16
 8001b52:	468c      	mov	ip, r1
 8001b54:	0039      	movs	r1, r7
 8001b56:	0400      	lsls	r0, r0, #16
 8001b58:	0c00      	lsrs	r0, r0, #16
 8001b5a:	042d      	lsls	r5, r5, #16
 8001b5c:	182d      	adds	r5, r5, r0
 8001b5e:	4461      	add	r1, ip
 8001b60:	44ab      	add	fp, r5
 8001b62:	9105      	str	r1, [sp, #20]
 8001b64:	4659      	mov	r1, fp
 8001b66:	9104      	str	r1, [sp, #16]
 8001b68:	9901      	ldr	r1, [sp, #4]
 8001b6a:	040f      	lsls	r7, r1, #16
 8001b6c:	0c3f      	lsrs	r7, r7, #16
 8001b6e:	0c08      	lsrs	r0, r1, #16
 8001b70:	0039      	movs	r1, r7
 8001b72:	4351      	muls	r1, r2
 8001b74:	4342      	muls	r2, r0
 8001b76:	4690      	mov	r8, r2
 8001b78:	0002      	movs	r2, r0
 8001b7a:	468c      	mov	ip, r1
 8001b7c:	0c09      	lsrs	r1, r1, #16
 8001b7e:	468b      	mov	fp, r1
 8001b80:	4362      	muls	r2, r4
 8001b82:	437c      	muls	r4, r7
 8001b84:	4444      	add	r4, r8
 8001b86:	445c      	add	r4, fp
 8001b88:	45a0      	cmp	r8, r4
 8001b8a:	d903      	bls.n	8001b94 <__aeabi_dmul+0x270>
 8001b8c:	2180      	movs	r1, #128	; 0x80
 8001b8e:	0249      	lsls	r1, r1, #9
 8001b90:	4688      	mov	r8, r1
 8001b92:	4442      	add	r2, r8
 8001b94:	0c21      	lsrs	r1, r4, #16
 8001b96:	4688      	mov	r8, r1
 8001b98:	4661      	mov	r1, ip
 8001b9a:	0409      	lsls	r1, r1, #16
 8001b9c:	0c09      	lsrs	r1, r1, #16
 8001b9e:	468c      	mov	ip, r1
 8001ba0:	0039      	movs	r1, r7
 8001ba2:	4359      	muls	r1, r3
 8001ba4:	4343      	muls	r3, r0
 8001ba6:	4370      	muls	r0, r6
 8001ba8:	437e      	muls	r6, r7
 8001baa:	0c0f      	lsrs	r7, r1, #16
 8001bac:	18f6      	adds	r6, r6, r3
 8001bae:	0424      	lsls	r4, r4, #16
 8001bb0:	19be      	adds	r6, r7, r6
 8001bb2:	4464      	add	r4, ip
 8001bb4:	4442      	add	r2, r8
 8001bb6:	468c      	mov	ip, r1
 8001bb8:	42b3      	cmp	r3, r6
 8001bba:	d903      	bls.n	8001bc4 <__aeabi_dmul+0x2a0>
 8001bbc:	2380      	movs	r3, #128	; 0x80
 8001bbe:	025b      	lsls	r3, r3, #9
 8001bc0:	4698      	mov	r8, r3
 8001bc2:	4440      	add	r0, r8
 8001bc4:	9b02      	ldr	r3, [sp, #8]
 8001bc6:	4661      	mov	r1, ip
 8001bc8:	4698      	mov	r8, r3
 8001bca:	9b04      	ldr	r3, [sp, #16]
 8001bcc:	0437      	lsls	r7, r6, #16
 8001bce:	4443      	add	r3, r8
 8001bd0:	469b      	mov	fp, r3
 8001bd2:	45ab      	cmp	fp, r5
 8001bd4:	41ad      	sbcs	r5, r5
 8001bd6:	426b      	negs	r3, r5
 8001bd8:	040d      	lsls	r5, r1, #16
 8001bda:	9905      	ldr	r1, [sp, #20]
 8001bdc:	0c2d      	lsrs	r5, r5, #16
 8001bde:	468c      	mov	ip, r1
 8001be0:	197f      	adds	r7, r7, r5
 8001be2:	4467      	add	r7, ip
 8001be4:	18fd      	adds	r5, r7, r3
 8001be6:	46a8      	mov	r8, r5
 8001be8:	465d      	mov	r5, fp
 8001bea:	192d      	adds	r5, r5, r4
 8001bec:	42a5      	cmp	r5, r4
 8001bee:	41a4      	sbcs	r4, r4
 8001bf0:	4693      	mov	fp, r2
 8001bf2:	4264      	negs	r4, r4
 8001bf4:	46a4      	mov	ip, r4
 8001bf6:	44c3      	add	fp, r8
 8001bf8:	44dc      	add	ip, fp
 8001bfa:	428f      	cmp	r7, r1
 8001bfc:	41bf      	sbcs	r7, r7
 8001bfe:	4598      	cmp	r8, r3
 8001c00:	419b      	sbcs	r3, r3
 8001c02:	4593      	cmp	fp, r2
 8001c04:	4192      	sbcs	r2, r2
 8001c06:	45a4      	cmp	ip, r4
 8001c08:	41a4      	sbcs	r4, r4
 8001c0a:	425b      	negs	r3, r3
 8001c0c:	427f      	negs	r7, r7
 8001c0e:	431f      	orrs	r7, r3
 8001c10:	0c36      	lsrs	r6, r6, #16
 8001c12:	4252      	negs	r2, r2
 8001c14:	4264      	negs	r4, r4
 8001c16:	19bf      	adds	r7, r7, r6
 8001c18:	4322      	orrs	r2, r4
 8001c1a:	18bf      	adds	r7, r7, r2
 8001c1c:	4662      	mov	r2, ip
 8001c1e:	1838      	adds	r0, r7, r0
 8001c20:	0243      	lsls	r3, r0, #9
 8001c22:	0dd2      	lsrs	r2, r2, #23
 8001c24:	9903      	ldr	r1, [sp, #12]
 8001c26:	4313      	orrs	r3, r2
 8001c28:	026a      	lsls	r2, r5, #9
 8001c2a:	430a      	orrs	r2, r1
 8001c2c:	1e50      	subs	r0, r2, #1
 8001c2e:	4182      	sbcs	r2, r0
 8001c30:	4661      	mov	r1, ip
 8001c32:	0ded      	lsrs	r5, r5, #23
 8001c34:	432a      	orrs	r2, r5
 8001c36:	024e      	lsls	r6, r1, #9
 8001c38:	4332      	orrs	r2, r6
 8001c3a:	01d9      	lsls	r1, r3, #7
 8001c3c:	d400      	bmi.n	8001c40 <__aeabi_dmul+0x31c>
 8001c3e:	e0b3      	b.n	8001da8 <__aeabi_dmul+0x484>
 8001c40:	2601      	movs	r6, #1
 8001c42:	0850      	lsrs	r0, r2, #1
 8001c44:	4032      	ands	r2, r6
 8001c46:	4302      	orrs	r2, r0
 8001c48:	07de      	lsls	r6, r3, #31
 8001c4a:	4332      	orrs	r2, r6
 8001c4c:	085b      	lsrs	r3, r3, #1
 8001c4e:	4c22      	ldr	r4, [pc, #136]	; (8001cd8 <__aeabi_dmul+0x3b4>)
 8001c50:	4454      	add	r4, sl
 8001c52:	2c00      	cmp	r4, #0
 8001c54:	dd62      	ble.n	8001d1c <__aeabi_dmul+0x3f8>
 8001c56:	0751      	lsls	r1, r2, #29
 8001c58:	d009      	beq.n	8001c6e <__aeabi_dmul+0x34a>
 8001c5a:	200f      	movs	r0, #15
 8001c5c:	4010      	ands	r0, r2
 8001c5e:	2804      	cmp	r0, #4
 8001c60:	d005      	beq.n	8001c6e <__aeabi_dmul+0x34a>
 8001c62:	1d10      	adds	r0, r2, #4
 8001c64:	4290      	cmp	r0, r2
 8001c66:	4192      	sbcs	r2, r2
 8001c68:	4252      	negs	r2, r2
 8001c6a:	189b      	adds	r3, r3, r2
 8001c6c:	0002      	movs	r2, r0
 8001c6e:	01d9      	lsls	r1, r3, #7
 8001c70:	d504      	bpl.n	8001c7c <__aeabi_dmul+0x358>
 8001c72:	2480      	movs	r4, #128	; 0x80
 8001c74:	4819      	ldr	r0, [pc, #100]	; (8001cdc <__aeabi_dmul+0x3b8>)
 8001c76:	00e4      	lsls	r4, r4, #3
 8001c78:	4003      	ands	r3, r0
 8001c7a:	4454      	add	r4, sl
 8001c7c:	4818      	ldr	r0, [pc, #96]	; (8001ce0 <__aeabi_dmul+0x3bc>)
 8001c7e:	4284      	cmp	r4, r0
 8001c80:	dd00      	ble.n	8001c84 <__aeabi_dmul+0x360>
 8001c82:	e727      	b.n	8001ad4 <__aeabi_dmul+0x1b0>
 8001c84:	075e      	lsls	r6, r3, #29
 8001c86:	025b      	lsls	r3, r3, #9
 8001c88:	08d2      	lsrs	r2, r2, #3
 8001c8a:	0b1f      	lsrs	r7, r3, #12
 8001c8c:	0563      	lsls	r3, r4, #21
 8001c8e:	4316      	orrs	r6, r2
 8001c90:	0d5b      	lsrs	r3, r3, #21
 8001c92:	e6b2      	b.n	80019fa <__aeabi_dmul+0xd6>
 8001c94:	2300      	movs	r3, #0
 8001c96:	4699      	mov	r9, r3
 8001c98:	3301      	adds	r3, #1
 8001c9a:	2704      	movs	r7, #4
 8001c9c:	2600      	movs	r6, #0
 8001c9e:	469b      	mov	fp, r3
 8001ca0:	e664      	b.n	800196c <__aeabi_dmul+0x48>
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	9701      	str	r7, [sp, #4]
 8001ca6:	4681      	mov	r9, r0
 8001ca8:	270c      	movs	r7, #12
 8001caa:	469b      	mov	fp, r3
 8001cac:	e65e      	b.n	800196c <__aeabi_dmul+0x48>
 8001cae:	2201      	movs	r2, #1
 8001cb0:	2001      	movs	r0, #1
 8001cb2:	4317      	orrs	r7, r2
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	e676      	b.n	80019a6 <__aeabi_dmul+0x82>
 8001cb8:	2303      	movs	r3, #3
 8001cba:	2003      	movs	r0, #3
 8001cbc:	431f      	orrs	r7, r3
 8001cbe:	4643      	mov	r3, r8
 8001cc0:	e671      	b.n	80019a6 <__aeabi_dmul+0x82>
 8001cc2:	46c0      	nop			; (mov r8, r8)
 8001cc4:	000007ff 	.word	0x000007ff
 8001cc8:	fffffc01 	.word	0xfffffc01
 8001ccc:	0800fb1c 	.word	0x0800fb1c
 8001cd0:	800fffff 	.word	0x800fffff
 8001cd4:	fffffc0d 	.word	0xfffffc0d
 8001cd8:	000003ff 	.word	0x000003ff
 8001cdc:	feffffff 	.word	0xfeffffff
 8001ce0:	000007fe 	.word	0x000007fe
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	2780      	movs	r7, #128	; 0x80
 8001ce8:	9300      	str	r3, [sp, #0]
 8001cea:	033f      	lsls	r7, r7, #12
 8001cec:	2600      	movs	r6, #0
 8001cee:	4b43      	ldr	r3, [pc, #268]	; (8001dfc <__aeabi_dmul+0x4d8>)
 8001cf0:	e683      	b.n	80019fa <__aeabi_dmul+0xd6>
 8001cf2:	9b01      	ldr	r3, [sp, #4]
 8001cf4:	0032      	movs	r2, r6
 8001cf6:	46a4      	mov	ip, r4
 8001cf8:	4658      	mov	r0, fp
 8001cfa:	e670      	b.n	80019de <__aeabi_dmul+0xba>
 8001cfc:	46ac      	mov	ip, r5
 8001cfe:	e66e      	b.n	80019de <__aeabi_dmul+0xba>
 8001d00:	2780      	movs	r7, #128	; 0x80
 8001d02:	9901      	ldr	r1, [sp, #4]
 8001d04:	033f      	lsls	r7, r7, #12
 8001d06:	4239      	tst	r1, r7
 8001d08:	d02d      	beq.n	8001d66 <__aeabi_dmul+0x442>
 8001d0a:	423b      	tst	r3, r7
 8001d0c:	d12b      	bne.n	8001d66 <__aeabi_dmul+0x442>
 8001d0e:	431f      	orrs	r7, r3
 8001d10:	033f      	lsls	r7, r7, #12
 8001d12:	0b3f      	lsrs	r7, r7, #12
 8001d14:	9500      	str	r5, [sp, #0]
 8001d16:	0016      	movs	r6, r2
 8001d18:	4b38      	ldr	r3, [pc, #224]	; (8001dfc <__aeabi_dmul+0x4d8>)
 8001d1a:	e66e      	b.n	80019fa <__aeabi_dmul+0xd6>
 8001d1c:	2501      	movs	r5, #1
 8001d1e:	1b2d      	subs	r5, r5, r4
 8001d20:	2d38      	cmp	r5, #56	; 0x38
 8001d22:	dd00      	ble.n	8001d26 <__aeabi_dmul+0x402>
 8001d24:	e666      	b.n	80019f4 <__aeabi_dmul+0xd0>
 8001d26:	2d1f      	cmp	r5, #31
 8001d28:	dc40      	bgt.n	8001dac <__aeabi_dmul+0x488>
 8001d2a:	4835      	ldr	r0, [pc, #212]	; (8001e00 <__aeabi_dmul+0x4dc>)
 8001d2c:	001c      	movs	r4, r3
 8001d2e:	4450      	add	r0, sl
 8001d30:	0016      	movs	r6, r2
 8001d32:	4082      	lsls	r2, r0
 8001d34:	4084      	lsls	r4, r0
 8001d36:	40ee      	lsrs	r6, r5
 8001d38:	1e50      	subs	r0, r2, #1
 8001d3a:	4182      	sbcs	r2, r0
 8001d3c:	4334      	orrs	r4, r6
 8001d3e:	4314      	orrs	r4, r2
 8001d40:	40eb      	lsrs	r3, r5
 8001d42:	0762      	lsls	r2, r4, #29
 8001d44:	d009      	beq.n	8001d5a <__aeabi_dmul+0x436>
 8001d46:	220f      	movs	r2, #15
 8001d48:	4022      	ands	r2, r4
 8001d4a:	2a04      	cmp	r2, #4
 8001d4c:	d005      	beq.n	8001d5a <__aeabi_dmul+0x436>
 8001d4e:	0022      	movs	r2, r4
 8001d50:	1d14      	adds	r4, r2, #4
 8001d52:	4294      	cmp	r4, r2
 8001d54:	4180      	sbcs	r0, r0
 8001d56:	4240      	negs	r0, r0
 8001d58:	181b      	adds	r3, r3, r0
 8001d5a:	021a      	lsls	r2, r3, #8
 8001d5c:	d53e      	bpl.n	8001ddc <__aeabi_dmul+0x4b8>
 8001d5e:	2301      	movs	r3, #1
 8001d60:	2700      	movs	r7, #0
 8001d62:	2600      	movs	r6, #0
 8001d64:	e649      	b.n	80019fa <__aeabi_dmul+0xd6>
 8001d66:	2780      	movs	r7, #128	; 0x80
 8001d68:	9b01      	ldr	r3, [sp, #4]
 8001d6a:	033f      	lsls	r7, r7, #12
 8001d6c:	431f      	orrs	r7, r3
 8001d6e:	033f      	lsls	r7, r7, #12
 8001d70:	0b3f      	lsrs	r7, r7, #12
 8001d72:	9400      	str	r4, [sp, #0]
 8001d74:	4b21      	ldr	r3, [pc, #132]	; (8001dfc <__aeabi_dmul+0x4d8>)
 8001d76:	e640      	b.n	80019fa <__aeabi_dmul+0xd6>
 8001d78:	0003      	movs	r3, r0
 8001d7a:	465a      	mov	r2, fp
 8001d7c:	3b28      	subs	r3, #40	; 0x28
 8001d7e:	409a      	lsls	r2, r3
 8001d80:	2600      	movs	r6, #0
 8001d82:	9201      	str	r2, [sp, #4]
 8001d84:	e66d      	b.n	8001a62 <__aeabi_dmul+0x13e>
 8001d86:	4658      	mov	r0, fp
 8001d88:	f000 fc7a 	bl	8002680 <__clzsi2>
 8001d8c:	3020      	adds	r0, #32
 8001d8e:	e657      	b.n	8001a40 <__aeabi_dmul+0x11c>
 8001d90:	0003      	movs	r3, r0
 8001d92:	4652      	mov	r2, sl
 8001d94:	3b28      	subs	r3, #40	; 0x28
 8001d96:	409a      	lsls	r2, r3
 8001d98:	0013      	movs	r3, r2
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	e693      	b.n	8001ac6 <__aeabi_dmul+0x1a2>
 8001d9e:	4650      	mov	r0, sl
 8001da0:	f000 fc6e 	bl	8002680 <__clzsi2>
 8001da4:	3020      	adds	r0, #32
 8001da6:	e67b      	b.n	8001aa0 <__aeabi_dmul+0x17c>
 8001da8:	46ca      	mov	sl, r9
 8001daa:	e750      	b.n	8001c4e <__aeabi_dmul+0x32a>
 8001dac:	201f      	movs	r0, #31
 8001dae:	001e      	movs	r6, r3
 8001db0:	4240      	negs	r0, r0
 8001db2:	1b04      	subs	r4, r0, r4
 8001db4:	40e6      	lsrs	r6, r4
 8001db6:	2d20      	cmp	r5, #32
 8001db8:	d003      	beq.n	8001dc2 <__aeabi_dmul+0x49e>
 8001dba:	4c12      	ldr	r4, [pc, #72]	; (8001e04 <__aeabi_dmul+0x4e0>)
 8001dbc:	4454      	add	r4, sl
 8001dbe:	40a3      	lsls	r3, r4
 8001dc0:	431a      	orrs	r2, r3
 8001dc2:	1e50      	subs	r0, r2, #1
 8001dc4:	4182      	sbcs	r2, r0
 8001dc6:	4332      	orrs	r2, r6
 8001dc8:	2607      	movs	r6, #7
 8001dca:	2700      	movs	r7, #0
 8001dcc:	4016      	ands	r6, r2
 8001dce:	d009      	beq.n	8001de4 <__aeabi_dmul+0x4c0>
 8001dd0:	200f      	movs	r0, #15
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	4010      	ands	r0, r2
 8001dd6:	0014      	movs	r4, r2
 8001dd8:	2804      	cmp	r0, #4
 8001dda:	d1b9      	bne.n	8001d50 <__aeabi_dmul+0x42c>
 8001ddc:	0022      	movs	r2, r4
 8001dde:	075e      	lsls	r6, r3, #29
 8001de0:	025b      	lsls	r3, r3, #9
 8001de2:	0b1f      	lsrs	r7, r3, #12
 8001de4:	08d2      	lsrs	r2, r2, #3
 8001de6:	4316      	orrs	r6, r2
 8001de8:	2300      	movs	r3, #0
 8001dea:	e606      	b.n	80019fa <__aeabi_dmul+0xd6>
 8001dec:	2780      	movs	r7, #128	; 0x80
 8001dee:	033f      	lsls	r7, r7, #12
 8001df0:	431f      	orrs	r7, r3
 8001df2:	033f      	lsls	r7, r7, #12
 8001df4:	0b3f      	lsrs	r7, r7, #12
 8001df6:	0016      	movs	r6, r2
 8001df8:	4b00      	ldr	r3, [pc, #0]	; (8001dfc <__aeabi_dmul+0x4d8>)
 8001dfa:	e5fe      	b.n	80019fa <__aeabi_dmul+0xd6>
 8001dfc:	000007ff 	.word	0x000007ff
 8001e00:	0000041e 	.word	0x0000041e
 8001e04:	0000043e 	.word	0x0000043e

08001e08 <__aeabi_dsub>:
 8001e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e0a:	4657      	mov	r7, sl
 8001e0c:	464e      	mov	r6, r9
 8001e0e:	4645      	mov	r5, r8
 8001e10:	46de      	mov	lr, fp
 8001e12:	000c      	movs	r4, r1
 8001e14:	0309      	lsls	r1, r1, #12
 8001e16:	b5e0      	push	{r5, r6, r7, lr}
 8001e18:	0a49      	lsrs	r1, r1, #9
 8001e1a:	0f46      	lsrs	r6, r0, #29
 8001e1c:	005f      	lsls	r7, r3, #1
 8001e1e:	4331      	orrs	r1, r6
 8001e20:	031e      	lsls	r6, r3, #12
 8001e22:	0fdb      	lsrs	r3, r3, #31
 8001e24:	0a76      	lsrs	r6, r6, #9
 8001e26:	469b      	mov	fp, r3
 8001e28:	0f53      	lsrs	r3, r2, #29
 8001e2a:	4333      	orrs	r3, r6
 8001e2c:	4ec8      	ldr	r6, [pc, #800]	; (8002150 <__aeabi_dsub+0x348>)
 8001e2e:	0065      	lsls	r5, r4, #1
 8001e30:	00c0      	lsls	r0, r0, #3
 8001e32:	0fe4      	lsrs	r4, r4, #31
 8001e34:	00d2      	lsls	r2, r2, #3
 8001e36:	0d6d      	lsrs	r5, r5, #21
 8001e38:	46a2      	mov	sl, r4
 8001e3a:	4681      	mov	r9, r0
 8001e3c:	0d7f      	lsrs	r7, r7, #21
 8001e3e:	469c      	mov	ip, r3
 8001e40:	4690      	mov	r8, r2
 8001e42:	42b7      	cmp	r7, r6
 8001e44:	d100      	bne.n	8001e48 <__aeabi_dsub+0x40>
 8001e46:	e0b9      	b.n	8001fbc <__aeabi_dsub+0x1b4>
 8001e48:	465b      	mov	r3, fp
 8001e4a:	2601      	movs	r6, #1
 8001e4c:	4073      	eors	r3, r6
 8001e4e:	469b      	mov	fp, r3
 8001e50:	1bee      	subs	r6, r5, r7
 8001e52:	45a3      	cmp	fp, r4
 8001e54:	d100      	bne.n	8001e58 <__aeabi_dsub+0x50>
 8001e56:	e083      	b.n	8001f60 <__aeabi_dsub+0x158>
 8001e58:	2e00      	cmp	r6, #0
 8001e5a:	dd63      	ble.n	8001f24 <__aeabi_dsub+0x11c>
 8001e5c:	2f00      	cmp	r7, #0
 8001e5e:	d000      	beq.n	8001e62 <__aeabi_dsub+0x5a>
 8001e60:	e0b1      	b.n	8001fc6 <__aeabi_dsub+0x1be>
 8001e62:	4663      	mov	r3, ip
 8001e64:	4313      	orrs	r3, r2
 8001e66:	d100      	bne.n	8001e6a <__aeabi_dsub+0x62>
 8001e68:	e123      	b.n	80020b2 <__aeabi_dsub+0x2aa>
 8001e6a:	1e73      	subs	r3, r6, #1
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d000      	beq.n	8001e72 <__aeabi_dsub+0x6a>
 8001e70:	e1ba      	b.n	80021e8 <__aeabi_dsub+0x3e0>
 8001e72:	1a86      	subs	r6, r0, r2
 8001e74:	4663      	mov	r3, ip
 8001e76:	42b0      	cmp	r0, r6
 8001e78:	4180      	sbcs	r0, r0
 8001e7a:	2501      	movs	r5, #1
 8001e7c:	1ac9      	subs	r1, r1, r3
 8001e7e:	4240      	negs	r0, r0
 8001e80:	1a09      	subs	r1, r1, r0
 8001e82:	020b      	lsls	r3, r1, #8
 8001e84:	d400      	bmi.n	8001e88 <__aeabi_dsub+0x80>
 8001e86:	e147      	b.n	8002118 <__aeabi_dsub+0x310>
 8001e88:	0249      	lsls	r1, r1, #9
 8001e8a:	0a4b      	lsrs	r3, r1, #9
 8001e8c:	4698      	mov	r8, r3
 8001e8e:	4643      	mov	r3, r8
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d100      	bne.n	8001e96 <__aeabi_dsub+0x8e>
 8001e94:	e189      	b.n	80021aa <__aeabi_dsub+0x3a2>
 8001e96:	4640      	mov	r0, r8
 8001e98:	f000 fbf2 	bl	8002680 <__clzsi2>
 8001e9c:	0003      	movs	r3, r0
 8001e9e:	3b08      	subs	r3, #8
 8001ea0:	2b1f      	cmp	r3, #31
 8001ea2:	dd00      	ble.n	8001ea6 <__aeabi_dsub+0x9e>
 8001ea4:	e17c      	b.n	80021a0 <__aeabi_dsub+0x398>
 8001ea6:	2220      	movs	r2, #32
 8001ea8:	0030      	movs	r0, r6
 8001eaa:	1ad2      	subs	r2, r2, r3
 8001eac:	4641      	mov	r1, r8
 8001eae:	40d0      	lsrs	r0, r2
 8001eb0:	4099      	lsls	r1, r3
 8001eb2:	0002      	movs	r2, r0
 8001eb4:	409e      	lsls	r6, r3
 8001eb6:	430a      	orrs	r2, r1
 8001eb8:	429d      	cmp	r5, r3
 8001eba:	dd00      	ble.n	8001ebe <__aeabi_dsub+0xb6>
 8001ebc:	e16a      	b.n	8002194 <__aeabi_dsub+0x38c>
 8001ebe:	1b5d      	subs	r5, r3, r5
 8001ec0:	1c6b      	adds	r3, r5, #1
 8001ec2:	2b1f      	cmp	r3, #31
 8001ec4:	dd00      	ble.n	8001ec8 <__aeabi_dsub+0xc0>
 8001ec6:	e194      	b.n	80021f2 <__aeabi_dsub+0x3ea>
 8001ec8:	2120      	movs	r1, #32
 8001eca:	0010      	movs	r0, r2
 8001ecc:	0035      	movs	r5, r6
 8001ece:	1ac9      	subs	r1, r1, r3
 8001ed0:	408e      	lsls	r6, r1
 8001ed2:	40da      	lsrs	r2, r3
 8001ed4:	4088      	lsls	r0, r1
 8001ed6:	40dd      	lsrs	r5, r3
 8001ed8:	1e71      	subs	r1, r6, #1
 8001eda:	418e      	sbcs	r6, r1
 8001edc:	0011      	movs	r1, r2
 8001ede:	2207      	movs	r2, #7
 8001ee0:	4328      	orrs	r0, r5
 8001ee2:	2500      	movs	r5, #0
 8001ee4:	4306      	orrs	r6, r0
 8001ee6:	4032      	ands	r2, r6
 8001ee8:	2a00      	cmp	r2, #0
 8001eea:	d009      	beq.n	8001f00 <__aeabi_dsub+0xf8>
 8001eec:	230f      	movs	r3, #15
 8001eee:	4033      	ands	r3, r6
 8001ef0:	2b04      	cmp	r3, #4
 8001ef2:	d005      	beq.n	8001f00 <__aeabi_dsub+0xf8>
 8001ef4:	1d33      	adds	r3, r6, #4
 8001ef6:	42b3      	cmp	r3, r6
 8001ef8:	41b6      	sbcs	r6, r6
 8001efa:	4276      	negs	r6, r6
 8001efc:	1989      	adds	r1, r1, r6
 8001efe:	001e      	movs	r6, r3
 8001f00:	020b      	lsls	r3, r1, #8
 8001f02:	d400      	bmi.n	8001f06 <__aeabi_dsub+0xfe>
 8001f04:	e23d      	b.n	8002382 <__aeabi_dsub+0x57a>
 8001f06:	1c6a      	adds	r2, r5, #1
 8001f08:	4b91      	ldr	r3, [pc, #580]	; (8002150 <__aeabi_dsub+0x348>)
 8001f0a:	0555      	lsls	r5, r2, #21
 8001f0c:	0d6d      	lsrs	r5, r5, #21
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d100      	bne.n	8001f14 <__aeabi_dsub+0x10c>
 8001f12:	e119      	b.n	8002148 <__aeabi_dsub+0x340>
 8001f14:	4a8f      	ldr	r2, [pc, #572]	; (8002154 <__aeabi_dsub+0x34c>)
 8001f16:	08f6      	lsrs	r6, r6, #3
 8001f18:	400a      	ands	r2, r1
 8001f1a:	0757      	lsls	r7, r2, #29
 8001f1c:	0252      	lsls	r2, r2, #9
 8001f1e:	4337      	orrs	r7, r6
 8001f20:	0b12      	lsrs	r2, r2, #12
 8001f22:	e09b      	b.n	800205c <__aeabi_dsub+0x254>
 8001f24:	2e00      	cmp	r6, #0
 8001f26:	d000      	beq.n	8001f2a <__aeabi_dsub+0x122>
 8001f28:	e0c5      	b.n	80020b6 <__aeabi_dsub+0x2ae>
 8001f2a:	1c6e      	adds	r6, r5, #1
 8001f2c:	0576      	lsls	r6, r6, #21
 8001f2e:	0d76      	lsrs	r6, r6, #21
 8001f30:	2e01      	cmp	r6, #1
 8001f32:	dc00      	bgt.n	8001f36 <__aeabi_dsub+0x12e>
 8001f34:	e148      	b.n	80021c8 <__aeabi_dsub+0x3c0>
 8001f36:	4667      	mov	r7, ip
 8001f38:	1a86      	subs	r6, r0, r2
 8001f3a:	1bcb      	subs	r3, r1, r7
 8001f3c:	42b0      	cmp	r0, r6
 8001f3e:	41bf      	sbcs	r7, r7
 8001f40:	427f      	negs	r7, r7
 8001f42:	46b8      	mov	r8, r7
 8001f44:	001f      	movs	r7, r3
 8001f46:	4643      	mov	r3, r8
 8001f48:	1aff      	subs	r7, r7, r3
 8001f4a:	003b      	movs	r3, r7
 8001f4c:	46b8      	mov	r8, r7
 8001f4e:	021b      	lsls	r3, r3, #8
 8001f50:	d500      	bpl.n	8001f54 <__aeabi_dsub+0x14c>
 8001f52:	e15f      	b.n	8002214 <__aeabi_dsub+0x40c>
 8001f54:	4337      	orrs	r7, r6
 8001f56:	d19a      	bne.n	8001e8e <__aeabi_dsub+0x86>
 8001f58:	2200      	movs	r2, #0
 8001f5a:	2400      	movs	r4, #0
 8001f5c:	2500      	movs	r5, #0
 8001f5e:	e079      	b.n	8002054 <__aeabi_dsub+0x24c>
 8001f60:	2e00      	cmp	r6, #0
 8001f62:	dc00      	bgt.n	8001f66 <__aeabi_dsub+0x15e>
 8001f64:	e0fa      	b.n	800215c <__aeabi_dsub+0x354>
 8001f66:	2f00      	cmp	r7, #0
 8001f68:	d100      	bne.n	8001f6c <__aeabi_dsub+0x164>
 8001f6a:	e08d      	b.n	8002088 <__aeabi_dsub+0x280>
 8001f6c:	4b78      	ldr	r3, [pc, #480]	; (8002150 <__aeabi_dsub+0x348>)
 8001f6e:	429d      	cmp	r5, r3
 8001f70:	d067      	beq.n	8002042 <__aeabi_dsub+0x23a>
 8001f72:	2380      	movs	r3, #128	; 0x80
 8001f74:	4667      	mov	r7, ip
 8001f76:	041b      	lsls	r3, r3, #16
 8001f78:	431f      	orrs	r7, r3
 8001f7a:	46bc      	mov	ip, r7
 8001f7c:	2e38      	cmp	r6, #56	; 0x38
 8001f7e:	dc00      	bgt.n	8001f82 <__aeabi_dsub+0x17a>
 8001f80:	e152      	b.n	8002228 <__aeabi_dsub+0x420>
 8001f82:	4663      	mov	r3, ip
 8001f84:	4313      	orrs	r3, r2
 8001f86:	1e5a      	subs	r2, r3, #1
 8001f88:	4193      	sbcs	r3, r2
 8001f8a:	181e      	adds	r6, r3, r0
 8001f8c:	4286      	cmp	r6, r0
 8001f8e:	4180      	sbcs	r0, r0
 8001f90:	4240      	negs	r0, r0
 8001f92:	1809      	adds	r1, r1, r0
 8001f94:	020b      	lsls	r3, r1, #8
 8001f96:	d400      	bmi.n	8001f9a <__aeabi_dsub+0x192>
 8001f98:	e0be      	b.n	8002118 <__aeabi_dsub+0x310>
 8001f9a:	4b6d      	ldr	r3, [pc, #436]	; (8002150 <__aeabi_dsub+0x348>)
 8001f9c:	3501      	adds	r5, #1
 8001f9e:	429d      	cmp	r5, r3
 8001fa0:	d100      	bne.n	8001fa4 <__aeabi_dsub+0x19c>
 8001fa2:	e0d2      	b.n	800214a <__aeabi_dsub+0x342>
 8001fa4:	4a6b      	ldr	r2, [pc, #428]	; (8002154 <__aeabi_dsub+0x34c>)
 8001fa6:	0873      	lsrs	r3, r6, #1
 8001fa8:	400a      	ands	r2, r1
 8001faa:	2101      	movs	r1, #1
 8001fac:	400e      	ands	r6, r1
 8001fae:	431e      	orrs	r6, r3
 8001fb0:	0851      	lsrs	r1, r2, #1
 8001fb2:	07d3      	lsls	r3, r2, #31
 8001fb4:	2207      	movs	r2, #7
 8001fb6:	431e      	orrs	r6, r3
 8001fb8:	4032      	ands	r2, r6
 8001fba:	e795      	b.n	8001ee8 <__aeabi_dsub+0xe0>
 8001fbc:	001e      	movs	r6, r3
 8001fbe:	4316      	orrs	r6, r2
 8001fc0:	d000      	beq.n	8001fc4 <__aeabi_dsub+0x1bc>
 8001fc2:	e745      	b.n	8001e50 <__aeabi_dsub+0x48>
 8001fc4:	e740      	b.n	8001e48 <__aeabi_dsub+0x40>
 8001fc6:	4b62      	ldr	r3, [pc, #392]	; (8002150 <__aeabi_dsub+0x348>)
 8001fc8:	429d      	cmp	r5, r3
 8001fca:	d03a      	beq.n	8002042 <__aeabi_dsub+0x23a>
 8001fcc:	2380      	movs	r3, #128	; 0x80
 8001fce:	4667      	mov	r7, ip
 8001fd0:	041b      	lsls	r3, r3, #16
 8001fd2:	431f      	orrs	r7, r3
 8001fd4:	46bc      	mov	ip, r7
 8001fd6:	2e38      	cmp	r6, #56	; 0x38
 8001fd8:	dd00      	ble.n	8001fdc <__aeabi_dsub+0x1d4>
 8001fda:	e0eb      	b.n	80021b4 <__aeabi_dsub+0x3ac>
 8001fdc:	2e1f      	cmp	r6, #31
 8001fde:	dc00      	bgt.n	8001fe2 <__aeabi_dsub+0x1da>
 8001fe0:	e13a      	b.n	8002258 <__aeabi_dsub+0x450>
 8001fe2:	0033      	movs	r3, r6
 8001fe4:	4667      	mov	r7, ip
 8001fe6:	3b20      	subs	r3, #32
 8001fe8:	40df      	lsrs	r7, r3
 8001fea:	003b      	movs	r3, r7
 8001fec:	2e20      	cmp	r6, #32
 8001fee:	d005      	beq.n	8001ffc <__aeabi_dsub+0x1f4>
 8001ff0:	2740      	movs	r7, #64	; 0x40
 8001ff2:	1bbf      	subs	r7, r7, r6
 8001ff4:	4666      	mov	r6, ip
 8001ff6:	40be      	lsls	r6, r7
 8001ff8:	4332      	orrs	r2, r6
 8001ffa:	4690      	mov	r8, r2
 8001ffc:	4646      	mov	r6, r8
 8001ffe:	1e72      	subs	r2, r6, #1
 8002000:	4196      	sbcs	r6, r2
 8002002:	4333      	orrs	r3, r6
 8002004:	e0da      	b.n	80021bc <__aeabi_dsub+0x3b4>
 8002006:	2b00      	cmp	r3, #0
 8002008:	d100      	bne.n	800200c <__aeabi_dsub+0x204>
 800200a:	e214      	b.n	8002436 <__aeabi_dsub+0x62e>
 800200c:	4663      	mov	r3, ip
 800200e:	4313      	orrs	r3, r2
 8002010:	d100      	bne.n	8002014 <__aeabi_dsub+0x20c>
 8002012:	e168      	b.n	80022e6 <__aeabi_dsub+0x4de>
 8002014:	2380      	movs	r3, #128	; 0x80
 8002016:	074e      	lsls	r6, r1, #29
 8002018:	08c0      	lsrs	r0, r0, #3
 800201a:	08c9      	lsrs	r1, r1, #3
 800201c:	031b      	lsls	r3, r3, #12
 800201e:	4306      	orrs	r6, r0
 8002020:	4219      	tst	r1, r3
 8002022:	d008      	beq.n	8002036 <__aeabi_dsub+0x22e>
 8002024:	4660      	mov	r0, ip
 8002026:	08c0      	lsrs	r0, r0, #3
 8002028:	4218      	tst	r0, r3
 800202a:	d104      	bne.n	8002036 <__aeabi_dsub+0x22e>
 800202c:	4663      	mov	r3, ip
 800202e:	0001      	movs	r1, r0
 8002030:	08d2      	lsrs	r2, r2, #3
 8002032:	075e      	lsls	r6, r3, #29
 8002034:	4316      	orrs	r6, r2
 8002036:	00f3      	lsls	r3, r6, #3
 8002038:	4699      	mov	r9, r3
 800203a:	00c9      	lsls	r1, r1, #3
 800203c:	0f72      	lsrs	r2, r6, #29
 800203e:	4d44      	ldr	r5, [pc, #272]	; (8002150 <__aeabi_dsub+0x348>)
 8002040:	4311      	orrs	r1, r2
 8002042:	464b      	mov	r3, r9
 8002044:	08de      	lsrs	r6, r3, #3
 8002046:	4b42      	ldr	r3, [pc, #264]	; (8002150 <__aeabi_dsub+0x348>)
 8002048:	074f      	lsls	r7, r1, #29
 800204a:	4337      	orrs	r7, r6
 800204c:	08ca      	lsrs	r2, r1, #3
 800204e:	429d      	cmp	r5, r3
 8002050:	d100      	bne.n	8002054 <__aeabi_dsub+0x24c>
 8002052:	e06e      	b.n	8002132 <__aeabi_dsub+0x32a>
 8002054:	0312      	lsls	r2, r2, #12
 8002056:	056d      	lsls	r5, r5, #21
 8002058:	0b12      	lsrs	r2, r2, #12
 800205a:	0d6d      	lsrs	r5, r5, #21
 800205c:	2100      	movs	r1, #0
 800205e:	0312      	lsls	r2, r2, #12
 8002060:	0b13      	lsrs	r3, r2, #12
 8002062:	0d0a      	lsrs	r2, r1, #20
 8002064:	0512      	lsls	r2, r2, #20
 8002066:	431a      	orrs	r2, r3
 8002068:	4b3b      	ldr	r3, [pc, #236]	; (8002158 <__aeabi_dsub+0x350>)
 800206a:	052d      	lsls	r5, r5, #20
 800206c:	4013      	ands	r3, r2
 800206e:	432b      	orrs	r3, r5
 8002070:	005b      	lsls	r3, r3, #1
 8002072:	07e4      	lsls	r4, r4, #31
 8002074:	085b      	lsrs	r3, r3, #1
 8002076:	4323      	orrs	r3, r4
 8002078:	0038      	movs	r0, r7
 800207a:	0019      	movs	r1, r3
 800207c:	bc3c      	pop	{r2, r3, r4, r5}
 800207e:	4690      	mov	r8, r2
 8002080:	4699      	mov	r9, r3
 8002082:	46a2      	mov	sl, r4
 8002084:	46ab      	mov	fp, r5
 8002086:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002088:	4663      	mov	r3, ip
 800208a:	4313      	orrs	r3, r2
 800208c:	d011      	beq.n	80020b2 <__aeabi_dsub+0x2aa>
 800208e:	1e73      	subs	r3, r6, #1
 8002090:	2b00      	cmp	r3, #0
 8002092:	d000      	beq.n	8002096 <__aeabi_dsub+0x28e>
 8002094:	e107      	b.n	80022a6 <__aeabi_dsub+0x49e>
 8002096:	1886      	adds	r6, r0, r2
 8002098:	4286      	cmp	r6, r0
 800209a:	4180      	sbcs	r0, r0
 800209c:	4461      	add	r1, ip
 800209e:	4240      	negs	r0, r0
 80020a0:	1809      	adds	r1, r1, r0
 80020a2:	2501      	movs	r5, #1
 80020a4:	020b      	lsls	r3, r1, #8
 80020a6:	d537      	bpl.n	8002118 <__aeabi_dsub+0x310>
 80020a8:	2502      	movs	r5, #2
 80020aa:	e77b      	b.n	8001fa4 <__aeabi_dsub+0x19c>
 80020ac:	003e      	movs	r6, r7
 80020ae:	4661      	mov	r1, ip
 80020b0:	4691      	mov	r9, r2
 80020b2:	0035      	movs	r5, r6
 80020b4:	e7c5      	b.n	8002042 <__aeabi_dsub+0x23a>
 80020b6:	465c      	mov	r4, fp
 80020b8:	2d00      	cmp	r5, #0
 80020ba:	d000      	beq.n	80020be <__aeabi_dsub+0x2b6>
 80020bc:	e0e1      	b.n	8002282 <__aeabi_dsub+0x47a>
 80020be:	000b      	movs	r3, r1
 80020c0:	4303      	orrs	r3, r0
 80020c2:	d0f3      	beq.n	80020ac <__aeabi_dsub+0x2a4>
 80020c4:	1c73      	adds	r3, r6, #1
 80020c6:	d100      	bne.n	80020ca <__aeabi_dsub+0x2c2>
 80020c8:	e1ac      	b.n	8002424 <__aeabi_dsub+0x61c>
 80020ca:	4b21      	ldr	r3, [pc, #132]	; (8002150 <__aeabi_dsub+0x348>)
 80020cc:	429f      	cmp	r7, r3
 80020ce:	d100      	bne.n	80020d2 <__aeabi_dsub+0x2ca>
 80020d0:	e13a      	b.n	8002348 <__aeabi_dsub+0x540>
 80020d2:	43f3      	mvns	r3, r6
 80020d4:	2b38      	cmp	r3, #56	; 0x38
 80020d6:	dd00      	ble.n	80020da <__aeabi_dsub+0x2d2>
 80020d8:	e16f      	b.n	80023ba <__aeabi_dsub+0x5b2>
 80020da:	2b1f      	cmp	r3, #31
 80020dc:	dd00      	ble.n	80020e0 <__aeabi_dsub+0x2d8>
 80020de:	e18c      	b.n	80023fa <__aeabi_dsub+0x5f2>
 80020e0:	2520      	movs	r5, #32
 80020e2:	000e      	movs	r6, r1
 80020e4:	1aed      	subs	r5, r5, r3
 80020e6:	40ae      	lsls	r6, r5
 80020e8:	46b0      	mov	r8, r6
 80020ea:	0006      	movs	r6, r0
 80020ec:	46aa      	mov	sl, r5
 80020ee:	40de      	lsrs	r6, r3
 80020f0:	4645      	mov	r5, r8
 80020f2:	4335      	orrs	r5, r6
 80020f4:	002e      	movs	r6, r5
 80020f6:	4655      	mov	r5, sl
 80020f8:	40d9      	lsrs	r1, r3
 80020fa:	40a8      	lsls	r0, r5
 80020fc:	4663      	mov	r3, ip
 80020fe:	1e45      	subs	r5, r0, #1
 8002100:	41a8      	sbcs	r0, r5
 8002102:	1a5b      	subs	r3, r3, r1
 8002104:	469c      	mov	ip, r3
 8002106:	4330      	orrs	r0, r6
 8002108:	1a16      	subs	r6, r2, r0
 800210a:	42b2      	cmp	r2, r6
 800210c:	4192      	sbcs	r2, r2
 800210e:	4663      	mov	r3, ip
 8002110:	4252      	negs	r2, r2
 8002112:	1a99      	subs	r1, r3, r2
 8002114:	003d      	movs	r5, r7
 8002116:	e6b4      	b.n	8001e82 <__aeabi_dsub+0x7a>
 8002118:	2207      	movs	r2, #7
 800211a:	4032      	ands	r2, r6
 800211c:	2a00      	cmp	r2, #0
 800211e:	d000      	beq.n	8002122 <__aeabi_dsub+0x31a>
 8002120:	e6e4      	b.n	8001eec <__aeabi_dsub+0xe4>
 8002122:	4b0b      	ldr	r3, [pc, #44]	; (8002150 <__aeabi_dsub+0x348>)
 8002124:	08f6      	lsrs	r6, r6, #3
 8002126:	074f      	lsls	r7, r1, #29
 8002128:	4337      	orrs	r7, r6
 800212a:	08ca      	lsrs	r2, r1, #3
 800212c:	429d      	cmp	r5, r3
 800212e:	d000      	beq.n	8002132 <__aeabi_dsub+0x32a>
 8002130:	e790      	b.n	8002054 <__aeabi_dsub+0x24c>
 8002132:	003b      	movs	r3, r7
 8002134:	4313      	orrs	r3, r2
 8002136:	d100      	bne.n	800213a <__aeabi_dsub+0x332>
 8002138:	e1a6      	b.n	8002488 <__aeabi_dsub+0x680>
 800213a:	2380      	movs	r3, #128	; 0x80
 800213c:	031b      	lsls	r3, r3, #12
 800213e:	431a      	orrs	r2, r3
 8002140:	0312      	lsls	r2, r2, #12
 8002142:	0b12      	lsrs	r2, r2, #12
 8002144:	4d02      	ldr	r5, [pc, #8]	; (8002150 <__aeabi_dsub+0x348>)
 8002146:	e789      	b.n	800205c <__aeabi_dsub+0x254>
 8002148:	0015      	movs	r5, r2
 800214a:	2200      	movs	r2, #0
 800214c:	2700      	movs	r7, #0
 800214e:	e785      	b.n	800205c <__aeabi_dsub+0x254>
 8002150:	000007ff 	.word	0x000007ff
 8002154:	ff7fffff 	.word	0xff7fffff
 8002158:	800fffff 	.word	0x800fffff
 800215c:	2e00      	cmp	r6, #0
 800215e:	d000      	beq.n	8002162 <__aeabi_dsub+0x35a>
 8002160:	e0c7      	b.n	80022f2 <__aeabi_dsub+0x4ea>
 8002162:	1c6b      	adds	r3, r5, #1
 8002164:	055e      	lsls	r6, r3, #21
 8002166:	0d76      	lsrs	r6, r6, #21
 8002168:	2e01      	cmp	r6, #1
 800216a:	dc00      	bgt.n	800216e <__aeabi_dsub+0x366>
 800216c:	e0f0      	b.n	8002350 <__aeabi_dsub+0x548>
 800216e:	4dc8      	ldr	r5, [pc, #800]	; (8002490 <__aeabi_dsub+0x688>)
 8002170:	42ab      	cmp	r3, r5
 8002172:	d100      	bne.n	8002176 <__aeabi_dsub+0x36e>
 8002174:	e0b9      	b.n	80022ea <__aeabi_dsub+0x4e2>
 8002176:	1885      	adds	r5, r0, r2
 8002178:	000a      	movs	r2, r1
 800217a:	4285      	cmp	r5, r0
 800217c:	4189      	sbcs	r1, r1
 800217e:	4462      	add	r2, ip
 8002180:	4249      	negs	r1, r1
 8002182:	1851      	adds	r1, r2, r1
 8002184:	2207      	movs	r2, #7
 8002186:	07ce      	lsls	r6, r1, #31
 8002188:	086d      	lsrs	r5, r5, #1
 800218a:	432e      	orrs	r6, r5
 800218c:	0849      	lsrs	r1, r1, #1
 800218e:	4032      	ands	r2, r6
 8002190:	001d      	movs	r5, r3
 8002192:	e6a9      	b.n	8001ee8 <__aeabi_dsub+0xe0>
 8002194:	49bf      	ldr	r1, [pc, #764]	; (8002494 <__aeabi_dsub+0x68c>)
 8002196:	1aed      	subs	r5, r5, r3
 8002198:	4011      	ands	r1, r2
 800219a:	2207      	movs	r2, #7
 800219c:	4032      	ands	r2, r6
 800219e:	e6a3      	b.n	8001ee8 <__aeabi_dsub+0xe0>
 80021a0:	0032      	movs	r2, r6
 80021a2:	3828      	subs	r0, #40	; 0x28
 80021a4:	4082      	lsls	r2, r0
 80021a6:	2600      	movs	r6, #0
 80021a8:	e686      	b.n	8001eb8 <__aeabi_dsub+0xb0>
 80021aa:	0030      	movs	r0, r6
 80021ac:	f000 fa68 	bl	8002680 <__clzsi2>
 80021b0:	3020      	adds	r0, #32
 80021b2:	e673      	b.n	8001e9c <__aeabi_dsub+0x94>
 80021b4:	4663      	mov	r3, ip
 80021b6:	4313      	orrs	r3, r2
 80021b8:	1e5a      	subs	r2, r3, #1
 80021ba:	4193      	sbcs	r3, r2
 80021bc:	1ac6      	subs	r6, r0, r3
 80021be:	42b0      	cmp	r0, r6
 80021c0:	4180      	sbcs	r0, r0
 80021c2:	4240      	negs	r0, r0
 80021c4:	1a09      	subs	r1, r1, r0
 80021c6:	e65c      	b.n	8001e82 <__aeabi_dsub+0x7a>
 80021c8:	000e      	movs	r6, r1
 80021ca:	4667      	mov	r7, ip
 80021cc:	4306      	orrs	r6, r0
 80021ce:	4317      	orrs	r7, r2
 80021d0:	2d00      	cmp	r5, #0
 80021d2:	d15e      	bne.n	8002292 <__aeabi_dsub+0x48a>
 80021d4:	2e00      	cmp	r6, #0
 80021d6:	d000      	beq.n	80021da <__aeabi_dsub+0x3d2>
 80021d8:	e0f3      	b.n	80023c2 <__aeabi_dsub+0x5ba>
 80021da:	2f00      	cmp	r7, #0
 80021dc:	d100      	bne.n	80021e0 <__aeabi_dsub+0x3d8>
 80021de:	e11e      	b.n	800241e <__aeabi_dsub+0x616>
 80021e0:	465c      	mov	r4, fp
 80021e2:	4661      	mov	r1, ip
 80021e4:	4691      	mov	r9, r2
 80021e6:	e72c      	b.n	8002042 <__aeabi_dsub+0x23a>
 80021e8:	4fa9      	ldr	r7, [pc, #676]	; (8002490 <__aeabi_dsub+0x688>)
 80021ea:	42be      	cmp	r6, r7
 80021ec:	d07b      	beq.n	80022e6 <__aeabi_dsub+0x4de>
 80021ee:	001e      	movs	r6, r3
 80021f0:	e6f1      	b.n	8001fd6 <__aeabi_dsub+0x1ce>
 80021f2:	0010      	movs	r0, r2
 80021f4:	3d1f      	subs	r5, #31
 80021f6:	40e8      	lsrs	r0, r5
 80021f8:	2b20      	cmp	r3, #32
 80021fa:	d003      	beq.n	8002204 <__aeabi_dsub+0x3fc>
 80021fc:	2140      	movs	r1, #64	; 0x40
 80021fe:	1acb      	subs	r3, r1, r3
 8002200:	409a      	lsls	r2, r3
 8002202:	4316      	orrs	r6, r2
 8002204:	1e73      	subs	r3, r6, #1
 8002206:	419e      	sbcs	r6, r3
 8002208:	2207      	movs	r2, #7
 800220a:	4306      	orrs	r6, r0
 800220c:	4032      	ands	r2, r6
 800220e:	2100      	movs	r1, #0
 8002210:	2500      	movs	r5, #0
 8002212:	e783      	b.n	800211c <__aeabi_dsub+0x314>
 8002214:	1a16      	subs	r6, r2, r0
 8002216:	4663      	mov	r3, ip
 8002218:	42b2      	cmp	r2, r6
 800221a:	4180      	sbcs	r0, r0
 800221c:	1a59      	subs	r1, r3, r1
 800221e:	4240      	negs	r0, r0
 8002220:	1a0b      	subs	r3, r1, r0
 8002222:	4698      	mov	r8, r3
 8002224:	465c      	mov	r4, fp
 8002226:	e632      	b.n	8001e8e <__aeabi_dsub+0x86>
 8002228:	2e1f      	cmp	r6, #31
 800222a:	dd00      	ble.n	800222e <__aeabi_dsub+0x426>
 800222c:	e0ab      	b.n	8002386 <__aeabi_dsub+0x57e>
 800222e:	2720      	movs	r7, #32
 8002230:	1bbb      	subs	r3, r7, r6
 8002232:	469a      	mov	sl, r3
 8002234:	4663      	mov	r3, ip
 8002236:	4657      	mov	r7, sl
 8002238:	40bb      	lsls	r3, r7
 800223a:	4699      	mov	r9, r3
 800223c:	0013      	movs	r3, r2
 800223e:	464f      	mov	r7, r9
 8002240:	40f3      	lsrs	r3, r6
 8002242:	431f      	orrs	r7, r3
 8002244:	003b      	movs	r3, r7
 8002246:	4657      	mov	r7, sl
 8002248:	40ba      	lsls	r2, r7
 800224a:	1e57      	subs	r7, r2, #1
 800224c:	41ba      	sbcs	r2, r7
 800224e:	4313      	orrs	r3, r2
 8002250:	4662      	mov	r2, ip
 8002252:	40f2      	lsrs	r2, r6
 8002254:	1889      	adds	r1, r1, r2
 8002256:	e698      	b.n	8001f8a <__aeabi_dsub+0x182>
 8002258:	2720      	movs	r7, #32
 800225a:	1bbb      	subs	r3, r7, r6
 800225c:	469a      	mov	sl, r3
 800225e:	4663      	mov	r3, ip
 8002260:	4657      	mov	r7, sl
 8002262:	40bb      	lsls	r3, r7
 8002264:	4699      	mov	r9, r3
 8002266:	0013      	movs	r3, r2
 8002268:	464f      	mov	r7, r9
 800226a:	40f3      	lsrs	r3, r6
 800226c:	431f      	orrs	r7, r3
 800226e:	003b      	movs	r3, r7
 8002270:	4657      	mov	r7, sl
 8002272:	40ba      	lsls	r2, r7
 8002274:	1e57      	subs	r7, r2, #1
 8002276:	41ba      	sbcs	r2, r7
 8002278:	4313      	orrs	r3, r2
 800227a:	4662      	mov	r2, ip
 800227c:	40f2      	lsrs	r2, r6
 800227e:	1a89      	subs	r1, r1, r2
 8002280:	e79c      	b.n	80021bc <__aeabi_dsub+0x3b4>
 8002282:	4b83      	ldr	r3, [pc, #524]	; (8002490 <__aeabi_dsub+0x688>)
 8002284:	429f      	cmp	r7, r3
 8002286:	d05f      	beq.n	8002348 <__aeabi_dsub+0x540>
 8002288:	2580      	movs	r5, #128	; 0x80
 800228a:	042d      	lsls	r5, r5, #16
 800228c:	4273      	negs	r3, r6
 800228e:	4329      	orrs	r1, r5
 8002290:	e720      	b.n	80020d4 <__aeabi_dsub+0x2cc>
 8002292:	2e00      	cmp	r6, #0
 8002294:	d10c      	bne.n	80022b0 <__aeabi_dsub+0x4a8>
 8002296:	2f00      	cmp	r7, #0
 8002298:	d100      	bne.n	800229c <__aeabi_dsub+0x494>
 800229a:	e0d0      	b.n	800243e <__aeabi_dsub+0x636>
 800229c:	465c      	mov	r4, fp
 800229e:	4661      	mov	r1, ip
 80022a0:	4691      	mov	r9, r2
 80022a2:	4d7b      	ldr	r5, [pc, #492]	; (8002490 <__aeabi_dsub+0x688>)
 80022a4:	e6cd      	b.n	8002042 <__aeabi_dsub+0x23a>
 80022a6:	4f7a      	ldr	r7, [pc, #488]	; (8002490 <__aeabi_dsub+0x688>)
 80022a8:	42be      	cmp	r6, r7
 80022aa:	d01c      	beq.n	80022e6 <__aeabi_dsub+0x4de>
 80022ac:	001e      	movs	r6, r3
 80022ae:	e665      	b.n	8001f7c <__aeabi_dsub+0x174>
 80022b0:	2f00      	cmp	r7, #0
 80022b2:	d018      	beq.n	80022e6 <__aeabi_dsub+0x4de>
 80022b4:	08c0      	lsrs	r0, r0, #3
 80022b6:	074e      	lsls	r6, r1, #29
 80022b8:	4306      	orrs	r6, r0
 80022ba:	2080      	movs	r0, #128	; 0x80
 80022bc:	08c9      	lsrs	r1, r1, #3
 80022be:	0300      	lsls	r0, r0, #12
 80022c0:	4201      	tst	r1, r0
 80022c2:	d008      	beq.n	80022d6 <__aeabi_dsub+0x4ce>
 80022c4:	4663      	mov	r3, ip
 80022c6:	08dc      	lsrs	r4, r3, #3
 80022c8:	4204      	tst	r4, r0
 80022ca:	d104      	bne.n	80022d6 <__aeabi_dsub+0x4ce>
 80022cc:	0021      	movs	r1, r4
 80022ce:	46da      	mov	sl, fp
 80022d0:	08d2      	lsrs	r2, r2, #3
 80022d2:	075e      	lsls	r6, r3, #29
 80022d4:	4316      	orrs	r6, r2
 80022d6:	00f3      	lsls	r3, r6, #3
 80022d8:	4699      	mov	r9, r3
 80022da:	2401      	movs	r4, #1
 80022dc:	4653      	mov	r3, sl
 80022de:	00c9      	lsls	r1, r1, #3
 80022e0:	0f72      	lsrs	r2, r6, #29
 80022e2:	4311      	orrs	r1, r2
 80022e4:	401c      	ands	r4, r3
 80022e6:	4d6a      	ldr	r5, [pc, #424]	; (8002490 <__aeabi_dsub+0x688>)
 80022e8:	e6ab      	b.n	8002042 <__aeabi_dsub+0x23a>
 80022ea:	001d      	movs	r5, r3
 80022ec:	2200      	movs	r2, #0
 80022ee:	2700      	movs	r7, #0
 80022f0:	e6b4      	b.n	800205c <__aeabi_dsub+0x254>
 80022f2:	2d00      	cmp	r5, #0
 80022f4:	d159      	bne.n	80023aa <__aeabi_dsub+0x5a2>
 80022f6:	000b      	movs	r3, r1
 80022f8:	4303      	orrs	r3, r0
 80022fa:	d100      	bne.n	80022fe <__aeabi_dsub+0x4f6>
 80022fc:	e6d6      	b.n	80020ac <__aeabi_dsub+0x2a4>
 80022fe:	1c73      	adds	r3, r6, #1
 8002300:	d100      	bne.n	8002304 <__aeabi_dsub+0x4fc>
 8002302:	e0b2      	b.n	800246a <__aeabi_dsub+0x662>
 8002304:	4b62      	ldr	r3, [pc, #392]	; (8002490 <__aeabi_dsub+0x688>)
 8002306:	429f      	cmp	r7, r3
 8002308:	d01e      	beq.n	8002348 <__aeabi_dsub+0x540>
 800230a:	43f3      	mvns	r3, r6
 800230c:	2b38      	cmp	r3, #56	; 0x38
 800230e:	dc6f      	bgt.n	80023f0 <__aeabi_dsub+0x5e8>
 8002310:	2b1f      	cmp	r3, #31
 8002312:	dd00      	ble.n	8002316 <__aeabi_dsub+0x50e>
 8002314:	e097      	b.n	8002446 <__aeabi_dsub+0x63e>
 8002316:	2520      	movs	r5, #32
 8002318:	000e      	movs	r6, r1
 800231a:	1aed      	subs	r5, r5, r3
 800231c:	40ae      	lsls	r6, r5
 800231e:	46b0      	mov	r8, r6
 8002320:	0006      	movs	r6, r0
 8002322:	46aa      	mov	sl, r5
 8002324:	40de      	lsrs	r6, r3
 8002326:	4645      	mov	r5, r8
 8002328:	4335      	orrs	r5, r6
 800232a:	002e      	movs	r6, r5
 800232c:	4655      	mov	r5, sl
 800232e:	40a8      	lsls	r0, r5
 8002330:	40d9      	lsrs	r1, r3
 8002332:	1e45      	subs	r5, r0, #1
 8002334:	41a8      	sbcs	r0, r5
 8002336:	448c      	add	ip, r1
 8002338:	4306      	orrs	r6, r0
 800233a:	18b6      	adds	r6, r6, r2
 800233c:	4296      	cmp	r6, r2
 800233e:	4192      	sbcs	r2, r2
 8002340:	4251      	negs	r1, r2
 8002342:	4461      	add	r1, ip
 8002344:	003d      	movs	r5, r7
 8002346:	e625      	b.n	8001f94 <__aeabi_dsub+0x18c>
 8002348:	003d      	movs	r5, r7
 800234a:	4661      	mov	r1, ip
 800234c:	4691      	mov	r9, r2
 800234e:	e678      	b.n	8002042 <__aeabi_dsub+0x23a>
 8002350:	000b      	movs	r3, r1
 8002352:	4303      	orrs	r3, r0
 8002354:	2d00      	cmp	r5, #0
 8002356:	d000      	beq.n	800235a <__aeabi_dsub+0x552>
 8002358:	e655      	b.n	8002006 <__aeabi_dsub+0x1fe>
 800235a:	2b00      	cmp	r3, #0
 800235c:	d0f5      	beq.n	800234a <__aeabi_dsub+0x542>
 800235e:	4663      	mov	r3, ip
 8002360:	4313      	orrs	r3, r2
 8002362:	d100      	bne.n	8002366 <__aeabi_dsub+0x55e>
 8002364:	e66d      	b.n	8002042 <__aeabi_dsub+0x23a>
 8002366:	1886      	adds	r6, r0, r2
 8002368:	4286      	cmp	r6, r0
 800236a:	4180      	sbcs	r0, r0
 800236c:	4461      	add	r1, ip
 800236e:	4240      	negs	r0, r0
 8002370:	1809      	adds	r1, r1, r0
 8002372:	2200      	movs	r2, #0
 8002374:	020b      	lsls	r3, r1, #8
 8002376:	d400      	bmi.n	800237a <__aeabi_dsub+0x572>
 8002378:	e6d0      	b.n	800211c <__aeabi_dsub+0x314>
 800237a:	4b46      	ldr	r3, [pc, #280]	; (8002494 <__aeabi_dsub+0x68c>)
 800237c:	3501      	adds	r5, #1
 800237e:	4019      	ands	r1, r3
 8002380:	e5b2      	b.n	8001ee8 <__aeabi_dsub+0xe0>
 8002382:	46b1      	mov	r9, r6
 8002384:	e65d      	b.n	8002042 <__aeabi_dsub+0x23a>
 8002386:	0033      	movs	r3, r6
 8002388:	4667      	mov	r7, ip
 800238a:	3b20      	subs	r3, #32
 800238c:	40df      	lsrs	r7, r3
 800238e:	003b      	movs	r3, r7
 8002390:	2e20      	cmp	r6, #32
 8002392:	d005      	beq.n	80023a0 <__aeabi_dsub+0x598>
 8002394:	2740      	movs	r7, #64	; 0x40
 8002396:	1bbf      	subs	r7, r7, r6
 8002398:	4666      	mov	r6, ip
 800239a:	40be      	lsls	r6, r7
 800239c:	4332      	orrs	r2, r6
 800239e:	4690      	mov	r8, r2
 80023a0:	4646      	mov	r6, r8
 80023a2:	1e72      	subs	r2, r6, #1
 80023a4:	4196      	sbcs	r6, r2
 80023a6:	4333      	orrs	r3, r6
 80023a8:	e5ef      	b.n	8001f8a <__aeabi_dsub+0x182>
 80023aa:	4b39      	ldr	r3, [pc, #228]	; (8002490 <__aeabi_dsub+0x688>)
 80023ac:	429f      	cmp	r7, r3
 80023ae:	d0cb      	beq.n	8002348 <__aeabi_dsub+0x540>
 80023b0:	2580      	movs	r5, #128	; 0x80
 80023b2:	042d      	lsls	r5, r5, #16
 80023b4:	4273      	negs	r3, r6
 80023b6:	4329      	orrs	r1, r5
 80023b8:	e7a8      	b.n	800230c <__aeabi_dsub+0x504>
 80023ba:	4308      	orrs	r0, r1
 80023bc:	1e41      	subs	r1, r0, #1
 80023be:	4188      	sbcs	r0, r1
 80023c0:	e6a2      	b.n	8002108 <__aeabi_dsub+0x300>
 80023c2:	2f00      	cmp	r7, #0
 80023c4:	d100      	bne.n	80023c8 <__aeabi_dsub+0x5c0>
 80023c6:	e63c      	b.n	8002042 <__aeabi_dsub+0x23a>
 80023c8:	4663      	mov	r3, ip
 80023ca:	1a86      	subs	r6, r0, r2
 80023cc:	1acf      	subs	r7, r1, r3
 80023ce:	42b0      	cmp	r0, r6
 80023d0:	419b      	sbcs	r3, r3
 80023d2:	425b      	negs	r3, r3
 80023d4:	1afb      	subs	r3, r7, r3
 80023d6:	4698      	mov	r8, r3
 80023d8:	021b      	lsls	r3, r3, #8
 80023da:	d54e      	bpl.n	800247a <__aeabi_dsub+0x672>
 80023dc:	1a16      	subs	r6, r2, r0
 80023de:	4663      	mov	r3, ip
 80023e0:	42b2      	cmp	r2, r6
 80023e2:	4192      	sbcs	r2, r2
 80023e4:	1a59      	subs	r1, r3, r1
 80023e6:	4252      	negs	r2, r2
 80023e8:	1a89      	subs	r1, r1, r2
 80023ea:	465c      	mov	r4, fp
 80023ec:	2200      	movs	r2, #0
 80023ee:	e57b      	b.n	8001ee8 <__aeabi_dsub+0xe0>
 80023f0:	4301      	orrs	r1, r0
 80023f2:	000e      	movs	r6, r1
 80023f4:	1e71      	subs	r1, r6, #1
 80023f6:	418e      	sbcs	r6, r1
 80023f8:	e79f      	b.n	800233a <__aeabi_dsub+0x532>
 80023fa:	001d      	movs	r5, r3
 80023fc:	000e      	movs	r6, r1
 80023fe:	3d20      	subs	r5, #32
 8002400:	40ee      	lsrs	r6, r5
 8002402:	46b0      	mov	r8, r6
 8002404:	2b20      	cmp	r3, #32
 8002406:	d004      	beq.n	8002412 <__aeabi_dsub+0x60a>
 8002408:	2540      	movs	r5, #64	; 0x40
 800240a:	1aeb      	subs	r3, r5, r3
 800240c:	4099      	lsls	r1, r3
 800240e:	4308      	orrs	r0, r1
 8002410:	4681      	mov	r9, r0
 8002412:	4648      	mov	r0, r9
 8002414:	4643      	mov	r3, r8
 8002416:	1e41      	subs	r1, r0, #1
 8002418:	4188      	sbcs	r0, r1
 800241a:	4318      	orrs	r0, r3
 800241c:	e674      	b.n	8002108 <__aeabi_dsub+0x300>
 800241e:	2200      	movs	r2, #0
 8002420:	2400      	movs	r4, #0
 8002422:	e617      	b.n	8002054 <__aeabi_dsub+0x24c>
 8002424:	1a16      	subs	r6, r2, r0
 8002426:	4663      	mov	r3, ip
 8002428:	42b2      	cmp	r2, r6
 800242a:	4192      	sbcs	r2, r2
 800242c:	1a59      	subs	r1, r3, r1
 800242e:	4252      	negs	r2, r2
 8002430:	1a89      	subs	r1, r1, r2
 8002432:	003d      	movs	r5, r7
 8002434:	e525      	b.n	8001e82 <__aeabi_dsub+0x7a>
 8002436:	4661      	mov	r1, ip
 8002438:	4691      	mov	r9, r2
 800243a:	4d15      	ldr	r5, [pc, #84]	; (8002490 <__aeabi_dsub+0x688>)
 800243c:	e601      	b.n	8002042 <__aeabi_dsub+0x23a>
 800243e:	2280      	movs	r2, #128	; 0x80
 8002440:	2400      	movs	r4, #0
 8002442:	0312      	lsls	r2, r2, #12
 8002444:	e679      	b.n	800213a <__aeabi_dsub+0x332>
 8002446:	001d      	movs	r5, r3
 8002448:	000e      	movs	r6, r1
 800244a:	3d20      	subs	r5, #32
 800244c:	40ee      	lsrs	r6, r5
 800244e:	46b0      	mov	r8, r6
 8002450:	2b20      	cmp	r3, #32
 8002452:	d004      	beq.n	800245e <__aeabi_dsub+0x656>
 8002454:	2540      	movs	r5, #64	; 0x40
 8002456:	1aeb      	subs	r3, r5, r3
 8002458:	4099      	lsls	r1, r3
 800245a:	4308      	orrs	r0, r1
 800245c:	4681      	mov	r9, r0
 800245e:	464e      	mov	r6, r9
 8002460:	4643      	mov	r3, r8
 8002462:	1e71      	subs	r1, r6, #1
 8002464:	418e      	sbcs	r6, r1
 8002466:	431e      	orrs	r6, r3
 8002468:	e767      	b.n	800233a <__aeabi_dsub+0x532>
 800246a:	1886      	adds	r6, r0, r2
 800246c:	4296      	cmp	r6, r2
 800246e:	419b      	sbcs	r3, r3
 8002470:	4461      	add	r1, ip
 8002472:	425b      	negs	r3, r3
 8002474:	18c9      	adds	r1, r1, r3
 8002476:	003d      	movs	r5, r7
 8002478:	e58c      	b.n	8001f94 <__aeabi_dsub+0x18c>
 800247a:	4647      	mov	r7, r8
 800247c:	4337      	orrs	r7, r6
 800247e:	d0ce      	beq.n	800241e <__aeabi_dsub+0x616>
 8002480:	2207      	movs	r2, #7
 8002482:	4641      	mov	r1, r8
 8002484:	4032      	ands	r2, r6
 8002486:	e649      	b.n	800211c <__aeabi_dsub+0x314>
 8002488:	2700      	movs	r7, #0
 800248a:	003a      	movs	r2, r7
 800248c:	e5e6      	b.n	800205c <__aeabi_dsub+0x254>
 800248e:	46c0      	nop			; (mov r8, r8)
 8002490:	000007ff 	.word	0x000007ff
 8002494:	ff7fffff 	.word	0xff7fffff

08002498 <__aeabi_d2iz>:
 8002498:	b530      	push	{r4, r5, lr}
 800249a:	4d14      	ldr	r5, [pc, #80]	; (80024ec <__aeabi_d2iz+0x54>)
 800249c:	030a      	lsls	r2, r1, #12
 800249e:	004b      	lsls	r3, r1, #1
 80024a0:	0b12      	lsrs	r2, r2, #12
 80024a2:	0d5b      	lsrs	r3, r3, #21
 80024a4:	0fc9      	lsrs	r1, r1, #31
 80024a6:	2400      	movs	r4, #0
 80024a8:	42ab      	cmp	r3, r5
 80024aa:	dd11      	ble.n	80024d0 <__aeabi_d2iz+0x38>
 80024ac:	4c10      	ldr	r4, [pc, #64]	; (80024f0 <__aeabi_d2iz+0x58>)
 80024ae:	42a3      	cmp	r3, r4
 80024b0:	dc10      	bgt.n	80024d4 <__aeabi_d2iz+0x3c>
 80024b2:	2480      	movs	r4, #128	; 0x80
 80024b4:	0364      	lsls	r4, r4, #13
 80024b6:	4322      	orrs	r2, r4
 80024b8:	4c0e      	ldr	r4, [pc, #56]	; (80024f4 <__aeabi_d2iz+0x5c>)
 80024ba:	1ae4      	subs	r4, r4, r3
 80024bc:	2c1f      	cmp	r4, #31
 80024be:	dd0c      	ble.n	80024da <__aeabi_d2iz+0x42>
 80024c0:	480d      	ldr	r0, [pc, #52]	; (80024f8 <__aeabi_d2iz+0x60>)
 80024c2:	1ac3      	subs	r3, r0, r3
 80024c4:	40da      	lsrs	r2, r3
 80024c6:	0013      	movs	r3, r2
 80024c8:	425c      	negs	r4, r3
 80024ca:	2900      	cmp	r1, #0
 80024cc:	d100      	bne.n	80024d0 <__aeabi_d2iz+0x38>
 80024ce:	001c      	movs	r4, r3
 80024d0:	0020      	movs	r0, r4
 80024d2:	bd30      	pop	{r4, r5, pc}
 80024d4:	4b09      	ldr	r3, [pc, #36]	; (80024fc <__aeabi_d2iz+0x64>)
 80024d6:	18cc      	adds	r4, r1, r3
 80024d8:	e7fa      	b.n	80024d0 <__aeabi_d2iz+0x38>
 80024da:	4d09      	ldr	r5, [pc, #36]	; (8002500 <__aeabi_d2iz+0x68>)
 80024dc:	40e0      	lsrs	r0, r4
 80024de:	46ac      	mov	ip, r5
 80024e0:	4463      	add	r3, ip
 80024e2:	409a      	lsls	r2, r3
 80024e4:	0013      	movs	r3, r2
 80024e6:	4303      	orrs	r3, r0
 80024e8:	e7ee      	b.n	80024c8 <__aeabi_d2iz+0x30>
 80024ea:	46c0      	nop			; (mov r8, r8)
 80024ec:	000003fe 	.word	0x000003fe
 80024f0:	0000041d 	.word	0x0000041d
 80024f4:	00000433 	.word	0x00000433
 80024f8:	00000413 	.word	0x00000413
 80024fc:	7fffffff 	.word	0x7fffffff
 8002500:	fffffbed 	.word	0xfffffbed

08002504 <__aeabi_i2d>:
 8002504:	b570      	push	{r4, r5, r6, lr}
 8002506:	2800      	cmp	r0, #0
 8002508:	d02d      	beq.n	8002566 <__aeabi_i2d+0x62>
 800250a:	17c3      	asrs	r3, r0, #31
 800250c:	18c5      	adds	r5, r0, r3
 800250e:	405d      	eors	r5, r3
 8002510:	0fc4      	lsrs	r4, r0, #31
 8002512:	0028      	movs	r0, r5
 8002514:	f000 f8b4 	bl	8002680 <__clzsi2>
 8002518:	4b15      	ldr	r3, [pc, #84]	; (8002570 <__aeabi_i2d+0x6c>)
 800251a:	1a1b      	subs	r3, r3, r0
 800251c:	055b      	lsls	r3, r3, #21
 800251e:	0d5b      	lsrs	r3, r3, #21
 8002520:	280a      	cmp	r0, #10
 8002522:	dd15      	ble.n	8002550 <__aeabi_i2d+0x4c>
 8002524:	380b      	subs	r0, #11
 8002526:	4085      	lsls	r5, r0
 8002528:	2200      	movs	r2, #0
 800252a:	032d      	lsls	r5, r5, #12
 800252c:	0b2d      	lsrs	r5, r5, #12
 800252e:	2100      	movs	r1, #0
 8002530:	0010      	movs	r0, r2
 8002532:	032d      	lsls	r5, r5, #12
 8002534:	0d0a      	lsrs	r2, r1, #20
 8002536:	0b2d      	lsrs	r5, r5, #12
 8002538:	0512      	lsls	r2, r2, #20
 800253a:	432a      	orrs	r2, r5
 800253c:	4d0d      	ldr	r5, [pc, #52]	; (8002574 <__aeabi_i2d+0x70>)
 800253e:	051b      	lsls	r3, r3, #20
 8002540:	402a      	ands	r2, r5
 8002542:	4313      	orrs	r3, r2
 8002544:	005b      	lsls	r3, r3, #1
 8002546:	07e4      	lsls	r4, r4, #31
 8002548:	085b      	lsrs	r3, r3, #1
 800254a:	4323      	orrs	r3, r4
 800254c:	0019      	movs	r1, r3
 800254e:	bd70      	pop	{r4, r5, r6, pc}
 8002550:	0002      	movs	r2, r0
 8002552:	0029      	movs	r1, r5
 8002554:	3215      	adds	r2, #21
 8002556:	4091      	lsls	r1, r2
 8002558:	000a      	movs	r2, r1
 800255a:	210b      	movs	r1, #11
 800255c:	1a08      	subs	r0, r1, r0
 800255e:	40c5      	lsrs	r5, r0
 8002560:	032d      	lsls	r5, r5, #12
 8002562:	0b2d      	lsrs	r5, r5, #12
 8002564:	e7e3      	b.n	800252e <__aeabi_i2d+0x2a>
 8002566:	2400      	movs	r4, #0
 8002568:	2300      	movs	r3, #0
 800256a:	2500      	movs	r5, #0
 800256c:	2200      	movs	r2, #0
 800256e:	e7de      	b.n	800252e <__aeabi_i2d+0x2a>
 8002570:	0000041e 	.word	0x0000041e
 8002574:	800fffff 	.word	0x800fffff

08002578 <__aeabi_ui2d>:
 8002578:	b510      	push	{r4, lr}
 800257a:	1e04      	subs	r4, r0, #0
 800257c:	d025      	beq.n	80025ca <__aeabi_ui2d+0x52>
 800257e:	f000 f87f 	bl	8002680 <__clzsi2>
 8002582:	4b14      	ldr	r3, [pc, #80]	; (80025d4 <__aeabi_ui2d+0x5c>)
 8002584:	1a1b      	subs	r3, r3, r0
 8002586:	055b      	lsls	r3, r3, #21
 8002588:	0d5b      	lsrs	r3, r3, #21
 800258a:	280a      	cmp	r0, #10
 800258c:	dd12      	ble.n	80025b4 <__aeabi_ui2d+0x3c>
 800258e:	380b      	subs	r0, #11
 8002590:	4084      	lsls	r4, r0
 8002592:	2200      	movs	r2, #0
 8002594:	0324      	lsls	r4, r4, #12
 8002596:	0b24      	lsrs	r4, r4, #12
 8002598:	2100      	movs	r1, #0
 800259a:	0010      	movs	r0, r2
 800259c:	0324      	lsls	r4, r4, #12
 800259e:	0d0a      	lsrs	r2, r1, #20
 80025a0:	0b24      	lsrs	r4, r4, #12
 80025a2:	0512      	lsls	r2, r2, #20
 80025a4:	4322      	orrs	r2, r4
 80025a6:	4c0c      	ldr	r4, [pc, #48]	; (80025d8 <__aeabi_ui2d+0x60>)
 80025a8:	051b      	lsls	r3, r3, #20
 80025aa:	4022      	ands	r2, r4
 80025ac:	4313      	orrs	r3, r2
 80025ae:	005b      	lsls	r3, r3, #1
 80025b0:	0859      	lsrs	r1, r3, #1
 80025b2:	bd10      	pop	{r4, pc}
 80025b4:	0002      	movs	r2, r0
 80025b6:	0021      	movs	r1, r4
 80025b8:	3215      	adds	r2, #21
 80025ba:	4091      	lsls	r1, r2
 80025bc:	000a      	movs	r2, r1
 80025be:	210b      	movs	r1, #11
 80025c0:	1a08      	subs	r0, r1, r0
 80025c2:	40c4      	lsrs	r4, r0
 80025c4:	0324      	lsls	r4, r4, #12
 80025c6:	0b24      	lsrs	r4, r4, #12
 80025c8:	e7e6      	b.n	8002598 <__aeabi_ui2d+0x20>
 80025ca:	2300      	movs	r3, #0
 80025cc:	2400      	movs	r4, #0
 80025ce:	2200      	movs	r2, #0
 80025d0:	e7e2      	b.n	8002598 <__aeabi_ui2d+0x20>
 80025d2:	46c0      	nop			; (mov r8, r8)
 80025d4:	0000041e 	.word	0x0000041e
 80025d8:	800fffff 	.word	0x800fffff

080025dc <__aeabi_f2d>:
 80025dc:	0041      	lsls	r1, r0, #1
 80025de:	0e09      	lsrs	r1, r1, #24
 80025e0:	1c4b      	adds	r3, r1, #1
 80025e2:	b570      	push	{r4, r5, r6, lr}
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	0246      	lsls	r6, r0, #9
 80025e8:	0a75      	lsrs	r5, r6, #9
 80025ea:	0fc4      	lsrs	r4, r0, #31
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	dd14      	ble.n	800261a <__aeabi_f2d+0x3e>
 80025f0:	23e0      	movs	r3, #224	; 0xe0
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	076d      	lsls	r5, r5, #29
 80025f6:	0b36      	lsrs	r6, r6, #12
 80025f8:	18cb      	adds	r3, r1, r3
 80025fa:	2100      	movs	r1, #0
 80025fc:	0d0a      	lsrs	r2, r1, #20
 80025fe:	0028      	movs	r0, r5
 8002600:	0512      	lsls	r2, r2, #20
 8002602:	4d1c      	ldr	r5, [pc, #112]	; (8002674 <__aeabi_f2d+0x98>)
 8002604:	4332      	orrs	r2, r6
 8002606:	055b      	lsls	r3, r3, #21
 8002608:	402a      	ands	r2, r5
 800260a:	085b      	lsrs	r3, r3, #1
 800260c:	4313      	orrs	r3, r2
 800260e:	005b      	lsls	r3, r3, #1
 8002610:	07e4      	lsls	r4, r4, #31
 8002612:	085b      	lsrs	r3, r3, #1
 8002614:	4323      	orrs	r3, r4
 8002616:	0019      	movs	r1, r3
 8002618:	bd70      	pop	{r4, r5, r6, pc}
 800261a:	2900      	cmp	r1, #0
 800261c:	d114      	bne.n	8002648 <__aeabi_f2d+0x6c>
 800261e:	2d00      	cmp	r5, #0
 8002620:	d01e      	beq.n	8002660 <__aeabi_f2d+0x84>
 8002622:	0028      	movs	r0, r5
 8002624:	f000 f82c 	bl	8002680 <__clzsi2>
 8002628:	280a      	cmp	r0, #10
 800262a:	dc1c      	bgt.n	8002666 <__aeabi_f2d+0x8a>
 800262c:	230b      	movs	r3, #11
 800262e:	002a      	movs	r2, r5
 8002630:	1a1b      	subs	r3, r3, r0
 8002632:	40da      	lsrs	r2, r3
 8002634:	0003      	movs	r3, r0
 8002636:	3315      	adds	r3, #21
 8002638:	409d      	lsls	r5, r3
 800263a:	4b0f      	ldr	r3, [pc, #60]	; (8002678 <__aeabi_f2d+0x9c>)
 800263c:	0312      	lsls	r2, r2, #12
 800263e:	1a1b      	subs	r3, r3, r0
 8002640:	055b      	lsls	r3, r3, #21
 8002642:	0b16      	lsrs	r6, r2, #12
 8002644:	0d5b      	lsrs	r3, r3, #21
 8002646:	e7d8      	b.n	80025fa <__aeabi_f2d+0x1e>
 8002648:	2d00      	cmp	r5, #0
 800264a:	d006      	beq.n	800265a <__aeabi_f2d+0x7e>
 800264c:	0b32      	lsrs	r2, r6, #12
 800264e:	2680      	movs	r6, #128	; 0x80
 8002650:	0336      	lsls	r6, r6, #12
 8002652:	076d      	lsls	r5, r5, #29
 8002654:	4316      	orrs	r6, r2
 8002656:	4b09      	ldr	r3, [pc, #36]	; (800267c <__aeabi_f2d+0xa0>)
 8002658:	e7cf      	b.n	80025fa <__aeabi_f2d+0x1e>
 800265a:	4b08      	ldr	r3, [pc, #32]	; (800267c <__aeabi_f2d+0xa0>)
 800265c:	2600      	movs	r6, #0
 800265e:	e7cc      	b.n	80025fa <__aeabi_f2d+0x1e>
 8002660:	2300      	movs	r3, #0
 8002662:	2600      	movs	r6, #0
 8002664:	e7c9      	b.n	80025fa <__aeabi_f2d+0x1e>
 8002666:	0003      	movs	r3, r0
 8002668:	002a      	movs	r2, r5
 800266a:	3b0b      	subs	r3, #11
 800266c:	409a      	lsls	r2, r3
 800266e:	2500      	movs	r5, #0
 8002670:	e7e3      	b.n	800263a <__aeabi_f2d+0x5e>
 8002672:	46c0      	nop			; (mov r8, r8)
 8002674:	800fffff 	.word	0x800fffff
 8002678:	00000389 	.word	0x00000389
 800267c:	000007ff 	.word	0x000007ff

08002680 <__clzsi2>:
 8002680:	211c      	movs	r1, #28
 8002682:	2301      	movs	r3, #1
 8002684:	041b      	lsls	r3, r3, #16
 8002686:	4298      	cmp	r0, r3
 8002688:	d301      	bcc.n	800268e <__clzsi2+0xe>
 800268a:	0c00      	lsrs	r0, r0, #16
 800268c:	3910      	subs	r1, #16
 800268e:	0a1b      	lsrs	r3, r3, #8
 8002690:	4298      	cmp	r0, r3
 8002692:	d301      	bcc.n	8002698 <__clzsi2+0x18>
 8002694:	0a00      	lsrs	r0, r0, #8
 8002696:	3908      	subs	r1, #8
 8002698:	091b      	lsrs	r3, r3, #4
 800269a:	4298      	cmp	r0, r3
 800269c:	d301      	bcc.n	80026a2 <__clzsi2+0x22>
 800269e:	0900      	lsrs	r0, r0, #4
 80026a0:	3904      	subs	r1, #4
 80026a2:	a202      	add	r2, pc, #8	; (adr r2, 80026ac <__clzsi2+0x2c>)
 80026a4:	5c10      	ldrb	r0, [r2, r0]
 80026a6:	1840      	adds	r0, r0, r1
 80026a8:	4770      	bx	lr
 80026aa:	46c0      	nop			; (mov r8, r8)
 80026ac:	02020304 	.word	0x02020304
 80026b0:	01010101 	.word	0x01010101
	...

080026bc <__clzdi2>:
 80026bc:	b510      	push	{r4, lr}
 80026be:	2900      	cmp	r1, #0
 80026c0:	d103      	bne.n	80026ca <__clzdi2+0xe>
 80026c2:	f7ff ffdd 	bl	8002680 <__clzsi2>
 80026c6:	3020      	adds	r0, #32
 80026c8:	e002      	b.n	80026d0 <__clzdi2+0x14>
 80026ca:	1c08      	adds	r0, r1, #0
 80026cc:	f7ff ffd8 	bl	8002680 <__clzsi2>
 80026d0:	bd10      	pop	{r4, pc}
 80026d2:	46c0      	nop			; (mov r8, r8)

080026d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80026d4:	480d      	ldr	r0, [pc, #52]	; (800270c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80026d6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 80026d8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80026da:	e003      	b.n	80026e4 <LoopCopyDataInit>

080026dc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80026dc:	4b0c      	ldr	r3, [pc, #48]	; (8002710 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 80026de:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80026e0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80026e2:	3104      	adds	r1, #4

080026e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 80026e4:	480b      	ldr	r0, [pc, #44]	; (8002714 <LoopForever+0xa>)
  ldr  r3, =_edata
 80026e6:	4b0c      	ldr	r3, [pc, #48]	; (8002718 <LoopForever+0xe>)
  adds  r2, r0, r1
 80026e8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80026ea:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80026ec:	d3f6      	bcc.n	80026dc <CopyDataInit>
  ldr  r2, =_sbss
 80026ee:	4a0b      	ldr	r2, [pc, #44]	; (800271c <LoopForever+0x12>)
  b  LoopFillZerobss
 80026f0:	e002      	b.n	80026f8 <LoopFillZerobss>

080026f2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 80026f2:	2300      	movs	r3, #0
  str  r3, [r2]
 80026f4:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026f6:	3204      	adds	r2, #4

080026f8 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 80026f8:	4b09      	ldr	r3, [pc, #36]	; (8002720 <LoopForever+0x16>)
  cmp  r2, r3
 80026fa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80026fc:	d3f9      	bcc.n	80026f2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80026fe:	f001 fcf5 	bl	80040ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002702:	f00c f971 	bl	800e9e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002706:	f00b fa95 	bl	800dc34 <main>

0800270a <LoopForever>:

LoopForever:
    b LoopForever
 800270a:	e7fe      	b.n	800270a <LoopForever>
   ldr   r0, =_estack
 800270c:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 8002710:	08010438 	.word	0x08010438
  ldr  r0, =_sdata
 8002714:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002718:	200002b4 	.word	0x200002b4
  ldr  r2, =_sbss
 800271c:	200002b4 	.word	0x200002b4
  ldr  r3, = _ebss
 8002720:	20001944 	.word	0x20001944

08002724 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002724:	e7fe      	b.n	8002724 <ADC1_COMP_IRQHandler>
	...

08002728 <BSP_LED_Init>:
  *   This parameter can be one of following parameters:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8002728:	b500      	push	{lr}
 800272a:	0002      	movs	r2, r0
 800272c:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE( Led );
 800272e:	2803      	cmp	r0, #3
 8002730:	d80c      	bhi.n	800274c <BSP_LED_Init+0x24>
 8002732:	4b1b      	ldr	r3, [pc, #108]	; (80027a0 <BSP_LED_Init+0x78>)
 8002734:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002736:	f7fd fcf9 	bl	800012c <__gnu_thumb1_case_uqi>
 800273a:	1b02      	.short	0x1b02
 800273c:	2b23      	.short	0x2b23
 800273e:	2002      	movs	r0, #2
 8002740:	4301      	orrs	r1, r0
 8002742:	62d9      	str	r1, [r3, #44]	; 0x2c
 8002744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002746:	4003      	ands	r3, r0
 8002748:	9301      	str	r3, [sp, #4]
 800274a:	9b01      	ldr	r3, [sp, #4]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = LED_PIN[Led];
 800274c:	4b15      	ldr	r3, [pc, #84]	; (80027a4 <BSP_LED_Init+0x7c>)
 800274e:	0051      	lsls	r1, r2, #1
 8002750:	5acb      	ldrh	r3, [r1, r3]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 8002752:	0092      	lsls	r2, r2, #2
  GPIO_InitStruct.Pin = LED_PIN[Led];
 8002754:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002756:	2301      	movs	r3, #1
 8002758:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800275a:	2300      	movs	r3, #0
 800275c:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800275e:	3303      	adds	r3, #3
 8002760:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 8002762:	4b11      	ldr	r3, [pc, #68]	; (80027a8 <BSP_LED_Init+0x80>)
 8002764:	a905      	add	r1, sp, #20
 8002766:	58d0      	ldr	r0, [r2, r3]
 8002768:	f002 f8ce 	bl	8004908 <HAL_GPIO_Init>
}
 800276c:	b00b      	add	sp, #44	; 0x2c
 800276e:	bd00      	pop	{pc}
  LEDx_GPIO_CLK_ENABLE( Led );
 8002770:	2001      	movs	r0, #1
 8002772:	4301      	orrs	r1, r0
 8002774:	62d9      	str	r1, [r3, #44]	; 0x2c
 8002776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002778:	4003      	ands	r3, r0
 800277a:	9302      	str	r3, [sp, #8]
 800277c:	9b02      	ldr	r3, [sp, #8]
 800277e:	e7e5      	b.n	800274c <BSP_LED_Init+0x24>
 8002780:	2002      	movs	r0, #2
 8002782:	4301      	orrs	r1, r0
 8002784:	62d9      	str	r1, [r3, #44]	; 0x2c
 8002786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002788:	4003      	ands	r3, r0
 800278a:	9303      	str	r3, [sp, #12]
 800278c:	9b03      	ldr	r3, [sp, #12]
 800278e:	e7dd      	b.n	800274c <BSP_LED_Init+0x24>
 8002790:	2002      	movs	r0, #2
 8002792:	4301      	orrs	r1, r0
 8002794:	62d9      	str	r1, [r3, #44]	; 0x2c
 8002796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002798:	4003      	ands	r3, r0
 800279a:	9304      	str	r3, [sp, #16]
 800279c:	9b04      	ldr	r3, [sp, #16]
 800279e:	e7d5      	b.n	800274c <BSP_LED_Init+0x24>
 80027a0:	40021000 	.word	0x40021000
 80027a4:	0800f598 	.word	0x0800f598
 80027a8:	20000000 	.word	0x20000000

080027ac <BSP_LED_On>:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET); 
 80027ac:	4b05      	ldr	r3, [pc, #20]	; (80027c4 <BSP_LED_On+0x18>)
{
 80027ae:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET); 
 80027b0:	0042      	lsls	r2, r0, #1
 80027b2:	5ad1      	ldrh	r1, [r2, r3]
 80027b4:	4b04      	ldr	r3, [pc, #16]	; (80027c8 <BSP_LED_On+0x1c>)
 80027b6:	0080      	lsls	r0, r0, #2
 80027b8:	2201      	movs	r2, #1
 80027ba:	58c0      	ldr	r0, [r0, r3]
 80027bc:	f002 f964 	bl	8004a88 <HAL_GPIO_WritePin>
}
 80027c0:	bd10      	pop	{r4, pc}
 80027c2:	46c0      	nop			; (mov r8, r8)
 80027c4:	0800f598 	.word	0x0800f598
 80027c8:	20000000 	.word	0x20000000

080027cc <BSP_LED_Off>:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET); 
 80027cc:	4b05      	ldr	r3, [pc, #20]	; (80027e4 <BSP_LED_Off+0x18>)
{
 80027ce:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET); 
 80027d0:	0042      	lsls	r2, r0, #1
 80027d2:	5ad1      	ldrh	r1, [r2, r3]
 80027d4:	4b04      	ldr	r3, [pc, #16]	; (80027e8 <BSP_LED_Off+0x1c>)
 80027d6:	0080      	lsls	r0, r0, #2
 80027d8:	2200      	movs	r2, #0
 80027da:	58c0      	ldr	r0, [r0, r3]
 80027dc:	f002 f954 	bl	8004a88 <HAL_GPIO_WritePin>
}
 80027e0:	bd10      	pop	{r4, pc}
 80027e2:	46c0      	nop			; (mov r8, r8)
 80027e4:	0800f598 	.word	0x0800f598
 80027e8:	20000000 	.word	0x20000000

080027ec <SX1276GetWakeTime>:
};

uint32_t SX1276GetWakeTime( void )
{
  return  BOARD_WAKEUP_TIME;
}
 80027ec:	2005      	movs	r0, #5
 80027ee:	4770      	bx	lr

080027f0 <SX1276CheckRfFrequency>:

bool SX1276CheckRfFrequency( uint32_t frequency )
{
    // Implement check. Currently all frequencies are supported
    return true;
}
 80027f0:	2001      	movs	r0, #1
 80027f2:	4770      	bx	lr

080027f4 <SX1276SetRfTxPower>:
{
 80027f4:	b570      	push	{r4, r5, r6, lr}
 80027f6:	0005      	movs	r5, r0
    paConfig = SX1276Read( REG_PACONFIG );
 80027f8:	2009      	movs	r0, #9
 80027fa:	f000 fa09 	bl	8002c10 <SX1276Read>
 80027fe:	0006      	movs	r6, r0
    paDac = SX1276Read( REG_PADAC );
 8002800:	204d      	movs	r0, #77	; 0x4d
 8002802:	f000 fa05 	bl	8002c10 <SX1276Read>
    paConfig = ( paConfig & RF_PACONFIG_PASELECT_MASK ) | SX1276GetPaSelect( power );
 8002806:	217f      	movs	r1, #127	; 0x7f
    paDac = SX1276Read( REG_PADAC );
 8002808:	0004      	movs	r4, r0
    paConfig = ( paConfig & RF_PACONFIG_PASELECT_MASK ) | SX1276GetPaSelect( power );
 800280a:	4031      	ands	r1, r6
        return RF_PACONFIG_PASELECT_RFO;
 800280c:	2600      	movs	r6, #0
    if (power >14)
 800280e:	2d0e      	cmp	r5, #14
 8002810:	dd00      	ble.n	8002814 <SX1276SetRfTxPower+0x20>
        return RF_PACONFIG_PASELECT_PABOOST;
 8002812:	3680      	adds	r6, #128	; 0x80
    paConfig = ( paConfig & RF_PACONFIG_PASELECT_MASK ) | SX1276GetPaSelect( power );
 8002814:	4331      	orrs	r1, r6
 8002816:	b249      	sxtb	r1, r1
    if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
 8002818:	2900      	cmp	r1, #0
 800281a:	da29      	bge.n	8002870 <SX1276SetRfTxPower+0x7c>
 800281c:	2407      	movs	r4, #7
        if( power > 17 )
 800281e:	2d11      	cmp	r5, #17
 8002820:	dd19      	ble.n	8002856 <SX1276SetRfTxPower+0x62>
 8002822:	230f      	movs	r3, #15
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_OFF;
 8002824:	4304      	orrs	r4, r0
 8002826:	b2e4      	uxtb	r4, r4
 8002828:	4399      	bics	r1, r3
        if( ( paDac & RF_PADAC_20DBM_ON ) == RF_PADAC_20DBM_ON )
 800282a:	43e3      	mvns	r3, r4
 800282c:	075b      	lsls	r3, r3, #29
 800282e:	d115      	bne.n	800285c <SX1276SetRfTxPower+0x68>
 8002830:	1c2b      	adds	r3, r5, #0
 8002832:	2d14      	cmp	r5, #20
 8002834:	dd00      	ble.n	8002838 <SX1276SetRfTxPower+0x44>
 8002836:	2314      	movs	r3, #20
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 5 ) & 0x0F );
 8002838:	b25a      	sxtb	r2, r3
 800283a:	2a05      	cmp	r2, #5
 800283c:	da00      	bge.n	8002840 <SX1276SetRfTxPower+0x4c>
 800283e:	2305      	movs	r3, #5
 8002840:	3b05      	subs	r3, #5
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 7 << 4 ) | ( power );
 8002842:	4319      	orrs	r1, r3
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 0 << 4 ) | ( power + 4 );
 8002844:	b2c9      	uxtb	r1, r1
    SX1276Write( REG_PACONFIG, paConfig );
 8002846:	2009      	movs	r0, #9
 8002848:	f000 f98f 	bl	8002b6a <SX1276Write>
    SX1276Write( REG_PADAC, paDac );
 800284c:	0021      	movs	r1, r4
 800284e:	204d      	movs	r0, #77	; 0x4d
 8002850:	f000 f98b 	bl	8002b6a <SX1276Write>
}
 8002854:	bd70      	pop	{r4, r5, r6, pc}
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_OFF;
 8002856:	43a0      	bics	r0, r4
 8002858:	2404      	movs	r4, #4
 800285a:	e7e2      	b.n	8002822 <SX1276SetRfTxPower+0x2e>
 800285c:	1c2b      	adds	r3, r5, #0
 800285e:	2d11      	cmp	r5, #17
 8002860:	dd00      	ble.n	8002864 <SX1276SetRfTxPower+0x70>
 8002862:	2311      	movs	r3, #17
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 2 ) & 0x0F );
 8002864:	b25a      	sxtb	r2, r3
 8002866:	2a02      	cmp	r2, #2
 8002868:	da00      	bge.n	800286c <SX1276SetRfTxPower+0x78>
 800286a:	2302      	movs	r3, #2
 800286c:	3b02      	subs	r3, #2
 800286e:	e7e8      	b.n	8002842 <SX1276SetRfTxPower+0x4e>
        if( power > 0 )
 8002870:	2d00      	cmp	r5, #0
 8002872:	dd05      	ble.n	8002880 <SX1276SetRfTxPower+0x8c>
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 7 << 4 ) | ( power );
 8002874:	1c2b      	adds	r3, r5, #0
 8002876:	2d0f      	cmp	r5, #15
 8002878:	dd00      	ble.n	800287c <SX1276SetRfTxPower+0x88>
 800287a:	230f      	movs	r3, #15
 800287c:	2170      	movs	r1, #112	; 0x70
 800287e:	e7e0      	b.n	8002842 <SX1276SetRfTxPower+0x4e>
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 0 << 4 ) | ( power + 4 );
 8002880:	1c29      	adds	r1, r5, #0
 8002882:	1d2b      	adds	r3, r5, #4
 8002884:	da01      	bge.n	800288a <SX1276SetRfTxPower+0x96>
 8002886:	4b02      	ldr	r3, [pc, #8]	; (8002890 <SX1276SetRfTxPower+0x9c>)
 8002888:	7819      	ldrb	r1, [r3, #0]
 800288a:	3104      	adds	r1, #4
 800288c:	e7da      	b.n	8002844 <SX1276SetRfTxPower+0x50>
 800288e:	46c0      	nop			; (mov r8, r8)
 8002890:	0800fb5c 	.word	0x0800fb5c

08002894 <SX1276IoInit>:
{
 8002894:	b530      	push	{r4, r5, lr}
 8002896:	b087      	sub	sp, #28
  GPIO_InitTypeDef initStruct={0};
 8002898:	2214      	movs	r2, #20
 800289a:	2100      	movs	r1, #0
 800289c:	a801      	add	r0, sp, #4
 800289e:	f00c f8d0 	bl	800ea42 <memset>
  SX1276BoardInit( &BoardCallbacks );
 80028a2:	4816      	ldr	r0, [pc, #88]	; (80028fc <SX1276IoInit+0x68>)
 80028a4:	f000 f90e 	bl	8002ac4 <SX1276BoardInit>
  initStruct.Mode =GPIO_MODE_IT_RISING;
 80028a8:	4b15      	ldr	r3, [pc, #84]	; (8002900 <SX1276IoInit+0x6c>)
  initStruct.Pull = GPIO_PULLDOWN;
 80028aa:	2502      	movs	r5, #2
  initStruct.Mode =GPIO_MODE_IT_RISING;
 80028ac:	9302      	str	r3, [sp, #8]
  initStruct.Speed = GPIO_SPEED_HIGH;
 80028ae:	2303      	movs	r3, #3
  HW_GPIO_Init( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, &initStruct );
 80028b0:	4c14      	ldr	r4, [pc, #80]	; (8002904 <SX1276IoInit+0x70>)
 80028b2:	aa01      	add	r2, sp, #4
 80028b4:	0020      	movs	r0, r4
 80028b6:	2110      	movs	r1, #16
  initStruct.Speed = GPIO_SPEED_HIGH;
 80028b8:	9304      	str	r3, [sp, #16]
  initStruct.Pull = GPIO_PULLDOWN;
 80028ba:	9503      	str	r5, [sp, #12]
  HW_GPIO_Init( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, &initStruct );
 80028bc:	f00a fd54 	bl	800d368 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_1_PORT, RADIO_DIO_1_PIN, &initStruct );
 80028c0:	aa01      	add	r2, sp, #4
 80028c2:	0029      	movs	r1, r5
 80028c4:	0020      	movs	r0, r4
 80028c6:	f00a fd4f 	bl	800d368 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_2_PORT, RADIO_DIO_2_PIN, &initStruct );
 80028ca:	aa01      	add	r2, sp, #4
 80028cc:	0020      	movs	r0, r4
 80028ce:	2101      	movs	r1, #1
 80028d0:	f00a fd4a 	bl	800d368 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_3_PORT, RADIO_DIO_3_PIN, &initStruct );
 80028d4:	2180      	movs	r1, #128	; 0x80
 80028d6:	aa01      	add	r2, sp, #4
 80028d8:	0189      	lsls	r1, r1, #6
 80028da:	480b      	ldr	r0, [pc, #44]	; (8002908 <SX1276IoInit+0x74>)
 80028dc:	f00a fd44 	bl	800d368 <HW_GPIO_Init>
  initStruct.Mode =GPIO_MODE_OUTPUT_PP;
 80028e0:	2301      	movs	r3, #1
  HW_GPIO_Init( RADIO_TCXO_VCC_PORT, RADIO_TCXO_VCC_PIN, &initStruct );
 80028e2:	2180      	movs	r1, #128	; 0x80
 80028e4:	20a0      	movs	r0, #160	; 0xa0
  initStruct.Mode =GPIO_MODE_OUTPUT_PP;
 80028e6:	9302      	str	r3, [sp, #8]
  initStruct.Pull = GPIO_NOPULL;  
 80028e8:	2300      	movs	r3, #0
  HW_GPIO_Init( RADIO_TCXO_VCC_PORT, RADIO_TCXO_VCC_PIN, &initStruct );
 80028ea:	aa01      	add	r2, sp, #4
 80028ec:	0149      	lsls	r1, r1, #5
 80028ee:	05c0      	lsls	r0, r0, #23
  initStruct.Pull = GPIO_NOPULL;  
 80028f0:	9303      	str	r3, [sp, #12]
  HW_GPIO_Init( RADIO_TCXO_VCC_PORT, RADIO_TCXO_VCC_PIN, &initStruct );
 80028f2:	f00a fd39 	bl	800d368 <HW_GPIO_Init>
}
 80028f6:	b007      	add	sp, #28
 80028f8:	bd30      	pop	{r4, r5, pc}
 80028fa:	46c0      	nop			; (mov r8, r8)
 80028fc:	20000014 	.word	0x20000014
 8002900:	10110000 	.word	0x10110000
 8002904:	50000400 	.word	0x50000400
 8002908:	50000800 	.word	0x50000800

0800290c <SX1276IoDeInit>:
{
 800290c:	b530      	push	{r4, r5, lr}
  initStruct.Pull = GPIO_PULLDOWN;
 800290e:	2502      	movs	r5, #2
{
 8002910:	b087      	sub	sp, #28
  HW_GPIO_Init( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, &initStruct );
 8002912:	4c10      	ldr	r4, [pc, #64]	; (8002954 <SX1276IoDeInit+0x48>)
  GPIO_InitTypeDef initStruct={0};
 8002914:	2214      	movs	r2, #20
 8002916:	2100      	movs	r1, #0
 8002918:	a801      	add	r0, sp, #4
 800291a:	f00c f892 	bl	800ea42 <memset>
  initStruct.Mode = GPIO_MODE_IT_RISING ; //GPIO_MODE_ANALOG;
 800291e:	4b0e      	ldr	r3, [pc, #56]	; (8002958 <SX1276IoDeInit+0x4c>)
  HW_GPIO_Init( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, &initStruct );
 8002920:	aa01      	add	r2, sp, #4
 8002922:	0020      	movs	r0, r4
 8002924:	2110      	movs	r1, #16
  initStruct.Mode = GPIO_MODE_IT_RISING ; //GPIO_MODE_ANALOG;
 8002926:	9302      	str	r3, [sp, #8]
  initStruct.Pull = GPIO_PULLDOWN;
 8002928:	9503      	str	r5, [sp, #12]
  HW_GPIO_Init( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, &initStruct );
 800292a:	f00a fd1d 	bl	800d368 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_1_PORT, RADIO_DIO_1_PIN, &initStruct );
 800292e:	aa01      	add	r2, sp, #4
 8002930:	0029      	movs	r1, r5
 8002932:	0020      	movs	r0, r4
 8002934:	f00a fd18 	bl	800d368 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_2_PORT, RADIO_DIO_2_PIN, &initStruct );
 8002938:	aa01      	add	r2, sp, #4
 800293a:	0020      	movs	r0, r4
 800293c:	2101      	movs	r1, #1
 800293e:	f00a fd13 	bl	800d368 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_3_PORT, RADIO_DIO_3_PIN, &initStruct );
 8002942:	2180      	movs	r1, #128	; 0x80
 8002944:	aa01      	add	r2, sp, #4
 8002946:	0189      	lsls	r1, r1, #6
 8002948:	4804      	ldr	r0, [pc, #16]	; (800295c <SX1276IoDeInit+0x50>)
 800294a:	f00a fd0d 	bl	800d368 <HW_GPIO_Init>
}
 800294e:	b007      	add	sp, #28
 8002950:	bd30      	pop	{r4, r5, pc}
 8002952:	46c0      	nop			; (mov r8, r8)
 8002954:	50000400 	.word	0x50000400
 8002958:	10110000 	.word	0x10110000
 800295c:	50000800 	.word	0x50000800

08002960 <SX1276SetAntSwLowPower>:
{
 8002960:	b510      	push	{r4, lr}
  GPIO_InitTypeDef initStruct={0};
 8002962:	2214      	movs	r2, #20
{
 8002964:	b086      	sub	sp, #24
    if( status == false )
 8002966:	2800      	cmp	r0, #0
 8002968:	d129      	bne.n	80029be <SX1276SetAntSwLowPower+0x5e>
  GPIO_InitTypeDef initStruct={0};
 800296a:	0001      	movs	r1, r0
 800296c:	a801      	add	r0, sp, #4
 800296e:	f00c f868 	bl	800ea42 <memset>
  initStruct.Mode =GPIO_MODE_OUTPUT_PP;
 8002972:	2301      	movs	r3, #1
 8002974:	9302      	str	r3, [sp, #8]
  initStruct.Speed = GPIO_SPEED_HIGH;
 8002976:	3302      	adds	r3, #2
  HW_GPIO_Init( RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, &initStruct  ); 
 8002978:	20a0      	movs	r0, #160	; 0xa0
 800297a:	aa01      	add	r2, sp, #4
 800297c:	2102      	movs	r1, #2
 800297e:	05c0      	lsls	r0, r0, #23
  initStruct.Speed = GPIO_SPEED_HIGH;
 8002980:	9304      	str	r3, [sp, #16]
  HW_GPIO_Init( RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, &initStruct  ); 
 8002982:	f00a fcf1 	bl	800d368 <HW_GPIO_Init>
  HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, 0);
 8002986:	20a0      	movs	r0, #160	; 0xa0
 8002988:	2200      	movs	r2, #0
 800298a:	2102      	movs	r1, #2
 800298c:	05c0      	lsls	r0, r0, #23
 800298e:	f00a fd5f 	bl	800d450 <HW_GPIO_Write>
  HW_GPIO_Init( RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, &initStruct  ); 
 8002992:	aa01      	add	r2, sp, #4
 8002994:	2102      	movs	r1, #2
 8002996:	480d      	ldr	r0, [pc, #52]	; (80029cc <SX1276SetAntSwLowPower+0x6c>)
 8002998:	f00a fce6 	bl	800d368 <HW_GPIO_Init>
  HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, 0);
 800299c:	2200      	movs	r2, #0
 800299e:	2102      	movs	r1, #2
 80029a0:	480a      	ldr	r0, [pc, #40]	; (80029cc <SX1276SetAntSwLowPower+0x6c>)
 80029a2:	f00a fd55 	bl	800d450 <HW_GPIO_Write>
  HW_GPIO_Init( RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, &initStruct  ); 
 80029a6:	aa01      	add	r2, sp, #4
 80029a8:	2104      	movs	r1, #4
 80029aa:	4808      	ldr	r0, [pc, #32]	; (80029cc <SX1276SetAntSwLowPower+0x6c>)
 80029ac:	f00a fcdc 	bl	800d368 <HW_GPIO_Init>
  HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, 0);
 80029b0:	2200      	movs	r2, #0
 80029b2:	2104      	movs	r1, #4
 80029b4:	4805      	ldr	r0, [pc, #20]	; (80029cc <SX1276SetAntSwLowPower+0x6c>)
 80029b6:	f00a fd4b 	bl	800d450 <HW_GPIO_Write>
}
 80029ba:	b006      	add	sp, #24
 80029bc:	bd10      	pop	{r4, pc}
  GPIO_InitTypeDef initStruct={0};
 80029be:	2100      	movs	r1, #0
 80029c0:	a801      	add	r0, sp, #4
 80029c2:	f00c f83e 	bl	800ea42 <memset>
  initStruct.Mode = GPIO_MODE_ANALOG ;
 80029c6:	2303      	movs	r3, #3
 80029c8:	9302      	str	r3, [sp, #8]
 80029ca:	e7d5      	b.n	8002978 <SX1276SetAntSwLowPower+0x18>
 80029cc:	50000800 	.word	0x50000800

080029d0 <SX1276IoIrqInit>:
{
 80029d0:	b570      	push	{r4, r5, r6, lr}
 80029d2:	0004      	movs	r4, r0
  HW_GPIO_SetIrq( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, IRQ_HIGH_PRIORITY, irqHandlers[0] );
 80029d4:	4d0d      	ldr	r5, [pc, #52]	; (8002a0c <SX1276IoIrqInit+0x3c>)
 80029d6:	6803      	ldr	r3, [r0, #0]
 80029d8:	2200      	movs	r2, #0
 80029da:	0028      	movs	r0, r5
 80029dc:	2110      	movs	r1, #16
 80029de:	f00a fd0f 	bl	800d400 <HW_GPIO_SetIrq>
  HW_GPIO_SetIrq( RADIO_DIO_1_PORT, RADIO_DIO_1_PIN, IRQ_HIGH_PRIORITY, irqHandlers[1] );
 80029e2:	0028      	movs	r0, r5
 80029e4:	6863      	ldr	r3, [r4, #4]
 80029e6:	2200      	movs	r2, #0
 80029e8:	2102      	movs	r1, #2
 80029ea:	f00a fd09 	bl	800d400 <HW_GPIO_SetIrq>
  HW_GPIO_SetIrq( RADIO_DIO_2_PORT, RADIO_DIO_2_PIN, IRQ_HIGH_PRIORITY, irqHandlers[2] );
 80029ee:	0028      	movs	r0, r5
 80029f0:	68a3      	ldr	r3, [r4, #8]
 80029f2:	2200      	movs	r2, #0
 80029f4:	2101      	movs	r1, #1
 80029f6:	f00a fd03 	bl	800d400 <HW_GPIO_SetIrq>
  HW_GPIO_SetIrq( RADIO_DIO_3_PORT, RADIO_DIO_3_PIN, IRQ_HIGH_PRIORITY, irqHandlers[3] );
 80029fa:	2180      	movs	r1, #128	; 0x80
 80029fc:	68e3      	ldr	r3, [r4, #12]
 80029fe:	2200      	movs	r2, #0
 8002a00:	0189      	lsls	r1, r1, #6
 8002a02:	4803      	ldr	r0, [pc, #12]	; (8002a10 <SX1276IoIrqInit+0x40>)
 8002a04:	f00a fcfc 	bl	800d400 <HW_GPIO_SetIrq>
}
 8002a08:	bd70      	pop	{r4, r5, r6, pc}
 8002a0a:	46c0      	nop			; (mov r8, r8)
 8002a0c:	50000400 	.word	0x50000400
 8002a10:	50000800 	.word	0x50000800

08002a14 <SX1276SetAntSw>:
{
 8002a14:	b570      	push	{r4, r5, r6, lr}
 8002a16:	0005      	movs	r5, r0
 uint8_t paConfig =  SX1276Read( REG_PACONFIG );
 8002a18:	2009      	movs	r0, #9
 8002a1a:	f000 f8f9 	bl	8002c10 <SX1276Read>
 8002a1e:	4c0b      	ldr	r4, [pc, #44]	; (8002a4c <SX1276SetAntSw+0x38>)
    switch( opMode )
 8002a20:	2d03      	cmp	r5, #3
 8002a22:	d10a      	bne.n	8002a3a <SX1276SetAntSw+0x26>
        HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, 1 );
 8002a24:	2201      	movs	r2, #1
 8002a26:	2102      	movs	r1, #2
      if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
 8002a28:	0603      	lsls	r3, r0, #24
 8002a2a:	d400      	bmi.n	8002a2e <SX1276SetAntSw+0x1a>
        HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, 1 );
 8002a2c:	2104      	movs	r1, #4
 8002a2e:	4808      	ldr	r0, [pc, #32]	; (8002a50 <SX1276SetAntSw+0x3c>)
 8002a30:	f00a fd0e 	bl	800d450 <HW_GPIO_Write>
      SX1276.RxTx = 1;
 8002a34:	2301      	movs	r3, #1
 8002a36:	7023      	strb	r3, [r4, #0]
}
 8002a38:	bd70      	pop	{r4, r5, r6, pc}
     HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, 1 );
 8002a3a:	20a0      	movs	r0, #160	; 0xa0
     SX1276.RxTx = 0;
 8002a3c:	2300      	movs	r3, #0
     HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, 1 );
 8002a3e:	2201      	movs	r2, #1
 8002a40:	2102      	movs	r1, #2
 8002a42:	05c0      	lsls	r0, r0, #23
     SX1276.RxTx = 0;
 8002a44:	7023      	strb	r3, [r4, #0]
     HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, 1 );
 8002a46:	f00a fd03 	bl	800d450 <HW_GPIO_Write>
}
 8002a4a:	e7f5      	b.n	8002a38 <SX1276SetAntSw+0x24>
 8002a4c:	200015d8 	.word	0x200015d8
 8002a50:	50000800 	.word	0x50000800

08002a54 <SX1276SetXO>:
{
 8002a54:	b510      	push	{r4, lr}
 8002a56:	0002      	movs	r2, r0
  if (state == SET )
 8002a58:	2801      	cmp	r0, #1
 8002a5a:	d109      	bne.n	8002a70 <SX1276SetXO+0x1c>
    TCXO_ON(); 
 8002a5c:	2180      	movs	r1, #128	; 0x80
 8002a5e:	20a0      	movs	r0, #160	; 0xa0
 8002a60:	0149      	lsls	r1, r1, #5
 8002a62:	05c0      	lsls	r0, r0, #23
 8002a64:	f00a fcf4 	bl	800d450 <HW_GPIO_Write>
    DelayMs( BOARD_WAKEUP_TIME ); //start up time of TCXO
 8002a68:	2005      	movs	r0, #5
 8002a6a:	f00b fc07 	bl	800e27c <HAL_Delay>
}
 8002a6e:	bd10      	pop	{r4, pc}
    TCXO_OFF(); 
 8002a70:	2180      	movs	r1, #128	; 0x80
 8002a72:	20a0      	movs	r0, #160	; 0xa0
 8002a74:	2200      	movs	r2, #0
 8002a76:	0149      	lsls	r1, r1, #5
 8002a78:	05c0      	lsls	r0, r0, #23
 8002a7a:	f00a fce9 	bl	800d450 <HW_GPIO_Write>
}
 8002a7e:	e7f6      	b.n	8002a6e <SX1276SetXO+0x1a>

08002a80 <GetFskBandwidthRegValue>:
 *
 * \param [IN] bandwidth Bandwidth value in Hz
 * \retval regValue Bandwidth register value.
 */
static uint8_t GetFskBandwidthRegValue( uint32_t bandwidth )
{
 8002a80:	2200      	movs	r2, #0
 8002a82:	b510      	push	{r4, lr}
    uint8_t i;

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
    {
        if( ( bandwidth >= FskBandwidths[i].bandwidth ) && ( bandwidth < FskBandwidths[i + 1].bandwidth ) )
 8002a84:	4907      	ldr	r1, [pc, #28]	; (8002aa4 <GetFskBandwidthRegValue+0x24>)
 8002a86:	00d3      	lsls	r3, r2, #3
 8002a88:	185b      	adds	r3, r3, r1
 8002a8a:	681c      	ldr	r4, [r3, #0]
 8002a8c:	4284      	cmp	r4, r0
 8002a8e:	d802      	bhi.n	8002a96 <GetFskBandwidthRegValue+0x16>
 8002a90:	689c      	ldr	r4, [r3, #8]
 8002a92:	4284      	cmp	r4, r0
 8002a94:	d803      	bhi.n	8002a9e <GetFskBandwidthRegValue+0x1e>
 8002a96:	3201      	adds	r2, #1
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 8002a98:	2a15      	cmp	r2, #21
 8002a9a:	d1f4      	bne.n	8002a86 <GetFskBandwidthRegValue+0x6>
 8002a9c:	e7fe      	b.n	8002a9c <GetFskBandwidthRegValue+0x1c>
        {
            return FskBandwidths[i].RegValue;
 8002a9e:	7918      	ldrb	r0, [r3, #4]
        }
    }
    // ERROR: Value not found
    while( 1 );
}
 8002aa0:	bd10      	pop	{r4, pc}
 8002aa2:	46c0      	nop			; (mov r8, r8)
 8002aa4:	0800f660 	.word	0x0800f660

08002aa8 <SX1276OnDio4Irq>:
    }
}

void SX1276OnDio4Irq( void* context )
{
    switch( SX1276.Settings.Modem )
 8002aa8:	4b05      	ldr	r3, [pc, #20]	; (8002ac0 <SX1276OnDio4Irq+0x18>)
 8002aaa:	795a      	ldrb	r2, [r3, #5]
 8002aac:	2a00      	cmp	r2, #0
 8002aae:	d105      	bne.n	8002abc <SX1276OnDio4Irq+0x14>
    {
    case MODEM_FSK:
        {
            if( SX1276.Settings.FskPacketHandler.PreambleDetected == false )
 8002ab0:	3330      	adds	r3, #48	; 0x30
 8002ab2:	781a      	ldrb	r2, [r3, #0]
 8002ab4:	2a00      	cmp	r2, #0
 8002ab6:	d101      	bne.n	8002abc <SX1276OnDio4Irq+0x14>
            {
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 8002ab8:	3201      	adds	r2, #1
 8002aba:	701a      	strb	r2, [r3, #0]
    case MODEM_LORA:
        break;
    default:
        break;
    }
}
 8002abc:	4770      	bx	lr
 8002abe:	46c0      	nop			; (mov r8, r8)
 8002ac0:	200015d8 	.word	0x200015d8

08002ac4 <SX1276BoardInit>:
    LoRaBoardCallbacks =callbacks;
 8002ac4:	4b01      	ldr	r3, [pc, #4]	; (8002acc <SX1276BoardInit+0x8>)
 8002ac6:	6018      	str	r0, [r3, #0]
}
 8002ac8:	4770      	bx	lr
 8002aca:	46c0      	nop			; (mov r8, r8)
 8002acc:	200002d0 	.word	0x200002d0

08002ad0 <SX1276GetStatus>:
    return SX1276.Settings.State;
 8002ad0:	4b01      	ldr	r3, [pc, #4]	; (8002ad8 <SX1276GetStatus+0x8>)
 8002ad2:	7918      	ldrb	r0, [r3, #4]
}
 8002ad4:	4770      	bx	lr
 8002ad6:	46c0      	nop			; (mov r8, r8)
 8002ad8:	200015d8 	.word	0x200015d8

08002adc <SX1276Reset>:
{
 8002adc:	b530      	push	{r4, r5, lr}
 8002ade:	b087      	sub	sp, #28
    initStruct.Mode =GPIO_MODE_OUTPUT_PP;
 8002ae0:	2401      	movs	r4, #1
    GPIO_InitTypeDef initStruct = { 0 };
 8002ae2:	2214      	movs	r2, #20
 8002ae4:	2100      	movs	r1, #0
 8002ae6:	a801      	add	r0, sp, #4
 8002ae8:	f00b ffab 	bl	800ea42 <memset>
    initStruct.Speed = GPIO_SPEED_HIGH;
 8002aec:	2303      	movs	r3, #3
    HW_GPIO_Init( RADIO_RESET_PORT, RADIO_RESET_PIN, &initStruct );
 8002aee:	4d0e      	ldr	r5, [pc, #56]	; (8002b28 <SX1276Reset+0x4c>)
 8002af0:	aa01      	add	r2, sp, #4
 8002af2:	0021      	movs	r1, r4
 8002af4:	0028      	movs	r0, r5
    initStruct.Speed = GPIO_SPEED_HIGH;
 8002af6:	9304      	str	r3, [sp, #16]
    initStruct.Mode =GPIO_MODE_OUTPUT_PP;
 8002af8:	9402      	str	r4, [sp, #8]
    HW_GPIO_Init( RADIO_RESET_PORT, RADIO_RESET_PIN, &initStruct );
 8002afa:	f00a fc35 	bl	800d368 <HW_GPIO_Init>
    HW_GPIO_Write( RADIO_RESET_PORT, RADIO_RESET_PIN, 0 );
 8002afe:	0021      	movs	r1, r4
 8002b00:	2200      	movs	r2, #0
 8002b02:	0028      	movs	r0, r5
 8002b04:	f00a fca4 	bl	800d450 <HW_GPIO_Write>
    DelayMs( 1 );
 8002b08:	0020      	movs	r0, r4
 8002b0a:	f00b fbb7 	bl	800e27c <HAL_Delay>
    initStruct.Mode = GPIO_NOPULL;
 8002b0e:	2300      	movs	r3, #0
    HW_GPIO_Init( RADIO_RESET_PORT, RADIO_RESET_PIN, &initStruct );
 8002b10:	aa01      	add	r2, sp, #4
 8002b12:	0021      	movs	r1, r4
 8002b14:	0028      	movs	r0, r5
    initStruct.Mode = GPIO_NOPULL;
 8002b16:	9302      	str	r3, [sp, #8]
    HW_GPIO_Init( RADIO_RESET_PORT, RADIO_RESET_PIN, &initStruct );
 8002b18:	f00a fc26 	bl	800d368 <HW_GPIO_Init>
    DelayMs( 6 );
 8002b1c:	2006      	movs	r0, #6
 8002b1e:	f00b fbad 	bl	800e27c <HAL_Delay>
}
 8002b22:	b007      	add	sp, #28
 8002b24:	bd30      	pop	{r4, r5, pc}
 8002b26:	46c0      	nop			; (mov r8, r8)
 8002b28:	50000800 	.word	0x50000800

08002b2c <SX1276WriteBuffer>:
{
 8002b2c:	b570      	push	{r4, r5, r6, lr}
 8002b2e:	0006      	movs	r6, r0
 8002b30:	000c      	movs	r4, r1
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 0 );
 8002b32:	20a0      	movs	r0, #160	; 0xa0
 8002b34:	2180      	movs	r1, #128	; 0x80
{
 8002b36:	0015      	movs	r5, r2
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 0 );
 8002b38:	0209      	lsls	r1, r1, #8
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	05c0      	lsls	r0, r0, #23
 8002b3e:	f00a fc87 	bl	800d450 <HW_GPIO_Write>
    HW_SPI_InOut( addr | 0x80 );
 8002b42:	2080      	movs	r0, #128	; 0x80
 8002b44:	4330      	orrs	r0, r6
 8002b46:	f00a fefb 	bl	800d940 <HW_SPI_InOut>
 8002b4a:	1965      	adds	r5, r4, r5
    for( i = 0; i < size; i++ )
 8002b4c:	42ac      	cmp	r4, r5
 8002b4e:	d107      	bne.n	8002b60 <SX1276WriteBuffer+0x34>
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 1 );
 8002b50:	2180      	movs	r1, #128	; 0x80
 8002b52:	20a0      	movs	r0, #160	; 0xa0
 8002b54:	2201      	movs	r2, #1
 8002b56:	0209      	lsls	r1, r1, #8
 8002b58:	05c0      	lsls	r0, r0, #23
 8002b5a:	f00a fc79 	bl	800d450 <HW_GPIO_Write>
}
 8002b5e:	bd70      	pop	{r4, r5, r6, pc}
        HW_SPI_InOut( buffer[i] );
 8002b60:	7820      	ldrb	r0, [r4, #0]
 8002b62:	f00a feed 	bl	800d940 <HW_SPI_InOut>
 8002b66:	3401      	adds	r4, #1
 8002b68:	e7f0      	b.n	8002b4c <SX1276WriteBuffer+0x20>

08002b6a <SX1276Write>:
{
 8002b6a:	b507      	push	{r0, r1, r2, lr}
 8002b6c:	466b      	mov	r3, sp
 8002b6e:	71d9      	strb	r1, [r3, #7]
 8002b70:	3307      	adds	r3, #7
    SX1276WriteBuffer( addr, &data, 1 );
 8002b72:	2201      	movs	r2, #1
 8002b74:	0019      	movs	r1, r3
 8002b76:	f7ff ffd9 	bl	8002b2c <SX1276WriteBuffer>
}
 8002b7a:	bd07      	pop	{r0, r1, r2, pc}

08002b7c <SX1276SetChannel>:
    SX1276.Settings.Channel = freq;
 8002b7c:	4b11      	ldr	r3, [pc, #68]	; (8002bc4 <SX1276SetChannel+0x48>)
{
 8002b7e:	b570      	push	{r4, r5, r6, lr}
    SX_FREQ_TO_CHANNEL( channel, freq );
 8002b80:	4911      	ldr	r1, [pc, #68]	; (8002bc8 <SX1276SetChannel+0x4c>)
    SX1276.Settings.Channel = freq;
 8002b82:	6098      	str	r0, [r3, #8]
{
 8002b84:	0005      	movs	r5, r0
    SX_FREQ_TO_CHANNEL( channel, freq );
 8002b86:	f7fd fb75 	bl	8000274 <__aeabi_uidivmod>
 8002b8a:	4b10      	ldr	r3, [pc, #64]	; (8002bcc <SX1276SetChannel+0x50>)
 8002b8c:	0208      	lsls	r0, r1, #8
 8002b8e:	18c0      	adds	r0, r0, r3
 8002b90:	490d      	ldr	r1, [pc, #52]	; (8002bc8 <SX1276SetChannel+0x4c>)
 8002b92:	f7fd fae9 	bl	8000168 <__udivsi3>
 8002b96:	490c      	ldr	r1, [pc, #48]	; (8002bc8 <SX1276SetChannel+0x4c>)
 8002b98:	0004      	movs	r4, r0
 8002b9a:	0028      	movs	r0, r5
 8002b9c:	f7fd fae4 	bl	8000168 <__udivsi3>
 8002ba0:	0200      	lsls	r0, r0, #8
 8002ba2:	1824      	adds	r4, r4, r0
    SX1276Write( REG_FRFMSB, ( uint8_t )( ( channel >> 16 ) & 0xFF ) );
 8002ba4:	0c21      	lsrs	r1, r4, #16
 8002ba6:	b2c9      	uxtb	r1, r1
 8002ba8:	2006      	movs	r0, #6
 8002baa:	f7ff ffde 	bl	8002b6a <SX1276Write>
    SX1276Write( REG_FRFMID, ( uint8_t )( ( channel >> 8 ) & 0xFF ) );
 8002bae:	0a21      	lsrs	r1, r4, #8
 8002bb0:	b2c9      	uxtb	r1, r1
 8002bb2:	2007      	movs	r0, #7
 8002bb4:	f7ff ffd9 	bl	8002b6a <SX1276Write>
    SX1276Write( REG_FRFLSB, ( uint8_t )( channel & 0xFF ) );
 8002bb8:	b2e1      	uxtb	r1, r4
 8002bba:	2008      	movs	r0, #8
 8002bbc:	f7ff ffd5 	bl	8002b6a <SX1276Write>
}
 8002bc0:	bd70      	pop	{r4, r5, r6, pc}
 8002bc2:	46c0      	nop			; (mov r8, r8)
 8002bc4:	200015d8 	.word	0x200015d8
 8002bc8:	00003d09 	.word	0x00003d09
 8002bcc:	00001e84 	.word	0x00001e84

08002bd0 <SX1276ReadBuffer>:
{
 8002bd0:	b570      	push	{r4, r5, r6, lr}
 8002bd2:	0006      	movs	r6, r0
 8002bd4:	000c      	movs	r4, r1
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 0 );
 8002bd6:	20a0      	movs	r0, #160	; 0xa0
 8002bd8:	2180      	movs	r1, #128	; 0x80
{
 8002bda:	0015      	movs	r5, r2
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 0 );
 8002bdc:	0209      	lsls	r1, r1, #8
 8002bde:	2200      	movs	r2, #0
 8002be0:	05c0      	lsls	r0, r0, #23
 8002be2:	f00a fc35 	bl	800d450 <HW_GPIO_Write>
    HW_SPI_InOut( addr & 0x7F );
 8002be6:	207f      	movs	r0, #127	; 0x7f
 8002be8:	4030      	ands	r0, r6
 8002bea:	f00a fea9 	bl	800d940 <HW_SPI_InOut>
 8002bee:	1965      	adds	r5, r4, r5
    for( i = 0; i < size; i++ )
 8002bf0:	42ac      	cmp	r4, r5
 8002bf2:	d107      	bne.n	8002c04 <SX1276ReadBuffer+0x34>
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 1 );
 8002bf4:	2180      	movs	r1, #128	; 0x80
 8002bf6:	20a0      	movs	r0, #160	; 0xa0
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	0209      	lsls	r1, r1, #8
 8002bfc:	05c0      	lsls	r0, r0, #23
 8002bfe:	f00a fc27 	bl	800d450 <HW_GPIO_Write>
}
 8002c02:	bd70      	pop	{r4, r5, r6, pc}
        buffer[i] = HW_SPI_InOut( 0 );
 8002c04:	2000      	movs	r0, #0
 8002c06:	f00a fe9b 	bl	800d940 <HW_SPI_InOut>
 8002c0a:	7020      	strb	r0, [r4, #0]
 8002c0c:	3401      	adds	r4, #1
 8002c0e:	e7ef      	b.n	8002bf0 <SX1276ReadBuffer+0x20>

08002c10 <SX1276Read>:
{
 8002c10:	b513      	push	{r0, r1, r4, lr}
    SX1276ReadBuffer( addr, &data, 1 );
 8002c12:	466b      	mov	r3, sp
 8002c14:	1ddc      	adds	r4, r3, #7
 8002c16:	2201      	movs	r2, #1
 8002c18:	0021      	movs	r1, r4
 8002c1a:	f7ff ffd9 	bl	8002bd0 <SX1276ReadBuffer>
    return data;
 8002c1e:	7820      	ldrb	r0, [r4, #0]
}
 8002c20:	bd16      	pop	{r1, r2, r4, pc}
	...

08002c24 <RxChainCalibration>:
{
 8002c24:	b570      	push	{r4, r5, r6, lr}
    regPaConfigInitVal = SX1276Read( REG_PACONFIG );
 8002c26:	2009      	movs	r0, #9
 8002c28:	f7ff fff2 	bl	8002c10 <SX1276Read>
 8002c2c:	0005      	movs	r5, r0
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8002c2e:	2006      	movs	r0, #6
 8002c30:	f7ff ffee 	bl	8002c10 <SX1276Read>
 8002c34:	0004      	movs	r4, r0
                ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
 8002c36:	2007      	movs	r0, #7
 8002c38:	f7ff ffea 	bl	8002c10 <SX1276Read>
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8002c3c:	0424      	lsls	r4, r4, #16
                ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
 8002c3e:	0200      	lsls	r0, r0, #8
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8002c40:	4304      	orrs	r4, r0
                ( ( uint32_t )SX1276Read( REG_FRFLSB ) ) );
 8002c42:	2008      	movs	r0, #8
 8002c44:	f7ff ffe4 	bl	8002c10 <SX1276Read>
    SX_CHANNEL_TO_FREQ(channel, initialFreq);
 8002c48:	4b1a      	ldr	r3, [pc, #104]	; (8002cb4 <RxChainCalibration+0x90>)
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8002c4a:	4320      	orrs	r0, r4
    SX_CHANNEL_TO_FREQ(channel, initialFreq);
 8002c4c:	b2c4      	uxtb	r4, r0
 8002c4e:	435c      	muls	r4, r3
 8002c50:	0a00      	lsrs	r0, r0, #8
 8002c52:	4358      	muls	r0, r3
 8002c54:	3480      	adds	r4, #128	; 0x80
 8002c56:	0a24      	lsrs	r4, r4, #8
    SX1276Write( REG_PACONFIG, 0x00 );
 8002c58:	2100      	movs	r1, #0
    SX_CHANNEL_TO_FREQ(channel, initialFreq);
 8002c5a:	1824      	adds	r4, r4, r0
    SX1276Write( REG_PACONFIG, 0x00 );
 8002c5c:	2009      	movs	r0, #9
 8002c5e:	f7ff ff84 	bl	8002b6a <SX1276Write>
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 8002c62:	203b      	movs	r0, #59	; 0x3b
 8002c64:	f7ff ffd4 	bl	8002c10 <SX1276Read>
 8002c68:	2140      	movs	r1, #64	; 0x40
 8002c6a:	4301      	orrs	r1, r0
 8002c6c:	b2c9      	uxtb	r1, r1
 8002c6e:	203b      	movs	r0, #59	; 0x3b
 8002c70:	f7ff ff7b 	bl	8002b6a <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 8002c74:	2620      	movs	r6, #32
 8002c76:	203b      	movs	r0, #59	; 0x3b
 8002c78:	f7ff ffca 	bl	8002c10 <SX1276Read>
 8002c7c:	4230      	tst	r0, r6
 8002c7e:	d1fa      	bne.n	8002c76 <RxChainCalibration+0x52>
    SX1276SetChannel( 868000000 );
 8002c80:	480d      	ldr	r0, [pc, #52]	; (8002cb8 <RxChainCalibration+0x94>)
 8002c82:	f7ff ff7b 	bl	8002b7c <SX1276SetChannel>
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 8002c86:	203b      	movs	r0, #59	; 0x3b
 8002c88:	f7ff ffc2 	bl	8002c10 <SX1276Read>
 8002c8c:	2140      	movs	r1, #64	; 0x40
 8002c8e:	4301      	orrs	r1, r0
 8002c90:	b2c9      	uxtb	r1, r1
 8002c92:	203b      	movs	r0, #59	; 0x3b
 8002c94:	f7ff ff69 	bl	8002b6a <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 8002c98:	2620      	movs	r6, #32
 8002c9a:	203b      	movs	r0, #59	; 0x3b
 8002c9c:	f7ff ffb8 	bl	8002c10 <SX1276Read>
 8002ca0:	4230      	tst	r0, r6
 8002ca2:	d1fa      	bne.n	8002c9a <RxChainCalibration+0x76>
    SX1276Write( REG_PACONFIG, regPaConfigInitVal );
 8002ca4:	0029      	movs	r1, r5
 8002ca6:	2009      	movs	r0, #9
 8002ca8:	f7ff ff5f 	bl	8002b6a <SX1276Write>
    SX1276SetChannel( initialFreq );
 8002cac:	0020      	movs	r0, r4
 8002cae:	f7ff ff65 	bl	8002b7c <SX1276SetChannel>
}
 8002cb2:	bd70      	pop	{r4, r5, r6, pc}
 8002cb4:	00003d09 	.word	0x00003d09
 8002cb8:	33bca100 	.word	0x33bca100

08002cbc <SX1276GetTimeOnAir>:
{
 8002cbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cbe:	000d      	movs	r5, r1
 8002cc0:	b085      	sub	sp, #20
    switch( modem )
 8002cc2:	2800      	cmp	r0, #0
 8002cc4:	d003      	beq.n	8002cce <SX1276GetTimeOnAir+0x12>
 8002cc6:	2801      	cmp	r0, #1
 8002cc8:	d055      	beq.n	8002d76 <SX1276GetTimeOnAir+0xba>
    uint32_t airTime = 0;
 8002cca:	2000      	movs	r0, #0
    return airTime;
 8002ccc:	e04c      	b.n	8002d68 <SX1276GetTimeOnAir+0xac>
            airTime = (uint32_t) round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 8002cce:	4c6f      	ldr	r4, [pc, #444]	; (8002e8c <SX1276GetTimeOnAir+0x1d0>)
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 8002cd0:	2027      	movs	r0, #39	; 0x27
            airTime = (uint32_t) round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 8002cd2:	8c26      	ldrh	r6, [r4, #32]
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 8002cd4:	f7ff ff9c 	bl	8002c10 <SX1276Read>
 8002cd8:	23f8      	movs	r3, #248	; 0xf8
 8002cda:	4398      	bics	r0, r3
 8002cdc:	3001      	adds	r0, #1
            airTime = (uint32_t) round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 8002cde:	1980      	adds	r0, r0, r6
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 8002ce0:	f7ff fc10 	bl	8002504 <__aeabi_i2d>
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 8002ce4:	1ce3      	adds	r3, r4, #3
 8002ce6:	7fdb      	ldrb	r3, [r3, #31]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d13e      	bne.n	8002d6c <SX1276GetTimeOnAir+0xb0>
 8002cee:	4b68      	ldr	r3, [pc, #416]	; (8002e90 <SX1276GetTimeOnAir+0x1d4>)
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 8002cf0:	f7fd fef2 	bl	8000ad8 <__aeabi_dadd>
 8002cf4:	0006      	movs	r6, r0
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 8002cf6:	2030      	movs	r0, #48	; 0x30
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 8002cf8:	000f      	movs	r7, r1
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 8002cfa:	f7ff ff89 	bl	8002c10 <SX1276Read>
 8002cfe:	23f9      	movs	r3, #249	; 0xf9
 8002d00:	2200      	movs	r2, #0
 8002d02:	4398      	bics	r0, r3
 8002d04:	2300      	movs	r3, #0
 8002d06:	2800      	cmp	r0, #0
 8002d08:	d000      	beq.n	8002d0c <SX1276GetTimeOnAir+0x50>
 8002d0a:	4b61      	ldr	r3, [pc, #388]	; (8002e90 <SX1276GetTimeOnAir+0x1d4>)
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 8002d0c:	0030      	movs	r0, r6
 8002d0e:	0039      	movs	r1, r7
 8002d10:	f7fd fee2 	bl	8000ad8 <__aeabi_dadd>
 8002d14:	0006      	movs	r6, r0
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 8002d16:	0028      	movs	r0, r5
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 8002d18:	000f      	movs	r7, r1
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 8002d1a:	f7ff fbf3 	bl	8002504 <__aeabi_i2d>
 8002d1e:	0002      	movs	r2, r0
 8002d20:	000b      	movs	r3, r1
 8002d22:	0030      	movs	r0, r6
 8002d24:	0039      	movs	r1, r7
 8002d26:	f7fd fed7 	bl	8000ad8 <__aeabi_dadd>
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 8002d2a:	1d63      	adds	r3, r4, #5
 8002d2c:	7fdb      	ldrb	r3, [r3, #31]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d11d      	bne.n	8002d70 <SX1276GetTimeOnAir+0xb4>
 8002d34:	2300      	movs	r3, #0
                                     pktLen +
 8002d36:	f7fd fecf 	bl	8000ad8 <__aeabi_dadd>
            airTime = (uint32_t) round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	4b55      	ldr	r3, [pc, #340]	; (8002e94 <SX1276GetTimeOnAir+0x1d8>)
 8002d3e:	f7fe fdf1 	bl	8001924 <__aeabi_dmul>
 8002d42:	0006      	movs	r6, r0
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 8002d44:	69e0      	ldr	r0, [r4, #28]
            airTime = (uint32_t) round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 8002d46:	000f      	movs	r7, r1
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 8002d48:	f7ff fc16 	bl	8002578 <__aeabi_ui2d>
 8002d4c:	0002      	movs	r2, r0
 8002d4e:	000b      	movs	r3, r1
 8002d50:	0030      	movs	r0, r6
 8002d52:	0039      	movs	r1, r7
 8002d54:	f7fe f9dc 	bl	8001110 <__aeabi_ddiv>
            airTime = (uint32_t) round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 8002d58:	2200      	movs	r2, #0
 8002d5a:	4b4f      	ldr	r3, [pc, #316]	; (8002e98 <SX1276GetTimeOnAir+0x1dc>)
 8002d5c:	f7fe fde2 	bl	8001924 <__aeabi_dmul>
 8002d60:	f00c fbb2 	bl	800f4c8 <round>
            airTime = (uint32_t) floor( tOnAir * 1000 + 0.999 );
 8002d64:	f7fd fbd4 	bl	8000510 <__aeabi_d2uiz>
}
 8002d68:	b005      	add	sp, #20
 8002d6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	e7bf      	b.n	8002cf0 <SX1276GetTimeOnAir+0x34>
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 8002d70:	2380      	movs	r3, #128	; 0x80
 8002d72:	05db      	lsls	r3, r3, #23
 8002d74:	e7df      	b.n	8002d36 <SX1276GetTimeOnAir+0x7a>
            switch( SX1276.Settings.LoRa.Bandwidth )
 8002d76:	4c45      	ldr	r4, [pc, #276]	; (8002e8c <SX1276GetTimeOnAir+0x1d0>)
 8002d78:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002d7a:	3b07      	subs	r3, #7
 8002d7c:	2b02      	cmp	r3, #2
 8002d7e:	d900      	bls.n	8002d82 <SX1276GetTimeOnAir+0xc6>
 8002d80:	e07d      	b.n	8002e7e <SX1276GetTimeOnAir+0x1c2>
 8002d82:	4a46      	ldr	r2, [pc, #280]	; (8002e9c <SX1276GetTimeOnAir+0x1e0>)
 8002d84:	00db      	lsls	r3, r3, #3
 8002d86:	18d3      	adds	r3, r2, r3
 8002d88:	681e      	ldr	r6, [r3, #0]
 8002d8a:	685f      	ldr	r7, [r3, #4]
            double rs = bw / ( 1 << SX1276.Settings.LoRa.Datarate );
 8002d8c:	2001      	movs	r0, #1
 8002d8e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 8002d90:	00ed      	lsls	r5, r5, #3
            double rs = bw / ( 1 << SX1276.Settings.LoRa.Datarate );
 8002d92:	4098      	lsls	r0, r3
 8002d94:	9301      	str	r3, [sp, #4]
 8002d96:	f7ff fbb5 	bl	8002504 <__aeabi_i2d>
 8002d9a:	0002      	movs	r2, r0
 8002d9c:	000b      	movs	r3, r1
 8002d9e:	0030      	movs	r0, r6
 8002da0:	0039      	movs	r1, r7
 8002da2:	f7fe f9b5 	bl	8001110 <__aeabi_ddiv>
 8002da6:	0002      	movs	r2, r0
 8002da8:	000b      	movs	r3, r1
            double ts = 1 / rs;
 8002daa:	2000      	movs	r0, #0
 8002dac:	4938      	ldr	r1, [pc, #224]	; (8002e90 <SX1276GetTimeOnAir+0x1d4>)
 8002dae:	f7fe f9af 	bl	8001110 <__aeabi_ddiv>
            double tPreamble = ( SX1276.Settings.LoRa.PreambleLen + 4.25 ) * ts;
 8002db2:	0023      	movs	r3, r4
            double ts = 1 / rs;
 8002db4:	0006      	movs	r6, r0
 8002db6:	000f      	movs	r7, r1
            double tPreamble = ( SX1276.Settings.LoRa.PreambleLen + 4.25 ) * ts;
 8002db8:	334e      	adds	r3, #78	; 0x4e
 8002dba:	8818      	ldrh	r0, [r3, #0]
 8002dbc:	f7ff fba2 	bl	8002504 <__aeabi_i2d>
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	4b37      	ldr	r3, [pc, #220]	; (8002ea0 <SX1276GetTimeOnAir+0x1e4>)
 8002dc4:	f7fd fe88 	bl	8000ad8 <__aeabi_dadd>
 8002dc8:	0032      	movs	r2, r6
 8002dca:	003b      	movs	r3, r7
 8002dcc:	f7fe fdaa 	bl	8001924 <__aeabi_dmul>
                                 28 + 16 * SX1276.Settings.LoRa.CrcOn -
 8002dd0:	0023      	movs	r3, r4
            double tPreamble = ( SX1276.Settings.LoRa.PreambleLen + 4.25 ) * ts;
 8002dd2:	9002      	str	r0, [sp, #8]
 8002dd4:	9103      	str	r1, [sp, #12]
                                 28 + 16 * SX1276.Settings.LoRa.CrcOn -
 8002dd6:	3352      	adds	r3, #82	; 0x52
 8002dd8:	7818      	ldrb	r0, [r3, #0]
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 8002dda:	9b01      	ldr	r3, [sp, #4]
                                 ( SX1276.Settings.LoRa.FixLen ? 20 : 0 ) ) /
 8002ddc:	3450      	adds	r4, #80	; 0x50
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 8002dde:	009b      	lsls	r3, r3, #2
                                 28 + 16 * SX1276.Settings.LoRa.CrcOn -
 8002de0:	0100      	lsls	r0, r0, #4
 8002de2:	1ac0      	subs	r0, r0, r3
                                 ( SX1276.Settings.LoRa.FixLen ? 20 : 0 ) ) /
 8002de4:	7823      	ldrb	r3, [r4, #0]
 8002de6:	2214      	movs	r2, #20
 8002de8:	1e59      	subs	r1, r3, #1
 8002dea:	418b      	sbcs	r3, r1
 8002dec:	301c      	adds	r0, #28
 8002dee:	425b      	negs	r3, r3
 8002df0:	401a      	ands	r2, r3
                                 28 + 16 * SX1276.Settings.LoRa.CrcOn -
 8002df2:	1828      	adds	r0, r5, r0
 8002df4:	1a80      	subs	r0, r0, r2
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 8002df6:	f7ff fbbf 	bl	8002578 <__aeabi_ui2d>
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 8002dfa:	4b24      	ldr	r3, [pc, #144]	; (8002e8c <SX1276GetTimeOnAir+0x1d0>)
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 8002dfc:	0004      	movs	r4, r0
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 8002dfe:	334c      	adds	r3, #76	; 0x4c
 8002e00:	7818      	ldrb	r0, [r3, #0]
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 8002e02:	000d      	movs	r5, r1
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 8002e04:	1e43      	subs	r3, r0, #1
 8002e06:	4198      	sbcs	r0, r3
                                 ( double )( 4 * ( SX1276.Settings.LoRa.Datarate -
 8002e08:	9b01      	ldr	r3, [sp, #4]
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 8002e0a:	0040      	lsls	r0, r0, #1
                                 ( double )( 4 * ( SX1276.Settings.LoRa.Datarate -
 8002e0c:	1a18      	subs	r0, r3, r0
 8002e0e:	0080      	lsls	r0, r0, #2
 8002e10:	f7ff fbb2 	bl	8002578 <__aeabi_ui2d>
 8002e14:	0002      	movs	r2, r0
 8002e16:	000b      	movs	r3, r1
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 8002e18:	0020      	movs	r0, r4
 8002e1a:	0029      	movs	r1, r5
 8002e1c:	f7fe f978 	bl	8001110 <__aeabi_ddiv>
 8002e20:	f00c fa4e 	bl	800f2c0 <ceil>
 8002e24:	0004      	movs	r4, r0
 8002e26:	000d      	movs	r5, r1
                                 ( SX1276.Settings.LoRa.Coderate + 4 );
 8002e28:	4b18      	ldr	r3, [pc, #96]	; (8002e8c <SX1276GetTimeOnAir+0x1d0>)
 8002e2a:	334d      	adds	r3, #77	; 0x4d
 8002e2c:	7818      	ldrb	r0, [r3, #0]
 8002e2e:	3004      	adds	r0, #4
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 8002e30:	f7ff fb68 	bl	8002504 <__aeabi_i2d>
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 8002e34:	0022      	movs	r2, r4
 8002e36:	002b      	movs	r3, r5
 8002e38:	f7fe fd74 	bl	8001924 <__aeabi_dmul>
            double nPayload = 8 + ( ( tmp > 0 ) ? tmp : 0 );
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	2300      	movs	r3, #0
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 8002e40:	0004      	movs	r4, r0
 8002e42:	000d      	movs	r5, r1
            double nPayload = 8 + ( ( tmp > 0 ) ? tmp : 0 );
 8002e44:	f7fd fb30 	bl	80004a8 <__aeabi_dcmpgt>
 8002e48:	2800      	cmp	r0, #0
 8002e4a:	d01b      	beq.n	8002e84 <SX1276GetTimeOnAir+0x1c8>
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	4b11      	ldr	r3, [pc, #68]	; (8002e94 <SX1276GetTimeOnAir+0x1d8>)
 8002e50:	0020      	movs	r0, r4
 8002e52:	0029      	movs	r1, r5
 8002e54:	f7fd fe40 	bl	8000ad8 <__aeabi_dadd>
            double tPayload = nPayload * ts;
 8002e58:	0032      	movs	r2, r6
 8002e5a:	003b      	movs	r3, r7
 8002e5c:	f7fe fd62 	bl	8001924 <__aeabi_dmul>
            double tOnAir = tPreamble + tPayload;
 8002e60:	9a02      	ldr	r2, [sp, #8]
 8002e62:	9b03      	ldr	r3, [sp, #12]
 8002e64:	f7fd fe38 	bl	8000ad8 <__aeabi_dadd>
            airTime = (uint32_t) floor( tOnAir * 1000 + 0.999 );
 8002e68:	2200      	movs	r2, #0
 8002e6a:	4b0b      	ldr	r3, [pc, #44]	; (8002e98 <SX1276GetTimeOnAir+0x1dc>)
 8002e6c:	f7fe fd5a 	bl	8001924 <__aeabi_dmul>
 8002e70:	4a0c      	ldr	r2, [pc, #48]	; (8002ea4 <SX1276GetTimeOnAir+0x1e8>)
 8002e72:	4b0d      	ldr	r3, [pc, #52]	; (8002ea8 <SX1276GetTimeOnAir+0x1ec>)
 8002e74:	f7fd fe30 	bl	8000ad8 <__aeabi_dadd>
 8002e78:	f00c faa4 	bl	800f3c4 <floor>
 8002e7c:	e772      	b.n	8002d64 <SX1276GetTimeOnAir+0xa8>
            switch( SX1276.Settings.LoRa.Bandwidth )
 8002e7e:	2600      	movs	r6, #0
 8002e80:	2700      	movs	r7, #0
 8002e82:	e783      	b.n	8002d8c <SX1276GetTimeOnAir+0xd0>
            double nPayload = 8 + ( ( tmp > 0 ) ? tmp : 0 );
 8002e84:	2000      	movs	r0, #0
 8002e86:	4903      	ldr	r1, [pc, #12]	; (8002e94 <SX1276GetTimeOnAir+0x1d8>)
 8002e88:	e7e6      	b.n	8002e58 <SX1276GetTimeOnAir+0x19c>
 8002e8a:	46c0      	nop			; (mov r8, r8)
 8002e8c:	200015d8 	.word	0x200015d8
 8002e90:	3ff00000 	.word	0x3ff00000
 8002e94:	40200000 	.word	0x40200000
 8002e98:	408f4000 	.word	0x408f4000
 8002e9c:	0800f618 	.word	0x0800f618
 8002ea0:	40110000 	.word	0x40110000
 8002ea4:	d916872b 	.word	0xd916872b
 8002ea8:	3feff7ce 	.word	0x3feff7ce

08002eac <SX1276ReadRssi>:
{
 8002eac:	b510      	push	{r4, lr}
    switch( modem )
 8002eae:	2800      	cmp	r0, #0
 8002eb0:	d004      	beq.n	8002ebc <SX1276ReadRssi+0x10>
 8002eb2:	2801      	cmp	r0, #1
 8002eb4:	d00a      	beq.n	8002ecc <SX1276ReadRssi+0x20>
        rssi = -1;
 8002eb6:	2001      	movs	r0, #1
 8002eb8:	4240      	negs	r0, r0
 8002eba:	e006      	b.n	8002eca <SX1276ReadRssi+0x1e>
        rssi = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 8002ebc:	2011      	movs	r0, #17
 8002ebe:	f7ff fea7 	bl	8002c10 <SX1276Read>
 8002ec2:	0840      	lsrs	r0, r0, #1
 8002ec4:	b2c0      	uxtb	r0, r0
 8002ec6:	4240      	negs	r0, r0
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
 8002ec8:	b200      	sxth	r0, r0
}
 8002eca:	bd10      	pop	{r4, pc}
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8002ecc:	4a06      	ldr	r2, [pc, #24]	; (8002ee8 <SX1276ReadRssi+0x3c>)
 8002ece:	4b07      	ldr	r3, [pc, #28]	; (8002eec <SX1276ReadRssi+0x40>)
 8002ed0:	6892      	ldr	r2, [r2, #8]
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
 8002ed2:	201b      	movs	r0, #27
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d903      	bls.n	8002ee0 <SX1276ReadRssi+0x34>
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
 8002ed8:	f7ff fe9a 	bl	8002c10 <SX1276Read>
 8002edc:	389d      	subs	r0, #157	; 0x9d
 8002ede:	e7f3      	b.n	8002ec8 <SX1276ReadRssi+0x1c>
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
 8002ee0:	f7ff fe96 	bl	8002c10 <SX1276Read>
 8002ee4:	38a4      	subs	r0, #164	; 0xa4
 8002ee6:	e7ef      	b.n	8002ec8 <SX1276ReadRssi+0x1c>
 8002ee8:	200015d8 	.word	0x200015d8
 8002eec:	1f4add40 	.word	0x1f4add40

08002ef0 <SX1276SetOpMode.part.2>:
void SX1276SetOpMode( uint8_t opMode )
 8002ef0:	b510      	push	{r4, lr}
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 8002ef2:	2001      	movs	r0, #1
 8002ef4:	f7ff fe8c 	bl	8002c10 <SX1276Read>
 8002ef8:	21f8      	movs	r1, #248	; 0xf8
 8002efa:	4001      	ands	r1, r0
 8002efc:	2001      	movs	r0, #1
 8002efe:	f7ff fe34 	bl	8002b6a <SX1276Write>
      LoRaBoardCallbacks->SX1276BoardSetAntSwLowPower( true );
 8002f02:	4c05      	ldr	r4, [pc, #20]	; (8002f18 <SX1276SetOpMode.part.2+0x28>)
 8002f04:	2001      	movs	r0, #1
 8002f06:	6823      	ldr	r3, [r4, #0]
 8002f08:	691b      	ldr	r3, [r3, #16]
 8002f0a:	4798      	blx	r3
      LoRaBoardCallbacks->SX1276BoardSetXO( RESET ); 
 8002f0c:	6823      	ldr	r3, [r4, #0]
 8002f0e:	2000      	movs	r0, #0
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4798      	blx	r3
}
 8002f14:	bd10      	pop	{r4, pc}
 8002f16:	46c0      	nop			; (mov r8, r8)
 8002f18:	200002d0 	.word	0x200002d0

08002f1c <SX1276SetSleep>:
{
 8002f1c:	b510      	push	{r4, lr}
    TimerStop( &RxTimeoutTimer );
 8002f1e:	480a      	ldr	r0, [pc, #40]	; (8002f48 <SX1276SetSleep+0x2c>)
 8002f20:	f009 ff68 	bl	800cdf4 <TimerStop>
    TimerStop( &TxTimeoutTimer );
 8002f24:	4809      	ldr	r0, [pc, #36]	; (8002f4c <SX1276SetSleep+0x30>)
 8002f26:	f009 ff65 	bl	800cdf4 <TimerStop>
    TimerStop( &RxTimeoutSyncWord );
 8002f2a:	4809      	ldr	r0, [pc, #36]	; (8002f50 <SX1276SetSleep+0x34>)
 8002f2c:	f009 ff62 	bl	800cdf4 <TimerStop>
 8002f30:	f7ff ffde 	bl	8002ef0 <SX1276SetOpMode.part.2>
    LoRaBoardCallbacks->SX1276BoardSetXO( RESET );
 8002f34:	4b07      	ldr	r3, [pc, #28]	; (8002f54 <SX1276SetSleep+0x38>)
 8002f36:	2000      	movs	r0, #0
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4798      	blx	r3
    SX1276.Settings.State = RF_IDLE;
 8002f3e:	2200      	movs	r2, #0
 8002f40:	4b05      	ldr	r3, [pc, #20]	; (8002f58 <SX1276SetSleep+0x3c>)
 8002f42:	711a      	strb	r2, [r3, #4]
}
 8002f44:	bd10      	pop	{r4, pc}
 8002f46:	46c0      	nop			; (mov r8, r8)
 8002f48:	20001640 	.word	0x20001640
 8002f4c:	200015a8 	.word	0x200015a8
 8002f50:	200015c0 	.word	0x200015c0
 8002f54:	200002d0 	.word	0x200002d0
 8002f58:	200015d8 	.word	0x200015d8

08002f5c <SX1276SetOpMode>:
{
 8002f5c:	b570      	push	{r4, r5, r6, lr}
 8002f5e:	1e04      	subs	r4, r0, #0
    if( opMode == RF_OPMODE_SLEEP )
 8002f60:	d102      	bne.n	8002f68 <SX1276SetOpMode+0xc>
 8002f62:	f7ff ffc5 	bl	8002ef0 <SX1276SetOpMode.part.2>
}
 8002f66:	bd70      	pop	{r4, r5, r6, pc}
      LoRaBoardCallbacks->SX1276BoardSetXO( SET ); 
 8002f68:	4d0c      	ldr	r5, [pc, #48]	; (8002f9c <SX1276SetOpMode+0x40>)
 8002f6a:	2001      	movs	r0, #1
 8002f6c:	682b      	ldr	r3, [r5, #0]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4798      	blx	r3
      LoRaBoardCallbacks->SX1276BoardSetAntSwLowPower( false );
 8002f72:	682b      	ldr	r3, [r5, #0]
 8002f74:	2000      	movs	r0, #0
 8002f76:	691b      	ldr	r3, [r3, #16]
 8002f78:	4798      	blx	r3
      LoRaBoardCallbacks->SX1276BoardSetAntSw( opMode );
 8002f7a:	682b      	ldr	r3, [r5, #0]
 8002f7c:	0020      	movs	r0, r4
 8002f7e:	695b      	ldr	r3, [r3, #20]
 8002f80:	4798      	blx	r3
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 8002f82:	2001      	movs	r0, #1
 8002f84:	f7ff fe44 	bl	8002c10 <SX1276Read>
 8002f88:	2307      	movs	r3, #7
 8002f8a:	0001      	movs	r1, r0
 8002f8c:	4399      	bics	r1, r3
 8002f8e:	4321      	orrs	r1, r4
 8002f90:	b2c9      	uxtb	r1, r1
 8002f92:	2001      	movs	r0, #1
 8002f94:	f7ff fde9 	bl	8002b6a <SX1276Write>
}
 8002f98:	e7e5      	b.n	8002f66 <SX1276SetOpMode+0xa>
 8002f9a:	46c0      	nop			; (mov r8, r8)
 8002f9c:	200002d0 	.word	0x200002d0

08002fa0 <SX1276SetStby>:
{
 8002fa0:	b510      	push	{r4, lr}
    TimerStop( &RxTimeoutTimer );
 8002fa2:	4808      	ldr	r0, [pc, #32]	; (8002fc4 <SX1276SetStby+0x24>)
 8002fa4:	f009 ff26 	bl	800cdf4 <TimerStop>
    TimerStop( &TxTimeoutTimer );
 8002fa8:	4807      	ldr	r0, [pc, #28]	; (8002fc8 <SX1276SetStby+0x28>)
 8002faa:	f009 ff23 	bl	800cdf4 <TimerStop>
    TimerStop( &RxTimeoutSyncWord );
 8002fae:	4807      	ldr	r0, [pc, #28]	; (8002fcc <SX1276SetStby+0x2c>)
 8002fb0:	f009 ff20 	bl	800cdf4 <TimerStop>
    SX1276SetOpMode( RF_OPMODE_STANDBY );
 8002fb4:	2001      	movs	r0, #1
 8002fb6:	f7ff ffd1 	bl	8002f5c <SX1276SetOpMode>
    SX1276.Settings.State = RF_IDLE;
 8002fba:	2200      	movs	r2, #0
 8002fbc:	4b04      	ldr	r3, [pc, #16]	; (8002fd0 <SX1276SetStby+0x30>)
 8002fbe:	711a      	strb	r2, [r3, #4]
}
 8002fc0:	bd10      	pop	{r4, pc}
 8002fc2:	46c0      	nop			; (mov r8, r8)
 8002fc4:	20001640 	.word	0x20001640
 8002fc8:	200015a8 	.word	0x200015a8
 8002fcc:	200015c0 	.word	0x200015c0
 8002fd0:	200015d8 	.word	0x200015d8

08002fd4 <SX1276SetRx>:
{
 8002fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fd6:	0006      	movs	r6, r0
    TimerStop( &TxTimeoutTimer );
 8002fd8:	4876      	ldr	r0, [pc, #472]	; (80031b4 <SX1276SetRx+0x1e0>)
 8002fda:	f009 ff0b 	bl	800cdf4 <TimerStop>
    switch( SX1276.Settings.Modem )
 8002fde:	4c76      	ldr	r4, [pc, #472]	; (80031b8 <SX1276SetRx+0x1e4>)
 8002fe0:	7965      	ldrb	r5, [r4, #5]
 8002fe2:	2d00      	cmp	r5, #0
 8002fe4:	d003      	beq.n	8002fee <SX1276SetRx+0x1a>
 8002fe6:	2d01      	cmp	r5, #1
 8002fe8:	d048      	beq.n	800307c <SX1276SetRx+0xa8>
    bool rxContinuous = false;
 8002fea:	2700      	movs	r7, #0
 8002fec:	e024      	b.n	8003038 <SX1276SetRx+0x64>
            rxContinuous = SX1276.Settings.Fsk.RxContinuous;
 8002fee:	1de3      	adds	r3, r4, #7
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8002ff0:	2040      	movs	r0, #64	; 0x40
            rxContinuous = SX1276.Settings.Fsk.RxContinuous;
 8002ff2:	7fdf      	ldrb	r7, [r3, #31]
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8002ff4:	f7ff fe0c 	bl	8002c10 <SX1276Read>
                                                                            RF_DIOMAPPING1_DIO0_00 |
 8002ff8:	2103      	movs	r1, #3
 8002ffa:	4008      	ands	r0, r1
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8002ffc:	3109      	adds	r1, #9
 8002ffe:	4301      	orrs	r1, r0
 8003000:	2040      	movs	r0, #64	; 0x40
 8003002:	f7ff fdb2 	bl	8002b6a <SX1276Write>
            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 8003006:	2041      	movs	r0, #65	; 0x41
 8003008:	f7ff fe02 	bl	8002c10 <SX1276Read>
 800300c:	213f      	movs	r1, #63	; 0x3f
 800300e:	4249      	negs	r1, r1
 8003010:	4301      	orrs	r1, r0
 8003012:	b2c9      	uxtb	r1, r1
 8003014:	2041      	movs	r0, #65	; 0x41
 8003016:	f7ff fda8 	bl	8002b6a <SX1276Write>
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 800301a:	2035      	movs	r0, #53	; 0x35
 800301c:	f7ff fdf8 	bl	8002c10 <SX1276Read>
 8003020:	233f      	movs	r3, #63	; 0x3f
 8003022:	4018      	ands	r0, r3
 8003024:	0023      	movs	r3, r4
 8003026:	333e      	adds	r3, #62	; 0x3e
 8003028:	7018      	strb	r0, [r3, #0]
            SX1276Write( REG_RXCONFIG, RF_RXCONFIG_AFCAUTO_ON | RF_RXCONFIG_AGCAUTO_ON | RF_RXCONFIG_RXTRIGER_PREAMBLEDETECT );
 800302a:	211e      	movs	r1, #30
 800302c:	200d      	movs	r0, #13
 800302e:	f7ff fd9c 	bl	8002b6a <SX1276Write>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8003032:	8625      	strh	r5, [r4, #48]	; 0x30
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8003034:	87a5      	strh	r5, [r4, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = 0;
 8003036:	8765      	strh	r5, [r4, #58]	; 0x3a
    memset( RxTxBuffer, 0, ( size_t )RX_BUFFER_SIZE );
 8003038:	2280      	movs	r2, #128	; 0x80
 800303a:	2100      	movs	r1, #0
 800303c:	0052      	lsls	r2, r2, #1
 800303e:	485f      	ldr	r0, [pc, #380]	; (80031bc <SX1276SetRx+0x1e8>)
 8003040:	f00b fcff 	bl	800ea42 <memset>
    SX1276.Settings.State = RF_RX_RUNNING;
 8003044:	2301      	movs	r3, #1
 8003046:	7123      	strb	r3, [r4, #4]
    if( timeout != 0 )
 8003048:	2e00      	cmp	r6, #0
 800304a:	d007      	beq.n	800305c <SX1276SetRx+0x88>
        TimerSetValue( &RxTimeoutTimer, timeout );
 800304c:	4d5c      	ldr	r5, [pc, #368]	; (80031c0 <SX1276SetRx+0x1ec>)
 800304e:	0031      	movs	r1, r6
 8003050:	0028      	movs	r0, r5
 8003052:	f009 ff03 	bl	800ce5c <TimerSetValue>
        TimerStart( &RxTimeoutTimer );
 8003056:	0028      	movs	r0, r5
 8003058:	f009 fe50 	bl	800ccfc <TimerStart>
    if( SX1276.Settings.Modem == MODEM_FSK )
 800305c:	7963      	ldrb	r3, [r4, #5]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d000      	beq.n	8003064 <SX1276SetRx+0x90>
 8003062:	e0a0      	b.n	80031a6 <SX1276SetRx+0x1d2>
        SX1276SetOpMode( RF_OPMODE_RECEIVER );
 8003064:	2005      	movs	r0, #5
 8003066:	f7ff ff79 	bl	8002f5c <SX1276SetOpMode>
        TimerSetValue( &RxTimeoutSyncWord, SX1276.Settings.Fsk.RxSingleTimeout );
 800306a:	4d56      	ldr	r5, [pc, #344]	; (80031c4 <SX1276SetRx+0x1f0>)
 800306c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800306e:	0028      	movs	r0, r5
 8003070:	f009 fef4 	bl	800ce5c <TimerSetValue>
        TimerStart( &RxTimeoutSyncWord );
 8003074:	0028      	movs	r0, r5
 8003076:	f009 fe41 	bl	800ccfc <TimerStart>
}
 800307a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if( SX1276.Settings.LoRa.IqInverted == true )
 800307c:	0023      	movs	r3, r4
 800307e:	3355      	adds	r3, #85	; 0x55
 8003080:	781b      	ldrb	r3, [r3, #0]
 8003082:	2741      	movs	r7, #65	; 0x41
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
 8003084:	2033      	movs	r0, #51	; 0x33
            if( SX1276.Settings.LoRa.IqInverted == true )
 8003086:	2b00      	cmp	r3, #0
 8003088:	d023      	beq.n	80030d2 <SX1276SetRx+0xfe>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
 800308a:	f7ff fdc1 	bl	8002c10 <SX1276Read>
 800308e:	4338      	orrs	r0, r7
 8003090:	b2c1      	uxtb	r1, r0
 8003092:	2033      	movs	r0, #51	; 0x33
 8003094:	f7ff fd69 	bl	8002b6a <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 8003098:	2119      	movs	r1, #25
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 800309a:	203b      	movs	r0, #59	; 0x3b
 800309c:	f7ff fd65 	bl	8002b6a <SX1276Write>
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
 80030a0:	6c63      	ldr	r3, [r4, #68]	; 0x44
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
 80030a2:	2031      	movs	r0, #49	; 0x31
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
 80030a4:	2b08      	cmp	r3, #8
 80030a6:	d86d      	bhi.n	8003184 <SX1276SetRx+0x1b0>
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
 80030a8:	f7ff fdb2 	bl	8002c10 <SX1276Read>
 80030ac:	217f      	movs	r1, #127	; 0x7f
 80030ae:	4001      	ands	r1, r0
 80030b0:	2031      	movs	r0, #49	; 0x31
 80030b2:	f7ff fd5a 	bl	8002b6a <SX1276Write>
                SX1276Write( REG_LR_IFFREQ2, 0x00 );
 80030b6:	2030      	movs	r0, #48	; 0x30
 80030b8:	2100      	movs	r1, #0
 80030ba:	f7ff fd56 	bl	8002b6a <SX1276Write>
                switch( SX1276.Settings.LoRa.Bandwidth )
 80030be:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80030c0:	2808      	cmp	r0, #8
 80030c2:	d81a      	bhi.n	80030fa <SX1276SetRx+0x126>
 80030c4:	f7fd f832 	bl	800012c <__gnu_thumb1_case_uqi>
 80030c8:	443d3610 	.word	0x443d3610
 80030cc:	5959524b 	.word	0x5959524b
 80030d0:	59          	.byte	0x59
 80030d1:	00          	.byte	0x00
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 80030d2:	f7ff fd9d 	bl	8002c10 <SX1276Read>
 80030d6:	0001      	movs	r1, r0
 80030d8:	43b9      	bics	r1, r7
 80030da:	4329      	orrs	r1, r5
 80030dc:	b2c9      	uxtb	r1, r1
 80030de:	2033      	movs	r0, #51	; 0x33
 80030e0:	f7ff fd43 	bl	8002b6a <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 80030e4:	211d      	movs	r1, #29
 80030e6:	e7d8      	b.n	800309a <SX1276SetRx+0xc6>
                    SX1276Write( REG_LR_IFFREQ1, 0x48 );
 80030e8:	2148      	movs	r1, #72	; 0x48
 80030ea:	202f      	movs	r0, #47	; 0x2f
 80030ec:	f7ff fd3d 	bl	8002b6a <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 7810 );
 80030f0:	68a3      	ldr	r3, [r4, #8]
 80030f2:	4a35      	ldr	r2, [pc, #212]	; (80031c8 <SX1276SetRx+0x1f4>)
                    SX1276SetChannel(SX1276.Settings.Channel + 41670 );
 80030f4:	1898      	adds	r0, r3, r2
 80030f6:	f7ff fd41 	bl	8002b7c <SX1276SetChannel>
            rxContinuous = SX1276.Settings.LoRa.RxContinuous;
 80030fa:	0023      	movs	r3, r4
 80030fc:	3356      	adds	r3, #86	; 0x56
 80030fe:	781f      	ldrb	r7, [r3, #0]
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8003100:	0023      	movs	r3, r4
 8003102:	3353      	adds	r3, #83	; 0x53
 8003104:	781b      	ldrb	r3, [r3, #0]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d044      	beq.n	8003194 <SX1276SetRx+0x1c0>
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 800310a:	211d      	movs	r1, #29
 800310c:	2011      	movs	r0, #17
 800310e:	f7ff fd2c 	bl	8002b6a <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK  ) | RFLR_DIOMAPPING1_DIO0_00 | RFLR_DIOMAPPING1_DIO2_00 );
 8003112:	2040      	movs	r0, #64	; 0x40
 8003114:	f7ff fd7c 	bl	8002c10 <SX1276Read>
 8003118:	2133      	movs	r1, #51	; 0x33
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 800311a:	4001      	ands	r1, r0
 800311c:	2040      	movs	r0, #64	; 0x40
 800311e:	f7ff fd24 	bl	8002b6a <SX1276Write>
            SX1276Write( REG_LR_FIFORXBASEADDR, 0 );
 8003122:	2100      	movs	r1, #0
 8003124:	200f      	movs	r0, #15
 8003126:	f7ff fd20 	bl	8002b6a <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 800312a:	2100      	movs	r1, #0
 800312c:	200d      	movs	r0, #13
 800312e:	f7ff fd1c 	bl	8002b6a <SX1276Write>
        break;
 8003132:	e781      	b.n	8003038 <SX1276SetRx+0x64>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8003134:	2144      	movs	r1, #68	; 0x44
 8003136:	202f      	movs	r0, #47	; 0x2f
 8003138:	f7ff fd17 	bl	8002b6a <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 10420 );
 800313c:	68a3      	ldr	r3, [r4, #8]
 800313e:	4a23      	ldr	r2, [pc, #140]	; (80031cc <SX1276SetRx+0x1f8>)
 8003140:	e7d8      	b.n	80030f4 <SX1276SetRx+0x120>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8003142:	2144      	movs	r1, #68	; 0x44
 8003144:	202f      	movs	r0, #47	; 0x2f
 8003146:	f7ff fd10 	bl	8002b6a <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 15620 );
 800314a:	68a3      	ldr	r3, [r4, #8]
 800314c:	4a20      	ldr	r2, [pc, #128]	; (80031d0 <SX1276SetRx+0x1fc>)
 800314e:	e7d1      	b.n	80030f4 <SX1276SetRx+0x120>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8003150:	2144      	movs	r1, #68	; 0x44
 8003152:	202f      	movs	r0, #47	; 0x2f
 8003154:	f7ff fd09 	bl	8002b6a <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 20830 );
 8003158:	68a3      	ldr	r3, [r4, #8]
 800315a:	4a1e      	ldr	r2, [pc, #120]	; (80031d4 <SX1276SetRx+0x200>)
 800315c:	e7ca      	b.n	80030f4 <SX1276SetRx+0x120>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 800315e:	2144      	movs	r1, #68	; 0x44
 8003160:	202f      	movs	r0, #47	; 0x2f
 8003162:	f7ff fd02 	bl	8002b6a <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 31250 );
 8003166:	68a3      	ldr	r3, [r4, #8]
 8003168:	4a1b      	ldr	r2, [pc, #108]	; (80031d8 <SX1276SetRx+0x204>)
 800316a:	e7c3      	b.n	80030f4 <SX1276SetRx+0x120>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 800316c:	2144      	movs	r1, #68	; 0x44
 800316e:	202f      	movs	r0, #47	; 0x2f
 8003170:	f7ff fcfb 	bl	8002b6a <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 41670 );
 8003174:	68a3      	ldr	r3, [r4, #8]
 8003176:	4a19      	ldr	r2, [pc, #100]	; (80031dc <SX1276SetRx+0x208>)
 8003178:	e7bc      	b.n	80030f4 <SX1276SetRx+0x120>
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 800317a:	2140      	movs	r1, #64	; 0x40
 800317c:	202f      	movs	r0, #47	; 0x2f
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) | 0x80 );
 800317e:	f7ff fcf4 	bl	8002b6a <SX1276Write>
 8003182:	e7ba      	b.n	80030fa <SX1276SetRx+0x126>
 8003184:	f7ff fd44 	bl	8002c10 <SX1276Read>
 8003188:	2180      	movs	r1, #128	; 0x80
 800318a:	4249      	negs	r1, r1
 800318c:	4301      	orrs	r1, r0
 800318e:	b2c9      	uxtb	r1, r1
 8003190:	2031      	movs	r0, #49	; 0x31
 8003192:	e7f4      	b.n	800317e <SX1276SetRx+0x1aa>
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 8003194:	211f      	movs	r1, #31
 8003196:	2011      	movs	r0, #17
 8003198:	f7ff fce7 	bl	8002b6a <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 800319c:	2040      	movs	r0, #64	; 0x40
 800319e:	f7ff fd37 	bl	8002c10 <SX1276Read>
 80031a2:	213f      	movs	r1, #63	; 0x3f
 80031a4:	e7b9      	b.n	800311a <SX1276SetRx+0x146>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER );
 80031a6:	2005      	movs	r0, #5
        if( rxContinuous == true )
 80031a8:	2f00      	cmp	r7, #0
 80031aa:	d100      	bne.n	80031ae <SX1276SetRx+0x1da>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
 80031ac:	2006      	movs	r0, #6
 80031ae:	f7ff fed5 	bl	8002f5c <SX1276SetOpMode>
}
 80031b2:	e762      	b.n	800307a <SX1276SetRx+0xa6>
 80031b4:	200015a8 	.word	0x200015a8
 80031b8:	200015d8 	.word	0x200015d8
 80031bc:	200002d8 	.word	0x200002d8
 80031c0:	20001640 	.word	0x20001640
 80031c4:	200015c0 	.word	0x200015c0
 80031c8:	00001e82 	.word	0x00001e82
 80031cc:	000028b4 	.word	0x000028b4
 80031d0:	00003d04 	.word	0x00003d04
 80031d4:	0000515e 	.word	0x0000515e
 80031d8:	00007a12 	.word	0x00007a12
 80031dc:	0000a2c6 	.word	0x0000a2c6

080031e0 <SX1276SetTx>:
{
 80031e0:	b570      	push	{r4, r5, r6, lr}
 80031e2:	0004      	movs	r4, r0
    TimerStop( &RxTimeoutTimer );
 80031e4:	4826      	ldr	r0, [pc, #152]	; (8003280 <SX1276SetTx+0xa0>)
 80031e6:	f009 fe05 	bl	800cdf4 <TimerStop>
    TimerSetValue( &TxTimeoutTimer, timeout );
 80031ea:	4d26      	ldr	r5, [pc, #152]	; (8003284 <SX1276SetTx+0xa4>)
 80031ec:	0021      	movs	r1, r4
 80031ee:	0028      	movs	r0, r5
 80031f0:	f009 fe34 	bl	800ce5c <TimerSetValue>
    switch( SX1276.Settings.Modem )
 80031f4:	4c24      	ldr	r4, [pc, #144]	; (8003288 <SX1276SetTx+0xa8>)
 80031f6:	7963      	ldrb	r3, [r4, #5]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d00a      	beq.n	8003212 <SX1276SetTx+0x32>
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d023      	beq.n	8003248 <SX1276SetTx+0x68>
    SX1276.Settings.State = RF_TX_RUNNING;
 8003200:	2302      	movs	r3, #2
    TimerStart( &TxTimeoutTimer );
 8003202:	0028      	movs	r0, r5
    SX1276.Settings.State = RF_TX_RUNNING;
 8003204:	7123      	strb	r3, [r4, #4]
    TimerStart( &TxTimeoutTimer );
 8003206:	f009 fd79 	bl	800ccfc <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 800320a:	2003      	movs	r0, #3
 800320c:	f7ff fea6 	bl	8002f5c <SX1276SetOpMode>
}
 8003210:	bd70      	pop	{r4, r5, r6, pc}
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8003212:	2040      	movs	r0, #64	; 0x40
 8003214:	f7ff fcfc 	bl	8002c10 <SX1276Read>
                                                                            RF_DIOMAPPING1_DIO1_MASK &
 8003218:	2103      	movs	r1, #3
 800321a:	4008      	ands	r0, r1
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 800321c:	310d      	adds	r1, #13
 800321e:	4301      	orrs	r1, r0
 8003220:	2040      	movs	r0, #64	; 0x40
 8003222:	f7ff fca2 	bl	8002b6a <SX1276Write>
            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 8003226:	2041      	movs	r0, #65	; 0x41
 8003228:	f7ff fcf2 	bl	8002c10 <SX1276Read>
 800322c:	213e      	movs	r1, #62	; 0x3e
 800322e:	4001      	ands	r1, r0
 8003230:	2041      	movs	r0, #65	; 0x41
 8003232:	f7ff fc9a 	bl	8002b6a <SX1276Write>
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 8003236:	2035      	movs	r0, #53	; 0x35
 8003238:	f7ff fcea 	bl	8002c10 <SX1276Read>
 800323c:	233f      	movs	r3, #63	; 0x3f
 800323e:	4018      	ands	r0, r3
 8003240:	0023      	movs	r3, r4
 8003242:	333e      	adds	r3, #62	; 0x3e
 8003244:	7018      	strb	r0, [r3, #0]
        break;
 8003246:	e7db      	b.n	8003200 <SX1276SetTx+0x20>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8003248:	0023      	movs	r3, r4
 800324a:	3353      	adds	r3, #83	; 0x53
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d00d      	beq.n	800326e <SX1276SetTx+0x8e>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8003252:	21f5      	movs	r1, #245	; 0xf5
 8003254:	2011      	movs	r0, #17
 8003256:	f7ff fc88 	bl	8002b6a <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK ) | RFLR_DIOMAPPING1_DIO0_01 | RFLR_DIOMAPPING1_DIO2_00 );
 800325a:	2040      	movs	r0, #64	; 0x40
 800325c:	f7ff fcd8 	bl	8002c10 <SX1276Read>
 8003260:	2133      	movs	r1, #51	; 0x33
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 8003262:	4001      	ands	r1, r0
 8003264:	2040      	movs	r0, #64	; 0x40
 8003266:	4301      	orrs	r1, r0
 8003268:	f7ff fc7f 	bl	8002b6a <SX1276Write>
 800326c:	e7c8      	b.n	8003200 <SX1276SetTx+0x20>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 800326e:	21f7      	movs	r1, #247	; 0xf7
 8003270:	2011      	movs	r0, #17
 8003272:	f7ff fc7a 	bl	8002b6a <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 8003276:	2040      	movs	r0, #64	; 0x40
 8003278:	f7ff fcca 	bl	8002c10 <SX1276Read>
 800327c:	213f      	movs	r1, #63	; 0x3f
 800327e:	e7f0      	b.n	8003262 <SX1276SetTx+0x82>
 8003280:	20001640 	.word	0x20001640
 8003284:	200015a8 	.word	0x200015a8
 8003288:	200015d8 	.word	0x200015d8

0800328c <SX1276StartCad>:
{
 800328c:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.Modem )
 800328e:	4c0b      	ldr	r4, [pc, #44]	; (80032bc <SX1276StartCad+0x30>)
 8003290:	7963      	ldrb	r3, [r4, #5]
 8003292:	2b01      	cmp	r3, #1
 8003294:	d110      	bne.n	80032b8 <SX1276StartCad+0x2c>
            SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8003296:	21fa      	movs	r1, #250	; 0xfa
 8003298:	2011      	movs	r0, #17
 800329a:	f7ff fc66 	bl	8002b6a <SX1276Write>
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO3_MASK ) | RFLR_DIOMAPPING1_DIO3_00 );
 800329e:	2040      	movs	r0, #64	; 0x40
 80032a0:	f7ff fcb6 	bl	8002c10 <SX1276Read>
 80032a4:	2503      	movs	r5, #3
 80032a6:	43a8      	bics	r0, r5
 80032a8:	b2c1      	uxtb	r1, r0
 80032aa:	2040      	movs	r0, #64	; 0x40
 80032ac:	f7ff fc5d 	bl	8002b6a <SX1276Write>
            SX1276SetOpMode( RFLR_OPMODE_CAD );
 80032b0:	2007      	movs	r0, #7
            SX1276.Settings.State = RF_CAD;
 80032b2:	7125      	strb	r5, [r4, #4]
            SX1276SetOpMode( RFLR_OPMODE_CAD );
 80032b4:	f7ff fe52 	bl	8002f5c <SX1276SetOpMode>
}
 80032b8:	bd70      	pop	{r4, r5, r6, pc}
 80032ba:	46c0      	nop			; (mov r8, r8)
 80032bc:	200015d8 	.word	0x200015d8

080032c0 <SX1276SetModem>:
{
 80032c0:	b510      	push	{r4, lr}
 80032c2:	0004      	movs	r4, r0
    if( ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_ON ) != 0 )
 80032c4:	2001      	movs	r0, #1
 80032c6:	f7ff fca3 	bl	8002c10 <SX1276Read>
 80032ca:	4b19      	ldr	r3, [pc, #100]	; (8003330 <SX1276SetModem+0x70>)
 80032cc:	0602      	lsls	r2, r0, #24
 80032ce:	d51a      	bpl.n	8003306 <SX1276SetModem+0x46>
        SX1276.Settings.Modem = MODEM_LORA;
 80032d0:	2201      	movs	r2, #1
        SX1276.Settings.Modem = MODEM_FSK;
 80032d2:	715a      	strb	r2, [r3, #5]
    if( SX1276.Settings.Modem == modem )
 80032d4:	795a      	ldrb	r2, [r3, #5]
 80032d6:	42a2      	cmp	r2, r4
 80032d8:	d014      	beq.n	8003304 <SX1276SetModem+0x44>
    SX1276.Settings.Modem = modem;
 80032da:	715c      	strb	r4, [r3, #5]
    switch( SX1276.Settings.Modem )
 80032dc:	2c01      	cmp	r4, #1
 80032de:	d014      	beq.n	800330a <SX1276SetModem+0x4a>
 80032e0:	f7ff fe06 	bl	8002ef0 <SX1276SetOpMode.part.2>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_OFF );
 80032e4:	2001      	movs	r0, #1
 80032e6:	f7ff fc93 	bl	8002c10 <SX1276Read>
 80032ea:	217f      	movs	r1, #127	; 0x7f
 80032ec:	4001      	ands	r1, r0
 80032ee:	2001      	movs	r0, #1
 80032f0:	f7ff fc3b 	bl	8002b6a <SX1276Write>
        SX1276Write( REG_DIOMAPPING1, 0x00 );
 80032f4:	2100      	movs	r1, #0
 80032f6:	2040      	movs	r0, #64	; 0x40
 80032f8:	f7ff fc37 	bl	8002b6a <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x30 ); // DIO5=ModeReady
 80032fc:	2130      	movs	r1, #48	; 0x30
        SX1276Write( REG_DIOMAPPING2, 0x00 );
 80032fe:	2041      	movs	r0, #65	; 0x41
 8003300:	f7ff fc33 	bl	8002b6a <SX1276Write>
}
 8003304:	bd10      	pop	{r4, pc}
        SX1276.Settings.Modem = MODEM_FSK;
 8003306:	2200      	movs	r2, #0
 8003308:	e7e3      	b.n	80032d2 <SX1276SetModem+0x12>
 800330a:	f7ff fdf1 	bl	8002ef0 <SX1276SetOpMode.part.2>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_ON );
 800330e:	0020      	movs	r0, r4
 8003310:	f7ff fc7e 	bl	8002c10 <SX1276Read>
 8003314:	2180      	movs	r1, #128	; 0x80
 8003316:	4249      	negs	r1, r1
 8003318:	4301      	orrs	r1, r0
 800331a:	b2c9      	uxtb	r1, r1
 800331c:	0020      	movs	r0, r4
 800331e:	f7ff fc24 	bl	8002b6a <SX1276Write>
        SX1276Write( REG_DIOMAPPING1, 0x00 );
 8003322:	2100      	movs	r1, #0
 8003324:	2040      	movs	r0, #64	; 0x40
 8003326:	f7ff fc20 	bl	8002b6a <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x00 );
 800332a:	2100      	movs	r1, #0
 800332c:	e7e7      	b.n	80032fe <SX1276SetModem+0x3e>
 800332e:	46c0      	nop			; (mov r8, r8)
 8003330:	200015d8 	.word	0x200015d8

08003334 <SX1276Init>:
{
 8003334:	b570      	push	{r4, r5, r6, lr}
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 8003336:	4c1b      	ldr	r4, [pc, #108]	; (80033a4 <SX1276Init+0x70>)
    RadioEvents = events;
 8003338:	4d1b      	ldr	r5, [pc, #108]	; (80033a8 <SX1276Init+0x74>)
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 800333a:	0021      	movs	r1, r4
    RadioEvents = events;
 800333c:	6068      	str	r0, [r5, #4]
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 800333e:	481b      	ldr	r0, [pc, #108]	; (80033ac <SX1276Init+0x78>)
 8003340:	f009 fcd2 	bl	800cce8 <TimerInit>
    TimerInit( &RxTimeoutTimer, SX1276OnTimeoutIrq );
 8003344:	0021      	movs	r1, r4
 8003346:	481a      	ldr	r0, [pc, #104]	; (80033b0 <SX1276Init+0x7c>)
 8003348:	f009 fcce 	bl	800cce8 <TimerInit>
    TimerInit( &RxTimeoutSyncWord, SX1276OnTimeoutIrq );
 800334c:	0021      	movs	r1, r4
 800334e:	4819      	ldr	r0, [pc, #100]	; (80033b4 <SX1276Init+0x80>)
 8003350:	f009 fcca 	bl	800cce8 <TimerInit>
    LoRaBoardCallbacks->SX1276BoardSetXO( SET );
 8003354:	682b      	ldr	r3, [r5, #0]
 8003356:	2001      	movs	r0, #1
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4798      	blx	r3
    SX1276Reset( );
 800335c:	f7ff fbbe 	bl	8002adc <SX1276Reset>
    RxChainCalibration( );
 8003360:	f7ff fc60 	bl	8002c24 <RxChainCalibration>
 8003364:	f7ff fdc4 	bl	8002ef0 <SX1276SetOpMode.part.2>
    LoRaBoardCallbacks->SX1276BoardIoIrqInit( DioIrq );
 8003368:	682b      	ldr	r3, [r5, #0]
 800336a:	4813      	ldr	r0, [pc, #76]	; (80033b8 <SX1276Init+0x84>)
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	4798      	blx	r3
 8003370:	4e12      	ldr	r6, [pc, #72]	; (80033bc <SX1276Init+0x88>)
 8003372:	0034      	movs	r4, r6
 8003374:	3648      	adds	r6, #72	; 0x48
 8003376:	3418      	adds	r4, #24
        SX1276SetModem( RadioRegsInit[i].Modem );
 8003378:	7820      	ldrb	r0, [r4, #0]
 800337a:	f7ff ffa1 	bl	80032c0 <SX1276SetModem>
        SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 800337e:	78a1      	ldrb	r1, [r4, #2]
 8003380:	7860      	ldrb	r0, [r4, #1]
 8003382:	3403      	adds	r4, #3
 8003384:	f7ff fbf1 	bl	8002b6a <SX1276Write>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8003388:	42b4      	cmp	r4, r6
 800338a:	d1f5      	bne.n	8003378 <SX1276Init+0x44>
    SX1276SetModem( MODEM_FSK );
 800338c:	2000      	movs	r0, #0
 800338e:	f7ff ff97 	bl	80032c0 <SX1276SetModem>
    SX1276.Settings.State = RF_IDLE;
 8003392:	2200      	movs	r2, #0
 8003394:	4b0a      	ldr	r3, [pc, #40]	; (80033c0 <SX1276Init+0x8c>)
 8003396:	711a      	strb	r2, [r3, #4]
    return ( uint32_t )LoRaBoardCallbacks->SX1276BoardGetWakeTime( ) + RADIO_WAKEUP_TIME;// BOARD_WAKEUP_TIME;
 8003398:	682b      	ldr	r3, [r5, #0]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	4798      	blx	r3
 800339e:	3002      	adds	r0, #2
}
 80033a0:	bd70      	pop	{r4, r5, r6, pc}
 80033a2:	46c0      	nop			; (mov r8, r8)
 80033a4:	08004015 	.word	0x08004015
 80033a8:	200002d0 	.word	0x200002d0
 80033ac:	200015a8 	.word	0x200015a8
 80033b0:	20001640 	.word	0x20001640
 80033b4:	200015c0 	.word	0x200015c0
 80033b8:	2000002c 	.word	0x2000002c
 80033bc:	0800f618 	.word	0x0800f618
 80033c0:	200015d8 	.word	0x200015d8

080033c4 <SX1276IsChannelFree>:
{
 80033c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
        return false;
 80033c6:	2400      	movs	r4, #0
{
 80033c8:	9301      	str	r3, [sp, #4]
    return SX1276.Settings.State;
 80033ca:	4b13      	ldr	r3, [pc, #76]	; (8003418 <SX1276IsChannelFree+0x54>)
{
 80033cc:	0005      	movs	r5, r0
    if( SX1276GetStatus( ) != RF_IDLE )
 80033ce:	791b      	ldrb	r3, [r3, #4]
{
 80033d0:	000f      	movs	r7, r1
 80033d2:	0016      	movs	r6, r2
    if( SX1276GetStatus( ) != RF_IDLE )
 80033d4:	42a3      	cmp	r3, r4
 80033d6:	d116      	bne.n	8003406 <SX1276IsChannelFree+0x42>
    SX1276SetModem( modem );
 80033d8:	f7ff ff72 	bl	80032c0 <SX1276SetModem>
    SX1276SetChannel( freq );
 80033dc:	0038      	movs	r0, r7
 80033de:	f7ff fbcd 	bl	8002b7c <SX1276SetChannel>
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 80033e2:	2005      	movs	r0, #5
 80033e4:	f7ff fdba 	bl	8002f5c <SX1276SetOpMode>
    DelayMs( 1 );
 80033e8:	2001      	movs	r0, #1
 80033ea:	f00a ff47 	bl	800e27c <HAL_Delay>
    carrierSenseTime = TimerGetCurrentTime( );
 80033ee:	f009 fd46 	bl	800ce7e <TimerGetCurrentTime>
 80033f2:	0004      	movs	r4, r0
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 80033f4:	0020      	movs	r0, r4
 80033f6:	f009 fd48 	bl	800ce8a <TimerGetElapsedTime>
 80033fa:	9b01      	ldr	r3, [sp, #4]
 80033fc:	4298      	cmp	r0, r3
 80033fe:	d304      	bcc.n	800340a <SX1276IsChannelFree+0x46>
    bool status = true;
 8003400:	2401      	movs	r4, #1
    SX1276SetSleep( );
 8003402:	f7ff fd8b 	bl	8002f1c <SX1276SetSleep>
}
 8003406:	0020      	movs	r0, r4
 8003408:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        rssi = SX1276ReadRssi( modem );
 800340a:	0028      	movs	r0, r5
 800340c:	f7ff fd4e 	bl	8002eac <SX1276ReadRssi>
        if( rssi > rssiThresh )
 8003410:	42b0      	cmp	r0, r6
 8003412:	ddef      	ble.n	80033f4 <SX1276IsChannelFree+0x30>
            status = false;
 8003414:	2400      	movs	r4, #0
 8003416:	e7f4      	b.n	8003402 <SX1276IsChannelFree+0x3e>
 8003418:	200015d8 	.word	0x200015d8

0800341c <SX1276Random>:
{
 800341c:	b570      	push	{r4, r5, r6, lr}
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 800341e:	2400      	movs	r4, #0
    SX1276SetModem( MODEM_LORA );
 8003420:	2001      	movs	r0, #1
 8003422:	f7ff ff4d 	bl	80032c0 <SX1276SetModem>
    SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8003426:	21ff      	movs	r1, #255	; 0xff
 8003428:	2011      	movs	r0, #17
 800342a:	f7ff fb9e 	bl	8002b6a <SX1276Write>
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 800342e:	2005      	movs	r0, #5
 8003430:	f7ff fd94 	bl	8002f5c <SX1276SetOpMode>
    uint32_t rnd = 0;
 8003434:	0025      	movs	r5, r4
        DelayMs( 1 );
 8003436:	2601      	movs	r6, #1
 8003438:	0030      	movs	r0, r6
 800343a:	f00a ff1f 	bl	800e27c <HAL_Delay>
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
 800343e:	202c      	movs	r0, #44	; 0x2c
 8003440:	f7ff fbe6 	bl	8002c10 <SX1276Read>
 8003444:	4030      	ands	r0, r6
 8003446:	40a0      	lsls	r0, r4
 8003448:	3401      	adds	r4, #1
 800344a:	4305      	orrs	r5, r0
    for( i = 0; i < 32; i++ )
 800344c:	2c20      	cmp	r4, #32
 800344e:	d1f3      	bne.n	8003438 <SX1276Random+0x1c>
    SX1276SetSleep( );
 8003450:	f7ff fd64 	bl	8002f1c <SX1276SetSleep>
}
 8003454:	0028      	movs	r0, r5
 8003456:	bd70      	pop	{r4, r5, r6, pc}

08003458 <SX1276SetRxConfig>:
{
 8003458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800345a:	b08d      	sub	sp, #52	; 0x34
 800345c:	9306      	str	r3, [sp, #24]
 800345e:	ab12      	add	r3, sp, #72	; 0x48
 8003460:	0016      	movs	r6, r2
 8003462:	cb04      	ldmia	r3!, {r2}
 8003464:	0004      	movs	r4, r0
 8003466:	881b      	ldrh	r3, [r3, #0]
 8003468:	9208      	str	r2, [sp, #32]
 800346a:	9301      	str	r3, [sp, #4]
 800346c:	ab14      	add	r3, sp, #80	; 0x50
 800346e:	881b      	ldrh	r3, [r3, #0]
 8003470:	aa0c      	add	r2, sp, #48	; 0x30
 8003472:	9305      	str	r3, [sp, #20]
 8003474:	ab15      	add	r3, sp, #84	; 0x54
 8003476:	781b      	ldrb	r3, [r3, #0]
 8003478:	000d      	movs	r5, r1
 800347a:	9302      	str	r3, [sp, #8]
 800347c:	ab16      	add	r3, sp, #88	; 0x58
 800347e:	781b      	ldrb	r3, [r3, #0]
 8003480:	9303      	str	r3, [sp, #12]
 8003482:	ab17      	add	r3, sp, #92	; 0x5c
 8003484:	781b      	ldrb	r3, [r3, #0]
 8003486:	9304      	str	r3, [sp, #16]
 8003488:	ab18      	add	r3, sp, #96	; 0x60
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	930a      	str	r3, [sp, #40]	; 0x28
 800348e:	ab19      	add	r3, sp, #100	; 0x64
 8003490:	781b      	ldrb	r3, [r3, #0]
 8003492:	930b      	str	r3, [sp, #44]	; 0x2c
 8003494:	2319      	movs	r3, #25
 8003496:	189b      	adds	r3, r3, r2
 8003498:	7fdf      	ldrb	r7, [r3, #31]
 800349a:	231d      	movs	r3, #29
 800349c:	189b      	adds	r3, r3, r2
 800349e:	7fdb      	ldrb	r3, [r3, #31]
 80034a0:	9309      	str	r3, [sp, #36]	; 0x24
    SX1276SetModem( modem );
 80034a2:	f7ff ff0d 	bl	80032c0 <SX1276SetModem>
    switch( modem )
 80034a6:	2c00      	cmp	r4, #0
 80034a8:	d004      	beq.n	80034b4 <SX1276SetRxConfig+0x5c>
 80034aa:	2c01      	cmp	r4, #1
 80034ac:	d100      	bne.n	80034b0 <SX1276SetRxConfig+0x58>
 80034ae:	e084      	b.n	80035ba <SX1276SetRxConfig+0x162>
}
 80034b0:	b00d      	add	sp, #52	; 0x34
 80034b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 80034b4:	4ca8      	ldr	r4, [pc, #672]	; (8003758 <SX1276SetRxConfig+0x300>)
            SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
 80034b6:	9b08      	ldr	r3, [sp, #32]
            SX1276.Settings.Fsk.FixLen = fixLen;
 80034b8:	9a02      	ldr	r2, [sp, #8]
            SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
 80034ba:	61a3      	str	r3, [r4, #24]
            SX1276.Settings.Fsk.FixLen = fixLen;
 80034bc:	1ce3      	adds	r3, r4, #3
 80034be:	77da      	strb	r2, [r3, #31]
            SX1276.Settings.Fsk.PayloadLen = payloadLen;
 80034c0:	9a03      	ldr	r2, [sp, #12]
 80034c2:	1d23      	adds	r3, r4, #4
 80034c4:	77da      	strb	r2, [r3, #31]
            SX1276.Settings.Fsk.CrcOn = crcOn;
 80034c6:	9a04      	ldr	r2, [sp, #16]
 80034c8:	1d63      	adds	r3, r4, #5
 80034ca:	77da      	strb	r2, [r3, #31]
            SX1276.Settings.Fsk.RxContinuous = rxContinuous;
 80034cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 80034ce:	1da3      	adds	r3, r4, #6
 80034d0:	77df      	strb	r7, [r3, #31]
            SX1276.Settings.Fsk.RxContinuous = rxContinuous;
 80034d2:	1de3      	adds	r3, r4, #7
 80034d4:	77da      	strb	r2, [r3, #31]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 80034d6:	9b01      	ldr	r3, [sp, #4]
            SX1276.Settings.Fsk.Datarate = datarate;
 80034d8:	61e6      	str	r6, [r4, #28]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 80034da:	8423      	strh	r3, [r4, #32]
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 80034dc:	6165      	str	r5, [r4, #20]
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )( symbTimeout * ( ( 1.0 / ( double )datarate ) * 8.0 ) * 1000 );
 80034de:	0030      	movs	r0, r6
 80034e0:	f7ff f84a 	bl	8002578 <__aeabi_ui2d>
 80034e4:	0002      	movs	r2, r0
 80034e6:	000b      	movs	r3, r1
 80034e8:	0006      	movs	r6, r0
 80034ea:	000f      	movs	r7, r1
 80034ec:	2000      	movs	r0, #0
 80034ee:	499b      	ldr	r1, [pc, #620]	; (800375c <SX1276SetRxConfig+0x304>)
 80034f0:	f7fd fe0e 	bl	8001110 <__aeabi_ddiv>
 80034f4:	2200      	movs	r2, #0
 80034f6:	4b9a      	ldr	r3, [pc, #616]	; (8003760 <SX1276SetRxConfig+0x308>)
 80034f8:	f7fe fa14 	bl	8001924 <__aeabi_dmul>
 80034fc:	9006      	str	r0, [sp, #24]
 80034fe:	9107      	str	r1, [sp, #28]
 8003500:	9805      	ldr	r0, [sp, #20]
 8003502:	f7fe ffff 	bl	8002504 <__aeabi_i2d>
 8003506:	0002      	movs	r2, r0
 8003508:	000b      	movs	r3, r1
 800350a:	9806      	ldr	r0, [sp, #24]
 800350c:	9907      	ldr	r1, [sp, #28]
 800350e:	f7fe fa09 	bl	8001924 <__aeabi_dmul>
 8003512:	2200      	movs	r2, #0
 8003514:	4b93      	ldr	r3, [pc, #588]	; (8003764 <SX1276SetRxConfig+0x30c>)
 8003516:	f7fe fa05 	bl	8001924 <__aeabi_dmul>
 800351a:	f7fc fff9 	bl	8000510 <__aeabi_d2uiz>
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 800351e:	0032      	movs	r2, r6
 8003520:	003b      	movs	r3, r7
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )( symbTimeout * ( ( 1.0 / ( double )datarate ) * 8.0 ) * 1000 );
 8003522:	62e0      	str	r0, [r4, #44]	; 0x2c
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 8003524:	4990      	ldr	r1, [pc, #576]	; (8003768 <SX1276SetRxConfig+0x310>)
 8003526:	2000      	movs	r0, #0
 8003528:	f7fd fdf2 	bl	8001110 <__aeabi_ddiv>
 800352c:	f7fc fff0 	bl	8000510 <__aeabi_d2uiz>
 8003530:	b284      	uxth	r4, r0
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 8003532:	0a21      	lsrs	r1, r4, #8
 8003534:	2002      	movs	r0, #2
 8003536:	f7ff fb18 	bl	8002b6a <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 800353a:	b2e1      	uxtb	r1, r4
 800353c:	2003      	movs	r0, #3
 800353e:	f7ff fb14 	bl	8002b6a <SX1276Write>
            SX1276Write( REG_RXBW, GetFskBandwidthRegValue( bandwidth ) );
 8003542:	0028      	movs	r0, r5
 8003544:	f7ff fa9c 	bl	8002a80 <GetFskBandwidthRegValue>
 8003548:	0001      	movs	r1, r0
 800354a:	2012      	movs	r0, #18
 800354c:	f7ff fb0d 	bl	8002b6a <SX1276Write>
            SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( bandwidthAfc ) );
 8003550:	9808      	ldr	r0, [sp, #32]
 8003552:	f7ff fa95 	bl	8002a80 <GetFskBandwidthRegValue>
 8003556:	0001      	movs	r1, r0
 8003558:	2013      	movs	r0, #19
 800355a:	f7ff fb06 	bl	8002b6a <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 800355e:	9b01      	ldr	r3, [sp, #4]
 8003560:	2025      	movs	r0, #37	; 0x25
 8003562:	0a19      	lsrs	r1, r3, #8
 8003564:	f7ff fb01 	bl	8002b6a <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 8003568:	466b      	mov	r3, sp
 800356a:	2026      	movs	r0, #38	; 0x26
 800356c:	7919      	ldrb	r1, [r3, #4]
 800356e:	f7ff fafc 	bl	8002b6a <SX1276Write>
            if( fixLen == 1 )
 8003572:	9b02      	ldr	r3, [sp, #8]
                SX1276Write( REG_PAYLOADLENGTH, payloadLen );
 8003574:	9903      	ldr	r1, [sp, #12]
            if( fixLen == 1 )
 8003576:	2b00      	cmp	r3, #0
 8003578:	d100      	bne.n	800357c <SX1276SetRxConfig+0x124>
                SX1276Write( REG_PAYLOADLENGTH, 0xFF ); // Set payload length to the maximum
 800357a:	21ff      	movs	r1, #255	; 0xff
 800357c:	2032      	movs	r0, #50	; 0x32
 800357e:	f7ff faf4 	bl	8002b6a <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 8003582:	2030      	movs	r0, #48	; 0x30
 8003584:	f7ff fb44 	bl	8002c10 <SX1276Read>
                           RF_PACKETCONFIG1_CRC_MASK &
 8003588:	216f      	movs	r1, #111	; 0x6f
 800358a:	4008      	ands	r0, r1
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 800358c:	2100      	movs	r1, #0
 800358e:	9b02      	ldr	r3, [sp, #8]
 8003590:	428b      	cmp	r3, r1
 8003592:	d100      	bne.n	8003596 <SX1276SetRxConfig+0x13e>
 8003594:	3980      	subs	r1, #128	; 0x80
                           ( crcOn << 4 ) );
 8003596:	9b04      	ldr	r3, [sp, #16]
 8003598:	011b      	lsls	r3, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 800359a:	4318      	orrs	r0, r3
 800359c:	4301      	orrs	r1, r0
            SX1276Write( REG_PACKETCONFIG1,
 800359e:	b2c9      	uxtb	r1, r1
 80035a0:	2030      	movs	r0, #48	; 0x30
 80035a2:	f7ff fae2 	bl	8002b6a <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 80035a6:	2031      	movs	r0, #49	; 0x31
 80035a8:	f7ff fb32 	bl	8002c10 <SX1276Read>
 80035ac:	2140      	movs	r1, #64	; 0x40
 80035ae:	4301      	orrs	r1, r0
 80035b0:	2031      	movs	r0, #49	; 0x31
 80035b2:	b2c9      	uxtb	r1, r1
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 80035b4:	f7ff fad9 	bl	8002b6a <SX1276Write>
}
 80035b8:	e77a      	b.n	80034b0 <SX1276SetRxConfig+0x58>
            if( bandwidth > 2 )
 80035ba:	2d02      	cmp	r5, #2
 80035bc:	d900      	bls.n	80035c0 <SX1276SetRxConfig+0x168>
 80035be:	e7fe      	b.n	80035be <SX1276SetRxConfig+0x166>
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 80035c0:	4b65      	ldr	r3, [pc, #404]	; (8003758 <SX1276SetRxConfig+0x300>)
            SX1276.Settings.LoRa.Coderate = coderate;
 80035c2:	9906      	ldr	r1, [sp, #24]
 80035c4:	001a      	movs	r2, r3
 80035c6:	324d      	adds	r2, #77	; 0x4d
 80035c8:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 80035ca:	001a      	movs	r2, r3
 80035cc:	9901      	ldr	r1, [sp, #4]
 80035ce:	324e      	adds	r2, #78	; 0x4e
 80035d0:	8011      	strh	r1, [r2, #0]
            SX1276.Settings.LoRa.FixLen = fixLen;
 80035d2:	001a      	movs	r2, r3
 80035d4:	9902      	ldr	r1, [sp, #8]
 80035d6:	3250      	adds	r2, #80	; 0x50
 80035d8:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.PayloadLen = payloadLen;
 80035da:	001a      	movs	r2, r3
 80035dc:	9903      	ldr	r1, [sp, #12]
 80035de:	3251      	adds	r2, #81	; 0x51
 80035e0:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.CrcOn = crcOn;
 80035e2:	001a      	movs	r2, r3
 80035e4:	9904      	ldr	r1, [sp, #16]
 80035e6:	3252      	adds	r2, #82	; 0x52
 80035e8:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 80035ea:	001a      	movs	r2, r3
 80035ec:	990a      	ldr	r1, [sp, #40]	; 0x28
 80035ee:	3253      	adds	r2, #83	; 0x53
 80035f0:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 80035f2:	001a      	movs	r2, r3
 80035f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80035f6:	3254      	adds	r2, #84	; 0x54
 80035f8:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 80035fa:	001a      	movs	r2, r3
 80035fc:	3255      	adds	r2, #85	; 0x55
 80035fe:	7017      	strb	r7, [r2, #0]
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
 8003600:	001a      	movs	r2, r3
 8003602:	9909      	ldr	r1, [sp, #36]	; 0x24
            bandwidth += 7;
 8003604:	1dec      	adds	r4, r5, #7
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
 8003606:	3256      	adds	r2, #86	; 0x56
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 8003608:	645c      	str	r4, [r3, #68]	; 0x44
            SX1276.Settings.LoRa.Datarate = datarate;
 800360a:	649e      	str	r6, [r3, #72]	; 0x48
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
 800360c:	7011      	strb	r1, [r2, #0]
            if( datarate > 12 )
 800360e:	2e0c      	cmp	r6, #12
 8003610:	d900      	bls.n	8003614 <SX1276SetRxConfig+0x1bc>
 8003612:	e09c      	b.n	800374e <SX1276SetRxConfig+0x2f6>
            else if( datarate < 6 )
 8003614:	2e05      	cmp	r6, #5
 8003616:	d800      	bhi.n	800361a <SX1276SetRxConfig+0x1c2>
 8003618:	e085      	b.n	8003726 <SX1276SetRxConfig+0x2ce>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800361a:	2c07      	cmp	r4, #7
 800361c:	d17c      	bne.n	8003718 <SX1276SetRxConfig+0x2c0>
 800361e:	0032      	movs	r2, r6
 8003620:	3a0b      	subs	r2, #11
 8003622:	2a01      	cmp	r2, #1
 8003624:	d87c      	bhi.n	8003720 <SX1276SetRxConfig+0x2c8>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 8003626:	2201      	movs	r2, #1
 8003628:	334c      	adds	r3, #76	; 0x4c
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 800362a:	201d      	movs	r0, #29
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 800362c:	701a      	strb	r2, [r3, #0]
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 800362e:	f7ff faef 	bl	8002c10 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8003632:	9b06      	ldr	r3, [sp, #24]
            SX1276Write( REG_LR_MODEMCONFIG1,
 8003634:	201d      	movs	r0, #29
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8003636:	0059      	lsls	r1, r3, #1
 8003638:	9b02      	ldr	r3, [sp, #8]
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK &
 800363a:	2708      	movs	r7, #8
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 800363c:	4319      	orrs	r1, r3
 800363e:	0123      	lsls	r3, r4, #4
 8003640:	4319      	orrs	r1, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 8003642:	b2c9      	uxtb	r1, r1
 8003644:	f7ff fa91 	bl	8002b6a <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 8003648:	201e      	movs	r0, #30
 800364a:	f7ff fae1 	bl	8002c10 <SX1276Read>
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 800364e:	9b05      	ldr	r3, [sp, #20]
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK &
 8003650:	4038      	ands	r0, r7
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 8003652:	0599      	lsls	r1, r3, #22
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 8003654:	9b04      	ldr	r3, [sp, #16]
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 8003656:	0f89      	lsrs	r1, r1, #30
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 8003658:	009b      	lsls	r3, r3, #2
            SX1276Write( REG_LR_MODEMCONFIG2,
 800365a:	4319      	orrs	r1, r3
 800365c:	4301      	orrs	r1, r0
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 800365e:	0130      	lsls	r0, r6, #4
            SX1276Write( REG_LR_MODEMCONFIG2,
 8003660:	4301      	orrs	r1, r0
 8003662:	b2c9      	uxtb	r1, r1
 8003664:	201e      	movs	r0, #30
 8003666:	f7ff fa80 	bl	8002b6a <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 800366a:	2026      	movs	r0, #38	; 0x26
 800366c:	f7ff fad0 	bl	8002c10 <SX1276Read>
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 8003670:	4d39      	ldr	r5, [pc, #228]	; (8003758 <SX1276SetRxConfig+0x300>)
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 8003672:	43b8      	bics	r0, r7
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 8003674:	002b      	movs	r3, r5
 8003676:	334c      	adds	r3, #76	; 0x4c
 8003678:	7819      	ldrb	r1, [r3, #0]
 800367a:	00c9      	lsls	r1, r1, #3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 800367c:	4301      	orrs	r1, r0
            SX1276Write( REG_LR_MODEMCONFIG3,
 800367e:	b2c9      	uxtb	r1, r1
 8003680:	2026      	movs	r0, #38	; 0x26
 8003682:	f7ff fa72 	bl	8002b6a <SX1276Write>
            SX1276Write( REG_LR_SYMBTIMEOUTLSB, ( uint8_t )( symbTimeout & 0xFF ) );
 8003686:	466b      	mov	r3, sp
 8003688:	201f      	movs	r0, #31
 800368a:	7d19      	ldrb	r1, [r3, #20]
 800368c:	f7ff fa6d 	bl	8002b6a <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 8003690:	9b01      	ldr	r3, [sp, #4]
 8003692:	2020      	movs	r0, #32
 8003694:	0a19      	lsrs	r1, r3, #8
 8003696:	f7ff fa68 	bl	8002b6a <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 800369a:	466b      	mov	r3, sp
 800369c:	2021      	movs	r0, #33	; 0x21
 800369e:	7919      	ldrb	r1, [r3, #4]
 80036a0:	f7ff fa63 	bl	8002b6a <SX1276Write>
            if( fixLen == 1 )
 80036a4:	9b02      	ldr	r3, [sp, #8]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d003      	beq.n	80036b2 <SX1276SetRxConfig+0x25a>
                SX1276Write( REG_LR_PAYLOADLENGTH, payloadLen );
 80036aa:	9903      	ldr	r1, [sp, #12]
 80036ac:	2022      	movs	r0, #34	; 0x22
 80036ae:	f7ff fa5c 	bl	8002b6a <SX1276Write>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 80036b2:	002b      	movs	r3, r5
 80036b4:	3353      	adds	r3, #83	; 0x53
 80036b6:	781b      	ldrb	r3, [r3, #0]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d00f      	beq.n	80036dc <SX1276SetRxConfig+0x284>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 80036bc:	2044      	movs	r0, #68	; 0x44
 80036be:	f7ff faa7 	bl	8002c10 <SX1276Read>
 80036c2:	2180      	movs	r1, #128	; 0x80
 80036c4:	4249      	negs	r1, r1
 80036c6:	4301      	orrs	r1, r0
 80036c8:	b2c9      	uxtb	r1, r1
 80036ca:	2044      	movs	r0, #68	; 0x44
 80036cc:	f7ff fa4d 	bl	8002b6a <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 80036d0:	002b      	movs	r3, r5
 80036d2:	3354      	adds	r3, #84	; 0x54
 80036d4:	7819      	ldrb	r1, [r3, #0]
 80036d6:	2024      	movs	r0, #36	; 0x24
 80036d8:	f7ff fa47 	bl	8002b6a <SX1276Write>
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 80036dc:	2c09      	cmp	r4, #9
 80036de:	d128      	bne.n	8003732 <SX1276SetRxConfig+0x2da>
 80036e0:	4b22      	ldr	r3, [pc, #136]	; (800376c <SX1276SetRxConfig+0x314>)
 80036e2:	68aa      	ldr	r2, [r5, #8]
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 80036e4:	2102      	movs	r1, #2
 80036e6:	2036      	movs	r0, #54	; 0x36
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d91e      	bls.n	800372a <SX1276SetRxConfig+0x2d2>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 80036ec:	f7ff fa3d 	bl	8002b6a <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x64 );
 80036f0:	2164      	movs	r1, #100	; 0x64
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x7F );
 80036f2:	203a      	movs	r0, #58	; 0x3a
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x03 );
 80036f4:	f7ff fa39 	bl	8002b6a <SX1276Write>
 80036f8:	2407      	movs	r4, #7
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 80036fa:	2031      	movs	r0, #49	; 0x31
            if( datarate == 6 )
 80036fc:	2e06      	cmp	r6, #6
 80036fe:	d11b      	bne.n	8003738 <SX1276SetRxConfig+0x2e0>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8003700:	f7ff fa86 	bl	8002c10 <SX1276Read>
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 8003704:	2105      	movs	r1, #5
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8003706:	43a0      	bics	r0, r4
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 8003708:	4301      	orrs	r1, r0
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 800370a:	b2c9      	uxtb	r1, r1
 800370c:	2031      	movs	r0, #49	; 0x31
 800370e:	f7ff fa2c 	bl	8002b6a <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8003712:	210c      	movs	r1, #12
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8003714:	2037      	movs	r0, #55	; 0x37
 8003716:	e74d      	b.n	80035b4 <SX1276SetRxConfig+0x15c>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8003718:	2c08      	cmp	r4, #8
 800371a:	d101      	bne.n	8003720 <SX1276SetRxConfig+0x2c8>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 800371c:	2e0c      	cmp	r6, #12
 800371e:	d082      	beq.n	8003626 <SX1276SetRxConfig+0x1ce>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 8003720:	334c      	adds	r3, #76	; 0x4c
 8003722:	2200      	movs	r2, #0
 8003724:	e781      	b.n	800362a <SX1276SetRxConfig+0x1d2>
                datarate = 6;
 8003726:	2606      	movs	r6, #6
 8003728:	e7fa      	b.n	8003720 <SX1276SetRxConfig+0x2c8>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 800372a:	f7ff fa1e 	bl	8002b6a <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x7F );
 800372e:	217f      	movs	r1, #127	; 0x7f
 8003730:	e7df      	b.n	80036f2 <SX1276SetRxConfig+0x29a>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x03 );
 8003732:	2103      	movs	r1, #3
 8003734:	2036      	movs	r0, #54	; 0x36
 8003736:	e7dd      	b.n	80036f4 <SX1276SetRxConfig+0x29c>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8003738:	f7ff fa6a 	bl	8002c10 <SX1276Read>
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 800373c:	2103      	movs	r1, #3
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800373e:	43a0      	bics	r0, r4
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 8003740:	4301      	orrs	r1, r0
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8003742:	b2c9      	uxtb	r1, r1
 8003744:	2031      	movs	r0, #49	; 0x31
 8003746:	f7ff fa10 	bl	8002b6a <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800374a:	210a      	movs	r1, #10
 800374c:	e7e2      	b.n	8003714 <SX1276SetRxConfig+0x2bc>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800374e:	260c      	movs	r6, #12
 8003750:	2d02      	cmp	r5, #2
 8003752:	d0e5      	beq.n	8003720 <SX1276SetRxConfig+0x2c8>
 8003754:	e767      	b.n	8003626 <SX1276SetRxConfig+0x1ce>
 8003756:	46c0      	nop			; (mov r8, r8)
 8003758:	200015d8 	.word	0x200015d8
 800375c:	3ff00000 	.word	0x3ff00000
 8003760:	40200000 	.word	0x40200000
 8003764:	408f4000 	.word	0x408f4000
 8003768:	417e8480 	.word	0x417e8480
 800376c:	1f4add40 	.word	0x1f4add40

08003770 <SX1276SetTxConfig>:
{
 8003770:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003772:	000e      	movs	r6, r1
 8003774:	b089      	sub	sp, #36	; 0x24
 8003776:	9300      	str	r3, [sp, #0]
 8003778:	ab0e      	add	r3, sp, #56	; 0x38
 800377a:	cb10      	ldmia	r3!, {r4}
 800377c:	0005      	movs	r5, r0
 800377e:	781b      	ldrb	r3, [r3, #0]
 8003780:	9203      	str	r2, [sp, #12]
 8003782:	9304      	str	r3, [sp, #16]
 8003784:	ab10      	add	r3, sp, #64	; 0x40
 8003786:	881f      	ldrh	r7, [r3, #0]
 8003788:	ab11      	add	r3, sp, #68	; 0x44
 800378a:	781b      	ldrb	r3, [r3, #0]
 800378c:	9301      	str	r3, [sp, #4]
 800378e:	ab12      	add	r3, sp, #72	; 0x48
 8003790:	781b      	ldrb	r3, [r3, #0]
 8003792:	9302      	str	r3, [sp, #8]
 8003794:	ab13      	add	r3, sp, #76	; 0x4c
 8003796:	781b      	ldrb	r3, [r3, #0]
 8003798:	9305      	str	r3, [sp, #20]
 800379a:	ab14      	add	r3, sp, #80	; 0x50
 800379c:	781b      	ldrb	r3, [r3, #0]
 800379e:	9307      	str	r3, [sp, #28]
 80037a0:	ab15      	add	r3, sp, #84	; 0x54
 80037a2:	781b      	ldrb	r3, [r3, #0]
 80037a4:	9306      	str	r3, [sp, #24]
    SX1276SetModem( modem );
 80037a6:	f7ff fd8b 	bl	80032c0 <SX1276SetModem>
    LoRaBoardCallbacks->SX1276BoardSetRfTxPower( power );
 80037aa:	4b86      	ldr	r3, [pc, #536]	; (80039c4 <SX1276SetTxConfig+0x254>)
 80037ac:	0030      	movs	r0, r6
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	68db      	ldr	r3, [r3, #12]
 80037b2:	4798      	blx	r3
    switch( modem )
 80037b4:	2d00      	cmp	r5, #0
 80037b6:	d003      	beq.n	80037c0 <SX1276SetTxConfig+0x50>
 80037b8:	2d01      	cmp	r5, #1
 80037ba:	d05e      	beq.n	800387a <SX1276SetTxConfig+0x10a>
}
 80037bc:	b009      	add	sp, #36	; 0x24
 80037be:	bdf0      	pop	{r4, r5, r6, r7, pc}
            SX1276.Settings.Fsk.Power = power;
 80037c0:	4b81      	ldr	r3, [pc, #516]	; (80039c8 <SX1276SetTxConfig+0x258>)
            SX1276.Settings.Fsk.Fdev = fdev;
 80037c2:	9a03      	ldr	r2, [sp, #12]
            SX1276.Settings.Fsk.FixLen = fixLen;
 80037c4:	9901      	ldr	r1, [sp, #4]
            SX1276.Settings.Fsk.Fdev = fdev;
 80037c6:	611a      	str	r2, [r3, #16]
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 80037c8:	9a00      	ldr	r2, [sp, #0]
            SX1276.Settings.Fsk.Power = power;
 80037ca:	731e      	strb	r6, [r3, #12]
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 80037cc:	615a      	str	r2, [r3, #20]
            SX1276.Settings.Fsk.FixLen = fixLen;
 80037ce:	1cda      	adds	r2, r3, #3
 80037d0:	77d1      	strb	r1, [r2, #31]
            SX1276.Settings.Fsk.CrcOn = crcOn;
 80037d2:	9902      	ldr	r1, [sp, #8]
 80037d4:	1d5a      	adds	r2, r3, #5
 80037d6:	77d1      	strb	r1, [r2, #31]
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 80037d8:	9906      	ldr	r1, [sp, #24]
 80037da:	1d9a      	adds	r2, r3, #6
 80037dc:	77d1      	strb	r1, [r2, #31]
            SX1276.Settings.Fsk.TxTimeout = timeout;
 80037de:	9a16      	ldr	r2, [sp, #88]	; 0x58
            SX1276.Settings.Fsk.Datarate = datarate;
 80037e0:	61dc      	str	r4, [r3, #28]
            SX1276.Settings.Fsk.TxTimeout = timeout;
 80037e2:	629a      	str	r2, [r3, #40]	; 0x28
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 80037e4:	841f      	strh	r7, [r3, #32]
            fdev = ( uint16_t )( ( double )fdev / ( double )FREQ_STEP );
 80037e6:	9803      	ldr	r0, [sp, #12]
 80037e8:	f7fe fec6 	bl	8002578 <__aeabi_ui2d>
 80037ec:	2200      	movs	r2, #0
 80037ee:	4b77      	ldr	r3, [pc, #476]	; (80039cc <SX1276SetTxConfig+0x25c>)
 80037f0:	f7fd fc8e 	bl	8001110 <__aeabi_ddiv>
 80037f4:	f7fc fe8c 	bl	8000510 <__aeabi_d2uiz>
 80037f8:	b286      	uxth	r6, r0
            SX1276Write( REG_FDEVMSB, ( uint8_t )( fdev >> 8 ) );
 80037fa:	0a31      	lsrs	r1, r6, #8
 80037fc:	2004      	movs	r0, #4
 80037fe:	f7ff f9b4 	bl	8002b6a <SX1276Write>
            SX1276Write( REG_FDEVLSB, ( uint8_t )( fdev & 0xFF ) );
 8003802:	b2f1      	uxtb	r1, r6
 8003804:	2005      	movs	r0, #5
 8003806:	f7ff f9b0 	bl	8002b6a <SX1276Write>
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 800380a:	0020      	movs	r0, r4
 800380c:	f7fe feb4 	bl	8002578 <__aeabi_ui2d>
 8003810:	000b      	movs	r3, r1
 8003812:	0002      	movs	r2, r0
 8003814:	496e      	ldr	r1, [pc, #440]	; (80039d0 <SX1276SetTxConfig+0x260>)
 8003816:	2000      	movs	r0, #0
 8003818:	f7fd fc7a 	bl	8001110 <__aeabi_ddiv>
 800381c:	f7fc fe78 	bl	8000510 <__aeabi_d2uiz>
 8003820:	b284      	uxth	r4, r0
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 8003822:	0a21      	lsrs	r1, r4, #8
 8003824:	2002      	movs	r0, #2
 8003826:	f7ff f9a0 	bl	8002b6a <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 800382a:	b2e1      	uxtb	r1, r4
 800382c:	2003      	movs	r0, #3
 800382e:	f7ff f99c 	bl	8002b6a <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 8003832:	0a39      	lsrs	r1, r7, #8
 8003834:	2025      	movs	r0, #37	; 0x25
 8003836:	f7ff f998 	bl	8002b6a <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, preambleLen & 0xFF );
 800383a:	b2f9      	uxtb	r1, r7
 800383c:	2026      	movs	r0, #38	; 0x26
 800383e:	f7ff f994 	bl	8002b6a <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 8003842:	2030      	movs	r0, #48	; 0x30
 8003844:	f7ff f9e4 	bl	8002c10 <SX1276Read>
                           RF_PACKETCONFIG1_CRC_MASK &
 8003848:	216f      	movs	r1, #111	; 0x6f
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 800384a:	9b01      	ldr	r3, [sp, #4]
                           RF_PACKETCONFIG1_CRC_MASK &
 800384c:	4001      	ands	r1, r0
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 800384e:	2b00      	cmp	r3, #0
 8003850:	d101      	bne.n	8003856 <SX1276SetTxConfig+0xe6>
 8003852:	2580      	movs	r5, #128	; 0x80
 8003854:	426d      	negs	r5, r5
                           ( crcOn << 4 ) );
 8003856:	9b02      	ldr	r3, [sp, #8]
 8003858:	0118      	lsls	r0, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 800385a:	4301      	orrs	r1, r0
 800385c:	4329      	orrs	r1, r5
            SX1276Write( REG_PACKETCONFIG1,
 800385e:	b2c9      	uxtb	r1, r1
 8003860:	2030      	movs	r0, #48	; 0x30
 8003862:	f7ff f982 	bl	8002b6a <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 8003866:	2031      	movs	r0, #49	; 0x31
 8003868:	f7ff f9d2 	bl	8002c10 <SX1276Read>
 800386c:	2140      	movs	r1, #64	; 0x40
 800386e:	4301      	orrs	r1, r0
 8003870:	2031      	movs	r0, #49	; 0x31
 8003872:	b2c9      	uxtb	r1, r1
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8003874:	f7ff f979 	bl	8002b6a <SX1276Write>
}
 8003878:	e7a0      	b.n	80037bc <SX1276SetTxConfig+0x4c>
            SX1276.Settings.LoRa.Power = power;
 800387a:	4d53      	ldr	r5, [pc, #332]	; (80039c8 <SX1276SetTxConfig+0x258>)
 800387c:	002b      	movs	r3, r5
 800387e:	3340      	adds	r3, #64	; 0x40
 8003880:	701e      	strb	r6, [r3, #0]
            if( bandwidth > 2 )
 8003882:	9b00      	ldr	r3, [sp, #0]
 8003884:	2b02      	cmp	r3, #2
 8003886:	d900      	bls.n	800388a <SX1276SetTxConfig+0x11a>
 8003888:	e7fe      	b.n	8003888 <SX1276SetTxConfig+0x118>
            bandwidth += 7;
 800388a:	9b00      	ldr	r3, [sp, #0]
            SX1276.Settings.LoRa.Coderate = coderate;
 800388c:	9a04      	ldr	r2, [sp, #16]
            bandwidth += 7;
 800388e:	1dde      	adds	r6, r3, #7
            SX1276.Settings.LoRa.Coderate = coderate;
 8003890:	002b      	movs	r3, r5
 8003892:	334d      	adds	r3, #77	; 0x4d
 8003894:	701a      	strb	r2, [r3, #0]
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 8003896:	002b      	movs	r3, r5
 8003898:	334e      	adds	r3, #78	; 0x4e
 800389a:	801f      	strh	r7, [r3, #0]
            SX1276.Settings.LoRa.FixLen = fixLen;
 800389c:	002b      	movs	r3, r5
 800389e:	9a01      	ldr	r2, [sp, #4]
 80038a0:	3350      	adds	r3, #80	; 0x50
 80038a2:	701a      	strb	r2, [r3, #0]
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 80038a4:	002b      	movs	r3, r5
 80038a6:	9a05      	ldr	r2, [sp, #20]
 80038a8:	3353      	adds	r3, #83	; 0x53
 80038aa:	701a      	strb	r2, [r3, #0]
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 80038ac:	002b      	movs	r3, r5
 80038ae:	9a07      	ldr	r2, [sp, #28]
 80038b0:	3354      	adds	r3, #84	; 0x54
 80038b2:	701a      	strb	r2, [r3, #0]
            SX1276.Settings.LoRa.CrcOn = crcOn;
 80038b4:	002b      	movs	r3, r5
 80038b6:	9a02      	ldr	r2, [sp, #8]
 80038b8:	3352      	adds	r3, #82	; 0x52
 80038ba:	701a      	strb	r2, [r3, #0]
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 80038bc:	002b      	movs	r3, r5
 80038be:	9a06      	ldr	r2, [sp, #24]
 80038c0:	3355      	adds	r3, #85	; 0x55
 80038c2:	701a      	strb	r2, [r3, #0]
            SX1276.Settings.LoRa.TxTimeout = timeout;
 80038c4:	9b16      	ldr	r3, [sp, #88]	; 0x58
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 80038c6:	646e      	str	r6, [r5, #68]	; 0x44
            SX1276.Settings.LoRa.TxTimeout = timeout;
 80038c8:	65ab      	str	r3, [r5, #88]	; 0x58
            SX1276.Settings.LoRa.Datarate = datarate;
 80038ca:	64ac      	str	r4, [r5, #72]	; 0x48
 80038cc:	002b      	movs	r3, r5
            if( datarate > 12 )
 80038ce:	2c0c      	cmp	r4, #12
 80038d0:	d872      	bhi.n	80039b8 <SX1276SetTxConfig+0x248>
            else if( datarate < 6 )
 80038d2:	2c05      	cmp	r4, #5
 80038d4:	d963      	bls.n	800399e <SX1276SetTxConfig+0x22e>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80038d6:	2e07      	cmp	r6, #7
 80038d8:	d15a      	bne.n	8003990 <SX1276SetTxConfig+0x220>
 80038da:	0022      	movs	r2, r4
 80038dc:	3a0b      	subs	r2, #11
 80038de:	2a01      	cmp	r2, #1
 80038e0:	d85a      	bhi.n	8003998 <SX1276SetTxConfig+0x228>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 80038e2:	2201      	movs	r2, #1
 80038e4:	334c      	adds	r3, #76	; 0x4c
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 80038e6:	701a      	strb	r2, [r3, #0]
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 80038e8:	9b05      	ldr	r3, [sp, #20]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d00f      	beq.n	800390e <SX1276SetTxConfig+0x19e>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 80038ee:	2044      	movs	r0, #68	; 0x44
 80038f0:	f7ff f98e 	bl	8002c10 <SX1276Read>
 80038f4:	2180      	movs	r1, #128	; 0x80
 80038f6:	4249      	negs	r1, r1
 80038f8:	4301      	orrs	r1, r0
 80038fa:	b2c9      	uxtb	r1, r1
 80038fc:	2044      	movs	r0, #68	; 0x44
 80038fe:	f7ff f934 	bl	8002b6a <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 8003902:	4b31      	ldr	r3, [pc, #196]	; (80039c8 <SX1276SetTxConfig+0x258>)
 8003904:	2024      	movs	r0, #36	; 0x24
 8003906:	3354      	adds	r3, #84	; 0x54
 8003908:	7819      	ldrb	r1, [r3, #0]
 800390a:	f7ff f92e 	bl	8002b6a <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 800390e:	201d      	movs	r0, #29
 8003910:	f7ff f97e 	bl	8002c10 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8003914:	9b04      	ldr	r3, [sp, #16]
 8003916:	0136      	lsls	r6, r6, #4
 8003918:	0059      	lsls	r1, r3, #1
 800391a:	9b01      	ldr	r3, [sp, #4]
            SX1276Write( REG_LR_MODEMCONFIG1,
 800391c:	201d      	movs	r0, #29
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 800391e:	430b      	orrs	r3, r1
 8003920:	0019      	movs	r1, r3
 8003922:	4331      	orrs	r1, r6
            SX1276Write( REG_LR_MODEMCONFIG1,
 8003924:	b2c9      	uxtb	r1, r1
 8003926:	f7ff f920 	bl	8002b6a <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 800392a:	201e      	movs	r0, #30
 800392c:	f7ff f970 	bl	8002c10 <SX1276Read>
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 8003930:	9b02      	ldr	r3, [sp, #8]
 8003932:	0121      	lsls	r1, r4, #4
 8003934:	009b      	lsls	r3, r3, #2
            SX1276Write( REG_LR_MODEMCONFIG2,
 8003936:	4319      	orrs	r1, r3
                           RFLR_MODEMCONFIG2_SF_MASK &
 8003938:	230b      	movs	r3, #11
 800393a:	4018      	ands	r0, r3
            SX1276Write( REG_LR_MODEMCONFIG2,
 800393c:	4301      	orrs	r1, r0
 800393e:	b2c9      	uxtb	r1, r1
 8003940:	201e      	movs	r0, #30
 8003942:	f7ff f912 	bl	8002b6a <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 8003946:	2026      	movs	r0, #38	; 0x26
 8003948:	f7ff f962 	bl	8002c10 <SX1276Read>
 800394c:	2308      	movs	r3, #8
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 800394e:	354c      	adds	r5, #76	; 0x4c
 8003950:	7829      	ldrb	r1, [r5, #0]
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 8003952:	4398      	bics	r0, r3
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 8003954:	00c9      	lsls	r1, r1, #3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 8003956:	4301      	orrs	r1, r0
            SX1276Write( REG_LR_MODEMCONFIG3,
 8003958:	b2c9      	uxtb	r1, r1
 800395a:	2026      	movs	r0, #38	; 0x26
 800395c:	f7ff f905 	bl	8002b6a <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 8003960:	0a39      	lsrs	r1, r7, #8
 8003962:	2020      	movs	r0, #32
 8003964:	f7ff f901 	bl	8002b6a <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, preambleLen & 0xFF );
 8003968:	2021      	movs	r0, #33	; 0x21
 800396a:	b2f9      	uxtb	r1, r7
 800396c:	f7ff f8fd 	bl	8002b6a <SX1276Write>
 8003970:	2507      	movs	r5, #7
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8003972:	2031      	movs	r0, #49	; 0x31
            if( datarate == 6 )
 8003974:	2c06      	cmp	r4, #6
 8003976:	d114      	bne.n	80039a2 <SX1276SetTxConfig+0x232>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8003978:	f7ff f94a 	bl	8002c10 <SX1276Read>
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 800397c:	2105      	movs	r1, #5
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800397e:	43a8      	bics	r0, r5
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 8003980:	4301      	orrs	r1, r0
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8003982:	b2c9      	uxtb	r1, r1
 8003984:	2031      	movs	r0, #49	; 0x31
 8003986:	f7ff f8f0 	bl	8002b6a <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800398a:	210c      	movs	r1, #12
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800398c:	2037      	movs	r0, #55	; 0x37
 800398e:	e771      	b.n	8003874 <SX1276SetTxConfig+0x104>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8003990:	2e08      	cmp	r6, #8
 8003992:	d101      	bne.n	8003998 <SX1276SetTxConfig+0x228>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 8003994:	2c0c      	cmp	r4, #12
 8003996:	d0a4      	beq.n	80038e2 <SX1276SetTxConfig+0x172>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 8003998:	334c      	adds	r3, #76	; 0x4c
 800399a:	2200      	movs	r2, #0
 800399c:	e7a3      	b.n	80038e6 <SX1276SetTxConfig+0x176>
                datarate = 6;
 800399e:	2406      	movs	r4, #6
 80039a0:	e7fa      	b.n	8003998 <SX1276SetTxConfig+0x228>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 80039a2:	f7ff f935 	bl	8002c10 <SX1276Read>
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 80039a6:	2103      	movs	r1, #3
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 80039a8:	43a8      	bics	r0, r5
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 80039aa:	4301      	orrs	r1, r0
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 80039ac:	b2c9      	uxtb	r1, r1
 80039ae:	2031      	movs	r0, #49	; 0x31
 80039b0:	f7ff f8db 	bl	8002b6a <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 80039b4:	210a      	movs	r1, #10
 80039b6:	e7e9      	b.n	800398c <SX1276SetTxConfig+0x21c>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80039b8:	9a00      	ldr	r2, [sp, #0]
 80039ba:	240c      	movs	r4, #12
 80039bc:	2a02      	cmp	r2, #2
 80039be:	d0eb      	beq.n	8003998 <SX1276SetTxConfig+0x228>
 80039c0:	e78f      	b.n	80038e2 <SX1276SetTxConfig+0x172>
 80039c2:	46c0      	nop			; (mov r8, r8)
 80039c4:	200002d0 	.word	0x200002d0
 80039c8:	200015d8 	.word	0x200015d8
 80039cc:	404e8480 	.word	0x404e8480
 80039d0:	417e8480 	.word	0x417e8480

080039d4 <SX1276SetTxContinuousWave>:
{
 80039d4:	b530      	push	{r4, r5, lr}
    uint32_t timeout = ( uint32_t )( time * 1000 );
 80039d6:	24fa      	movs	r4, #250	; 0xfa
{
 80039d8:	b08b      	sub	sp, #44	; 0x2c
    uint32_t timeout = ( uint32_t )( time * 1000 );
 80039da:	00a4      	lsls	r4, r4, #2
 80039dc:	4354      	muls	r4, r2
{
 80039de:	000d      	movs	r5, r1
    SX1276SetChannel( freq );
 80039e0:	f7ff f8cc 	bl	8002b7c <SX1276SetChannel>
    SX1276SetTxConfig( MODEM_FSK, power, 0, 0, 4800, 0, 5, false, false, 0, 0, 0, timeout );
 80039e4:	2305      	movs	r3, #5
 80039e6:	9302      	str	r3, [sp, #8]
 80039e8:	2396      	movs	r3, #150	; 0x96
 80039ea:	2000      	movs	r0, #0
 80039ec:	015b      	lsls	r3, r3, #5
 80039ee:	0002      	movs	r2, r0
 80039f0:	0029      	movs	r1, r5
 80039f2:	9007      	str	r0, [sp, #28]
 80039f4:	9006      	str	r0, [sp, #24]
 80039f6:	9005      	str	r0, [sp, #20]
 80039f8:	9004      	str	r0, [sp, #16]
 80039fa:	9003      	str	r0, [sp, #12]
 80039fc:	9001      	str	r0, [sp, #4]
 80039fe:	9300      	str	r3, [sp, #0]
 8003a00:	9408      	str	r4, [sp, #32]
 8003a02:	0003      	movs	r3, r0
 8003a04:	f7ff feb4 	bl	8003770 <SX1276SetTxConfig>
    SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) & RF_PACKETCONFIG2_DATAMODE_MASK ) );
 8003a08:	2031      	movs	r0, #49	; 0x31
 8003a0a:	f7ff f901 	bl	8002c10 <SX1276Read>
 8003a0e:	2540      	movs	r5, #64	; 0x40
 8003a10:	43a8      	bics	r0, r5
 8003a12:	b2c1      	uxtb	r1, r0
 8003a14:	2031      	movs	r0, #49	; 0x31
 8003a16:	f7ff f8a8 	bl	8002b6a <SX1276Write>
    SX1276Write( REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_11 | RF_DIOMAPPING1_DIO1_11 );
 8003a1a:	0028      	movs	r0, r5
 8003a1c:	21f0      	movs	r1, #240	; 0xf0
 8003a1e:	f7ff f8a4 	bl	8002b6a <SX1276Write>
    SX1276Write( REG_DIOMAPPING2, RF_DIOMAPPING2_DIO4_10 | RF_DIOMAPPING2_DIO5_10 );
 8003a22:	21a0      	movs	r1, #160	; 0xa0
 8003a24:	2041      	movs	r0, #65	; 0x41
 8003a26:	f7ff f8a0 	bl	8002b6a <SX1276Write>
    TimerSetValue( &TxTimeoutTimer, timeout );
 8003a2a:	4d08      	ldr	r5, [pc, #32]	; (8003a4c <SX1276SetTxContinuousWave+0x78>)
 8003a2c:	0021      	movs	r1, r4
 8003a2e:	0028      	movs	r0, r5
 8003a30:	f009 fa14 	bl	800ce5c <TimerSetValue>
    SX1276.Settings.State = RF_TX_RUNNING;
 8003a34:	2202      	movs	r2, #2
 8003a36:	4b06      	ldr	r3, [pc, #24]	; (8003a50 <SX1276SetTxContinuousWave+0x7c>)
    TimerStart( &TxTimeoutTimer );
 8003a38:	0028      	movs	r0, r5
    SX1276.Settings.State = RF_TX_RUNNING;
 8003a3a:	711a      	strb	r2, [r3, #4]
    TimerStart( &TxTimeoutTimer );
 8003a3c:	f009 f95e 	bl	800ccfc <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 8003a40:	2003      	movs	r0, #3
 8003a42:	f7ff fa8b 	bl	8002f5c <SX1276SetOpMode>
}
 8003a46:	b00b      	add	sp, #44	; 0x2c
 8003a48:	bd30      	pop	{r4, r5, pc}
 8003a4a:	46c0      	nop			; (mov r8, r8)
 8003a4c:	200015a8 	.word	0x200015a8
 8003a50:	200015d8 	.word	0x200015d8

08003a54 <SX1276OnDio2Irq>:
{
 8003a54:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.State )
 8003a56:	4c2b      	ldr	r4, [pc, #172]	; (8003b04 <SX1276OnDio2Irq+0xb0>)
 8003a58:	7921      	ldrb	r1, [r4, #4]
 8003a5a:	2901      	cmp	r1, #1
 8003a5c:	d002      	beq.n	8003a64 <SX1276OnDio2Irq+0x10>
 8003a5e:	2902      	cmp	r1, #2
 8003a60:	d048      	beq.n	8003af4 <SX1276OnDio2Irq+0xa0>
}
 8003a62:	bd70      	pop	{r4, r5, r6, pc}
            switch( SX1276.Settings.Modem )
 8003a64:	7963      	ldrb	r3, [r4, #5]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d017      	beq.n	8003a9a <SX1276OnDio2Irq+0x46>
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d1f9      	bne.n	8003a62 <SX1276OnDio2Irq+0xe>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 8003a6e:	3453      	adds	r4, #83	; 0x53
 8003a70:	7823      	ldrb	r3, [r4, #0]
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 8003a72:	2102      	movs	r1, #2
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d0f4      	beq.n	8003a62 <SX1276OnDio2Irq+0xe>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 8003a78:	2012      	movs	r0, #18
 8003a7a:	f7ff f876 	bl	8002b6a <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 8003a7e:	4b22      	ldr	r3, [pc, #136]	; (8003b08 <SX1276OnDio2Irq+0xb4>)
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d0ed      	beq.n	8003a62 <SX1276OnDio2Irq+0xe>
 8003a86:	695c      	ldr	r4, [r3, #20]
 8003a88:	2c00      	cmp	r4, #0
 8003a8a:	d0ea      	beq.n	8003a62 <SX1276OnDio2Irq+0xe>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 8003a8c:	201c      	movs	r0, #28
 8003a8e:	f7ff f8bf 	bl	8002c10 <SX1276Read>
 8003a92:	233f      	movs	r3, #63	; 0x3f
 8003a94:	4018      	ands	r0, r3
 8003a96:	47a0      	blx	r4
}
 8003a98:	e7e3      	b.n	8003a62 <SX1276OnDio2Irq+0xe>
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 8003a9a:	0023      	movs	r3, r4
 8003a9c:	3330      	adds	r3, #48	; 0x30
 8003a9e:	7019      	strb	r1, [r3, #0]
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected == true ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == false ) )
 8003aa0:	8e25      	ldrh	r5, [r4, #48]	; 0x30
 8003aa2:	2d01      	cmp	r5, #1
 8003aa4:	d1dd      	bne.n	8003a62 <SX1276OnDio2Irq+0xe>
                    TimerStop( &RxTimeoutSyncWord );
 8003aa6:	4819      	ldr	r0, [pc, #100]	; (8003b0c <SX1276OnDio2Irq+0xb8>)
 8003aa8:	f009 f9a4 	bl	800cdf4 <TimerStop>
                    SX1276.Settings.FskPacketHandler.SyncWordDetected = true;
 8003aac:	0023      	movs	r3, r4
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 8003aae:	2011      	movs	r0, #17
                    SX1276.Settings.FskPacketHandler.SyncWordDetected = true;
 8003ab0:	3331      	adds	r3, #49	; 0x31
 8003ab2:	701d      	strb	r5, [r3, #0]
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 8003ab4:	f7ff f8ac 	bl	8002c10 <SX1276Read>
 8003ab8:	0023      	movs	r3, r4
 8003aba:	0840      	lsrs	r0, r0, #1
 8003abc:	3332      	adds	r3, #50	; 0x32
 8003abe:	4240      	negs	r0, r0
 8003ac0:	7018      	strb	r0, [r3, #0]
                    afcChannel = ( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 8003ac2:	201b      	movs	r0, #27
 8003ac4:	f7ff f8a4 	bl	8002c10 <SX1276Read>
 8003ac8:	0005      	movs	r5, r0
                                     ( uint16_t )SX1276Read( REG_AFCLSB ) );
 8003aca:	201c      	movs	r0, #28
 8003acc:	f7ff f8a0 	bl	8002c10 <SX1276Read>
                    afcChannel = ( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 8003ad0:	022d      	lsls	r5, r5, #8
                    SX_CHANNEL_TO_FREQ( afcChannel, SX1276.Settings.FskPacketHandler.AfcValue );
 8003ad2:	4a0f      	ldr	r2, [pc, #60]	; (8003b10 <SX1276OnDio2Irq+0xbc>)
                    afcChannel = ( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 8003ad4:	4328      	orrs	r0, r5
                    SX_CHANNEL_TO_FREQ( afcChannel, SX1276.Settings.FskPacketHandler.AfcValue );
 8003ad6:	b2c3      	uxtb	r3, r0
 8003ad8:	4353      	muls	r3, r2
 8003ada:	0a00      	lsrs	r0, r0, #8
 8003adc:	4350      	muls	r0, r2
 8003ade:	3380      	adds	r3, #128	; 0x80
 8003ae0:	0a1b      	lsrs	r3, r3, #8
 8003ae2:	1818      	adds	r0, r3, r0
 8003ae4:	6360      	str	r0, [r4, #52]	; 0x34
                    SX1276.Settings.FskPacketHandler.RxGain = ( SX1276Read( REG_LNA ) >> 5 ) & 0x07;
 8003ae6:	200c      	movs	r0, #12
 8003ae8:	f7ff f892 	bl	8002c10 <SX1276Read>
 8003aec:	3438      	adds	r4, #56	; 0x38
 8003aee:	0940      	lsrs	r0, r0, #5
 8003af0:	7020      	strb	r0, [r4, #0]
 8003af2:	e7b6      	b.n	8003a62 <SX1276OnDio2Irq+0xe>
            switch( SX1276.Settings.Modem )
 8003af4:	7963      	ldrb	r3, [r4, #5]
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d1b3      	bne.n	8003a62 <SX1276OnDio2Irq+0xe>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 8003afa:	3453      	adds	r4, #83	; 0x53
 8003afc:	7823      	ldrb	r3, [r4, #0]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d0af      	beq.n	8003a62 <SX1276OnDio2Irq+0xe>
 8003b02:	e7b9      	b.n	8003a78 <SX1276OnDio2Irq+0x24>
 8003b04:	200015d8 	.word	0x200015d8
 8003b08:	200002d0 	.word	0x200002d0
 8003b0c:	200015c0 	.word	0x200015c0
 8003b10:	00003d09 	.word	0x00003d09

08003b14 <SX1276OnDio3Irq>:
{
 8003b14:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.Modem )
 8003b16:	4b12      	ldr	r3, [pc, #72]	; (8003b60 <SX1276OnDio3Irq+0x4c>)
 8003b18:	795d      	ldrb	r5, [r3, #5]
 8003b1a:	2d01      	cmp	r5, #1
 8003b1c:	d111      	bne.n	8003b42 <SX1276OnDio3Irq+0x2e>
        if( ( SX1276Read( REG_LR_IRQFLAGS ) & RFLR_IRQFLAGS_CADDETECTED ) == RFLR_IRQFLAGS_CADDETECTED )
 8003b1e:	2012      	movs	r0, #18
 8003b20:	f7ff f876 	bl	8002c10 <SX1276Read>
 8003b24:	4028      	ands	r0, r5
 8003b26:	1e04      	subs	r4, r0, #0
 8003b28:	4e0e      	ldr	r6, [pc, #56]	; (8003b64 <SX1276OnDio3Irq+0x50>)
 8003b2a:	d00b      	beq.n	8003b44 <SX1276OnDio3Irq+0x30>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDETECTED | RFLR_IRQFLAGS_CADDONE );
 8003b2c:	2105      	movs	r1, #5
 8003b2e:	2012      	movs	r0, #18
 8003b30:	f7ff f81b 	bl	8002b6a <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8003b34:	6873      	ldr	r3, [r6, #4]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d003      	beq.n	8003b42 <SX1276OnDio3Irq+0x2e>
 8003b3a:	699b      	ldr	r3, [r3, #24]
                RadioEvents->CadDone( true );
 8003b3c:	0028      	movs	r0, r5
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d10b      	bne.n	8003b5a <SX1276OnDio3Irq+0x46>
}
 8003b42:	bd70      	pop	{r4, r5, r6, pc}
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDONE );
 8003b44:	2104      	movs	r1, #4
 8003b46:	2012      	movs	r0, #18
 8003b48:	f7ff f80f 	bl	8002b6a <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8003b4c:	6873      	ldr	r3, [r6, #4]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d0f7      	beq.n	8003b42 <SX1276OnDio3Irq+0x2e>
 8003b52:	699b      	ldr	r3, [r3, #24]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d0f4      	beq.n	8003b42 <SX1276OnDio3Irq+0x2e>
                RadioEvents->CadDone( false );
 8003b58:	0020      	movs	r0, r4
 8003b5a:	4798      	blx	r3
}
 8003b5c:	e7f1      	b.n	8003b42 <SX1276OnDio3Irq+0x2e>
 8003b5e:	46c0      	nop			; (mov r8, r8)
 8003b60:	200015d8 	.word	0x200015d8
 8003b64:	200002d0 	.word	0x200002d0

08003b68 <SX1276WriteFifo>:
{
 8003b68:	b510      	push	{r4, lr}
 8003b6a:	000a      	movs	r2, r1
    SX1276WriteBuffer( 0, buffer, size );
 8003b6c:	0001      	movs	r1, r0
 8003b6e:	2000      	movs	r0, #0
 8003b70:	f7fe ffdc 	bl	8002b2c <SX1276WriteBuffer>
}
 8003b74:	bd10      	pop	{r4, pc}
	...

08003b78 <SX1276Send>:
{
 8003b78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003b7a:	466b      	mov	r3, sp
    switch( SX1276.Settings.Modem )
 8003b7c:	4c3a      	ldr	r4, [pc, #232]	; (8003c68 <SX1276Send+0xf0>)
{
 8003b7e:	1dde      	adds	r6, r3, #7
 8003b80:	7031      	strb	r1, [r6, #0]
    switch( SX1276.Settings.Modem )
 8003b82:	7965      	ldrb	r5, [r4, #5]
{
 8003b84:	0007      	movs	r7, r0
    switch( SX1276.Settings.Modem )
 8003b86:	2d00      	cmp	r5, #0
 8003b88:	d003      	beq.n	8003b92 <SX1276Send+0x1a>
 8003b8a:	2d01      	cmp	r5, #1
 8003b8c:	d02e      	beq.n	8003bec <SX1276Send+0x74>
    uint32_t txTimeout = 0;
 8003b8e:	2000      	movs	r0, #0
 8003b90:	e01c      	b.n	8003bcc <SX1276Send+0x54>
            SX1276.Settings.FskPacketHandler.Size = size;
 8003b92:	7831      	ldrb	r1, [r6, #0]
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8003b94:	87a5      	strh	r5, [r4, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = size;
 8003b96:	8761      	strh	r1, [r4, #58]	; 0x3a
            if( SX1276.Settings.Fsk.FixLen == false )
 8003b98:	1ce3      	adds	r3, r4, #3
 8003b9a:	7fdb      	ldrb	r3, [r3, #31]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d118      	bne.n	8003bd2 <SX1276Send+0x5a>
                SX1276WriteFifo( ( uint8_t* )&size, 1 );
 8003ba0:	2101      	movs	r1, #1
 8003ba2:	0030      	movs	r0, r6
 8003ba4:	f7ff ffe0 	bl	8003b68 <SX1276WriteFifo>
            if( ( size > 0 ) && ( size <= 64 ) )
 8003ba8:	7832      	ldrb	r2, [r6, #0]
 8003baa:	1e53      	subs	r3, r2, #1
 8003bac:	2b3f      	cmp	r3, #63	; 0x3f
 8003bae:	d814      	bhi.n	8003bda <SX1276Send+0x62>
                SX1276.Settings.FskPacketHandler.ChunkSize = size;
 8003bb0:	0023      	movs	r3, r4
 8003bb2:	333f      	adds	r3, #63	; 0x3f
            SX1276WriteFifo( buffer, SX1276.Settings.FskPacketHandler.ChunkSize );
 8003bb4:	0025      	movs	r5, r4
                SX1276.Settings.FskPacketHandler.ChunkSize = 32;
 8003bb6:	701a      	strb	r2, [r3, #0]
            SX1276WriteFifo( buffer, SX1276.Settings.FskPacketHandler.ChunkSize );
 8003bb8:	353f      	adds	r5, #63	; 0x3f
 8003bba:	0038      	movs	r0, r7
 8003bbc:	7829      	ldrb	r1, [r5, #0]
 8003bbe:	f7ff ffd3 	bl	8003b68 <SX1276WriteFifo>
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 8003bc2:	782b      	ldrb	r3, [r5, #0]
 8003bc4:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
            txTimeout = SX1276.Settings.Fsk.TxTimeout;
 8003bc6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 8003bc8:	189b      	adds	r3, r3, r2
 8003bca:	87a3      	strh	r3, [r4, #60]	; 0x3c
    SX1276SetTx( txTimeout );
 8003bcc:	f7ff fb08 	bl	80031e0 <SX1276SetTx>
}
 8003bd0:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
                SX1276Write( REG_PAYLOADLENGTH, size );
 8003bd2:	2032      	movs	r0, #50	; 0x32
 8003bd4:	f7fe ffc9 	bl	8002b6a <SX1276Write>
 8003bd8:	e7e6      	b.n	8003ba8 <SX1276Send+0x30>
                memcpy1( RxTxBuffer, buffer, size );
 8003bda:	b292      	uxth	r2, r2
 8003bdc:	0039      	movs	r1, r7
 8003bde:	4823      	ldr	r0, [pc, #140]	; (8003c6c <SX1276Send+0xf4>)
 8003be0:	f009 fa01 	bl	800cfe6 <memcpy1>
                SX1276.Settings.FskPacketHandler.ChunkSize = 32;
 8003be4:	0023      	movs	r3, r4
 8003be6:	2220      	movs	r2, #32
 8003be8:	333f      	adds	r3, #63	; 0x3f
 8003bea:	e7e3      	b.n	8003bb4 <SX1276Send+0x3c>
            if( SX1276.Settings.LoRa.IqInverted == true )
 8003bec:	0023      	movs	r3, r4
 8003bee:	3355      	adds	r3, #85	; 0x55
 8003bf0:	781b      	ldrb	r3, [r3, #0]
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
 8003bf2:	2033      	movs	r0, #51	; 0x33
            if( SX1276.Settings.LoRa.IqInverted == true )
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d02b      	beq.n	8003c50 <SX1276Send+0xd8>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
 8003bf8:	f7ff f80a 	bl	8002c10 <SX1276Read>
 8003bfc:	2341      	movs	r3, #65	; 0x41
 8003bfe:	4398      	bics	r0, r3
 8003c00:	b2c1      	uxtb	r1, r0
 8003c02:	2033      	movs	r0, #51	; 0x33
 8003c04:	f7fe ffb1 	bl	8002b6a <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 8003c08:	2119      	movs	r1, #25
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 8003c0a:	203b      	movs	r0, #59	; 0x3b
 8003c0c:	f7fe ffad 	bl	8002b6a <SX1276Write>
            SX1276.Settings.LoRaPacketHandler.Size = size;
 8003c10:	0023      	movs	r3, r4
 8003c12:	7831      	ldrb	r1, [r6, #0]
 8003c14:	3364      	adds	r3, #100	; 0x64
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
 8003c16:	2022      	movs	r0, #34	; 0x22
            SX1276.Settings.LoRaPacketHandler.Size = size;
 8003c18:	7019      	strb	r1, [r3, #0]
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
 8003c1a:	f7fe ffa6 	bl	8002b6a <SX1276Write>
            SX1276Write( REG_LR_FIFOTXBASEADDR, 0 );
 8003c1e:	2100      	movs	r1, #0
 8003c20:	200e      	movs	r0, #14
 8003c22:	f7fe ffa2 	bl	8002b6a <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 8003c26:	2100      	movs	r1, #0
 8003c28:	200d      	movs	r0, #13
 8003c2a:	f7fe ff9e 	bl	8002b6a <SX1276Write>
            if( ( SX1276Read( REG_OPMODE ) & ~RF_OPMODE_MASK ) == RF_OPMODE_SLEEP )
 8003c2e:	2001      	movs	r0, #1
 8003c30:	f7fe ffee 	bl	8002c10 <SX1276Read>
 8003c34:	23f8      	movs	r3, #248	; 0xf8
 8003c36:	4398      	bics	r0, r3
 8003c38:	d104      	bne.n	8003c44 <SX1276Send+0xcc>
                SX1276SetStby( );
 8003c3a:	f7ff f9b1 	bl	8002fa0 <SX1276SetStby>
                DelayMs( 1 );
 8003c3e:	2001      	movs	r0, #1
 8003c40:	f00a fb1c 	bl	800e27c <HAL_Delay>
            SX1276WriteFifo( buffer, size );
 8003c44:	0038      	movs	r0, r7
 8003c46:	7831      	ldrb	r1, [r6, #0]
 8003c48:	f7ff ff8e 	bl	8003b68 <SX1276WriteFifo>
            txTimeout = SX1276.Settings.LoRa.TxTimeout;
 8003c4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
        break;
 8003c4e:	e7bd      	b.n	8003bcc <SX1276Send+0x54>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 8003c50:	f7fe ffde 	bl	8002c10 <SX1276Read>
 8003c54:	2341      	movs	r3, #65	; 0x41
 8003c56:	0001      	movs	r1, r0
 8003c58:	4399      	bics	r1, r3
 8003c5a:	4329      	orrs	r1, r5
 8003c5c:	b2c9      	uxtb	r1, r1
 8003c5e:	2033      	movs	r0, #51	; 0x33
 8003c60:	f7fe ff83 	bl	8002b6a <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 8003c64:	211d      	movs	r1, #29
 8003c66:	e7d0      	b.n	8003c0a <SX1276Send+0x92>
 8003c68:	200015d8 	.word	0x200015d8
 8003c6c:	200002d8 	.word	0x200002d8

08003c70 <SX1276ReadFifo>:
{
 8003c70:	b510      	push	{r4, lr}
 8003c72:	000a      	movs	r2, r1
    SX1276ReadBuffer( 0, buffer, size );
 8003c74:	0001      	movs	r1, r0
 8003c76:	2000      	movs	r0, #0
 8003c78:	f7fe ffaa 	bl	8002bd0 <SX1276ReadBuffer>
}
 8003c7c:	bd10      	pop	{r4, pc}
	...

08003c80 <SX1276OnDio0Irq>:
{
 8003c80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    volatile uint8_t irqFlags = 0;
 8003c82:	466b      	mov	r3, sp
 8003c84:	1ddd      	adds	r5, r3, #7
 8003c86:	2300      	movs	r3, #0
    switch( SX1276.Settings.State )
 8003c88:	4c8c      	ldr	r4, [pc, #560]	; (8003ebc <SX1276OnDio0Irq+0x23c>)
    volatile uint8_t irqFlags = 0;
 8003c8a:	702b      	strb	r3, [r5, #0]
    switch( SX1276.Settings.State )
 8003c8c:	7923      	ldrb	r3, [r4, #4]
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d003      	beq.n	8003c9a <SX1276OnDio0Irq+0x1a>
 8003c92:	2b02      	cmp	r3, #2
 8003c94:	d100      	bne.n	8003c98 <SX1276OnDio0Irq+0x18>
 8003c96:	e0fe      	b.n	8003e96 <SX1276OnDio0Irq+0x216>
}
 8003c98:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
            switch( SX1276.Settings.Modem )
 8003c9a:	7963      	ldrb	r3, [r4, #5]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d024      	beq.n	8003cea <SX1276OnDio0Irq+0x6a>
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d1f9      	bne.n	8003c98 <SX1276OnDio0Irq+0x18>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXDONE );
 8003ca4:	2140      	movs	r1, #64	; 0x40
 8003ca6:	2012      	movs	r0, #18
 8003ca8:	f7fe ff5f 	bl	8002b6a <SX1276Write>
                    irqFlags = SX1276Read( REG_LR_IRQFLAGS );
 8003cac:	2012      	movs	r0, #18
 8003cae:	f7fe ffaf 	bl	8002c10 <SX1276Read>
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
 8003cb2:	2120      	movs	r1, #32
                    irqFlags = SX1276Read( REG_LR_IRQFLAGS );
 8003cb4:	7028      	strb	r0, [r5, #0]
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
 8003cb6:	782b      	ldrb	r3, [r5, #0]
 8003cb8:	4e81      	ldr	r6, [pc, #516]	; (8003ec0 <SX1276OnDio0Irq+0x240>)
 8003cba:	4d82      	ldr	r5, [pc, #520]	; (8003ec4 <SX1276OnDio0Irq+0x244>)
 8003cbc:	420b      	tst	r3, r1
 8003cbe:	d100      	bne.n	8003cc2 <SX1276OnDio0Irq+0x42>
 8003cc0:	e08e      	b.n	8003de0 <SX1276OnDio0Irq+0x160>
                        SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_PAYLOADCRCERROR );
 8003cc2:	2012      	movs	r0, #18
 8003cc4:	f7fe ff51 	bl	8002b6a <SX1276Write>
                        if( SX1276.Settings.LoRa.RxContinuous == false )
 8003cc8:	0023      	movs	r3, r4
 8003cca:	3356      	adds	r3, #86	; 0x56
 8003ccc:	781b      	ldrb	r3, [r3, #0]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d100      	bne.n	8003cd4 <SX1276OnDio0Irq+0x54>
                            SX1276.Settings.State = RF_IDLE;
 8003cd2:	7123      	strb	r3, [r4, #4]
                        TimerStop( &RxTimeoutTimer );
 8003cd4:	0030      	movs	r0, r6
 8003cd6:	f009 f88d 	bl	800cdf4 <TimerStop>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 8003cda:	686b      	ldr	r3, [r5, #4]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d0db      	beq.n	8003c98 <SX1276OnDio0Irq+0x18>
 8003ce0:	691b      	ldr	r3, [r3, #16]
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d0d8      	beq.n	8003c98 <SX1276OnDio0Irq+0x18>
                    RadioEvents->TxDone( );
 8003ce6:	4798      	blx	r3
}
 8003ce8:	e7d6      	b.n	8003c98 <SX1276OnDio0Irq+0x18>
                if( SX1276.Settings.Fsk.CrcOn == true )
 8003cea:	1d63      	adds	r3, r4, #5
 8003cec:	7fdb      	ldrb	r3, [r3, #31]
 8003cee:	4e76      	ldr	r6, [pc, #472]	; (8003ec8 <SX1276OnDio0Irq+0x248>)
 8003cf0:	4f74      	ldr	r7, [pc, #464]	; (8003ec4 <SX1276OnDio0Irq+0x244>)
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d032      	beq.n	8003d5c <SX1276OnDio0Irq+0xdc>
                    irqFlags = SX1276Read( REG_IRQFLAGS2 );
 8003cf6:	203f      	movs	r0, #63	; 0x3f
 8003cf8:	f7fe ff8a 	bl	8002c10 <SX1276Read>
 8003cfc:	7028      	strb	r0, [r5, #0]
                    if( ( irqFlags & RF_IRQFLAGS2_CRCOK ) != RF_IRQFLAGS2_CRCOK )
 8003cfe:	782b      	ldrb	r3, [r5, #0]
 8003d00:	079b      	lsls	r3, r3, #30
 8003d02:	d42b      	bmi.n	8003d5c <SX1276OnDio0Irq+0xdc>
                        SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 8003d04:	210b      	movs	r1, #11
 8003d06:	203e      	movs	r0, #62	; 0x3e
 8003d08:	f7fe ff2f 	bl	8002b6a <SX1276Write>
                        SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 8003d0c:	2110      	movs	r1, #16
 8003d0e:	203f      	movs	r0, #63	; 0x3f
 8003d10:	f7fe ff2b 	bl	8002b6a <SX1276Write>
                        TimerStop( &RxTimeoutTimer );
 8003d14:	486a      	ldr	r0, [pc, #424]	; (8003ec0 <SX1276OnDio0Irq+0x240>)
 8003d16:	f009 f86d 	bl	800cdf4 <TimerStop>
                        if( SX1276.Settings.Fsk.RxContinuous == false )
 8003d1a:	1de3      	adds	r3, r4, #7
 8003d1c:	7fdd      	ldrb	r5, [r3, #31]
 8003d1e:	2d00      	cmp	r5, #0
 8003d20:	d10f      	bne.n	8003d42 <SX1276OnDio0Irq+0xc2>
                            TimerStop( &RxTimeoutSyncWord );
 8003d22:	0030      	movs	r0, r6
 8003d24:	f009 f866 	bl	800cdf4 <TimerStop>
                            SX1276.Settings.State = RF_IDLE;
 8003d28:	7125      	strb	r5, [r4, #4]
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d003      	beq.n	8003d38 <SX1276OnDio0Irq+0xb8>
 8003d30:	691b      	ldr	r3, [r3, #16]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d000      	beq.n	8003d38 <SX1276OnDio0Irq+0xb8>
                            RadioEvents->RxError( );
 8003d36:	4798      	blx	r3
                        SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	8623      	strh	r3, [r4, #48]	; 0x30
                        SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8003d3c:	87a3      	strh	r3, [r4, #60]	; 0x3c
                        SX1276.Settings.FskPacketHandler.Size = 0;
 8003d3e:	8763      	strh	r3, [r4, #58]	; 0x3a
                        break;
 8003d40:	e7aa      	b.n	8003c98 <SX1276OnDio0Irq+0x18>
                            SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 8003d42:	200d      	movs	r0, #13
 8003d44:	f7fe ff64 	bl	8002c10 <SX1276Read>
 8003d48:	2140      	movs	r1, #64	; 0x40
 8003d4a:	4301      	orrs	r1, r0
 8003d4c:	b2c9      	uxtb	r1, r1
 8003d4e:	200d      	movs	r0, #13
 8003d50:	f7fe ff0b 	bl	8002b6a <SX1276Write>
                            TimerStart( &RxTimeoutSyncWord );
 8003d54:	0030      	movs	r0, r6
 8003d56:	f008 ffd1 	bl	800ccfc <TimerStart>
 8003d5a:	e7e6      	b.n	8003d2a <SX1276OnDio0Irq+0xaa>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 8003d5c:	8f61      	ldrh	r1, [r4, #58]	; 0x3a
 8003d5e:	8fa0      	ldrh	r0, [r4, #60]	; 0x3c
 8003d60:	4d5a      	ldr	r5, [pc, #360]	; (8003ecc <SX1276OnDio0Irq+0x24c>)
 8003d62:	2900      	cmp	r1, #0
 8003d64:	d10b      	bne.n	8003d7e <SX1276OnDio0Irq+0xfe>
 8003d66:	2800      	cmp	r0, #0
 8003d68:	d109      	bne.n	8003d7e <SX1276OnDio0Irq+0xfe>
                    if( SX1276.Settings.Fsk.FixLen == false )
 8003d6a:	1ce3      	adds	r3, r4, #3
 8003d6c:	7fdb      	ldrb	r3, [r3, #31]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d124      	bne.n	8003dbc <SX1276OnDio0Irq+0x13c>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 8003d72:	3101      	adds	r1, #1
 8003d74:	4856      	ldr	r0, [pc, #344]	; (8003ed0 <SX1276OnDio0Irq+0x250>)
 8003d76:	f7ff ff7b 	bl	8003c70 <SX1276ReadFifo>
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8003d7a:	8fa0      	ldrh	r0, [r4, #60]	; 0x3c
 8003d7c:	8f61      	ldrh	r1, [r4, #58]	; 0x3a
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8003d7e:	1a09      	subs	r1, r1, r0
 8003d80:	b2c9      	uxtb	r1, r1
 8003d82:	1828      	adds	r0, r5, r0
 8003d84:	f7ff ff74 	bl	8003c70 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8003d88:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
                TimerStop( &RxTimeoutTimer );
 8003d8a:	484d      	ldr	r0, [pc, #308]	; (8003ec0 <SX1276OnDio0Irq+0x240>)
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8003d8c:	87a3      	strh	r3, [r4, #60]	; 0x3c
                TimerStop( &RxTimeoutTimer );
 8003d8e:	f009 f831 	bl	800cdf4 <TimerStop>
                if( SX1276.Settings.Fsk.RxContinuous == false )
 8003d92:	1de3      	adds	r3, r4, #7
 8003d94:	7fdb      	ldrb	r3, [r3, #31]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d115      	bne.n	8003dc6 <SX1276OnDio0Irq+0x146>
                    TimerStop( &RxTimeoutSyncWord );
 8003d9a:	0030      	movs	r0, r6
                    SX1276.Settings.State = RF_IDLE;
 8003d9c:	7123      	strb	r3, [r4, #4]
                    TimerStop( &RxTimeoutSyncWord );
 8003d9e:	f009 f829 	bl	800cdf4 <TimerStop>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d0c7      	beq.n	8003d38 <SX1276OnDio0Irq+0xb8>
 8003da8:	689e      	ldr	r6, [r3, #8]
 8003daa:	2e00      	cmp	r6, #0
 8003dac:	d0c4      	beq.n	8003d38 <SX1276OnDio0Irq+0xb8>
                    RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.FskPacketHandler.Size, SX1276.Settings.FskPacketHandler.RssiValue, 0 );
 8003dae:	2232      	movs	r2, #50	; 0x32
 8003db0:	8f61      	ldrh	r1, [r4, #58]	; 0x3a
 8003db2:	56a2      	ldrsb	r2, [r4, r2]
 8003db4:	2300      	movs	r3, #0
 8003db6:	0028      	movs	r0, r5
 8003db8:	47b0      	blx	r6
 8003dba:	e7bd      	b.n	8003d38 <SX1276OnDio0Irq+0xb8>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 8003dbc:	2032      	movs	r0, #50	; 0x32
 8003dbe:	f7fe ff27 	bl	8002c10 <SX1276Read>
 8003dc2:	8760      	strh	r0, [r4, #58]	; 0x3a
 8003dc4:	e7d9      	b.n	8003d7a <SX1276OnDio0Irq+0xfa>
                    SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 8003dc6:	200d      	movs	r0, #13
 8003dc8:	f7fe ff22 	bl	8002c10 <SX1276Read>
 8003dcc:	2140      	movs	r1, #64	; 0x40
 8003dce:	4301      	orrs	r1, r0
 8003dd0:	b2c9      	uxtb	r1, r1
 8003dd2:	200d      	movs	r0, #13
 8003dd4:	f7fe fec9 	bl	8002b6a <SX1276Write>
                    TimerStart( &RxTimeoutSyncWord );
 8003dd8:	0030      	movs	r0, r6
 8003dda:	f008 ff8f 	bl	800ccfc <TimerStart>
 8003dde:	e7e0      	b.n	8003da2 <SX1276OnDio0Irq+0x122>
                    SX1276.Settings.LoRaPacketHandler.SnrValue = ( ( ( int8_t )SX1276Read( REG_LR_PKTSNRVALUE ) ) + 2 ) >> 2;
 8003de0:	2019      	movs	r0, #25
 8003de2:	f7fe ff15 	bl	8002c10 <SX1276Read>
 8003de6:	0027      	movs	r7, r4
 8003de8:	b240      	sxtb	r0, r0
 8003dea:	3002      	adds	r0, #2
 8003dec:	3760      	adds	r7, #96	; 0x60
 8003dee:	1080      	asrs	r0, r0, #2
 8003df0:	7038      	strb	r0, [r7, #0]
                    int16_t rssi = SX1276Read( REG_LR_PKTRSSIVALUE );
 8003df2:	201a      	movs	r0, #26
 8003df4:	f7fe ff0c 	bl	8002c10 <SX1276Read>
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue < 0 )
 8003df8:	2300      	movs	r3, #0
 8003dfa:	0021      	movs	r1, r4
 8003dfc:	56fb      	ldrsb	r3, [r7, r3]
 8003dfe:	4a35      	ldr	r2, [pc, #212]	; (8003ed4 <SX1276OnDio0Irq+0x254>)
 8003e00:	b207      	sxth	r7, r0
 8003e02:	113f      	asrs	r7, r7, #4
 8003e04:	b2bf      	uxth	r7, r7
 8003e06:	b280      	uxth	r0, r0
 8003e08:	4694      	mov	ip, r2
 8003e0a:	3162      	adds	r1, #98	; 0x62
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	da39      	bge.n	8003e84 <SX1276OnDio0Irq+0x204>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8003e10:	68a2      	ldr	r2, [r4, #8]
 8003e12:	b29b      	uxth	r3, r3
 8003e14:	4562      	cmp	r2, ip
 8003e16:	d933      	bls.n	8003e80 <SX1276OnDio0Irq+0x200>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 8003e18:	3b9d      	subs	r3, #157	; 0x9d
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 8003e1a:	18c3      	adds	r3, r0, r3
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
 8003e1c:	18fb      	adds	r3, r7, r3
                    SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
 8003e1e:	2013      	movs	r0, #19
 8003e20:	0027      	movs	r7, r4
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
 8003e22:	800b      	strh	r3, [r1, #0]
                    SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
 8003e24:	f7fe fef4 	bl	8002c10 <SX1276Read>
 8003e28:	3764      	adds	r7, #100	; 0x64
 8003e2a:	7038      	strb	r0, [r7, #0]
                    SX1276Write( REG_LR_FIFOADDRPTR, SX1276Read( REG_LR_FIFORXCURRENTADDR ) );
 8003e2c:	2010      	movs	r0, #16
 8003e2e:	f7fe feef 	bl	8002c10 <SX1276Read>
 8003e32:	0001      	movs	r1, r0
 8003e34:	200d      	movs	r0, #13
 8003e36:	f7fe fe98 	bl	8002b6a <SX1276Write>
                    SX1276ReadFifo( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size );
 8003e3a:	7839      	ldrb	r1, [r7, #0]
 8003e3c:	4f23      	ldr	r7, [pc, #140]	; (8003ecc <SX1276OnDio0Irq+0x24c>)
 8003e3e:	0038      	movs	r0, r7
 8003e40:	f7ff ff16 	bl	8003c70 <SX1276ReadFifo>
                    if( SX1276.Settings.LoRa.RxContinuous == false )
 8003e44:	0023      	movs	r3, r4
 8003e46:	3356      	adds	r3, #86	; 0x56
 8003e48:	781b      	ldrb	r3, [r3, #0]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d100      	bne.n	8003e50 <SX1276OnDio0Irq+0x1d0>
                        SX1276.Settings.State = RF_IDLE;
 8003e4e:	7123      	strb	r3, [r4, #4]
                    TimerStop( &RxTimeoutTimer );
 8003e50:	0030      	movs	r0, r6
 8003e52:	f008 ffcf 	bl	800cdf4 <TimerStop>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8003e56:	686b      	ldr	r3, [r5, #4]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d100      	bne.n	8003e5e <SX1276OnDio0Irq+0x1de>
 8003e5c:	e71c      	b.n	8003c98 <SX1276OnDio0Irq+0x18>
 8003e5e:	689d      	ldr	r5, [r3, #8]
 8003e60:	2d00      	cmp	r5, #0
 8003e62:	d100      	bne.n	8003e66 <SX1276OnDio0Irq+0x1e6>
 8003e64:	e718      	b.n	8003c98 <SX1276OnDio0Irq+0x18>
                        RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size, SX1276.Settings.LoRaPacketHandler.RssiValue, SX1276.Settings.LoRaPacketHandler.SnrValue );
 8003e66:	0023      	movs	r3, r4
 8003e68:	0022      	movs	r2, r4
 8003e6a:	3360      	adds	r3, #96	; 0x60
 8003e6c:	781b      	ldrb	r3, [r3, #0]
 8003e6e:	3464      	adds	r4, #100	; 0x64
 8003e70:	3262      	adds	r2, #98	; 0x62
 8003e72:	2100      	movs	r1, #0
 8003e74:	5e52      	ldrsh	r2, [r2, r1]
 8003e76:	b25b      	sxtb	r3, r3
 8003e78:	7821      	ldrb	r1, [r4, #0]
 8003e7a:	0038      	movs	r0, r7
 8003e7c:	47a8      	blx	r5
 8003e7e:	e70b      	b.n	8003c98 <SX1276OnDio0Irq+0x18>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 8003e80:	3ba4      	subs	r3, #164	; 0xa4
 8003e82:	e7ca      	b.n	8003e1a <SX1276OnDio0Irq+0x19a>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8003e84:	68a3      	ldr	r3, [r4, #8]
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d902      	bls.n	8003e90 <SX1276OnDio0Irq+0x210>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 );
 8003e8a:	0003      	movs	r3, r0
 8003e8c:	3b9d      	subs	r3, #157	; 0x9d
 8003e8e:	e7c5      	b.n	8003e1c <SX1276OnDio0Irq+0x19c>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
 8003e90:	0003      	movs	r3, r0
 8003e92:	3ba4      	subs	r3, #164	; 0xa4
 8003e94:	e7c2      	b.n	8003e1c <SX1276OnDio0Irq+0x19c>
            TimerStop( &TxTimeoutTimer );
 8003e96:	4810      	ldr	r0, [pc, #64]	; (8003ed8 <SX1276OnDio0Irq+0x258>)
 8003e98:	f008 ffac 	bl	800cdf4 <TimerStop>
            switch( SX1276.Settings.Modem )
 8003e9c:	7963      	ldrb	r3, [r4, #5]
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d103      	bne.n	8003eaa <SX1276OnDio0Irq+0x22a>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_TXDONE );
 8003ea2:	2108      	movs	r1, #8
 8003ea4:	2012      	movs	r0, #18
 8003ea6:	f7fe fe60 	bl	8002b6a <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	7123      	strb	r3, [r4, #4]
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8003eae:	4b05      	ldr	r3, [pc, #20]	; (8003ec4 <SX1276OnDio0Irq+0x244>)
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d100      	bne.n	8003eb8 <SX1276OnDio0Irq+0x238>
 8003eb6:	e6ef      	b.n	8003c98 <SX1276OnDio0Irq+0x18>
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	e712      	b.n	8003ce2 <SX1276OnDio0Irq+0x62>
 8003ebc:	200015d8 	.word	0x200015d8
 8003ec0:	20001640 	.word	0x20001640
 8003ec4:	200002d0 	.word	0x200002d0
 8003ec8:	200015c0 	.word	0x200015c0
 8003ecc:	200002d8 	.word	0x200002d8
 8003ed0:	20001612 	.word	0x20001612
 8003ed4:	1f4add40 	.word	0x1f4add40
 8003ed8:	200015a8 	.word	0x200015a8

08003edc <SX1276OnDio1Irq>:
{
 8003edc:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.State )
 8003ede:	4c31      	ldr	r4, [pc, #196]	; (8003fa4 <SX1276OnDio1Irq+0xc8>)
 8003ee0:	7925      	ldrb	r5, [r4, #4]
 8003ee2:	2d01      	cmp	r5, #1
 8003ee4:	d002      	beq.n	8003eec <SX1276OnDio1Irq+0x10>
 8003ee6:	2d02      	cmp	r5, #2
 8003ee8:	d046      	beq.n	8003f78 <SX1276OnDio1Irq+0x9c>
}
 8003eea:	bd70      	pop	{r4, r5, r6, pc}
            switch( SX1276.Settings.Modem )
 8003eec:	7963      	ldrb	r3, [r4, #5]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d013      	beq.n	8003f1a <SX1276OnDio1Irq+0x3e>
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d1f9      	bne.n	8003eea <SX1276OnDio1Irq+0xe>
                TimerStop( &RxTimeoutTimer );
 8003ef6:	482c      	ldr	r0, [pc, #176]	; (8003fa8 <SX1276OnDio1Irq+0xcc>)
 8003ef8:	f008 ff7c 	bl	800cdf4 <TimerStop>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXTIMEOUT );
 8003efc:	2180      	movs	r1, #128	; 0x80
 8003efe:	2012      	movs	r0, #18
 8003f00:	f7fe fe33 	bl	8002b6a <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 8003f04:	2300      	movs	r3, #0
 8003f06:	7123      	strb	r3, [r4, #4]
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8003f08:	4b28      	ldr	r3, [pc, #160]	; (8003fac <SX1276OnDio1Irq+0xd0>)
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d0ec      	beq.n	8003eea <SX1276OnDio1Irq+0xe>
 8003f10:	68db      	ldr	r3, [r3, #12]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d0e9      	beq.n	8003eea <SX1276OnDio1Irq+0xe>
                    RadioEvents->RxTimeout( );
 8003f16:	4798      	blx	r3
 8003f18:	e7e7      	b.n	8003eea <SX1276OnDio1Irq+0xe>
                TimerStop( &RxTimeoutSyncWord );
 8003f1a:	4825      	ldr	r0, [pc, #148]	; (8003fb0 <SX1276OnDio1Irq+0xd4>)
 8003f1c:	f008 ff6a 	bl	800cdf4 <TimerStop>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 8003f20:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d10a      	bne.n	8003f3c <SX1276OnDio1Irq+0x60>
 8003f26:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d107      	bne.n	8003f3c <SX1276OnDio1Irq+0x60>
                    if( SX1276.Settings.Fsk.FixLen == false )
 8003f2c:	1ce3      	adds	r3, r4, #3
 8003f2e:	7fdb      	ldrb	r3, [r3, #31]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d117      	bne.n	8003f64 <SX1276OnDio1Irq+0x88>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 8003f34:	0029      	movs	r1, r5
 8003f36:	481f      	ldr	r0, [pc, #124]	; (8003fb4 <SX1276OnDio1Irq+0xd8>)
 8003f38:	f7ff fe9a 	bl	8003c70 <SX1276ReadFifo>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
 8003f3c:	0025      	movs	r5, r4
 8003f3e:	353e      	adds	r5, #62	; 0x3e
 8003f40:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 8003f42:	8f61      	ldrh	r1, [r4, #58]	; 0x3a
 8003f44:	481c      	ldr	r0, [pc, #112]	; (8003fb8 <SX1276OnDio1Irq+0xdc>)
 8003f46:	782b      	ldrb	r3, [r5, #0]
 8003f48:	1810      	adds	r0, r2, r0
 8003f4a:	1a89      	subs	r1, r1, r2
 8003f4c:	4299      	cmp	r1, r3
 8003f4e:	db0e      	blt.n	8003f6e <SX1276OnDio1Irq+0x92>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh - 1 );
 8003f50:	3b01      	subs	r3, #1
 8003f52:	b2d9      	uxtb	r1, r3
 8003f54:	f7ff fe8c 	bl	8003c70 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.FifoThresh - 1;
 8003f58:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 8003f5a:	782b      	ldrb	r3, [r5, #0]
 8003f5c:	3a01      	subs	r2, #1
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 8003f5e:	189b      	adds	r3, r3, r2
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
 8003f60:	87a3      	strh	r3, [r4, #60]	; 0x3c
}
 8003f62:	e7c2      	b.n	8003eea <SX1276OnDio1Irq+0xe>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 8003f64:	2032      	movs	r0, #50	; 0x32
 8003f66:	f7fe fe53 	bl	8002c10 <SX1276Read>
 8003f6a:	8760      	strh	r0, [r4, #58]	; 0x3a
 8003f6c:	e7e6      	b.n	8003f3c <SX1276OnDio1Irq+0x60>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8003f6e:	b2c9      	uxtb	r1, r1
 8003f70:	f7ff fe7e 	bl	8003c70 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
 8003f74:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 8003f76:	e7f3      	b.n	8003f60 <SX1276OnDio1Irq+0x84>
            switch( SX1276.Settings.Modem )
 8003f78:	7963      	ldrb	r3, [r4, #5]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d1b5      	bne.n	8003eea <SX1276OnDio1Irq+0xe>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
 8003f7e:	0025      	movs	r5, r4
 8003f80:	353f      	adds	r5, #63	; 0x3f
 8003f82:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 8003f84:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 8003f86:	480c      	ldr	r0, [pc, #48]	; (8003fb8 <SX1276OnDio1Irq+0xdc>)
 8003f88:	7829      	ldrb	r1, [r5, #0]
 8003f8a:	1810      	adds	r0, r2, r0
 8003f8c:	1a9b      	subs	r3, r3, r2
 8003f8e:	428b      	cmp	r3, r1
 8003f90:	dd04      	ble.n	8003f9c <SX1276OnDio1Irq+0xc0>
                    SX1276WriteFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.ChunkSize );
 8003f92:	f7ff fde9 	bl	8003b68 <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 8003f96:	782b      	ldrb	r3, [r5, #0]
 8003f98:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 8003f9a:	e7e0      	b.n	8003f5e <SX1276OnDio1Irq+0x82>
                    SX1276WriteFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8003f9c:	b2d9      	uxtb	r1, r3
 8003f9e:	f7ff fde3 	bl	8003b68 <SX1276WriteFifo>
 8003fa2:	e7e7      	b.n	8003f74 <SX1276OnDio1Irq+0x98>
 8003fa4:	200015d8 	.word	0x200015d8
 8003fa8:	20001640 	.word	0x20001640
 8003fac:	200002d0 	.word	0x200002d0
 8003fb0:	200015c0 	.word	0x200015c0
 8003fb4:	20001612 	.word	0x20001612
 8003fb8:	200002d8 	.word	0x200002d8

08003fbc <SX1276SetMaxPayloadLength>:
{
 8003fbc:	b570      	push	{r4, r5, r6, lr}
 8003fbe:	0004      	movs	r4, r0
 8003fc0:	000d      	movs	r5, r1
    SX1276SetModem( modem );
 8003fc2:	f7ff f97d 	bl	80032c0 <SX1276SetModem>
    switch( modem )
 8003fc6:	2c00      	cmp	r4, #0
 8003fc8:	d002      	beq.n	8003fd0 <SX1276SetMaxPayloadLength+0x14>
 8003fca:	2c01      	cmp	r4, #1
 8003fcc:	d00a      	beq.n	8003fe4 <SX1276SetMaxPayloadLength+0x28>
}
 8003fce:	bd70      	pop	{r4, r5, r6, pc}
        if( SX1276.Settings.Fsk.FixLen == false )
 8003fd0:	4b06      	ldr	r3, [pc, #24]	; (8003fec <SX1276SetMaxPayloadLength+0x30>)
 8003fd2:	3303      	adds	r3, #3
 8003fd4:	7fdb      	ldrb	r3, [r3, #31]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d1f9      	bne.n	8003fce <SX1276SetMaxPayloadLength+0x12>
            SX1276Write( REG_PAYLOADLENGTH, max );
 8003fda:	0029      	movs	r1, r5
 8003fdc:	2032      	movs	r0, #50	; 0x32
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
 8003fde:	f7fe fdc4 	bl	8002b6a <SX1276Write>
}
 8003fe2:	e7f4      	b.n	8003fce <SX1276SetMaxPayloadLength+0x12>
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
 8003fe4:	0029      	movs	r1, r5
 8003fe6:	2023      	movs	r0, #35	; 0x23
 8003fe8:	e7f9      	b.n	8003fde <SX1276SetMaxPayloadLength+0x22>
 8003fea:	46c0      	nop			; (mov r8, r8)
 8003fec:	200015d8 	.word	0x200015d8

08003ff0 <SX1276SetPublicNetwork>:
{
 8003ff0:	b510      	push	{r4, lr}
 8003ff2:	0004      	movs	r4, r0
    SX1276SetModem( MODEM_LORA );
 8003ff4:	2001      	movs	r0, #1
 8003ff6:	f7ff f963 	bl	80032c0 <SX1276SetModem>
    SX1276.Settings.LoRa.PublicNetwork = enable;
 8003ffa:	4b05      	ldr	r3, [pc, #20]	; (8004010 <SX1276SetPublicNetwork+0x20>)
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PUBLIC_SYNCWORD );
 8003ffc:	2134      	movs	r1, #52	; 0x34
    SX1276.Settings.LoRa.PublicNetwork = enable;
 8003ffe:	335c      	adds	r3, #92	; 0x5c
 8004000:	701c      	strb	r4, [r3, #0]
    if( enable == true )
 8004002:	2c00      	cmp	r4, #0
 8004004:	d100      	bne.n	8004008 <SX1276SetPublicNetwork+0x18>
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
 8004006:	2112      	movs	r1, #18
 8004008:	2039      	movs	r0, #57	; 0x39
 800400a:	f7fe fdae 	bl	8002b6a <SX1276Write>
}
 800400e:	bd10      	pop	{r4, pc}
 8004010:	200015d8 	.word	0x200015d8

08004014 <SX1276OnTimeoutIrq>:
{
 8004014:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.State )
 8004016:	4c2c      	ldr	r4, [pc, #176]	; (80040c8 <SX1276OnTimeoutIrq+0xb4>)
 8004018:	7923      	ldrb	r3, [r4, #4]
 800401a:	2b01      	cmp	r3, #1
 800401c:	d002      	beq.n	8004024 <SX1276OnTimeoutIrq+0x10>
 800401e:	2b02      	cmp	r3, #2
 8004020:	d02d      	beq.n	800407e <SX1276OnTimeoutIrq+0x6a>
}
 8004022:	bd70      	pop	{r4, r5, r6, pc}
        if( SX1276.Settings.Modem == MODEM_FSK )
 8004024:	7963      	ldrb	r3, [r4, #5]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d11b      	bne.n	8004062 <SX1276OnTimeoutIrq+0x4e>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 800402a:	8623      	strh	r3, [r4, #48]	; 0x30
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 800402c:	210b      	movs	r1, #11
 800402e:	203e      	movs	r0, #62	; 0x3e
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8004030:	87a3      	strh	r3, [r4, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = 0;
 8004032:	8763      	strh	r3, [r4, #58]	; 0x3a
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 8004034:	f7fe fd99 	bl	8002b6a <SX1276Write>
            SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 8004038:	2110      	movs	r1, #16
 800403a:	203f      	movs	r0, #63	; 0x3f
 800403c:	f7fe fd95 	bl	8002b6a <SX1276Write>
            if( SX1276.Settings.Fsk.RxContinuous == true )
 8004040:	1de3      	adds	r3, r4, #7
 8004042:	7fdb      	ldrb	r3, [r3, #31]
 8004044:	4d21      	ldr	r5, [pc, #132]	; (80040cc <SX1276OnTimeoutIrq+0xb8>)
 8004046:	2b00      	cmp	r3, #0
 8004048:	d014      	beq.n	8004074 <SX1276OnTimeoutIrq+0x60>
                SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 800404a:	200d      	movs	r0, #13
 800404c:	f7fe fde0 	bl	8002c10 <SX1276Read>
 8004050:	2140      	movs	r1, #64	; 0x40
 8004052:	4301      	orrs	r1, r0
 8004054:	b2c9      	uxtb	r1, r1
 8004056:	200d      	movs	r0, #13
 8004058:	f7fe fd87 	bl	8002b6a <SX1276Write>
                TimerStart( &RxTimeoutSyncWord );
 800405c:	0028      	movs	r0, r5
 800405e:	f008 fe4d 	bl	800ccfc <TimerStart>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8004062:	4b1b      	ldr	r3, [pc, #108]	; (80040d0 <SX1276OnTimeoutIrq+0xbc>)
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d0db      	beq.n	8004022 <SX1276OnTimeoutIrq+0xe>
 800406a:	68db      	ldr	r3, [r3, #12]
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800406c:	2b00      	cmp	r3, #0
 800406e:	d0d8      	beq.n	8004022 <SX1276OnTimeoutIrq+0xe>
            RadioEvents->TxTimeout( );
 8004070:	4798      	blx	r3
}
 8004072:	e7d6      	b.n	8004022 <SX1276OnTimeoutIrq+0xe>
                TimerStop( &RxTimeoutSyncWord );
 8004074:	0028      	movs	r0, r5
                SX1276.Settings.State = RF_IDLE;
 8004076:	7123      	strb	r3, [r4, #4]
                TimerStop( &RxTimeoutSyncWord );
 8004078:	f008 febc 	bl	800cdf4 <TimerStop>
 800407c:	e7f1      	b.n	8004062 <SX1276OnTimeoutIrq+0x4e>
        SX1276Reset( );
 800407e:	f7fe fd2d 	bl	8002adc <SX1276Reset>
        RxChainCalibration( );
 8004082:	f7fe fdcf 	bl	8002c24 <RxChainCalibration>
 8004086:	f7fe ff33 	bl	8002ef0 <SX1276SetOpMode.part.2>
 800408a:	4e12      	ldr	r6, [pc, #72]	; (80040d4 <SX1276OnTimeoutIrq+0xc0>)
 800408c:	0035      	movs	r5, r6
 800408e:	3648      	adds	r6, #72	; 0x48
 8004090:	3518      	adds	r5, #24
            SX1276SetModem( RadioRegsInit[i].Modem );
 8004092:	7828      	ldrb	r0, [r5, #0]
 8004094:	f7ff f914 	bl	80032c0 <SX1276SetModem>
            SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 8004098:	78a9      	ldrb	r1, [r5, #2]
 800409a:	7868      	ldrb	r0, [r5, #1]
 800409c:	3503      	adds	r5, #3
 800409e:	f7fe fd64 	bl	8002b6a <SX1276Write>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 80040a2:	42b5      	cmp	r5, r6
 80040a4:	d1f5      	bne.n	8004092 <SX1276OnTimeoutIrq+0x7e>
        SX1276SetModem( MODEM_FSK );
 80040a6:	2000      	movs	r0, #0
 80040a8:	f7ff f90a 	bl	80032c0 <SX1276SetModem>
        SX1276SetPublicNetwork( SX1276.Settings.LoRa.PublicNetwork );
 80040ac:	0023      	movs	r3, r4
 80040ae:	335c      	adds	r3, #92	; 0x5c
 80040b0:	7818      	ldrb	r0, [r3, #0]
 80040b2:	f7ff ff9d 	bl	8003ff0 <SX1276SetPublicNetwork>
        SX1276.Settings.State = RF_IDLE;
 80040b6:	2300      	movs	r3, #0
 80040b8:	7123      	strb	r3, [r4, #4]
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 80040ba:	4b05      	ldr	r3, [pc, #20]	; (80040d0 <SX1276OnTimeoutIrq+0xbc>)
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d0af      	beq.n	8004022 <SX1276OnTimeoutIrq+0xe>
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	e7d2      	b.n	800406c <SX1276OnTimeoutIrq+0x58>
 80040c6:	46c0      	nop			; (mov r8, r8)
 80040c8:	200015d8 	.word	0x200015d8
 80040cc:	200015c0 	.word	0x200015c0
 80040d0:	200002d0 	.word	0x200002d0
 80040d4:	0800f618 	.word	0x0800f618

080040d8 <SX1276GetWakeupTime>:
    return ( uint32_t )LoRaBoardCallbacks->SX1276BoardGetWakeTime( ) + RADIO_WAKEUP_TIME;// BOARD_WAKEUP_TIME;
 80040d8:	4b03      	ldr	r3, [pc, #12]	; (80040e8 <SX1276GetWakeupTime+0x10>)
{
 80040da:	b510      	push	{r4, lr}
    return ( uint32_t )LoRaBoardCallbacks->SX1276BoardGetWakeTime( ) + RADIO_WAKEUP_TIME;// BOARD_WAKEUP_TIME;
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	4798      	blx	r3
 80040e2:	3002      	adds	r0, #2
}
 80040e4:	bd10      	pop	{r4, pc}
 80040e6:	46c0      	nop			; (mov r8, r8)
 80040e8:	200002d0 	.word	0x200002d0

080040ec <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 80040ec:	2280      	movs	r2, #128	; 0x80
 80040ee:	4b10      	ldr	r3, [pc, #64]	; (8004130 <SystemInit+0x44>)
 80040f0:	0052      	lsls	r2, r2, #1
 80040f2:	6819      	ldr	r1, [r3, #0]
 80040f4:	430a      	orrs	r2, r1
 80040f6:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 80040f8:	68da      	ldr	r2, [r3, #12]
 80040fa:	490e      	ldr	r1, [pc, #56]	; (8004134 <SystemInit+0x48>)
 80040fc:	400a      	ands	r2, r1
 80040fe:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	490d      	ldr	r1, [pc, #52]	; (8004138 <SystemInit+0x4c>)
 8004104:	400a      	ands	r2, r1

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8004106:	2101      	movs	r1, #1
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8004108:	601a      	str	r2, [r3, #0]
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800410a:	689a      	ldr	r2, [r3, #8]
 800410c:	438a      	bics	r2, r1
 800410e:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	490a      	ldr	r1, [pc, #40]	; (800413c <SystemInit+0x50>)
 8004114:	400a      	ands	r2, r1
 8004116:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8004118:	68da      	ldr	r2, [r3, #12]
 800411a:	4909      	ldr	r1, [pc, #36]	; (8004140 <SystemInit+0x54>)
 800411c:	400a      	ands	r2, r1
 800411e:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8004120:	2200      	movs	r2, #0
 8004122:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004124:	2280      	movs	r2, #128	; 0x80
 8004126:	4b07      	ldr	r3, [pc, #28]	; (8004144 <SystemInit+0x58>)
 8004128:	0512      	lsls	r2, r2, #20
 800412a:	609a      	str	r2, [r3, #8]
#endif
}
 800412c:	4770      	bx	lr
 800412e:	46c0      	nop			; (mov r8, r8)
 8004130:	40021000 	.word	0x40021000
 8004134:	88ff400c 	.word	0x88ff400c
 8004138:	fef6fff6 	.word	0xfef6fff6
 800413c:	fffbffff 	.word	0xfffbffff
 8004140:	ff02ffff 	.word	0xff02ffff
 8004144:	e000ed00 	.word	0xe000ed00

08004148 <HAL_Init>:
#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
#endif /* PREREAD_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004148:	2302      	movs	r3, #2
 800414a:	4a08      	ldr	r2, [pc, #32]	; (800416c <HAL_Init+0x24>)
{
 800414c:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800414e:	6811      	ldr	r1, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004150:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004152:	430b      	orrs	r3, r1
 8004154:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004156:	f00a f88f 	bl	800e278 <HAL_InitTick>
 800415a:	1e04      	subs	r4, r0, #0
 800415c:	d103      	bne.n	8004166 <HAL_Init+0x1e>
    status = HAL_ERROR;
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800415e:	f00a f893 	bl	800e288 <HAL_MspInit>
  }

  /* Return function status */
  return status;
}
 8004162:	0020      	movs	r0, r4
 8004164:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8004166:	2401      	movs	r4, #1
 8004168:	e7fb      	b.n	8004162 <HAL_Init+0x1a>
 800416a:	46c0      	nop			; (mov r8, r8)
 800416c:	40022000 	.word	0x40022000

08004170 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8004170:	4a02      	ldr	r2, [pc, #8]	; (800417c <HAL_IncTick+0xc>)
 8004172:	6813      	ldr	r3, [r2, #0]
 8004174:	3301      	adds	r3, #1
 8004176:	6013      	str	r3, [r2, #0]
}
 8004178:	4770      	bx	lr
 800417a:	46c0      	nop			; (mov r8, r8)
 800417c:	20001658 	.word	0x20001658

08004180 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8004180:	4b01      	ldr	r3, [pc, #4]	; (8004188 <HAL_GetTick+0x8>)
 8004182:	6818      	ldr	r0, [r3, #0]
}
 8004184:	4770      	bx	lr
 8004186:	46c0      	nop			; (mov r8, r8)
 8004188:	20001658 	.word	0x20001658

0800418c <HAL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enables the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 800418c:	2301      	movs	r3, #1
 800418e:	4a02      	ldr	r2, [pc, #8]	; (8004198 <HAL_DBGMCU_EnableDBGSleepMode+0xc>)
 8004190:	6851      	ldr	r1, [r2, #4]
 8004192:	430b      	orrs	r3, r1
 8004194:	6053      	str	r3, [r2, #4]
}
 8004196:	4770      	bx	lr
 8004198:	40015800 	.word	0x40015800

0800419c <HAL_DBGMCU_EnableDBGStopMode>:
  * @brief  Enables the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 800419c:	2302      	movs	r3, #2
 800419e:	4a02      	ldr	r2, [pc, #8]	; (80041a8 <HAL_DBGMCU_EnableDBGStopMode+0xc>)
 80041a0:	6851      	ldr	r1, [r2, #4]
 80041a2:	430b      	orrs	r3, r1
 80041a4:	6053      	str	r3, [r2, #4]
}
 80041a6:	4770      	bx	lr
 80041a8:	40015800 	.word	0x40015800

080041ac <HAL_DBGMCU_EnableDBGStandbyMode>:
  * @brief  Enables the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 80041ac:	2304      	movs	r3, #4
 80041ae:	4a02      	ldr	r2, [pc, #8]	; (80041b8 <HAL_DBGMCU_EnableDBGStandbyMode+0xc>)
 80041b0:	6851      	ldr	r1, [r2, #4]
 80041b2:	430b      	orrs	r3, r1
 80041b4:	6053      	str	r3, [r2, #4]
}
 80041b6:	4770      	bx	lr
 80041b8:	40015800 	.word	0x40015800

080041bc <ADC_DelayMicroSecond>:
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 80041bc:	4b08      	ldr	r3, [pc, #32]	; (80041e0 <ADC_DelayMicroSecond+0x24>)
{
 80041be:	b513      	push	{r0, r1, r4, lr}
 80041c0:	0004      	movs	r4, r0
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 80041c2:	4908      	ldr	r1, [pc, #32]	; (80041e4 <ADC_DelayMicroSecond+0x28>)
 80041c4:	6818      	ldr	r0, [r3, #0]
 80041c6:	f7fb ffcf 	bl	8000168 <__udivsi3>
 80041ca:	4344      	muls	r4, r0
 80041cc:	9401      	str	r4, [sp, #4]

  while(waitLoopIndex != 0U)
 80041ce:	9b01      	ldr	r3, [sp, #4]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d100      	bne.n	80041d6 <ADC_DelayMicroSecond+0x1a>
  {
    waitLoopIndex--;
  } 
}
 80041d4:	bd13      	pop	{r0, r1, r4, pc}
    waitLoopIndex--;
 80041d6:	9b01      	ldr	r3, [sp, #4]
 80041d8:	3b01      	subs	r3, #1
 80041da:	9301      	str	r3, [sp, #4]
 80041dc:	e7f7      	b.n	80041ce <ADC_DelayMicroSecond+0x12>
 80041de:	46c0      	nop			; (mov r8, r8)
 80041e0:	20000044 	.word	0x20000044
 80041e4:	000f4240 	.word	0x000f4240

080041e8 <ADC_Enable>:
  if (ADC_IS_ENABLE(hadc) == RESET)
 80041e8:	2103      	movs	r1, #3
 80041ea:	6803      	ldr	r3, [r0, #0]
{
 80041ec:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 80041ee:	689a      	ldr	r2, [r3, #8]
{
 80041f0:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 80041f2:	400a      	ands	r2, r1
 80041f4:	2a01      	cmp	r2, #1
 80041f6:	d104      	bne.n	8004202 <ADC_Enable+0x1a>
 80041f8:	6819      	ldr	r1, [r3, #0]
 80041fa:	4211      	tst	r1, r2
 80041fc:	d001      	beq.n	8004202 <ADC_Enable+0x1a>
  return HAL_OK;
 80041fe:	2000      	movs	r0, #0
}
 8004200:	bd70      	pop	{r4, r5, r6, pc}
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8004202:	6899      	ldr	r1, [r3, #8]
 8004204:	4a13      	ldr	r2, [pc, #76]	; (8004254 <ADC_Enable+0x6c>)
 8004206:	4211      	tst	r1, r2
 8004208:	d008      	beq.n	800421c <ADC_Enable+0x34>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800420a:	2310      	movs	r3, #16
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800420c:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800420e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8004210:	4313      	orrs	r3, r2
 8004212:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004214:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004216:	4303      	orrs	r3, r0
 8004218:	65a3      	str	r3, [r4, #88]	; 0x58
      return HAL_ERROR;
 800421a:	e7f1      	b.n	8004200 <ADC_Enable+0x18>
    __HAL_ADC_ENABLE(hadc);
 800421c:	2501      	movs	r5, #1
 800421e:	689a      	ldr	r2, [r3, #8]
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8004220:	0028      	movs	r0, r5
    __HAL_ADC_ENABLE(hadc);
 8004222:	432a      	orrs	r2, r5
 8004224:	609a      	str	r2, [r3, #8]
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8004226:	f7ff ffc9 	bl	80041bc <ADC_DelayMicroSecond>
    tickstart = HAL_GetTick();
 800422a:	f7ff ffa9 	bl	8004180 <HAL_GetTick>
 800422e:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004230:	6823      	ldr	r3, [r4, #0]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	422b      	tst	r3, r5
 8004236:	d1e2      	bne.n	80041fe <ADC_Enable+0x16>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004238:	f7ff ffa2 	bl	8004180 <HAL_GetTick>
 800423c:	1b80      	subs	r0, r0, r6
 800423e:	280a      	cmp	r0, #10
 8004240:	d9f6      	bls.n	8004230 <ADC_Enable+0x48>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004242:	2310      	movs	r3, #16
 8004244:	6d62      	ldr	r2, [r4, #84]	; 0x54
        return HAL_ERROR;
 8004246:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004248:	4313      	orrs	r3, r2
 800424a:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800424c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800424e:	431d      	orrs	r5, r3
 8004250:	65a5      	str	r5, [r4, #88]	; 0x58
        return HAL_ERROR;
 8004252:	e7d5      	b.n	8004200 <ADC_Enable+0x18>
 8004254:	80000017 	.word	0x80000017

08004258 <HAL_ADC_MspInit>:
}
 8004258:	4770      	bx	lr
	...

0800425c <HAL_ADC_Init>:
{
 800425c:	b570      	push	{r4, r5, r6, lr}
 800425e:	0004      	movs	r4, r0
    return HAL_ERROR;
 8004260:	2001      	movs	r0, #1
  if(hadc == NULL)
 8004262:	2c00      	cmp	r4, #0
 8004264:	d019      	beq.n	800429a <HAL_ADC_Init+0x3e>
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004266:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004268:	2b00      	cmp	r3, #0
 800426a:	d106      	bne.n	800427a <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
 800426c:	0022      	movs	r2, r4
 800426e:	3250      	adds	r2, #80	; 0x50
    ADC_CLEAR_ERRORCODE(hadc);
 8004270:	65a3      	str	r3, [r4, #88]	; 0x58
    HAL_ADC_MspInit(hadc);
 8004272:	0020      	movs	r0, r4
    hadc->Lock = HAL_UNLOCKED;
 8004274:	7013      	strb	r3, [r2, #0]
    HAL_ADC_MspInit(hadc);
 8004276:	f7ff ffef 	bl	8004258 <HAL_ADC_MspInit>
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800427a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800427c:	06db      	lsls	r3, r3, #27
 800427e:	d404      	bmi.n	800428a <HAL_ADC_Init+0x2e>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8004280:	2204      	movs	r2, #4
 8004282:	6823      	ldr	r3, [r4, #0]
 8004284:	6898      	ldr	r0, [r3, #8]
 8004286:	4010      	ands	r0, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8004288:	d008      	beq.n	800429c <HAL_ADC_Init+0x40>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800428a:	2310      	movs	r3, #16
 800428c:	6d62      	ldr	r2, [r4, #84]	; 0x54
    return HAL_ERROR;
 800428e:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004290:	4313      	orrs	r3, r2
 8004292:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 8004294:	2300      	movs	r3, #0
 8004296:	3450      	adds	r4, #80	; 0x50
 8004298:	7023      	strb	r3, [r4, #0]
}
 800429a:	bd70      	pop	{r4, r5, r6, pc}
  ADC_STATE_CLR_SET(hadc->State,
 800429c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800429e:	4955      	ldr	r1, [pc, #340]	; (80043f4 <HAL_ADC_Init+0x198>)
 80042a0:	4011      	ands	r1, r2
 80042a2:	2202      	movs	r2, #2
 80042a4:	430a      	orrs	r2, r1
 80042a6:	6562      	str	r2, [r4, #84]	; 0x54
  if (ADC_IS_ENABLE(hadc) == RESET)
 80042a8:	2203      	movs	r2, #3
 80042aa:	6899      	ldr	r1, [r3, #8]
 80042ac:	4011      	ands	r1, r2
 80042ae:	4a52      	ldr	r2, [pc, #328]	; (80043f8 <HAL_ADC_Init+0x19c>)
 80042b0:	2901      	cmp	r1, #1
 80042b2:	d102      	bne.n	80042ba <HAL_ADC_Init+0x5e>
 80042b4:	681d      	ldr	r5, [r3, #0]
 80042b6:	420d      	tst	r5, r1
 80042b8:	d119      	bne.n	80042ee <HAL_ADC_Init+0x92>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 80042ba:	2680      	movs	r6, #128	; 0x80
 80042bc:	6861      	ldr	r1, [r4, #4]
 80042be:	05f6      	lsls	r6, r6, #23
 80042c0:	004d      	lsls	r5, r1, #1
 80042c2:	086d      	lsrs	r5, r5, #1
 80042c4:	42b5      	cmp	r5, r6
 80042c6:	d003      	beq.n	80042d0 <HAL_ADC_Init+0x74>
 80042c8:	2580      	movs	r5, #128	; 0x80
 80042ca:	062d      	lsls	r5, r5, #24
 80042cc:	42a9      	cmp	r1, r5
 80042ce:	d176      	bne.n	80043be <HAL_ADC_Init+0x162>
 80042d0:	691d      	ldr	r5, [r3, #16]
 80042d2:	00ad      	lsls	r5, r5, #2
 80042d4:	08ad      	lsrs	r5, r5, #2
 80042d6:	611d      	str	r5, [r3, #16]
 80042d8:	691d      	ldr	r5, [r3, #16]
 80042da:	4329      	orrs	r1, r5
 80042dc:	6119      	str	r1, [r3, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 80042de:	2518      	movs	r5, #24
 80042e0:	68d9      	ldr	r1, [r3, #12]
 80042e2:	43a9      	bics	r1, r5
 80042e4:	60d9      	str	r1, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 80042e6:	68d9      	ldr	r1, [r3, #12]
 80042e8:	68a5      	ldr	r5, [r4, #8]
 80042ea:	4329      	orrs	r1, r5
 80042ec:	60d9      	str	r1, [r3, #12]
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 80042ee:	6811      	ldr	r1, [r2, #0]
 80042f0:	4d42      	ldr	r5, [pc, #264]	; (80043fc <HAL_ADC_Init+0x1a0>)
 80042f2:	4029      	ands	r1, r5
 80042f4:	6011      	str	r1, [r2, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 80042f6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80042f8:	6815      	ldr	r5, [r2, #0]
 80042fa:	0649      	lsls	r1, r1, #25
 80042fc:	4329      	orrs	r1, r5
 80042fe:	6011      	str	r1, [r2, #0]
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8004300:	2280      	movs	r2, #128	; 0x80
 8004302:	6899      	ldr	r1, [r3, #8]
 8004304:	0552      	lsls	r2, r2, #21
 8004306:	4211      	tst	r1, r2
 8004308:	d102      	bne.n	8004310 <HAL_ADC_Init+0xb4>
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 800430a:	6899      	ldr	r1, [r3, #8]
 800430c:	430a      	orrs	r2, r1
 800430e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8004310:	68da      	ldr	r2, [r3, #12]
 8004312:	493b      	ldr	r1, [pc, #236]	; (8004400 <HAL_ADC_Init+0x1a4>)
 8004314:	400a      	ands	r2, r1
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8004316:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8004318:	60da      	str	r2, [r3, #12]
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800431a:	68dd      	ldr	r5, [r3, #12]
 800431c:	68e2      	ldr	r2, [r4, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800431e:	2902      	cmp	r1, #2
 8004320:	d100      	bne.n	8004324 <HAL_ADC_Init+0xc8>
 8004322:	2004      	movs	r0, #4
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004324:	6b26      	ldr	r6, [r4, #48]	; 0x30
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8004326:	1c61      	adds	r1, r4, #1
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004328:	4332      	orrs	r2, r6
 800432a:	432a      	orrs	r2, r5
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800432c:	69a5      	ldr	r5, [r4, #24]
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800432e:	7fc9      	ldrb	r1, [r1, #31]
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8004330:	03ad      	lsls	r5, r5, #14
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004332:	432a      	orrs	r2, r5
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8004334:	69e5      	ldr	r5, [r4, #28]
 8004336:	03ed      	lsls	r5, r5, #15
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004338:	432a      	orrs	r2, r5
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800433a:	034d      	lsls	r5, r1, #13
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800433c:	432a      	orrs	r2, r5
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800433e:	0025      	movs	r5, r4
 8004340:	352c      	adds	r5, #44	; 0x2c
 8004342:	782d      	ldrb	r5, [r5, #0]
 8004344:	006d      	lsls	r5, r5, #1
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004346:	432a      	orrs	r2, r5
 8004348:	4302      	orrs	r2, r0
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800434a:	20c2      	movs	r0, #194	; 0xc2
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800434c:	60da      	str	r2, [r3, #12]
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800434e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004350:	30ff      	adds	r0, #255	; 0xff
 8004352:	4282      	cmp	r2, r0
 8004354:	d004      	beq.n	8004360 <HAL_ADC_Init+0x104>
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8004356:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8004358:	68d8      	ldr	r0, [r3, #12]
 800435a:	432a      	orrs	r2, r5
 800435c:	4302      	orrs	r2, r0
 800435e:	60da      	str	r2, [r3, #12]
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004360:	1ca2      	adds	r2, r4, #2
 8004362:	7fd2      	ldrb	r2, [r2, #31]
 8004364:	2a01      	cmp	r2, #1
 8004366:	d106      	bne.n	8004376 <HAL_ADC_Init+0x11a>
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8004368:	2900      	cmp	r1, #0
 800436a:	d134      	bne.n	80043d6 <HAL_ADC_Init+0x17a>
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 800436c:	2280      	movs	r2, #128	; 0x80
 800436e:	68d9      	ldr	r1, [r3, #12]
 8004370:	0252      	lsls	r2, r2, #9
 8004372:	430a      	orrs	r2, r1
 8004374:	60da      	str	r2, [r3, #12]
  if (hadc->Init.OversamplingMode == ENABLE)
 8004376:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8004378:	691a      	ldr	r2, [r3, #16]
  if (hadc->Init.OversamplingMode == ENABLE)
 800437a:	2901      	cmp	r1, #1
 800437c:	d133      	bne.n	80043e6 <HAL_ADC_Init+0x18a>
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 800437e:	4821      	ldr	r0, [pc, #132]	; (8004404 <HAL_ADC_Init+0x1a8>)
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8004380:	6c65      	ldr	r5, [r4, #68]	; 0x44
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8004382:	4002      	ands	r2, r0
 8004384:	611a      	str	r2, [r3, #16]
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8004386:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004388:	6918      	ldr	r0, [r3, #16]
 800438a:	432a      	orrs	r2, r5
                               hadc->Init.Oversample.RightBitShift             |
 800438c:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 800438e:	432a      	orrs	r2, r5
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8004390:	4302      	orrs	r2, r0
 8004392:	611a      	str	r2, [r3, #16]
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8004394:	691a      	ldr	r2, [r3, #16]
 8004396:	4311      	orrs	r1, r2
 8004398:	6119      	str	r1, [r3, #16]
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 800439a:	2107      	movs	r1, #7
 800439c:	695a      	ldr	r2, [r3, #20]
  ADC_CLEAR_ERRORCODE(hadc);
 800439e:	2000      	movs	r0, #0
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 80043a0:	438a      	bics	r2, r1
 80043a2:	615a      	str	r2, [r3, #20]
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 80043a4:	695a      	ldr	r2, [r3, #20]
 80043a6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80043a8:	430a      	orrs	r2, r1
 80043aa:	615a      	str	r2, [r3, #20]
  ADC_STATE_CLR_SET(hadc->State,
 80043ac:	2203      	movs	r2, #3
  ADC_CLEAR_ERRORCODE(hadc);
 80043ae:	65a0      	str	r0, [r4, #88]	; 0x58
  ADC_STATE_CLR_SET(hadc->State,
 80043b0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80043b2:	4393      	bics	r3, r2
 80043b4:	001a      	movs	r2, r3
 80043b6:	2301      	movs	r3, #1
 80043b8:	4313      	orrs	r3, r2
 80043ba:	6563      	str	r3, [r4, #84]	; 0x54
  return HAL_OK;
 80043bc:	e76d      	b.n	800429a <HAL_ADC_Init+0x3e>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 80043be:	691d      	ldr	r5, [r3, #16]
 80043c0:	4e11      	ldr	r6, [pc, #68]	; (8004408 <HAL_ADC_Init+0x1ac>)
 80043c2:	00ad      	lsls	r5, r5, #2
 80043c4:	08ad      	lsrs	r5, r5, #2
 80043c6:	611d      	str	r5, [r3, #16]
 80043c8:	6815      	ldr	r5, [r2, #0]
 80043ca:	4035      	ands	r5, r6
 80043cc:	6015      	str	r5, [r2, #0]
 80043ce:	6815      	ldr	r5, [r2, #0]
 80043d0:	4329      	orrs	r1, r5
 80043d2:	6011      	str	r1, [r2, #0]
 80043d4:	e783      	b.n	80042de <HAL_ADC_Init+0x82>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80043d6:	2120      	movs	r1, #32
 80043d8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80043da:	4301      	orrs	r1, r0
 80043dc:	6561      	str	r1, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80043de:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80043e0:	430a      	orrs	r2, r1
 80043e2:	65a2      	str	r2, [r4, #88]	; 0x58
 80043e4:	e7c7      	b.n	8004376 <HAL_ADC_Init+0x11a>
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 80043e6:	2101      	movs	r1, #1
 80043e8:	420a      	tst	r2, r1
 80043ea:	d0d6      	beq.n	800439a <HAL_ADC_Init+0x13e>
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 80043ec:	691a      	ldr	r2, [r3, #16]
 80043ee:	438a      	bics	r2, r1
 80043f0:	611a      	str	r2, [r3, #16]
 80043f2:	e7d2      	b.n	800439a <HAL_ADC_Init+0x13e>
 80043f4:	fffffefd 	.word	0xfffffefd
 80043f8:	40012708 	.word	0x40012708
 80043fc:	fdffffff 	.word	0xfdffffff
 8004400:	fffe0219 	.word	0xfffe0219
 8004404:	fffffc03 	.word	0xfffffc03
 8004408:	ffc3ffff 	.word	0xffc3ffff

0800440c <HAL_ADC_Start>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800440c:	6803      	ldr	r3, [r0, #0]
{
 800440e:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004410:	689b      	ldr	r3, [r3, #8]
{
 8004412:	0004      	movs	r4, r0
    tmp_hal_status = HAL_BUSY;
 8004414:	2002      	movs	r0, #2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004416:	075b      	lsls	r3, r3, #29
 8004418:	d41a      	bmi.n	8004450 <HAL_ADC_Start+0x44>
    __HAL_LOCK(hadc);
 800441a:	0025      	movs	r5, r4
 800441c:	3550      	adds	r5, #80	; 0x50
 800441e:	782b      	ldrb	r3, [r5, #0]
 8004420:	2b01      	cmp	r3, #1
 8004422:	d015      	beq.n	8004450 <HAL_ADC_Start+0x44>
 8004424:	2301      	movs	r3, #1
 8004426:	702b      	strb	r3, [r5, #0]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8004428:	69e3      	ldr	r3, [r4, #28]
 800442a:	2b01      	cmp	r3, #1
 800442c:	d111      	bne.n	8004452 <HAL_ADC_Start+0x46>
      ADC_STATE_CLR_SET(hadc->State,
 800442e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004430:	4a0b      	ldr	r2, [pc, #44]	; (8004460 <HAL_ADC_Start+0x54>)
      ADC_CLEAR_ERRORCODE(hadc);
 8004432:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 8004434:	401a      	ands	r2, r3
 8004436:	2380      	movs	r3, #128	; 0x80
 8004438:	005b      	lsls	r3, r3, #1
 800443a:	4313      	orrs	r3, r2
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800443c:	221c      	movs	r2, #28
      ADC_STATE_CLR_SET(hadc->State,
 800443e:	6563      	str	r3, [r4, #84]	; 0x54
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004440:	6823      	ldr	r3, [r4, #0]
      ADC_CLEAR_ERRORCODE(hadc);
 8004442:	65a0      	str	r0, [r4, #88]	; 0x58
      __HAL_UNLOCK(hadc);
 8004444:	7028      	strb	r0, [r5, #0]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004446:	601a      	str	r2, [r3, #0]
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8004448:	6899      	ldr	r1, [r3, #8]
 800444a:	3a18      	subs	r2, #24
 800444c:	430a      	orrs	r2, r1
 800444e:	609a      	str	r2, [r3, #8]
}
 8004450:	bd70      	pop	{r4, r5, r6, pc}
      tmp_hal_status = ADC_Enable(hadc);
 8004452:	0020      	movs	r0, r4
 8004454:	f7ff fec8 	bl	80041e8 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8004458:	2800      	cmp	r0, #0
 800445a:	d0e8      	beq.n	800442e <HAL_ADC_Start+0x22>
 800445c:	e7f8      	b.n	8004450 <HAL_ADC_Start+0x44>
 800445e:	46c0      	nop			; (mov r8, r8)
 8004460:	fffff0fe 	.word	0xfffff0fe

08004464 <HAL_ADC_PollForConversion>:
{
 8004464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8004466:	6945      	ldr	r5, [r0, #20]
{
 8004468:	0004      	movs	r4, r0
 800446a:	000e      	movs	r6, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800446c:	2d08      	cmp	r5, #8
 800446e:	d00d      	beq.n	800448c <HAL_ADC_PollForConversion+0x28>
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8004470:	6803      	ldr	r3, [r0, #0]
 8004472:	2001      	movs	r0, #1
 8004474:	68db      	ldr	r3, [r3, #12]
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8004476:	250c      	movs	r5, #12
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8004478:	4203      	tst	r3, r0
 800447a:	d007      	beq.n	800448c <HAL_ADC_PollForConversion+0x28>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800447c:	2320      	movs	r3, #32
 800447e:	6d62      	ldr	r2, [r4, #84]	; 0x54
      __HAL_UNLOCK(hadc);
 8004480:	3450      	adds	r4, #80	; 0x50
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004482:	4313      	orrs	r3, r2
 8004484:	6063      	str	r3, [r4, #4]
      __HAL_UNLOCK(hadc);
 8004486:	2300      	movs	r3, #0
 8004488:	7023      	strb	r3, [r4, #0]
}
 800448a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  tickstart = HAL_GetTick();
 800448c:	f7ff fe78 	bl	8004180 <HAL_GetTick>
 8004490:	0007      	movs	r7, r0
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8004492:	6823      	ldr	r3, [r4, #0]
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	4215      	tst	r5, r2
 8004498:	d024      	beq.n	80044e4 <HAL_ADC_PollForConversion+0x80>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800449a:	2280      	movs	r2, #128	; 0x80
 800449c:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800449e:	0092      	lsls	r2, r2, #2
 80044a0:	430a      	orrs	r2, r1
 80044a2:	6562      	str	r2, [r4, #84]	; 0x54
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80044a4:	22c0      	movs	r2, #192	; 0xc0
 80044a6:	68d9      	ldr	r1, [r3, #12]
 80044a8:	0112      	lsls	r2, r2, #4
 80044aa:	4211      	tst	r1, r2
 80044ac:	d113      	bne.n	80044d6 <HAL_ADC_PollForConversion+0x72>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80044ae:	1c62      	adds	r2, r4, #1
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80044b0:	7fd2      	ldrb	r2, [r2, #31]
 80044b2:	2a00      	cmp	r2, #0
 80044b4:	d10f      	bne.n	80044d6 <HAL_ADC_PollForConversion+0x72>
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	0712      	lsls	r2, r2, #28
 80044ba:	d50c      	bpl.n	80044d6 <HAL_ADC_PollForConversion+0x72>
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80044bc:	689a      	ldr	r2, [r3, #8]
 80044be:	0752      	lsls	r2, r2, #29
 80044c0:	d423      	bmi.n	800450a <HAL_ADC_PollForConversion+0xa6>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80044c2:	210c      	movs	r1, #12
 80044c4:	685a      	ldr	r2, [r3, #4]
 80044c6:	438a      	bics	r2, r1
 80044c8:	605a      	str	r2, [r3, #4]
        ADC_STATE_CLR_SET(hadc->State,
 80044ca:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80044cc:	4913      	ldr	r1, [pc, #76]	; (800451c <HAL_ADC_PollForConversion+0xb8>)
 80044ce:	4011      	ands	r1, r2
 80044d0:	2201      	movs	r2, #1
 80044d2:	430a      	orrs	r2, r1
 80044d4:	6562      	str	r2, [r4, #84]	; 0x54
  return HAL_OK;
 80044d6:	2000      	movs	r0, #0
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80044d8:	69a2      	ldr	r2, [r4, #24]
 80044da:	4282      	cmp	r2, r0
 80044dc:	d1d5      	bne.n	800448a <HAL_ADC_PollForConversion+0x26>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80044de:	220c      	movs	r2, #12
 80044e0:	601a      	str	r2, [r3, #0]
 80044e2:	e7d2      	b.n	800448a <HAL_ADC_PollForConversion+0x26>
    if(Timeout != HAL_MAX_DELAY)
 80044e4:	1c72      	adds	r2, r6, #1
 80044e6:	d0d5      	beq.n	8004494 <HAL_ADC_PollForConversion+0x30>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80044e8:	2e00      	cmp	r6, #0
 80044ea:	d108      	bne.n	80044fe <HAL_ADC_PollForConversion+0x9a>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80044ec:	2304      	movs	r3, #4
 80044ee:	6d62      	ldr	r2, [r4, #84]	; 0x54
        __HAL_UNLOCK(hadc);
 80044f0:	3450      	adds	r4, #80	; 0x50
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80044f2:	4313      	orrs	r3, r2
 80044f4:	6063      	str	r3, [r4, #4]
        __HAL_UNLOCK(hadc);
 80044f6:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 80044f8:	2003      	movs	r0, #3
        __HAL_UNLOCK(hadc);
 80044fa:	7023      	strb	r3, [r4, #0]
        return HAL_TIMEOUT;
 80044fc:	e7c5      	b.n	800448a <HAL_ADC_PollForConversion+0x26>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80044fe:	f7ff fe3f 	bl	8004180 <HAL_GetTick>
 8004502:	1bc0      	subs	r0, r0, r7
 8004504:	42b0      	cmp	r0, r6
 8004506:	d9c4      	bls.n	8004492 <HAL_ADC_PollForConversion+0x2e>
 8004508:	e7f0      	b.n	80044ec <HAL_ADC_PollForConversion+0x88>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800450a:	2220      	movs	r2, #32
 800450c:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800450e:	430a      	orrs	r2, r1
 8004510:	6562      	str	r2, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004512:	2201      	movs	r2, #1
 8004514:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8004516:	430a      	orrs	r2, r1
 8004518:	65a2      	str	r2, [r4, #88]	; 0x58
 800451a:	e7dc      	b.n	80044d6 <HAL_ADC_PollForConversion+0x72>
 800451c:	fffffefe 	.word	0xfffffefe

08004520 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 8004520:	6803      	ldr	r3, [r0, #0]
 8004522:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 8004524:	4770      	bx	lr
	...

08004528 <HAL_ADC_ConfigChannel>:
{
 8004528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 800452a:	0004      	movs	r4, r0
 800452c:	3450      	adds	r4, #80	; 0x50
 800452e:	7823      	ldrb	r3, [r4, #0]
{
 8004530:	0006      	movs	r6, r0
 8004532:	000d      	movs	r5, r1
  __HAL_LOCK(hadc);
 8004534:	2002      	movs	r0, #2
 8004536:	2b01      	cmp	r3, #1
 8004538:	d00b      	beq.n	8004552 <HAL_ADC_ConfigChannel+0x2a>
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 800453a:	6832      	ldr	r2, [r6, #0]
  __HAL_LOCK(hadc);
 800453c:	3801      	subs	r0, #1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 800453e:	6891      	ldr	r1, [r2, #8]
  __HAL_LOCK(hadc);
 8004540:	7020      	strb	r0, [r4, #0]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8004542:	074b      	lsls	r3, r1, #29
 8004544:	d506      	bpl.n	8004554 <HAL_ADC_ConfigChannel+0x2c>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004546:	2220      	movs	r2, #32
 8004548:	6d71      	ldr	r1, [r6, #84]	; 0x54
 800454a:	430a      	orrs	r2, r1
 800454c:	6572      	str	r2, [r6, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 800454e:	2200      	movs	r2, #0
 8004550:	7022      	strb	r2, [r4, #0]
}
 8004552:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004554:	2380      	movs	r3, #128	; 0x80
 8004556:	6828      	ldr	r0, [r5, #0]
  if (sConfig->Rank != ADC_RANK_NONE)
 8004558:	4e19      	ldr	r6, [pc, #100]	; (80045c0 <HAL_ADC_ConfigChannel+0x98>)
 800455a:	686f      	ldr	r7, [r5, #4]
 800455c:	0341      	lsls	r1, r0, #13
 800455e:	02db      	lsls	r3, r3, #11
 8004560:	0b49      	lsrs	r1, r1, #13
 8004562:	4003      	ands	r3, r0
 8004564:	42b7      	cmp	r7, r6
 8004566:	d019      	beq.n	800459c <HAL_ADC_ConfigChannel+0x74>
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8004568:	6a90      	ldr	r0, [r2, #40]	; 0x28
 800456a:	4301      	orrs	r1, r0
 800456c:	6291      	str	r1, [r2, #40]	; 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800456e:	2b00      	cmp	r3, #0
 8004570:	d008      	beq.n	8004584 <HAL_ADC_ConfigChannel+0x5c>
      ADC->CCR |= ADC_CCR_TSEN;   
 8004572:	2380      	movs	r3, #128	; 0x80
 8004574:	4a13      	ldr	r2, [pc, #76]	; (80045c4 <HAL_ADC_ConfigChannel+0x9c>)
 8004576:	041b      	lsls	r3, r3, #16
 8004578:	6811      	ldr	r1, [r2, #0]
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800457a:	200a      	movs	r0, #10
      ADC->CCR |= ADC_CCR_TSEN;   
 800457c:	430b      	orrs	r3, r1
 800457e:	6013      	str	r3, [r2, #0]
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8004580:	f7ff fe1c 	bl	80041bc <ADC_DelayMicroSecond>
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8004584:	682b      	ldr	r3, [r5, #0]
 8004586:	039b      	lsls	r3, r3, #14
 8004588:	d505      	bpl.n	8004596 <HAL_ADC_ConfigChannel+0x6e>
      ADC->CCR |= ADC_CCR_VREFEN;   
 800458a:	2380      	movs	r3, #128	; 0x80
 800458c:	4a0d      	ldr	r2, [pc, #52]	; (80045c4 <HAL_ADC_ConfigChannel+0x9c>)
 800458e:	03db      	lsls	r3, r3, #15
 8004590:	6811      	ldr	r1, [r2, #0]
 8004592:	430b      	orrs	r3, r1
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8004594:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hadc);
 8004596:	2000      	movs	r0, #0
 8004598:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 800459a:	e7da      	b.n	8004552 <HAL_ADC_ConfigChannel+0x2a>
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 800459c:	6a95      	ldr	r5, [r2, #40]	; 0x28
 800459e:	438d      	bics	r5, r1
 80045a0:	6295      	str	r5, [r2, #40]	; 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d004      	beq.n	80045b0 <HAL_ADC_ConfigChannel+0x88>
      ADC->CCR &= ~ADC_CCR_TSEN;   
 80045a6:	4a07      	ldr	r2, [pc, #28]	; (80045c4 <HAL_ADC_ConfigChannel+0x9c>)
 80045a8:	4907      	ldr	r1, [pc, #28]	; (80045c8 <HAL_ADC_ConfigChannel+0xa0>)
 80045aa:	6813      	ldr	r3, [r2, #0]
 80045ac:	400b      	ands	r3, r1
 80045ae:	6013      	str	r3, [r2, #0]
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80045b0:	0383      	lsls	r3, r0, #14
 80045b2:	d5f0      	bpl.n	8004596 <HAL_ADC_ConfigChannel+0x6e>
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 80045b4:	4a03      	ldr	r2, [pc, #12]	; (80045c4 <HAL_ADC_ConfigChannel+0x9c>)
 80045b6:	4905      	ldr	r1, [pc, #20]	; (80045cc <HAL_ADC_ConfigChannel+0xa4>)
 80045b8:	6813      	ldr	r3, [r2, #0]
 80045ba:	400b      	ands	r3, r1
 80045bc:	e7ea      	b.n	8004594 <HAL_ADC_ConfigChannel+0x6c>
 80045be:	46c0      	nop			; (mov r8, r8)
 80045c0:	00001001 	.word	0x00001001
 80045c4:	40012708 	.word	0x40012708
 80045c8:	ff7fffff 	.word	0xff7fffff
 80045cc:	ffbfffff 	.word	0xffbfffff

080045d0 <HAL_ADCEx_Calibration_Start>:
  *          This parameter can be only of the following values:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 80045d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80045d2:	0005      	movs	r5, r0
 80045d4:	3550      	adds	r5, #80	; 0x50
 80045d6:	782b      	ldrb	r3, [r5, #0]
{
 80045d8:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 80045da:	2002      	movs	r0, #2
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d044      	beq.n	800466a <HAL_ADCEx_Calibration_Start+0x9a>
 80045e0:	2301      	movs	r3, #1
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80045e2:	2203      	movs	r2, #3
  __HAL_LOCK(hadc);
 80045e4:	702b      	strb	r3, [r5, #0]
  if (ADC_IS_ENABLE(hadc) == RESET)
 80045e6:	6823      	ldr	r3, [r4, #0]
 80045e8:	6898      	ldr	r0, [r3, #8]
 80045ea:	4010      	ands	r0, r2
 80045ec:	2801      	cmp	r0, #1
 80045ee:	d109      	bne.n	8004604 <HAL_ADCEx_Calibration_Start+0x34>
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	4202      	tst	r2, r0
 80045f4:	d006      	beq.n	8004604 <HAL_ADCEx_Calibration_Start+0x34>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80045f6:	2320      	movs	r3, #32
 80045f8:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80045fa:	4313      	orrs	r3, r2
 80045fc:	6563      	str	r3, [r4, #84]	; 0x54
    
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80045fe:	2300      	movs	r3, #0
 8004600:	702b      	strb	r3, [r5, #0]
  
  /* Return function status */
  return tmp_hal_status;
 8004602:	e032      	b.n	800466a <HAL_ADCEx_Calibration_Start+0x9a>
    ADC_STATE_CLR_SET(hadc->State, 
 8004604:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8004606:	4919      	ldr	r1, [pc, #100]	; (800466c <HAL_ADCEx_Calibration_Start+0x9c>)
 8004608:	4011      	ands	r1, r2
 800460a:	2202      	movs	r2, #2
 800460c:	430a      	orrs	r2, r1
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800460e:	2103      	movs	r1, #3
    ADC_STATE_CLR_SET(hadc->State, 
 8004610:	6562      	str	r2, [r4, #84]	; 0x54
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8004612:	68de      	ldr	r6, [r3, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8004614:	68da      	ldr	r2, [r3, #12]
 8004616:	438a      	bics	r2, r1
 8004618:	60da      	str	r2, [r3, #12]
    hadc->Instance->CR |= ADC_CR_ADCAL;
 800461a:	2280      	movs	r2, #128	; 0x80
 800461c:	6899      	ldr	r1, [r3, #8]
 800461e:	0612      	lsls	r2, r2, #24
 8004620:	430a      	orrs	r2, r1
 8004622:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();  
 8004624:	f7ff fdac 	bl	8004180 <HAL_GetTick>
 8004628:	0007      	movs	r7, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800462a:	6823      	ldr	r3, [r4, #0]
 800462c:	689a      	ldr	r2, [r3, #8]
 800462e:	2a00      	cmp	r2, #0
 8004630:	db0c      	blt.n	800464c <HAL_ADCEx_Calibration_Start+0x7c>
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8004632:	2203      	movs	r2, #3
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8004634:	68d9      	ldr	r1, [r3, #12]
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8004636:	4016      	ands	r6, r2
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8004638:	430e      	orrs	r6, r1
 800463a:	60de      	str	r6, [r3, #12]
    ADC_STATE_CLR_SET(hadc->State,
 800463c:	6d63      	ldr	r3, [r4, #84]	; 0x54
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800463e:	2000      	movs	r0, #0
    ADC_STATE_CLR_SET(hadc->State,
 8004640:	4393      	bics	r3, r2
 8004642:	001a      	movs	r2, r3
 8004644:	2301      	movs	r3, #1
 8004646:	4313      	orrs	r3, r2
 8004648:	6563      	str	r3, [r4, #84]	; 0x54
 800464a:	e7d8      	b.n	80045fe <HAL_ADCEx_Calibration_Start+0x2e>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800464c:	f7ff fd98 	bl	8004180 <HAL_GetTick>
 8004650:	1bc0      	subs	r0, r0, r7
 8004652:	280a      	cmp	r0, #10
 8004654:	d9e9      	bls.n	800462a <HAL_ADCEx_Calibration_Start+0x5a>
        ADC_STATE_CLR_SET(hadc->State,
 8004656:	2212      	movs	r2, #18
 8004658:	6d63      	ldr	r3, [r4, #84]	; 0x54
        return HAL_ERROR;
 800465a:	2001      	movs	r0, #1
        ADC_STATE_CLR_SET(hadc->State,
 800465c:	4393      	bics	r3, r2
 800465e:	001a      	movs	r2, r3
 8004660:	2310      	movs	r3, #16
 8004662:	4313      	orrs	r3, r2
 8004664:	6563      	str	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hadc);
 8004666:	2300      	movs	r3, #0
 8004668:	702b      	strb	r3, [r5, #0]
}
 800466a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800466c:	fffffefd 	.word	0xfffffefd

08004670 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004670:	b530      	push	{r4, r5, lr}
 8004672:	25ff      	movs	r5, #255	; 0xff
 8004674:	2403      	movs	r4, #3
 8004676:	002a      	movs	r2, r5
 8004678:	b2c3      	uxtb	r3, r0
 800467a:	401c      	ands	r4, r3
 800467c:	00e4      	lsls	r4, r4, #3
 800467e:	40a2      	lsls	r2, r4
 8004680:	0189      	lsls	r1, r1, #6
 8004682:	4029      	ands	r1, r5
 8004684:	43d2      	mvns	r2, r2
 8004686:	40a1      	lsls	r1, r4
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8004688:	2800      	cmp	r0, #0
 800468a:	db0a      	blt.n	80046a2 <HAL_NVIC_SetPriority+0x32>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800468c:	24c0      	movs	r4, #192	; 0xc0
 800468e:	4b0b      	ldr	r3, [pc, #44]	; (80046bc <HAL_NVIC_SetPriority+0x4c>)
 8004690:	0880      	lsrs	r0, r0, #2
 8004692:	0080      	lsls	r0, r0, #2
 8004694:	18c0      	adds	r0, r0, r3
 8004696:	00a4      	lsls	r4, r4, #2
 8004698:	5903      	ldr	r3, [r0, r4]
 800469a:	401a      	ands	r2, r3
 800469c:	4311      	orrs	r1, r2
 800469e:	5101      	str	r1, [r0, r4]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80046a0:	bd30      	pop	{r4, r5, pc}
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80046a2:	200f      	movs	r0, #15
 80046a4:	4003      	ands	r3, r0
 80046a6:	3b08      	subs	r3, #8
 80046a8:	4805      	ldr	r0, [pc, #20]	; (80046c0 <HAL_NVIC_SetPriority+0x50>)
 80046aa:	089b      	lsrs	r3, r3, #2
 80046ac:	009b      	lsls	r3, r3, #2
 80046ae:	181b      	adds	r3, r3, r0
 80046b0:	69d8      	ldr	r0, [r3, #28]
 80046b2:	4002      	ands	r2, r0
 80046b4:	4311      	orrs	r1, r2
 80046b6:	61d9      	str	r1, [r3, #28]
 80046b8:	e7f2      	b.n	80046a0 <HAL_NVIC_SetPriority+0x30>
 80046ba:	46c0      	nop			; (mov r8, r8)
 80046bc:	e000e100 	.word	0xe000e100
 80046c0:	e000ed00 	.word	0xe000ed00

080046c4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80046c4:	2800      	cmp	r0, #0
 80046c6:	db05      	blt.n	80046d4 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80046c8:	231f      	movs	r3, #31
 80046ca:	4018      	ands	r0, r3
 80046cc:	3b1e      	subs	r3, #30
 80046ce:	4083      	lsls	r3, r0
 80046d0:	4a01      	ldr	r2, [pc, #4]	; (80046d8 <HAL_NVIC_EnableIRQ+0x14>)
 80046d2:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80046d4:	4770      	bx	lr
 80046d6:	46c0      	nop			; (mov r8, r8)
 80046d8:	e000e100 	.word	0xe000e100

080046dc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80046dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046de:	0004      	movs	r4, r0
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
  {
    return HAL_ERROR;
 80046e0:	2001      	movs	r0, #1
  if(hdma == NULL)
 80046e2:	2c00      	cmp	r4, #0
 80046e4:	d035      	beq.n	8004752 <HAL_DMA_Init+0x76>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80046e6:	6825      	ldr	r5, [r4, #0]
 80046e8:	4b1a      	ldr	r3, [pc, #104]	; (8004754 <HAL_DMA_Init+0x78>)
 80046ea:	2114      	movs	r1, #20
 80046ec:	18e8      	adds	r0, r5, r3
 80046ee:	f7fb fd3b 	bl	8000168 <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 80046f2:	4b19      	ldr	r3, [pc, #100]	; (8004758 <HAL_DMA_Init+0x7c>)
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80046f4:	0080      	lsls	r0, r0, #2
  hdma->DmaBaseAddress = DMA1;
 80046f6:	6423      	str	r3, [r4, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80046f8:	2302      	movs	r3, #2
 80046fa:	1da2      	adds	r2, r4, #6
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80046fc:	6460      	str	r0, [r4, #68]	; 0x44
  hdma->State = HAL_DMA_STATE_BUSY;
 80046fe:	77d3      	strb	r3, [r2, #31]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004700:	682e      	ldr	r6, [r5, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004702:	4b16      	ldr	r3, [pc, #88]	; (800475c <HAL_DMA_Init+0x80>)
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004704:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004706:	401e      	ands	r6, r3
  tmp |=  hdma->Init.Direction        |
 8004708:	68e3      	ldr	r3, [r4, #12]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800470a:	6927      	ldr	r7, [r4, #16]
  tmp |=  hdma->Init.Direction        |
 800470c:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800470e:	433b      	orrs	r3, r7
 8004710:	6967      	ldr	r7, [r4, #20]
 8004712:	433b      	orrs	r3, r7
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004714:	69a7      	ldr	r7, [r4, #24]
 8004716:	433b      	orrs	r3, r7
 8004718:	69e7      	ldr	r7, [r4, #28]
 800471a:	433b      	orrs	r3, r7
          hdma->Init.Mode                | hdma->Init.Priority;
 800471c:	6a27      	ldr	r7, [r4, #32]
 800471e:	433b      	orrs	r3, r7
  tmp |=  hdma->Init.Direction        |
 8004720:	4333      	orrs	r3, r6

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004722:	602b      	str	r3, [r5, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8004724:	2380      	movs	r3, #128	; 0x80
 8004726:	01db      	lsls	r3, r3, #7
 8004728:	4299      	cmp	r1, r3
 800472a:	d00c      	beq.n	8004746 <HAL_DMA_Init+0x6a>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800472c:	251c      	movs	r5, #28
 800472e:	4028      	ands	r0, r5
 8004730:	3d0d      	subs	r5, #13
 8004732:	4085      	lsls	r5, r0
 8004734:	490a      	ldr	r1, [pc, #40]	; (8004760 <HAL_DMA_Init+0x84>)
 8004736:	680b      	ldr	r3, [r1, #0]
 8004738:	43ab      	bics	r3, r5
 800473a:	600b      	str	r3, [r1, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800473c:	6863      	ldr	r3, [r4, #4]
 800473e:	680d      	ldr	r5, [r1, #0]
 8004740:	4083      	lsls	r3, r0
 8004742:	432b      	orrs	r3, r5
 8004744:	600b      	str	r3, [r1, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004746:	2000      	movs	r0, #0

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004748:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800474a:	63e0      	str	r0, [r4, #60]	; 0x3c

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800474c:	3405      	adds	r4, #5
  hdma->State  = HAL_DMA_STATE_READY;
 800474e:	77d3      	strb	r3, [r2, #31]
  hdma->Lock = HAL_UNLOCKED;
 8004750:	77e0      	strb	r0, [r4, #31]

  return HAL_OK;
}
 8004752:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004754:	bffdfff8 	.word	0xbffdfff8
 8004758:	40020000 	.word	0x40020000
 800475c:	ffff800f 	.word	0xffff800f
 8004760:	400200a8 	.word	0x400200a8

08004764 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004764:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004766:	1d44      	adds	r4, r0, #5
 8004768:	7fe6      	ldrb	r6, [r4, #31]
{
 800476a:	0005      	movs	r5, r0
  __HAL_LOCK(hdma);
 800476c:	2002      	movs	r0, #2
 800476e:	2e01      	cmp	r6, #1
 8004770:	d02b      	beq.n	80047ca <HAL_DMA_Start_IT+0x66>
 8004772:	3801      	subs	r0, #1
 8004774:	77e0      	strb	r0, [r4, #31]

  if(HAL_DMA_STATE_READY == hdma->State)
 8004776:	1da8      	adds	r0, r5, #6
 8004778:	7fc6      	ldrb	r6, [r0, #31]
 800477a:	4684      	mov	ip, r0
 800477c:	b2f6      	uxtb	r6, r6
 800477e:	2002      	movs	r0, #2
 8004780:	2700      	movs	r7, #0
 8004782:	2e01      	cmp	r6, #1
 8004784:	d12c      	bne.n	80047e0 <HAL_DMA_Start_IT+0x7c>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004786:	4664      	mov	r4, ip
 8004788:	77e0      	strb	r0, [r4, #31]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800478a:	682c      	ldr	r4, [r5, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800478c:	63ef      	str	r7, [r5, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 800478e:	6820      	ldr	r0, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004790:	371c      	adds	r7, #28
    __HAL_DMA_DISABLE(hdma);
 8004792:	43b0      	bics	r0, r6
 8004794:	6020      	str	r0, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004796:	6c28      	ldr	r0, [r5, #64]	; 0x40
 8004798:	9001      	str	r0, [sp, #4]
 800479a:	6c68      	ldr	r0, [r5, #68]	; 0x44
 800479c:	4007      	ands	r7, r0
 800479e:	40be      	lsls	r6, r7
 80047a0:	9801      	ldr	r0, [sp, #4]
 80047a2:	6046      	str	r6, [r0, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80047a4:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80047a6:	68ab      	ldr	r3, [r5, #8]
 80047a8:	6828      	ldr	r0, [r5, #0]
 80047aa:	2b10      	cmp	r3, #16
 80047ac:	d10e      	bne.n	80047cc <HAL_DMA_Start_IT+0x68>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80047ae:	60a2      	str	r2, [r4, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80047b0:	60e1      	str	r1, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 80047b2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d00c      	beq.n	80047d2 <HAL_DMA_Start_IT+0x6e>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80047b8:	230e      	movs	r3, #14
 80047ba:	6822      	ldr	r2, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80047bc:	4313      	orrs	r3, r2
 80047be:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 80047c0:	2301      	movs	r3, #1
 80047c2:	6802      	ldr	r2, [r0, #0]
 80047c4:	4313      	orrs	r3, r2
 80047c6:	6003      	str	r3, [r0, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047c8:	2000      	movs	r0, #0
}
 80047ca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80047cc:	60a1      	str	r1, [r4, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80047ce:	60e2      	str	r2, [r4, #12]
 80047d0:	e7ef      	b.n	80047b2 <HAL_DMA_Start_IT+0x4e>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80047d2:	2204      	movs	r2, #4
 80047d4:	6823      	ldr	r3, [r4, #0]
 80047d6:	4393      	bics	r3, r2
 80047d8:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80047da:	6822      	ldr	r2, [r4, #0]
 80047dc:	230a      	movs	r3, #10
 80047de:	e7ed      	b.n	80047bc <HAL_DMA_Start_IT+0x58>
    __HAL_UNLOCK(hdma);
 80047e0:	77e7      	strb	r7, [r4, #31]
 80047e2:	e7f2      	b.n	80047ca <HAL_DMA_Start_IT+0x66>

080047e4 <HAL_DMA_Abort>:
{
 80047e4:	b530      	push	{r4, r5, lr}
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80047e6:	1d85      	adds	r5, r0, #6
 80047e8:	7feb      	ldrb	r3, [r5, #31]
 80047ea:	1d44      	adds	r4, r0, #5
 80047ec:	2b02      	cmp	r3, #2
 80047ee:	d005      	beq.n	80047fc <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80047f0:	2304      	movs	r3, #4
 80047f2:	63c3      	str	r3, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 80047f4:	2300      	movs	r3, #0
    return HAL_ERROR;
 80047f6:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 80047f8:	77e3      	strb	r3, [r4, #31]
}
 80047fa:	bd30      	pop	{r4, r5, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80047fc:	210e      	movs	r1, #14
 80047fe:	6803      	ldr	r3, [r0, #0]
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	438a      	bics	r2, r1
 8004804:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8004806:	2201      	movs	r2, #1
 8004808:	6819      	ldr	r1, [r3, #0]
 800480a:	4391      	bics	r1, r2
 800480c:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800480e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004810:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8004812:	201c      	movs	r0, #28
 8004814:	4003      	ands	r3, r0
 8004816:	0010      	movs	r0, r2
 8004818:	4098      	lsls	r0, r3
 800481a:	6048      	str	r0, [r1, #4]
    __HAL_UNLOCK(hdma);
 800481c:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_READY;
 800481e:	77ea      	strb	r2, [r5, #31]
    __HAL_UNLOCK(hdma);
 8004820:	77e0      	strb	r0, [r4, #31]
    return status;
 8004822:	e7ea      	b.n	80047fa <HAL_DMA_Abort+0x16>

08004824 <HAL_DMA_Abort_IT>:
{
 8004824:	b570      	push	{r4, r5, r6, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004826:	1d84      	adds	r4, r0, #6
 8004828:	7fe3      	ldrb	r3, [r4, #31]
 800482a:	2b02      	cmp	r3, #2
 800482c:	d004      	beq.n	8004838 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800482e:	2304      	movs	r3, #4
 8004830:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 8004832:	3b03      	subs	r3, #3
}
 8004834:	0018      	movs	r0, r3
 8004836:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004838:	210e      	movs	r1, #14
 800483a:	6803      	ldr	r3, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800483c:	6c45      	ldr	r5, [r0, #68]	; 0x44
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	438a      	bics	r2, r1
 8004842:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8004844:	2201      	movs	r2, #1
 8004846:	6819      	ldr	r1, [r3, #0]
 8004848:	4391      	bics	r1, r2
 800484a:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800484c:	231c      	movs	r3, #28
 800484e:	402b      	ands	r3, r5
 8004850:	0015      	movs	r5, r2
 8004852:	409d      	lsls	r5, r3
 8004854:	6c01      	ldr	r1, [r0, #64]	; 0x40
    __HAL_UNLOCK(hdma);
 8004856:	1d43      	adds	r3, r0, #5
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004858:	604d      	str	r5, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800485a:	77e2      	strb	r2, [r4, #31]
    __HAL_UNLOCK(hdma);
 800485c:	2400      	movs	r4, #0
    if(hdma->XferAbortCallback != NULL)
 800485e:	6b82      	ldr	r2, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8004860:	77dc      	strb	r4, [r3, #31]
  HAL_StatusTypeDef status = HAL_OK;
 8004862:	0013      	movs	r3, r2
    if(hdma->XferAbortCallback != NULL)
 8004864:	42a2      	cmp	r2, r4
 8004866:	d0e5      	beq.n	8004834 <HAL_DMA_Abort_IT+0x10>
      hdma->XferAbortCallback(hdma);
 8004868:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 800486a:	0023      	movs	r3, r4
 800486c:	e7e2      	b.n	8004834 <HAL_DMA_Abort_IT+0x10>

0800486e <HAL_DMA_IRQHandler>:
{
 800486e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8004870:	221c      	movs	r2, #28
 8004872:	2704      	movs	r7, #4
 8004874:	6c46      	ldr	r6, [r0, #68]	; 0x44
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004876:	6c01      	ldr	r1, [r0, #64]	; 0x40
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8004878:	4032      	ands	r2, r6
 800487a:	003e      	movs	r6, r7
 800487c:	4096      	lsls	r6, r2
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800487e:	680d      	ldr	r5, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8004880:	6803      	ldr	r3, [r0, #0]
 8004882:	681c      	ldr	r4, [r3, #0]
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8004884:	4235      	tst	r5, r6
 8004886:	d00d      	beq.n	80048a4 <HAL_DMA_IRQHandler+0x36>
 8004888:	423c      	tst	r4, r7
 800488a:	d00b      	beq.n	80048a4 <HAL_DMA_IRQHandler+0x36>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	0692      	lsls	r2, r2, #26
 8004890:	d402      	bmi.n	8004898 <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	43ba      	bics	r2, r7
 8004896:	601a      	str	r2, [r3, #0]
     if(hdma->XferHalfCpltCallback != NULL)
 8004898:	6b03      	ldr	r3, [r0, #48]	; 0x30
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 800489a:	604e      	str	r6, [r1, #4]
     if(hdma->XferHalfCpltCallback != NULL)
 800489c:	2b00      	cmp	r3, #0
 800489e:	d019      	beq.n	80048d4 <HAL_DMA_IRQHandler+0x66>
      hdma->XferErrorCallback(hdma);
 80048a0:	4798      	blx	r3
  return;
 80048a2:	e017      	b.n	80048d4 <HAL_DMA_IRQHandler+0x66>
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 80048a4:	2702      	movs	r7, #2
 80048a6:	003e      	movs	r6, r7
 80048a8:	4096      	lsls	r6, r2
 80048aa:	4235      	tst	r5, r6
 80048ac:	d013      	beq.n	80048d6 <HAL_DMA_IRQHandler+0x68>
 80048ae:	423c      	tst	r4, r7
 80048b0:	d011      	beq.n	80048d6 <HAL_DMA_IRQHandler+0x68>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	0692      	lsls	r2, r2, #26
 80048b6:	d406      	bmi.n	80048c6 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80048b8:	240a      	movs	r4, #10
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	43a2      	bics	r2, r4
 80048be:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80048c0:	2201      	movs	r2, #1
 80048c2:	1d83      	adds	r3, r0, #6
 80048c4:	77da      	strb	r2, [r3, #31]
    __HAL_UNLOCK(hdma);
 80048c6:	2200      	movs	r2, #0
 80048c8:	1d43      	adds	r3, r0, #5
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80048ca:	604e      	str	r6, [r1, #4]
    __HAL_UNLOCK(hdma);
 80048cc:	77da      	strb	r2, [r3, #31]
    if(hdma->XferCpltCallback != NULL)
 80048ce:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d1e5      	bne.n	80048a0 <HAL_DMA_IRQHandler+0x32>
}
 80048d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 80048d6:	2608      	movs	r6, #8
 80048d8:	0037      	movs	r7, r6
 80048da:	4097      	lsls	r7, r2
 80048dc:	423d      	tst	r5, r7
 80048de:	d0f9      	beq.n	80048d4 <HAL_DMA_IRQHandler+0x66>
 80048e0:	4234      	tst	r4, r6
 80048e2:	d0f7      	beq.n	80048d4 <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80048e4:	250e      	movs	r5, #14
 80048e6:	681c      	ldr	r4, [r3, #0]
 80048e8:	43ac      	bics	r4, r5
 80048ea:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80048ec:	2301      	movs	r3, #1
 80048ee:	001c      	movs	r4, r3
 80048f0:	4094      	lsls	r4, r2
    hdma->State = HAL_DMA_STATE_READY;
 80048f2:	1d82      	adds	r2, r0, #6
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80048f4:	604c      	str	r4, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80048f6:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 80048f8:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hdma);
 80048fa:	2200      	movs	r2, #0
 80048fc:	1d43      	adds	r3, r0, #5
 80048fe:	77da      	strb	r2, [r3, #31]
    if (hdma->XferErrorCallback != NULL)
 8004900:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004902:	e7e5      	b.n	80048d0 <HAL_DMA_IRQHandler+0x62>

08004904 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 8004904:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
}
 8004906:	4770      	bx	lr

08004908 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004908:	b5f0      	push	{r4, r5, r6, r7, lr}
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
        
        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800490a:	4a54      	ldr	r2, [pc, #336]	; (8004a5c <HAL_GPIO_Init+0x154>)
  while (((GPIO_Init->Pin) >> position) != 0)
 800490c:	680b      	ldr	r3, [r1, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800490e:	1882      	adds	r2, r0, r2
 8004910:	1e54      	subs	r4, r2, #1
 8004912:	41a2      	sbcs	r2, r4
{
 8004914:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != 0)
 8004916:	9303      	str	r3, [sp, #12]
  uint32_t position = 0x00U;
 8004918:	2300      	movs	r3, #0
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800491a:	3205      	adds	r2, #5
 800491c:	9205      	str	r2, [sp, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800491e:	9a03      	ldr	r2, [sp, #12]
 8004920:	40da      	lsrs	r2, r3
 8004922:	d101      	bne.n	8004928 <HAL_GPIO_Init+0x20>
        EXTI->FTSR = temp;
      }
    }
    position++;
  }
}
 8004924:	b007      	add	sp, #28
 8004926:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8004928:	2501      	movs	r5, #1
 800492a:	409d      	lsls	r5, r3
 800492c:	9a03      	ldr	r2, [sp, #12]
 800492e:	402a      	ands	r2, r5
 8004930:	9202      	str	r2, [sp, #8]
    if(iocurrent)
 8004932:	d100      	bne.n	8004936 <HAL_GPIO_Init+0x2e>
 8004934:	e08f      	b.n	8004a56 <HAL_GPIO_Init+0x14e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8004936:	684a      	ldr	r2, [r1, #4]
 8004938:	9201      	str	r2, [sp, #4]
 800493a:	2210      	movs	r2, #16
 800493c:	9e01      	ldr	r6, [sp, #4]
 800493e:	4396      	bics	r6, r2
 8004940:	2e02      	cmp	r6, #2
 8004942:	d10f      	bne.n	8004964 <HAL_GPIO_Init+0x5c>
        temp = GPIOx->AFR[position >> 3U];
 8004944:	08da      	lsrs	r2, r3, #3
 8004946:	0092      	lsls	r2, r2, #2
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8004948:	2407      	movs	r4, #7
 800494a:	1882      	adds	r2, r0, r2
        temp = GPIOx->AFR[position >> 3U];
 800494c:	6a17      	ldr	r7, [r2, #32]
 800494e:	9204      	str	r2, [sp, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8004950:	220f      	movs	r2, #15
 8004952:	401c      	ands	r4, r3
 8004954:	00a4      	lsls	r4, r4, #2
 8004956:	40a2      	lsls	r2, r4
 8004958:	4397      	bics	r7, r2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 800495a:	690a      	ldr	r2, [r1, #16]
 800495c:	40a2      	lsls	r2, r4
 800495e:	4317      	orrs	r7, r2
        GPIOx->AFR[position >> 3U] = temp;
 8004960:	9a04      	ldr	r2, [sp, #16]
 8004962:	6217      	str	r7, [r2, #32]
 8004964:	2203      	movs	r2, #3
 8004966:	005c      	lsls	r4, r3, #1
 8004968:	40a2      	lsls	r2, r4
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800496a:	3e01      	subs	r6, #1
 800496c:	43d2      	mvns	r2, r2
 800496e:	2e01      	cmp	r6, #1
 8004970:	d80d      	bhi.n	800498e <HAL_GPIO_Init+0x86>
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004972:	68ce      	ldr	r6, [r1, #12]
        temp = GPIOx->OSPEEDR;
 8004974:	6887      	ldr	r7, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004976:	40a6      	lsls	r6, r4
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8004978:	4017      	ands	r7, r2
        temp |= (GPIO_Init->Speed << (position * 2U));
 800497a:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 800497c:	6086      	str	r6, [r0, #8]
        temp= GPIOx->OTYPER;
 800497e:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004980:	43ae      	bics	r6, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004982:	9d01      	ldr	r5, [sp, #4]
 8004984:	06ed      	lsls	r5, r5, #27
 8004986:	0fed      	lsrs	r5, r5, #31
 8004988:	409d      	lsls	r5, r3
 800498a:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 800498c:	6045      	str	r5, [r0, #4]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800498e:	2603      	movs	r6, #3
 8004990:	9d01      	ldr	r5, [sp, #4]
      temp = GPIOx->MODER;
 8004992:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004994:	4035      	ands	r5, r6
 8004996:	40a5      	lsls	r5, r4
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004998:	4017      	ands	r7, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800499a:	433d      	orrs	r5, r7
      GPIOx->MODER = temp;
 800499c:	6005      	str	r5, [r0, #0]
      temp = GPIOx->PUPDR;
 800499e:	68c5      	ldr	r5, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80049a0:	402a      	ands	r2, r5
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 80049a2:	688d      	ldr	r5, [r1, #8]
 80049a4:	40a5      	lsls	r5, r4
 80049a6:	432a      	orrs	r2, r5
      GPIOx->PUPDR = temp;
 80049a8:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80049aa:	9a01      	ldr	r2, [sp, #4]
 80049ac:	00d2      	lsls	r2, r2, #3
 80049ae:	d552      	bpl.n	8004a56 <HAL_GPIO_Init+0x14e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049b0:	2501      	movs	r5, #1
 80049b2:	4c2b      	ldr	r4, [pc, #172]	; (8004a60 <HAL_GPIO_Init+0x158>)
 80049b4:	46ac      	mov	ip, r5
 80049b6:	6b62      	ldr	r2, [r4, #52]	; 0x34
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 80049b8:	270f      	movs	r7, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049ba:	432a      	orrs	r2, r5
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 80049bc:	001d      	movs	r5, r3
 80049be:	4035      	ands	r5, r6
 80049c0:	00ad      	lsls	r5, r5, #2
 80049c2:	40af      	lsls	r7, r5
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049c4:	6362      	str	r2, [r4, #52]	; 0x34
 80049c6:	4a27      	ldr	r2, [pc, #156]	; (8004a64 <HAL_GPIO_Init+0x15c>)
        temp = SYSCFG->EXTICR[position >> 2U];
 80049c8:	089c      	lsrs	r4, r3, #2
 80049ca:	00a4      	lsls	r4, r4, #2
 80049cc:	18a4      	adds	r4, r4, r2
 80049ce:	68a2      	ldr	r2, [r4, #8]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 80049d0:	43ba      	bics	r2, r7
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80049d2:	27a0      	movs	r7, #160	; 0xa0
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 80049d4:	9204      	str	r2, [sp, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80049d6:	05ff      	lsls	r7, r7, #23
 80049d8:	2200      	movs	r2, #0
 80049da:	42b8      	cmp	r0, r7
 80049dc:	d010      	beq.n	8004a00 <HAL_GPIO_Init+0xf8>
 80049de:	4f22      	ldr	r7, [pc, #136]	; (8004a68 <HAL_GPIO_Init+0x160>)
 80049e0:	4662      	mov	r2, ip
 80049e2:	42b8      	cmp	r0, r7
 80049e4:	d00c      	beq.n	8004a00 <HAL_GPIO_Init+0xf8>
 80049e6:	4f21      	ldr	r7, [pc, #132]	; (8004a6c <HAL_GPIO_Init+0x164>)
 80049e8:	1892      	adds	r2, r2, r2
 80049ea:	42b8      	cmp	r0, r7
 80049ec:	d008      	beq.n	8004a00 <HAL_GPIO_Init+0xf8>
 80049ee:	4f20      	ldr	r7, [pc, #128]	; (8004a70 <HAL_GPIO_Init+0x168>)
 80049f0:	0032      	movs	r2, r6
 80049f2:	42b8      	cmp	r0, r7
 80049f4:	d004      	beq.n	8004a00 <HAL_GPIO_Init+0xf8>
 80049f6:	4e1f      	ldr	r6, [pc, #124]	; (8004a74 <HAL_GPIO_Init+0x16c>)
 80049f8:	4462      	add	r2, ip
 80049fa:	42b0      	cmp	r0, r6
 80049fc:	d000      	beq.n	8004a00 <HAL_GPIO_Init+0xf8>
 80049fe:	9a05      	ldr	r2, [sp, #20]
 8004a00:	40aa      	lsls	r2, r5
 8004a02:	9d04      	ldr	r5, [sp, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004a04:	9f01      	ldr	r7, [sp, #4]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8004a06:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004a08:	60a2      	str	r2, [r4, #8]
        temp = EXTI->IMR;
 8004a0a:	4a1b      	ldr	r2, [pc, #108]	; (8004a78 <HAL_GPIO_Init+0x170>)
        temp &= ~((uint32_t)iocurrent);
 8004a0c:	9c02      	ldr	r4, [sp, #8]
        temp = EXTI->IMR;
 8004a0e:	6816      	ldr	r6, [r2, #0]
          temp |= iocurrent;
 8004a10:	9d02      	ldr	r5, [sp, #8]
        temp &= ~((uint32_t)iocurrent);
 8004a12:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 8004a14:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004a16:	03ff      	lsls	r7, r7, #15
 8004a18:	d401      	bmi.n	8004a1e <HAL_GPIO_Init+0x116>
        temp &= ~((uint32_t)iocurrent);
 8004a1a:	0035      	movs	r5, r6
 8004a1c:	4025      	ands	r5, r4
        EXTI->IMR = temp;
 8004a1e:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8004a20:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 8004a22:	9d02      	ldr	r5, [sp, #8]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004a24:	9f01      	ldr	r7, [sp, #4]
          temp |= iocurrent;
 8004a26:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004a28:	03bf      	lsls	r7, r7, #14
 8004a2a:	d401      	bmi.n	8004a30 <HAL_GPIO_Init+0x128>
        temp &= ~((uint32_t)iocurrent);
 8004a2c:	0035      	movs	r5, r6
 8004a2e:	4025      	ands	r5, r4
        EXTI->EMR = temp;
 8004a30:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8004a32:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 8004a34:	9d02      	ldr	r5, [sp, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004a36:	9f01      	ldr	r7, [sp, #4]
          temp |= iocurrent;
 8004a38:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004a3a:	02ff      	lsls	r7, r7, #11
 8004a3c:	d401      	bmi.n	8004a42 <HAL_GPIO_Init+0x13a>
        temp &= ~((uint32_t)iocurrent);
 8004a3e:	0035      	movs	r5, r6
 8004a40:	4025      	ands	r5, r4
        EXTI->RTSR = temp;
 8004a42:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8004a44:	68d5      	ldr	r5, [r2, #12]
          temp |= iocurrent;
 8004a46:	9e02      	ldr	r6, [sp, #8]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004a48:	9f01      	ldr	r7, [sp, #4]
          temp |= iocurrent;
 8004a4a:	432e      	orrs	r6, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004a4c:	02bf      	lsls	r7, r7, #10
 8004a4e:	d401      	bmi.n	8004a54 <HAL_GPIO_Init+0x14c>
        temp &= ~((uint32_t)iocurrent);
 8004a50:	4025      	ands	r5, r4
 8004a52:	002e      	movs	r6, r5
        EXTI->FTSR = temp;
 8004a54:	60d6      	str	r6, [r2, #12]
    position++;
 8004a56:	3301      	adds	r3, #1
 8004a58:	e761      	b.n	800491e <HAL_GPIO_Init+0x16>
 8004a5a:	46c0      	nop			; (mov r8, r8)
 8004a5c:	afffe400 	.word	0xafffe400
 8004a60:	40021000 	.word	0x40021000
 8004a64:	40010000 	.word	0x40010000
 8004a68:	50000400 	.word	0x50000400
 8004a6c:	50000800 	.word	0x50000800
 8004a70:	50000c00 	.word	0x50000c00
 8004a74:	50001000 	.word	0x50001000
 8004a78:	40010400 	.word	0x40010400

08004a7c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;
  
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  
  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004a7c:	6900      	ldr	r0, [r0, #16]
 8004a7e:	4008      	ands	r0, r1
 8004a80:	1e41      	subs	r1, r0, #1
 8004a82:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8004a84:	b2c0      	uxtb	r0, r0
}
 8004a86:	4770      	bx	lr

08004a88 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 8004a88:	2a00      	cmp	r2, #0
 8004a8a:	d001      	beq.n	8004a90 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a8c:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8004a8e:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 8004a90:	6281      	str	r1, [r0, #40]	; 0x28
}
 8004a92:	e7fc      	b.n	8004a8e <HAL_GPIO_WritePin+0x6>

08004a94 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8004a94:	4b04      	ldr	r3, [pc, #16]	; (8004aa8 <HAL_GPIO_EXTI_IRQHandler+0x14>)
{
 8004a96:	b510      	push	{r4, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8004a98:	695a      	ldr	r2, [r3, #20]
 8004a9a:	4210      	tst	r0, r2
 8004a9c:	d002      	beq.n	8004aa4 <HAL_GPIO_EXTI_IRQHandler+0x10>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004a9e:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004aa0:	f009 fc48 	bl	800e334 <HAL_GPIO_EXTI_Callback>
  }
}
 8004aa4:	bd10      	pop	{r4, pc}
 8004aa6:	46c0      	nop			; (mov r8, r8)
 8004aa8:	40010400 	.word	0x40010400

08004aac <HAL_PWR_DisablePVD>:
  * @retval None
  */
void HAL_PWR_DisablePVD(void)
{
  /* Disable the power voltage detector */
  CLEAR_BIT(PWR->CR, PWR_CR_PVDE);
 8004aac:	2110      	movs	r1, #16
 8004aae:	4a02      	ldr	r2, [pc, #8]	; (8004ab8 <HAL_PWR_DisablePVD+0xc>)
 8004ab0:	6813      	ldr	r3, [r2, #0]
 8004ab2:	438b      	bics	r3, r1
 8004ab4:	6013      	str	r3, [r2, #0]
}
 8004ab6:	4770      	bx	lr
 8004ab8:	40007000 	.word	0x40007000

08004abc <HAL_PWREx_EnableFastWakeUp>:
  * @retval None
  */
void HAL_PWREx_EnableFastWakeUp(void)
{
  /* Enable the fast wake up */
  SET_BIT(PWR->CR, PWR_CR_FWU);
 8004abc:	2380      	movs	r3, #128	; 0x80
 8004abe:	4a03      	ldr	r2, [pc, #12]	; (8004acc <HAL_PWREx_EnableFastWakeUp+0x10>)
 8004ac0:	00db      	lsls	r3, r3, #3
 8004ac2:	6811      	ldr	r1, [r2, #0]
 8004ac4:	430b      	orrs	r3, r1
 8004ac6:	6013      	str	r3, [r2, #0]
}
 8004ac8:	4770      	bx	lr
 8004aca:	46c0      	nop			; (mov r8, r8)
 8004acc:	40007000 	.word	0x40007000

08004ad0 <HAL_PWREx_EnableUltraLowPower>:
  * @retval None
  */
void HAL_PWREx_EnableUltraLowPower(void)
{
  /* Enable the Ultra Low Power mode */
  SET_BIT(PWR->CR, PWR_CR_ULP);
 8004ad0:	2380      	movs	r3, #128	; 0x80
 8004ad2:	4a03      	ldr	r2, [pc, #12]	; (8004ae0 <HAL_PWREx_EnableUltraLowPower+0x10>)
 8004ad4:	009b      	lsls	r3, r3, #2
 8004ad6:	6811      	ldr	r1, [r2, #0]
 8004ad8:	430b      	orrs	r3, r1
 8004ada:	6013      	str	r3, [r2, #0]
}
 8004adc:	4770      	bx	lr
 8004ade:	46c0      	nop			; (mov r8, r8)
 8004ae0:	40007000 	.word	0x40007000

08004ae4 <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004ae4:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8004ae6:	4b19      	ldr	r3, [pc, #100]	; (8004b4c <HAL_RCC_GetSysClockFreq+0x68>)
{
 8004ae8:	b510      	push	{r4, lr}
  tmpreg = RCC->CFGR;
 8004aea:	68d9      	ldr	r1, [r3, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 8004aec:	400a      	ands	r2, r1
 8004aee:	2a08      	cmp	r2, #8
 8004af0:	d029      	beq.n	8004b46 <HAL_RCC_GetSysClockFreq+0x62>
 8004af2:	2a0c      	cmp	r2, #12
 8004af4:	d009      	beq.n	8004b0a <HAL_RCC_GetSysClockFreq+0x26>
 8004af6:	2a04      	cmp	r2, #4
 8004af8:	d11d      	bne.n	8004b36 <HAL_RCC_GetSysClockFreq+0x52>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004afa:	6818      	ldr	r0, [r3, #0]
      {
        sysclockfreq =  (HSI_VALUE >> 2);
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
 8004afc:	4b14      	ldr	r3, [pc, #80]	; (8004b50 <HAL_RCC_GetSysClockFreq+0x6c>)
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004afe:	06c0      	lsls	r0, r0, #27
        sysclockfreq =  HSI_VALUE;
 8004b00:	17c0      	asrs	r0, r0, #31
 8004b02:	4018      	ands	r0, r3
 8004b04:	4b13      	ldr	r3, [pc, #76]	; (8004b54 <HAL_RCC_GetSysClockFreq+0x70>)
 8004b06:	18c0      	adds	r0, r0, r3
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
      break;
    }
  }
  return sysclockfreq;
}
 8004b08:	bd10      	pop	{r4, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004b0a:	028a      	lsls	r2, r1, #10
 8004b0c:	4812      	ldr	r0, [pc, #72]	; (8004b58 <HAL_RCC_GetSysClockFreq+0x74>)
 8004b0e:	0f12      	lsrs	r2, r2, #28
 8004b10:	5c82      	ldrb	r2, [r0, r2]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8004b12:	0209      	lsls	r1, r1, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004b14:	68d8      	ldr	r0, [r3, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8004b16:	0f89      	lsrs	r1, r1, #30
 8004b18:	3101      	adds	r1, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004b1a:	03c0      	lsls	r0, r0, #15
 8004b1c:	d504      	bpl.n	8004b28 <HAL_RCC_GetSysClockFreq+0x44>
        pllvco = (HSE_VALUE * pllm) / plld;
 8004b1e:	480f      	ldr	r0, [pc, #60]	; (8004b5c <HAL_RCC_GetSysClockFreq+0x78>)
         pllvco = (HSI_VALUE * pllm) / plld;
 8004b20:	4350      	muls	r0, r2
 8004b22:	f7fb fb21 	bl	8000168 <__udivsi3>
 8004b26:	e7ef      	b.n	8004b08 <HAL_RCC_GetSysClockFreq+0x24>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	06db      	lsls	r3, r3, #27
 8004b2c:	d501      	bpl.n	8004b32 <HAL_RCC_GetSysClockFreq+0x4e>
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8004b2e:	480c      	ldr	r0, [pc, #48]	; (8004b60 <HAL_RCC_GetSysClockFreq+0x7c>)
 8004b30:	e7f6      	b.n	8004b20 <HAL_RCC_GetSysClockFreq+0x3c>
         pllvco = (HSI_VALUE * pllm) / plld;
 8004b32:	4808      	ldr	r0, [pc, #32]	; (8004b54 <HAL_RCC_GetSysClockFreq+0x70>)
 8004b34:	e7f4      	b.n	8004b20 <HAL_RCC_GetSysClockFreq+0x3c>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8004b36:	2080      	movs	r0, #128	; 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8004b38:	685b      	ldr	r3, [r3, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8004b3a:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8004b3c:	041b      	lsls	r3, r3, #16
 8004b3e:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8004b40:	3301      	adds	r3, #1
 8004b42:	4098      	lsls	r0, r3
 8004b44:	e7e0      	b.n	8004b08 <HAL_RCC_GetSysClockFreq+0x24>
      sysclockfreq = HSE_VALUE;
 8004b46:	4805      	ldr	r0, [pc, #20]	; (8004b5c <HAL_RCC_GetSysClockFreq+0x78>)
 8004b48:	e7de      	b.n	8004b08 <HAL_RCC_GetSysClockFreq+0x24>
 8004b4a:	46c0      	nop			; (mov r8, r8)
 8004b4c:	40021000 	.word	0x40021000
 8004b50:	ff48e500 	.word	0xff48e500
 8004b54:	00f42400 	.word	0x00f42400
 8004b58:	0800f710 	.word	0x0800f710
 8004b5c:	007a1200 	.word	0x007a1200
 8004b60:	003d0900 	.word	0x003d0900

08004b64 <HAL_RCC_OscConfig>:
{
 8004b64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b66:	0005      	movs	r5, r0
 8004b68:	b087      	sub	sp, #28
  if(RCC_OscInitStruct == NULL)
 8004b6a:	2800      	cmp	r0, #0
 8004b6c:	d102      	bne.n	8004b74 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 8004b6e:	2001      	movs	r0, #1
}
 8004b70:	b007      	add	sp, #28
 8004b72:	bdf0      	pop	{r4, r5, r6, r7, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b74:	230c      	movs	r3, #12
 8004b76:	4cc2      	ldr	r4, [pc, #776]	; (8004e80 <HAL_RCC_OscConfig+0x31c>)
 8004b78:	68e6      	ldr	r6, [r4, #12]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b7a:	68e2      	ldr	r2, [r4, #12]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b7c:	401e      	ands	r6, r3
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b7e:	2380      	movs	r3, #128	; 0x80
 8004b80:	025b      	lsls	r3, r3, #9
 8004b82:	401a      	ands	r2, r3
 8004b84:	9201      	str	r2, [sp, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b86:	6802      	ldr	r2, [r0, #0]
 8004b88:	07d2      	lsls	r2, r2, #31
 8004b8a:	d441      	bmi.n	8004c10 <HAL_RCC_OscConfig+0xac>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b8c:	682b      	ldr	r3, [r5, #0]
 8004b8e:	079b      	lsls	r3, r3, #30
 8004b90:	d500      	bpl.n	8004b94 <HAL_RCC_OscConfig+0x30>
 8004b92:	e087      	b.n	8004ca4 <HAL_RCC_OscConfig+0x140>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004b94:	682b      	ldr	r3, [r5, #0]
 8004b96:	06db      	lsls	r3, r3, #27
 8004b98:	d528      	bpl.n	8004bec <HAL_RCC_OscConfig+0x88>
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8004b9a:	2e00      	cmp	r6, #0
 8004b9c:	d000      	beq.n	8004ba0 <HAL_RCC_OscConfig+0x3c>
 8004b9e:	e0e1      	b.n	8004d64 <HAL_RCC_OscConfig+0x200>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004ba0:	6823      	ldr	r3, [r4, #0]
 8004ba2:	059b      	lsls	r3, r3, #22
 8004ba4:	d502      	bpl.n	8004bac <HAL_RCC_OscConfig+0x48>
 8004ba6:	69eb      	ldr	r3, [r5, #28]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d0e0      	beq.n	8004b6e <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004bac:	6862      	ldr	r2, [r4, #4]
 8004bae:	49b5      	ldr	r1, [pc, #724]	; (8004e84 <HAL_RCC_OscConfig+0x320>)
 8004bb0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004bb2:	400a      	ands	r2, r1
 8004bb4:	431a      	orrs	r2, r3
 8004bb6:	6062      	str	r2, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004bb8:	6861      	ldr	r1, [r4, #4]
 8004bba:	6a2a      	ldr	r2, [r5, #32]
 8004bbc:	0209      	lsls	r1, r1, #8
 8004bbe:	0a09      	lsrs	r1, r1, #8
 8004bc0:	0612      	lsls	r2, r2, #24
 8004bc2:	430a      	orrs	r2, r1
 8004bc4:	6062      	str	r2, [r4, #4]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004bc6:	2280      	movs	r2, #128	; 0x80
 8004bc8:	0b5b      	lsrs	r3, r3, #13
 8004bca:	3301      	adds	r3, #1
 8004bcc:	0212      	lsls	r2, r2, #8
 8004bce:	409a      	lsls	r2, r3
 8004bd0:	0013      	movs	r3, r2
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8004bd2:	68e1      	ldr	r1, [r4, #12]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8004bd4:	2003      	movs	r0, #3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8004bd6:	060a      	lsls	r2, r1, #24
 8004bd8:	49ab      	ldr	r1, [pc, #684]	; (8004e88 <HAL_RCC_OscConfig+0x324>)
 8004bda:	0f12      	lsrs	r2, r2, #28
 8004bdc:	5c8a      	ldrb	r2, [r1, r2]
 8004bde:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004be0:	4aaa      	ldr	r2, [pc, #680]	; (8004e8c <HAL_RCC_OscConfig+0x328>)
 8004be2:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8004be4:	f009 fb48 	bl	800e278 <HAL_InitTick>
        if(status != HAL_OK)
 8004be8:	2800      	cmp	r0, #0
 8004bea:	d1c1      	bne.n	8004b70 <HAL_RCC_OscConfig+0xc>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bec:	682b      	ldr	r3, [r5, #0]
 8004bee:	071b      	lsls	r3, r3, #28
 8004bf0:	d500      	bpl.n	8004bf4 <HAL_RCC_OscConfig+0x90>
 8004bf2:	e0ee      	b.n	8004dd2 <HAL_RCC_OscConfig+0x26e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004bf4:	682b      	ldr	r3, [r5, #0]
 8004bf6:	075b      	lsls	r3, r3, #29
 8004bf8:	d500      	bpl.n	8004bfc <HAL_RCC_OscConfig+0x98>
 8004bfa:	e110      	b.n	8004e1e <HAL_RCC_OscConfig+0x2ba>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004bfc:	682b      	ldr	r3, [r5, #0]
 8004bfe:	069b      	lsls	r3, r3, #26
 8004c00:	d500      	bpl.n	8004c04 <HAL_RCC_OscConfig+0xa0>
 8004c02:	e195      	b.n	8004f30 <HAL_RCC_OscConfig+0x3cc>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c04:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d000      	beq.n	8004c0c <HAL_RCC_OscConfig+0xa8>
 8004c0a:	e1c4      	b.n	8004f96 <HAL_RCC_OscConfig+0x432>
  return HAL_OK;
 8004c0c:	2000      	movs	r0, #0
 8004c0e:	e7af      	b.n	8004b70 <HAL_RCC_OscConfig+0xc>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004c10:	2e08      	cmp	r6, #8
 8004c12:	d004      	beq.n	8004c1e <HAL_RCC_OscConfig+0xba>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004c14:	2e0c      	cmp	r6, #12
 8004c16:	d109      	bne.n	8004c2c <HAL_RCC_OscConfig+0xc8>
 8004c18:	9a01      	ldr	r2, [sp, #4]
 8004c1a:	2a00      	cmp	r2, #0
 8004c1c:	d006      	beq.n	8004c2c <HAL_RCC_OscConfig+0xc8>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c1e:	6823      	ldr	r3, [r4, #0]
 8004c20:	039b      	lsls	r3, r3, #14
 8004c22:	d5b3      	bpl.n	8004b8c <HAL_RCC_OscConfig+0x28>
 8004c24:	686b      	ldr	r3, [r5, #4]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d1b0      	bne.n	8004b8c <HAL_RCC_OscConfig+0x28>
 8004c2a:	e7a0      	b.n	8004b6e <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c2c:	686a      	ldr	r2, [r5, #4]
 8004c2e:	429a      	cmp	r2, r3
 8004c30:	d111      	bne.n	8004c56 <HAL_RCC_OscConfig+0xf2>
 8004c32:	6822      	ldr	r2, [r4, #0]
 8004c34:	4313      	orrs	r3, r2
 8004c36:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004c38:	f7ff faa2 	bl	8004180 <HAL_GetTick>
 8004c3c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004c3e:	2280      	movs	r2, #128	; 0x80
 8004c40:	6823      	ldr	r3, [r4, #0]
 8004c42:	0292      	lsls	r2, r2, #10
 8004c44:	4213      	tst	r3, r2
 8004c46:	d1a1      	bne.n	8004b8c <HAL_RCC_OscConfig+0x28>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c48:	f7ff fa9a 	bl	8004180 <HAL_GetTick>
 8004c4c:	1bc0      	subs	r0, r0, r7
 8004c4e:	2864      	cmp	r0, #100	; 0x64
 8004c50:	d9f5      	bls.n	8004c3e <HAL_RCC_OscConfig+0xda>
            return HAL_TIMEOUT;
 8004c52:	2003      	movs	r0, #3
 8004c54:	e78c      	b.n	8004b70 <HAL_RCC_OscConfig+0xc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c56:	21a0      	movs	r1, #160	; 0xa0
 8004c58:	02c9      	lsls	r1, r1, #11
 8004c5a:	428a      	cmp	r2, r1
 8004c5c:	d105      	bne.n	8004c6a <HAL_RCC_OscConfig+0x106>
 8004c5e:	2280      	movs	r2, #128	; 0x80
 8004c60:	6821      	ldr	r1, [r4, #0]
 8004c62:	02d2      	lsls	r2, r2, #11
 8004c64:	430a      	orrs	r2, r1
 8004c66:	6022      	str	r2, [r4, #0]
 8004c68:	e7e3      	b.n	8004c32 <HAL_RCC_OscConfig+0xce>
 8004c6a:	6821      	ldr	r1, [r4, #0]
 8004c6c:	4888      	ldr	r0, [pc, #544]	; (8004e90 <HAL_RCC_OscConfig+0x32c>)
 8004c6e:	4001      	ands	r1, r0
 8004c70:	6021      	str	r1, [r4, #0]
 8004c72:	6821      	ldr	r1, [r4, #0]
 8004c74:	400b      	ands	r3, r1
 8004c76:	9305      	str	r3, [sp, #20]
 8004c78:	9b05      	ldr	r3, [sp, #20]
 8004c7a:	4986      	ldr	r1, [pc, #536]	; (8004e94 <HAL_RCC_OscConfig+0x330>)
 8004c7c:	6823      	ldr	r3, [r4, #0]
 8004c7e:	400b      	ands	r3, r1
 8004c80:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c82:	2a00      	cmp	r2, #0
 8004c84:	d1d8      	bne.n	8004c38 <HAL_RCC_OscConfig+0xd4>
        tickstart = HAL_GetTick();
 8004c86:	f7ff fa7b 	bl	8004180 <HAL_GetTick>
 8004c8a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004c8c:	2280      	movs	r2, #128	; 0x80
 8004c8e:	6823      	ldr	r3, [r4, #0]
 8004c90:	0292      	lsls	r2, r2, #10
 8004c92:	4213      	tst	r3, r2
 8004c94:	d100      	bne.n	8004c98 <HAL_RCC_OscConfig+0x134>
 8004c96:	e779      	b.n	8004b8c <HAL_RCC_OscConfig+0x28>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c98:	f7ff fa72 	bl	8004180 <HAL_GetTick>
 8004c9c:	1bc0      	subs	r0, r0, r7
 8004c9e:	2864      	cmp	r0, #100	; 0x64
 8004ca0:	d9f4      	bls.n	8004c8c <HAL_RCC_OscConfig+0x128>
 8004ca2:	e7d6      	b.n	8004c52 <HAL_RCC_OscConfig+0xee>
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8004ca4:	2220      	movs	r2, #32
    hsi_state = RCC_OscInitStruct->HSIState;
 8004ca6:	68eb      	ldr	r3, [r5, #12]
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8004ca8:	4213      	tst	r3, r2
 8004caa:	d003      	beq.n	8004cb4 <HAL_RCC_OscConfig+0x150>
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8004cac:	6821      	ldr	r1, [r4, #0]
      hsi_state &= ~RCC_CR_HSIOUTEN;
 8004cae:	4393      	bics	r3, r2
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8004cb0:	4311      	orrs	r1, r2
 8004cb2:	6021      	str	r1, [r4, #0]
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004cb4:	2e04      	cmp	r6, #4
 8004cb6:	d004      	beq.n	8004cc2 <HAL_RCC_OscConfig+0x15e>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004cb8:	2e0c      	cmp	r6, #12
 8004cba:	d125      	bne.n	8004d08 <HAL_RCC_OscConfig+0x1a4>
 8004cbc:	9a01      	ldr	r2, [sp, #4]
 8004cbe:	2a00      	cmp	r2, #0
 8004cc0:	d122      	bne.n	8004d08 <HAL_RCC_OscConfig+0x1a4>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8004cc2:	6822      	ldr	r2, [r4, #0]
 8004cc4:	0752      	lsls	r2, r2, #29
 8004cc6:	d502      	bpl.n	8004cce <HAL_RCC_OscConfig+0x16a>
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d100      	bne.n	8004cce <HAL_RCC_OscConfig+0x16a>
 8004ccc:	e74f      	b.n	8004b6e <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cce:	6861      	ldr	r1, [r4, #4]
 8004cd0:	692a      	ldr	r2, [r5, #16]
 8004cd2:	4871      	ldr	r0, [pc, #452]	; (8004e98 <HAL_RCC_OscConfig+0x334>)
 8004cd4:	0212      	lsls	r2, r2, #8
 8004cd6:	4001      	ands	r1, r0
 8004cd8:	430a      	orrs	r2, r1
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004cda:	2109      	movs	r1, #9
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cdc:	6062      	str	r2, [r4, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004cde:	6822      	ldr	r2, [r4, #0]
 8004ce0:	438a      	bics	r2, r1
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	6023      	str	r3, [r4, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004ce6:	f7ff fefd 	bl	8004ae4 <HAL_RCC_GetSysClockFreq>
 8004cea:	68e3      	ldr	r3, [r4, #12]
 8004cec:	4a66      	ldr	r2, [pc, #408]	; (8004e88 <HAL_RCC_OscConfig+0x324>)
 8004cee:	061b      	lsls	r3, r3, #24
 8004cf0:	0f1b      	lsrs	r3, r3, #28
 8004cf2:	5cd3      	ldrb	r3, [r2, r3]
 8004cf4:	40d8      	lsrs	r0, r3
 8004cf6:	4b65      	ldr	r3, [pc, #404]	; (8004e8c <HAL_RCC_OscConfig+0x328>)
 8004cf8:	6018      	str	r0, [r3, #0]
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8004cfa:	2003      	movs	r0, #3
 8004cfc:	f009 fabc 	bl	800e278 <HAL_InitTick>
      if(status != HAL_OK)
 8004d00:	2800      	cmp	r0, #0
 8004d02:	d100      	bne.n	8004d06 <HAL_RCC_OscConfig+0x1a2>
 8004d04:	e746      	b.n	8004b94 <HAL_RCC_OscConfig+0x30>
 8004d06:	e733      	b.n	8004b70 <HAL_RCC_OscConfig+0xc>
      if(hsi_state != RCC_HSI_OFF)
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d019      	beq.n	8004d40 <HAL_RCC_OscConfig+0x1dc>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004d0c:	2109      	movs	r1, #9
 8004d0e:	6822      	ldr	r2, [r4, #0]
 8004d10:	438a      	bics	r2, r1
 8004d12:	4313      	orrs	r3, r2
 8004d14:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004d16:	f7ff fa33 	bl	8004180 <HAL_GetTick>
 8004d1a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004d1c:	2204      	movs	r2, #4
 8004d1e:	6823      	ldr	r3, [r4, #0]
 8004d20:	4213      	tst	r3, r2
 8004d22:	d007      	beq.n	8004d34 <HAL_RCC_OscConfig+0x1d0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d24:	6862      	ldr	r2, [r4, #4]
 8004d26:	692b      	ldr	r3, [r5, #16]
 8004d28:	495b      	ldr	r1, [pc, #364]	; (8004e98 <HAL_RCC_OscConfig+0x334>)
 8004d2a:	021b      	lsls	r3, r3, #8
 8004d2c:	400a      	ands	r2, r1
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	6063      	str	r3, [r4, #4]
 8004d32:	e72f      	b.n	8004b94 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d34:	f7ff fa24 	bl	8004180 <HAL_GetTick>
 8004d38:	1bc0      	subs	r0, r0, r7
 8004d3a:	2802      	cmp	r0, #2
 8004d3c:	d9ee      	bls.n	8004d1c <HAL_RCC_OscConfig+0x1b8>
 8004d3e:	e788      	b.n	8004c52 <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_HSI_DISABLE();
 8004d40:	2201      	movs	r2, #1
 8004d42:	6823      	ldr	r3, [r4, #0]
 8004d44:	4393      	bics	r3, r2
 8004d46:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004d48:	f7ff fa1a 	bl	8004180 <HAL_GetTick>
 8004d4c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004d4e:	2204      	movs	r2, #4
 8004d50:	6823      	ldr	r3, [r4, #0]
 8004d52:	4213      	tst	r3, r2
 8004d54:	d100      	bne.n	8004d58 <HAL_RCC_OscConfig+0x1f4>
 8004d56:	e71d      	b.n	8004b94 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d58:	f7ff fa12 	bl	8004180 <HAL_GetTick>
 8004d5c:	1bc0      	subs	r0, r0, r7
 8004d5e:	2802      	cmp	r0, #2
 8004d60:	d9f5      	bls.n	8004d4e <HAL_RCC_OscConfig+0x1ea>
 8004d62:	e776      	b.n	8004c52 <HAL_RCC_OscConfig+0xee>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004d64:	69eb      	ldr	r3, [r5, #28]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d020      	beq.n	8004dac <HAL_RCC_OscConfig+0x248>
        __HAL_RCC_MSI_ENABLE();
 8004d6a:	2380      	movs	r3, #128	; 0x80
 8004d6c:	6822      	ldr	r2, [r4, #0]
 8004d6e:	005b      	lsls	r3, r3, #1
 8004d70:	4313      	orrs	r3, r2
 8004d72:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004d74:	f7ff fa04 	bl	8004180 <HAL_GetTick>
 8004d78:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004d7a:	2280      	movs	r2, #128	; 0x80
 8004d7c:	6823      	ldr	r3, [r4, #0]
 8004d7e:	0092      	lsls	r2, r2, #2
 8004d80:	4213      	tst	r3, r2
 8004d82:	d00d      	beq.n	8004da0 <HAL_RCC_OscConfig+0x23c>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004d84:	6863      	ldr	r3, [r4, #4]
 8004d86:	4a3f      	ldr	r2, [pc, #252]	; (8004e84 <HAL_RCC_OscConfig+0x320>)
 8004d88:	4013      	ands	r3, r2
 8004d8a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	6063      	str	r3, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004d90:	6862      	ldr	r2, [r4, #4]
 8004d92:	6a2b      	ldr	r3, [r5, #32]
 8004d94:	0212      	lsls	r2, r2, #8
 8004d96:	061b      	lsls	r3, r3, #24
 8004d98:	0a12      	lsrs	r2, r2, #8
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	6063      	str	r3, [r4, #4]
 8004d9e:	e725      	b.n	8004bec <HAL_RCC_OscConfig+0x88>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004da0:	f7ff f9ee 	bl	8004180 <HAL_GetTick>
 8004da4:	1bc0      	subs	r0, r0, r7
 8004da6:	2802      	cmp	r0, #2
 8004da8:	d9e7      	bls.n	8004d7a <HAL_RCC_OscConfig+0x216>
 8004daa:	e752      	b.n	8004c52 <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_MSI_DISABLE();
 8004dac:	6823      	ldr	r3, [r4, #0]
 8004dae:	4a3b      	ldr	r2, [pc, #236]	; (8004e9c <HAL_RCC_OscConfig+0x338>)
 8004db0:	4013      	ands	r3, r2
 8004db2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004db4:	f7ff f9e4 	bl	8004180 <HAL_GetTick>
 8004db8:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004dba:	2280      	movs	r2, #128	; 0x80
 8004dbc:	6823      	ldr	r3, [r4, #0]
 8004dbe:	0092      	lsls	r2, r2, #2
 8004dc0:	4213      	tst	r3, r2
 8004dc2:	d100      	bne.n	8004dc6 <HAL_RCC_OscConfig+0x262>
 8004dc4:	e712      	b.n	8004bec <HAL_RCC_OscConfig+0x88>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004dc6:	f7ff f9db 	bl	8004180 <HAL_GetTick>
 8004dca:	1bc0      	subs	r0, r0, r7
 8004dcc:	2802      	cmp	r0, #2
 8004dce:	d9f4      	bls.n	8004dba <HAL_RCC_OscConfig+0x256>
 8004dd0:	e73f      	b.n	8004c52 <HAL_RCC_OscConfig+0xee>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004dd2:	696a      	ldr	r2, [r5, #20]
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	2a00      	cmp	r2, #0
 8004dd8:	d010      	beq.n	8004dfc <HAL_RCC_OscConfig+0x298>
      __HAL_RCC_LSI_ENABLE();
 8004dda:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8004de0:	f7ff f9ce 	bl	8004180 <HAL_GetTick>
 8004de4:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004de6:	2202      	movs	r2, #2
 8004de8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004dea:	4213      	tst	r3, r2
 8004dec:	d000      	beq.n	8004df0 <HAL_RCC_OscConfig+0x28c>
 8004dee:	e701      	b.n	8004bf4 <HAL_RCC_OscConfig+0x90>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004df0:	f7ff f9c6 	bl	8004180 <HAL_GetTick>
 8004df4:	1bc0      	subs	r0, r0, r7
 8004df6:	2802      	cmp	r0, #2
 8004df8:	d9f5      	bls.n	8004de6 <HAL_RCC_OscConfig+0x282>
 8004dfa:	e72a      	b.n	8004c52 <HAL_RCC_OscConfig+0xee>
      __HAL_RCC_LSI_DISABLE();
 8004dfc:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8004dfe:	439a      	bics	r2, r3
 8004e00:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8004e02:	f7ff f9bd 	bl	8004180 <HAL_GetTick>
 8004e06:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004e08:	2202      	movs	r2, #2
 8004e0a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004e0c:	4213      	tst	r3, r2
 8004e0e:	d100      	bne.n	8004e12 <HAL_RCC_OscConfig+0x2ae>
 8004e10:	e6f0      	b.n	8004bf4 <HAL_RCC_OscConfig+0x90>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e12:	f7ff f9b5 	bl	8004180 <HAL_GetTick>
 8004e16:	1bc0      	subs	r0, r0, r7
 8004e18:	2802      	cmp	r0, #2
 8004e1a:	d9f5      	bls.n	8004e08 <HAL_RCC_OscConfig+0x2a4>
 8004e1c:	e719      	b.n	8004c52 <HAL_RCC_OscConfig+0xee>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e1e:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8004e20:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e22:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004e24:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 8004e26:	9101      	str	r1, [sp, #4]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e28:	421a      	tst	r2, r3
 8004e2a:	d104      	bne.n	8004e36 <HAL_RCC_OscConfig+0x2d2>
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e2c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 8004e32:	2301      	movs	r3, #1
 8004e34:	9301      	str	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e36:	2280      	movs	r2, #128	; 0x80
 8004e38:	4f19      	ldr	r7, [pc, #100]	; (8004ea0 <HAL_RCC_OscConfig+0x33c>)
 8004e3a:	0052      	lsls	r2, r2, #1
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	4213      	tst	r3, r2
 8004e40:	d008      	beq.n	8004e54 <HAL_RCC_OscConfig+0x2f0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e42:	2280      	movs	r2, #128	; 0x80
 8004e44:	68ab      	ldr	r3, [r5, #8]
 8004e46:	0052      	lsls	r2, r2, #1
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d12b      	bne.n	8004ea4 <HAL_RCC_OscConfig+0x340>
 8004e4c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	6523      	str	r3, [r4, #80]	; 0x50
 8004e52:	e04c      	b.n	8004eee <HAL_RCC_OscConfig+0x38a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e54:	2280      	movs	r2, #128	; 0x80
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	0052      	lsls	r2, r2, #1
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8004e5e:	f7ff f98f 	bl	8004180 <HAL_GetTick>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e62:	2380      	movs	r3, #128	; 0x80
 8004e64:	005b      	lsls	r3, r3, #1
      tickstart = HAL_GetTick();
 8004e66:	9002      	str	r0, [sp, #8]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e68:	9303      	str	r3, [sp, #12]
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	9a03      	ldr	r2, [sp, #12]
 8004e6e:	4213      	tst	r3, r2
 8004e70:	d1e7      	bne.n	8004e42 <HAL_RCC_OscConfig+0x2de>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e72:	f7ff f985 	bl	8004180 <HAL_GetTick>
 8004e76:	9b02      	ldr	r3, [sp, #8]
 8004e78:	1ac0      	subs	r0, r0, r3
 8004e7a:	2864      	cmp	r0, #100	; 0x64
 8004e7c:	d9f5      	bls.n	8004e6a <HAL_RCC_OscConfig+0x306>
 8004e7e:	e6e8      	b.n	8004c52 <HAL_RCC_OscConfig+0xee>
 8004e80:	40021000 	.word	0x40021000
 8004e84:	ffff1fff 	.word	0xffff1fff
 8004e88:	0800f719 	.word	0x0800f719
 8004e8c:	20000044 	.word	0x20000044
 8004e90:	fffeffff 	.word	0xfffeffff
 8004e94:	fffbffff 	.word	0xfffbffff
 8004e98:	ffffe0ff 	.word	0xffffe0ff
 8004e9c:	fffffeff 	.word	0xfffffeff
 8004ea0:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d116      	bne.n	8004ed6 <HAL_RCC_OscConfig+0x372>
 8004ea8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004eaa:	4a6c      	ldr	r2, [pc, #432]	; (800505c <HAL_RCC_OscConfig+0x4f8>)
 8004eac:	4013      	ands	r3, r2
 8004eae:	6523      	str	r3, [r4, #80]	; 0x50
 8004eb0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004eb2:	4a6b      	ldr	r2, [pc, #428]	; (8005060 <HAL_RCC_OscConfig+0x4fc>)
 8004eb4:	4013      	ands	r3, r2
 8004eb6:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8004eb8:	f7ff f962 	bl	8004180 <HAL_GetTick>
 8004ebc:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004ebe:	2280      	movs	r2, #128	; 0x80
 8004ec0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004ec2:	0092      	lsls	r2, r2, #2
 8004ec4:	4213      	tst	r3, r2
 8004ec6:	d02a      	beq.n	8004f1e <HAL_RCC_OscConfig+0x3ba>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ec8:	f7ff f95a 	bl	8004180 <HAL_GetTick>
 8004ecc:	4b65      	ldr	r3, [pc, #404]	; (8005064 <HAL_RCC_OscConfig+0x500>)
 8004ece:	1bc0      	subs	r0, r0, r7
 8004ed0:	4298      	cmp	r0, r3
 8004ed2:	d9f4      	bls.n	8004ebe <HAL_RCC_OscConfig+0x35a>
 8004ed4:	e6bd      	b.n	8004c52 <HAL_RCC_OscConfig+0xee>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ed6:	21a0      	movs	r1, #160	; 0xa0
 8004ed8:	00c9      	lsls	r1, r1, #3
 8004eda:	428b      	cmp	r3, r1
 8004edc:	d10b      	bne.n	8004ef6 <HAL_RCC_OscConfig+0x392>
 8004ede:	2380      	movs	r3, #128	; 0x80
 8004ee0:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8004ee2:	00db      	lsls	r3, r3, #3
 8004ee4:	430b      	orrs	r3, r1
 8004ee6:	6523      	str	r3, [r4, #80]	; 0x50
 8004ee8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004eea:	431a      	orrs	r2, r3
 8004eec:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8004eee:	f7ff f947 	bl	8004180 <HAL_GetTick>
 8004ef2:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004ef4:	e00e      	b.n	8004f14 <HAL_RCC_OscConfig+0x3b0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ef6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004ef8:	4a58      	ldr	r2, [pc, #352]	; (800505c <HAL_RCC_OscConfig+0x4f8>)
 8004efa:	4013      	ands	r3, r2
 8004efc:	6523      	str	r3, [r4, #80]	; 0x50
 8004efe:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004f00:	4a57      	ldr	r2, [pc, #348]	; (8005060 <HAL_RCC_OscConfig+0x4fc>)
 8004f02:	4013      	ands	r3, r2
 8004f04:	e7a4      	b.n	8004e50 <HAL_RCC_OscConfig+0x2ec>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f06:	f7ff f93b 	bl	8004180 <HAL_GetTick>
 8004f0a:	4b56      	ldr	r3, [pc, #344]	; (8005064 <HAL_RCC_OscConfig+0x500>)
 8004f0c:	1bc0      	subs	r0, r0, r7
 8004f0e:	4298      	cmp	r0, r3
 8004f10:	d900      	bls.n	8004f14 <HAL_RCC_OscConfig+0x3b0>
 8004f12:	e69e      	b.n	8004c52 <HAL_RCC_OscConfig+0xee>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004f14:	2280      	movs	r2, #128	; 0x80
 8004f16:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004f18:	0092      	lsls	r2, r2, #2
 8004f1a:	4213      	tst	r3, r2
 8004f1c:	d0f3      	beq.n	8004f06 <HAL_RCC_OscConfig+0x3a2>
    if(pwrclkchanged == SET)
 8004f1e:	9b01      	ldr	r3, [sp, #4]
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d000      	beq.n	8004f26 <HAL_RCC_OscConfig+0x3c2>
 8004f24:	e66a      	b.n	8004bfc <HAL_RCC_OscConfig+0x98>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f26:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004f28:	4a4f      	ldr	r2, [pc, #316]	; (8005068 <HAL_RCC_OscConfig+0x504>)
 8004f2a:	4013      	ands	r3, r2
 8004f2c:	63a3      	str	r3, [r4, #56]	; 0x38
 8004f2e:	e665      	b.n	8004bfc <HAL_RCC_OscConfig+0x98>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004f30:	69a9      	ldr	r1, [r5, #24]
 8004f32:	2301      	movs	r3, #1
 8004f34:	4a4d      	ldr	r2, [pc, #308]	; (800506c <HAL_RCC_OscConfig+0x508>)
 8004f36:	2900      	cmp	r1, #0
 8004f38:	d018      	beq.n	8004f6c <HAL_RCC_OscConfig+0x408>
        __HAL_RCC_HSI48_ENABLE();
 8004f3a:	68a1      	ldr	r1, [r4, #8]
 8004f3c:	4319      	orrs	r1, r3
 8004f3e:	60a1      	str	r1, [r4, #8]
 8004f40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004f42:	430b      	orrs	r3, r1
 8004f44:	6363      	str	r3, [r4, #52]	; 0x34
 8004f46:	2380      	movs	r3, #128	; 0x80
 8004f48:	6a11      	ldr	r1, [r2, #32]
 8004f4a:	019b      	lsls	r3, r3, #6
 8004f4c:	430b      	orrs	r3, r1
 8004f4e:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8004f50:	f7ff f916 	bl	8004180 <HAL_GetTick>
 8004f54:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004f56:	2202      	movs	r2, #2
 8004f58:	68a3      	ldr	r3, [r4, #8]
 8004f5a:	4213      	tst	r3, r2
 8004f5c:	d000      	beq.n	8004f60 <HAL_RCC_OscConfig+0x3fc>
 8004f5e:	e651      	b.n	8004c04 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f60:	f7ff f90e 	bl	8004180 <HAL_GetTick>
 8004f64:	1bc0      	subs	r0, r0, r7
 8004f66:	2802      	cmp	r0, #2
 8004f68:	d9f5      	bls.n	8004f56 <HAL_RCC_OscConfig+0x3f2>
 8004f6a:	e672      	b.n	8004c52 <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_HSI48_DISABLE();
 8004f6c:	68a1      	ldr	r1, [r4, #8]
 8004f6e:	4399      	bics	r1, r3
 8004f70:	60a1      	str	r1, [r4, #8]
 8004f72:	6a13      	ldr	r3, [r2, #32]
 8004f74:	493e      	ldr	r1, [pc, #248]	; (8005070 <HAL_RCC_OscConfig+0x50c>)
 8004f76:	400b      	ands	r3, r1
 8004f78:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8004f7a:	f7ff f901 	bl	8004180 <HAL_GetTick>
 8004f7e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004f80:	2202      	movs	r2, #2
 8004f82:	68a3      	ldr	r3, [r4, #8]
 8004f84:	4213      	tst	r3, r2
 8004f86:	d100      	bne.n	8004f8a <HAL_RCC_OscConfig+0x426>
 8004f88:	e63c      	b.n	8004c04 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f8a:	f7ff f8f9 	bl	8004180 <HAL_GetTick>
 8004f8e:	1bc0      	subs	r0, r0, r7
 8004f90:	2802      	cmp	r0, #2
 8004f92:	d9f5      	bls.n	8004f80 <HAL_RCC_OscConfig+0x41c>
 8004f94:	e65d      	b.n	8004c52 <HAL_RCC_OscConfig+0xee>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004f96:	2e0c      	cmp	r6, #12
 8004f98:	d043      	beq.n	8005022 <HAL_RCC_OscConfig+0x4be>
 8004f9a:	4a36      	ldr	r2, [pc, #216]	; (8005074 <HAL_RCC_OscConfig+0x510>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f9c:	2b02      	cmp	r3, #2
 8004f9e:	d12e      	bne.n	8004ffe <HAL_RCC_OscConfig+0x49a>
        __HAL_RCC_PLL_DISABLE();
 8004fa0:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004fa2:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8004fa4:	4013      	ands	r3, r2
 8004fa6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004fa8:	f7ff f8ea 	bl	8004180 <HAL_GetTick>
 8004fac:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004fae:	04b6      	lsls	r6, r6, #18
 8004fb0:	6823      	ldr	r3, [r4, #0]
 8004fb2:	4233      	tst	r3, r6
 8004fb4:	d11d      	bne.n	8004ff2 <HAL_RCC_OscConfig+0x48e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004fb6:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8004fb8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004fba:	68e2      	ldr	r2, [r4, #12]
 8004fbc:	430b      	orrs	r3, r1
 8004fbe:	492e      	ldr	r1, [pc, #184]	; (8005078 <HAL_RCC_OscConfig+0x514>)
 8004fc0:	400a      	ands	r2, r1
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	6b6a      	ldr	r2, [r5, #52]	; 0x34
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004fc6:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8004fcc:	2380      	movs	r3, #128	; 0x80
 8004fce:	6822      	ldr	r2, [r4, #0]
 8004fd0:	045b      	lsls	r3, r3, #17
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004fd6:	f7ff f8d3 	bl	8004180 <HAL_GetTick>
 8004fda:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004fdc:	04ad      	lsls	r5, r5, #18
 8004fde:	6823      	ldr	r3, [r4, #0]
 8004fe0:	422b      	tst	r3, r5
 8004fe2:	d000      	beq.n	8004fe6 <HAL_RCC_OscConfig+0x482>
 8004fe4:	e612      	b.n	8004c0c <HAL_RCC_OscConfig+0xa8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fe6:	f7ff f8cb 	bl	8004180 <HAL_GetTick>
 8004fea:	1b80      	subs	r0, r0, r6
 8004fec:	2802      	cmp	r0, #2
 8004fee:	d9f6      	bls.n	8004fde <HAL_RCC_OscConfig+0x47a>
 8004ff0:	e62f      	b.n	8004c52 <HAL_RCC_OscConfig+0xee>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ff2:	f7ff f8c5 	bl	8004180 <HAL_GetTick>
 8004ff6:	1bc0      	subs	r0, r0, r7
 8004ff8:	2802      	cmp	r0, #2
 8004ffa:	d9d9      	bls.n	8004fb0 <HAL_RCC_OscConfig+0x44c>
 8004ffc:	e629      	b.n	8004c52 <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_PLL_DISABLE();
 8004ffe:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005000:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8005002:	4013      	ands	r3, r2
 8005004:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8005006:	f7ff f8bb 	bl	8004180 <HAL_GetTick>
 800500a:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800500c:	04ad      	lsls	r5, r5, #18
 800500e:	6823      	ldr	r3, [r4, #0]
 8005010:	422b      	tst	r3, r5
 8005012:	d100      	bne.n	8005016 <HAL_RCC_OscConfig+0x4b2>
 8005014:	e5fa      	b.n	8004c0c <HAL_RCC_OscConfig+0xa8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005016:	f7ff f8b3 	bl	8004180 <HAL_GetTick>
 800501a:	1b80      	subs	r0, r0, r6
 800501c:	2802      	cmp	r0, #2
 800501e:	d9f6      	bls.n	800500e <HAL_RCC_OscConfig+0x4aa>
 8005020:	e617      	b.n	8004c52 <HAL_RCC_OscConfig+0xee>
        return HAL_ERROR;
 8005022:	0018      	movs	r0, r3
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005024:	2b01      	cmp	r3, #1
 8005026:	d100      	bne.n	800502a <HAL_RCC_OscConfig+0x4c6>
 8005028:	e5a2      	b.n	8004b70 <HAL_RCC_OscConfig+0xc>
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800502a:	2280      	movs	r2, #128	; 0x80
        pll_config = RCC->CFGR;
 800502c:	68e3      	ldr	r3, [r4, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800502e:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8005030:	0252      	lsls	r2, r2, #9
 8005032:	401a      	ands	r2, r3
        return HAL_ERROR;
 8005034:	2001      	movs	r0, #1
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005036:	428a      	cmp	r2, r1
 8005038:	d000      	beq.n	800503c <HAL_RCC_OscConfig+0x4d8>
 800503a:	e599      	b.n	8004b70 <HAL_RCC_OscConfig+0xc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800503c:	22f0      	movs	r2, #240	; 0xf0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800503e:	6b29      	ldr	r1, [r5, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005040:	0392      	lsls	r2, r2, #14
 8005042:	401a      	ands	r2, r3
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005044:	428a      	cmp	r2, r1
 8005046:	d000      	beq.n	800504a <HAL_RCC_OscConfig+0x4e6>
 8005048:	e592      	b.n	8004b70 <HAL_RCC_OscConfig+0xc>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800504a:	20c0      	movs	r0, #192	; 0xc0
 800504c:	0400      	lsls	r0, r0, #16
 800504e:	4003      	ands	r3, r0
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005050:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8005052:	1a18      	subs	r0, r3, r0
 8005054:	1e43      	subs	r3, r0, #1
 8005056:	4198      	sbcs	r0, r3
    return HAL_ERROR;
 8005058:	b2c0      	uxtb	r0, r0
 800505a:	e589      	b.n	8004b70 <HAL_RCC_OscConfig+0xc>
 800505c:	fffffeff 	.word	0xfffffeff
 8005060:	fffffbff 	.word	0xfffffbff
 8005064:	00001388 	.word	0x00001388
 8005068:	efffffff 	.word	0xefffffff
 800506c:	40010000 	.word	0x40010000
 8005070:	ffffdfff 	.word	0xffffdfff
 8005074:	feffffff 	.word	0xfeffffff
 8005078:	ff02ffff 	.word	0xff02ffff

0800507c <HAL_RCC_ClockConfig>:
{
 800507c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800507e:	1e06      	subs	r6, r0, #0
 8005080:	9101      	str	r1, [sp, #4]
  if(RCC_ClkInitStruct == NULL)
 8005082:	d101      	bne.n	8005088 <HAL_RCC_ClockConfig+0xc>
    return HAL_ERROR;
 8005084:	2001      	movs	r0, #1
}
 8005086:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005088:	2201      	movs	r2, #1
 800508a:	4c51      	ldr	r4, [pc, #324]	; (80051d0 <HAL_RCC_ClockConfig+0x154>)
 800508c:	9901      	ldr	r1, [sp, #4]
 800508e:	6823      	ldr	r3, [r4, #0]
 8005090:	4013      	ands	r3, r2
 8005092:	428b      	cmp	r3, r1
 8005094:	d327      	bcc.n	80050e6 <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005096:	6832      	ldr	r2, [r6, #0]
 8005098:	0793      	lsls	r3, r2, #30
 800509a:	d42f      	bmi.n	80050fc <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800509c:	07d3      	lsls	r3, r2, #31
 800509e:	d435      	bmi.n	800510c <HAL_RCC_ClockConfig+0x90>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80050a0:	2301      	movs	r3, #1
 80050a2:	6822      	ldr	r2, [r4, #0]
 80050a4:	9901      	ldr	r1, [sp, #4]
 80050a6:	401a      	ands	r2, r3
 80050a8:	428a      	cmp	r2, r1
 80050aa:	d900      	bls.n	80050ae <HAL_RCC_ClockConfig+0x32>
 80050ac:	e081      	b.n	80051b2 <HAL_RCC_ClockConfig+0x136>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050ae:	6832      	ldr	r2, [r6, #0]
 80050b0:	4c48      	ldr	r4, [pc, #288]	; (80051d4 <HAL_RCC_ClockConfig+0x158>)
 80050b2:	0753      	lsls	r3, r2, #29
 80050b4:	d500      	bpl.n	80050b8 <HAL_RCC_ClockConfig+0x3c>
 80050b6:	e084      	b.n	80051c2 <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050b8:	0713      	lsls	r3, r2, #28
 80050ba:	d506      	bpl.n	80050ca <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80050bc:	68e2      	ldr	r2, [r4, #12]
 80050be:	6933      	ldr	r3, [r6, #16]
 80050c0:	4945      	ldr	r1, [pc, #276]	; (80051d8 <HAL_RCC_ClockConfig+0x15c>)
 80050c2:	00db      	lsls	r3, r3, #3
 80050c4:	400a      	ands	r2, r1
 80050c6:	4313      	orrs	r3, r2
 80050c8:	60e3      	str	r3, [r4, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80050ca:	f7ff fd0b 	bl	8004ae4 <HAL_RCC_GetSysClockFreq>
 80050ce:	68e3      	ldr	r3, [r4, #12]
 80050d0:	4a42      	ldr	r2, [pc, #264]	; (80051dc <HAL_RCC_ClockConfig+0x160>)
 80050d2:	061b      	lsls	r3, r3, #24
 80050d4:	0f1b      	lsrs	r3, r3, #28
 80050d6:	5cd3      	ldrb	r3, [r2, r3]
 80050d8:	40d8      	lsrs	r0, r3
 80050da:	4b41      	ldr	r3, [pc, #260]	; (80051e0 <HAL_RCC_ClockConfig+0x164>)
 80050dc:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(TICK_INT_PRIORITY);
 80050de:	2003      	movs	r0, #3
 80050e0:	f009 f8ca 	bl	800e278 <HAL_InitTick>
 80050e4:	e7cf      	b.n	8005086 <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050e6:	6823      	ldr	r3, [r4, #0]
 80050e8:	9901      	ldr	r1, [sp, #4]
 80050ea:	4393      	bics	r3, r2
 80050ec:	430b      	orrs	r3, r1
 80050ee:	6023      	str	r3, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050f0:	6823      	ldr	r3, [r4, #0]
 80050f2:	4013      	ands	r3, r2
 80050f4:	9a01      	ldr	r2, [sp, #4]
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d1c4      	bne.n	8005084 <HAL_RCC_ClockConfig+0x8>
 80050fa:	e7cc      	b.n	8005096 <HAL_RCC_ClockConfig+0x1a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050fc:	20f0      	movs	r0, #240	; 0xf0
 80050fe:	4935      	ldr	r1, [pc, #212]	; (80051d4 <HAL_RCC_ClockConfig+0x158>)
 8005100:	68cb      	ldr	r3, [r1, #12]
 8005102:	4383      	bics	r3, r0
 8005104:	68b0      	ldr	r0, [r6, #8]
 8005106:	4303      	orrs	r3, r0
 8005108:	60cb      	str	r3, [r1, #12]
 800510a:	e7c7      	b.n	800509c <HAL_RCC_ClockConfig+0x20>
 800510c:	4d31      	ldr	r5, [pc, #196]	; (80051d4 <HAL_RCC_ClockConfig+0x158>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800510e:	6872      	ldr	r2, [r6, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005110:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005112:	2a02      	cmp	r2, #2
 8005114:	d119      	bne.n	800514a <HAL_RCC_ClockConfig+0xce>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005116:	039b      	lsls	r3, r3, #14
 8005118:	d5b4      	bpl.n	8005084 <HAL_RCC_ClockConfig+0x8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800511a:	2103      	movs	r1, #3
 800511c:	68eb      	ldr	r3, [r5, #12]
 800511e:	438b      	bics	r3, r1
 8005120:	4313      	orrs	r3, r2
 8005122:	60eb      	str	r3, [r5, #12]
    tickstart = HAL_GetTick();
 8005124:	f7ff f82c 	bl	8004180 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005128:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 800512a:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800512c:	2b02      	cmp	r3, #2
 800512e:	d119      	bne.n	8005164 <HAL_RCC_ClockConfig+0xe8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005130:	220c      	movs	r2, #12
 8005132:	68eb      	ldr	r3, [r5, #12]
 8005134:	4013      	ands	r3, r2
 8005136:	2b08      	cmp	r3, #8
 8005138:	d0b2      	beq.n	80050a0 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800513a:	f7ff f821 	bl	8004180 <HAL_GetTick>
 800513e:	4b29      	ldr	r3, [pc, #164]	; (80051e4 <HAL_RCC_ClockConfig+0x168>)
 8005140:	1bc0      	subs	r0, r0, r7
 8005142:	4298      	cmp	r0, r3
 8005144:	d9f4      	bls.n	8005130 <HAL_RCC_ClockConfig+0xb4>
          return HAL_TIMEOUT;
 8005146:	2003      	movs	r0, #3
 8005148:	e79d      	b.n	8005086 <HAL_RCC_ClockConfig+0xa>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800514a:	2a03      	cmp	r2, #3
 800514c:	d102      	bne.n	8005154 <HAL_RCC_ClockConfig+0xd8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800514e:	019b      	lsls	r3, r3, #6
 8005150:	d4e3      	bmi.n	800511a <HAL_RCC_ClockConfig+0x9e>
 8005152:	e797      	b.n	8005084 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005154:	2a01      	cmp	r2, #1
 8005156:	d102      	bne.n	800515e <HAL_RCC_ClockConfig+0xe2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005158:	075b      	lsls	r3, r3, #29
 800515a:	d4de      	bmi.n	800511a <HAL_RCC_ClockConfig+0x9e>
 800515c:	e792      	b.n	8005084 <HAL_RCC_ClockConfig+0x8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800515e:	059b      	lsls	r3, r3, #22
 8005160:	d4db      	bmi.n	800511a <HAL_RCC_ClockConfig+0x9e>
 8005162:	e78f      	b.n	8005084 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005164:	2b03      	cmp	r3, #3
 8005166:	d10b      	bne.n	8005180 <HAL_RCC_ClockConfig+0x104>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005168:	220c      	movs	r2, #12
 800516a:	68eb      	ldr	r3, [r5, #12]
 800516c:	4013      	ands	r3, r2
 800516e:	4293      	cmp	r3, r2
 8005170:	d096      	beq.n	80050a0 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005172:	f7ff f805 	bl	8004180 <HAL_GetTick>
 8005176:	4b1b      	ldr	r3, [pc, #108]	; (80051e4 <HAL_RCC_ClockConfig+0x168>)
 8005178:	1bc0      	subs	r0, r0, r7
 800517a:	4298      	cmp	r0, r3
 800517c:	d9f4      	bls.n	8005168 <HAL_RCC_ClockConfig+0xec>
 800517e:	e7e2      	b.n	8005146 <HAL_RCC_ClockConfig+0xca>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005180:	2b01      	cmp	r3, #1
 8005182:	d010      	beq.n	80051a6 <HAL_RCC_ClockConfig+0x12a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005184:	220c      	movs	r2, #12
 8005186:	68eb      	ldr	r3, [r5, #12]
 8005188:	4213      	tst	r3, r2
 800518a:	d089      	beq.n	80050a0 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800518c:	f7fe fff8 	bl	8004180 <HAL_GetTick>
 8005190:	4b14      	ldr	r3, [pc, #80]	; (80051e4 <HAL_RCC_ClockConfig+0x168>)
 8005192:	1bc0      	subs	r0, r0, r7
 8005194:	4298      	cmp	r0, r3
 8005196:	d9f5      	bls.n	8005184 <HAL_RCC_ClockConfig+0x108>
 8005198:	e7d5      	b.n	8005146 <HAL_RCC_ClockConfig+0xca>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800519a:	f7fe fff1 	bl	8004180 <HAL_GetTick>
 800519e:	4b11      	ldr	r3, [pc, #68]	; (80051e4 <HAL_RCC_ClockConfig+0x168>)
 80051a0:	1bc0      	subs	r0, r0, r7
 80051a2:	4298      	cmp	r0, r3
 80051a4:	d8cf      	bhi.n	8005146 <HAL_RCC_ClockConfig+0xca>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80051a6:	220c      	movs	r2, #12
 80051a8:	68eb      	ldr	r3, [r5, #12]
 80051aa:	4013      	ands	r3, r2
 80051ac:	2b04      	cmp	r3, #4
 80051ae:	d1f4      	bne.n	800519a <HAL_RCC_ClockConfig+0x11e>
 80051b0:	e776      	b.n	80050a0 <HAL_RCC_ClockConfig+0x24>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051b2:	6822      	ldr	r2, [r4, #0]
 80051b4:	439a      	bics	r2, r3
 80051b6:	6022      	str	r2, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051b8:	6822      	ldr	r2, [r4, #0]
 80051ba:	421a      	tst	r2, r3
 80051bc:	d100      	bne.n	80051c0 <HAL_RCC_ClockConfig+0x144>
 80051be:	e776      	b.n	80050ae <HAL_RCC_ClockConfig+0x32>
 80051c0:	e760      	b.n	8005084 <HAL_RCC_ClockConfig+0x8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051c2:	68e3      	ldr	r3, [r4, #12]
 80051c4:	4908      	ldr	r1, [pc, #32]	; (80051e8 <HAL_RCC_ClockConfig+0x16c>)
 80051c6:	400b      	ands	r3, r1
 80051c8:	68f1      	ldr	r1, [r6, #12]
 80051ca:	430b      	orrs	r3, r1
 80051cc:	60e3      	str	r3, [r4, #12]
 80051ce:	e773      	b.n	80050b8 <HAL_RCC_ClockConfig+0x3c>
 80051d0:	40022000 	.word	0x40022000
 80051d4:	40021000 	.word	0x40021000
 80051d8:	ffffc7ff 	.word	0xffffc7ff
 80051dc:	0800f719 	.word	0x0800f719
 80051e0:	20000044 	.word	0x20000044
 80051e4:	00001388 	.word	0x00001388
 80051e8:	fffff8ff 	.word	0xfffff8ff

080051ec <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80051ec:	4b04      	ldr	r3, [pc, #16]	; (8005200 <HAL_RCC_GetPCLK1Freq+0x14>)
 80051ee:	4a05      	ldr	r2, [pc, #20]	; (8005204 <HAL_RCC_GetPCLK1Freq+0x18>)
 80051f0:	68db      	ldr	r3, [r3, #12]
 80051f2:	055b      	lsls	r3, r3, #21
 80051f4:	0f5b      	lsrs	r3, r3, #29
 80051f6:	5cd3      	ldrb	r3, [r2, r3]
 80051f8:	4a03      	ldr	r2, [pc, #12]	; (8005208 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80051fa:	6810      	ldr	r0, [r2, #0]
 80051fc:	40d8      	lsrs	r0, r3
}
 80051fe:	4770      	bx	lr
 8005200:	40021000 	.word	0x40021000
 8005204:	0800f729 	.word	0x0800f729
 8005208:	20000044 	.word	0x20000044

0800520c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800520c:	4b04      	ldr	r3, [pc, #16]	; (8005220 <HAL_RCC_GetPCLK2Freq+0x14>)
 800520e:	4a05      	ldr	r2, [pc, #20]	; (8005224 <HAL_RCC_GetPCLK2Freq+0x18>)
 8005210:	68db      	ldr	r3, [r3, #12]
 8005212:	049b      	lsls	r3, r3, #18
 8005214:	0f5b      	lsrs	r3, r3, #29
 8005216:	5cd3      	ldrb	r3, [r2, r3]
 8005218:	4a03      	ldr	r2, [pc, #12]	; (8005228 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800521a:	6810      	ldr	r0, [r2, #0]
 800521c:	40d8      	lsrs	r0, r3
}
 800521e:	4770      	bx	lr
 8005220:	40021000 	.word	0x40021000
 8005224:	0800f729 	.word	0x0800f729
 8005228:	20000044 	.word	0x20000044

0800522c <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800522c:	6803      	ldr	r3, [r0, #0]
{
 800522e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005230:	0005      	movs	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005232:	069b      	lsls	r3, r3, #26
 8005234:	d53d      	bpl.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005236:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8005238:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800523a:	4c5f      	ldr	r4, [pc, #380]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 800523c:	055b      	lsls	r3, r3, #21
 800523e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    FlagStatus       pwrclkchanged = RESET;
 8005240:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005242:	421a      	tst	r2, r3
 8005244:	d104      	bne.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x24>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005246:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005248:	4313      	orrs	r3, r2
 800524a:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 800524c:	2301      	movs	r3, #1
 800524e:	9300      	str	r3, [sp, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005250:	2780      	movs	r7, #128	; 0x80
 8005252:	4e5a      	ldr	r6, [pc, #360]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8005254:	007f      	lsls	r7, r7, #1
 8005256:	6833      	ldr	r3, [r6, #0]
 8005258:	423b      	tst	r3, r7
 800525a:	d06c      	beq.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x10a>
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800525c:	6868      	ldr	r0, [r5, #4]
 800525e:	23c0      	movs	r3, #192	; 0xc0
 8005260:	26c0      	movs	r6, #192	; 0xc0
 8005262:	0001      	movs	r1, r0
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8005264:	6822      	ldr	r2, [r4, #0]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8005266:	03b6      	lsls	r6, r6, #14
 8005268:	029b      	lsls	r3, r3, #10
 800526a:	4030      	ands	r0, r6
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800526c:	4032      	ands	r2, r6
 800526e:	4019      	ands	r1, r3
 8005270:	001e      	movs	r6, r3
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8005272:	4290      	cmp	r0, r2
 8005274:	d000      	beq.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x4c>
 8005276:	e06f      	b.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8005278:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800527a:	4033      	ands	r3, r6

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800527c:	d000      	beq.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800527e:	e074      	b.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x13e>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005280:	6869      	ldr	r1, [r5, #4]
 8005282:	23c0      	movs	r3, #192	; 0xc0
 8005284:	000a      	movs	r2, r1
 8005286:	029b      	lsls	r3, r3, #10
 8005288:	401a      	ands	r2, r3
 800528a:	429a      	cmp	r2, r3
 800528c:	d107      	bne.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x72>
 800528e:	6823      	ldr	r3, [r4, #0]
 8005290:	484b      	ldr	r0, [pc, #300]	; (80053c0 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8005292:	4003      	ands	r3, r0
 8005294:	20c0      	movs	r0, #192	; 0xc0
 8005296:	0380      	lsls	r0, r0, #14
 8005298:	4001      	ands	r1, r0
 800529a:	430b      	orrs	r3, r1
 800529c:	6023      	str	r3, [r4, #0]
 800529e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80052a0:	431a      	orrs	r2, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80052a2:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80052a4:	6522      	str	r2, [r4, #80]	; 0x50
    if(pwrclkchanged == SET)
 80052a6:	2b01      	cmp	r3, #1
 80052a8:	d103      	bne.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052aa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80052ac:	4a45      	ldr	r2, [pc, #276]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 80052ae:	4013      	ands	r3, r2
 80052b0:	63a3      	str	r3, [r4, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80052b2:	682b      	ldr	r3, [r5, #0]
 80052b4:	07da      	lsls	r2, r3, #31
 80052b6:	d506      	bpl.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80052b8:	2003      	movs	r0, #3
 80052ba:	493f      	ldr	r1, [pc, #252]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80052bc:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80052be:	4382      	bics	r2, r0
 80052c0:	68a8      	ldr	r0, [r5, #8]
 80052c2:	4302      	orrs	r2, r0
 80052c4:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80052c6:	079a      	lsls	r2, r3, #30
 80052c8:	d506      	bpl.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0xac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80052ca:	200c      	movs	r0, #12
 80052cc:	493a      	ldr	r1, [pc, #232]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80052ce:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80052d0:	4382      	bics	r2, r0
 80052d2:	68e8      	ldr	r0, [r5, #12]
 80052d4:	4302      	orrs	r2, r0
 80052d6:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80052d8:	075a      	lsls	r2, r3, #29
 80052da:	d506      	bpl.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0xbe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80052dc:	4936      	ldr	r1, [pc, #216]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80052de:	483a      	ldr	r0, [pc, #232]	; (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x19c>)
 80052e0:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80052e2:	4002      	ands	r2, r0
 80052e4:	6928      	ldr	r0, [r5, #16]
 80052e6:	4302      	orrs	r2, r0
 80052e8:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80052ea:	071a      	lsls	r2, r3, #28
 80052ec:	d506      	bpl.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0xd0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80052ee:	4932      	ldr	r1, [pc, #200]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80052f0:	4836      	ldr	r0, [pc, #216]	; (80053cc <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 80052f2:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80052f4:	4002      	ands	r2, r0
 80052f6:	6968      	ldr	r0, [r5, #20]
 80052f8:	4302      	orrs	r2, r0
 80052fa:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80052fc:	05da      	lsls	r2, r3, #23
 80052fe:	d506      	bpl.n	800530e <HAL_RCCEx_PeriphCLKConfig+0xe2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005300:	492d      	ldr	r1, [pc, #180]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8005302:	4833      	ldr	r0, [pc, #204]	; (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005304:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8005306:	4002      	ands	r2, r0
 8005308:	69a8      	ldr	r0, [r5, #24]
 800530a:	4302      	orrs	r2, r0
 800530c:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800530e:	065a      	lsls	r2, r3, #25
 8005310:	d506      	bpl.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0xf4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005312:	4929      	ldr	r1, [pc, #164]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8005314:	482f      	ldr	r0, [pc, #188]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8005316:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8005318:	4002      	ands	r2, r0
 800531a:	6a28      	ldr	r0, [r5, #32]
 800531c:	4302      	orrs	r2, r0
 800531e:	64ca      	str	r2, [r1, #76]	; 0x4c
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
  }

  return HAL_OK;
 8005320:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005322:	061b      	lsls	r3, r3, #24
 8005324:	d517      	bpl.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x12a>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8005326:	4a24      	ldr	r2, [pc, #144]	; (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8005328:	492b      	ldr	r1, [pc, #172]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800532a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800532c:	400b      	ands	r3, r1
 800532e:	69e9      	ldr	r1, [r5, #28]
 8005330:	430b      	orrs	r3, r1
 8005332:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005334:	e00f      	b.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005336:	6833      	ldr	r3, [r6, #0]
 8005338:	433b      	orrs	r3, r7
 800533a:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800533c:	f7fe ff20 	bl	8004180 <HAL_GetTick>
 8005340:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005342:	6833      	ldr	r3, [r6, #0]
 8005344:	423b      	tst	r3, r7
 8005346:	d189      	bne.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005348:	f7fe ff1a 	bl	8004180 <HAL_GetTick>
 800534c:	9b01      	ldr	r3, [sp, #4]
 800534e:	1ac0      	subs	r0, r0, r3
 8005350:	2864      	cmp	r0, #100	; 0x64
 8005352:	d9f6      	bls.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x116>
          return HAL_TIMEOUT;
 8005354:	2003      	movs	r0, #3
}
 8005356:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8005358:	4299      	cmp	r1, r3
 800535a:	d000      	beq.n	800535e <HAL_RCCEx_PeriphCLKConfig+0x132>
 800535c:	e78c      	b.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x4c>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800535e:	6823      	ldr	r3, [r4, #0]
          return HAL_ERROR;
 8005360:	2001      	movs	r0, #1
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005362:	039b      	lsls	r3, r3, #14
 8005364:	d400      	bmi.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005366:	e787      	b.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x4c>
 8005368:	e7f5      	b.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x12a>
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800536a:	428b      	cmp	r3, r1
 800536c:	d100      	bne.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x144>
 800536e:	e787      	b.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x54>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005370:	682b      	ldr	r3, [r5, #0]
 8005372:	069b      	lsls	r3, r3, #26
 8005374:	d400      	bmi.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8005376:	e783      	b.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x54>
      __HAL_RCC_BACKUPRESET_FORCE();
 8005378:	2280      	movs	r2, #128	; 0x80
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800537a:	6d21      	ldr	r1, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_FORCE();
 800537c:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800537e:	0312      	lsls	r2, r2, #12
 8005380:	4302      	orrs	r2, r0
 8005382:	6522      	str	r2, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005384:	6d22      	ldr	r2, [r4, #80]	; 0x50
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8005386:	4b12      	ldr	r3, [pc, #72]	; (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005388:	4814      	ldr	r0, [pc, #80]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800538a:	400b      	ands	r3, r1
      __HAL_RCC_BACKUPRESET_RELEASE();
 800538c:	4002      	ands	r2, r0
 800538e:	6522      	str	r2, [r4, #80]	; 0x50
      RCC->CSR = temp_reg;
 8005390:	6523      	str	r3, [r4, #80]	; 0x50
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8005392:	05cb      	lsls	r3, r1, #23
 8005394:	d400      	bmi.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8005396:	e773      	b.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x54>
        tickstart = HAL_GetTick();
 8005398:	f7fe fef2 	bl	8004180 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800539c:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 800539e:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80053a0:	00bf      	lsls	r7, r7, #2
 80053a2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80053a4:	423b      	tst	r3, r7
 80053a6:	d000      	beq.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x17e>
 80053a8:	e76a      	b.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x54>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053aa:	f7fe fee9 	bl	8004180 <HAL_GetTick>
 80053ae:	4b0c      	ldr	r3, [pc, #48]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80053b0:	1b80      	subs	r0, r0, r6
 80053b2:	4298      	cmp	r0, r3
 80053b4:	d9f5      	bls.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x176>
 80053b6:	e7cd      	b.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x128>
 80053b8:	40021000 	.word	0x40021000
 80053bc:	40007000 	.word	0x40007000
 80053c0:	ffcfffff 	.word	0xffcfffff
 80053c4:	efffffff 	.word	0xefffffff
 80053c8:	fffff3ff 	.word	0xfffff3ff
 80053cc:	ffffcfff 	.word	0xffffcfff
 80053d0:	fffcffff 	.word	0xfffcffff
 80053d4:	fbffffff 	.word	0xfbffffff
 80053d8:	fff3ffff 	.word	0xfff3ffff
 80053dc:	fff7ffff 	.word	0xfff7ffff
 80053e0:	00001388 	.word	0x00001388

080053e4 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 80053e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80053e6:	2702      	movs	r7, #2

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80053e8:	1c45      	adds	r5, r0, #1
 80053ea:	7feb      	ldrb	r3, [r5, #31]
{
 80053ec:	0004      	movs	r4, r0
  __HAL_LOCK(hrtc);
 80053ee:	0038      	movs	r0, r7
 80053f0:	2b01      	cmp	r3, #1
 80053f2:	d024      	beq.n	800543e <HAL_RTC_DeactivateAlarm+0x5a>
 80053f4:	2301      	movs	r3, #1

  hrtc->State = HAL_RTC_STATE_BUSY;

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80053f6:	22ca      	movs	r2, #202	; 0xca
  __HAL_LOCK(hrtc);
 80053f8:	77eb      	strb	r3, [r5, #31]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80053fa:	6823      	ldr	r3, [r4, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80053fc:	19e6      	adds	r6, r4, r7
 80053fe:	77f7      	strb	r7, [r6, #31]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005400:	625a      	str	r2, [r3, #36]	; 0x24
 8005402:	3a77      	subs	r2, #119	; 0x77
 8005404:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8005406:	32ad      	adds	r2, #173	; 0xad
 8005408:	4291      	cmp	r1, r2
 800540a:	d128      	bne.n	800545e <HAL_RTC_DeactivateAlarm+0x7a>
  {
    /* AlarmA */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800540c:	689a      	ldr	r2, [r3, #8]
 800540e:	4921      	ldr	r1, [pc, #132]	; (8005494 <HAL_RTC_DeactivateAlarm+0xb0>)
 8005410:	400a      	ands	r2, r1
 8005412:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8005414:	689a      	ldr	r2, [r3, #8]
 8005416:	4920      	ldr	r1, [pc, #128]	; (8005498 <HAL_RTC_DeactivateAlarm+0xb4>)
 8005418:	400a      	ands	r2, r1
 800541a:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 800541c:	f7fe feb0 	bl	8004180 <HAL_GetTick>

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8005420:	2301      	movs	r3, #1
    tickstart = HAL_GetTick();
 8005422:	9000      	str	r0, [sp, #0]
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8005424:	9301      	str	r3, [sp, #4]
 8005426:	6823      	ldr	r3, [r4, #0]
 8005428:	68df      	ldr	r7, [r3, #12]
 800542a:	9b01      	ldr	r3, [sp, #4]
 800542c:	401f      	ands	r7, r3
 800542e:	d007      	beq.n	8005440 <HAL_RTC_DeactivateAlarm+0x5c>
        return HAL_TIMEOUT;
      }
    }
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005430:	22ff      	movs	r2, #255	; 0xff
 8005432:	6823      	ldr	r3, [r4, #0]

  hrtc->State = HAL_RTC_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005434:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005436:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 8005438:	2301      	movs	r3, #1
 800543a:	77f3      	strb	r3, [r6, #31]
  __HAL_UNLOCK(hrtc);
 800543c:	77e8      	strb	r0, [r5, #31]

  return HAL_OK;
}
 800543e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005440:	f7fe fe9e 	bl	8004180 <HAL_GetTick>
 8005444:	9b00      	ldr	r3, [sp, #0]
 8005446:	1ac0      	subs	r0, r0, r3
 8005448:	23fa      	movs	r3, #250	; 0xfa
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	4298      	cmp	r0, r3
 800544e:	d9ea      	bls.n	8005426 <HAL_RTC_DeactivateAlarm+0x42>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005450:	22ff      	movs	r2, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005452:	2003      	movs	r0, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005454:	6823      	ldr	r3, [r4, #0]
 8005456:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005458:	77f0      	strb	r0, [r6, #31]
        __HAL_UNLOCK(hrtc);
 800545a:	77ef      	strb	r7, [r5, #31]
        return HAL_TIMEOUT;
 800545c:	e7ef      	b.n	800543e <HAL_RTC_DeactivateAlarm+0x5a>
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800545e:	689a      	ldr	r2, [r3, #8]
 8005460:	490e      	ldr	r1, [pc, #56]	; (800549c <HAL_RTC_DeactivateAlarm+0xb8>)
 8005462:	400a      	ands	r2, r1
 8005464:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8005466:	689a      	ldr	r2, [r3, #8]
 8005468:	490d      	ldr	r1, [pc, #52]	; (80054a0 <HAL_RTC_DeactivateAlarm+0xbc>)
 800546a:	400a      	ands	r2, r1
 800546c:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800546e:	f7fe fe87 	bl	8004180 <HAL_GetTick>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8005472:	9701      	str	r7, [sp, #4]
    tickstart = HAL_GetTick();
 8005474:	9000      	str	r0, [sp, #0]
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8005476:	6823      	ldr	r3, [r4, #0]
 8005478:	68df      	ldr	r7, [r3, #12]
 800547a:	9b01      	ldr	r3, [sp, #4]
 800547c:	401f      	ands	r7, r3
 800547e:	d1d7      	bne.n	8005430 <HAL_RTC_DeactivateAlarm+0x4c>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005480:	f7fe fe7e 	bl	8004180 <HAL_GetTick>
 8005484:	9b00      	ldr	r3, [sp, #0]
 8005486:	1ac0      	subs	r0, r0, r3
 8005488:	23fa      	movs	r3, #250	; 0xfa
 800548a:	009b      	lsls	r3, r3, #2
 800548c:	4298      	cmp	r0, r3
 800548e:	d9f2      	bls.n	8005476 <HAL_RTC_DeactivateAlarm+0x92>
 8005490:	e7de      	b.n	8005450 <HAL_RTC_DeactivateAlarm+0x6c>
 8005492:	46c0      	nop			; (mov r8, r8)
 8005494:	fffffeff 	.word	0xfffffeff
 8005498:	ffffefff 	.word	0xffffefff
 800549c:	fffffdff 	.word	0xfffffdff
 80054a0:	ffffdfff 	.word	0xffffdfff

080054a4 <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80054a4:	21a0      	movs	r1, #160	; 0xa0
 80054a6:	6802      	ldr	r2, [r0, #0]
{
 80054a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80054aa:	68d3      	ldr	r3, [r2, #12]
{
 80054ac:	0004      	movs	r4, r0
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80054ae:	438b      	bics	r3, r1
 80054b0:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 80054b2:	f7fe fe65 	bl	8004180 <HAL_GetTick>

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80054b6:	27fa      	movs	r7, #250	; 0xfa
  tickstart = HAL_GetTick();
 80054b8:	0006      	movs	r6, r0
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80054ba:	2520      	movs	r5, #32
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80054bc:	00bf      	lsls	r7, r7, #2
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80054be:	6823      	ldr	r3, [r4, #0]
 80054c0:	68db      	ldr	r3, [r3, #12]
 80054c2:	422b      	tst	r3, r5
 80054c4:	d001      	beq.n	80054ca <HAL_RTC_WaitForSynchro+0x26>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 80054c6:	2000      	movs	r0, #0
}
 80054c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80054ca:	f7fe fe59 	bl	8004180 <HAL_GetTick>
 80054ce:	1b80      	subs	r0, r0, r6
 80054d0:	42b8      	cmp	r0, r7
 80054d2:	d9f4      	bls.n	80054be <HAL_RTC_WaitForSynchro+0x1a>
      return HAL_TIMEOUT;
 80054d4:	2003      	movs	r0, #3
 80054d6:	e7f7      	b.n	80054c8 <HAL_RTC_WaitForSynchro+0x24>

080054d8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80054d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80054da:	2440      	movs	r4, #64	; 0x40
 80054dc:	6803      	ldr	r3, [r0, #0]
{
 80054de:	0005      	movs	r5, r0
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80054e0:	68da      	ldr	r2, [r3, #12]
 80054e2:	4222      	tst	r2, r4
 80054e4:	d001      	beq.n	80054ea <RTC_EnterInitMode+0x12>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 80054e6:	2000      	movs	r0, #0
}
 80054e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80054ea:	2201      	movs	r2, #1
 80054ec:	4252      	negs	r2, r2
 80054ee:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 80054f0:	f7fe fe46 	bl	8004180 <HAL_GetTick>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80054f4:	27fa      	movs	r7, #250	; 0xfa
    tickstart = HAL_GetTick();
 80054f6:	0006      	movs	r6, r0
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80054f8:	00bf      	lsls	r7, r7, #2
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80054fa:	682b      	ldr	r3, [r5, #0]
 80054fc:	68db      	ldr	r3, [r3, #12]
 80054fe:	4223      	tst	r3, r4
 8005500:	d1f1      	bne.n	80054e6 <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005502:	f7fe fe3d 	bl	8004180 <HAL_GetTick>
 8005506:	1b80      	subs	r0, r0, r6
 8005508:	42b8      	cmp	r0, r7
 800550a:	d9f6      	bls.n	80054fa <RTC_EnterInitMode+0x22>
        return HAL_TIMEOUT;
 800550c:	2003      	movs	r0, #3
 800550e:	e7eb      	b.n	80054e8 <RTC_EnterInitMode+0x10>

08005510 <HAL_RTC_Init>:
{
 8005510:	b570      	push	{r4, r5, r6, lr}
 8005512:	0004      	movs	r4, r0
    return HAL_ERROR;
 8005514:	2501      	movs	r5, #1
  if (hrtc == NULL)
 8005516:	2800      	cmp	r0, #0
 8005518:	d01a      	beq.n	8005550 <HAL_RTC_Init+0x40>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800551a:	1c86      	adds	r6, r0, #2
 800551c:	7ff3      	ldrb	r3, [r6, #31]
 800551e:	b2db      	uxtb	r3, r3
 8005520:	2b00      	cmp	r3, #0
 8005522:	d103      	bne.n	800552c <HAL_RTC_Init+0x1c>
    hrtc->Lock = HAL_UNLOCKED;
 8005524:	1942      	adds	r2, r0, r5
 8005526:	77d3      	strb	r3, [r2, #31]
    HAL_RTC_MspInit(hrtc);
 8005528:	f008 feca 	bl	800e2c0 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 800552c:	2302      	movs	r3, #2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800552e:	22ca      	movs	r2, #202	; 0xca
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005530:	77f3      	strb	r3, [r6, #31]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005532:	6823      	ldr	r3, [r4, #0]
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005534:	0020      	movs	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005536:	625a      	str	r2, [r3, #36]	; 0x24
 8005538:	3a77      	subs	r2, #119	; 0x77
 800553a:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800553c:	f7ff ffcc 	bl	80054d8 <RTC_EnterInitMode>
 8005540:	6823      	ldr	r3, [r4, #0]
 8005542:	1e05      	subs	r5, r0, #0
 8005544:	d006      	beq.n	8005554 <HAL_RTC_Init+0x44>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005546:	22ff      	movs	r2, #255	; 0xff
 8005548:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 800554a:	2304      	movs	r3, #4
 800554c:	77f3      	strb	r3, [r6, #31]
        return HAL_ERROR;
 800554e:	2501      	movs	r5, #1
}
 8005550:	0028      	movs	r0, r5
 8005552:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005554:	689a      	ldr	r2, [r3, #8]
 8005556:	491b      	ldr	r1, [pc, #108]	; (80055c4 <HAL_RTC_Init+0xb4>)
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005558:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800555a:	400a      	ands	r2, r1
 800555c:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800555e:	6862      	ldr	r2, [r4, #4]
 8005560:	6899      	ldr	r1, [r3, #8]
 8005562:	4302      	orrs	r2, r0
 8005564:	69a0      	ldr	r0, [r4, #24]
 8005566:	4302      	orrs	r2, r0
 8005568:	430a      	orrs	r2, r1
 800556a:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800556c:	68e2      	ldr	r2, [r4, #12]
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800556e:	6960      	ldr	r0, [r4, #20]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005570:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8005572:	68a2      	ldr	r2, [r4, #8]
 8005574:	6919      	ldr	r1, [r3, #16]
 8005576:	0412      	lsls	r2, r2, #16
 8005578:	430a      	orrs	r2, r1
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800557a:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800557c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800557e:	68da      	ldr	r2, [r3, #12]
 8005580:	438a      	bics	r2, r1
 8005582:	60da      	str	r2, [r3, #12]
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8005584:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005586:	397d      	subs	r1, #125	; 0x7d
 8005588:	438a      	bics	r2, r1
 800558a:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800558c:	69e2      	ldr	r2, [r4, #28]
 800558e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005590:	4302      	orrs	r2, r0
 8005592:	430a      	orrs	r2, r1
 8005594:	64da      	str	r2, [r3, #76]	; 0x4c
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	069b      	lsls	r3, r3, #26
 800559a:	d40c      	bmi.n	80055b6 <HAL_RTC_Init+0xa6>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800559c:	0020      	movs	r0, r4
 800559e:	f7ff ff81 	bl	80054a4 <HAL_RTC_WaitForSynchro>
 80055a2:	2800      	cmp	r0, #0
 80055a4:	d007      	beq.n	80055b6 <HAL_RTC_Init+0xa6>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80055a6:	22ff      	movs	r2, #255	; 0xff
 80055a8:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(hrtc);
 80055aa:	3401      	adds	r4, #1
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80055ac:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 80055ae:	2304      	movs	r3, #4
 80055b0:	77f3      	strb	r3, [r6, #31]
        __HAL_UNLOCK(hrtc);
 80055b2:	77e5      	strb	r5, [r4, #31]
 80055b4:	e7cb      	b.n	800554e <HAL_RTC_Init+0x3e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80055b6:	22ff      	movs	r2, #255	; 0xff
 80055b8:	6823      	ldr	r3, [r4, #0]
 80055ba:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 80055bc:	2301      	movs	r3, #1
 80055be:	77f3      	strb	r3, [r6, #31]
    return HAL_OK;
 80055c0:	e7c6      	b.n	8005550 <HAL_RTC_Init+0x40>
 80055c2:	46c0      	nop			; (mov r8, r8)
 80055c4:	ff8fffbf 	.word	0xff8fffbf

080055c8 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 80055c8:	2300      	movs	r3, #0
  uint8_t Param = Value;

  while (Param >= 10U)
 80055ca:	2809      	cmp	r0, #9
 80055cc:	d803      	bhi.n	80055d6 <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    Param -= 10U;
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 80055ce:	011b      	lsls	r3, r3, #4
 80055d0:	4318      	orrs	r0, r3
 80055d2:	b2c0      	uxtb	r0, r0
}
 80055d4:	4770      	bx	lr
    Param -= 10U;
 80055d6:	380a      	subs	r0, #10
    bcdhigh++;
 80055d8:	3301      	adds	r3, #1
    Param -= 10U;
 80055da:	b2c0      	uxtb	r0, r0
 80055dc:	e7f5      	b.n	80055ca <RTC_ByteToBcd2+0x2>
	...

080055e0 <HAL_RTC_SetTime>:
{
 80055e0:	2302      	movs	r3, #2
 80055e2:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 80055e4:	1c47      	adds	r7, r0, #1
{
 80055e6:	000c      	movs	r4, r1
  __HAL_LOCK(hrtc);
 80055e8:	7ff9      	ldrb	r1, [r7, #31]
{
 80055ea:	b085      	sub	sp, #20
 80055ec:	0005      	movs	r5, r0
  __HAL_LOCK(hrtc);
 80055ee:	001e      	movs	r6, r3
 80055f0:	2901      	cmp	r1, #1
 80055f2:	d037      	beq.n	8005664 <HAL_RTC_SetTime+0x84>
 80055f4:	2101      	movs	r1, #1
 80055f6:	77f9      	strb	r1, [r7, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80055f8:	18c1      	adds	r1, r0, r3
 80055fa:	77cb      	strb	r3, [r1, #31]
 80055fc:	9101      	str	r1, [sp, #4]
 80055fe:	2140      	movs	r1, #64	; 0x40
 8005600:	6806      	ldr	r6, [r0, #0]
 8005602:	7863      	ldrb	r3, [r4, #1]
 8005604:	7820      	ldrb	r0, [r4, #0]
 8005606:	9302      	str	r3, [sp, #8]
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005608:	68b3      	ldr	r3, [r6, #8]
 800560a:	400b      	ands	r3, r1
  if (Format == RTC_FORMAT_BIN)
 800560c:	2a00      	cmp	r2, #0
 800560e:	d12c      	bne.n	800566a <HAL_RTC_SetTime+0x8a>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005610:	2b00      	cmp	r3, #0
 8005612:	d100      	bne.n	8005616 <HAL_RTC_SetTime+0x36>
      sTime->TimeFormat = 0x00U;
 8005614:	70e3      	strb	r3, [r4, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005616:	f7ff ffd7 	bl	80055c8 <RTC_ByteToBcd2>
 800561a:	9003      	str	r0, [sp, #12]
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800561c:	9802      	ldr	r0, [sp, #8]
 800561e:	f7ff ffd3 	bl	80055c8 <RTC_ByteToBcd2>
 8005622:	9002      	str	r0, [sp, #8]
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8005624:	78a0      	ldrb	r0, [r4, #2]
 8005626:	f7ff ffcf 	bl	80055c8 <RTC_ByteToBcd2>
 800562a:	0003      	movs	r3, r0
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800562c:	78e0      	ldrb	r0, [r4, #3]
 800562e:	0400      	lsls	r0, r0, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005630:	4318      	orrs	r0, r3
 8005632:	9b03      	ldr	r3, [sp, #12]
 8005634:	041b      	lsls	r3, r3, #16
 8005636:	4318      	orrs	r0, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8005638:	9b02      	ldr	r3, [sp, #8]
 800563a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800563c:	4318      	orrs	r0, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800563e:	23ca      	movs	r3, #202	; 0xca
 8005640:	6273      	str	r3, [r6, #36]	; 0x24
 8005642:	3b77      	subs	r3, #119	; 0x77
 8005644:	6273      	str	r3, [r6, #36]	; 0x24
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005646:	9002      	str	r0, [sp, #8]
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005648:	0028      	movs	r0, r5
 800564a:	f7ff ff45 	bl	80054d8 <RTC_EnterInitMode>
 800564e:	682b      	ldr	r3, [r5, #0]
 8005650:	1e06      	subs	r6, r0, #0
 8005652:	d016      	beq.n	8005682 <HAL_RTC_SetTime+0xa2>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005654:	22ff      	movs	r2, #255	; 0xff
 8005656:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005658:	2304      	movs	r3, #4
 800565a:	9a01      	ldr	r2, [sp, #4]
 800565c:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 800565e:	2300      	movs	r3, #0
 8005660:	77fb      	strb	r3, [r7, #31]
        return HAL_ERROR;
 8005662:	2601      	movs	r6, #1
}
 8005664:	0030      	movs	r0, r6
 8005666:	b005      	add	sp, #20
 8005668:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800566a:	2b00      	cmp	r3, #0
 800566c:	d100      	bne.n	8005670 <HAL_RTC_SetTime+0x90>
      sTime->TimeFormat = 0x00U;
 800566e:	70e3      	strb	r3, [r4, #3]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8005670:	9b02      	ldr	r3, [sp, #8]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005672:	0400      	lsls	r0, r0, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8005674:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005676:	4318      	orrs	r0, r3
              ((uint32_t)sTime->Seconds) | \
 8005678:	78a3      	ldrb	r3, [r4, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800567a:	4318      	orrs	r0, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800567c:	78e3      	ldrb	r3, [r4, #3]
 800567e:	041b      	lsls	r3, r3, #16
 8005680:	e7dc      	b.n	800563c <HAL_RTC_SetTime+0x5c>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005682:	4815      	ldr	r0, [pc, #84]	; (80056d8 <HAL_RTC_SetTime+0xf8>)
 8005684:	9a02      	ldr	r2, [sp, #8]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8005686:	4915      	ldr	r1, [pc, #84]	; (80056dc <HAL_RTC_SetTime+0xfc>)
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005688:	4002      	ands	r2, r0
 800568a:	601a      	str	r2, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800568c:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800568e:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8005690:	400a      	ands	r2, r1
 8005692:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005694:	68e2      	ldr	r2, [r4, #12]
 8005696:	6899      	ldr	r1, [r3, #8]
 8005698:	4302      	orrs	r2, r0
 800569a:	430a      	orrs	r2, r1
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800569c:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800569e:	609a      	str	r2, [r3, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80056a0:	68da      	ldr	r2, [r3, #12]
 80056a2:	438a      	bics	r2, r1
 80056a4:	60da      	str	r2, [r3, #12]
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80056a6:	689b      	ldr	r3, [r3, #8]
 80056a8:	069b      	lsls	r3, r3, #26
 80056aa:	d40c      	bmi.n	80056c6 <HAL_RTC_SetTime+0xe6>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80056ac:	0028      	movs	r0, r5
 80056ae:	f7ff fef9 	bl	80054a4 <HAL_RTC_WaitForSynchro>
 80056b2:	2800      	cmp	r0, #0
 80056b4:	d007      	beq.n	80056c6 <HAL_RTC_SetTime+0xe6>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80056b6:	22ff      	movs	r2, #255	; 0xff
 80056b8:	682b      	ldr	r3, [r5, #0]
 80056ba:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 80056bc:	2304      	movs	r3, #4
 80056be:	9a01      	ldr	r2, [sp, #4]
 80056c0:	77d3      	strb	r3, [r2, #31]
        __HAL_UNLOCK(hrtc);
 80056c2:	77fe      	strb	r6, [r7, #31]
 80056c4:	e7cd      	b.n	8005662 <HAL_RTC_SetTime+0x82>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80056c6:	22ff      	movs	r2, #255	; 0xff
 80056c8:	682b      	ldr	r3, [r5, #0]
 80056ca:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 80056cc:	2301      	movs	r3, #1
 80056ce:	9a01      	ldr	r2, [sp, #4]
 80056d0:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 80056d2:	2300      	movs	r3, #0
 80056d4:	77fb      	strb	r3, [r7, #31]
    return HAL_OK;
 80056d6:	e7c5      	b.n	8005664 <HAL_RTC_SetTime+0x84>
 80056d8:	007f7f7f 	.word	0x007f7f7f
 80056dc:	fffbffff 	.word	0xfffbffff

080056e0 <HAL_RTC_SetDate>:
{
 80056e0:	2302      	movs	r3, #2
 80056e2:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 80056e4:	1c47      	adds	r7, r0, #1
{
 80056e6:	000e      	movs	r6, r1
  __HAL_LOCK(hrtc);
 80056e8:	7ff9      	ldrb	r1, [r7, #31]
{
 80056ea:	b085      	sub	sp, #20
 80056ec:	0004      	movs	r4, r0
  __HAL_LOCK(hrtc);
 80056ee:	001d      	movs	r5, r3
 80056f0:	2901      	cmp	r1, #1
 80056f2:	d036      	beq.n	8005762 <HAL_RTC_SetDate+0x82>
 80056f4:	2101      	movs	r1, #1
 80056f6:	77f9      	strb	r1, [r7, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80056f8:	18c1      	adds	r1, r0, r3
 80056fa:	9101      	str	r1, [sp, #4]
 80056fc:	77cb      	strb	r3, [r1, #31]
 80056fe:	7831      	ldrb	r1, [r6, #0]
 8005700:	78f0      	ldrb	r0, [r6, #3]
 8005702:	0349      	lsls	r1, r1, #13
 8005704:	7873      	ldrb	r3, [r6, #1]
 8005706:	78b5      	ldrb	r5, [r6, #2]
 8005708:	9102      	str	r1, [sp, #8]
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800570a:	2a00      	cmp	r2, #0
 800570c:	d14c      	bne.n	80057a8 <HAL_RTC_SetDate+0xc8>
 800570e:	3210      	adds	r2, #16
 8005710:	4213      	tst	r3, r2
 8005712:	d002      	beq.n	800571a <HAL_RTC_SetDate+0x3a>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005714:	4393      	bics	r3, r2
 8005716:	330a      	adds	r3, #10
 8005718:	7073      	strb	r3, [r6, #1]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800571a:	f7ff ff55 	bl	80055c8 <RTC_ByteToBcd2>
 800571e:	9003      	str	r0, [sp, #12]
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8005720:	7870      	ldrb	r0, [r6, #1]
 8005722:	f7ff ff51 	bl	80055c8 <RTC_ByteToBcd2>
 8005726:	0006      	movs	r6, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8005728:	0028      	movs	r0, r5
 800572a:	f7ff ff4d 	bl	80055c8 <RTC_ByteToBcd2>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800572e:	9b03      	ldr	r3, [sp, #12]
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8005730:	0236      	lsls	r6, r6, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005732:	041d      	lsls	r5, r3, #16
 8005734:	9b02      	ldr	r3, [sp, #8]
 8005736:	4318      	orrs	r0, r3
 8005738:	4305      	orrs	r5, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800573a:	22ca      	movs	r2, #202	; 0xca
 800573c:	6823      	ldr	r3, [r4, #0]
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800573e:	0020      	movs	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005740:	625a      	str	r2, [r3, #36]	; 0x24
 8005742:	3a77      	subs	r2, #119	; 0x77
 8005744:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005746:	f7ff fec7 	bl	80054d8 <RTC_EnterInitMode>
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800574a:	432e      	orrs	r6, r5
 800574c:	6823      	ldr	r3, [r4, #0]
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800574e:	1e05      	subs	r5, r0, #0
 8005750:	d00a      	beq.n	8005768 <HAL_RTC_SetDate+0x88>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005752:	22ff      	movs	r2, #255	; 0xff
 8005754:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005756:	2304      	movs	r3, #4
 8005758:	9a01      	ldr	r2, [sp, #4]
 800575a:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 800575c:	2300      	movs	r3, #0
 800575e:	77fb      	strb	r3, [r7, #31]
        return HAL_ERROR;
 8005760:	2501      	movs	r5, #1
}
 8005762:	0028      	movs	r0, r5
 8005764:	b005      	add	sp, #20
 8005766:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8005768:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800576a:	4812      	ldr	r0, [pc, #72]	; (80057b4 <HAL_RTC_SetDate+0xd4>)
 800576c:	4006      	ands	r6, r0
 800576e:	605e      	str	r6, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8005770:	68da      	ldr	r2, [r3, #12]
 8005772:	438a      	bics	r2, r1
 8005774:	60da      	str	r2, [r3, #12]
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	069b      	lsls	r3, r3, #26
 800577a:	d40c      	bmi.n	8005796 <HAL_RTC_SetDate+0xb6>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800577c:	0020      	movs	r0, r4
 800577e:	f7ff fe91 	bl	80054a4 <HAL_RTC_WaitForSynchro>
 8005782:	2800      	cmp	r0, #0
 8005784:	d007      	beq.n	8005796 <HAL_RTC_SetDate+0xb6>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005786:	22ff      	movs	r2, #255	; 0xff
 8005788:	6823      	ldr	r3, [r4, #0]
 800578a:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 800578c:	2304      	movs	r3, #4
 800578e:	9a01      	ldr	r2, [sp, #4]
 8005790:	77d3      	strb	r3, [r2, #31]
        __HAL_UNLOCK(hrtc);
 8005792:	77fd      	strb	r5, [r7, #31]
 8005794:	e7e4      	b.n	8005760 <HAL_RTC_SetDate+0x80>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005796:	22ff      	movs	r2, #255	; 0xff
 8005798:	6823      	ldr	r3, [r4, #0]
 800579a:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 800579c:	2301      	movs	r3, #1
 800579e:	9a01      	ldr	r2, [sp, #4]
 80057a0:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 80057a2:	2300      	movs	r3, #0
 80057a4:	77fb      	strb	r3, [r7, #31]
    return HAL_OK;
 80057a6:	e7dc      	b.n	8005762 <HAL_RTC_SetDate+0x82>
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80057a8:	9a02      	ldr	r2, [sp, #8]
 80057aa:	0400      	lsls	r0, r0, #16
 80057ac:	4310      	orrs	r0, r2
 80057ae:	4305      	orrs	r5, r0
                  (((uint32_t)sDate->Month) << 8U) | \
 80057b0:	021e      	lsls	r6, r3, #8
 80057b2:	e7c2      	b.n	800573a <HAL_RTC_SetDate+0x5a>
 80057b4:	00ffff3f 	.word	0x00ffff3f

080057b8 <HAL_RTC_SetAlarm_IT>:
{
 80057b8:	2302      	movs	r3, #2
 80057ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80057bc:	000d      	movs	r5, r1
  __HAL_LOCK(hrtc);
 80057be:	1c41      	adds	r1, r0, #1
 80057c0:	7fce      	ldrb	r6, [r1, #31]
{
 80057c2:	0004      	movs	r4, r0
  __HAL_LOCK(hrtc);
 80057c4:	0018      	movs	r0, r3
 80057c6:	2e01      	cmp	r6, #1
 80057c8:	d100      	bne.n	80057cc <HAL_RTC_SetAlarm_IT+0x14>
 80057ca:	e08c      	b.n	80058e6 <HAL_RTC_SetAlarm_IT+0x12e>
 80057cc:	3801      	subs	r0, #1
 80057ce:	77c8      	strb	r0, [r1, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80057d0:	18e1      	adds	r1, r4, r3
 80057d2:	77cb      	strb	r3, [r1, #31]
 80057d4:	2140      	movs	r1, #64	; 0x40
 80057d6:	786b      	ldrb	r3, [r5, #1]
 80057d8:	6826      	ldr	r6, [r4, #0]
 80057da:	9300      	str	r3, [sp, #0]
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80057dc:	68b3      	ldr	r3, [r6, #8]
 80057de:	7828      	ldrb	r0, [r5, #0]
 80057e0:	78af      	ldrb	r7, [r5, #2]
 80057e2:	400b      	ands	r3, r1
  if (Format == RTC_FORMAT_BIN)
 80057e4:	2a00      	cmp	r2, #0
 80057e6:	d15d      	bne.n	80058a4 <HAL_RTC_SetAlarm_IT+0xec>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d100      	bne.n	80057ee <HAL_RTC_SetAlarm_IT+0x36>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80057ec:	70eb      	strb	r3, [r5, #3]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80057ee:	f7ff feeb 	bl	80055c8 <RTC_ByteToBcd2>
 80057f2:	9001      	str	r0, [sp, #4]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 80057f4:	9800      	ldr	r0, [sp, #0]
 80057f6:	f7ff fee7 	bl	80055c8 <RTC_ByteToBcd2>
 80057fa:	9000      	str	r0, [sp, #0]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80057fc:	0038      	movs	r0, r7
 80057fe:	f7ff fee3 	bl	80055c8 <RTC_ByteToBcd2>
 8005802:	0007      	movs	r7, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005804:	1c6b      	adds	r3, r5, #1
 8005806:	7fd8      	ldrb	r0, [r3, #31]
 8005808:	f7ff fede 	bl	80055c8 <RTC_ByteToBcd2>
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800580c:	696a      	ldr	r2, [r5, #20]
 800580e:	69eb      	ldr	r3, [r5, #28]
 8005810:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005812:	78ea      	ldrb	r2, [r5, #3]
 8005814:	0412      	lsls	r2, r2, #16
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8005816:	4313      	orrs	r3, r2
 8005818:	431f      	orrs	r7, r3
 800581a:	9b01      	ldr	r3, [sp, #4]
 800581c:	041b      	lsls	r3, r3, #16
 800581e:	431f      	orrs	r7, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8005820:	9b00      	ldr	r3, [sp, #0]
 8005822:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8005824:	431f      	orrs	r7, r3
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8005826:	69aa      	ldr	r2, [r5, #24]
 8005828:	686b      	ldr	r3, [r5, #4]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800582a:	0600      	lsls	r0, r0, #24
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800582c:	4313      	orrs	r3, r2
 800582e:	9300      	str	r3, [sp, #0]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005830:	23ca      	movs	r3, #202	; 0xca
  if (sAlarm->Alarm == RTC_ALARM_A)
 8005832:	6a6a      	ldr	r2, [r5, #36]	; 0x24
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005834:	6273      	str	r3, [r6, #36]	; 0x24
 8005836:	3b77      	subs	r3, #119	; 0x77
 8005838:	6273      	str	r3, [r6, #36]	; 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 800583a:	33ad      	adds	r3, #173	; 0xad
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800583c:	4307      	orrs	r7, r0
  if (sAlarm->Alarm == RTC_ALARM_A)
 800583e:	429a      	cmp	r2, r3
 8005840:	d152      	bne.n	80058e8 <HAL_RTC_SetAlarm_IT+0x130>
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005842:	68b3      	ldr	r3, [r6, #8]
 8005844:	4a3b      	ldr	r2, [pc, #236]	; (8005934 <HAL_RTC_SetAlarm_IT+0x17c>)
 8005846:	4013      	ands	r3, r2
 8005848:	60b3      	str	r3, [r6, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800584a:	68f2      	ldr	r2, [r6, #12]
 800584c:	4b3a      	ldr	r3, [pc, #232]	; (8005938 <HAL_RTC_SetAlarm_IT+0x180>)
 800584e:	b2d2      	uxtb	r2, r2
 8005850:	4313      	orrs	r3, r2
 8005852:	60f3      	str	r3, [r6, #12]
    tickstart = HAL_GetTick();
 8005854:	f7fe fc94 	bl	8004180 <HAL_GetTick>
 8005858:	0006      	movs	r6, r0
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800585a:	2201      	movs	r2, #1
 800585c:	6823      	ldr	r3, [r4, #0]
 800585e:	68dd      	ldr	r5, [r3, #12]
 8005860:	4015      	ands	r5, r2
 8005862:	d031      	beq.n	80058c8 <HAL_RTC_SetAlarm_IT+0x110>
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8005864:	9a00      	ldr	r2, [sp, #0]
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8005866:	61df      	str	r7, [r3, #28]
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8005868:	645a      	str	r2, [r3, #68]	; 0x44
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800586a:	2280      	movs	r2, #128	; 0x80
 800586c:	6899      	ldr	r1, [r3, #8]
 800586e:	0052      	lsls	r2, r2, #1
 8005870:	430a      	orrs	r2, r1
 8005872:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8005874:	2280      	movs	r2, #128	; 0x80
 8005876:	6899      	ldr	r1, [r3, #8]
 8005878:	0152      	lsls	r2, r2, #5
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800587a:	430a      	orrs	r2, r1
 800587c:	609a      	str	r2, [r3, #8]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800587e:	2280      	movs	r2, #128	; 0x80
 8005880:	4b2e      	ldr	r3, [pc, #184]	; (800593c <HAL_RTC_SetAlarm_IT+0x184>)
 8005882:	0292      	lsls	r2, r2, #10
 8005884:	6819      	ldr	r1, [r3, #0]
  __HAL_UNLOCK(hrtc);
 8005886:	2000      	movs	r0, #0
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8005888:	4311      	orrs	r1, r2
 800588a:	6019      	str	r1, [r3, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 800588c:	6899      	ldr	r1, [r3, #8]
 800588e:	430a      	orrs	r2, r1
 8005890:	609a      	str	r2, [r3, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005892:	22ff      	movs	r2, #255	; 0xff
 8005894:	6823      	ldr	r3, [r4, #0]
 8005896:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 8005898:	3afe      	subs	r2, #254	; 0xfe
 800589a:	1ca3      	adds	r3, r4, #2
  __HAL_UNLOCK(hrtc);
 800589c:	18a4      	adds	r4, r4, r2
  hrtc->State = HAL_RTC_STATE_READY;
 800589e:	77da      	strb	r2, [r3, #31]
  __HAL_UNLOCK(hrtc);
 80058a0:	77e0      	strb	r0, [r4, #31]
  return HAL_OK;
 80058a2:	e020      	b.n	80058e6 <HAL_RTC_SetAlarm_IT+0x12e>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d100      	bne.n	80058aa <HAL_RTC_SetAlarm_IT+0xf2>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80058a8:	70eb      	strb	r3, [r5, #3]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80058aa:	69eb      	ldr	r3, [r5, #28]
 80058ac:	696a      	ldr	r2, [r5, #20]
 80058ae:	0400      	lsls	r0, r0, #16
 80058b0:	4313      	orrs	r3, r2
 80058b2:	431f      	orrs	r7, r3
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80058b4:	9b00      	ldr	r3, [sp, #0]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80058b6:	4307      	orrs	r7, r0
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80058b8:	0218      	lsls	r0, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80058ba:	4307      	orrs	r7, r0
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80058bc:	78e8      	ldrb	r0, [r5, #3]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80058be:	1c6b      	adds	r3, r5, #1
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80058c0:	0400      	lsls	r0, r0, #16
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80058c2:	4307      	orrs	r7, r0
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80058c4:	7fd8      	ldrb	r0, [r3, #31]
 80058c6:	e7ae      	b.n	8005826 <HAL_RTC_SetAlarm_IT+0x6e>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80058c8:	f7fe fc5a 	bl	8004180 <HAL_GetTick>
 80058cc:	23fa      	movs	r3, #250	; 0xfa
 80058ce:	1b80      	subs	r0, r0, r6
 80058d0:	009b      	lsls	r3, r3, #2
 80058d2:	4298      	cmp	r0, r3
 80058d4:	d9c1      	bls.n	800585a <HAL_RTC_SetAlarm_IT+0xa2>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80058d6:	22ff      	movs	r2, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80058d8:	2003      	movs	r0, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80058da:	6823      	ldr	r3, [r4, #0]
 80058dc:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80058de:	1ca3      	adds	r3, r4, #2
        __HAL_UNLOCK(hrtc);
 80058e0:	3401      	adds	r4, #1
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80058e2:	77d8      	strb	r0, [r3, #31]
        __HAL_UNLOCK(hrtc);
 80058e4:	77e5      	strb	r5, [r4, #31]
}
 80058e6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80058e8:	68b3      	ldr	r3, [r6, #8]
 80058ea:	4a15      	ldr	r2, [pc, #84]	; (8005940 <HAL_RTC_SetAlarm_IT+0x188>)
 80058ec:	4013      	ands	r3, r2
 80058ee:	60b3      	str	r3, [r6, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80058f0:	68f2      	ldr	r2, [r6, #12]
 80058f2:	4b14      	ldr	r3, [pc, #80]	; (8005944 <HAL_RTC_SetAlarm_IT+0x18c>)
 80058f4:	b2d2      	uxtb	r2, r2
 80058f6:	4313      	orrs	r3, r2
 80058f8:	60f3      	str	r3, [r6, #12]
    tickstart = HAL_GetTick();
 80058fa:	f7fe fc41 	bl	8004180 <HAL_GetTick>
 80058fe:	0006      	movs	r6, r0
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8005900:	2202      	movs	r2, #2
 8005902:	6823      	ldr	r3, [r4, #0]
 8005904:	68dd      	ldr	r5, [r3, #12]
 8005906:	4015      	ands	r5, r2
 8005908:	d00b      	beq.n	8005922 <HAL_RTC_SetAlarm_IT+0x16a>
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800590a:	9a00      	ldr	r2, [sp, #0]
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800590c:	621f      	str	r7, [r3, #32]
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800590e:	649a      	str	r2, [r3, #72]	; 0x48
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8005910:	2280      	movs	r2, #128	; 0x80
 8005912:	6899      	ldr	r1, [r3, #8]
 8005914:	0092      	lsls	r2, r2, #2
 8005916:	430a      	orrs	r2, r1
 8005918:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800591a:	2280      	movs	r2, #128	; 0x80
 800591c:	6899      	ldr	r1, [r3, #8]
 800591e:	0192      	lsls	r2, r2, #6
 8005920:	e7ab      	b.n	800587a <HAL_RTC_SetAlarm_IT+0xc2>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005922:	f7fe fc2d 	bl	8004180 <HAL_GetTick>
 8005926:	23fa      	movs	r3, #250	; 0xfa
 8005928:	1b80      	subs	r0, r0, r6
 800592a:	009b      	lsls	r3, r3, #2
 800592c:	4298      	cmp	r0, r3
 800592e:	d9e7      	bls.n	8005900 <HAL_RTC_SetAlarm_IT+0x148>
 8005930:	e7d1      	b.n	80058d6 <HAL_RTC_SetAlarm_IT+0x11e>
 8005932:	46c0      	nop			; (mov r8, r8)
 8005934:	fffffeff 	.word	0xfffffeff
 8005938:	fffffe7f 	.word	0xfffffe7f
 800593c:	40010400 	.word	0x40010400
 8005940:	fffffdff 	.word	0xfffffdff
 8005944:	fffffd7f 	.word	0xfffffd7f

08005948 <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8005948:	230a      	movs	r3, #10
 800594a:	0902      	lsrs	r2, r0, #4
 800594c:	4353      	muls	r3, r2
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 800594e:	220f      	movs	r2, #15
 8005950:	4010      	ands	r0, r2
 8005952:	1818      	adds	r0, r3, r0
 8005954:	b2c0      	uxtb	r0, r0
}
 8005956:	4770      	bx	lr

08005958 <HAL_RTC_GetTime>:
{
 8005958:	b570      	push	{r4, r5, r6, lr}
 800595a:	000c      	movs	r4, r1
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800595c:	6801      	ldr	r1, [r0, #0]
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800595e:	203f      	movs	r0, #63	; 0x3f
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005960:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8005962:	6063      	str	r3, [r4, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005964:	690b      	ldr	r3, [r1, #16]
 8005966:	045b      	lsls	r3, r3, #17
 8005968:	0c5b      	lsrs	r3, r3, #17
 800596a:	60a3      	str	r3, [r4, #8]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800596c:	680b      	ldr	r3, [r1, #0]
 800596e:	490e      	ldr	r1, [pc, #56]	; (80059a8 <HAL_RTC_GetTime+0x50>)
 8005970:	400b      	ands	r3, r1
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8005972:	0c19      	lsrs	r1, r3, #16
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8005974:	0a1e      	lsrs	r6, r3, #8
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8005976:	b2dd      	uxtb	r5, r3
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8005978:	2340      	movs	r3, #64	; 0x40
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800597a:	4008      	ands	r0, r1
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800597c:	b2f6      	uxtb	r6, r6
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800597e:	4019      	ands	r1, r3
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8005980:	7020      	strb	r0, [r4, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8005982:	7066      	strb	r6, [r4, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8005984:	70a5      	strb	r5, [r4, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8005986:	70e1      	strb	r1, [r4, #3]
  if (Format == RTC_FORMAT_BIN)
 8005988:	2a00      	cmp	r2, #0
 800598a:	d10a      	bne.n	80059a2 <HAL_RTC_GetTime+0x4a>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800598c:	f7ff ffdc 	bl	8005948 <RTC_Bcd2ToByte>
 8005990:	7020      	strb	r0, [r4, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005992:	0030      	movs	r0, r6
 8005994:	f7ff ffd8 	bl	8005948 <RTC_Bcd2ToByte>
 8005998:	7060      	strb	r0, [r4, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800599a:	0028      	movs	r0, r5
 800599c:	f7ff ffd4 	bl	8005948 <RTC_Bcd2ToByte>
 80059a0:	70a0      	strb	r0, [r4, #2]
}
 80059a2:	2000      	movs	r0, #0
 80059a4:	bd70      	pop	{r4, r5, r6, pc}
 80059a6:	46c0      	nop			; (mov r8, r8)
 80059a8:	007f7f7f 	.word	0x007f7f7f

080059ac <HAL_RTC_GetDate>:
{
 80059ac:	b570      	push	{r4, r5, r6, lr}
 80059ae:	000c      	movs	r4, r1
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80059b0:	6803      	ldr	r3, [r0, #0]
 80059b2:	490e      	ldr	r1, [pc, #56]	; (80059ec <HAL_RTC_GetDate+0x40>)
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	400b      	ands	r3, r1
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 80059b8:	0c18      	lsrs	r0, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 80059ba:	04dd      	lsls	r5, r3, #19
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80059bc:	b2de      	uxtb	r6, r3
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 80059be:	041b      	lsls	r3, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 80059c0:	0eed      	lsrs	r5, r5, #27
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 80059c2:	0f5b      	lsrs	r3, r3, #29
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 80059c4:	70e0      	strb	r0, [r4, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 80059c6:	7065      	strb	r5, [r4, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80059c8:	70a6      	strb	r6, [r4, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 80059ca:	7023      	strb	r3, [r4, #0]
  if (Format == RTC_FORMAT_BIN)
 80059cc:	2a00      	cmp	r2, #0
 80059ce:	d10a      	bne.n	80059e6 <HAL_RTC_GetDate+0x3a>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80059d0:	f7ff ffba 	bl	8005948 <RTC_Bcd2ToByte>
 80059d4:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80059d6:	0028      	movs	r0, r5
 80059d8:	f7ff ffb6 	bl	8005948 <RTC_Bcd2ToByte>
 80059dc:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80059de:	0030      	movs	r0, r6
 80059e0:	f7ff ffb2 	bl	8005948 <RTC_Bcd2ToByte>
 80059e4:	70a0      	strb	r0, [r4, #2]
}
 80059e6:	2000      	movs	r0, #0
 80059e8:	bd70      	pop	{r4, r5, r6, pc}
 80059ea:	46c0      	nop			; (mov r8, r8)
 80059ec:	00ffff3f 	.word	0x00ffff3f

080059f0 <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 80059f0:	6803      	ldr	r3, [r0, #0]
  tmp += (BackupRegister * 4U);
 80059f2:	0089      	lsls	r1, r1, #2
  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 80059f4:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4U);
 80059f6:	18c9      	adds	r1, r1, r3

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80059f8:	600a      	str	r2, [r1, #0]
}
 80059fa:	4770      	bx	lr

080059fc <HAL_RTCEx_BKUPRead>:
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 80059fc:	6803      	ldr	r3, [r0, #0]
  tmp += (BackupRegister * 4U);
 80059fe:	0089      	lsls	r1, r1, #2
  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8005a00:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4U);
 8005a02:	18c9      	adds	r1, r1, r3

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8005a04:	6808      	ldr	r0, [r1, #0]
}
 8005a06:	4770      	bx	lr

08005a08 <HAL_RTCEx_EnableBypassShadow>:
  * @note   When the Bypass Shadow is enabled the calendar value are taken
  *         directly from the Calendar counter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 8005a08:	2202      	movs	r2, #2
 8005a0a:	b510      	push	{r4, lr}
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005a0c:	1c41      	adds	r1, r0, #1
 8005a0e:	7fcc      	ldrb	r4, [r1, #31]
{
 8005a10:	0003      	movs	r3, r0
  __HAL_LOCK(hrtc);
 8005a12:	0010      	movs	r0, r2
 8005a14:	2c01      	cmp	r4, #1
 8005a16:	d010      	beq.n	8005a3a <HAL_RTCEx_EnableBypassShadow+0x32>

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005a18:	1898      	adds	r0, r3, r2

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005a1a:	681b      	ldr	r3, [r3, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005a1c:	77c2      	strb	r2, [r0, #31]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005a1e:	32c8      	adds	r2, #200	; 0xc8
 8005a20:	625a      	str	r2, [r3, #36]	; 0x24
 8005a22:	3a77      	subs	r2, #119	; 0x77
 8005a24:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 8005a26:	689c      	ldr	r4, [r3, #8]
 8005a28:	3a33      	subs	r2, #51	; 0x33
 8005a2a:	4322      	orrs	r2, r4
 8005a2c:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a2e:	22ff      	movs	r2, #255	; 0xff
 8005a30:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005a32:	2301      	movs	r3, #1
 8005a34:	77c3      	strb	r3, [r0, #31]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005a36:	2000      	movs	r0, #0
 8005a38:	77c8      	strb	r0, [r1, #31]

  return HAL_OK;
}
 8005a3a:	bd10      	pop	{r4, pc}

08005a3c <SPI_WaitFlagStateUntilTimeout.constprop.7>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8005a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a3e:	0004      	movs	r4, r0
 8005a40:	000d      	movs	r5, r1
 8005a42:	0016      	movs	r6, r2
 8005a44:	001f      	movs	r7, r3
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005a46:	6822      	ldr	r2, [r4, #0]
 8005a48:	6893      	ldr	r3, [r2, #8]
 8005a4a:	402b      	ands	r3, r5
 8005a4c:	429d      	cmp	r5, r3
 8005a4e:	d001      	beq.n	8005a54 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x18>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8005a50:	2000      	movs	r0, #0
 8005a52:	e031      	b.n	8005ab8 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x7c>
    if (Timeout != HAL_MAX_DELAY)
 8005a54:	1c73      	adds	r3, r6, #1
 8005a56:	d0f7      	beq.n	8005a48 <SPI_WaitFlagStateUntilTimeout.constprop.7+0xc>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005a58:	f7fe fb92 	bl	8004180 <HAL_GetTick>
 8005a5c:	1bc0      	subs	r0, r0, r7
 8005a5e:	4286      	cmp	r6, r0
 8005a60:	d8f1      	bhi.n	8005a46 <SPI_WaitFlagStateUntilTimeout.constprop.7+0xa>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005a62:	21e0      	movs	r1, #224	; 0xe0
 8005a64:	6823      	ldr	r3, [r4, #0]
 8005a66:	685a      	ldr	r2, [r3, #4]
 8005a68:	438a      	bics	r2, r1
 8005a6a:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a6c:	2282      	movs	r2, #130	; 0x82
 8005a6e:	6861      	ldr	r1, [r4, #4]
 8005a70:	0052      	lsls	r2, r2, #1
 8005a72:	4291      	cmp	r1, r2
 8005a74:	d10c      	bne.n	8005a90 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x54>
 8005a76:	2180      	movs	r1, #128	; 0x80
 8005a78:	68a2      	ldr	r2, [r4, #8]
 8005a7a:	0209      	lsls	r1, r1, #8
 8005a7c:	428a      	cmp	r2, r1
 8005a7e:	d003      	beq.n	8005a88 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x4c>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005a80:	2180      	movs	r1, #128	; 0x80
 8005a82:	00c9      	lsls	r1, r1, #3
 8005a84:	428a      	cmp	r2, r1
 8005a86:	d103      	bne.n	8005a90 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x54>
          __HAL_SPI_DISABLE(hspi);
 8005a88:	2140      	movs	r1, #64	; 0x40
 8005a8a:	681a      	ldr	r2, [r3, #0]
 8005a8c:	438a      	bics	r2, r1
 8005a8e:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005a90:	2180      	movs	r1, #128	; 0x80
 8005a92:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8005a94:	0189      	lsls	r1, r1, #6
 8005a96:	428a      	cmp	r2, r1
 8005a98:	d106      	bne.n	8005aa8 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x6c>
          SPI_RESET_CRC(hspi);
 8005a9a:	6819      	ldr	r1, [r3, #0]
 8005a9c:	4807      	ldr	r0, [pc, #28]	; (8005abc <SPI_WaitFlagStateUntilTimeout.constprop.7+0x80>)
 8005a9e:	4001      	ands	r1, r0
 8005aa0:	6019      	str	r1, [r3, #0]
 8005aa2:	6819      	ldr	r1, [r3, #0]
 8005aa4:	430a      	orrs	r2, r1
 8005aa6:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8005aa8:	0023      	movs	r3, r4
 8005aaa:	2201      	movs	r2, #1
 8005aac:	3351      	adds	r3, #81	; 0x51
 8005aae:	701a      	strb	r2, [r3, #0]
        __HAL_UNLOCK(hspi);
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	2003      	movs	r0, #3
 8005ab4:	3450      	adds	r4, #80	; 0x50
 8005ab6:	7023      	strb	r3, [r4, #0]
}
 8005ab8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005aba:	46c0      	nop			; (mov r8, r8)
 8005abc:	ffffdfff 	.word	0xffffdfff

08005ac0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005ac0:	0013      	movs	r3, r2
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005ac2:	2282      	movs	r2, #130	; 0x82
{
 8005ac4:	b510      	push	{r4, lr}
 8005ac6:	0004      	movs	r4, r0
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005ac8:	6840      	ldr	r0, [r0, #4]
 8005aca:	0052      	lsls	r2, r2, #1
 8005acc:	4290      	cmp	r0, r2
 8005ace:	d108      	bne.n	8005ae2 <SPI_EndRxTxTransaction+0x22>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005ad0:	000a      	movs	r2, r1
 8005ad2:	2180      	movs	r1, #128	; 0x80
 8005ad4:	0020      	movs	r0, r4
 8005ad6:	f7ff ffb1 	bl	8005a3c <SPI_WaitFlagStateUntilTimeout.constprop.7>
 8005ada:	2800      	cmp	r0, #0
 8005adc:	d109      	bne.n	8005af2 <SPI_EndRxTxTransaction+0x32>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8005ade:	2000      	movs	r0, #0
}
 8005ae0:	bd10      	pop	{r4, pc}
    if (hspi->State == HAL_SPI_STATE_BUSY_TX_RX)
 8005ae2:	0022      	movs	r2, r4
 8005ae4:	3251      	adds	r2, #81	; 0x51
 8005ae6:	7812      	ldrb	r2, [r2, #0]
 8005ae8:	2a05      	cmp	r2, #5
 8005aea:	d1f8      	bne.n	8005ade <SPI_EndRxTxTransaction+0x1e>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005aec:	000a      	movs	r2, r1
 8005aee:	2101      	movs	r1, #1
 8005af0:	e7f0      	b.n	8005ad4 <SPI_EndRxTxTransaction+0x14>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005af2:	2320      	movs	r3, #32
 8005af4:	6d62      	ldr	r2, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 8005af6:	2003      	movs	r0, #3
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005af8:	4313      	orrs	r3, r2
 8005afa:	6563      	str	r3, [r4, #84]	; 0x54
 8005afc:	e7f0      	b.n	8005ae0 <SPI_EndRxTxTransaction+0x20>

08005afe <HAL_SPI_MspInit>:
}
 8005afe:	4770      	bx	lr

08005b00 <HAL_SPI_Init>:
{
 8005b00:	b570      	push	{r4, r5, r6, lr}
 8005b02:	0004      	movs	r4, r0
    return HAL_ERROR;
 8005b04:	2001      	movs	r0, #1
  if (hspi == NULL)
 8005b06:	2c00      	cmp	r4, #0
 8005b08:	d037      	beq.n	8005b7a <HAL_SPI_Init+0x7a>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b0a:	2300      	movs	r3, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 8005b0c:	0025      	movs	r5, r4
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b0e:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8005b10:	3551      	adds	r5, #81	; 0x51
 8005b12:	782b      	ldrb	r3, [r5, #0]
 8005b14:	b2db      	uxtb	r3, r3
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d105      	bne.n	8005b26 <HAL_SPI_Init+0x26>
    hspi->Lock = HAL_UNLOCKED;
 8005b1a:	0022      	movs	r2, r4
 8005b1c:	3250      	adds	r2, #80	; 0x50
 8005b1e:	7013      	strb	r3, [r2, #0]
    HAL_SPI_MspInit(hspi);
 8005b20:	0020      	movs	r0, r4
 8005b22:	f7ff ffec 	bl	8005afe <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8005b26:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8005b28:	2240      	movs	r2, #64	; 0x40
 8005b2a:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8005b2c:	702b      	strb	r3, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 8005b2e:	680b      	ldr	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005b30:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 8005b32:	4393      	bics	r3, r2
 8005b34:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005b36:	6863      	ldr	r3, [r4, #4]
 8005b38:	69a2      	ldr	r2, [r4, #24]
 8005b3a:	4303      	orrs	r3, r0
 8005b3c:	68e0      	ldr	r0, [r4, #12]
 8005b3e:	4303      	orrs	r3, r0
 8005b40:	6920      	ldr	r0, [r4, #16]
 8005b42:	4303      	orrs	r3, r0
 8005b44:	6960      	ldr	r0, [r4, #20]
 8005b46:	4303      	orrs	r3, r0
 8005b48:	69e0      	ldr	r0, [r4, #28]
 8005b4a:	4303      	orrs	r3, r0
 8005b4c:	6a20      	ldr	r0, [r4, #32]
 8005b4e:	4303      	orrs	r3, r0
 8005b50:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8005b52:	4303      	orrs	r3, r0
 8005b54:	2080      	movs	r0, #128	; 0x80
 8005b56:	0080      	lsls	r0, r0, #2
 8005b58:	4010      	ands	r0, r2
 8005b5a:	4303      	orrs	r3, r0
 8005b5c:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8005b5e:	2304      	movs	r3, #4
 8005b60:	0c12      	lsrs	r2, r2, #16
 8005b62:	401a      	ands	r2, r3
 8005b64:	6a63      	ldr	r3, [r4, #36]	; 0x24
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005b66:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8005b68:	431a      	orrs	r2, r3
 8005b6a:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005b6c:	69cb      	ldr	r3, [r1, #28]
 8005b6e:	4a03      	ldr	r2, [pc, #12]	; (8005b7c <HAL_SPI_Init+0x7c>)
 8005b70:	4013      	ands	r3, r2
 8005b72:	61cb      	str	r3, [r1, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8005b74:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005b76:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005b78:	702b      	strb	r3, [r5, #0]
}
 8005b7a:	bd70      	pop	{r4, r5, r6, pc}
 8005b7c:	fffff7ff 	.word	0xfffff7ff

08005b80 <HAL_SPI_TransmitReceive>:
{
 8005b80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b82:	001e      	movs	r6, r3
  __HAL_LOCK(hspi);
 8005b84:	0003      	movs	r3, r0
 8005b86:	3350      	adds	r3, #80	; 0x50
{
 8005b88:	0017      	movs	r7, r2
  __HAL_LOCK(hspi);
 8005b8a:	781a      	ldrb	r2, [r3, #0]
{
 8005b8c:	0004      	movs	r4, r0
 8005b8e:	b085      	sub	sp, #20
 8005b90:	000d      	movs	r5, r1
  __HAL_LOCK(hspi);
 8005b92:	2002      	movs	r0, #2
 8005b94:	2a01      	cmp	r2, #1
 8005b96:	d100      	bne.n	8005b9a <HAL_SPI_TransmitReceive+0x1a>
 8005b98:	e099      	b.n	8005cce <HAL_SPI_TransmitReceive+0x14e>
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	701a      	strb	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8005b9e:	f7fe faef 	bl	8004180 <HAL_GetTick>
  tmp_state           = hspi->State;
 8005ba2:	0023      	movs	r3, r4
  tickstart = HAL_GetTick();
 8005ba4:	9001      	str	r0, [sp, #4]
  tmp_state           = hspi->State;
 8005ba6:	3351      	adds	r3, #81	; 0x51
 8005ba8:	781b      	ldrb	r3, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8005baa:	6861      	ldr	r1, [r4, #4]
  tmp_state           = hspi->State;
 8005bac:	b2db      	uxtb	r3, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005bae:	2b01      	cmp	r3, #1
 8005bb0:	d00c      	beq.n	8005bcc <HAL_SPI_TransmitReceive+0x4c>
 8005bb2:	2282      	movs	r2, #130	; 0x82
    errorcode = HAL_BUSY;
 8005bb4:	2002      	movs	r0, #2
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005bb6:	0052      	lsls	r2, r2, #1
 8005bb8:	4291      	cmp	r1, r2
 8005bba:	d000      	beq.n	8005bbe <HAL_SPI_TransmitReceive+0x3e>
 8005bbc:	e080      	b.n	8005cc0 <HAL_SPI_TransmitReceive+0x140>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005bbe:	68a2      	ldr	r2, [r4, #8]
 8005bc0:	2a00      	cmp	r2, #0
 8005bc2:	d000      	beq.n	8005bc6 <HAL_SPI_TransmitReceive+0x46>
 8005bc4:	e07c      	b.n	8005cc0 <HAL_SPI_TransmitReceive+0x140>
 8005bc6:	2b04      	cmp	r3, #4
 8005bc8:	d000      	beq.n	8005bcc <HAL_SPI_TransmitReceive+0x4c>
 8005bca:	e079      	b.n	8005cc0 <HAL_SPI_TransmitReceive+0x140>
    errorcode = HAL_ERROR;
 8005bcc:	2001      	movs	r0, #1
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005bce:	2d00      	cmp	r5, #0
 8005bd0:	d076      	beq.n	8005cc0 <HAL_SPI_TransmitReceive+0x140>
 8005bd2:	2f00      	cmp	r7, #0
 8005bd4:	d074      	beq.n	8005cc0 <HAL_SPI_TransmitReceive+0x140>
 8005bd6:	2e00      	cmp	r6, #0
 8005bd8:	d072      	beq.n	8005cc0 <HAL_SPI_TransmitReceive+0x140>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005bda:	0023      	movs	r3, r4
 8005bdc:	3351      	adds	r3, #81	; 0x51
 8005bde:	781a      	ldrb	r2, [r3, #0]
 8005be0:	2a04      	cmp	r2, #4
 8005be2:	d001      	beq.n	8005be8 <HAL_SPI_TransmitReceive+0x68>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005be4:	2205      	movs	r2, #5
 8005be6:	701a      	strb	r2, [r3, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005be8:	2300      	movs	r3, #0
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005bea:	2240      	movs	r2, #64	; 0x40
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005bec:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 8005bee:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005bf0:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005bf2:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 8005bf4:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 8005bf6:	86e6      	strh	r6, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005bf8:	6818      	ldr	r0, [r3, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005bfa:	63a7      	str	r7, [r4, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005bfc:	87a6      	strh	r6, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005bfe:	6325      	str	r5, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005c00:	86a6      	strh	r6, [r4, #52]	; 0x34
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005c02:	4210      	tst	r0, r2
 8005c04:	d102      	bne.n	8005c0c <HAL_SPI_TransmitReceive+0x8c>
    __HAL_SPI_ENABLE(hspi);
 8005c06:	6818      	ldr	r0, [r3, #0]
 8005c08:	4302      	orrs	r2, r0
 8005c0a:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005c0c:	2280      	movs	r2, #128	; 0x80
 8005c0e:	68e0      	ldr	r0, [r4, #12]
 8005c10:	0112      	lsls	r2, r2, #4
 8005c12:	4290      	cmp	r0, r2
 8005c14:	d15d      	bne.n	8005cd2 <HAL_SPI_TransmitReceive+0x152>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c16:	2900      	cmp	r1, #0
 8005c18:	d001      	beq.n	8005c1e <HAL_SPI_TransmitReceive+0x9e>
 8005c1a:	2e01      	cmp	r6, #1
 8005c1c:	d107      	bne.n	8005c2e <HAL_SPI_TransmitReceive+0xae>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c1e:	882a      	ldrh	r2, [r5, #0]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c20:	3502      	adds	r5, #2
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c22:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8005c24:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c26:	6325      	str	r5, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8005c28:	3b01      	subs	r3, #1
 8005c2a:	b29b      	uxth	r3, r3
 8005c2c:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8005c2e:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005c30:	2702      	movs	r7, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005c32:	002e      	movs	r6, r5
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c34:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d115      	bne.n	8005c66 <HAL_SPI_TransmitReceive+0xe6>
 8005c3a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d112      	bne.n	8005c66 <HAL_SPI_TransmitReceive+0xe6>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005c40:	9a01      	ldr	r2, [sp, #4]
 8005c42:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005c44:	0020      	movs	r0, r4
 8005c46:	f7ff ff3b 	bl	8005ac0 <SPI_EndRxTxTransaction>
 8005c4a:	2800      	cmp	r0, #0
 8005c4c:	d000      	beq.n	8005c50 <HAL_SPI_TransmitReceive+0xd0>
 8005c4e:	e086      	b.n	8005d5e <HAL_SPI_TransmitReceive+0x1de>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005c50:	68a3      	ldr	r3, [r4, #8]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d134      	bne.n	8005cc0 <HAL_SPI_TransmitReceive+0x140>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005c56:	6823      	ldr	r3, [r4, #0]
 8005c58:	9003      	str	r0, [sp, #12]
 8005c5a:	68da      	ldr	r2, [r3, #12]
 8005c5c:	9203      	str	r2, [sp, #12]
 8005c5e:	689b      	ldr	r3, [r3, #8]
 8005c60:	9303      	str	r3, [sp, #12]
 8005c62:	9b03      	ldr	r3, [sp, #12]
 8005c64:	e02c      	b.n	8005cc0 <HAL_SPI_TransmitReceive+0x140>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005c66:	6822      	ldr	r2, [r4, #0]
 8005c68:	6893      	ldr	r3, [r2, #8]
 8005c6a:	423b      	tst	r3, r7
 8005c6c:	d00e      	beq.n	8005c8c <HAL_SPI_TransmitReceive+0x10c>
 8005c6e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d00b      	beq.n	8005c8c <HAL_SPI_TransmitReceive+0x10c>
 8005c74:	2d01      	cmp	r5, #1
 8005c76:	d109      	bne.n	8005c8c <HAL_SPI_TransmitReceive+0x10c>
        txallowed = 0U;
 8005c78:	2500      	movs	r5, #0
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c7a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005c7c:	8819      	ldrh	r1, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c7e:	3302      	adds	r3, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c80:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c82:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8005c84:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005c86:	3b01      	subs	r3, #1
 8005c88:	b29b      	uxth	r3, r3
 8005c8a:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005c8c:	6893      	ldr	r3, [r2, #8]
 8005c8e:	4233      	tst	r3, r6
 8005c90:	d00c      	beq.n	8005cac <HAL_SPI_TransmitReceive+0x12c>
 8005c92:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d009      	beq.n	8005cac <HAL_SPI_TransmitReceive+0x12c>
        txallowed = 1U;
 8005c98:	0035      	movs	r5, r6
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005c9a:	68d2      	ldr	r2, [r2, #12]
 8005c9c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005c9e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005ca0:	3302      	adds	r3, #2
 8005ca2:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8005ca4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005ca6:	3b01      	subs	r3, #1
 8005ca8:	b29b      	uxth	r3, r3
 8005caa:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005cac:	f7fe fa68 	bl	8004180 <HAL_GetTick>
 8005cb0:	9b01      	ldr	r3, [sp, #4]
 8005cb2:	1ac0      	subs	r0, r0, r3
 8005cb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005cb6:	4283      	cmp	r3, r0
 8005cb8:	d8bc      	bhi.n	8005c34 <HAL_SPI_TransmitReceive+0xb4>
 8005cba:	3301      	adds	r3, #1
 8005cbc:	d0ba      	beq.n	8005c34 <HAL_SPI_TransmitReceive+0xb4>
        errorcode = HAL_TIMEOUT;
 8005cbe:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8005cc0:	0023      	movs	r3, r4
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	3351      	adds	r3, #81	; 0x51
 8005cc6:	701a      	strb	r2, [r3, #0]
  __HAL_UNLOCK(hspi);
 8005cc8:	2300      	movs	r3, #0
 8005cca:	3450      	adds	r4, #80	; 0x50
 8005ccc:	7023      	strb	r3, [r4, #0]
}
 8005cce:	b005      	add	sp, #20
 8005cd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005cd2:	2900      	cmp	r1, #0
 8005cd4:	d001      	beq.n	8005cda <HAL_SPI_TransmitReceive+0x15a>
 8005cd6:	2e01      	cmp	r6, #1
 8005cd8:	d108      	bne.n	8005cec <HAL_SPI_TransmitReceive+0x16c>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005cda:	782a      	ldrb	r2, [r5, #0]
 8005cdc:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005cde:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005ce0:	3301      	adds	r3, #1
 8005ce2:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8005ce4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005ce6:	3b01      	subs	r3, #1
 8005ce8:	b29b      	uxth	r3, r3
 8005cea:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8005cec:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005cee:	2702      	movs	r7, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005cf0:	002e      	movs	r6, r5
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005cf2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d102      	bne.n	8005cfe <HAL_SPI_TransmitReceive+0x17e>
 8005cf8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d0a0      	beq.n	8005c40 <HAL_SPI_TransmitReceive+0xc0>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005cfe:	6823      	ldr	r3, [r4, #0]
 8005d00:	689a      	ldr	r2, [r3, #8]
 8005d02:	423a      	tst	r2, r7
 8005d04:	d00f      	beq.n	8005d26 <HAL_SPI_TransmitReceive+0x1a6>
 8005d06:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8005d08:	2a00      	cmp	r2, #0
 8005d0a:	d00c      	beq.n	8005d26 <HAL_SPI_TransmitReceive+0x1a6>
 8005d0c:	2d01      	cmp	r5, #1
 8005d0e:	d10a      	bne.n	8005d26 <HAL_SPI_TransmitReceive+0x1a6>
        txallowed = 0U;
 8005d10:	2500      	movs	r5, #0
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005d12:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005d14:	7812      	ldrb	r2, [r2, #0]
 8005d16:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8005d18:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005d1a:	3301      	adds	r3, #1
 8005d1c:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8005d1e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005d20:	3b01      	subs	r3, #1
 8005d22:	b29b      	uxth	r3, r3
 8005d24:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005d26:	6823      	ldr	r3, [r4, #0]
 8005d28:	689a      	ldr	r2, [r3, #8]
 8005d2a:	4232      	tst	r2, r6
 8005d2c:	d00d      	beq.n	8005d4a <HAL_SPI_TransmitReceive+0x1ca>
 8005d2e:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8005d30:	2a00      	cmp	r2, #0
 8005d32:	d00a      	beq.n	8005d4a <HAL_SPI_TransmitReceive+0x1ca>
        txallowed = 1U;
 8005d34:	0035      	movs	r5, r6
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005d36:	68db      	ldr	r3, [r3, #12]
 8005d38:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005d3a:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr++;
 8005d3c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005d3e:	3301      	adds	r3, #1
 8005d40:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8005d42:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005d44:	3b01      	subs	r3, #1
 8005d46:	b29b      	uxth	r3, r3
 8005d48:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005d4a:	f7fe fa19 	bl	8004180 <HAL_GetTick>
 8005d4e:	9b01      	ldr	r3, [sp, #4]
 8005d50:	1ac0      	subs	r0, r0, r3
 8005d52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d54:	4283      	cmp	r3, r0
 8005d56:	d8cc      	bhi.n	8005cf2 <HAL_SPI_TransmitReceive+0x172>
 8005d58:	3301      	adds	r3, #1
 8005d5a:	d0ca      	beq.n	8005cf2 <HAL_SPI_TransmitReceive+0x172>
 8005d5c:	e7af      	b.n	8005cbe <HAL_SPI_TransmitReceive+0x13e>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005d5e:	2320      	movs	r3, #32
    errorcode = HAL_ERROR;
 8005d60:	2001      	movs	r0, #1
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005d62:	6563      	str	r3, [r4, #84]	; 0x54
 8005d64:	e7ac      	b.n	8005cc0 <HAL_SPI_TransmitReceive+0x140>
	...

08005d68 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d68:	2280      	movs	r2, #128	; 0x80
  tmpcr1 = TIMx->CR1;
 8005d6a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d6c:	05d2      	lsls	r2, r2, #23
 8005d6e:	4290      	cmp	r0, r2
 8005d70:	d008      	beq.n	8005d84 <TIM_Base_SetConfig+0x1c>
 8005d72:	4a15      	ldr	r2, [pc, #84]	; (8005dc8 <TIM_Base_SetConfig+0x60>)
 8005d74:	4290      	cmp	r0, r2
 8005d76:	d005      	beq.n	8005d84 <TIM_Base_SetConfig+0x1c>
 8005d78:	4a14      	ldr	r2, [pc, #80]	; (8005dcc <TIM_Base_SetConfig+0x64>)
 8005d7a:	4290      	cmp	r0, r2
 8005d7c:	d002      	beq.n	8005d84 <TIM_Base_SetConfig+0x1c>
 8005d7e:	4a14      	ldr	r2, [pc, #80]	; (8005dd0 <TIM_Base_SetConfig+0x68>)
 8005d80:	4290      	cmp	r0, r2
 8005d82:	d114      	bne.n	8005dae <TIM_Base_SetConfig+0x46>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d84:	2270      	movs	r2, #112	; 0x70
 8005d86:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8005d88:	684a      	ldr	r2, [r1, #4]
 8005d8a:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d8c:	2280      	movs	r2, #128	; 0x80
 8005d8e:	05d2      	lsls	r2, r2, #23
 8005d90:	4290      	cmp	r0, r2
 8005d92:	d008      	beq.n	8005da6 <TIM_Base_SetConfig+0x3e>
 8005d94:	4a0c      	ldr	r2, [pc, #48]	; (8005dc8 <TIM_Base_SetConfig+0x60>)
 8005d96:	4290      	cmp	r0, r2
 8005d98:	d005      	beq.n	8005da6 <TIM_Base_SetConfig+0x3e>
 8005d9a:	4a0c      	ldr	r2, [pc, #48]	; (8005dcc <TIM_Base_SetConfig+0x64>)
 8005d9c:	4290      	cmp	r0, r2
 8005d9e:	d002      	beq.n	8005da6 <TIM_Base_SetConfig+0x3e>
 8005da0:	4a0b      	ldr	r2, [pc, #44]	; (8005dd0 <TIM_Base_SetConfig+0x68>)
 8005da2:	4290      	cmp	r0, r2
 8005da4:	d103      	bne.n	8005dae <TIM_Base_SetConfig+0x46>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005da6:	4a0b      	ldr	r2, [pc, #44]	; (8005dd4 <TIM_Base_SetConfig+0x6c>)
 8005da8:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005daa:	68ca      	ldr	r2, [r1, #12]
 8005dac:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005dae:	2280      	movs	r2, #128	; 0x80
 8005db0:	4393      	bics	r3, r2
 8005db2:	690a      	ldr	r2, [r1, #16]
 8005db4:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8005db6:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005db8:	688b      	ldr	r3, [r1, #8]
 8005dba:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005dbc:	680b      	ldr	r3, [r1, #0]
 8005dbe:	6283      	str	r3, [r0, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	6143      	str	r3, [r0, #20]
}
 8005dc4:	4770      	bx	lr
 8005dc6:	46c0      	nop			; (mov r8, r8)
 8005dc8:	40000400 	.word	0x40000400
 8005dcc:	40010800 	.word	0x40010800
 8005dd0:	40011400 	.word	0x40011400
 8005dd4:	fffffcff 	.word	0xfffffcff

08005dd8 <HAL_TIM_Base_Init>:
{
 8005dd8:	b570      	push	{r4, r5, r6, lr}
 8005dda:	0004      	movs	r4, r0
    return HAL_ERROR;
 8005ddc:	2001      	movs	r0, #1
  if (htim == NULL)
 8005dde:	2c00      	cmp	r4, #0
 8005de0:	d014      	beq.n	8005e0c <HAL_TIM_Base_Init+0x34>
  if (htim->State == HAL_TIM_STATE_RESET)
 8005de2:	0025      	movs	r5, r4
 8005de4:	3539      	adds	r5, #57	; 0x39
 8005de6:	782b      	ldrb	r3, [r5, #0]
 8005de8:	b2db      	uxtb	r3, r3
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d105      	bne.n	8005dfa <HAL_TIM_Base_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 8005dee:	0022      	movs	r2, r4
 8005df0:	3238      	adds	r2, #56	; 0x38
 8005df2:	7013      	strb	r3, [r2, #0]
    HAL_TIM_Base_MspInit(htim);
 8005df4:	0020      	movs	r0, r4
 8005df6:	f007 fe6d 	bl	800dad4 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8005dfa:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005dfc:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8005dfe:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e00:	1d21      	adds	r1, r4, #4
 8005e02:	f7ff ffb1 	bl	8005d68 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8005e06:	2301      	movs	r3, #1
  return HAL_OK;
 8005e08:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8005e0a:	702b      	strb	r3, [r5, #0]
}
 8005e0c:	bd70      	pop	{r4, r5, r6, pc}

08005e0e <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e0e:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e10:	0004      	movs	r4, r0
 8005e12:	2202      	movs	r2, #2
 8005e14:	3438      	adds	r4, #56	; 0x38
 8005e16:	7825      	ldrb	r5, [r4, #0]
{
 8005e18:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 8005e1a:	0010      	movs	r0, r2
 8005e1c:	2d01      	cmp	r5, #1
 8005e1e:	d013      	beq.n	8005e48 <HAL_TIMEx_MasterConfigSynchronization+0x3a>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e20:	001d      	movs	r5, r3

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e22:	2670      	movs	r6, #112	; 0x70
  tmpcr2 = htim->Instance->CR2;
 8005e24:	6818      	ldr	r0, [r3, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8005e26:	3539      	adds	r5, #57	; 0x39
 8005e28:	702a      	strb	r2, [r5, #0]
  tmpcr2 = htim->Instance->CR2;
 8005e2a:	6842      	ldr	r2, [r0, #4]
  tmpsmcr = htim->Instance->SMCR;
 8005e2c:	6883      	ldr	r3, [r0, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e2e:	43b2      	bics	r2, r6
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e30:	680e      	ldr	r6, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e32:	6849      	ldr	r1, [r1, #4]
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e34:	4332      	orrs	r2, r6
  tmpsmcr &= ~TIM_SMCR_MSM;
 8005e36:	2680      	movs	r6, #128	; 0x80
 8005e38:	43b3      	bics	r3, r6
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e3a:	430b      	orrs	r3, r1

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e3c:	6042      	str	r2, [r0, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005e3e:	6083      	str	r3, [r0, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e40:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8005e42:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8005e44:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 8005e46:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 8005e48:	bd70      	pop	{r4, r5, r6, pc}
	...

08005e4c <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e4c:	6803      	ldr	r3, [r0, #0]
 8005e4e:	4907      	ldr	r1, [pc, #28]	; (8005e6c <UART_EndRxTransfer+0x20>)
 8005e50:	681a      	ldr	r2, [r3, #0]
 8005e52:	400a      	ands	r2, r1
 8005e54:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e56:	689a      	ldr	r2, [r3, #8]
 8005e58:	3123      	adds	r1, #35	; 0x23
 8005e5a:	31ff      	adds	r1, #255	; 0xff
 8005e5c:	438a      	bics	r2, r1
 8005e5e:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e60:	2320      	movs	r3, #32
 8005e62:	6783      	str	r3, [r0, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005e64:	2300      	movs	r3, #0
 8005e66:	6603      	str	r3, [r0, #96]	; 0x60
}
 8005e68:	4770      	bx	lr
 8005e6a:	46c0      	nop			; (mov r8, r8)
 8005e6c:	fffffedf 	.word	0xfffffedf

08005e70 <UART_TxISR_16BIT>:
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005e70:	6f43      	ldr	r3, [r0, #116]	; 0x74
{
 8005e72:	b510      	push	{r4, lr}
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005e74:	2b21      	cmp	r3, #33	; 0x21
 8005e76:	d10d      	bne.n	8005e94 <UART_TxISR_16BIT+0x24>
  {
    if (huart->TxXferCount == 0U)
 8005e78:	0001      	movs	r1, r0
 8005e7a:	3152      	adds	r1, #82	; 0x52
 8005e7c:	880a      	ldrh	r2, [r1, #0]
 8005e7e:	6803      	ldr	r3, [r0, #0]
 8005e80:	2a00      	cmp	r2, #0
 8005e82:	d108      	bne.n	8005e96 <UART_TxISR_16BIT+0x26>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005e84:	2180      	movs	r1, #128	; 0x80
 8005e86:	681a      	ldr	r2, [r3, #0]
 8005e88:	438a      	bics	r2, r1
 8005e8a:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005e8c:	2240      	movs	r2, #64	; 0x40
 8005e8e:	6819      	ldr	r1, [r3, #0]
 8005e90:	430a      	orrs	r2, r1
 8005e92:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8005e94:	bd10      	pop	{r4, pc}
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005e96:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
      huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 8005e98:	8822      	ldrh	r2, [r4, #0]
      huart->pTxBuffPtr += 2U;
 8005e9a:	3402      	adds	r4, #2
      huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 8005e9c:	05d2      	lsls	r2, r2, #23
 8005e9e:	0dd2      	lsrs	r2, r2, #23
 8005ea0:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8005ea2:	64c4      	str	r4, [r0, #76]	; 0x4c
      huart->TxXferCount--;
 8005ea4:	880b      	ldrh	r3, [r1, #0]
 8005ea6:	3b01      	subs	r3, #1
 8005ea8:	b29b      	uxth	r3, r3
 8005eaa:	800b      	strh	r3, [r1, #0]
}
 8005eac:	e7f2      	b.n	8005e94 <UART_TxISR_16BIT+0x24>

08005eae <UART_TxISR_8BIT>:
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005eae:	6f43      	ldr	r3, [r0, #116]	; 0x74
{
 8005eb0:	b510      	push	{r4, lr}
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005eb2:	2b21      	cmp	r3, #33	; 0x21
 8005eb4:	d10d      	bne.n	8005ed2 <UART_TxISR_8BIT+0x24>
    if (huart->TxXferCount == 0U)
 8005eb6:	0001      	movs	r1, r0
 8005eb8:	3152      	adds	r1, #82	; 0x52
 8005eba:	880a      	ldrh	r2, [r1, #0]
 8005ebc:	6803      	ldr	r3, [r0, #0]
 8005ebe:	2a00      	cmp	r2, #0
 8005ec0:	d108      	bne.n	8005ed4 <UART_TxISR_8BIT+0x26>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005ec2:	2180      	movs	r1, #128	; 0x80
 8005ec4:	681a      	ldr	r2, [r3, #0]
 8005ec6:	438a      	bics	r2, r1
 8005ec8:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005eca:	2240      	movs	r2, #64	; 0x40
 8005ecc:	6819      	ldr	r1, [r3, #0]
 8005ece:	430a      	orrs	r2, r1
 8005ed0:	601a      	str	r2, [r3, #0]
}
 8005ed2:	bd10      	pop	{r4, pc}
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8005ed4:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8005ed6:	7814      	ldrb	r4, [r2, #0]
      huart->pTxBuffPtr++;
 8005ed8:	3201      	adds	r2, #1
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8005eda:	629c      	str	r4, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8005edc:	64c2      	str	r2, [r0, #76]	; 0x4c
      huart->TxXferCount--;
 8005ede:	880b      	ldrh	r3, [r1, #0]
 8005ee0:	3b01      	subs	r3, #1
 8005ee2:	b29b      	uxth	r3, r3
 8005ee4:	800b      	strh	r3, [r1, #0]
}
 8005ee6:	e7f4      	b.n	8005ed2 <UART_TxISR_8BIT+0x24>

08005ee8 <HAL_UART_Transmit_IT>:
{
 8005ee8:	b570      	push	{r4, r5, r6, lr}
  if (huart->gState == HAL_UART_STATE_READY)
 8005eea:	6f44      	ldr	r4, [r0, #116]	; 0x74
{
 8005eec:	0003      	movs	r3, r0
    return HAL_BUSY;
 8005eee:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 8005ef0:	2c20      	cmp	r4, #32
 8005ef2:	d130      	bne.n	8005f56 <HAL_UART_Transmit_IT+0x6e>
      return HAL_ERROR;
 8005ef4:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 8005ef6:	2900      	cmp	r1, #0
 8005ef8:	d02d      	beq.n	8005f56 <HAL_UART_Transmit_IT+0x6e>
 8005efa:	2a00      	cmp	r2, #0
 8005efc:	d02b      	beq.n	8005f56 <HAL_UART_Transmit_IT+0x6e>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005efe:	2480      	movs	r4, #128	; 0x80
 8005f00:	689d      	ldr	r5, [r3, #8]
 8005f02:	0164      	lsls	r4, r4, #5
 8005f04:	42a5      	cmp	r5, r4
 8005f06:	d104      	bne.n	8005f12 <HAL_UART_Transmit_IT+0x2a>
 8005f08:	691c      	ldr	r4, [r3, #16]
 8005f0a:	2c00      	cmp	r4, #0
 8005f0c:	d101      	bne.n	8005f12 <HAL_UART_Transmit_IT+0x2a>
      if ((((uint32_t)pData) & 1) != 0)
 8005f0e:	4201      	tst	r1, r0
 8005f10:	d121      	bne.n	8005f56 <HAL_UART_Transmit_IT+0x6e>
    __HAL_LOCK(huart);
 8005f12:	001c      	movs	r4, r3
 8005f14:	3470      	adds	r4, #112	; 0x70
 8005f16:	7826      	ldrb	r6, [r4, #0]
    return HAL_BUSY;
 8005f18:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 8005f1a:	2e01      	cmp	r6, #1
 8005f1c:	d01b      	beq.n	8005f56 <HAL_UART_Transmit_IT+0x6e>
 8005f1e:	3801      	subs	r0, #1
 8005f20:	7020      	strb	r0, [r4, #0]
    huart->pTxBuffPtr  = pData;
 8005f22:	64d9      	str	r1, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8005f24:	0019      	movs	r1, r3
 8005f26:	3150      	adds	r1, #80	; 0x50
 8005f28:	800a      	strh	r2, [r1, #0]
    huart->TxXferCount = Size;
 8005f2a:	804a      	strh	r2, [r1, #2]
    huart->TxISR       = NULL;
 8005f2c:	2200      	movs	r2, #0
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f2e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->TxISR       = NULL;
 8005f30:	665a      	str	r2, [r3, #100]	; 0x64
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f32:	3221      	adds	r2, #33	; 0x21
 8005f34:	675a      	str	r2, [r3, #116]	; 0x74
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f36:	2280      	movs	r2, #128	; 0x80
 8005f38:	0152      	lsls	r2, r2, #5
 8005f3a:	4295      	cmp	r5, r2
 8005f3c:	d10c      	bne.n	8005f58 <HAL_UART_Transmit_IT+0x70>
 8005f3e:	691a      	ldr	r2, [r3, #16]
 8005f40:	2a00      	cmp	r2, #0
 8005f42:	d109      	bne.n	8005f58 <HAL_UART_Transmit_IT+0x70>
      huart->TxISR = UART_TxISR_16BIT;
 8005f44:	4a05      	ldr	r2, [pc, #20]	; (8005f5c <HAL_UART_Transmit_IT+0x74>)
      huart->TxISR = UART_TxISR_8BIT;
 8005f46:	665a      	str	r2, [r3, #100]	; 0x64
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005f48:	681a      	ldr	r2, [r3, #0]
 8005f4a:	2380      	movs	r3, #128	; 0x80
    __HAL_UNLOCK(huart);
 8005f4c:	2000      	movs	r0, #0
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005f4e:	6811      	ldr	r1, [r2, #0]
    __HAL_UNLOCK(huart);
 8005f50:	7020      	strb	r0, [r4, #0]
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005f52:	430b      	orrs	r3, r1
 8005f54:	6013      	str	r3, [r2, #0]
}
 8005f56:	bd70      	pop	{r4, r5, r6, pc}
      huart->TxISR = UART_TxISR_8BIT;
 8005f58:	4a01      	ldr	r2, [pc, #4]	; (8005f60 <HAL_UART_Transmit_IT+0x78>)
 8005f5a:	e7f4      	b.n	8005f46 <HAL_UART_Transmit_IT+0x5e>
 8005f5c:	08005e71 	.word	0x08005e71
 8005f60:	08005eaf 	.word	0x08005eaf

08005f64 <HAL_UART_Receive_IT>:
{
 8005f64:	b570      	push	{r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8005f66:	6f84      	ldr	r4, [r0, #120]	; 0x78
{
 8005f68:	0003      	movs	r3, r0
    return HAL_BUSY;
 8005f6a:	2002      	movs	r0, #2
  if (huart->RxState == HAL_UART_STATE_READY)
 8005f6c:	2c20      	cmp	r4, #32
 8005f6e:	d141      	bne.n	8005ff4 <HAL_UART_Receive_IT+0x90>
      return HAL_ERROR;
 8005f70:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 8005f72:	2900      	cmp	r1, #0
 8005f74:	d03e      	beq.n	8005ff4 <HAL_UART_Receive_IT+0x90>
 8005f76:	2a00      	cmp	r2, #0
 8005f78:	d03c      	beq.n	8005ff4 <HAL_UART_Receive_IT+0x90>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f7a:	2580      	movs	r5, #128	; 0x80
 8005f7c:	689c      	ldr	r4, [r3, #8]
 8005f7e:	016d      	lsls	r5, r5, #5
 8005f80:	42ac      	cmp	r4, r5
 8005f82:	d104      	bne.n	8005f8e <HAL_UART_Receive_IT+0x2a>
 8005f84:	691d      	ldr	r5, [r3, #16]
 8005f86:	2d00      	cmp	r5, #0
 8005f88:	d101      	bne.n	8005f8e <HAL_UART_Receive_IT+0x2a>
      if ((((uint32_t)pData) & 1) != 0)
 8005f8a:	4201      	tst	r1, r0
 8005f8c:	d132      	bne.n	8005ff4 <HAL_UART_Receive_IT+0x90>
    __HAL_LOCK(huart);
 8005f8e:	001d      	movs	r5, r3
 8005f90:	3570      	adds	r5, #112	; 0x70
 8005f92:	782e      	ldrb	r6, [r5, #0]
    return HAL_BUSY;
 8005f94:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 8005f96:	2e01      	cmp	r6, #1
 8005f98:	d02c      	beq.n	8005ff4 <HAL_UART_Receive_IT+0x90>
 8005f9a:	3801      	subs	r0, #1
 8005f9c:	7028      	strb	r0, [r5, #0]
    huart->pRxBuffPtr  = pData;
 8005f9e:	6559      	str	r1, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8005fa0:	0019      	movs	r1, r3
 8005fa2:	3158      	adds	r1, #88	; 0x58
 8005fa4:	800a      	strh	r2, [r1, #0]
    huart->RxXferCount = Size;
 8005fa6:	804a      	strh	r2, [r1, #2]
    UART_MASK_COMPUTATION(huart);
 8005fa8:	2080      	movs	r0, #128	; 0x80
    huart->RxISR       = NULL;
 8005faa:	2100      	movs	r1, #0
 8005fac:	001a      	movs	r2, r3
 8005fae:	6619      	str	r1, [r3, #96]	; 0x60
    UART_MASK_COMPUTATION(huart);
 8005fb0:	0140      	lsls	r0, r0, #5
 8005fb2:	325c      	adds	r2, #92	; 0x5c
 8005fb4:	4284      	cmp	r4, r0
 8005fb6:	d120      	bne.n	8005ffa <HAL_UART_Receive_IT+0x96>
 8005fb8:	6919      	ldr	r1, [r3, #16]
 8005fba:	2900      	cmp	r1, #0
 8005fbc:	d11b      	bne.n	8005ff6 <HAL_UART_Receive_IT+0x92>
 8005fbe:	4918      	ldr	r1, [pc, #96]	; (8006020 <HAL_UART_Receive_IT+0xbc>)
 8005fc0:	8011      	strh	r1, [r2, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fc2:	2200      	movs	r2, #0
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fc4:	2101      	movs	r1, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fc6:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005fc8:	3222      	adds	r2, #34	; 0x22
 8005fca:	679a      	str	r2, [r3, #120]	; 0x78
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fcc:	681a      	ldr	r2, [r3, #0]
 8005fce:	6890      	ldr	r0, [r2, #8]
 8005fd0:	4301      	orrs	r1, r0
 8005fd2:	6091      	str	r1, [r2, #8]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005fd4:	2180      	movs	r1, #128	; 0x80
 8005fd6:	0149      	lsls	r1, r1, #5
 8005fd8:	428c      	cmp	r4, r1
 8005fda:	d11e      	bne.n	800601a <HAL_UART_Receive_IT+0xb6>
 8005fdc:	6919      	ldr	r1, [r3, #16]
 8005fde:	2900      	cmp	r1, #0
 8005fe0:	d11b      	bne.n	800601a <HAL_UART_Receive_IT+0xb6>
      huart->RxISR = UART_RxISR_16BIT;
 8005fe2:	4910      	ldr	r1, [pc, #64]	; (8006024 <HAL_UART_Receive_IT+0xc0>)
      huart->RxISR = UART_RxISR_8BIT;
 8005fe4:	6619      	str	r1, [r3, #96]	; 0x60
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005fe6:	2390      	movs	r3, #144	; 0x90
    __HAL_UNLOCK(huart);
 8005fe8:	2000      	movs	r0, #0
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005fea:	6811      	ldr	r1, [r2, #0]
 8005fec:	005b      	lsls	r3, r3, #1
 8005fee:	430b      	orrs	r3, r1
    __HAL_UNLOCK(huart);
 8005ff0:	7028      	strb	r0, [r5, #0]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005ff2:	6013      	str	r3, [r2, #0]
}
 8005ff4:	bd70      	pop	{r4, r5, r6, pc}
    UART_MASK_COMPUTATION(huart);
 8005ff6:	21ff      	movs	r1, #255	; 0xff
 8005ff8:	e7e2      	b.n	8005fc0 <HAL_UART_Receive_IT+0x5c>
 8005ffa:	2c00      	cmp	r4, #0
 8005ffc:	d104      	bne.n	8006008 <HAL_UART_Receive_IT+0xa4>
 8005ffe:	6919      	ldr	r1, [r3, #16]
 8006000:	2900      	cmp	r1, #0
 8006002:	d0f8      	beq.n	8005ff6 <HAL_UART_Receive_IT+0x92>
 8006004:	217f      	movs	r1, #127	; 0x7f
 8006006:	e7db      	b.n	8005fc0 <HAL_UART_Receive_IT+0x5c>
 8006008:	2080      	movs	r0, #128	; 0x80
 800600a:	0540      	lsls	r0, r0, #21
 800600c:	4284      	cmp	r4, r0
 800600e:	d1d7      	bne.n	8005fc0 <HAL_UART_Receive_IT+0x5c>
 8006010:	6919      	ldr	r1, [r3, #16]
 8006012:	2900      	cmp	r1, #0
 8006014:	d0f6      	beq.n	8006004 <HAL_UART_Receive_IT+0xa0>
 8006016:	213f      	movs	r1, #63	; 0x3f
 8006018:	e7d2      	b.n	8005fc0 <HAL_UART_Receive_IT+0x5c>
      huart->RxISR = UART_RxISR_8BIT;
 800601a:	4903      	ldr	r1, [pc, #12]	; (8006028 <HAL_UART_Receive_IT+0xc4>)
 800601c:	e7e2      	b.n	8005fe4 <HAL_UART_Receive_IT+0x80>
 800601e:	46c0      	nop			; (mov r8, r8)
 8006020:	000001ff 	.word	0x000001ff
 8006024:	08006205 	.word	0x08006205
 8006028:	080061a5 	.word	0x080061a5

0800602c <HAL_UART_Transmit_DMA>:
{
 800602c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800602e:	0013      	movs	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8006030:	6f42      	ldr	r2, [r0, #116]	; 0x74
{
 8006032:	0004      	movs	r4, r0
    return HAL_BUSY;
 8006034:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 8006036:	2a20      	cmp	r2, #32
 8006038:	d137      	bne.n	80060aa <HAL_UART_Transmit_DMA+0x7e>
      return HAL_ERROR;
 800603a:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 800603c:	2900      	cmp	r1, #0
 800603e:	d034      	beq.n	80060aa <HAL_UART_Transmit_DMA+0x7e>
 8006040:	2b00      	cmp	r3, #0
 8006042:	d032      	beq.n	80060aa <HAL_UART_Transmit_DMA+0x7e>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006044:	2280      	movs	r2, #128	; 0x80
 8006046:	68a5      	ldr	r5, [r4, #8]
 8006048:	0152      	lsls	r2, r2, #5
 800604a:	4295      	cmp	r5, r2
 800604c:	d104      	bne.n	8006058 <HAL_UART_Transmit_DMA+0x2c>
 800604e:	6922      	ldr	r2, [r4, #16]
 8006050:	2a00      	cmp	r2, #0
 8006052:	d101      	bne.n	8006058 <HAL_UART_Transmit_DMA+0x2c>
      if ((((uint32_t)pData) & 1) != 0)
 8006054:	4201      	tst	r1, r0
 8006056:	d128      	bne.n	80060aa <HAL_UART_Transmit_DMA+0x7e>
    __HAL_LOCK(huart);
 8006058:	0026      	movs	r6, r4
 800605a:	3670      	adds	r6, #112	; 0x70
 800605c:	7832      	ldrb	r2, [r6, #0]
    return HAL_BUSY;
 800605e:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 8006060:	2a01      	cmp	r2, #1
 8006062:	d022      	beq.n	80060aa <HAL_UART_Transmit_DMA+0x7e>
    huart->TxXferSize  = Size;
 8006064:	0022      	movs	r2, r4
    __HAL_LOCK(huart);
 8006066:	2501      	movs	r5, #1
    huart->TxXferSize  = Size;
 8006068:	3250      	adds	r2, #80	; 0x50
    __HAL_LOCK(huart);
 800606a:	7035      	strb	r5, [r6, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800606c:	2700      	movs	r7, #0
    huart->pTxBuffPtr  = pData;
 800606e:	64e1      	str	r1, [r4, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8006070:	8013      	strh	r3, [r2, #0]
    huart->TxXferCount = Size;
 8006072:	8053      	strh	r3, [r2, #2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006074:	2221      	movs	r2, #33	; 0x21
    if (huart->hdmatx != NULL)
 8006076:	6ea0      	ldr	r0, [r4, #104]	; 0x68
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006078:	67e7      	str	r7, [r4, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800607a:	6762      	str	r2, [r4, #116]	; 0x74
    if (huart->hdmatx != NULL)
 800607c:	42b8      	cmp	r0, r7
 800607e:	d015      	beq.n	80060ac <HAL_UART_Transmit_DMA+0x80>
 8006080:	6822      	ldr	r2, [r4, #0]
      huart->hdmatx->XferAbortCallback = NULL;
 8006082:	6387      	str	r7, [r0, #56]	; 0x38
 8006084:	9201      	str	r2, [sp, #4]
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006086:	4a0e      	ldr	r2, [pc, #56]	; (80060c0 <HAL_UART_Transmit_DMA+0x94>)
 8006088:	62c2      	str	r2, [r0, #44]	; 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800608a:	4a0e      	ldr	r2, [pc, #56]	; (80060c4 <HAL_UART_Transmit_DMA+0x98>)
 800608c:	6302      	str	r2, [r0, #48]	; 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800608e:	4a0e      	ldr	r2, [pc, #56]	; (80060c8 <HAL_UART_Transmit_DMA+0x9c>)
 8006090:	6342      	str	r2, [r0, #52]	; 0x34
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8006092:	9a01      	ldr	r2, [sp, #4]
 8006094:	3228      	adds	r2, #40	; 0x28
 8006096:	f7fe fb65 	bl	8004764 <HAL_DMA_Start_IT>
 800609a:	42b8      	cmp	r0, r7
 800609c:	d006      	beq.n	80060ac <HAL_UART_Transmit_DMA+0x80>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800609e:	2310      	movs	r3, #16
        return HAL_ERROR;
 80060a0:	0028      	movs	r0, r5
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80060a2:	67e3      	str	r3, [r4, #124]	; 0x7c
        huart->gState = HAL_UART_STATE_READY;
 80060a4:	18db      	adds	r3, r3, r3
        __HAL_UNLOCK(huart);
 80060a6:	7037      	strb	r7, [r6, #0]
        huart->gState = HAL_UART_STATE_READY;
 80060a8:	6763      	str	r3, [r4, #116]	; 0x74
}
 80060aa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80060ac:	2240      	movs	r2, #64	; 0x40
    __HAL_UNLOCK(huart);
 80060ae:	2000      	movs	r0, #0
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80060b0:	6823      	ldr	r3, [r4, #0]
 80060b2:	621a      	str	r2, [r3, #32]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80060b4:	6899      	ldr	r1, [r3, #8]
 80060b6:	1892      	adds	r2, r2, r2
 80060b8:	430a      	orrs	r2, r1
    __HAL_UNLOCK(huart);
 80060ba:	7030      	strb	r0, [r6, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80060bc:	609a      	str	r2, [r3, #8]
    return HAL_OK;
 80060be:	e7f4      	b.n	80060aa <HAL_UART_Transmit_DMA+0x7e>
 80060c0:	08006169 	.word	0x08006169
 80060c4:	0800619b 	.word	0x0800619b
 80060c8:	08006263 	.word	0x08006263

080060cc <HAL_UART_Abort>:
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 80060cc:	6803      	ldr	r3, [r0, #0]
 80060ce:	4925      	ldr	r1, [pc, #148]	; (8006164 <HAL_UART_Abort+0x98>)
 80060d0:	681a      	ldr	r2, [r3, #0]
{
 80060d2:	b510      	push	{r4, lr}
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 80060d4:	400a      	ands	r2, r1
 80060d6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060d8:	689a      	ldr	r2, [r3, #8]
 80060da:	31e3      	adds	r1, #227	; 0xe3
 80060dc:	31ff      	adds	r1, #255	; 0xff
 80060de:	438a      	bics	r2, r1
 80060e0:	609a      	str	r2, [r3, #8]
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80060e2:	689a      	ldr	r2, [r3, #8]
 80060e4:	317f      	adds	r1, #127	; 0x7f
{
 80060e6:	0004      	movs	r4, r0
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80060e8:	420a      	tst	r2, r1
 80060ea:	d014      	beq.n	8006116 <HAL_UART_Abort+0x4a>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80060ec:	689a      	ldr	r2, [r3, #8]
    if (huart->hdmatx != NULL)
 80060ee:	6e80      	ldr	r0, [r0, #104]	; 0x68
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80060f0:	438a      	bics	r2, r1
 80060f2:	609a      	str	r2, [r3, #8]
    if (huart->hdmatx != NULL)
 80060f4:	2800      	cmp	r0, #0
 80060f6:	d00e      	beq.n	8006116 <HAL_UART_Abort+0x4a>
      huart->hdmatx->XferAbortCallback = NULL;
 80060f8:	2300      	movs	r3, #0
 80060fa:	6383      	str	r3, [r0, #56]	; 0x38
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 80060fc:	f7fe fb72 	bl	80047e4 <HAL_DMA_Abort>
 8006100:	2800      	cmp	r0, #0
 8006102:	d008      	beq.n	8006116 <HAL_UART_Abort+0x4a>
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8006104:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8006106:	f7fe fbfd 	bl	8004904 <HAL_DMA_GetError>
 800610a:	2820      	cmp	r0, #32
 800610c:	d103      	bne.n	8006116 <HAL_UART_Abort+0x4a>
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800610e:	2310      	movs	r3, #16
          return HAL_TIMEOUT;
 8006110:	381d      	subs	r0, #29
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006112:	67e3      	str	r3, [r4, #124]	; 0x7c
}
 8006114:	bd10      	pop	{r4, pc}
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006116:	2140      	movs	r1, #64	; 0x40
 8006118:	6823      	ldr	r3, [r4, #0]
 800611a:	689a      	ldr	r2, [r3, #8]
 800611c:	420a      	tst	r2, r1
 800611e:	d010      	beq.n	8006142 <HAL_UART_Abort+0x76>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006120:	689a      	ldr	r2, [r3, #8]
    if (huart->hdmarx != NULL)
 8006122:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006124:	438a      	bics	r2, r1
 8006126:	609a      	str	r2, [r3, #8]
    if (huart->hdmarx != NULL)
 8006128:	2800      	cmp	r0, #0
 800612a:	d00a      	beq.n	8006142 <HAL_UART_Abort+0x76>
      huart->hdmarx->XferAbortCallback = NULL;
 800612c:	2300      	movs	r3, #0
 800612e:	6383      	str	r3, [r0, #56]	; 0x38
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8006130:	f7fe fb58 	bl	80047e4 <HAL_DMA_Abort>
 8006134:	2800      	cmp	r0, #0
 8006136:	d004      	beq.n	8006142 <HAL_UART_Abort+0x76>
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8006138:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800613a:	f7fe fbe3 	bl	8004904 <HAL_DMA_GetError>
 800613e:	2820      	cmp	r0, #32
 8006140:	d0e5      	beq.n	800610e <HAL_UART_Abort+0x42>
  huart->TxXferCount = 0U;
 8006142:	0023      	movs	r3, r4
 8006144:	2000      	movs	r0, #0
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8006146:	220f      	movs	r2, #15
  huart->TxXferCount = 0U;
 8006148:	3352      	adds	r3, #82	; 0x52
 800614a:	8018      	strh	r0, [r3, #0]
  huart->RxXferCount = 0U;
 800614c:	8118      	strh	r0, [r3, #8]
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800614e:	6823      	ldr	r3, [r4, #0]
 8006150:	621a      	str	r2, [r3, #32]
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006152:	6999      	ldr	r1, [r3, #24]
 8006154:	3a07      	subs	r2, #7
 8006156:	430a      	orrs	r2, r1
 8006158:	619a      	str	r2, [r3, #24]
  huart->gState  = HAL_UART_STATE_READY;
 800615a:	2320      	movs	r3, #32
 800615c:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800615e:	67a3      	str	r3, [r4, #120]	; 0x78
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006160:	67e0      	str	r0, [r4, #124]	; 0x7c
  return HAL_OK;
 8006162:	e7d7      	b.n	8006114 <HAL_UART_Abort+0x48>
 8006164:	fffffe1f 	.word	0xfffffe1f

08006168 <UART_DMATransmitCplt>:
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006168:	2120      	movs	r1, #32
 800616a:	6803      	ldr	r3, [r0, #0]
{
 800616c:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800616e:	681b      	ldr	r3, [r3, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006170:	6a82      	ldr	r2, [r0, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006172:	400b      	ands	r3, r1
 8006174:	d10c      	bne.n	8006190 <UART_DMATransmitCplt+0x28>
    huart->TxXferCount = 0U;
 8006176:	0011      	movs	r1, r2
 8006178:	3152      	adds	r1, #82	; 0x52
 800617a:	800b      	strh	r3, [r1, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800617c:	2180      	movs	r1, #128	; 0x80
 800617e:	6813      	ldr	r3, [r2, #0]
 8006180:	689a      	ldr	r2, [r3, #8]
 8006182:	438a      	bics	r2, r1
 8006184:	609a      	str	r2, [r3, #8]
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006186:	2240      	movs	r2, #64	; 0x40
 8006188:	6819      	ldr	r1, [r3, #0]
 800618a:	430a      	orrs	r2, r1
 800618c:	601a      	str	r2, [r3, #0]
}
 800618e:	bd10      	pop	{r4, pc}
    HAL_UART_TxCpltCallback(huart);
 8006190:	0010      	movs	r0, r2
 8006192:	f008 fb2d 	bl	800e7f0 <HAL_UART_TxCpltCallback>
}
 8006196:	e7fa      	b.n	800618e <UART_DMATransmitCplt+0x26>

08006198 <HAL_UART_TxHalfCpltCallback>:
 8006198:	4770      	bx	lr

0800619a <UART_DMATxHalfCplt>:
{
 800619a:	b510      	push	{r4, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 800619c:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800619e:	f7ff fffb 	bl	8006198 <HAL_UART_TxHalfCpltCallback>
}
 80061a2:	bd10      	pop	{r4, pc}

080061a4 <UART_RxISR_8BIT>:
{
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80061a4:	6f82      	ldr	r2, [r0, #120]	; 0x78
{
 80061a6:	b510      	push	{r4, lr}
 80061a8:	6803      	ldr	r3, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80061aa:	2a22      	cmp	r2, #34	; 0x22
 80061ac:	d123      	bne.n	80061f6 <UART_RxISR_8BIT+0x52>
  uint16_t uhMask = huart->Mask;
 80061ae:	0002      	movs	r2, r0
 80061b0:	325c      	adds	r2, #92	; 0x5c
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80061b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80061b4:	8812      	ldrh	r2, [r2, #0]
 80061b6:	4013      	ands	r3, r2
 80061b8:	6d42      	ldr	r2, [r0, #84]	; 0x54
 80061ba:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
    huart->RxXferCount--;
 80061bc:	0002      	movs	r2, r0
    huart->pRxBuffPtr++;
 80061be:	6d43      	ldr	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 80061c0:	325a      	adds	r2, #90	; 0x5a
    huart->pRxBuffPtr++;
 80061c2:	3301      	adds	r3, #1
 80061c4:	6543      	str	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 80061c6:	8813      	ldrh	r3, [r2, #0]
 80061c8:	3b01      	subs	r3, #1
 80061ca:	b29b      	uxth	r3, r3
 80061cc:	8013      	strh	r3, [r2, #0]

    if (huart->RxXferCount == 0U)
 80061ce:	8813      	ldrh	r3, [r2, #0]
 80061d0:	b29b      	uxth	r3, r3
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d10e      	bne.n	80061f4 <UART_RxISR_8BIT+0x50>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80061d6:	6802      	ldr	r2, [r0, #0]
 80061d8:	4c09      	ldr	r4, [pc, #36]	; (8006200 <UART_RxISR_8BIT+0x5c>)
 80061da:	6811      	ldr	r1, [r2, #0]
 80061dc:	4021      	ands	r1, r4
 80061de:	6011      	str	r1, [r2, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061e0:	6891      	ldr	r1, [r2, #8]
 80061e2:	3423      	adds	r4, #35	; 0x23
 80061e4:	34ff      	adds	r4, #255	; 0xff
 80061e6:	43a1      	bics	r1, r4
 80061e8:	6091      	str	r1, [r2, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80061ea:	2220      	movs	r2, #32

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80061ec:	6603      	str	r3, [r0, #96]	; 0x60
      huart->RxState = HAL_UART_STATE_READY;
 80061ee:	6782      	str	r2, [r0, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80061f0:	f007 fc90 	bl	800db14 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80061f4:	bd10      	pop	{r4, pc}
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80061f6:	2208      	movs	r2, #8
 80061f8:	6999      	ldr	r1, [r3, #24]
 80061fa:	430a      	orrs	r2, r1
 80061fc:	619a      	str	r2, [r3, #24]
}
 80061fe:	e7f9      	b.n	80061f4 <UART_RxISR_8BIT+0x50>
 8006200:	fffffedf 	.word	0xfffffedf

08006204 <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006204:	6f82      	ldr	r2, [r0, #120]	; 0x78
{
 8006206:	b510      	push	{r4, lr}
 8006208:	6803      	ldr	r3, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800620a:	2a22      	cmp	r2, #34	; 0x22
 800620c:	d121      	bne.n	8006252 <UART_RxISR_16BIT+0x4e>
  uint16_t uhMask = huart->Mask;
 800620e:	0004      	movs	r4, r0
 8006210:	345c      	adds	r4, #92	; 0x5c
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006212:	6a59      	ldr	r1, [r3, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
    *tmp = (uint16_t)(uhdata & uhMask);
 8006214:	8824      	ldrh	r4, [r4, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006216:	6d42      	ldr	r2, [r0, #84]	; 0x54
    *tmp = (uint16_t)(uhdata & uhMask);
 8006218:	4021      	ands	r1, r4
 800621a:	8011      	strh	r1, [r2, #0]
    huart->pRxBuffPtr += 2U;
    huart->RxXferCount--;
 800621c:	0001      	movs	r1, r0
    huart->pRxBuffPtr += 2U;
 800621e:	3202      	adds	r2, #2
 8006220:	6542      	str	r2, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8006222:	315a      	adds	r1, #90	; 0x5a
 8006224:	880a      	ldrh	r2, [r1, #0]
 8006226:	3a01      	subs	r2, #1
 8006228:	b292      	uxth	r2, r2
 800622a:	800a      	strh	r2, [r1, #0]

    if (huart->RxXferCount == 0U)
 800622c:	880a      	ldrh	r2, [r1, #0]
 800622e:	b292      	uxth	r2, r2
 8006230:	2a00      	cmp	r2, #0
 8006232:	d10d      	bne.n	8006250 <UART_RxISR_16BIT+0x4c>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006234:	6819      	ldr	r1, [r3, #0]
 8006236:	4c09      	ldr	r4, [pc, #36]	; (800625c <UART_RxISR_16BIT+0x58>)
 8006238:	4021      	ands	r1, r4
 800623a:	6019      	str	r1, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800623c:	6899      	ldr	r1, [r3, #8]
 800623e:	3423      	adds	r4, #35	; 0x23
 8006240:	34ff      	adds	r4, #255	; 0xff
 8006242:	43a1      	bics	r1, r4
 8006244:	6099      	str	r1, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006246:	2320      	movs	r3, #32

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006248:	6602      	str	r2, [r0, #96]	; 0x60
      huart->RxState = HAL_UART_STATE_READY;
 800624a:	6783      	str	r3, [r0, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800624c:	f007 fc62 	bl	800db14 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006250:	bd10      	pop	{r4, pc}
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006252:	2208      	movs	r2, #8
 8006254:	6999      	ldr	r1, [r3, #24]
 8006256:	430a      	orrs	r2, r1
 8006258:	619a      	str	r2, [r3, #24]
}
 800625a:	e7f9      	b.n	8006250 <UART_RxISR_16BIT+0x4c>
 800625c:	fffffedf 	.word	0xfffffedf

08006260 <HAL_UART_ErrorCallback>:
 8006260:	4770      	bx	lr

08006262 <UART_DMAError>:
{
 8006262:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006264:	6a84      	ldr	r4, [r0, #40]	; 0x28
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006266:	6823      	ldr	r3, [r4, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006268:	6f62      	ldr	r2, [r4, #116]	; 0x74
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800626a:	6fa1      	ldr	r1, [r4, #120]	; 0x78
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800626c:	6898      	ldr	r0, [r3, #8]
 800626e:	0600      	lsls	r0, r0, #24
 8006270:	d50b      	bpl.n	800628a <UART_DMAError+0x28>
 8006272:	2a21      	cmp	r2, #33	; 0x21
 8006274:	d109      	bne.n	800628a <UART_DMAError+0x28>
    huart->TxXferCount = 0U;
 8006276:	0022      	movs	r2, r4
 8006278:	2000      	movs	r0, #0
 800627a:	3252      	adds	r2, #82	; 0x52
 800627c:	8010      	strh	r0, [r2, #0]
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800627e:	681a      	ldr	r2, [r3, #0]
 8006280:	30c0      	adds	r0, #192	; 0xc0
 8006282:	4382      	bics	r2, r0
 8006284:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8006286:	2220      	movs	r2, #32
 8006288:	6762      	str	r2, [r4, #116]	; 0x74
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800628a:	689b      	ldr	r3, [r3, #8]
 800628c:	065b      	lsls	r3, r3, #25
 800628e:	d508      	bpl.n	80062a2 <UART_DMAError+0x40>
 8006290:	2922      	cmp	r1, #34	; 0x22
 8006292:	d106      	bne.n	80062a2 <UART_DMAError+0x40>
    huart->RxXferCount = 0U;
 8006294:	0023      	movs	r3, r4
 8006296:	2200      	movs	r2, #0
 8006298:	335a      	adds	r3, #90	; 0x5a
 800629a:	801a      	strh	r2, [r3, #0]
    UART_EndRxTransfer(huart);
 800629c:	0020      	movs	r0, r4
 800629e:	f7ff fdd5 	bl	8005e4c <UART_EndRxTransfer>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80062a2:	2310      	movs	r3, #16
 80062a4:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
  HAL_UART_ErrorCallback(huart);
 80062a6:	0020      	movs	r0, r4
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80062a8:	4313      	orrs	r3, r2
 80062aa:	67e3      	str	r3, [r4, #124]	; 0x7c
  HAL_UART_ErrorCallback(huart);
 80062ac:	f7ff ffd8 	bl	8006260 <HAL_UART_ErrorCallback>
}
 80062b0:	bd10      	pop	{r4, pc}
	...

080062b4 <HAL_UART_IRQHandler>:
{
 80062b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80062b6:	6803      	ldr	r3, [r0, #0]
{
 80062b8:	0004      	movs	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80062ba:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80062bc:	6818      	ldr	r0, [r3, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80062be:	689e      	ldr	r6, [r3, #8]
  if (errorflags == 0U)
 80062c0:	0711      	lsls	r1, r2, #28
 80062c2:	d10a      	bne.n	80062da <HAL_UART_IRQHandler+0x26>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80062c4:	2120      	movs	r1, #32
 80062c6:	420a      	tst	r2, r1
 80062c8:	d100      	bne.n	80062cc <HAL_UART_IRQHandler+0x18>
 80062ca:	e06a      	b.n	80063a2 <HAL_UART_IRQHandler+0xee>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80062cc:	4208      	tst	r0, r1
 80062ce:	d068      	beq.n	80063a2 <HAL_UART_IRQHandler+0xee>
      if (huart->RxISR != NULL)
 80062d0:	6e23      	ldr	r3, [r4, #96]	; 0x60
      huart->TxISR(huart);
 80062d2:	0020      	movs	r0, r4
    if (huart->TxISR != NULL)
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d15a      	bne.n	800638e <HAL_UART_IRQHandler+0xda>
 80062d8:	e05a      	b.n	8006390 <HAL_UART_IRQHandler+0xdc>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80062da:	2101      	movs	r1, #1
 80062dc:	0035      	movs	r5, r6
 80062de:	400d      	ands	r5, r1
 80062e0:	d103      	bne.n	80062ea <HAL_UART_IRQHandler+0x36>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 80062e2:	2790      	movs	r7, #144	; 0x90
 80062e4:	007f      	lsls	r7, r7, #1
 80062e6:	4238      	tst	r0, r7
 80062e8:	d05b      	beq.n	80063a2 <HAL_UART_IRQHandler+0xee>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80062ea:	420a      	tst	r2, r1
 80062ec:	d005      	beq.n	80062fa <HAL_UART_IRQHandler+0x46>
 80062ee:	05c6      	lsls	r6, r0, #23
 80062f0:	d503      	bpl.n	80062fa <HAL_UART_IRQHandler+0x46>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80062f2:	6219      	str	r1, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80062f4:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
 80062f6:	4331      	orrs	r1, r6
 80062f8:	67e1      	str	r1, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80062fa:	2102      	movs	r1, #2
 80062fc:	420a      	tst	r2, r1
 80062fe:	d006      	beq.n	800630e <HAL_UART_IRQHandler+0x5a>
 8006300:	2d00      	cmp	r5, #0
 8006302:	d004      	beq.n	800630e <HAL_UART_IRQHandler+0x5a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006304:	6219      	str	r1, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006306:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
 8006308:	1849      	adds	r1, r1, r1
 800630a:	4331      	orrs	r1, r6
 800630c:	67e1      	str	r1, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800630e:	2104      	movs	r1, #4
 8006310:	420a      	tst	r2, r1
 8006312:	d006      	beq.n	8006322 <HAL_UART_IRQHandler+0x6e>
 8006314:	2d00      	cmp	r5, #0
 8006316:	d004      	beq.n	8006322 <HAL_UART_IRQHandler+0x6e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006318:	6219      	str	r1, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800631a:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
 800631c:	3902      	subs	r1, #2
 800631e:	4331      	orrs	r1, r6
 8006320:	67e1      	str	r1, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006322:	0711      	lsls	r1, r2, #28
 8006324:	d508      	bpl.n	8006338 <HAL_UART_IRQHandler+0x84>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006326:	0681      	lsls	r1, r0, #26
 8006328:	d401      	bmi.n	800632e <HAL_UART_IRQHandler+0x7a>
 800632a:	2d00      	cmp	r5, #0
 800632c:	d004      	beq.n	8006338 <HAL_UART_IRQHandler+0x84>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800632e:	2108      	movs	r1, #8
 8006330:	6219      	str	r1, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006332:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8006334:	4319      	orrs	r1, r3
 8006336:	67e1      	str	r1, [r4, #124]	; 0x7c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006338:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800633a:	2b00      	cmp	r3, #0
 800633c:	d028      	beq.n	8006390 <HAL_UART_IRQHandler+0xdc>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800633e:	2320      	movs	r3, #32
 8006340:	421a      	tst	r2, r3
 8006342:	d006      	beq.n	8006352 <HAL_UART_IRQHandler+0x9e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006344:	4218      	tst	r0, r3
 8006346:	d004      	beq.n	8006352 <HAL_UART_IRQHandler+0x9e>
        if (huart->RxISR != NULL)
 8006348:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800634a:	2b00      	cmp	r3, #0
 800634c:	d001      	beq.n	8006352 <HAL_UART_IRQHandler+0x9e>
          huart->RxISR(huart);
 800634e:	0020      	movs	r0, r4
 8006350:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006352:	6823      	ldr	r3, [r4, #0]
      errorcode = huart->ErrorCode;
 8006354:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006356:	689b      	ldr	r3, [r3, #8]
        UART_EndRxTransfer(huart);
 8006358:	0020      	movs	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800635a:	065b      	lsls	r3, r3, #25
 800635c:	d402      	bmi.n	8006364 <HAL_UART_IRQHandler+0xb0>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 800635e:	2308      	movs	r3, #8
 8006360:	401d      	ands	r5, r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006362:	d01a      	beq.n	800639a <HAL_UART_IRQHandler+0xe6>
        UART_EndRxTransfer(huart);
 8006364:	f7ff fd72 	bl	8005e4c <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006368:	2140      	movs	r1, #64	; 0x40
 800636a:	6823      	ldr	r3, [r4, #0]
 800636c:	689a      	ldr	r2, [r3, #8]
 800636e:	420a      	tst	r2, r1
 8006370:	d00f      	beq.n	8006392 <HAL_UART_IRQHandler+0xde>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006372:	689a      	ldr	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8006374:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006376:	438a      	bics	r2, r1
 8006378:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 800637a:	2800      	cmp	r0, #0
 800637c:	d009      	beq.n	8006392 <HAL_UART_IRQHandler+0xde>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800637e:	4b1a      	ldr	r3, [pc, #104]	; (80063e8 <HAL_UART_IRQHandler+0x134>)
 8006380:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006382:	f7fe fa4f 	bl	8004824 <HAL_DMA_Abort_IT>
 8006386:	2800      	cmp	r0, #0
 8006388:	d002      	beq.n	8006390 <HAL_UART_IRQHandler+0xdc>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800638a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800638c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800638e:	4798      	blx	r3
}
 8006390:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            HAL_UART_ErrorCallback(huart);
 8006392:	0020      	movs	r0, r4
 8006394:	f7ff ff64 	bl	8006260 <HAL_UART_ErrorCallback>
 8006398:	e7fa      	b.n	8006390 <HAL_UART_IRQHandler+0xdc>
        HAL_UART_ErrorCallback(huart);
 800639a:	f7ff ff61 	bl	8006260 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800639e:	67e5      	str	r5, [r4, #124]	; 0x7c
 80063a0:	e7f6      	b.n	8006390 <HAL_UART_IRQHandler+0xdc>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80063a2:	2180      	movs	r1, #128	; 0x80
 80063a4:	0349      	lsls	r1, r1, #13
 80063a6:	420a      	tst	r2, r1
 80063a8:	d006      	beq.n	80063b8 <HAL_UART_IRQHandler+0x104>
 80063aa:	0275      	lsls	r5, r6, #9
 80063ac:	d504      	bpl.n	80063b8 <HAL_UART_IRQHandler+0x104>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80063ae:	6219      	str	r1, [r3, #32]
    HAL_UARTEx_WakeupCallback(huart);
 80063b0:	0020      	movs	r0, r4
 80063b2:	f000 fb3f 	bl	8006a34 <HAL_UARTEx_WakeupCallback>
    return;
 80063b6:	e7eb      	b.n	8006390 <HAL_UART_IRQHandler+0xdc>
  if (((isrflags & USART_ISR_TXE) != 0U)
 80063b8:	2180      	movs	r1, #128	; 0x80
 80063ba:	420a      	tst	r2, r1
 80063bc:	d003      	beq.n	80063c6 <HAL_UART_IRQHandler+0x112>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80063be:	4208      	tst	r0, r1
 80063c0:	d001      	beq.n	80063c6 <HAL_UART_IRQHandler+0x112>
    if (huart->TxISR != NULL)
 80063c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80063c4:	e785      	b.n	80062d2 <HAL_UART_IRQHandler+0x1e>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80063c6:	2140      	movs	r1, #64	; 0x40
 80063c8:	420a      	tst	r2, r1
 80063ca:	d0e1      	beq.n	8006390 <HAL_UART_IRQHandler+0xdc>
 80063cc:	4208      	tst	r0, r1
 80063ce:	d0df      	beq.n	8006390 <HAL_UART_IRQHandler+0xdc>
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80063d0:	681a      	ldr	r2, [r3, #0]
  HAL_UART_TxCpltCallback(huart);
 80063d2:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80063d4:	438a      	bics	r2, r1
 80063d6:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80063d8:	2320      	movs	r3, #32
 80063da:	6763      	str	r3, [r4, #116]	; 0x74
  huart->TxISR = NULL;
 80063dc:	2300      	movs	r3, #0
 80063de:	6663      	str	r3, [r4, #100]	; 0x64
  HAL_UART_TxCpltCallback(huart);
 80063e0:	f008 fa06 	bl	800e7f0 <HAL_UART_TxCpltCallback>
 80063e4:	e7d4      	b.n	8006390 <HAL_UART_IRQHandler+0xdc>
 80063e6:	46c0      	nop			; (mov r8, r8)
 80063e8:	080063ed 	.word	0x080063ed

080063ec <UART_DMAAbortOnError>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80063ec:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 80063ee:	2300      	movs	r3, #0
 80063f0:	0002      	movs	r2, r0
{
 80063f2:	b510      	push	{r4, lr}
  huart->RxXferCount = 0U;
 80063f4:	325a      	adds	r2, #90	; 0x5a
 80063f6:	8013      	strh	r3, [r2, #0]
  huart->TxXferCount = 0U;
 80063f8:	3a08      	subs	r2, #8
 80063fa:	8013      	strh	r3, [r2, #0]
  HAL_UART_ErrorCallback(huart);
 80063fc:	f7ff ff30 	bl	8006260 <HAL_UART_ErrorCallback>
}
 8006400:	bd10      	pop	{r4, pc}
	...

08006404 <UART_SetConfig>:
{
 8006404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006406:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006408:	6925      	ldr	r5, [r4, #16]
 800640a:	68a2      	ldr	r2, [r4, #8]
  if (UART_INSTANCE_LOWPOWER(huart))
 800640c:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800640e:	432a      	orrs	r2, r5
 8006410:	6965      	ldr	r5, [r4, #20]
 8006412:	69c1      	ldr	r1, [r0, #28]
 8006414:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006416:	6818      	ldr	r0, [r3, #0]
 8006418:	4d81      	ldr	r5, [pc, #516]	; (8006620 <UART_SetConfig+0x21c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800641a:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800641c:	4028      	ands	r0, r5
 800641e:	4302      	orrs	r2, r0
 8006420:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006422:	685a      	ldr	r2, [r3, #4]
 8006424:	487f      	ldr	r0, [pc, #508]	; (8006624 <UART_SetConfig+0x220>)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006426:	4d80      	ldr	r5, [pc, #512]	; (8006628 <UART_SetConfig+0x224>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006428:	4002      	ands	r2, r0
 800642a:	68e0      	ldr	r0, [r4, #12]
 800642c:	4302      	orrs	r2, r0
 800642e:	605a      	str	r2, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006430:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006432:	42ab      	cmp	r3, r5
 8006434:	d001      	beq.n	800643a <UART_SetConfig+0x36>
    tmpreg |= huart->Init.OneBitSampling;
 8006436:	6a22      	ldr	r2, [r4, #32]
 8006438:	4310      	orrs	r0, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800643a:	689a      	ldr	r2, [r3, #8]
 800643c:	4e7b      	ldr	r6, [pc, #492]	; (800662c <UART_SetConfig+0x228>)
 800643e:	4032      	ands	r2, r6
 8006440:	4302      	orrs	r2, r0
 8006442:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006444:	4a7a      	ldr	r2, [pc, #488]	; (8006630 <UART_SetConfig+0x22c>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d114      	bne.n	8006474 <UART_SetConfig+0x70>
 800644a:	2203      	movs	r2, #3
 800644c:	4b79      	ldr	r3, [pc, #484]	; (8006634 <UART_SetConfig+0x230>)
 800644e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006450:	4013      	ands	r3, r2
 8006452:	4a79      	ldr	r2, [pc, #484]	; (8006638 <UART_SetConfig+0x234>)
 8006454:	5cd0      	ldrb	r0, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006456:	2380      	movs	r3, #128	; 0x80
 8006458:	021b      	lsls	r3, r3, #8
 800645a:	4299      	cmp	r1, r3
 800645c:	d000      	beq.n	8006460 <UART_SetConfig+0x5c>
 800645e:	e09e      	b.n	800659e <UART_SetConfig+0x19a>
    switch (clocksource)
 8006460:	2808      	cmp	r0, #8
 8006462:	d900      	bls.n	8006466 <UART_SetConfig+0x62>
 8006464:	e098      	b.n	8006598 <UART_SetConfig+0x194>
 8006466:	f7f9 fe61 	bl	800012c <__gnu_thumb1_case_uqi>
 800646a:	6b63      	.short	0x6b63
 800646c:	978f976e 	.word	0x978f976e
 8006470:	9797      	.short	0x9797
 8006472:	92          	.byte	0x92
 8006473:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006474:	4a71      	ldr	r2, [pc, #452]	; (800663c <UART_SetConfig+0x238>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d107      	bne.n	800648a <UART_SetConfig+0x86>
 800647a:	220c      	movs	r2, #12
 800647c:	4b6d      	ldr	r3, [pc, #436]	; (8006634 <UART_SetConfig+0x230>)
 800647e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006480:	401a      	ands	r2, r3
 8006482:	4b6d      	ldr	r3, [pc, #436]	; (8006638 <UART_SetConfig+0x234>)
 8006484:	189b      	adds	r3, r3, r2
 8006486:	7918      	ldrb	r0, [r3, #4]
 8006488:	e7e5      	b.n	8006456 <UART_SetConfig+0x52>
 800648a:	4a6d      	ldr	r2, [pc, #436]	; (8006640 <UART_SetConfig+0x23c>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d100      	bne.n	8006492 <UART_SetConfig+0x8e>
 8006490:	e0b4      	b.n	80065fc <UART_SetConfig+0x1f8>
 8006492:	4a6c      	ldr	r2, [pc, #432]	; (8006644 <UART_SetConfig+0x240>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d100      	bne.n	800649a <UART_SetConfig+0x96>
 8006498:	e0b0      	b.n	80065fc <UART_SetConfig+0x1f8>
 800649a:	42ab      	cmp	r3, r5
 800649c:	d000      	beq.n	80064a0 <UART_SetConfig+0x9c>
 800649e:	e0b8      	b.n	8006612 <UART_SetConfig+0x20e>
 80064a0:	21c0      	movs	r1, #192	; 0xc0
 80064a2:	2080      	movs	r0, #128	; 0x80
 80064a4:	4a63      	ldr	r2, [pc, #396]	; (8006634 <UART_SetConfig+0x230>)
 80064a6:	0109      	lsls	r1, r1, #4
 80064a8:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80064aa:	00c0      	lsls	r0, r0, #3
 80064ac:	400b      	ands	r3, r1
 80064ae:	4283      	cmp	r3, r0
 80064b0:	d03b      	beq.n	800652a <UART_SetConfig+0x126>
 80064b2:	d803      	bhi.n	80064bc <UART_SetConfig+0xb8>
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d00a      	beq.n	80064ce <UART_SetConfig+0xca>
        ret = HAL_ERROR;
 80064b8:	2501      	movs	r5, #1
 80064ba:	e00d      	b.n	80064d8 <UART_SetConfig+0xd4>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80064bc:	2080      	movs	r0, #128	; 0x80
 80064be:	0100      	lsls	r0, r0, #4
 80064c0:	4283      	cmp	r3, r0
 80064c2:	d00e      	beq.n	80064e2 <UART_SetConfig+0xde>
 80064c4:	428b      	cmp	r3, r1
 80064c6:	d1f7      	bne.n	80064b8 <UART_SetConfig+0xb4>
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 80064c8:	2080      	movs	r0, #128	; 0x80
 80064ca:	0200      	lsls	r0, r0, #8
 80064cc:	e010      	b.n	80064f0 <UART_SetConfig+0xec>
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80064ce:	f7fe fe8d 	bl	80051ec <HAL_RCC_GetPCLK1Freq>
 80064d2:	2500      	movs	r5, #0
    if (lpuart_ker_ck_pres != 0U)
 80064d4:	42a8      	cmp	r0, r5
 80064d6:	d10b      	bne.n	80064f0 <UART_SetConfig+0xec>
  huart->RxISR = NULL;
 80064d8:	2300      	movs	r3, #0
}
 80064da:	0028      	movs	r0, r5
  huart->RxISR = NULL;
 80064dc:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 80064de:	6663      	str	r3, [r4, #100]	; 0x64
}
 80064e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80064e2:	6810      	ldr	r0, [r2, #0]
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80064e4:	4b58      	ldr	r3, [pc, #352]	; (8006648 <UART_SetConfig+0x244>)
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80064e6:	06c0      	lsls	r0, r0, #27
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80064e8:	17c0      	asrs	r0, r0, #31
 80064ea:	4018      	ands	r0, r3
 80064ec:	4b57      	ldr	r3, [pc, #348]	; (800664c <UART_SetConfig+0x248>)
 80064ee:	18c0      	adds	r0, r0, r3
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80064f0:	2203      	movs	r2, #3
 80064f2:	6863      	ldr	r3, [r4, #4]
 80064f4:	435a      	muls	r2, r3
 80064f6:	4282      	cmp	r2, r0
 80064f8:	d8de      	bhi.n	80064b8 <UART_SetConfig+0xb4>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80064fa:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80064fc:	4282      	cmp	r2, r0
 80064fe:	d3db      	bcc.n	80064b8 <UART_SetConfig+0xb4>
        usartdiv = (uint32_t)(UART_DIV_LPUART(lpuart_ker_ck_pres, huart->Init.BaudRate));
 8006500:	2700      	movs	r7, #0
 8006502:	0e02      	lsrs	r2, r0, #24
 8006504:	0201      	lsls	r1, r0, #8
 8006506:	085e      	lsrs	r6, r3, #1
 8006508:	1989      	adds	r1, r1, r6
 800650a:	417a      	adcs	r2, r7
 800650c:	0008      	movs	r0, r1
 800650e:	0011      	movs	r1, r2
 8006510:	001a      	movs	r2, r3
 8006512:	003b      	movs	r3, r7
 8006514:	f7f9 ffdc 	bl	80004d0 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006518:	4b4d      	ldr	r3, [pc, #308]	; (8006650 <UART_SetConfig+0x24c>)
 800651a:	18c2      	adds	r2, r0, r3
 800651c:	4b4d      	ldr	r3, [pc, #308]	; (8006654 <UART_SetConfig+0x250>)
 800651e:	429a      	cmp	r2, r3
 8006520:	d8ca      	bhi.n	80064b8 <UART_SetConfig+0xb4>
          huart->Instance->BRR = usartdiv;
 8006522:	6823      	ldr	r3, [r4, #0]
 8006524:	003d      	movs	r5, r7
 8006526:	60d8      	str	r0, [r3, #12]
 8006528:	e7d6      	b.n	80064d8 <UART_SetConfig+0xd4>
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 800652a:	f7fe fadb 	bl	8004ae4 <HAL_RCC_GetSysClockFreq>
        break;
 800652e:	e7d0      	b.n	80064d2 <UART_SetConfig+0xce>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8006530:	f7fe fe5c 	bl	80051ec <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8006534:	6863      	ldr	r3, [r4, #4]
 8006536:	0040      	lsls	r0, r0, #1
 8006538:	085b      	lsrs	r3, r3, #1
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800653a:	18c0      	adds	r0, r0, r3
 800653c:	6861      	ldr	r1, [r4, #4]
 800653e:	e00b      	b.n	8006558 <UART_SetConfig+0x154>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8006540:	f7fe fe64 	bl	800520c <HAL_RCC_GetPCLK2Freq>
 8006544:	e7f6      	b.n	8006534 <UART_SetConfig+0x130>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006546:	2510      	movs	r5, #16
 8006548:	4b3a      	ldr	r3, [pc, #232]	; (8006634 <UART_SetConfig+0x230>)
 800654a:	6861      	ldr	r1, [r4, #4]
 800654c:	681a      	ldr	r2, [r3, #0]
 800654e:	0848      	lsrs	r0, r1, #1
 8006550:	4015      	ands	r5, r2
 8006552:	d006      	beq.n	8006562 <UART_SetConfig+0x15e>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8006554:	4b40      	ldr	r3, [pc, #256]	; (8006658 <UART_SetConfig+0x254>)
 8006556:	18c0      	adds	r0, r0, r3
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8006558:	f7f9 fe06 	bl	8000168 <__udivsi3>
  HAL_StatusTypeDef ret               = HAL_OK;
 800655c:	2500      	movs	r5, #0
 800655e:	b283      	uxth	r3, r0
        break;
 8006560:	e004      	b.n	800656c <UART_SetConfig+0x168>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8006562:	4b3e      	ldr	r3, [pc, #248]	; (800665c <UART_SetConfig+0x258>)
 8006564:	18c0      	adds	r0, r0, r3
 8006566:	f7f9 fdff 	bl	8000168 <__udivsi3>
 800656a:	b283      	uxth	r3, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800656c:	0019      	movs	r1, r3
 800656e:	483c      	ldr	r0, [pc, #240]	; (8006660 <UART_SetConfig+0x25c>)
 8006570:	3910      	subs	r1, #16
 8006572:	4281      	cmp	r1, r0
 8006574:	d8a0      	bhi.n	80064b8 <UART_SetConfig+0xb4>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006576:	210f      	movs	r1, #15
 8006578:	0018      	movs	r0, r3
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800657a:	071b      	lsls	r3, r3, #28
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800657c:	4388      	bics	r0, r1
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800657e:	0f5b      	lsrs	r3, r3, #29
      huart->Instance->BRR = brrtemp;
 8006580:	6821      	ldr	r1, [r4, #0]
 8006582:	4303      	orrs	r3, r0
      huart->Instance->BRR = usartdiv;
 8006584:	60cb      	str	r3, [r1, #12]
 8006586:	e7a7      	b.n	80064d8 <UART_SetConfig+0xd4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8006588:	f7fe faac 	bl	8004ae4 <HAL_RCC_GetSysClockFreq>
 800658c:	e7d2      	b.n	8006534 <UART_SetConfig+0x130>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800658e:	6863      	ldr	r3, [r4, #4]
 8006590:	0858      	lsrs	r0, r3, #1
 8006592:	2380      	movs	r3, #128	; 0x80
 8006594:	025b      	lsls	r3, r3, #9
 8006596:	e7d0      	b.n	800653a <UART_SetConfig+0x136>
        ret = HAL_ERROR;
 8006598:	2501      	movs	r5, #1
  uint32_t usartdiv                   = 0x00000000U;
 800659a:	2300      	movs	r3, #0
 800659c:	e7e6      	b.n	800656c <UART_SetConfig+0x168>
    switch (clocksource)
 800659e:	2808      	cmp	r0, #8
 80065a0:	d83b      	bhi.n	800661a <UART_SetConfig+0x216>
 80065a2:	f7f9 fdc3 	bl	800012c <__gnu_thumb1_case_uqi>
 80065a6:	052f      	.short	0x052f
 80065a8:	3a233a08 	.word	0x3a233a08
 80065ac:	3a3a      	.short	0x3a3a
 80065ae:	26          	.byte	0x26
 80065af:	00          	.byte	0x00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80065b0:	f7fe fe2c 	bl	800520c <HAL_RCC_GetPCLK2Freq>
 80065b4:	e028      	b.n	8006608 <UART_SetConfig+0x204>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80065b6:	2510      	movs	r5, #16
 80065b8:	4b1e      	ldr	r3, [pc, #120]	; (8006634 <UART_SetConfig+0x230>)
 80065ba:	6861      	ldr	r1, [r4, #4]
 80065bc:	681a      	ldr	r2, [r3, #0]
 80065be:	0848      	lsrs	r0, r1, #1
 80065c0:	4015      	ands	r5, r2
 80065c2:	d00d      	beq.n	80065e0 <UART_SetConfig+0x1dc>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 80065c4:	4b27      	ldr	r3, [pc, #156]	; (8006664 <UART_SetConfig+0x260>)
 80065c6:	18c0      	adds	r0, r0, r3
 80065c8:	f7f9 fdce 	bl	8000168 <__udivsi3>
  HAL_StatusTypeDef ret               = HAL_OK;
 80065cc:	2500      	movs	r5, #0
 80065ce:	b283      	uxth	r3, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80065d0:	0019      	movs	r1, r3
 80065d2:	4823      	ldr	r0, [pc, #140]	; (8006660 <UART_SetConfig+0x25c>)
 80065d4:	3910      	subs	r1, #16
 80065d6:	4281      	cmp	r1, r0
 80065d8:	d900      	bls.n	80065dc <UART_SetConfig+0x1d8>
 80065da:	e76d      	b.n	80064b8 <UART_SetConfig+0xb4>
      huart->Instance->BRR = usartdiv;
 80065dc:	6821      	ldr	r1, [r4, #0]
 80065de:	e7d1      	b.n	8006584 <UART_SetConfig+0x180>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80065e0:	4b1a      	ldr	r3, [pc, #104]	; (800664c <UART_SetConfig+0x248>)
 80065e2:	18c0      	adds	r0, r0, r3
 80065e4:	f7f9 fdc0 	bl	8000168 <__udivsi3>
 80065e8:	b283      	uxth	r3, r0
 80065ea:	e7f1      	b.n	80065d0 <UART_SetConfig+0x1cc>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80065ec:	f7fe fa7a 	bl	8004ae4 <HAL_RCC_GetSysClockFreq>
 80065f0:	e00a      	b.n	8006608 <UART_SetConfig+0x204>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80065f2:	6863      	ldr	r3, [r4, #4]
 80065f4:	0858      	lsrs	r0, r3, #1
 80065f6:	2380      	movs	r3, #128	; 0x80
 80065f8:	021b      	lsls	r3, r3, #8
 80065fa:	e007      	b.n	800660c <UART_SetConfig+0x208>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80065fc:	2380      	movs	r3, #128	; 0x80
 80065fe:	021b      	lsls	r3, r3, #8
 8006600:	4299      	cmp	r1, r3
 8006602:	d095      	beq.n	8006530 <UART_SetConfig+0x12c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8006604:	f7fe fdf2 	bl	80051ec <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8006608:	6863      	ldr	r3, [r4, #4]
 800660a:	085b      	lsrs	r3, r3, #1
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800660c:	18c0      	adds	r0, r0, r3
 800660e:	6861      	ldr	r1, [r4, #4]
 8006610:	e7da      	b.n	80065c8 <UART_SetConfig+0x1c4>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006612:	2380      	movs	r3, #128	; 0x80
 8006614:	021b      	lsls	r3, r3, #8
 8006616:	4299      	cmp	r1, r3
 8006618:	d0be      	beq.n	8006598 <UART_SetConfig+0x194>
        ret = HAL_ERROR;
 800661a:	2501      	movs	r5, #1
  uint32_t usartdiv                   = 0x00000000U;
 800661c:	2300      	movs	r3, #0
 800661e:	e7d7      	b.n	80065d0 <UART_SetConfig+0x1cc>
 8006620:	efff69f3 	.word	0xefff69f3
 8006624:	ffffcfff 	.word	0xffffcfff
 8006628:	40004800 	.word	0x40004800
 800662c:	fffff4ff 	.word	0xfffff4ff
 8006630:	40013800 	.word	0x40013800
 8006634:	40021000 	.word	0x40021000
 8006638:	0800f731 	.word	0x0800f731
 800663c:	40004400 	.word	0x40004400
 8006640:	40004c00 	.word	0x40004c00
 8006644:	40005000 	.word	0x40005000
 8006648:	ff48e500 	.word	0xff48e500
 800664c:	00f42400 	.word	0x00f42400
 8006650:	fffffd00 	.word	0xfffffd00
 8006654:	000ffcff 	.word	0x000ffcff
 8006658:	007a1200 	.word	0x007a1200
 800665c:	01e84800 	.word	0x01e84800
 8006660:	0000ffef 	.word	0x0000ffef
 8006664:	003d0900 	.word	0x003d0900

08006668 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006668:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 800666a:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800666c:	07da      	lsls	r2, r3, #31
 800666e:	d506      	bpl.n	800667e <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006670:	6801      	ldr	r1, [r0, #0]
 8006672:	4c28      	ldr	r4, [pc, #160]	; (8006714 <UART_AdvFeatureConfig+0xac>)
 8006674:	684a      	ldr	r2, [r1, #4]
 8006676:	4022      	ands	r2, r4
 8006678:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800667a:	4322      	orrs	r2, r4
 800667c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800667e:	079a      	lsls	r2, r3, #30
 8006680:	d506      	bpl.n	8006690 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006682:	6801      	ldr	r1, [r0, #0]
 8006684:	4c24      	ldr	r4, [pc, #144]	; (8006718 <UART_AdvFeatureConfig+0xb0>)
 8006686:	684a      	ldr	r2, [r1, #4]
 8006688:	4022      	ands	r2, r4
 800668a:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800668c:	4322      	orrs	r2, r4
 800668e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006690:	075a      	lsls	r2, r3, #29
 8006692:	d506      	bpl.n	80066a2 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006694:	6801      	ldr	r1, [r0, #0]
 8006696:	4c21      	ldr	r4, [pc, #132]	; (800671c <UART_AdvFeatureConfig+0xb4>)
 8006698:	684a      	ldr	r2, [r1, #4]
 800669a:	4022      	ands	r2, r4
 800669c:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800669e:	4322      	orrs	r2, r4
 80066a0:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80066a2:	071a      	lsls	r2, r3, #28
 80066a4:	d506      	bpl.n	80066b4 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80066a6:	6801      	ldr	r1, [r0, #0]
 80066a8:	4c1d      	ldr	r4, [pc, #116]	; (8006720 <UART_AdvFeatureConfig+0xb8>)
 80066aa:	684a      	ldr	r2, [r1, #4]
 80066ac:	4022      	ands	r2, r4
 80066ae:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80066b0:	4322      	orrs	r2, r4
 80066b2:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80066b4:	06da      	lsls	r2, r3, #27
 80066b6:	d506      	bpl.n	80066c6 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80066b8:	6801      	ldr	r1, [r0, #0]
 80066ba:	4c1a      	ldr	r4, [pc, #104]	; (8006724 <UART_AdvFeatureConfig+0xbc>)
 80066bc:	688a      	ldr	r2, [r1, #8]
 80066be:	4022      	ands	r2, r4
 80066c0:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80066c2:	4322      	orrs	r2, r4
 80066c4:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80066c6:	069a      	lsls	r2, r3, #26
 80066c8:	d506      	bpl.n	80066d8 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80066ca:	6801      	ldr	r1, [r0, #0]
 80066cc:	4c16      	ldr	r4, [pc, #88]	; (8006728 <UART_AdvFeatureConfig+0xc0>)
 80066ce:	688a      	ldr	r2, [r1, #8]
 80066d0:	4022      	ands	r2, r4
 80066d2:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80066d4:	4322      	orrs	r2, r4
 80066d6:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80066d8:	065a      	lsls	r2, r3, #25
 80066da:	d510      	bpl.n	80066fe <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80066dc:	6801      	ldr	r1, [r0, #0]
 80066de:	4d13      	ldr	r5, [pc, #76]	; (800672c <UART_AdvFeatureConfig+0xc4>)
 80066e0:	684a      	ldr	r2, [r1, #4]
 80066e2:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80066e4:	402a      	ands	r2, r5
 80066e6:	4322      	orrs	r2, r4
 80066e8:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80066ea:	2280      	movs	r2, #128	; 0x80
 80066ec:	0352      	lsls	r2, r2, #13
 80066ee:	4294      	cmp	r4, r2
 80066f0:	d105      	bne.n	80066fe <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80066f2:	684a      	ldr	r2, [r1, #4]
 80066f4:	4c0e      	ldr	r4, [pc, #56]	; (8006730 <UART_AdvFeatureConfig+0xc8>)
 80066f6:	4022      	ands	r2, r4
 80066f8:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80066fa:	4322      	orrs	r2, r4
 80066fc:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80066fe:	061b      	lsls	r3, r3, #24
 8006700:	d506      	bpl.n	8006710 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006702:	6802      	ldr	r2, [r0, #0]
 8006704:	490b      	ldr	r1, [pc, #44]	; (8006734 <UART_AdvFeatureConfig+0xcc>)
 8006706:	6853      	ldr	r3, [r2, #4]
 8006708:	400b      	ands	r3, r1
 800670a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800670c:	430b      	orrs	r3, r1
 800670e:	6053      	str	r3, [r2, #4]
}
 8006710:	bd30      	pop	{r4, r5, pc}
 8006712:	46c0      	nop			; (mov r8, r8)
 8006714:	fffdffff 	.word	0xfffdffff
 8006718:	fffeffff 	.word	0xfffeffff
 800671c:	fffbffff 	.word	0xfffbffff
 8006720:	ffff7fff 	.word	0xffff7fff
 8006724:	ffffefff 	.word	0xffffefff
 8006728:	ffffdfff 	.word	0xffffdfff
 800672c:	ffefffff 	.word	0xffefffff
 8006730:	ff9fffff 	.word	0xff9fffff
 8006734:	fff7ffff 	.word	0xfff7ffff

08006738 <UART_WaitOnFlagUntilTimeout>:
{
 8006738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800673a:	0004      	movs	r4, r0
 800673c:	000e      	movs	r6, r1
 800673e:	0015      	movs	r5, r2
 8006740:	001f      	movs	r7, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006742:	6822      	ldr	r2, [r4, #0]
 8006744:	69d3      	ldr	r3, [r2, #28]
 8006746:	4033      	ands	r3, r6
 8006748:	1b9b      	subs	r3, r3, r6
 800674a:	4259      	negs	r1, r3
 800674c:	414b      	adcs	r3, r1
 800674e:	42ab      	cmp	r3, r5
 8006750:	d001      	beq.n	8006756 <UART_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 8006752:	2000      	movs	r0, #0
 8006754:	e01b      	b.n	800678e <UART_WaitOnFlagUntilTimeout+0x56>
    if (Timeout != HAL_MAX_DELAY)
 8006756:	9b06      	ldr	r3, [sp, #24]
 8006758:	3301      	adds	r3, #1
 800675a:	d0f3      	beq.n	8006744 <UART_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800675c:	f7fd fd10 	bl	8004180 <HAL_GetTick>
 8006760:	9b06      	ldr	r3, [sp, #24]
 8006762:	1bc0      	subs	r0, r0, r7
 8006764:	4298      	cmp	r0, r3
 8006766:	d801      	bhi.n	800676c <UART_WaitOnFlagUntilTimeout+0x34>
 8006768:	2b00      	cmp	r3, #0
 800676a:	d1ea      	bne.n	8006742 <UART_WaitOnFlagUntilTimeout+0xa>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800676c:	6823      	ldr	r3, [r4, #0]
 800676e:	4908      	ldr	r1, [pc, #32]	; (8006790 <UART_WaitOnFlagUntilTimeout+0x58>)
 8006770:	681a      	ldr	r2, [r3, #0]
        __HAL_UNLOCK(huart);
 8006772:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006774:	400a      	ands	r2, r1
 8006776:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006778:	689a      	ldr	r2, [r3, #8]
 800677a:	31a3      	adds	r1, #163	; 0xa3
 800677c:	31ff      	adds	r1, #255	; 0xff
 800677e:	438a      	bics	r2, r1
 8006780:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8006782:	2320      	movs	r3, #32
 8006784:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8006786:	67a3      	str	r3, [r4, #120]	; 0x78
        __HAL_UNLOCK(huart);
 8006788:	2300      	movs	r3, #0
 800678a:	3470      	adds	r4, #112	; 0x70
 800678c:	7023      	strb	r3, [r4, #0]
}
 800678e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006790:	fffffe5f 	.word	0xfffffe5f

08006794 <HAL_UART_Transmit>:
{
 8006794:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006796:	b087      	sub	sp, #28
 8006798:	9305      	str	r3, [sp, #20]
  if (huart->gState == HAL_UART_STATE_READY)
 800679a:	6f43      	ldr	r3, [r0, #116]	; 0x74
{
 800679c:	0004      	movs	r4, r0
 800679e:	000d      	movs	r5, r1
 80067a0:	0017      	movs	r7, r2
    return HAL_BUSY;
 80067a2:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 80067a4:	2b20      	cmp	r3, #32
 80067a6:	d149      	bne.n	800683c <HAL_UART_Transmit+0xa8>
      return  HAL_ERROR;
 80067a8:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 80067aa:	2900      	cmp	r1, #0
 80067ac:	d046      	beq.n	800683c <HAL_UART_Transmit+0xa8>
 80067ae:	2a00      	cmp	r2, #0
 80067b0:	d044      	beq.n	800683c <HAL_UART_Transmit+0xa8>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067b2:	2380      	movs	r3, #128	; 0x80
 80067b4:	68a2      	ldr	r2, [r4, #8]
 80067b6:	015b      	lsls	r3, r3, #5
 80067b8:	429a      	cmp	r2, r3
 80067ba:	d104      	bne.n	80067c6 <HAL_UART_Transmit+0x32>
 80067bc:	6923      	ldr	r3, [r4, #16]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d101      	bne.n	80067c6 <HAL_UART_Transmit+0x32>
      if ((((uint32_t)pData) & 1) != 0)
 80067c2:	4201      	tst	r1, r0
 80067c4:	d13a      	bne.n	800683c <HAL_UART_Transmit+0xa8>
    __HAL_LOCK(huart);
 80067c6:	0023      	movs	r3, r4
 80067c8:	3370      	adds	r3, #112	; 0x70
 80067ca:	781a      	ldrb	r2, [r3, #0]
    return HAL_BUSY;
 80067cc:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 80067ce:	2a01      	cmp	r2, #1
 80067d0:	d034      	beq.n	800683c <HAL_UART_Transmit+0xa8>
 80067d2:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067d4:	2600      	movs	r6, #0
    __HAL_LOCK(huart);
 80067d6:	701a      	strb	r2, [r3, #0]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80067d8:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067da:	67e6      	str	r6, [r4, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80067dc:	6763      	str	r3, [r4, #116]	; 0x74
    tickstart = HAL_GetTick();
 80067de:	f7fd fccf 	bl	8004180 <HAL_GetTick>
    huart->TxXferSize  = Size;
 80067e2:	0023      	movs	r3, r4
 80067e4:	3350      	adds	r3, #80	; 0x50
 80067e6:	801f      	strh	r7, [r3, #0]
    huart->TxXferCount = Size;
 80067e8:	3302      	adds	r3, #2
 80067ea:	9303      	str	r3, [sp, #12]
 80067ec:	801f      	strh	r7, [r3, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067ee:	2380      	movs	r3, #128	; 0x80
 80067f0:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 80067f2:	9004      	str	r0, [sp, #16]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067f4:	015b      	lsls	r3, r3, #5
 80067f6:	429a      	cmp	r2, r3
 80067f8:	d104      	bne.n	8006804 <HAL_UART_Transmit+0x70>
 80067fa:	6923      	ldr	r3, [r4, #16]
 80067fc:	42b3      	cmp	r3, r6
 80067fe:	d101      	bne.n	8006804 <HAL_UART_Transmit+0x70>
 8006800:	002e      	movs	r6, r5
      pdata8bits  = NULL;
 8006802:	001d      	movs	r5, r3
    while (huart->TxXferCount > 0U)
 8006804:	0023      	movs	r3, r4
 8006806:	3352      	adds	r3, #82	; 0x52
 8006808:	881a      	ldrh	r2, [r3, #0]
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800680a:	9b05      	ldr	r3, [sp, #20]
    while (huart->TxXferCount > 0U)
 800680c:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800680e:	9300      	str	r3, [sp, #0]
 8006810:	9b04      	ldr	r3, [sp, #16]
    while (huart->TxXferCount > 0U)
 8006812:	2a00      	cmp	r2, #0
 8006814:	d10a      	bne.n	800682c <HAL_UART_Transmit+0x98>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006816:	2140      	movs	r1, #64	; 0x40
 8006818:	0020      	movs	r0, r4
 800681a:	f7ff ff8d 	bl	8006738 <UART_WaitOnFlagUntilTimeout>
 800681e:	2800      	cmp	r0, #0
 8006820:	d10b      	bne.n	800683a <HAL_UART_Transmit+0xa6>
    huart->gState = HAL_UART_STATE_READY;
 8006822:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8006824:	3470      	adds	r4, #112	; 0x70
    huart->gState = HAL_UART_STATE_READY;
 8006826:	6063      	str	r3, [r4, #4]
    __HAL_UNLOCK(huart);
 8006828:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 800682a:	e007      	b.n	800683c <HAL_UART_Transmit+0xa8>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800682c:	2200      	movs	r2, #0
 800682e:	2180      	movs	r1, #128	; 0x80
 8006830:	0020      	movs	r0, r4
 8006832:	f7ff ff81 	bl	8006738 <UART_WaitOnFlagUntilTimeout>
 8006836:	2800      	cmp	r0, #0
 8006838:	d002      	beq.n	8006840 <HAL_UART_Transmit+0xac>
        return HAL_TIMEOUT;
 800683a:	2003      	movs	r0, #3
}
 800683c:	b007      	add	sp, #28
 800683e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006840:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8006842:	2d00      	cmp	r5, #0
 8006844:	d10b      	bne.n	800685e <HAL_UART_Transmit+0xca>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006846:	8833      	ldrh	r3, [r6, #0]
        pdata16bits++;
 8006848:	3602      	adds	r6, #2
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800684a:	05db      	lsls	r3, r3, #23
 800684c:	0ddb      	lsrs	r3, r3, #23
 800684e:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8006850:	9b03      	ldr	r3, [sp, #12]
 8006852:	9a03      	ldr	r2, [sp, #12]
 8006854:	881b      	ldrh	r3, [r3, #0]
 8006856:	3b01      	subs	r3, #1
 8006858:	b29b      	uxth	r3, r3
 800685a:	8013      	strh	r3, [r2, #0]
 800685c:	e7d2      	b.n	8006804 <HAL_UART_Transmit+0x70>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800685e:	782b      	ldrb	r3, [r5, #0]
        pdata8bits++;
 8006860:	3501      	adds	r5, #1
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006862:	6293      	str	r3, [r2, #40]	; 0x28
 8006864:	e7f4      	b.n	8006850 <HAL_UART_Transmit+0xbc>
	...

08006868 <HAL_UART_Receive>:
{
 8006868:	b5f0      	push	{r4, r5, r6, r7, lr}
 800686a:	b087      	sub	sp, #28
 800686c:	9305      	str	r3, [sp, #20]
  if (huart->RxState == HAL_UART_STATE_READY)
 800686e:	6f83      	ldr	r3, [r0, #120]	; 0x78
{
 8006870:	0004      	movs	r4, r0
 8006872:	000d      	movs	r5, r1
 8006874:	0016      	movs	r6, r2
    return HAL_BUSY;
 8006876:	2002      	movs	r0, #2
  if (huart->RxState == HAL_UART_STATE_READY)
 8006878:	2b20      	cmp	r3, #32
 800687a:	d143      	bne.n	8006904 <HAL_UART_Receive+0x9c>
      return  HAL_ERROR;
 800687c:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 800687e:	2900      	cmp	r1, #0
 8006880:	d040      	beq.n	8006904 <HAL_UART_Receive+0x9c>
 8006882:	2a00      	cmp	r2, #0
 8006884:	d03e      	beq.n	8006904 <HAL_UART_Receive+0x9c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006886:	2380      	movs	r3, #128	; 0x80
 8006888:	68a2      	ldr	r2, [r4, #8]
 800688a:	015b      	lsls	r3, r3, #5
 800688c:	429a      	cmp	r2, r3
 800688e:	d104      	bne.n	800689a <HAL_UART_Receive+0x32>
 8006890:	6923      	ldr	r3, [r4, #16]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d101      	bne.n	800689a <HAL_UART_Receive+0x32>
      if ((((uint32_t)pData) & 1) != 0)
 8006896:	4201      	tst	r1, r0
 8006898:	d134      	bne.n	8006904 <HAL_UART_Receive+0x9c>
    __HAL_LOCK(huart);
 800689a:	0023      	movs	r3, r4
 800689c:	3370      	adds	r3, #112	; 0x70
 800689e:	781a      	ldrb	r2, [r3, #0]
    return HAL_BUSY;
 80068a0:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 80068a2:	2a01      	cmp	r2, #1
 80068a4:	d02e      	beq.n	8006904 <HAL_UART_Receive+0x9c>
 80068a6:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068a8:	2700      	movs	r7, #0
    __HAL_LOCK(huart);
 80068aa:	701a      	strb	r2, [r3, #0]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80068ac:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068ae:	67e7      	str	r7, [r4, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80068b0:	67a3      	str	r3, [r4, #120]	; 0x78
    tickstart = HAL_GetTick();
 80068b2:	f7fd fc65 	bl	8004180 <HAL_GetTick>
    huart->RxXferSize  = Size;
 80068b6:	0023      	movs	r3, r4
    UART_MASK_COMPUTATION(huart);
 80068b8:	2180      	movs	r1, #128	; 0x80
    huart->RxXferSize  = Size;
 80068ba:	3358      	adds	r3, #88	; 0x58
    UART_MASK_COMPUTATION(huart);
 80068bc:	68a2      	ldr	r2, [r4, #8]
    huart->RxXferSize  = Size;
 80068be:	801e      	strh	r6, [r3, #0]
    huart->RxXferCount = Size;
 80068c0:	3302      	adds	r3, #2
 80068c2:	9303      	str	r3, [sp, #12]
 80068c4:	801e      	strh	r6, [r3, #0]
    tickstart = HAL_GetTick();
 80068c6:	9004      	str	r0, [sp, #16]
    UART_MASK_COMPUTATION(huart);
 80068c8:	0149      	lsls	r1, r1, #5
 80068ca:	3302      	adds	r3, #2
 80068cc:	428a      	cmp	r2, r1
 80068ce:	d11d      	bne.n	800690c <HAL_UART_Receive+0xa4>
 80068d0:	6921      	ldr	r1, [r4, #16]
 80068d2:	42b9      	cmp	r1, r7
 80068d4:	d118      	bne.n	8006908 <HAL_UART_Receive+0xa0>
 80068d6:	4925      	ldr	r1, [pc, #148]	; (800696c <HAL_UART_Receive+0x104>)
 80068d8:	8019      	strh	r1, [r3, #0]
    uhMask = huart->Mask;
 80068da:	881f      	ldrh	r7, [r3, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80068dc:	2380      	movs	r3, #128	; 0x80
      pdata16bits = NULL;
 80068de:	2600      	movs	r6, #0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80068e0:	015b      	lsls	r3, r3, #5
 80068e2:	429a      	cmp	r2, r3
 80068e4:	d104      	bne.n	80068f0 <HAL_UART_Receive+0x88>
 80068e6:	6923      	ldr	r3, [r4, #16]
 80068e8:	42b3      	cmp	r3, r6
 80068ea:	d101      	bne.n	80068f0 <HAL_UART_Receive+0x88>
 80068ec:	002e      	movs	r6, r5
      pdata8bits  = NULL;
 80068ee:	001d      	movs	r5, r3
    while (huart->RxXferCount > 0U)
 80068f0:	0023      	movs	r3, r4
 80068f2:	335a      	adds	r3, #90	; 0x5a
 80068f4:	8818      	ldrh	r0, [r3, #0]
 80068f6:	b280      	uxth	r0, r0
 80068f8:	2800      	cmp	r0, #0
 80068fa:	d119      	bne.n	8006930 <HAL_UART_Receive+0xc8>
    huart->RxState = HAL_UART_STATE_READY;
 80068fc:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 80068fe:	3470      	adds	r4, #112	; 0x70
    huart->RxState = HAL_UART_STATE_READY;
 8006900:	60a3      	str	r3, [r4, #8]
    __HAL_UNLOCK(huart);
 8006902:	7020      	strb	r0, [r4, #0]
}
 8006904:	b007      	add	sp, #28
 8006906:	bdf0      	pop	{r4, r5, r6, r7, pc}
    UART_MASK_COMPUTATION(huart);
 8006908:	21ff      	movs	r1, #255	; 0xff
 800690a:	e7e5      	b.n	80068d8 <HAL_UART_Receive+0x70>
 800690c:	2a00      	cmp	r2, #0
 800690e:	d104      	bne.n	800691a <HAL_UART_Receive+0xb2>
 8006910:	6921      	ldr	r1, [r4, #16]
 8006912:	2900      	cmp	r1, #0
 8006914:	d0f8      	beq.n	8006908 <HAL_UART_Receive+0xa0>
 8006916:	217f      	movs	r1, #127	; 0x7f
 8006918:	e7de      	b.n	80068d8 <HAL_UART_Receive+0x70>
 800691a:	2180      	movs	r1, #128	; 0x80
 800691c:	0549      	lsls	r1, r1, #21
 800691e:	428a      	cmp	r2, r1
 8006920:	d104      	bne.n	800692c <HAL_UART_Receive+0xc4>
 8006922:	6921      	ldr	r1, [r4, #16]
 8006924:	2900      	cmp	r1, #0
 8006926:	d0f6      	beq.n	8006916 <HAL_UART_Receive+0xae>
 8006928:	213f      	movs	r1, #63	; 0x3f
 800692a:	e7d5      	b.n	80068d8 <HAL_UART_Receive+0x70>
 800692c:	801f      	strh	r7, [r3, #0]
 800692e:	e7d4      	b.n	80068da <HAL_UART_Receive+0x72>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006930:	9b05      	ldr	r3, [sp, #20]
 8006932:	2200      	movs	r2, #0
 8006934:	9300      	str	r3, [sp, #0]
 8006936:	2120      	movs	r1, #32
 8006938:	9b04      	ldr	r3, [sp, #16]
 800693a:	0020      	movs	r0, r4
 800693c:	f7ff fefc 	bl	8006738 <UART_WaitOnFlagUntilTimeout>
 8006940:	2800      	cmp	r0, #0
 8006942:	d110      	bne.n	8006966 <HAL_UART_Receive+0xfe>
 8006944:	6823      	ldr	r3, [r4, #0]
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006948:	403b      	ands	r3, r7
      if (pdata8bits == NULL)
 800694a:	2d00      	cmp	r5, #0
 800694c:	d108      	bne.n	8006960 <HAL_UART_Receive+0xf8>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800694e:	8033      	strh	r3, [r6, #0]
        pdata16bits++;
 8006950:	3602      	adds	r6, #2
      huart->RxXferCount--;
 8006952:	9b03      	ldr	r3, [sp, #12]
 8006954:	9a03      	ldr	r2, [sp, #12]
 8006956:	881b      	ldrh	r3, [r3, #0]
 8006958:	3b01      	subs	r3, #1
 800695a:	b29b      	uxth	r3, r3
 800695c:	8013      	strh	r3, [r2, #0]
 800695e:	e7c7      	b.n	80068f0 <HAL_UART_Receive+0x88>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006960:	702b      	strb	r3, [r5, #0]
        pdata8bits++;
 8006962:	3501      	adds	r5, #1
 8006964:	e7f5      	b.n	8006952 <HAL_UART_Receive+0xea>
        return HAL_TIMEOUT;
 8006966:	2003      	movs	r0, #3
 8006968:	e7cc      	b.n	8006904 <HAL_UART_Receive+0x9c>
 800696a:	46c0      	nop			; (mov r8, r8)
 800696c:	000001ff 	.word	0x000001ff

08006970 <UART_CheckIdleState>:
{
 8006970:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006972:	2600      	movs	r6, #0
{
 8006974:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006976:	67c6      	str	r6, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8006978:	f7fd fc02 	bl	8004180 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800697c:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800697e:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	071b      	lsls	r3, r3, #28
 8006984:	d415      	bmi.n	80069b2 <UART_CheckIdleState+0x42>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006986:	6823      	ldr	r3, [r4, #0]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	075b      	lsls	r3, r3, #29
 800698c:	d50a      	bpl.n	80069a4 <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800698e:	2180      	movs	r1, #128	; 0x80
 8006990:	4b0e      	ldr	r3, [pc, #56]	; (80069cc <UART_CheckIdleState+0x5c>)
 8006992:	2200      	movs	r2, #0
 8006994:	9300      	str	r3, [sp, #0]
 8006996:	03c9      	lsls	r1, r1, #15
 8006998:	002b      	movs	r3, r5
 800699a:	0020      	movs	r0, r4
 800699c:	f7ff fecc 	bl	8006738 <UART_WaitOnFlagUntilTimeout>
 80069a0:	2800      	cmp	r0, #0
 80069a2:	d111      	bne.n	80069c8 <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 80069a4:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 80069a6:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80069a8:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80069aa:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 80069ac:	3470      	adds	r4, #112	; 0x70
 80069ae:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 80069b0:	e00b      	b.n	80069ca <UART_CheckIdleState+0x5a>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80069b2:	2180      	movs	r1, #128	; 0x80
 80069b4:	4b05      	ldr	r3, [pc, #20]	; (80069cc <UART_CheckIdleState+0x5c>)
 80069b6:	0032      	movs	r2, r6
 80069b8:	9300      	str	r3, [sp, #0]
 80069ba:	0389      	lsls	r1, r1, #14
 80069bc:	0003      	movs	r3, r0
 80069be:	0020      	movs	r0, r4
 80069c0:	f7ff feba 	bl	8006738 <UART_WaitOnFlagUntilTimeout>
 80069c4:	2800      	cmp	r0, #0
 80069c6:	d0de      	beq.n	8006986 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 80069c8:	2003      	movs	r0, #3
}
 80069ca:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 80069cc:	01ffffff 	.word	0x01ffffff

080069d0 <HAL_UART_Init>:
{
 80069d0:	b510      	push	{r4, lr}
 80069d2:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 80069d4:	d101      	bne.n	80069da <HAL_UART_Init+0xa>
    return HAL_ERROR;
 80069d6:	2001      	movs	r0, #1
}
 80069d8:	bd10      	pop	{r4, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 80069da:	6f43      	ldr	r3, [r0, #116]	; 0x74
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d104      	bne.n	80069ea <HAL_UART_Init+0x1a>
    huart->Lock = HAL_UNLOCKED;
 80069e0:	0002      	movs	r2, r0
 80069e2:	3270      	adds	r2, #112	; 0x70
 80069e4:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 80069e6:	f007 ff47 	bl	800e878 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80069ea:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80069ec:	2101      	movs	r1, #1
 80069ee:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80069f0:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 80069f2:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80069f4:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 80069f6:	438b      	bics	r3, r1
 80069f8:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80069fa:	f7ff fd03 	bl	8006404 <UART_SetConfig>
 80069fe:	2801      	cmp	r0, #1
 8006a00:	d0e9      	beq.n	80069d6 <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006a02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d002      	beq.n	8006a0e <HAL_UART_Init+0x3e>
    UART_AdvFeatureConfig(huart);
 8006a08:	0020      	movs	r0, r4
 8006a0a:	f7ff fe2d 	bl	8006668 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a0e:	6823      	ldr	r3, [r4, #0]
 8006a10:	4907      	ldr	r1, [pc, #28]	; (8006a30 <HAL_UART_Init+0x60>)
 8006a12:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8006a14:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a16:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a18:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a1a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a1c:	689a      	ldr	r2, [r3, #8]
 8006a1e:	438a      	bics	r2, r1
 8006a20:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8006a22:	2201      	movs	r2, #1
 8006a24:	6819      	ldr	r1, [r3, #0]
 8006a26:	430a      	orrs	r2, r1
 8006a28:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8006a2a:	f7ff ffa1 	bl	8006970 <UART_CheckIdleState>
 8006a2e:	e7d3      	b.n	80069d8 <HAL_UART_Init+0x8>
 8006a30:	ffffb7ff 	.word	0xffffb7ff

08006a34 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006a34:	4770      	bx	lr

08006a36 <xor_block>:
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 8006a36:	780a      	ldrb	r2, [r1, #0]
 8006a38:	7803      	ldrb	r3, [r0, #0]
 8006a3a:	4053      	eors	r3, r2
 8006a3c:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 8006a3e:	784a      	ldrb	r2, [r1, #1]
 8006a40:	7843      	ldrb	r3, [r0, #1]
 8006a42:	4053      	eors	r3, r2
 8006a44:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 8006a46:	788a      	ldrb	r2, [r1, #2]
 8006a48:	7883      	ldrb	r3, [r0, #2]
 8006a4a:	4053      	eors	r3, r2
 8006a4c:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 8006a4e:	78ca      	ldrb	r2, [r1, #3]
 8006a50:	78c3      	ldrb	r3, [r0, #3]
 8006a52:	4053      	eors	r3, r2
 8006a54:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 8006a56:	790a      	ldrb	r2, [r1, #4]
 8006a58:	7903      	ldrb	r3, [r0, #4]
 8006a5a:	4053      	eors	r3, r2
 8006a5c:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 8006a5e:	794a      	ldrb	r2, [r1, #5]
 8006a60:	7943      	ldrb	r3, [r0, #5]
 8006a62:	4053      	eors	r3, r2
 8006a64:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 8006a66:	798a      	ldrb	r2, [r1, #6]
 8006a68:	7983      	ldrb	r3, [r0, #6]
 8006a6a:	4053      	eors	r3, r2
 8006a6c:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 8006a6e:	79ca      	ldrb	r2, [r1, #7]
 8006a70:	79c3      	ldrb	r3, [r0, #7]
 8006a72:	4053      	eors	r3, r2
 8006a74:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 8006a76:	7a0a      	ldrb	r2, [r1, #8]
 8006a78:	7a03      	ldrb	r3, [r0, #8]
 8006a7a:	4053      	eors	r3, r2
 8006a7c:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 8006a7e:	7a4a      	ldrb	r2, [r1, #9]
 8006a80:	7a43      	ldrb	r3, [r0, #9]
 8006a82:	4053      	eors	r3, r2
 8006a84:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 8006a86:	7a8a      	ldrb	r2, [r1, #10]
 8006a88:	7a83      	ldrb	r3, [r0, #10]
 8006a8a:	4053      	eors	r3, r2
 8006a8c:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 8006a8e:	7aca      	ldrb	r2, [r1, #11]
 8006a90:	7ac3      	ldrb	r3, [r0, #11]
 8006a92:	4053      	eors	r3, r2
 8006a94:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 8006a96:	7b0a      	ldrb	r2, [r1, #12]
 8006a98:	7b03      	ldrb	r3, [r0, #12]
 8006a9a:	4053      	eors	r3, r2
 8006a9c:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 8006a9e:	7b4a      	ldrb	r2, [r1, #13]
 8006aa0:	7b43      	ldrb	r3, [r0, #13]
 8006aa2:	4053      	eors	r3, r2
 8006aa4:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 8006aa6:	7b8a      	ldrb	r2, [r1, #14]
 8006aa8:	7b83      	ldrb	r3, [r0, #14]
 8006aaa:	4053      	eors	r3, r2
 8006aac:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 8006aae:	7bca      	ldrb	r2, [r1, #15]
 8006ab0:	7bc3      	ldrb	r3, [r0, #15]
 8006ab2:	4053      	eors	r3, r2
 8006ab4:	73c3      	strb	r3, [r0, #15]
#endif
}
 8006ab6:	4770      	bx	lr

08006ab8 <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 8006ab8:	b510      	push	{r4, lr}
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 8006aba:	780b      	ldrb	r3, [r1, #0]
 8006abc:	7814      	ldrb	r4, [r2, #0]
 8006abe:	4063      	eors	r3, r4
 8006ac0:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 8006ac2:	7854      	ldrb	r4, [r2, #1]
 8006ac4:	784b      	ldrb	r3, [r1, #1]
 8006ac6:	4063      	eors	r3, r4
 8006ac8:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 8006aca:	7894      	ldrb	r4, [r2, #2]
 8006acc:	788b      	ldrb	r3, [r1, #2]
 8006ace:	4063      	eors	r3, r4
 8006ad0:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 8006ad2:	78d4      	ldrb	r4, [r2, #3]
 8006ad4:	78cb      	ldrb	r3, [r1, #3]
 8006ad6:	4063      	eors	r3, r4
 8006ad8:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 8006ada:	7914      	ldrb	r4, [r2, #4]
 8006adc:	790b      	ldrb	r3, [r1, #4]
 8006ade:	4063      	eors	r3, r4
 8006ae0:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 8006ae2:	7954      	ldrb	r4, [r2, #5]
 8006ae4:	794b      	ldrb	r3, [r1, #5]
 8006ae6:	4063      	eors	r3, r4
 8006ae8:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 8006aea:	7994      	ldrb	r4, [r2, #6]
 8006aec:	798b      	ldrb	r3, [r1, #6]
 8006aee:	4063      	eors	r3, r4
 8006af0:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 8006af2:	79d4      	ldrb	r4, [r2, #7]
 8006af4:	79cb      	ldrb	r3, [r1, #7]
 8006af6:	4063      	eors	r3, r4
 8006af8:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 8006afa:	7a14      	ldrb	r4, [r2, #8]
 8006afc:	7a0b      	ldrb	r3, [r1, #8]
 8006afe:	4063      	eors	r3, r4
 8006b00:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 8006b02:	7a4b      	ldrb	r3, [r1, #9]
 8006b04:	7a54      	ldrb	r4, [r2, #9]
 8006b06:	4063      	eors	r3, r4
 8006b08:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 8006b0a:	7a8b      	ldrb	r3, [r1, #10]
 8006b0c:	7a94      	ldrb	r4, [r2, #10]
 8006b0e:	4063      	eors	r3, r4
 8006b10:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 8006b12:	7ad4      	ldrb	r4, [r2, #11]
 8006b14:	7acb      	ldrb	r3, [r1, #11]
 8006b16:	4063      	eors	r3, r4
 8006b18:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 8006b1a:	7b14      	ldrb	r4, [r2, #12]
 8006b1c:	7b0b      	ldrb	r3, [r1, #12]
 8006b1e:	4063      	eors	r3, r4
 8006b20:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 8006b22:	7b54      	ldrb	r4, [r2, #13]
 8006b24:	7b4b      	ldrb	r3, [r1, #13]
 8006b26:	4063      	eors	r3, r4
 8006b28:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 8006b2a:	7b94      	ldrb	r4, [r2, #14]
 8006b2c:	7b8b      	ldrb	r3, [r1, #14]
 8006b2e:	4063      	eors	r3, r4
 8006b30:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 8006b32:	7bcb      	ldrb	r3, [r1, #15]
 8006b34:	7bd2      	ldrb	r2, [r2, #15]
 8006b36:	4053      	eors	r3, r2
 8006b38:	73c3      	strb	r3, [r0, #15]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 8006b3a:	bd10      	pop	{r4, pc}

08006b3c <aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type aes_set_key( const uint8_t key[], length_type keylen, aes_context ctx[1] )
{
 8006b3c:	000b      	movs	r3, r1
 8006b3e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b40:	3b10      	subs	r3, #16
 8006b42:	b2db      	uxtb	r3, r3
 8006b44:	b087      	sub	sp, #28
 8006b46:	000f      	movs	r7, r1
 8006b48:	0015      	movs	r5, r2
 8006b4a:	2b10      	cmp	r3, #16
 8006b4c:	d805      	bhi.n	8006b5a <aes_set_key+0x1e>
 8006b4e:	2201      	movs	r2, #1
 8006b50:	409a      	lsls	r2, r3
 8006b52:	493a      	ldr	r1, [pc, #232]	; (8006c3c <aes_set_key+0x100>)
        break;
    default:
        ctx->rnd = 0;
        return ( uint8_t )-1;
    }
    block_copy_nn(ctx->ksch, key, keylen);
 8006b54:	2300      	movs	r3, #0
 8006b56:	420a      	tst	r2, r1
 8006b58:	d105      	bne.n	8006b66 <aes_set_key+0x2a>
        ctx->rnd = 0;
 8006b5a:	2300      	movs	r3, #0
        return ( uint8_t )-1;
 8006b5c:	20ff      	movs	r0, #255	; 0xff
        ctx->rnd = 0;
 8006b5e:	35f0      	adds	r5, #240	; 0xf0
 8006b60:	702b      	strb	r3, [r5, #0]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
    }
    return 0;
}
 8006b62:	b007      	add	sp, #28
 8006b64:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *d++ = *s++;
 8006b66:	5cc2      	ldrb	r2, [r0, r3]
 8006b68:	54ea      	strb	r2, [r5, r3]
 8006b6a:	3301      	adds	r3, #1
    while( nn-- )
 8006b6c:	429f      	cmp	r7, r3
 8006b6e:	d1fa      	bne.n	8006b66 <aes_set_key+0x2a>
    hi = (keylen + 28) << 2;
 8006b70:	003b      	movs	r3, r7
    ctx->rnd = (hi >> 4) - 1;
 8006b72:	002a      	movs	r2, r5
    hi = (keylen + 28) << 2;
 8006b74:	331c      	adds	r3, #28
 8006b76:	009b      	lsls	r3, r3, #2
 8006b78:	b2db      	uxtb	r3, r3
 8006b7a:	9305      	str	r3, [sp, #20]
    ctx->rnd = (hi >> 4) - 1;
 8006b7c:	091b      	lsrs	r3, r3, #4
 8006b7e:	3b01      	subs	r3, #1
 8006b80:	32f0      	adds	r2, #240	; 0xf0
 8006b82:	7013      	strb	r3, [r2, #0]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8006b84:	2301      	movs	r3, #1
    ctx->rnd = (hi >> 4) - 1;
 8006b86:	003c      	movs	r4, r7
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8006b88:	9304      	str	r3, [sp, #16]
        t0 = ctx->ksch[cc - 4];
 8006b8a:	192b      	adds	r3, r5, r4
 8006b8c:	1f1a      	subs	r2, r3, #4
 8006b8e:	7816      	ldrb	r6, [r2, #0]
        t1 = ctx->ksch[cc - 3];
 8006b90:	1eda      	subs	r2, r3, #3
 8006b92:	7812      	ldrb	r2, [r2, #0]
        if( cc % keylen == 0 )
 8006b94:	0039      	movs	r1, r7
        t1 = ctx->ksch[cc - 3];
 8006b96:	9201      	str	r2, [sp, #4]
        t2 = ctx->ksch[cc - 2];
 8006b98:	1e9a      	subs	r2, r3, #2
        t3 = ctx->ksch[cc - 1];
 8006b9a:	3b01      	subs	r3, #1
        t2 = ctx->ksch[cc - 2];
 8006b9c:	7812      	ldrb	r2, [r2, #0]
        t3 = ctx->ksch[cc - 1];
 8006b9e:	781b      	ldrb	r3, [r3, #0]
        if( cc % keylen == 0 )
 8006ba0:	0020      	movs	r0, r4
        t2 = ctx->ksch[cc - 2];
 8006ba2:	9202      	str	r2, [sp, #8]
        t3 = ctx->ksch[cc - 1];
 8006ba4:	9303      	str	r3, [sp, #12]
        if( cc % keylen == 0 )
 8006ba6:	f7f9 fb65 	bl	8000274 <__aeabi_uidivmod>
 8006baa:	b2c9      	uxtb	r1, r1
 8006bac:	2900      	cmp	r1, #0
 8006bae:	d133      	bne.n	8006c18 <aes_set_key+0xdc>
            t0 = s_box(t1) ^ rc;
 8006bb0:	4b23      	ldr	r3, [pc, #140]	; (8006c40 <aes_set_key+0x104>)
 8006bb2:	9a01      	ldr	r2, [sp, #4]
            t1 = s_box(t2);
 8006bb4:	9902      	ldr	r1, [sp, #8]
            t0 = s_box(t1) ^ rc;
 8006bb6:	5c9a      	ldrb	r2, [r3, r2]
 8006bb8:	9b04      	ldr	r3, [sp, #16]
 8006bba:	405a      	eors	r2, r3
            t1 = s_box(t2);
 8006bbc:	4b20      	ldr	r3, [pc, #128]	; (8006c40 <aes_set_key+0x104>)
 8006bbe:	5c5b      	ldrb	r3, [r3, r1]
            t2 = s_box(t3);
 8006bc0:	9903      	ldr	r1, [sp, #12]
            t1 = s_box(t2);
 8006bc2:	9301      	str	r3, [sp, #4]
            t2 = s_box(t3);
 8006bc4:	4b1e      	ldr	r3, [pc, #120]	; (8006c40 <aes_set_key+0x104>)
 8006bc6:	5c5b      	ldrb	r3, [r3, r1]
            rc = f2(rc);
 8006bc8:	211b      	movs	r1, #27
            t2 = s_box(t3);
 8006bca:	9302      	str	r3, [sp, #8]
            t3 = s_box(tt);
 8006bcc:	4b1c      	ldr	r3, [pc, #112]	; (8006c40 <aes_set_key+0x104>)
 8006bce:	5d9b      	ldrb	r3, [r3, r6]
            t0 = s_box(t1) ^ rc;
 8006bd0:	0016      	movs	r6, r2
            t3 = s_box(tt);
 8006bd2:	9303      	str	r3, [sp, #12]
            rc = f2(rc);
 8006bd4:	9b04      	ldr	r3, [sp, #16]
 8006bd6:	09db      	lsrs	r3, r3, #7
 8006bd8:	434b      	muls	r3, r1
 8006bda:	9904      	ldr	r1, [sp, #16]
 8006bdc:	0049      	lsls	r1, r1, #1
 8006bde:	404b      	eors	r3, r1
 8006be0:	b2db      	uxtb	r3, r3
 8006be2:	9304      	str	r3, [sp, #16]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 8006be4:	1be3      	subs	r3, r4, r7
 8006be6:	b2db      	uxtb	r3, r3
 8006be8:	5cea      	ldrb	r2, [r5, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 8006bea:	18eb      	adds	r3, r5, r3
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 8006bec:	4056      	eors	r6, r2
 8006bee:	552e      	strb	r6, [r5, r4]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 8006bf0:	785a      	ldrb	r2, [r3, #1]
 8006bf2:	9801      	ldr	r0, [sp, #4]
 8006bf4:	1929      	adds	r1, r5, r4
 8006bf6:	4050      	eors	r0, r2
 8006bf8:	7048      	strb	r0, [r1, #1]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 8006bfa:	789a      	ldrb	r2, [r3, #2]
 8006bfc:	9802      	ldr	r0, [sp, #8]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8006bfe:	3404      	adds	r4, #4
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 8006c00:	4050      	eors	r0, r2
 8006c02:	7088      	strb	r0, [r1, #2]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 8006c04:	78db      	ldrb	r3, [r3, #3]
 8006c06:	9a03      	ldr	r2, [sp, #12]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8006c08:	b2e4      	uxtb	r4, r4
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 8006c0a:	405a      	eors	r2, r3
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8006c0c:	9b05      	ldr	r3, [sp, #20]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 8006c0e:	70ca      	strb	r2, [r1, #3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8006c10:	42a3      	cmp	r3, r4
 8006c12:	d8ba      	bhi.n	8006b8a <aes_set_key+0x4e>
    return 0;
 8006c14:	2000      	movs	r0, #0
 8006c16:	e7a4      	b.n	8006b62 <aes_set_key+0x26>
        else if( keylen > 24 && cc % keylen == 16 )
 8006c18:	2f18      	cmp	r7, #24
 8006c1a:	d9e3      	bls.n	8006be4 <aes_set_key+0xa8>
 8006c1c:	2910      	cmp	r1, #16
 8006c1e:	d1e1      	bne.n	8006be4 <aes_set_key+0xa8>
            t1 = s_box(t1);
 8006c20:	9a01      	ldr	r2, [sp, #4]
            t0 = s_box(t0);
 8006c22:	4b07      	ldr	r3, [pc, #28]	; (8006c40 <aes_set_key+0x104>)
 8006c24:	5d9e      	ldrb	r6, [r3, r6]
            t1 = s_box(t1);
 8006c26:	5c9b      	ldrb	r3, [r3, r2]
            t2 = s_box(t2);
 8006c28:	9a02      	ldr	r2, [sp, #8]
            t1 = s_box(t1);
 8006c2a:	9301      	str	r3, [sp, #4]
            t2 = s_box(t2);
 8006c2c:	4b04      	ldr	r3, [pc, #16]	; (8006c40 <aes_set_key+0x104>)
 8006c2e:	5c9b      	ldrb	r3, [r3, r2]
            t3 = s_box(t3);
 8006c30:	9a03      	ldr	r2, [sp, #12]
            t2 = s_box(t2);
 8006c32:	9302      	str	r3, [sp, #8]
            t3 = s_box(t3);
 8006c34:	4b02      	ldr	r3, [pc, #8]	; (8006c40 <aes_set_key+0x104>)
 8006c36:	5c9b      	ldrb	r3, [r3, r2]
 8006c38:	9303      	str	r3, [sp, #12]
 8006c3a:	e7d3      	b.n	8006be4 <aes_set_key+0xa8>
 8006c3c:	00010101 	.word	0x00010101
 8006c40:	0800f942 	.word	0x0800f942

08006c44 <aes_encrypt>:

/*  Encrypt a single block of 16 bytes */

return_type aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const aes_context ctx[1] )
{
    if( ctx->rnd )
 8006c44:	0013      	movs	r3, r2
{
 8006c46:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c48:	b0a5      	sub	sp, #148	; 0x94
    if( ctx->rnd )
 8006c4a:	33f0      	adds	r3, #240	; 0xf0
{
 8006c4c:	911f      	str	r1, [sp, #124]	; 0x7c
 8006c4e:	0016      	movs	r6, r2
    if( ctx->rnd )
 8006c50:	781a      	ldrb	r2, [r3, #0]
#endif
        shift_sub_rows( s1 );
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
    }
    else
        return ( uint8_t )-1;
 8006c52:	23ff      	movs	r3, #255	; 0xff
    if( ctx->rnd )
 8006c54:	2a00      	cmp	r2, #0
 8006c56:	d100      	bne.n	8006c5a <aes_encrypt+0x16>
 8006c58:	e08a      	b.n	8006d70 <aes_encrypt+0x12c>
        copy_and_key( s1, in, ctx->ksch );
 8006c5a:	0001      	movs	r1, r0
 8006c5c:	0032      	movs	r2, r6
 8006c5e:	a820      	add	r0, sp, #128	; 0x80
 8006c60:	f7ff ff2a 	bl	8006ab8 <copy_and_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 8006c64:	2501      	movs	r5, #1
 8006c66:	012a      	lsls	r2, r5, #4
 8006c68:	18b3      	adds	r3, r6, r2
 8006c6a:	931e      	str	r3, [sp, #120]	; 0x78
 8006c6c:	ab20      	add	r3, sp, #128	; 0x80
 8006c6e:	781b      	ldrb	r3, [r3, #0]
 8006c70:	9301      	str	r3, [sp, #4]
 8006c72:	ab20      	add	r3, sp, #128	; 0x80
 8006c74:	795b      	ldrb	r3, [r3, #5]
 8006c76:	9302      	str	r3, [sp, #8]
 8006c78:	ab20      	add	r3, sp, #128	; 0x80
 8006c7a:	7a9f      	ldrb	r7, [r3, #10]
 8006c7c:	4b91      	ldr	r3, [pc, #580]	; (8006ec4 <aes_encrypt+0x280>)
 8006c7e:	5dda      	ldrb	r2, [r3, r7]
 8006c80:	9203      	str	r2, [sp, #12]
 8006c82:	aa20      	add	r2, sp, #128	; 0x80
 8006c84:	7bd2      	ldrb	r2, [r2, #15]
 8006c86:	9204      	str	r2, [sp, #16]
 8006c88:	5c9a      	ldrb	r2, [r3, r2]
 8006c8a:	9205      	str	r2, [sp, #20]
 8006c8c:	9a01      	ldr	r2, [sp, #4]
 8006c8e:	5c98      	ldrb	r0, [r3, r2]
 8006c90:	9a02      	ldr	r2, [sp, #8]
 8006c92:	5c9a      	ldrb	r2, [r3, r2]
 8006c94:	9206      	str	r2, [sp, #24]
 8006c96:	aa20      	add	r2, sp, #128	; 0x80
 8006c98:	7912      	ldrb	r2, [r2, #4]
 8006c9a:	9207      	str	r2, [sp, #28]
 8006c9c:	aa20      	add	r2, sp, #128	; 0x80
 8006c9e:	7a52      	ldrb	r2, [r2, #9]
 8006ca0:	9208      	str	r2, [sp, #32]
 8006ca2:	aa20      	add	r2, sp, #128	; 0x80
 8006ca4:	7b92      	ldrb	r2, [r2, #14]
 8006ca6:	9209      	str	r2, [sp, #36]	; 0x24
 8006ca8:	5c9a      	ldrb	r2, [r3, r2]
 8006caa:	920a      	str	r2, [sp, #40]	; 0x28
 8006cac:	aa20      	add	r2, sp, #128	; 0x80
 8006cae:	78d2      	ldrb	r2, [r2, #3]
 8006cb0:	920b      	str	r2, [sp, #44]	; 0x2c
 8006cb2:	5c9a      	ldrb	r2, [r3, r2]
 8006cb4:	4694      	mov	ip, r2
 8006cb6:	9a07      	ldr	r2, [sp, #28]
 8006cb8:	5c9a      	ldrb	r2, [r3, r2]
 8006cba:	920c      	str	r2, [sp, #48]	; 0x30
 8006cbc:	9a08      	ldr	r2, [sp, #32]
 8006cbe:	5c9a      	ldrb	r2, [r3, r2]
 8006cc0:	920d      	str	r2, [sp, #52]	; 0x34
 8006cc2:	aa20      	add	r2, sp, #128	; 0x80
 8006cc4:	7a12      	ldrb	r2, [r2, #8]
 8006cc6:	920e      	str	r2, [sp, #56]	; 0x38
 8006cc8:	aa20      	add	r2, sp, #128	; 0x80
 8006cca:	7b52      	ldrb	r2, [r2, #13]
 8006ccc:	920f      	str	r2, [sp, #60]	; 0x3c
 8006cce:	aa20      	add	r2, sp, #128	; 0x80
 8006cd0:	7892      	ldrb	r2, [r2, #2]
 8006cd2:	9210      	str	r2, [sp, #64]	; 0x40
 8006cd4:	5c9a      	ldrb	r2, [r3, r2]
 8006cd6:	9211      	str	r2, [sp, #68]	; 0x44
 8006cd8:	aa20      	add	r2, sp, #128	; 0x80
 8006cda:	79d2      	ldrb	r2, [r2, #7]
 8006cdc:	9212      	str	r2, [sp, #72]	; 0x48
 8006cde:	5c9a      	ldrb	r2, [r3, r2]
 8006ce0:	9213      	str	r2, [sp, #76]	; 0x4c
 8006ce2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006ce4:	5c9a      	ldrb	r2, [r3, r2]
 8006ce6:	9214      	str	r2, [sp, #80]	; 0x50
 8006ce8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006cea:	5c9a      	ldrb	r2, [r3, r2]
 8006cec:	9215      	str	r2, [sp, #84]	; 0x54
 8006cee:	aa20      	add	r2, sp, #128	; 0x80
 8006cf0:	7b12      	ldrb	r2, [r2, #12]
 8006cf2:	9216      	str	r2, [sp, #88]	; 0x58
 8006cf4:	aa20      	add	r2, sp, #128	; 0x80
 8006cf6:	7852      	ldrb	r2, [r2, #1]
 8006cf8:	9217      	str	r2, [sp, #92]	; 0x5c
 8006cfa:	aa20      	add	r2, sp, #128	; 0x80
 8006cfc:	7992      	ldrb	r2, [r2, #6]
 8006cfe:	9218      	str	r2, [sp, #96]	; 0x60
 8006d00:	5c9a      	ldrb	r2, [r3, r2]
 8006d02:	9219      	str	r2, [sp, #100]	; 0x64
 8006d04:	aa20      	add	r2, sp, #128	; 0x80
 8006d06:	7ad2      	ldrb	r2, [r2, #11]
 8006d08:	921a      	str	r2, [sp, #104]	; 0x68
 8006d0a:	5c9a      	ldrb	r2, [r3, r2]
 8006d0c:	921b      	str	r2, [sp, #108]	; 0x6c
 8006d0e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006d10:	5c9a      	ldrb	r2, [r3, r2]
 8006d12:	921c      	str	r2, [sp, #112]	; 0x70
 8006d14:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006d16:	5c9b      	ldrb	r3, [r3, r2]
 8006d18:	931d      	str	r3, [sp, #116]	; 0x74
 8006d1a:	0033      	movs	r3, r6
 8006d1c:	33f0      	adds	r3, #240	; 0xf0
 8006d1e:	781b      	ldrb	r3, [r3, #0]
 8006d20:	42ab      	cmp	r3, r5
 8006d22:	d828      	bhi.n	8006d76 <aes_encrypt+0x132>
    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 8006d24:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006d26:	ab20      	add	r3, sp, #128	; 0x80
 8006d28:	711a      	strb	r2, [r3, #4]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 8006d2a:	9a14      	ldr	r2, [sp, #80]	; 0x50
    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 8006d2c:	7018      	strb	r0, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 8006d2e:	721a      	strb	r2, [r3, #8]
 8006d30:	9a1c      	ldr	r2, [sp, #112]	; 0x70
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 8006d32:	0019      	movs	r1, r3
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 8006d34:	731a      	strb	r2, [r3, #12]
    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 8006d36:	9a06      	ldr	r2, [sp, #24]
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 8006d38:	981f      	ldr	r0, [sp, #124]	; 0x7c
    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 8006d3a:	705a      	strb	r2, [r3, #1]
 8006d3c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006d3e:	715a      	strb	r2, [r3, #5]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 8006d40:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006d42:	725a      	strb	r2, [r3, #9]
 8006d44:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8006d46:	735a      	strb	r2, [r3, #13]
    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 8006d48:	9a03      	ldr	r2, [sp, #12]
 8006d4a:	709a      	strb	r2, [r3, #2]
 8006d4c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006d4e:	729a      	strb	r2, [r3, #10]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 8006d50:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006d52:	719a      	strb	r2, [r3, #6]
 8006d54:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006d56:	739a      	strb	r2, [r3, #14]
    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 8006d58:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8006d5a:	73da      	strb	r2, [r3, #15]
 8006d5c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006d5e:	72da      	strb	r2, [r3, #11]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 8006d60:	4662      	mov	r2, ip
 8006d62:	71da      	strb	r2, [r3, #7]
 8006d64:	9a05      	ldr	r2, [sp, #20]
 8006d66:	70da      	strb	r2, [r3, #3]
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 8006d68:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006d6a:	f7ff fea5 	bl	8006ab8 <copy_and_key>
 8006d6e:	2300      	movs	r3, #0
    return 0;
}
 8006d70:	0018      	movs	r0, r3
 8006d72:	b025      	add	sp, #148	; 0x94
 8006d74:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 8006d76:	4b54      	ldr	r3, [pc, #336]	; (8006ec8 <aes_encrypt+0x284>)
 8006d78:	9c01      	ldr	r4, [sp, #4]
 8006d7a:	9905      	ldr	r1, [sp, #20]
 8006d7c:	9a03      	ldr	r2, [sp, #12]
 8006d7e:	5d1c      	ldrb	r4, [r3, r4]
 8006d80:	404a      	eors	r2, r1
 8006d82:	4054      	eors	r4, r2
 8006d84:	9902      	ldr	r1, [sp, #8]
 8006d86:	4a51      	ldr	r2, [pc, #324]	; (8006ecc <aes_encrypt+0x288>)
        for( r = 1 ; r < ctx->rnd ; ++r )
 8006d88:	3501      	adds	r5, #1
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 8006d8a:	5c51      	ldrb	r1, [r2, r1]
        for( r = 1 ; r < ctx->rnd ; ++r )
 8006d8c:	b2ed      	uxtb	r5, r5
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 8006d8e:	404c      	eors	r4, r1
 8006d90:	a920      	add	r1, sp, #128	; 0x80
 8006d92:	700c      	strb	r4, [r1, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 8006d94:	9c02      	ldr	r4, [sp, #8]
 8006d96:	9905      	ldr	r1, [sp, #20]
 8006d98:	5d1c      	ldrb	r4, [r3, r4]
 8006d9a:	4041      	eors	r1, r0
 8006d9c:	4061      	eors	r1, r4
 8006d9e:	5dd4      	ldrb	r4, [r2, r7]
 8006da0:	4061      	eors	r1, r4
 8006da2:	ac20      	add	r4, sp, #128	; 0x80
 8006da4:	7061      	strb	r1, [r4, #1]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 8006da6:	9906      	ldr	r1, [sp, #24]
 8006da8:	4048      	eors	r0, r1
 8006daa:	5dd9      	ldrb	r1, [r3, r7]
 8006dac:	4048      	eors	r0, r1
 8006dae:	9904      	ldr	r1, [sp, #16]
 8006db0:	5c51      	ldrb	r1, [r2, r1]
 8006db2:	4048      	eors	r0, r1
 8006db4:	70a0      	strb	r0, [r4, #2]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 8006db6:	9903      	ldr	r1, [sp, #12]
 8006db8:	9806      	ldr	r0, [sp, #24]
 8006dba:	4041      	eors	r1, r0
 8006dbc:	9801      	ldr	r0, [sp, #4]
 8006dbe:	5c10      	ldrb	r0, [r2, r0]
 8006dc0:	4041      	eors	r1, r0
 8006dc2:	9804      	ldr	r0, [sp, #16]
 8006dc4:	5c18      	ldrb	r0, [r3, r0]
 8006dc6:	4041      	eors	r1, r0
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 8006dc8:	4660      	mov	r0, ip
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 8006dca:	70e1      	strb	r1, [r4, #3]
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 8006dcc:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006dce:	4041      	eors	r1, r0
 8006dd0:	9807      	ldr	r0, [sp, #28]
 8006dd2:	5c18      	ldrb	r0, [r3, r0]
 8006dd4:	4041      	eors	r1, r0
 8006dd6:	9808      	ldr	r0, [sp, #32]
 8006dd8:	5c10      	ldrb	r0, [r2, r0]
 8006dda:	4041      	eors	r1, r0
 8006ddc:	7121      	strb	r1, [r4, #4]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 8006dde:	4661      	mov	r1, ip
 8006de0:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006de2:	4041      	eors	r1, r0
 8006de4:	9808      	ldr	r0, [sp, #32]
 8006de6:	5c18      	ldrb	r0, [r3, r0]
 8006de8:	4041      	eors	r1, r0
 8006dea:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006dec:	5c10      	ldrb	r0, [r2, r0]
 8006dee:	4041      	eors	r1, r0
 8006df0:	7161      	strb	r1, [r4, #5]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 8006df2:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006df4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006df6:	4041      	eors	r1, r0
 8006df8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006dfa:	5c18      	ldrb	r0, [r3, r0]
 8006dfc:	4041      	eors	r1, r0
 8006dfe:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006e00:	5c10      	ldrb	r0, [r2, r0]
 8006e02:	4041      	eors	r1, r0
 8006e04:	71a1      	strb	r1, [r4, #6]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 8006e06:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006e08:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006e0a:	4041      	eors	r1, r0
 8006e0c:	9807      	ldr	r0, [sp, #28]
 8006e0e:	5c10      	ldrb	r0, [r2, r0]
 8006e10:	4041      	eors	r1, r0
 8006e12:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006e14:	5c18      	ldrb	r0, [r3, r0]
 8006e16:	4041      	eors	r1, r0
 8006e18:	71e1      	strb	r1, [r4, #7]
    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 8006e1a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8006e1c:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006e1e:	4041      	eors	r1, r0
 8006e20:	980e      	ldr	r0, [sp, #56]	; 0x38
 8006e22:	5c18      	ldrb	r0, [r3, r0]
 8006e24:	4041      	eors	r1, r0
 8006e26:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8006e28:	5c10      	ldrb	r0, [r2, r0]
 8006e2a:	4041      	eors	r1, r0
 8006e2c:	7221      	strb	r1, [r4, #8]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 8006e2e:	9814      	ldr	r0, [sp, #80]	; 0x50
 8006e30:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8006e32:	4041      	eors	r1, r0
 8006e34:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8006e36:	5c18      	ldrb	r0, [r3, r0]
 8006e38:	4041      	eors	r1, r0
 8006e3a:	9810      	ldr	r0, [sp, #64]	; 0x40
 8006e3c:	5c10      	ldrb	r0, [r2, r0]
 8006e3e:	4041      	eors	r1, r0
 8006e40:	7261      	strb	r1, [r4, #9]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 8006e42:	9815      	ldr	r0, [sp, #84]	; 0x54
 8006e44:	9914      	ldr	r1, [sp, #80]	; 0x50
 8006e46:	4041      	eors	r1, r0
 8006e48:	9810      	ldr	r0, [sp, #64]	; 0x40
 8006e4a:	5c18      	ldrb	r0, [r3, r0]
 8006e4c:	4041      	eors	r1, r0
 8006e4e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8006e50:	5c10      	ldrb	r0, [r2, r0]
 8006e52:	4041      	eors	r1, r0
 8006e54:	72a1      	strb	r1, [r4, #10]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 8006e56:	9815      	ldr	r0, [sp, #84]	; 0x54
 8006e58:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006e5a:	4041      	eors	r1, r0
 8006e5c:	980e      	ldr	r0, [sp, #56]	; 0x38
 8006e5e:	5c10      	ldrb	r0, [r2, r0]
 8006e60:	4041      	eors	r1, r0
 8006e62:	9812      	ldr	r0, [sp, #72]	; 0x48
 8006e64:	5c18      	ldrb	r0, [r3, r0]
 8006e66:	4041      	eors	r1, r0
 8006e68:	72e1      	strb	r1, [r4, #11]
    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 8006e6a:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8006e6c:	9919      	ldr	r1, [sp, #100]	; 0x64
 8006e6e:	4041      	eors	r1, r0
 8006e70:	9816      	ldr	r0, [sp, #88]	; 0x58
 8006e72:	5c18      	ldrb	r0, [r3, r0]
 8006e74:	4041      	eors	r1, r0
 8006e76:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8006e78:	5c10      	ldrb	r0, [r2, r0]
 8006e7a:	4041      	eors	r1, r0
 8006e7c:	7321      	strb	r1, [r4, #12]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 8006e7e:	981c      	ldr	r0, [sp, #112]	; 0x70
 8006e80:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8006e82:	4041      	eors	r1, r0
 8006e84:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8006e86:	5c18      	ldrb	r0, [r3, r0]
 8006e88:	4041      	eors	r1, r0
 8006e8a:	9818      	ldr	r0, [sp, #96]	; 0x60
 8006e8c:	5c10      	ldrb	r0, [r2, r0]
 8006e8e:	4041      	eors	r1, r0
 8006e90:	7361      	strb	r1, [r4, #13]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 8006e92:	981d      	ldr	r0, [sp, #116]	; 0x74
 8006e94:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006e96:	4041      	eors	r1, r0
 8006e98:	9818      	ldr	r0, [sp, #96]	; 0x60
 8006e9a:	5c18      	ldrb	r0, [r3, r0]
 8006e9c:	4041      	eors	r1, r0
 8006e9e:	981a      	ldr	r0, [sp, #104]	; 0x68
 8006ea0:	5c10      	ldrb	r0, [r2, r0]
 8006ea2:	4041      	eors	r1, r0
 8006ea4:	73a1      	strb	r1, [r4, #14]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 8006ea6:	981d      	ldr	r0, [sp, #116]	; 0x74
 8006ea8:	9919      	ldr	r1, [sp, #100]	; 0x64
 8006eaa:	4041      	eors	r1, r0
 8006eac:	9816      	ldr	r0, [sp, #88]	; 0x58
 8006eae:	5c12      	ldrb	r2, [r2, r0]
    xor_block(d, k);
 8006eb0:	0020      	movs	r0, r4
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 8006eb2:	404a      	eors	r2, r1
 8006eb4:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006eb6:	5c5b      	ldrb	r3, [r3, r1]
    xor_block(d, k);
 8006eb8:	991e      	ldr	r1, [sp, #120]	; 0x78
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 8006eba:	4053      	eors	r3, r2
 8006ebc:	73e3      	strb	r3, [r4, #15]
    xor_block(d, k);
 8006ebe:	f7ff fdba 	bl	8006a36 <xor_block>
 8006ec2:	e6d0      	b.n	8006c66 <aes_encrypt+0x22>
 8006ec4:	0800f942 	.word	0x0800f942
 8006ec8:	0800f842 	.word	0x0800f842
 8006ecc:	0800f742 	.word	0x0800f742

08006ed0 <AES_CMAC_Init>:
        }                          \
    } while (0) \


void AES_CMAC_Init(AES_CMAC_CTX *ctx)
{
 8006ed0:	b510      	push	{r4, lr}
 8006ed2:	0004      	movs	r4, r0
            memset1(ctx->X, 0, sizeof ctx->X);
 8006ed4:	2210      	movs	r2, #16
 8006ed6:	30f1      	adds	r0, #241	; 0xf1
 8006ed8:	2100      	movs	r1, #0
 8006eda:	f006 f899 	bl	800d010 <memset1>
            ctx->M_n = 0;
 8006ede:	0023      	movs	r3, r4
 8006ee0:	2100      	movs	r1, #0
 8006ee2:	33fc      	adds	r3, #252	; 0xfc
 8006ee4:	6199      	str	r1, [r3, #24]
        memset1(ctx->rijndael.ksch, '\0', 240);
 8006ee6:	22f0      	movs	r2, #240	; 0xf0
 8006ee8:	0020      	movs	r0, r4
 8006eea:	f006 f891 	bl	800d010 <memset1>
}
 8006eee:	bd10      	pop	{r4, pc}

08006ef0 <AES_CMAC_SetKey>:
    
void AES_CMAC_SetKey(AES_CMAC_CTX *ctx, const uint8_t key[AES_CMAC_KEY_LENGTH])
{
 8006ef0:	b510      	push	{r4, lr}
 8006ef2:	0002      	movs	r2, r0
 8006ef4:	0008      	movs	r0, r1
           //rijndael_set_key_enc_only(&ctx->rijndael, key, 128);
       aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael);
 8006ef6:	2110      	movs	r1, #16
 8006ef8:	f7ff fe20 	bl	8006b3c <aes_set_key>
}
 8006efc:	bd10      	pop	{r4, pc}

08006efe <AES_CMAC_Update>:
void AES_CMAC_Update(AES_CMAC_CTX *ctx, const uint8_t *data, uint32_t len)
{
            uint32_t mlen;
        uint8_t in[16];
    
            if (ctx->M_n > 0) {
 8006efe:	0003      	movs	r3, r0
{
 8006f00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f02:	0004      	movs	r4, r0
            if (ctx->M_n > 0) {
 8006f04:	33fc      	adds	r3, #252	; 0xfc
 8006f06:	6998      	ldr	r0, [r3, #24]
 8006f08:	1ca3      	adds	r3, r4, #2
{
 8006f0a:	b087      	sub	sp, #28
 8006f0c:	33ff      	adds	r3, #255	; 0xff
 8006f0e:	000e      	movs	r6, r1
 8006f10:	0015      	movs	r5, r2
 8006f12:	9301      	str	r3, [sp, #4]
            if (ctx->M_n > 0) {
 8006f14:	2800      	cmp	r0, #0
 8006f16:	d02a      	beq.n	8006f6e <AES_CMAC_Update+0x70>
                  mlen = MIN(16 - ctx->M_n, len);
 8006f18:	2710      	movs	r7, #16
 8006f1a:	1a3f      	subs	r7, r7, r0
 8006f1c:	9700      	str	r7, [sp, #0]
 8006f1e:	4297      	cmp	r7, r2
 8006f20:	d900      	bls.n	8006f24 <AES_CMAC_Update+0x26>
 8006f22:	9200      	str	r2, [sp, #0]
                    memcpy1(ctx->M_last + ctx->M_n, data, mlen);
 8006f24:	466b      	mov	r3, sp
 8006f26:	881a      	ldrh	r2, [r3, #0]
 8006f28:	1ca3      	adds	r3, r4, #2
 8006f2a:	33ff      	adds	r3, #255	; 0xff
 8006f2c:	1818      	adds	r0, r3, r0
 8006f2e:	0031      	movs	r1, r6
 8006f30:	f006 f859 	bl	800cfe6 <memcpy1>
                    ctx->M_n += mlen;
 8006f34:	0022      	movs	r2, r4
 8006f36:	32fc      	adds	r2, #252	; 0xfc
 8006f38:	6991      	ldr	r1, [r2, #24]
 8006f3a:	9b00      	ldr	r3, [sp, #0]
 8006f3c:	185b      	adds	r3, r3, r1
 8006f3e:	6193      	str	r3, [r2, #24]
                    if (ctx->M_n < 16 || len == mlen)
 8006f40:	2b0f      	cmp	r3, #15
 8006f42:	d91d      	bls.n	8006f80 <AES_CMAC_Update+0x82>
 8006f44:	42af      	cmp	r7, r5
 8006f46:	d21b      	bcs.n	8006f80 <AES_CMAC_Update+0x82>
 8006f48:	0023      	movs	r3, r4
 8006f4a:	33f1      	adds	r3, #241	; 0xf1
 8006f4c:	0018      	movs	r0, r3
 8006f4e:	1ca1      	adds	r1, r4, #2
 8006f50:	31ff      	adds	r1, #255	; 0xff
                            return;
                   XOR(ctx->M_last, ctx->X);
 8006f52:	781a      	ldrb	r2, [r3, #0]
 8006f54:	7c1f      	ldrb	r7, [r3, #16]
 8006f56:	407a      	eors	r2, r7
 8006f58:	701a      	strb	r2, [r3, #0]
 8006f5a:	3301      	adds	r3, #1
 8006f5c:	428b      	cmp	r3, r1
 8006f5e:	d1f8      	bne.n	8006f52 <AES_CMAC_Update+0x54>
                    //rijndael_encrypt(&ctx->rijndael, ctx->X, ctx->X);
            aes_encrypt( ctx->X, ctx->X, &ctx->rijndael);
 8006f60:	0022      	movs	r2, r4
 8006f62:	0001      	movs	r1, r0
 8006f64:	f7ff fe6e 	bl	8006c44 <aes_encrypt>
                    data += mlen;
 8006f68:	9b00      	ldr	r3, [sp, #0]
 8006f6a:	18f6      	adds	r6, r6, r3
                    len -= mlen;
 8006f6c:	1aed      	subs	r5, r5, r3
            }
            while (len > 16) {      /* not last block */
 8006f6e:	2d10      	cmp	r5, #16
 8006f70:	d808      	bhi.n	8006f84 <AES_CMAC_Update+0x86>

                    data += 16;
                    len -= 16;
            }
            /* potential last block, save it */
            memcpy1(ctx->M_last, data, len);
 8006f72:	b2aa      	uxth	r2, r5
 8006f74:	0031      	movs	r1, r6
 8006f76:	9801      	ldr	r0, [sp, #4]
            ctx->M_n = len;
 8006f78:	34fc      	adds	r4, #252	; 0xfc
            memcpy1(ctx->M_last, data, len);
 8006f7a:	f006 f834 	bl	800cfe6 <memcpy1>
            ctx->M_n = len;
 8006f7e:	61a5      	str	r5, [r4, #24]
}
 8006f80:	b007      	add	sp, #28
 8006f82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f84:	0023      	movs	r3, r4
 8006f86:	0032      	movs	r2, r6
 8006f88:	1ca0      	adds	r0, r4, #2
 8006f8a:	33f1      	adds	r3, #241	; 0xf1
 8006f8c:	30ff      	adds	r0, #255	; 0xff
                    XOR(data, ctx->X);
 8006f8e:	7819      	ldrb	r1, [r3, #0]
 8006f90:	7817      	ldrb	r7, [r2, #0]
 8006f92:	3201      	adds	r2, #1
 8006f94:	4079      	eors	r1, r7
 8006f96:	7019      	strb	r1, [r3, #0]
 8006f98:	3301      	adds	r3, #1
 8006f9a:	4283      	cmp	r3, r0
 8006f9c:	d1f7      	bne.n	8006f8e <AES_CMAC_Update+0x90>
                    memcpy1(in, &ctx->X[0], 16); //Bestela ez du ondo iten
 8006f9e:	0027      	movs	r7, r4
 8006fa0:	37f1      	adds	r7, #241	; 0xf1
 8006fa2:	2210      	movs	r2, #16
 8006fa4:	0039      	movs	r1, r7
 8006fa6:	a802      	add	r0, sp, #8
 8006fa8:	f006 f81d 	bl	800cfe6 <memcpy1>
            aes_encrypt( in, in, &ctx->rijndael);
 8006fac:	a902      	add	r1, sp, #8
 8006fae:	0022      	movs	r2, r4
 8006fb0:	0008      	movs	r0, r1
 8006fb2:	f7ff fe47 	bl	8006c44 <aes_encrypt>
                    memcpy1(&ctx->X[0], in, 16);
 8006fb6:	2210      	movs	r2, #16
 8006fb8:	a902      	add	r1, sp, #8
 8006fba:	0038      	movs	r0, r7
 8006fbc:	f006 f813 	bl	800cfe6 <memcpy1>
                    data += 16;
 8006fc0:	3610      	adds	r6, #16
                    len -= 16;
 8006fc2:	3d10      	subs	r5, #16
 8006fc4:	e7d3      	b.n	8006f6e <AES_CMAC_Update+0x70>

08006fc6 <AES_CMAC_Final>:
   
void AES_CMAC_Final(uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX *ctx)
{
 8006fc6:	b570      	push	{r4, r5, r6, lr}
 8006fc8:	000c      	movs	r4, r1
 8006fca:	b088      	sub	sp, #32
            uint8_t K[16];
        uint8_t in[16];
            /* generate subkey K1 */
            memset1(K, '\0', 16);
 8006fcc:	2210      	movs	r2, #16
 8006fce:	2100      	movs	r1, #0
{
 8006fd0:	0005      	movs	r5, r0
            memset1(K, '\0', 16);
 8006fd2:	4668      	mov	r0, sp
 8006fd4:	f006 f81c 	bl	800d010 <memset1>

            //rijndael_encrypt(&ctx->rijndael, K, K);

            aes_encrypt( K, K, &ctx->rijndael);
 8006fd8:	0022      	movs	r2, r4
 8006fda:	4669      	mov	r1, sp
 8006fdc:	4668      	mov	r0, sp
 8006fde:	f7ff fe31 	bl	8006c44 <aes_encrypt>

            if (K[0] & 0x80) {
 8006fe2:	466b      	mov	r3, sp
 8006fe4:	781a      	ldrb	r2, [r3, #0]
                    LSHIFT(K, K);
                   K[15] ^= 0x87;
            } else
                    LSHIFT(K, K);
 8006fe6:	2300      	movs	r3, #0
            if (K[0] & 0x80) {
 8006fe8:	2a7f      	cmp	r2, #127	; 0x7f
 8006fea:	d940      	bls.n	800706e <AES_CMAC_Final+0xa8>
                    LSHIFT(K, K);
 8006fec:	466a      	mov	r2, sp
 8006fee:	4669      	mov	r1, sp
 8006ff0:	5cd2      	ldrb	r2, [r2, r3]
 8006ff2:	3301      	adds	r3, #1
 8006ff4:	5cc9      	ldrb	r1, [r1, r3]
 8006ff6:	0052      	lsls	r2, r2, #1
 8006ff8:	09c9      	lsrs	r1, r1, #7
 8006ffa:	430a      	orrs	r2, r1
 8006ffc:	4669      	mov	r1, sp
 8006ffe:	1e58      	subs	r0, r3, #1
 8007000:	540a      	strb	r2, [r1, r0]
 8007002:	2b0f      	cmp	r3, #15
 8007004:	d1f2      	bne.n	8006fec <AES_CMAC_Final+0x26>
                   K[15] ^= 0x87;
 8007006:	2379      	movs	r3, #121	; 0x79
                    LSHIFT(K, K);
 8007008:	7bca      	ldrb	r2, [r1, #15]
                   K[15] ^= 0x87;
 800700a:	425b      	negs	r3, r3
                    LSHIFT(K, K);
 800700c:	0052      	lsls	r2, r2, #1
                   K[15] ^= 0x87;
 800700e:	4053      	eors	r3, r2
                    LSHIFT(K, K);
 8007010:	466a      	mov	r2, sp
 8007012:	73d3      	strb	r3, [r2, #15]


            if (ctx->M_n == 16) {
 8007014:	0023      	movs	r3, r4
 8007016:	33fc      	adds	r3, #252	; 0xfc
 8007018:	699a      	ldr	r2, [r3, #24]
 800701a:	2a10      	cmp	r2, #16
 800701c:	d137      	bne.n	800708e <AES_CMAC_Final+0xc8>
                    /* last block was a complete block */
                    XOR(K, ctx->M_last);
 800701e:	2300      	movs	r3, #0
 8007020:	1ca2      	adds	r2, r4, #2
 8007022:	32ff      	adds	r2, #255	; 0xff
 8007024:	4668      	mov	r0, sp
 8007026:	7811      	ldrb	r1, [r2, #0]
 8007028:	5cc0      	ldrb	r0, [r0, r3]
 800702a:	3301      	adds	r3, #1
 800702c:	4041      	eors	r1, r0
 800702e:	7011      	strb	r1, [r2, #0]
 8007030:	3201      	adds	r2, #1
 8007032:	2b10      	cmp	r3, #16
 8007034:	d1f6      	bne.n	8007024 <AES_CMAC_Final+0x5e>
 8007036:	0023      	movs	r3, r4
 8007038:	33f1      	adds	r3, #241	; 0xf1
 800703a:	0019      	movs	r1, r3
 800703c:	1ca0      	adds	r0, r4, #2
 800703e:	30ff      	adds	r0, #255	; 0xff
   
                  XOR(K, ctx->M_last);


           }
           XOR(ctx->M_last, ctx->X);
 8007040:	781a      	ldrb	r2, [r3, #0]
 8007042:	7c1e      	ldrb	r6, [r3, #16]
 8007044:	4072      	eors	r2, r6
 8007046:	701a      	strb	r2, [r3, #0]
 8007048:	3301      	adds	r3, #1
 800704a:	4298      	cmp	r0, r3
 800704c:	d1f8      	bne.n	8007040 <AES_CMAC_Final+0x7a>

           //rijndael_encrypt(&ctx->rijndael, ctx->X, digest);

       memcpy1(in, &ctx->X[0], 16); //Bestela ez du ondo iten
 800704e:	a804      	add	r0, sp, #16
 8007050:	2210      	movs	r2, #16
 8007052:	f005 ffc8 	bl	800cfe6 <memcpy1>
       aes_encrypt(in, digest, &ctx->rijndael);
 8007056:	0022      	movs	r2, r4
 8007058:	0029      	movs	r1, r5
 800705a:	a804      	add	r0, sp, #16
 800705c:	f7ff fdf2 	bl	8006c44 <aes_encrypt>
           memset1(K, 0, sizeof K);
 8007060:	2210      	movs	r2, #16
 8007062:	2100      	movs	r1, #0
 8007064:	4668      	mov	r0, sp
 8007066:	f005 ffd3 	bl	800d010 <memset1>

}
 800706a:	b008      	add	sp, #32
 800706c:	bd70      	pop	{r4, r5, r6, pc}
                    LSHIFT(K, K);
 800706e:	466a      	mov	r2, sp
 8007070:	4669      	mov	r1, sp
 8007072:	5cd2      	ldrb	r2, [r2, r3]
 8007074:	3301      	adds	r3, #1
 8007076:	5cc9      	ldrb	r1, [r1, r3]
 8007078:	0052      	lsls	r2, r2, #1
 800707a:	09c9      	lsrs	r1, r1, #7
 800707c:	430a      	orrs	r2, r1
 800707e:	4669      	mov	r1, sp
 8007080:	1e58      	subs	r0, r3, #1
 8007082:	540a      	strb	r2, [r1, r0]
 8007084:	2b0f      	cmp	r3, #15
 8007086:	d1f2      	bne.n	800706e <AES_CMAC_Final+0xa8>
 8007088:	7bcb      	ldrb	r3, [r1, #15]
 800708a:	005b      	lsls	r3, r3, #1
 800708c:	e7c0      	b.n	8007010 <AES_CMAC_Final+0x4a>
                  if (K[0] & 0x80) {
 800708e:	466b      	mov	r3, sp
 8007090:	7819      	ldrb	r1, [r3, #0]
                           LSHIFT(K, K);
 8007092:	2300      	movs	r3, #0
                  if (K[0] & 0x80) {
 8007094:	297f      	cmp	r1, #127	; 0x7f
 8007096:	d92b      	bls.n	80070f0 <AES_CMAC_Final+0x12a>
                          LSHIFT(K, K);
 8007098:	4669      	mov	r1, sp
 800709a:	4668      	mov	r0, sp
 800709c:	5cc9      	ldrb	r1, [r1, r3]
 800709e:	3301      	adds	r3, #1
 80070a0:	5cc0      	ldrb	r0, [r0, r3]
 80070a2:	0049      	lsls	r1, r1, #1
 80070a4:	09c0      	lsrs	r0, r0, #7
 80070a6:	4301      	orrs	r1, r0
 80070a8:	4668      	mov	r0, sp
 80070aa:	1e5e      	subs	r6, r3, #1
 80070ac:	5581      	strb	r1, [r0, r6]
 80070ae:	2b0f      	cmp	r3, #15
 80070b0:	d1f2      	bne.n	8007098 <AES_CMAC_Final+0xd2>
                          K[15] ^= 0x87;
 80070b2:	2379      	movs	r3, #121	; 0x79
                          LSHIFT(K, K);
 80070b4:	7bc1      	ldrb	r1, [r0, #15]
                          K[15] ^= 0x87;
 80070b6:	425b      	negs	r3, r3
                          LSHIFT(K, K);
 80070b8:	0049      	lsls	r1, r1, #1
                          K[15] ^= 0x87;
 80070ba:	404b      	eors	r3, r1
                           LSHIFT(K, K);
 80070bc:	4669      	mov	r1, sp
 80070be:	73cb      	strb	r3, [r1, #15]
                   ctx->M_last[ctx->M_n] = 0x80;
 80070c0:	2180      	movs	r1, #128	; 0x80
 80070c2:	18a3      	adds	r3, r4, r2
 80070c4:	33ff      	adds	r3, #255	; 0xff
 80070c6:	7099      	strb	r1, [r3, #2]
 80070c8:	2100      	movs	r1, #0
                   while (++ctx->M_n < 16)
 80070ca:	1c53      	adds	r3, r2, #1
 80070cc:	2b0f      	cmp	r3, #15
 80070ce:	d91f      	bls.n	8007110 <AES_CMAC_Final+0x14a>
 80070d0:	0022      	movs	r2, r4
 80070d2:	32fc      	adds	r2, #252	; 0xfc
 80070d4:	6193      	str	r3, [r2, #24]
                  XOR(K, ctx->M_last);
 80070d6:	2300      	movs	r3, #0
 80070d8:	1ca2      	adds	r2, r4, #2
 80070da:	32ff      	adds	r2, #255	; 0xff
 80070dc:	4668      	mov	r0, sp
 80070de:	7811      	ldrb	r1, [r2, #0]
 80070e0:	5cc0      	ldrb	r0, [r0, r3]
 80070e2:	3301      	adds	r3, #1
 80070e4:	4041      	eors	r1, r0
 80070e6:	7011      	strb	r1, [r2, #0]
 80070e8:	3201      	adds	r2, #1
 80070ea:	2b10      	cmp	r3, #16
 80070ec:	d1f6      	bne.n	80070dc <AES_CMAC_Final+0x116>
 80070ee:	e7a2      	b.n	8007036 <AES_CMAC_Final+0x70>
                           LSHIFT(K, K);
 80070f0:	4669      	mov	r1, sp
 80070f2:	4668      	mov	r0, sp
 80070f4:	5cc9      	ldrb	r1, [r1, r3]
 80070f6:	3301      	adds	r3, #1
 80070f8:	5cc0      	ldrb	r0, [r0, r3]
 80070fa:	0049      	lsls	r1, r1, #1
 80070fc:	09c0      	lsrs	r0, r0, #7
 80070fe:	4301      	orrs	r1, r0
 8007100:	4668      	mov	r0, sp
 8007102:	1e5e      	subs	r6, r3, #1
 8007104:	5581      	strb	r1, [r0, r6]
 8007106:	2b0f      	cmp	r3, #15
 8007108:	d1f2      	bne.n	80070f0 <AES_CMAC_Final+0x12a>
 800710a:	7bc3      	ldrb	r3, [r0, #15]
 800710c:	005b      	lsls	r3, r3, #1
 800710e:	e7d5      	b.n	80070bc <AES_CMAC_Final+0xf6>
                         ctx->M_last[ctx->M_n] = 0;
 8007110:	3203      	adds	r2, #3
 8007112:	32ff      	adds	r2, #255	; 0xff
 8007114:	18a2      	adds	r2, r4, r2
 8007116:	7011      	strb	r1, [r2, #0]
 8007118:	001a      	movs	r2, r3
 800711a:	e7d6      	b.n	80070ca <AES_CMAC_Final+0x104>

0800711c <DummyCB>:
 * Dummy callback in case if the user provides NULL function pointer
 */
static void DummyCB( void )
{
    return;
}
 800711c:	4770      	bx	lr
	...

08007120 <GetKeyByID>:
{
 8007120:	b570      	push	{r4, r5, r6, lr}
 8007122:	2200      	movs	r2, #0
        if( SeNvmCtx.KeyList[i].KeyID == keyID )
 8007124:	2411      	movs	r4, #17
 8007126:	4d09      	ldr	r5, [pc, #36]	; (800714c <GetKeyByID+0x2c>)
 8007128:	0023      	movs	r3, r4
 800712a:	268b      	movs	r6, #139	; 0x8b
 800712c:	4353      	muls	r3, r2
 800712e:	00b6      	lsls	r6, r6, #2
 8007130:	199b      	adds	r3, r3, r6
 8007132:	195b      	adds	r3, r3, r5
 8007134:	781e      	ldrb	r6, [r3, #0]
 8007136:	4286      	cmp	r6, r0
 8007138:	d102      	bne.n	8007140 <GetKeyByID+0x20>
            return SECURE_ELEMENT_SUCCESS;
 800713a:	2000      	movs	r0, #0
            *keyItem = &( SeNvmCtx.KeyList[i] );
 800713c:	600b      	str	r3, [r1, #0]
}
 800713e:	bd70      	pop	{r4, r5, r6, pc}
 8007140:	3201      	adds	r2, #1
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8007142:	2a18      	cmp	r2, #24
 8007144:	d1f0      	bne.n	8007128 <GetKeyByID+0x8>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8007146:	2003      	movs	r0, #3
 8007148:	e7f9      	b.n	800713e <GetKeyByID+0x1e>
 800714a:	46c0      	nop			; (mov r8, r8)
 800714c:	200003dc 	.word	0x200003dc

08007150 <ComputeCmac.part.0>:
 * \param[IN]  size           - Data buffer size
 * \param[IN]  keyID          - Key identifier to determine the AES key to be used
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint16_t size, KeyIdentifier_t keyID, uint32_t* cmac )
 8007150:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007152:	001d      	movs	r5, r3
        return SECURE_ELEMENT_ERROR_NPE;
    }

    uint8_t Cmac[16];

    AES_CMAC_Init( SeNvmCtx.AesCmacCtx );
 8007154:	4c14      	ldr	r4, [pc, #80]	; (80071a8 <ComputeCmac.part.0+0x58>)
static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint16_t size, KeyIdentifier_t keyID, uint32_t* cmac )
 8007156:	b089      	sub	sp, #36	; 0x24
 8007158:	0006      	movs	r6, r0
    AES_CMAC_Init( SeNvmCtx.AesCmacCtx );
 800715a:	0020      	movs	r0, r4
static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint16_t size, KeyIdentifier_t keyID, uint32_t* cmac )
 800715c:	9101      	str	r1, [sp, #4]
 800715e:	0017      	movs	r7, r2
    AES_CMAC_Init( SeNvmCtx.AesCmacCtx );
 8007160:	f7ff feb6 	bl	8006ed0 <AES_CMAC_Init>

    Key_t* keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 8007164:	0028      	movs	r0, r5
 8007166:	a903      	add	r1, sp, #12
 8007168:	f7ff ffda 	bl	8007120 <GetKeyByID>
 800716c:	1e05      	subs	r5, r0, #0

    if( retval == SECURE_ELEMENT_SUCCESS )
 800716e:	d117      	bne.n	80071a0 <ComputeCmac.part.0+0x50>
    {
        AES_CMAC_SetKey( SeNvmCtx.AesCmacCtx, keyItem->KeyValue );
 8007170:	9b03      	ldr	r3, [sp, #12]
 8007172:	0020      	movs	r0, r4
 8007174:	1c59      	adds	r1, r3, #1
 8007176:	f7ff febb 	bl	8006ef0 <AES_CMAC_SetKey>

        if( micBxBuffer != NULL )
 800717a:	2e00      	cmp	r6, #0
 800717c:	d004      	beq.n	8007188 <ComputeCmac.part.0+0x38>
        {
            AES_CMAC_Update( SeNvmCtx.AesCmacCtx, micBxBuffer, 16 );
 800717e:	2210      	movs	r2, #16
 8007180:	0031      	movs	r1, r6
 8007182:	0020      	movs	r0, r4
 8007184:	f7ff febb 	bl	8006efe <AES_CMAC_Update>
        }

        AES_CMAC_Update( SeNvmCtx.AesCmacCtx, buffer, size );
 8007188:	003a      	movs	r2, r7
 800718a:	9901      	ldr	r1, [sp, #4]
 800718c:	0020      	movs	r0, r4
 800718e:	f7ff feb6 	bl	8006efe <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, SeNvmCtx.AesCmacCtx );
 8007192:	0021      	movs	r1, r4
 8007194:	a804      	add	r0, sp, #16
 8007196:	f7ff ff16 	bl	8006fc6 <AES_CMAC_Final>

        // Bring into the required format
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 | ( uint32_t ) Cmac[0] );
 800719a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800719c:	9a04      	ldr	r2, [sp, #16]
 800719e:	601a      	str	r2, [r3, #0]
    }

    return retval;
}
 80071a0:	0028      	movs	r0, r5
 80071a2:	b009      	add	sp, #36	; 0x24
 80071a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071a6:	46c0      	nop			; (mov r8, r8)
 80071a8:	200004f0 	.word	0x200004f0

080071ac <SecureElementInit>:
/*
 * API functions
 */

SecureElementStatus_t SecureElementInit( SecureElementNvmEvent seNvmCtxChanged )
{
 80071ac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    uint8_t itr = 0;
    uint8_t zeroKey[16] = { 0 };
 80071ae:	2210      	movs	r2, #16
 80071b0:	2100      	movs	r1, #0
{
 80071b2:	0006      	movs	r6, r0
    uint8_t zeroKey[16] = { 0 };
 80071b4:	4668      	mov	r0, sp
 80071b6:	f007 fc44 	bl	800ea42 <memset>

    // Initialize with defaults
    SeNvmCtx.KeyList[itr++].KeyID = APP_KEY;
 80071ba:	238b      	movs	r3, #139	; 0x8b
 80071bc:	2500      	movs	r5, #0
    SeNvmCtx.KeyList[itr++].KeyID = GEN_APP_KEY;
 80071be:	2201      	movs	r2, #1
    SeNvmCtx.KeyList[itr++].KeyID = APP_KEY;
 80071c0:	4c2f      	ldr	r4, [pc, #188]	; (8007280 <SecureElementInit+0xd4>)
 80071c2:	009b      	lsls	r3, r3, #2
 80071c4:	54e5      	strb	r5, [r4, r3]
    SeNvmCtx.KeyList[itr++].KeyID = GEN_APP_KEY;
 80071c6:	4b2f      	ldr	r3, [pc, #188]	; (8007284 <SecureElementInit+0xd8>)
    SeNvmCtx.KeyList[itr++].KeyID = MC_APP_S_KEY_3;
    SeNvmCtx.KeyList[itr++].KeyID = MC_NWK_S_KEY_3;
    SeNvmCtx.KeyList[itr].KeyID = SLOT_RAND_ZERO_KEY;

    // Set standard keys
    memcpy1( SeNvmCtx.KeyList[itr].KeyValue, zeroKey, KEY_SIZE );
 80071c8:	4669      	mov	r1, sp
    SeNvmCtx.KeyList[itr++].KeyID = GEN_APP_KEY;
 80071ca:	54e2      	strb	r2, [r4, r3]
    SeNvmCtx.KeyList[itr++].KeyID = NWK_KEY;
 80071cc:	4b2e      	ldr	r3, [pc, #184]	; (8007288 <SecureElementInit+0xdc>)
 80071ce:	1892      	adds	r2, r2, r2
 80071d0:	54e2      	strb	r2, [r4, r3]
    SeNvmCtx.KeyList[itr++].KeyID = J_S_INT_KEY;
 80071d2:	4b2e      	ldr	r3, [pc, #184]	; (800728c <SecureElementInit+0xe0>)
 80071d4:	3201      	adds	r2, #1
 80071d6:	54e2      	strb	r2, [r4, r3]
    SeNvmCtx.KeyList[itr++].KeyID = J_S_ENC_KEY;
 80071d8:	3311      	adds	r3, #17
 80071da:	3201      	adds	r2, #1
 80071dc:	54e2      	strb	r2, [r4, r3]
    SeNvmCtx.KeyList[itr++].KeyID = F_NWK_S_INT_KEY;
 80071de:	4b2c      	ldr	r3, [pc, #176]	; (8007290 <SecureElementInit+0xe4>)
 80071e0:	3201      	adds	r2, #1
 80071e2:	54e2      	strb	r2, [r4, r3]
    SeNvmCtx.KeyList[itr++].KeyID = S_NWK_S_INT_KEY;
 80071e4:	4b2b      	ldr	r3, [pc, #172]	; (8007294 <SecureElementInit+0xe8>)
 80071e6:	3201      	adds	r2, #1
 80071e8:	54e2      	strb	r2, [r4, r3]
    SeNvmCtx.KeyList[itr++].KeyID = NWK_S_ENC_KEY;
 80071ea:	4b2b      	ldr	r3, [pc, #172]	; (8007298 <SecureElementInit+0xec>)
 80071ec:	3201      	adds	r2, #1
 80071ee:	54e2      	strb	r2, [r4, r3]
    SeNvmCtx.KeyList[itr++].KeyID = APP_S_KEY;
 80071f0:	3311      	adds	r3, #17
 80071f2:	3201      	adds	r2, #1
 80071f4:	54e2      	strb	r2, [r4, r3]
    SeNvmCtx.KeyList[itr++].KeyID = MC_ROOT_KEY;
 80071f6:	4b29      	ldr	r3, [pc, #164]	; (800729c <SecureElementInit+0xf0>)
 80071f8:	3201      	adds	r2, #1
 80071fa:	54e2      	strb	r2, [r4, r3]
    SeNvmCtx.KeyList[itr++].KeyID = MC_KE_KEY;
 80071fc:	4b28      	ldr	r3, [pc, #160]	; (80072a0 <SecureElementInit+0xf4>)
 80071fe:	3276      	adds	r2, #118	; 0x76
 8007200:	54e2      	strb	r2, [r4, r3]
    SeNvmCtx.KeyList[itr++].KeyID = MC_KEY_0;
 8007202:	4b28      	ldr	r3, [pc, #160]	; (80072a4 <SecureElementInit+0xf8>)
 8007204:	3201      	adds	r2, #1
 8007206:	54e2      	strb	r2, [r4, r3]
    SeNvmCtx.KeyList[itr++].KeyID = MC_APP_S_KEY_0;
 8007208:	3311      	adds	r3, #17
 800720a:	3201      	adds	r2, #1
 800720c:	54e2      	strb	r2, [r4, r3]
    SeNvmCtx.KeyList[itr++].KeyID = MC_NWK_S_KEY_0;
 800720e:	4b26      	ldr	r3, [pc, #152]	; (80072a8 <SecureElementInit+0xfc>)
 8007210:	3201      	adds	r2, #1
 8007212:	54e2      	strb	r2, [r4, r3]
    SeNvmCtx.KeyList[itr++].KeyID = MC_KEY_1;
 8007214:	4b25      	ldr	r3, [pc, #148]	; (80072ac <SecureElementInit+0x100>)
 8007216:	3201      	adds	r2, #1
 8007218:	54e2      	strb	r2, [r4, r3]
    SeNvmCtx.KeyList[itr++].KeyID = MC_APP_S_KEY_1;
 800721a:	4b25      	ldr	r3, [pc, #148]	; (80072b0 <SecureElementInit+0x104>)
 800721c:	3201      	adds	r2, #1
 800721e:	54e2      	strb	r2, [r4, r3]
    SeNvmCtx.KeyList[itr++].KeyID = MC_NWK_S_KEY_1;
 8007220:	3311      	adds	r3, #17
 8007222:	3201      	adds	r2, #1
 8007224:	54e2      	strb	r2, [r4, r3]
    SeNvmCtx.KeyList[itr++].KeyID = MC_KEY_2;
 8007226:	4b23      	ldr	r3, [pc, #140]	; (80072b4 <SecureElementInit+0x108>)
 8007228:	3201      	adds	r2, #1
 800722a:	54e2      	strb	r2, [r4, r3]
    SeNvmCtx.KeyList[itr++].KeyID = MC_APP_S_KEY_2;
 800722c:	4b22      	ldr	r3, [pc, #136]	; (80072b8 <SecureElementInit+0x10c>)
 800722e:	3201      	adds	r2, #1
 8007230:	54e2      	strb	r2, [r4, r3]
    SeNvmCtx.KeyList[itr++].KeyID = MC_NWK_S_KEY_2;
 8007232:	4b22      	ldr	r3, [pc, #136]	; (80072bc <SecureElementInit+0x110>)
 8007234:	3201      	adds	r2, #1
 8007236:	54e2      	strb	r2, [r4, r3]
    SeNvmCtx.KeyList[itr++].KeyID = MC_KEY_3;
 8007238:	3311      	adds	r3, #17
 800723a:	3201      	adds	r2, #1
 800723c:	54e2      	strb	r2, [r4, r3]
    SeNvmCtx.KeyList[itr++].KeyID = MC_APP_S_KEY_3;
 800723e:	4b20      	ldr	r3, [pc, #128]	; (80072c0 <SecureElementInit+0x114>)
 8007240:	3201      	adds	r2, #1
 8007242:	54e2      	strb	r2, [r4, r3]
    SeNvmCtx.KeyList[itr++].KeyID = MC_NWK_S_KEY_3;
 8007244:	4b1f      	ldr	r3, [pc, #124]	; (80072c4 <SecureElementInit+0x118>)
 8007246:	3201      	adds	r2, #1
 8007248:	54e2      	strb	r2, [r4, r3]
    SeNvmCtx.KeyList[itr].KeyID = SLOT_RAND_ZERO_KEY;
 800724a:	4b1f      	ldr	r3, [pc, #124]	; (80072c8 <SecureElementInit+0x11c>)
 800724c:	3201      	adds	r2, #1
 800724e:	54e2      	strb	r2, [r4, r3]
    memcpy1( SeNvmCtx.KeyList[itr].KeyValue, zeroKey, KEY_SIZE );
 8007250:	481e      	ldr	r0, [pc, #120]	; (80072cc <SecureElementInit+0x120>)
 8007252:	3a7c      	subs	r2, #124	; 0x7c
 8007254:	f005 fec7 	bl	800cfe6 <memcpy1>

    memset1( SeNvmCtx.DevEui, 0, SE_EUI_SIZE );
 8007258:	2210      	movs	r2, #16
 800725a:	0029      	movs	r1, r5
 800725c:	0020      	movs	r0, r4
 800725e:	f005 fed7 	bl	800d010 <memset1>
    memset1( SeNvmCtx.JoinEui, 0, SE_EUI_SIZE );
 8007262:	2210      	movs	r2, #16
 8007264:	0029      	movs	r1, r5
 8007266:	481a      	ldr	r0, [pc, #104]	; (80072d0 <SecureElementInit+0x124>)
 8007268:	f005 fed2 	bl	800d010 <memset1>
 800726c:	4b19      	ldr	r3, [pc, #100]	; (80072d4 <SecureElementInit+0x128>)

    // Assign callback
    if( seNvmCtxChanged != 0 )
 800726e:	42ae      	cmp	r6, r5
 8007270:	d003      	beq.n	800727a <SecureElementInit+0xce>
    {
        SeNvmCtxChanged = seNvmCtxChanged;
 8007272:	601e      	str	r6, [r3, #0]
    {
        SeNvmCtxChanged = DummyCB;
    }

    return SECURE_ELEMENT_SUCCESS;
}
 8007274:	2000      	movs	r0, #0
 8007276:	b004      	add	sp, #16
 8007278:	bd70      	pop	{r4, r5, r6, pc}
        SeNvmCtxChanged = DummyCB;
 800727a:	4a17      	ldr	r2, [pc, #92]	; (80072d8 <SecureElementInit+0x12c>)
 800727c:	601a      	str	r2, [r3, #0]
 800727e:	e7f9      	b.n	8007274 <SecureElementInit+0xc8>
 8007280:	200003dc 	.word	0x200003dc
 8007284:	0000023d 	.word	0x0000023d
 8007288:	0000024e 	.word	0x0000024e
 800728c:	0000025f 	.word	0x0000025f
 8007290:	00000281 	.word	0x00000281
 8007294:	00000292 	.word	0x00000292
 8007298:	000002a3 	.word	0x000002a3
 800729c:	000002c5 	.word	0x000002c5
 80072a0:	000002d6 	.word	0x000002d6
 80072a4:	000002e7 	.word	0x000002e7
 80072a8:	00000309 	.word	0x00000309
 80072ac:	0000031a 	.word	0x0000031a
 80072b0:	0000032b 	.word	0x0000032b
 80072b4:	0000034d 	.word	0x0000034d
 80072b8:	0000035e 	.word	0x0000035e
 80072bc:	0000036f 	.word	0x0000036f
 80072c0:	00000391 	.word	0x00000391
 80072c4:	000003a2 	.word	0x000003a2
 80072c8:	000003b3 	.word	0x000003b3
 80072cc:	20000790 	.word	0x20000790
 80072d0:	200003ec 	.word	0x200003ec
 80072d4:	200003d8 	.word	0x200003d8
 80072d8:	0800711d 	.word	0x0800711d

080072dc <SecureElementRestoreNvmCtx>:

SecureElementStatus_t SecureElementRestoreNvmCtx( void* seNvmCtx )
{
 80072dc:	0001      	movs	r1, r0
 80072de:	b510      	push	{r4, lr}
        memcpy1( ( uint8_t* ) &SeNvmCtx, ( uint8_t* ) seNvmCtx, sizeof( SeNvmCtx ) );
        return SECURE_ELEMENT_SUCCESS;
    }
    else
    {
        return SECURE_ELEMENT_ERROR_NPE;
 80072e0:	2002      	movs	r0, #2
    if( seNvmCtx != 0 )
 80072e2:	2900      	cmp	r1, #0
 80072e4:	d005      	beq.n	80072f2 <SecureElementRestoreNvmCtx+0x16>
        memcpy1( ( uint8_t* ) &SeNvmCtx, ( uint8_t* ) seNvmCtx, sizeof( SeNvmCtx ) );
 80072e6:	22f1      	movs	r2, #241	; 0xf1
 80072e8:	4802      	ldr	r0, [pc, #8]	; (80072f4 <SecureElementRestoreNvmCtx+0x18>)
 80072ea:	0092      	lsls	r2, r2, #2
 80072ec:	f005 fe7b 	bl	800cfe6 <memcpy1>
        return SECURE_ELEMENT_SUCCESS;
 80072f0:	2000      	movs	r0, #0
    }
}
 80072f2:	bd10      	pop	{r4, pc}
 80072f4:	200003dc 	.word	0x200003dc

080072f8 <SecureElementGetNvmCtx>:

void* SecureElementGetNvmCtx( size_t* seNvmCtxSize )
{
    *seNvmCtxSize = sizeof( SeNvmCtx );
 80072f8:	23f1      	movs	r3, #241	; 0xf1
 80072fa:	009b      	lsls	r3, r3, #2
 80072fc:	6003      	str	r3, [r0, #0]
    return &SeNvmCtx;
}
 80072fe:	4801      	ldr	r0, [pc, #4]	; (8007304 <SecureElementGetNvmCtx+0xc>)
 8007300:	4770      	bx	lr
 8007302:	46c0      	nop			; (mov r8, r8)
 8007304:	200003dc 	.word	0x200003dc

08007308 <SecureElementComputeAesCmac>:

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
}

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint16_t size, KeyIdentifier_t keyID, uint32_t* cmac )
{
 8007308:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800730a:	9c06      	ldr	r4, [sp, #24]
 800730c:	0005      	movs	r5, r0
    if( keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS )
    {
        //Never accept multicast key identifier for cmac computation
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800730e:	2003      	movs	r0, #3
    if( keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS )
 8007310:	2b7e      	cmp	r3, #126	; 0x7e
 8007312:	d808      	bhi.n	8007326 <SecureElementComputeAesCmac+0x1e>
        return SECURE_ELEMENT_ERROR_NPE;
 8007314:	3801      	subs	r0, #1
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 8007316:	2900      	cmp	r1, #0
 8007318:	d005      	beq.n	8007326 <SecureElementComputeAesCmac+0x1e>
 800731a:	2c00      	cmp	r4, #0
 800731c:	d003      	beq.n	8007326 <SecureElementComputeAesCmac+0x1e>
 800731e:	9400      	str	r4, [sp, #0]
 8007320:	0028      	movs	r0, r5
 8007322:	f7ff ff15 	bl	8007150 <ComputeCmac.part.0>
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
}
 8007326:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

08007328 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t* buffer, uint16_t size, uint32_t expectedCmac, KeyIdentifier_t keyID )
{
 8007328:	b530      	push	{r4, r5, lr}
 800732a:	0004      	movs	r4, r0
 800732c:	b085      	sub	sp, #20
 800732e:	0015      	movs	r5, r2
    if( buffer == NULL )
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8007330:	2002      	movs	r0, #2
    if( buffer == NULL )
 8007332:	2c00      	cmp	r4, #0
 8007334:	d00e      	beq.n	8007354 <SecureElementVerifyAesCmac+0x2c>
    }

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
    uint32_t compCmac = 0;
 8007336:	2000      	movs	r0, #0
 8007338:	aa03      	add	r2, sp, #12
 800733a:	9200      	str	r2, [sp, #0]
 800733c:	000a      	movs	r2, r1
 800733e:	0021      	movs	r1, r4
 8007340:	9003      	str	r0, [sp, #12]
 8007342:	f7ff ff05 	bl	8007150 <ComputeCmac.part.0>
    retval = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
    if( retval != SECURE_ELEMENT_SUCCESS )
 8007346:	2800      	cmp	r0, #0
 8007348:	d104      	bne.n	8007354 <SecureElementVerifyAesCmac+0x2c>
    {
        return retval;
    }

    if( expectedCmac != compCmac )
 800734a:	9b03      	ldr	r3, [sp, #12]
 800734c:	1b58      	subs	r0, r3, r5
 800734e:	1e43      	subs	r3, r0, #1
 8007350:	4198      	sbcs	r0, r3
        return SECURE_ELEMENT_ERROR_NPE;
 8007352:	b2c0      	uxtb	r0, r0
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
    }

    return retval;
}
 8007354:	b005      	add	sp, #20
 8007356:	bd30      	pop	{r4, r5, pc}

08007358 <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID, uint8_t* encBuffer )
{
 8007358:	b5f0      	push	{r4, r5, r6, r7, lr}
 800735a:	b085      	sub	sp, #20
 800735c:	9000      	str	r0, [sp, #0]
 800735e:	000e      	movs	r6, r1
 8007360:	0014      	movs	r4, r2
 8007362:	9301      	str	r3, [sp, #4]
    if( buffer == NULL || encBuffer == NULL )
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8007364:	2502      	movs	r5, #2
    if( buffer == NULL || encBuffer == NULL )
 8007366:	2800      	cmp	r0, #0
 8007368:	d01c      	beq.n	80073a4 <SecureElementAesEncrypt+0x4c>
 800736a:	9b01      	ldr	r3, [sp, #4]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d019      	beq.n	80073a4 <SecureElementAesEncrypt+0x4c>
    }

    // Check if the size is divisible by 16,
    if( ( size % 16 ) != 0 )
 8007370:	210f      	movs	r1, #15
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 8007372:	3503      	adds	r5, #3
    if( ( size % 16 ) != 0 )
 8007374:	4031      	ands	r1, r6
 8007376:	d115      	bne.n	80073a4 <SecureElementAesEncrypt+0x4c>
    }

    memset1( SeNvmCtx.AesContext.ksch, '\0', 240 );
 8007378:	4f11      	ldr	r7, [pc, #68]	; (80073c0 <SecureElementAesEncrypt+0x68>)
 800737a:	22f0      	movs	r2, #240	; 0xf0
 800737c:	0038      	movs	r0, r7
 800737e:	f005 fe47 	bl	800d010 <memset1>

    Key_t* pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 8007382:	a903      	add	r1, sp, #12
 8007384:	0020      	movs	r0, r4
 8007386:	f7ff fecb 	bl	8007120 <GetKeyByID>
 800738a:	1e05      	subs	r5, r0, #0

    if( retval == SECURE_ELEMENT_SUCCESS )
 800738c:	d10a      	bne.n	80073a4 <SecureElementAesEncrypt+0x4c>
    {
        aes_set_key( pItem->KeyValue, 16, &SeNvmCtx.AesContext );
 800738e:	9b03      	ldr	r3, [sp, #12]
 8007390:	003a      	movs	r2, r7
 8007392:	1c58      	adds	r0, r3, #1
 8007394:	2110      	movs	r1, #16
 8007396:	f7ff fbd1 	bl	8006b3c <aes_set_key>
 800739a:	0034      	movs	r4, r6
 800739c:	1b30      	subs	r0, r6, r4
 800739e:	b2c0      	uxtb	r0, r0

        uint8_t block = 0;

        while( size != 0 )
 80073a0:	2c00      	cmp	r4, #0
 80073a2:	d102      	bne.n	80073aa <SecureElementAesEncrypt+0x52>
            block = block + 16;
            size = size - 16;
        }
    }
    return retval;
}
 80073a4:	0028      	movs	r0, r5
 80073a6:	b005      	add	sp, #20
 80073a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
            aes_encrypt( &buffer[block], &encBuffer[block], &SeNvmCtx.AesContext );
 80073aa:	9b01      	ldr	r3, [sp, #4]
 80073ac:	003a      	movs	r2, r7
 80073ae:	1819      	adds	r1, r3, r0
 80073b0:	9b00      	ldr	r3, [sp, #0]
            size = size - 16;
 80073b2:	3c10      	subs	r4, #16
            aes_encrypt( &buffer[block], &encBuffer[block], &SeNvmCtx.AesContext );
 80073b4:	1818      	adds	r0, r3, r0
 80073b6:	f7ff fc45 	bl	8006c44 <aes_encrypt>
            size = size - 16;
 80073ba:	b2a4      	uxth	r4, r4
 80073bc:	e7ee      	b.n	800739c <SecureElementAesEncrypt+0x44>
 80073be:	46c0      	nop			; (mov r8, r8)
 80073c0:	200003fc 	.word	0x200003fc

080073c4 <SecureElementSetKey.part.2>:
SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t* key )
 80073c4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80073c6:	000d      	movs	r5, r1
 80073c8:	2300      	movs	r3, #0
        if( SeNvmCtx.KeyList[i].KeyID == keyID )
 80073ca:	2411      	movs	r4, #17
 80073cc:	4a1d      	ldr	r2, [pc, #116]	; (8007444 <SecureElementSetKey.part.2+0x80>)
 80073ce:	0021      	movs	r1, r4
 80073d0:	268b      	movs	r6, #139	; 0x8b
 80073d2:	4359      	muls	r1, r3
 80073d4:	00b6      	lsls	r6, r6, #2
 80073d6:	1989      	adds	r1, r1, r6
 80073d8:	5c51      	ldrb	r1, [r2, r1]
 80073da:	4281      	cmp	r1, r0
 80073dc:	d12c      	bne.n	8007438 <SecureElementSetKey.part.2+0x74>
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
 80073de:	3880      	subs	r0, #128	; 0x80
 80073e0:	b2c0      	uxtb	r0, r0
 80073e2:	2101      	movs	r1, #1
 80073e4:	2809      	cmp	r0, #9
 80073e6:	d802      	bhi.n	80073ee <SecureElementSetKey.part.2+0x2a>
 80073e8:	4c17      	ldr	r4, [pc, #92]	; (8007448 <SecureElementSetKey.part.2+0x84>)
 80073ea:	40c4      	lsrs	r4, r0
 80073ec:	43a1      	bics	r1, r4
 80073ee:	2411      	movs	r4, #17
 80073f0:	435c      	muls	r4, r3
 80073f2:	4b16      	ldr	r3, [pc, #88]	; (800744c <SecureElementSetKey.part.2+0x88>)
 80073f4:	4e16      	ldr	r6, [pc, #88]	; (8007450 <SecureElementSetKey.part.2+0x8c>)
 80073f6:	18e4      	adds	r4, r4, r3
 80073f8:	1914      	adds	r4, r2, r4
                uint8_t decryptedKey[16] = { 0 };
 80073fa:	2210      	movs	r2, #16
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
 80073fc:	2900      	cmp	r1, #0
 80073fe:	d113      	bne.n	8007428 <SecureElementSetKey.part.2+0x64>
                uint8_t decryptedKey[16] = { 0 };
 8007400:	4668      	mov	r0, sp
 8007402:	f007 fb1e 	bl	800ea42 <memset>
                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
 8007406:	466b      	mov	r3, sp
 8007408:	227f      	movs	r2, #127	; 0x7f
 800740a:	2110      	movs	r1, #16
 800740c:	0028      	movs	r0, r5
 800740e:	f7ff ffa3 	bl	8007358 <SecureElementAesEncrypt>
                memcpy1( SeNvmCtx.KeyList[i].KeyValue, decryptedKey, KEY_SIZE );
 8007412:	2210      	movs	r2, #16
                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
 8007414:	0005      	movs	r5, r0
                memcpy1( SeNvmCtx.KeyList[i].KeyValue, decryptedKey, KEY_SIZE );
 8007416:	4669      	mov	r1, sp
 8007418:	0020      	movs	r0, r4
 800741a:	f005 fde4 	bl	800cfe6 <memcpy1>
                SeNvmCtxChanged( );
 800741e:	6833      	ldr	r3, [r6, #0]
 8007420:	4798      	blx	r3
}
 8007422:	0028      	movs	r0, r5
 8007424:	b004      	add	sp, #16
 8007426:	bd70      	pop	{r4, r5, r6, pc}
                memcpy1( SeNvmCtx.KeyList[i].KeyValue, key, KEY_SIZE );
 8007428:	0029      	movs	r1, r5
 800742a:	0020      	movs	r0, r4
 800742c:	f005 fddb 	bl	800cfe6 <memcpy1>
                SeNvmCtxChanged( );
 8007430:	6833      	ldr	r3, [r6, #0]
 8007432:	4798      	blx	r3
                return SECURE_ELEMENT_SUCCESS;
 8007434:	2500      	movs	r5, #0
 8007436:	e7f4      	b.n	8007422 <SecureElementSetKey.part.2+0x5e>
 8007438:	3301      	adds	r3, #1
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800743a:	2b18      	cmp	r3, #24
 800743c:	d1c7      	bne.n	80073ce <SecureElementSetKey.part.2+0xa>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800743e:	2503      	movs	r5, #3
 8007440:	e7ef      	b.n	8007422 <SecureElementSetKey.part.2+0x5e>
 8007442:	46c0      	nop			; (mov r8, r8)
 8007444:	200003dc 	.word	0x200003dc
 8007448:	00000249 	.word	0x00000249
 800744c:	0000022d 	.word	0x0000022d
 8007450:	200003d8 	.word	0x200003d8

08007454 <SecureElementSetKey>:
{
 8007454:	b510      	push	{r4, lr}
        return SECURE_ELEMENT_ERROR_NPE;
 8007456:	2302      	movs	r3, #2
    if( key == NULL )
 8007458:	2900      	cmp	r1, #0
 800745a:	d002      	beq.n	8007462 <SecureElementSetKey+0xe>
 800745c:	f7ff ffb2 	bl	80073c4 <SecureElementSetKey.part.2>
 8007460:	0003      	movs	r3, r0
}
 8007462:	0018      	movs	r0, r3
 8007464:	bd10      	pop	{r4, pc}

08007466 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( Version_t version, uint8_t* input, KeyIdentifier_t rootKeyID, KeyIdentifier_t targetKeyID )
{
 8007466:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007468:	0004      	movs	r4, r0
 800746a:	b085      	sub	sp, #20
 800746c:	000f      	movs	r7, r1
 800746e:	0015      	movs	r5, r2
 8007470:	001e      	movs	r6, r3
    if( input == NULL )
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8007472:	2002      	movs	r0, #2
    if( input == NULL )
 8007474:	2900      	cmp	r1, #0
 8007476:	d00d      	beq.n	8007494 <SecureElementDeriveAndStoreKey+0x2e>
    }

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
    uint8_t key[16] = { 0 };
 8007478:	2210      	movs	r2, #16
 800747a:	2100      	movs	r1, #0
 800747c:	4668      	mov	r0, sp
 800747e:	f007 fae0 	bl	800ea42 <memset>

    // In case of MC_KE_KEY, prevent other keys than NwkKey or AppKey for LoRaWAN 1.1 or later
    if( targetKeyID == MC_KE_KEY )
 8007482:	2e7f      	cmp	r6, #127	; 0x7f
 8007484:	d10b      	bne.n	800749e <SecureElementDeriveAndStoreKey+0x38>
    {
        if( ( ( rootKeyID == APP_KEY ) && ( version.Fields.Minor == 0 ) ) || ( rootKeyID == NWK_KEY ) )
 8007486:	2d00      	cmp	r5, #0
 8007488:	d106      	bne.n	8007498 <SecureElementDeriveAndStoreKey+0x32>
 800748a:	0224      	lsls	r4, r4, #8
 800748c:	0e24      	lsrs	r4, r4, #24
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800748e:	2003      	movs	r0, #3
        if( ( ( rootKeyID == APP_KEY ) && ( version.Fields.Minor == 0 ) ) || ( rootKeyID == NWK_KEY ) )
 8007490:	2c00      	cmp	r4, #0
 8007492:	d104      	bne.n	800749e <SecureElementDeriveAndStoreKey+0x38>
    {
        return retval;
    }

    return SECURE_ELEMENT_SUCCESS;
}
 8007494:	b005      	add	sp, #20
 8007496:	bdf0      	pop	{r4, r5, r6, r7, pc}
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8007498:	2003      	movs	r0, #3
        if( ( ( rootKeyID == APP_KEY ) && ( version.Fields.Minor == 0 ) ) || ( rootKeyID == NWK_KEY ) )
 800749a:	2d02      	cmp	r5, #2
 800749c:	d0fa      	beq.n	8007494 <SecureElementDeriveAndStoreKey+0x2e>
    retval = SecureElementAesEncrypt( input, 16, rootKeyID, key );
 800749e:	466b      	mov	r3, sp
 80074a0:	002a      	movs	r2, r5
 80074a2:	2110      	movs	r1, #16
 80074a4:	0038      	movs	r0, r7
 80074a6:	f7ff ff57 	bl	8007358 <SecureElementAesEncrypt>
    if( retval != SECURE_ELEMENT_SUCCESS )
 80074aa:	2800      	cmp	r0, #0
 80074ac:	d1f2      	bne.n	8007494 <SecureElementDeriveAndStoreKey+0x2e>
 80074ae:	4669      	mov	r1, sp
 80074b0:	0030      	movs	r0, r6
 80074b2:	f7ff ff87 	bl	80073c4 <SecureElementSetKey.part.2>
 80074b6:	e7ed      	b.n	8007494 <SecureElementDeriveAndStoreKey+0x2e>

080074b8 <SecureElementRandomNumber>:

SecureElementStatus_t SecureElementRandomNumber( uint32_t* randomNum )
{
 80074b8:	b513      	push	{r0, r1, r4, lr}
 80074ba:	0004      	movs	r4, r0
    if( randomNum == NULL )
    {
        return SECURE_ELEMENT_ERROR_NPE;
 80074bc:	2002      	movs	r0, #2
    if( randomNum == NULL )
 80074be:	2c00      	cmp	r4, #0
 80074c0:	d005      	beq.n	80074ce <SecureElementRandomNumber+0x16>
    }
    *randomNum = Radio.Random( );
 80074c2:	4b03      	ldr	r3, [pc, #12]	; (80074d0 <SecureElementRandomNumber+0x18>)
 80074c4:	69db      	ldr	r3, [r3, #28]
 80074c6:	9301      	str	r3, [sp, #4]
 80074c8:	4798      	blx	r3
 80074ca:	6020      	str	r0, [r4, #0]
    return SECURE_ELEMENT_SUCCESS;
 80074cc:	2000      	movs	r0, #0
}
 80074ce:	bd16      	pop	{r1, r2, r4, pc}
 80074d0:	0800f5a4 	.word	0x0800f5a4

080074d4 <SecureElementSetDevEui>:

SecureElementStatus_t SecureElementSetDevEui( uint8_t* devEui )
{
 80074d4:	0001      	movs	r1, r0
 80074d6:	b510      	push	{r4, lr}
    if( devEui == NULL )
    {
        return SECURE_ELEMENT_ERROR_NPE;
 80074d8:	2002      	movs	r0, #2
    if( devEui == NULL )
 80074da:	2900      	cmp	r1, #0
 80074dc:	d007      	beq.n	80074ee <SecureElementSetDevEui+0x1a>
    }
    memcpy1( SeNvmCtx.DevEui, devEui, SE_EUI_SIZE );
 80074de:	4804      	ldr	r0, [pc, #16]	; (80074f0 <SecureElementSetDevEui+0x1c>)
 80074e0:	2210      	movs	r2, #16
 80074e2:	f005 fd80 	bl	800cfe6 <memcpy1>
    SeNvmCtxChanged( );
 80074e6:	4b03      	ldr	r3, [pc, #12]	; (80074f4 <SecureElementSetDevEui+0x20>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4798      	blx	r3
    return SECURE_ELEMENT_SUCCESS;
 80074ec:	2000      	movs	r0, #0
}
 80074ee:	bd10      	pop	{r4, pc}
 80074f0:	200003dc 	.word	0x200003dc
 80074f4:	200003d8 	.word	0x200003d8

080074f8 <SecureElementGetDevEui>:

uint8_t* SecureElementGetDevEui( void )
{
    return SeNvmCtx.DevEui;
}
 80074f8:	4800      	ldr	r0, [pc, #0]	; (80074fc <SecureElementGetDevEui+0x4>)
 80074fa:	4770      	bx	lr
 80074fc:	200003dc 	.word	0x200003dc

08007500 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t* joinEui )
{
 8007500:	0001      	movs	r1, r0
 8007502:	b510      	push	{r4, lr}
    if( joinEui == NULL )
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8007504:	2002      	movs	r0, #2
    if( joinEui == NULL )
 8007506:	2900      	cmp	r1, #0
 8007508:	d007      	beq.n	800751a <SecureElementSetJoinEui+0x1a>
    }
    memcpy1( SeNvmCtx.JoinEui, joinEui, SE_EUI_SIZE );
 800750a:	4804      	ldr	r0, [pc, #16]	; (800751c <SecureElementSetJoinEui+0x1c>)
 800750c:	2210      	movs	r2, #16
 800750e:	f005 fd6a 	bl	800cfe6 <memcpy1>
    SeNvmCtxChanged( );
 8007512:	4b03      	ldr	r3, [pc, #12]	; (8007520 <SecureElementSetJoinEui+0x20>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	4798      	blx	r3
    return SECURE_ELEMENT_SUCCESS;
 8007518:	2000      	movs	r0, #0
}
 800751a:	bd10      	pop	{r4, pc}
 800751c:	200003ec 	.word	0x200003ec
 8007520:	200003d8 	.word	0x200003d8

08007524 <SecureElementGetJoinEui>:

uint8_t* SecureElementGetJoinEui( void )
{
    return SeNvmCtx.JoinEui;
}
 8007524:	4800      	ldr	r0, [pc, #0]	; (8007528 <SecureElementGetJoinEui+0x4>)
 8007526:	4770      	bx	lr
 8007528:	200003ec 	.word	0x200003ec

0800752c <OnRadioRxError>:
#endif
}

static void OnRadioRxError( void )
{
    LoRaMacRadioEvents.Events.RxError = 1;
 800752c:	2302      	movs	r3, #2
 800752e:	4a08      	ldr	r2, [pc, #32]	; (8007550 <OnRadioRxError+0x24>)
{
 8007530:	b510      	push	{r4, lr}
    LoRaMacRadioEvents.Events.RxError = 1;
 8007532:	7811      	ldrb	r1, [r2, #0]
 8007534:	430b      	orrs	r3, r1
 8007536:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8007538:	23d2      	movs	r3, #210	; 0xd2
 800753a:	4a06      	ldr	r2, [pc, #24]	; (8007554 <OnRadioRxError+0x28>)
 800753c:	009b      	lsls	r3, r3, #2
 800753e:	58d3      	ldr	r3, [r2, r3]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d003      	beq.n	800754c <OnRadioRxError+0x20>
 8007544:	68db      	ldr	r3, [r3, #12]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d000      	beq.n	800754c <OnRadioRxError+0x20>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800754a:	4798      	blx	r3
    }
}
 800754c:	bd10      	pop	{r4, pc}
 800754e:	46c0      	nop			; (mov r8, r8)
 8007550:	200007a0 	.word	0x200007a0
 8007554:	20000980 	.word	0x20000980

08007558 <UpdateRxSlotIdleState>:
#endif
}

static void UpdateRxSlotIdleState( void )
{
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 8007558:	4b05      	ldr	r3, [pc, #20]	; (8007570 <UpdateRxSlotIdleState+0x18>)
 800755a:	4a06      	ldr	r2, [pc, #24]	; (8007574 <UpdateRxSlotIdleState+0x1c>)
 800755c:	589a      	ldr	r2, [r3, r2]
 800755e:	32f0      	adds	r2, #240	; 0xf0
 8007560:	7811      	ldrb	r1, [r2, #0]
 8007562:	2290      	movs	r2, #144	; 0x90
 8007564:	00d2      	lsls	r2, r2, #3
 8007566:	2902      	cmp	r1, #2
 8007568:	d000      	beq.n	800756c <UpdateRxSlotIdleState+0x14>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 800756a:	2106      	movs	r1, #6
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 800756c:	5499      	strb	r1, [r3, r2]
    }
}
 800756e:	4770      	bx	lr
 8007570:	20000980 	.word	0x20000980
 8007574:	00000484 	.word	0x00000484

08007578 <StopRetransmission>:
    return false;
}

static bool StopRetransmission( void )
{
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8007578:	4b11      	ldr	r3, [pc, #68]	; (80075c0 <StopRetransmission+0x48>)
 800757a:	4a12      	ldr	r2, [pc, #72]	; (80075c4 <StopRetransmission+0x4c>)
 800757c:	5c9a      	ldrb	r2, [r3, r2]
 800757e:	0792      	lsls	r2, r2, #30
 8007580:	d503      	bpl.n	800758a <StopRetransmission+0x12>
        ( ( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_1 ) &&
 8007582:	4a11      	ldr	r2, [pc, #68]	; (80075c8 <StopRetransmission+0x50>)
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8007584:	5c9a      	ldrb	r2, [r3, r2]
 8007586:	2a01      	cmp	r2, #1
 8007588:	d90a      	bls.n	80075a0 <StopRetransmission+0x28>
          ( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_2 ) ) )
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( MacCtx.NvmCtx->AdrCtrlOn == true )
 800758a:	4a10      	ldr	r2, [pc, #64]	; (80075cc <StopRetransmission+0x54>)
 800758c:	589a      	ldr	r2, [r3, r2]
 800758e:	0011      	movs	r1, r2
 8007590:	31f2      	adds	r1, #242	; 0xf2
 8007592:	7809      	ldrb	r1, [r1, #0]
 8007594:	2900      	cmp	r1, #0
 8007596:	d003      	beq.n	80075a0 <StopRetransmission+0x28>
        {
            MacCtx.NvmCtx->AdrAckCounter++;
 8007598:	32f4      	adds	r2, #244	; 0xf4
 800759a:	6811      	ldr	r1, [r2, #0]
 800759c:	3101      	adds	r1, #1
 800759e:	6011      	str	r1, [r2, #0]
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 80075a0:	2182      	movs	r1, #130	; 0x82
 80075a2:	2200      	movs	r2, #0
 80075a4:	00c9      	lsls	r1, r1, #3
 80075a6:	545a      	strb	r2, [r3, r1]
    MacCtx.NodeAckRequested = false;
 80075a8:	4909      	ldr	r1, [pc, #36]	; (80075d0 <StopRetransmission+0x58>)
 80075aa:	545a      	strb	r2, [r3, r1]
    MacCtx.AckTimeoutRetry = false;
 80075ac:	4909      	ldr	r1, [pc, #36]	; (80075d4 <StopRetransmission+0x5c>)
 80075ae:	545a      	strb	r2, [r3, r1]
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 80075b0:	39d3      	subs	r1, #211	; 0xd3
 80075b2:	5858      	ldr	r0, [r3, r1]
 80075b4:	3202      	adds	r2, #2
 80075b6:	4390      	bics	r0, r2
 80075b8:	5058      	str	r0, [r3, r1]

    return true;
}
 80075ba:	2001      	movs	r0, #1
 80075bc:	4770      	bx	lr
 80075be:	46c0      	nop			; (mov r8, r8)
 80075c0:	20000980 	.word	0x20000980
 80075c4:	00000481 	.word	0x00000481
 80075c8:	0000042d 	.word	0x0000042d
 80075cc:	00000484 	.word	0x00000484
 80075d0:	00000414 	.word	0x00000414
 80075d4:	00000413 	.word	0x00000413

080075d8 <CallNvmCtxCallback>:
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
}

static void CallNvmCtxCallback( LoRaMacNvmCtxModule_t module )
{
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->NvmContextChange != NULL ) )
 80075d8:	23d2      	movs	r3, #210	; 0xd2
 80075da:	4a05      	ldr	r2, [pc, #20]	; (80075f0 <CallNvmCtxCallback+0x18>)
 80075dc:	009b      	lsls	r3, r3, #2
 80075de:	58d3      	ldr	r3, [r2, r3]
{
 80075e0:	b510      	push	{r4, lr}
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->NvmContextChange != NULL ) )
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d003      	beq.n	80075ee <CallNvmCtxCallback+0x16>
 80075e6:	689b      	ldr	r3, [r3, #8]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d000      	beq.n	80075ee <CallNvmCtxCallback+0x16>
    {
        MacCtx.MacCallbacks->NvmContextChange( module );
 80075ec:	4798      	blx	r3
    }
}
 80075ee:	bd10      	pop	{r4, pc}
 80075f0:	20000980 	.word	0x20000980

080075f4 <EventMacNvmCtxChanged>:

static void EventMacNvmCtxChanged( void )
{
 80075f4:	b510      	push	{r4, lr}
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_MAC );
 80075f6:	2000      	movs	r0, #0
 80075f8:	f7ff ffee 	bl	80075d8 <CallNvmCtxCallback>
}
 80075fc:	bd10      	pop	{r4, pc}

080075fe <EventRegionNvmCtxChanged>:

static void EventRegionNvmCtxChanged( void )
{
 80075fe:	b510      	push	{r4, lr}
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_REGION );
 8007600:	2001      	movs	r0, #1
 8007602:	f7ff ffe9 	bl	80075d8 <CallNvmCtxCallback>
}
 8007606:	bd10      	pop	{r4, pc}

08007608 <EventCryptoNvmCtxChanged>:

static void EventCryptoNvmCtxChanged( void )
{
 8007608:	b510      	push	{r4, lr}
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_CRYPTO );
 800760a:	2002      	movs	r0, #2
 800760c:	f7ff ffe4 	bl	80075d8 <CallNvmCtxCallback>
}
 8007610:	bd10      	pop	{r4, pc}

08007612 <EventSecureElementNvmCtxChanged>:

static void EventSecureElementNvmCtxChanged( void )
{
 8007612:	b510      	push	{r4, lr}
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_SECURE_ELEMENT );
 8007614:	2003      	movs	r0, #3
 8007616:	f7ff ffdf 	bl	80075d8 <CallNvmCtxCallback>
}
 800761a:	bd10      	pop	{r4, pc}

0800761c <EventCommandsNvmCtxChanged>:

static void EventCommandsNvmCtxChanged( void )
{
 800761c:	b510      	push	{r4, lr}
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_COMMANDS );
 800761e:	2004      	movs	r0, #4
 8007620:	f7ff ffda 	bl	80075d8 <CallNvmCtxCallback>
}
 8007624:	bd10      	pop	{r4, pc}

08007626 <EventClassBNvmCtxChanged>:

static void EventClassBNvmCtxChanged( void )
{
 8007626:	b510      	push	{r4, lr}
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_CLASS_B );
 8007628:	2005      	movs	r0, #5
 800762a:	f7ff ffd5 	bl	80075d8 <CallNvmCtxCallback>
}
 800762e:	bd10      	pop	{r4, pc}

08007630 <EventConfirmQueueNvmCtxChanged>:

static void EventConfirmQueueNvmCtxChanged( void )
{
 8007630:	b510      	push	{r4, lr}
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_CONFIRM_QUEUE );
 8007632:	2006      	movs	r0, #6
 8007634:	f7ff ffd0 	bl	80075d8 <CallNvmCtxCallback>
}
 8007638:	bd10      	pop	{r4, pc}
	...

0800763c <GetMaxAppPayloadWithoutFOptsLength>:
{
 800763c:	b507      	push	{r0, r1, r2, lr}
    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800763e:	4b0c      	ldr	r3, [pc, #48]	; (8007670 <GetMaxAppPayloadWithoutFOptsLength+0x34>)
 8007640:	4a0c      	ldr	r2, [pc, #48]	; (8007674 <GetMaxAppPayloadWithoutFOptsLength+0x38>)
 8007642:	4669      	mov	r1, sp
 8007644:	58d3      	ldr	r3, [r2, r3]
 8007646:	2296      	movs	r2, #150	; 0x96
 8007648:	0052      	lsls	r2, r2, #1
 800764a:	5c9a      	ldrb	r2, [r3, r2]
    getPhy.Datarate = datarate;
 800764c:	7048      	strb	r0, [r1, #1]
    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800764e:	708a      	strb	r2, [r1, #2]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 8007650:	220d      	movs	r2, #13
 8007652:	700a      	strb	r2, [r1, #0]
    if( MacCtx.NvmCtx->RepeaterSupport == true )
 8007654:	2240      	movs	r2, #64	; 0x40
 8007656:	32ff      	adds	r2, #255	; 0xff
 8007658:	5c9a      	ldrb	r2, [r3, r2]
 800765a:	2a00      	cmp	r2, #0
 800765c:	d001      	beq.n	8007662 <GetMaxAppPayloadWithoutFOptsLength+0x26>
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800765e:	220e      	movs	r2, #14
 8007660:	700a      	strb	r2, [r1, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8007662:	7818      	ldrb	r0, [r3, #0]
 8007664:	4669      	mov	r1, sp
 8007666:	f003 fdfb 	bl	800b260 <RegionGetPhyParam>
    return phyParam.Value;
 800766a:	b2c0      	uxtb	r0, r0
}
 800766c:	bd0e      	pop	{r1, r2, r3, pc}
 800766e:	46c0      	nop			; (mov r8, r8)
 8007670:	00000484 	.word	0x00000484
 8007674:	20000980 	.word	0x20000980

08007678 <OnAckTimeoutTimerEvent>:
{
 8007678:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.AckTimeoutTimer );
 800767a:	4810      	ldr	r0, [pc, #64]	; (80076bc <OnAckTimeoutTimerEvent+0x44>)
 800767c:	f005 fbba 	bl	800cdf4 <TimerStop>
    if( MacCtx.NodeAckRequested == true )
 8007680:	4b0f      	ldr	r3, [pc, #60]	; (80076c0 <OnAckTimeoutTimerEvent+0x48>)
 8007682:	4a10      	ldr	r2, [pc, #64]	; (80076c4 <OnAckTimeoutTimerEvent+0x4c>)
 8007684:	5c9a      	ldrb	r2, [r3, r2]
 8007686:	2a00      	cmp	r2, #0
 8007688:	d002      	beq.n	8007690 <OnAckTimeoutTimerEvent+0x18>
        MacCtx.AckTimeoutRetry = true;
 800768a:	2101      	movs	r1, #1
 800768c:	4a0e      	ldr	r2, [pc, #56]	; (80076c8 <OnAckTimeoutTimerEvent+0x50>)
 800768e:	5499      	strb	r1, [r3, r2]
    if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 8007690:	4a0e      	ldr	r2, [pc, #56]	; (80076cc <OnAckTimeoutTimerEvent+0x54>)
 8007692:	589a      	ldr	r2, [r3, r2]
 8007694:	32f0      	adds	r2, #240	; 0xf0
 8007696:	7812      	ldrb	r2, [r2, #0]
 8007698:	2a02      	cmp	r2, #2
 800769a:	d104      	bne.n	80076a6 <OnAckTimeoutTimerEvent+0x2e>
        MacCtx.MacFlags.Bits.MacDone = 1;
 800769c:	490c      	ldr	r1, [pc, #48]	; (80076d0 <OnAckTimeoutTimerEvent+0x58>)
 800769e:	321e      	adds	r2, #30
 80076a0:	5c58      	ldrb	r0, [r3, r1]
 80076a2:	4302      	orrs	r2, r0
 80076a4:	545a      	strb	r2, [r3, r1]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 80076a6:	22d2      	movs	r2, #210	; 0xd2
 80076a8:	0092      	lsls	r2, r2, #2
 80076aa:	589b      	ldr	r3, [r3, r2]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d003      	beq.n	80076b8 <OnAckTimeoutTimerEvent+0x40>
 80076b0:	68db      	ldr	r3, [r3, #12]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d000      	beq.n	80076b8 <OnAckTimeoutTimerEvent+0x40>
        MacCtx.MacCallbacks->MacProcessNotify( );
 80076b6:	4798      	blx	r3
}
 80076b8:	bd10      	pop	{r4, pc}
 80076ba:	46c0      	nop			; (mov r8, r8)
 80076bc:	20000d78 	.word	0x20000d78
 80076c0:	20000980 	.word	0x20000980
 80076c4:	00000414 	.word	0x00000414
 80076c8:	00000413 	.word	0x00000413
 80076cc:	00000484 	.word	0x00000484
 80076d0:	00000481 	.word	0x00000481

080076d4 <PrepareRxDoneAbort>:
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 80076d4:	22d0      	movs	r2, #208	; 0xd0
 80076d6:	2380      	movs	r3, #128	; 0x80
{
 80076d8:	b510      	push	{r4, lr}
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 80076da:	4c0a      	ldr	r4, [pc, #40]	; (8007704 <PrepareRxDoneAbort+0x30>)
 80076dc:	0092      	lsls	r2, r2, #2
 80076de:	58a1      	ldr	r1, [r4, r2]
 80076e0:	430b      	orrs	r3, r1
 80076e2:	50a3      	str	r3, [r4, r2]
    if( MacCtx.NodeAckRequested == true )
 80076e4:	4b08      	ldr	r3, [pc, #32]	; (8007708 <PrepareRxDoneAbort+0x34>)
 80076e6:	5ce3      	ldrb	r3, [r4, r3]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d002      	beq.n	80076f2 <PrepareRxDoneAbort+0x1e>
        OnAckTimeoutTimerEvent( NULL );
 80076ec:	2000      	movs	r0, #0
 80076ee:	f7ff ffc3 	bl	8007678 <OnAckTimeoutTimerEvent>
    MacCtx.MacFlags.Bits.MacDone = 1;
 80076f2:	2122      	movs	r1, #34	; 0x22
    MacCtx.MacFlags.Bits.McpsInd = 1;
 80076f4:	4a05      	ldr	r2, [pc, #20]	; (800770c <PrepareRxDoneAbort+0x38>)
 80076f6:	5ca3      	ldrb	r3, [r4, r2]
    MacCtx.MacFlags.Bits.MacDone = 1;
 80076f8:	430b      	orrs	r3, r1
 80076fa:	54a3      	strb	r3, [r4, r2]
    UpdateRxSlotIdleState( );
 80076fc:	f7ff ff2c 	bl	8007558 <UpdateRxSlotIdleState>
}
 8007700:	bd10      	pop	{r4, pc}
 8007702:	46c0      	nop			; (mov r8, r8)
 8007704:	20000980 	.word	0x20000980
 8007708:	00000414 	.word	0x00000414
 800770c:	00000481 	.word	0x00000481

08007710 <HandleRadioRxErrorTimeout>:
{
 8007710:	b5f0      	push	{r4, r5, r6, r7, lr}
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 8007712:	4c2d      	ldr	r4, [pc, #180]	; (80077c8 <HandleRadioRxErrorTimeout+0xb8>)
 8007714:	4e2d      	ldr	r6, [pc, #180]	; (80077cc <HandleRadioRxErrorTimeout+0xbc>)
{
 8007716:	b085      	sub	sp, #20
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 8007718:	59a3      	ldr	r3, [r4, r6]
{
 800771a:	9001      	str	r0, [sp, #4]
 800771c:	9102      	str	r1, [sp, #8]
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 800771e:	33f0      	adds	r3, #240	; 0xf0
 8007720:	781b      	ldrb	r3, [r3, #0]
 8007722:	2b02      	cmp	r3, #2
 8007724:	d003      	beq.n	800772e <HandleRadioRxErrorTimeout+0x1e>
        Radio.Sleep( );
 8007726:	4b2a      	ldr	r3, [pc, #168]	; (80077d0 <HandleRadioRxErrorTimeout+0xc0>)
 8007728:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800772a:	9303      	str	r3, [sp, #12]
 800772c:	4798      	blx	r3
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800772e:	f002 fe20 	bl	800a372 <LoRaMacClassBIsBeaconExpected>
 8007732:	1e05      	subs	r5, r0, #0
 8007734:	d005      	beq.n	8007742 <HandleRadioRxErrorTimeout+0x32>
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 8007736:	2002      	movs	r0, #2
 8007738:	f002 fe11 	bl	800a35e <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 800773c:	2000      	movs	r0, #0
 800773e:	f002 fe13 	bl	800a368 <LoRaMacClassBBeaconTimerEvent>
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 8007742:	59a3      	ldr	r3, [r4, r6]
 8007744:	33f0      	adds	r3, #240	; 0xf0
 8007746:	781b      	ldrb	r3, [r3, #0]
 8007748:	2b01      	cmp	r3, #1
 800774a:	d118      	bne.n	800777e <HandleRadioRxErrorTimeout+0x6e>
        if( LoRaMacClassBIsPingExpected( ) == true )
 800774c:	f002 fe13 	bl	800a376 <LoRaMacClassBIsPingExpected>
 8007750:	1e07      	subs	r7, r0, #0
 8007752:	d006      	beq.n	8007762 <HandleRadioRxErrorTimeout+0x52>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8007754:	2000      	movs	r0, #0
 8007756:	f002 fe03 	bl	800a360 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800775a:	2000      	movs	r0, #0
 800775c:	f002 fe05 	bl	800a36a <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 8007760:	003d      	movs	r5, r7
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 8007762:	f002 fe0a 	bl	800a37a <LoRaMacClassBIsMulticastExpected>
 8007766:	2800      	cmp	r0, #0
 8007768:	d009      	beq.n	800777e <HandleRadioRxErrorTimeout+0x6e>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800776a:	2000      	movs	r0, #0
 800776c:	f002 fdf9 	bl	800a362 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8007770:	2000      	movs	r0, #0
 8007772:	f002 fdfb 	bl	800a36c <LoRaMacClassBMulticastSlotTimerEvent>
    UpdateRxSlotIdleState( );
 8007776:	f7ff feef 	bl	8007558 <UpdateRxSlotIdleState>
}
 800777a:	b005      	add	sp, #20
 800777c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( classBRx == false )
 800777e:	2d00      	cmp	r5, #0
 8007780:	d1f9      	bne.n	8007776 <HandleRadioRxErrorTimeout+0x66>
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8007782:	2290      	movs	r2, #144	; 0x90
 8007784:	00d2      	lsls	r2, r2, #3
 8007786:	4b13      	ldr	r3, [pc, #76]	; (80077d4 <HandleRadioRxErrorTimeout+0xc4>)
 8007788:	5ca2      	ldrb	r2, [r4, r2]
 800778a:	5ce3      	ldrb	r3, [r4, r3]
 800778c:	2a00      	cmp	r2, #0
 800778e:	d108      	bne.n	80077a2 <HandleRadioRxErrorTimeout+0x92>
            if( MacCtx.NodeAckRequested == true )
 8007790:	2b00      	cmp	r3, #0
 8007792:	d002      	beq.n	800779a <HandleRadioRxErrorTimeout+0x8a>
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 8007794:	4b10      	ldr	r3, [pc, #64]	; (80077d8 <HandleRadioRxErrorTimeout+0xc8>)
 8007796:	9a01      	ldr	r2, [sp, #4]
 8007798:	54e2      	strb	r2, [r4, r3]
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 800779a:	9801      	ldr	r0, [sp, #4]
 800779c:	f002 ffc4 	bl	800a728 <LoRaMacConfirmQueueSetStatusCmn>
 80077a0:	e7e9      	b.n	8007776 <HandleRadioRxErrorTimeout+0x66>
            if( MacCtx.NodeAckRequested == true )
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d002      	beq.n	80077ac <HandleRadioRxErrorTimeout+0x9c>
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 80077a6:	4b0c      	ldr	r3, [pc, #48]	; (80077d8 <HandleRadioRxErrorTimeout+0xc8>)
 80077a8:	9a02      	ldr	r2, [sp, #8]
 80077aa:	54e2      	strb	r2, [r4, r3]
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 80077ac:	9802      	ldr	r0, [sp, #8]
 80077ae:	f002 ffbb 	bl	800a728 <LoRaMacConfirmQueueSetStatusCmn>
            if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 80077b2:	59a3      	ldr	r3, [r4, r6]
 80077b4:	33f0      	adds	r3, #240	; 0xf0
 80077b6:	781b      	ldrb	r3, [r3, #0]
 80077b8:	2b02      	cmp	r3, #2
 80077ba:	d0dc      	beq.n	8007776 <HandleRadioRxErrorTimeout+0x66>
                MacCtx.MacFlags.Bits.MacDone = 1;
 80077bc:	2320      	movs	r3, #32
 80077be:	4a07      	ldr	r2, [pc, #28]	; (80077dc <HandleRadioRxErrorTimeout+0xcc>)
 80077c0:	5ca1      	ldrb	r1, [r4, r2]
 80077c2:	430b      	orrs	r3, r1
 80077c4:	54a3      	strb	r3, [r4, r2]
 80077c6:	e7d6      	b.n	8007776 <HandleRadioRxErrorTimeout+0x66>
 80077c8:	20000980 	.word	0x20000980
 80077cc:	00000484 	.word	0x00000484
 80077d0:	0800f5a4 	.word	0x0800f5a4
 80077d4:	00000414 	.word	0x00000414
 80077d8:	0000043d 	.word	0x0000043d
 80077dc:	00000481 	.word	0x00000481

080077e0 <ResetMacParameters>:
{
 80077e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    MacCtx.NvmCtx->NetworkActivation = ACTIVATION_TYPE_NONE;
 80077e2:	22ea      	movs	r2, #234	; 0xea
 80077e4:	2500      	movs	r5, #0
 80077e6:	4c32      	ldr	r4, [pc, #200]	; (80078b0 <ResetMacParameters+0xd0>)
 80077e8:	4f32      	ldr	r7, [pc, #200]	; (80078b4 <ResetMacParameters+0xd4>)
 80077ea:	0052      	lsls	r2, r2, #1
 80077ec:	59e3      	ldr	r3, [r4, r7]
    MacCtx.ChannelsNbTransCounter = 0;
 80077ee:	2180      	movs	r1, #128	; 0x80
    MacCtx.NvmCtx->NetworkActivation = ACTIVATION_TYPE_NONE;
 80077f0:	549d      	strb	r5, [r3, r2]
    MacCtx.NvmCtx->AdrAckCounter = 0;
 80077f2:	001a      	movs	r2, r3
 80077f4:	32f4      	adds	r2, #244	; 0xf4
 80077f6:	6015      	str	r5, [r2, #0]
    MacCtx.ChannelsNbTransCounter = 0;
 80077f8:	2282      	movs	r2, #130	; 0x82
 80077fa:	0049      	lsls	r1, r1, #1
 80077fc:	00d2      	lsls	r2, r2, #3
 80077fe:	52a1      	strh	r1, [r4, r2]
    MacCtx.AckTimeoutRetries = 1;
 8007800:	4a2d      	ldr	r2, [pc, #180]	; (80078b8 <ResetMacParameters+0xd8>)
 8007802:	39ff      	subs	r1, #255	; 0xff
 8007804:	54a1      	strb	r1, [r4, r2]
    MacCtx.AckTimeoutRetry = false;
 8007806:	4a2d      	ldr	r2, [pc, #180]	; (80078bc <ResetMacParameters+0xdc>)
 8007808:	54a5      	strb	r5, [r4, r2]
    MacCtx.NvmCtx->MaxDCycle = 0;
 800780a:	229e      	movs	r2, #158	; 0x9e
 800780c:	0052      	lsls	r2, r2, #1
 800780e:	549d      	strb	r5, [r3, r2]
    MacCtx.NvmCtx->AggregatedDCycle = 1;
 8007810:	3286      	adds	r2, #134	; 0x86
 8007812:	5299      	strh	r1, [r3, r2]
    MacCtx.NvmCtx->MacParams.ChannelsTxPower = MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower;
 8007814:	001a      	movs	r2, r3
 8007816:	7919      	ldrb	r1, [r3, #4]
 8007818:	32f8      	adds	r2, #248	; 0xf8
 800781a:	7011      	strb	r1, [r2, #0]
    MacCtx.NvmCtx->MacParams.ChannelsDatarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
 800781c:	7959      	ldrb	r1, [r3, #5]
 800781e:	7051      	strb	r1, [r2, #1]
    MacCtx.NvmCtx->MacParams.Rx1DrOffset = MacCtx.NvmCtx->MacParamsDefaults.Rx1DrOffset;
 8007820:	1d99      	adds	r1, r3, #6
 8007822:	7fc9      	ldrb	r1, [r1, #31]
 8007824:	3207      	adds	r2, #7
 8007826:	7691      	strb	r1, [r2, #26]
    MacCtx.NvmCtx->MacParams.Rx2Channel = MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel;
 8007828:	0019      	movs	r1, r3
 800782a:	321d      	adds	r2, #29
 800782c:	3128      	adds	r1, #40	; 0x28
 800782e:	c941      	ldmia	r1!, {r0, r6}
 8007830:	c241      	stmia	r2!, {r0, r6}
    MacCtx.NvmCtx->MacParams.RxCChannel = MacCtx.NvmCtx->MacParamsDefaults.RxCChannel;
 8007832:	c941      	ldmia	r1!, {r0, r6}
 8007834:	c241      	stmia	r2!, {r0, r6}
    MacCtx.NvmCtx->MacParams.UplinkDwellTime = MacCtx.NvmCtx->MacParamsDefaults.UplinkDwellTime;
 8007836:	3af4      	subs	r2, #244	; 0xf4
 8007838:	7811      	ldrb	r1, [r2, #0]
 800783a:	2296      	movs	r2, #150	; 0x96
 800783c:	0052      	lsls	r2, r2, #1
 800783e:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParamsDefaults.DownlinkDwellTime;
 8007840:	001a      	movs	r2, r3
 8007842:	212e      	movs	r1, #46	; 0x2e
 8007844:	3239      	adds	r2, #57	; 0x39
 8007846:	7812      	ldrb	r2, [r2, #0]
 8007848:	31ff      	adds	r1, #255	; 0xff
 800784a:	545a      	strb	r2, [r3, r1]
    MacCtx.NvmCtx->MacParams.MaxEirp = MacCtx.NvmCtx->MacParamsDefaults.MaxEirp;
 800784c:	001a      	movs	r2, r3
 800784e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8007850:	32fc      	adds	r2, #252	; 0xfc
 8007852:	6350      	str	r0, [r2, #52]	; 0x34
    MacCtx.NvmCtx->MacParams.AntennaGain = MacCtx.NvmCtx->MacParamsDefaults.AntennaGain;
 8007854:	6c18      	ldr	r0, [r3, #64]	; 0x40
    MacCtx.NvmCtx->MacParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParamsDefaults.DownlinkDwellTime;
 8007856:	000e      	movs	r6, r1
    MacCtx.NvmCtx->MacParams.AntennaGain = MacCtx.NvmCtx->MacParamsDefaults.AntennaGain;
 8007858:	6390      	str	r0, [r2, #56]	; 0x38
    MacCtx.NodeAckRequested = false;
 800785a:	4a19      	ldr	r2, [pc, #100]	; (80078c0 <ResetMacParameters+0xe0>)
    params.Type = INIT_TYPE_RESTORE_DEFAULT_CHANNELS;
 800785c:	392d      	subs	r1, #45	; 0x2d
    MacCtx.NodeAckRequested = false;
 800785e:	54a5      	strb	r5, [r4, r2]
    MacCtx.NvmCtx->SrvAckRequested = false;
 8007860:	22e0      	movs	r2, #224	; 0xe0
 8007862:	0052      	lsls	r2, r2, #1
 8007864:	549d      	strb	r5, [r3, r2]
    params.Type = INIT_TYPE_RESTORE_DEFAULT_CHANNELS;
 8007866:	466a      	mov	r2, sp
 8007868:	39ff      	subs	r1, #255	; 0xff
 800786a:	7111      	strb	r1, [r2, #4]
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 800786c:	7818      	ldrb	r0, [r3, #0]
 800786e:	4669      	mov	r1, sp
    params.NvmCtx = NULL;
 8007870:	9500      	str	r5, [sp, #0]
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 8007872:	f003 fd08 	bl	800b286 <RegionInitDefaults>
    MacCtx.NvmCtx->LastTxChannel = MacCtx.Channel;
 8007876:	229f      	movs	r2, #159	; 0x9f
    MacCtx.Channel = 0;
 8007878:	4b12      	ldr	r3, [pc, #72]	; (80078c4 <ResetMacParameters+0xe4>)
    MacCtx.NvmCtx->LastTxChannel = MacCtx.Channel;
 800787a:	0052      	lsls	r2, r2, #1
    MacCtx.Channel = 0;
 800787c:	54e5      	strb	r5, [r4, r3]
    MacCtx.NvmCtx->LastTxChannel = MacCtx.Channel;
 800787e:	59e3      	ldr	r3, [r4, r7]
 8007880:	549d      	strb	r5, [r3, r2]
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8007882:	22f3      	movs	r2, #243	; 0xf3
 8007884:	0092      	lsls	r2, r2, #2
 8007886:	54a5      	strb	r5, [r4, r2]
    MacCtx.RxWindow2Config.Frequency = MacCtx.NvmCtx->MacParams.Rx2Channel.Frequency;
 8007888:	001a      	movs	r2, r3
 800788a:	32fc      	adds	r2, #252	; 0xfc
 800788c:	6a11      	ldr	r1, [r2, #32]
 800788e:	22f4      	movs	r2, #244	; 0xf4
 8007890:	0092      	lsls	r2, r2, #2
 8007892:	50a1      	str	r1, [r4, r2]
    MacCtx.RxWindow2Config.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8007894:	5d99      	ldrb	r1, [r3, r6]
 8007896:	320c      	adds	r2, #12
 8007898:	54a1      	strb	r1, [r4, r2]
    MacCtx.RxWindow2Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 800789a:	2240      	movs	r2, #64	; 0x40
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800789c:	2101      	movs	r1, #1
    MacCtx.RxWindow2Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 800789e:	32ff      	adds	r2, #255	; 0xff
 80078a0:	5c9a      	ldrb	r2, [r3, r2]
 80078a2:	4b09      	ldr	r3, [pc, #36]	; (80078c8 <ResetMacParameters+0xe8>)
 80078a4:	54e2      	strb	r2, [r4, r3]
    MacCtx.RxWindow2Config.RxContinuous = false;
 80078a6:	4b09      	ldr	r3, [pc, #36]	; (80078cc <ResetMacParameters+0xec>)
 80078a8:	54e5      	strb	r5, [r4, r3]
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 80078aa:	4b09      	ldr	r3, [pc, #36]	; (80078d0 <ResetMacParameters+0xf0>)
 80078ac:	54e1      	strb	r1, [r4, r3]
}
 80078ae:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80078b0:	20000980 	.word	0x20000980
 80078b4:	00000484 	.word	0x00000484
 80078b8:	00000412 	.word	0x00000412
 80078bc:	00000413 	.word	0x00000413
 80078c0:	00000414 	.word	0x00000414
 80078c4:	00000415 	.word	0x00000415
 80078c8:	000003dd 	.word	0x000003dd
 80078cc:	000003de 	.word	0x000003de
 80078d0:	000003df 	.word	0x000003df

080078d4 <OpenContinuousRxCWindow>:
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 80078d4:	2302      	movs	r3, #2
{
 80078d6:	b537      	push	{r0, r1, r2, r4, r5, lr}
    MacCtx.RxWindowCConfig.RxContinuous = true;
 80078d8:	2201      	movs	r2, #1
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 80078da:	4c0c      	ldr	r4, [pc, #48]	; (800790c <OpenContinuousRxCWindow+0x38>)
 80078dc:	4d0c      	ldr	r5, [pc, #48]	; (8007910 <OpenContinuousRxCWindow+0x3c>)
    if( RegionRxConfig( MacCtx.NvmCtx->Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 80078de:	490d      	ldr	r1, [pc, #52]	; (8007914 <OpenContinuousRxCWindow+0x40>)
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 80078e0:	5563      	strb	r3, [r4, r5]
    MacCtx.RxWindowCConfig.RxContinuous = true;
 80078e2:	4b0d      	ldr	r3, [pc, #52]	; (8007918 <OpenContinuousRxCWindow+0x44>)
 80078e4:	54e2      	strb	r2, [r4, r3]
    if( RegionRxConfig( MacCtx.NvmCtx->Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 80078e6:	4b0d      	ldr	r3, [pc, #52]	; (800791c <OpenContinuousRxCWindow+0x48>)
 80078e8:	4a0d      	ldr	r2, [pc, #52]	; (8007920 <OpenContinuousRxCWindow+0x4c>)
 80078ea:	58e3      	ldr	r3, [r4, r3]
 80078ec:	7818      	ldrb	r0, [r3, #0]
 80078ee:	f003 fd00 	bl	800b2f2 <RegionRxConfig>
 80078f2:	2800      	cmp	r0, #0
 80078f4:	d008      	beq.n	8007908 <OpenContinuousRxCWindow+0x34>
        Radio.Rx( 0 ); // Continuous mode
 80078f6:	4b0b      	ldr	r3, [pc, #44]	; (8007924 <OpenContinuousRxCWindow+0x50>)
 80078f8:	2000      	movs	r0, #0
 80078fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078fc:	9301      	str	r3, [sp, #4]
 80078fe:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 8007900:	2390      	movs	r3, #144	; 0x90
 8007902:	5d62      	ldrb	r2, [r4, r5]
 8007904:	00db      	lsls	r3, r3, #3
 8007906:	54e2      	strb	r2, [r4, r3]
}
 8007908:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 800790a:	46c0      	nop			; (mov r8, r8)
 800790c:	20000980 	.word	0x20000980
 8007910:	000003f3 	.word	0x000003f3
 8007914:	20000d60 	.word	0x20000d60
 8007918:	000003f2 	.word	0x000003f2
 800791c:	00000484 	.word	0x00000484
 8007920:	20000da0 	.word	0x20000da0
 8007924:	0800f5a4 	.word	0x0800f5a4

08007928 <OnRadioRxTimeout>:
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 8007928:	2301      	movs	r3, #1
{
 800792a:	b507      	push	{r0, r1, r2, lr}
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800792c:	4a0d      	ldr	r2, [pc, #52]	; (8007964 <OnRadioRxTimeout+0x3c>)
 800792e:	7811      	ldrb	r1, [r2, #0]
 8007930:	430b      	orrs	r3, r1
 8007932:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8007934:	23d2      	movs	r3, #210	; 0xd2
 8007936:	4a0c      	ldr	r2, [pc, #48]	; (8007968 <OnRadioRxTimeout+0x40>)
 8007938:	009b      	lsls	r3, r3, #2
 800793a:	58d3      	ldr	r3, [r2, r3]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d003      	beq.n	8007948 <OnRadioRxTimeout+0x20>
 8007940:	68db      	ldr	r3, [r3, #12]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d000      	beq.n	8007948 <OnRadioRxTimeout+0x20>
        MacCtx.MacCallbacks->MacProcessNotify( );
 8007946:	4798      	blx	r3
    PRINTNOW(); PRINTF("PHY rxTimeOut\n\r" );
 8007948:	4668      	mov	r0, sp
 800794a:	f005 f99b 	bl	800cc84 <SysTimeGetMcuTime>
 800794e:	466b      	mov	r3, sp
 8007950:	9900      	ldr	r1, [sp, #0]
 8007952:	2204      	movs	r2, #4
 8007954:	5e9a      	ldrsh	r2, [r3, r2]
 8007956:	4805      	ldr	r0, [pc, #20]	; (800796c <OnRadioRxTimeout+0x44>)
 8007958:	f005 fae2 	bl	800cf20 <TraceSend>
 800795c:	4804      	ldr	r0, [pc, #16]	; (8007970 <OnRadioRxTimeout+0x48>)
 800795e:	f005 fadf 	bl	800cf20 <TraceSend>
}
 8007962:	bd07      	pop	{r0, r1, r2, pc}
 8007964:	200007a0 	.word	0x200007a0
 8007968:	20000980 	.word	0x20000980
 800796c:	0800fb5d 	.word	0x0800fb5d
 8007970:	0800fb68 	.word	0x0800fb68

08007974 <OnRadioTxTimeout>:
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 8007974:	2304      	movs	r3, #4
{
 8007976:	b507      	push	{r0, r1, r2, lr}
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 8007978:	4a0d      	ldr	r2, [pc, #52]	; (80079b0 <OnRadioTxTimeout+0x3c>)
 800797a:	7811      	ldrb	r1, [r2, #0]
 800797c:	430b      	orrs	r3, r1
 800797e:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8007980:	23d2      	movs	r3, #210	; 0xd2
 8007982:	4a0c      	ldr	r2, [pc, #48]	; (80079b4 <OnRadioTxTimeout+0x40>)
 8007984:	009b      	lsls	r3, r3, #2
 8007986:	58d3      	ldr	r3, [r2, r3]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d003      	beq.n	8007994 <OnRadioTxTimeout+0x20>
 800798c:	68db      	ldr	r3, [r3, #12]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d000      	beq.n	8007994 <OnRadioTxTimeout+0x20>
        MacCtx.MacCallbacks->MacProcessNotify( );
 8007992:	4798      	blx	r3
    PRINTNOW(); PRINTF("PHY txTimeOut\n\r" );
 8007994:	4668      	mov	r0, sp
 8007996:	f005 f975 	bl	800cc84 <SysTimeGetMcuTime>
 800799a:	466b      	mov	r3, sp
 800799c:	9900      	ldr	r1, [sp, #0]
 800799e:	2204      	movs	r2, #4
 80079a0:	5e9a      	ldrsh	r2, [r3, r2]
 80079a2:	4805      	ldr	r0, [pc, #20]	; (80079b8 <OnRadioTxTimeout+0x44>)
 80079a4:	f005 fabc 	bl	800cf20 <TraceSend>
 80079a8:	4804      	ldr	r0, [pc, #16]	; (80079bc <OnRadioTxTimeout+0x48>)
 80079aa:	f005 fab9 	bl	800cf20 <TraceSend>
}
 80079ae:	bd07      	pop	{r0, r1, r2, pc}
 80079b0:	200007a0 	.word	0x200007a0
 80079b4:	20000980 	.word	0x20000980
 80079b8:	0800fb5d 	.word	0x0800fb5d
 80079bc:	0800fb78 	.word	0x0800fb78

080079c0 <OnRadioRxDone>:
{
 80079c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80079c2:	000e      	movs	r6, r1
 80079c4:	0015      	movs	r5, r2
 80079c6:	001c      	movs	r4, r3
 80079c8:	0007      	movs	r7, r0
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 80079ca:	f005 fa58 	bl	800ce7e <TimerGetCurrentTime>
 80079ce:	4b11      	ldr	r3, [pc, #68]	; (8007a14 <OnRadioRxDone+0x54>)
    LoRaMacRadioEvents.Events.RxDone = 1;
 80079d0:	4a11      	ldr	r2, [pc, #68]	; (8007a18 <OnRadioRxDone+0x58>)
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 80079d2:	6018      	str	r0, [r3, #0]
    RxDoneParams.Payload = payload;
 80079d4:	605f      	str	r7, [r3, #4]
    RxDoneParams.Size = size;
 80079d6:	811e      	strh	r6, [r3, #8]
    RxDoneParams.Rssi = rssi;
 80079d8:	815d      	strh	r5, [r3, #10]
    RxDoneParams.Snr = snr;
 80079da:	731c      	strb	r4, [r3, #12]
    LoRaMacRadioEvents.Events.RxDone = 1;
 80079dc:	2308      	movs	r3, #8
 80079de:	7811      	ldrb	r1, [r2, #0]
 80079e0:	430b      	orrs	r3, r1
 80079e2:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 80079e4:	23d2      	movs	r3, #210	; 0xd2
 80079e6:	4a0d      	ldr	r2, [pc, #52]	; (8007a1c <OnRadioRxDone+0x5c>)
 80079e8:	009b      	lsls	r3, r3, #2
 80079ea:	58d3      	ldr	r3, [r2, r3]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d003      	beq.n	80079f8 <OnRadioRxDone+0x38>
 80079f0:	68db      	ldr	r3, [r3, #12]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d000      	beq.n	80079f8 <OnRadioRxDone+0x38>
        MacCtx.MacCallbacks->MacProcessNotify( );
 80079f6:	4798      	blx	r3
    PRINTNOW(); PRINTF("PHY rxDone\n\r" );
 80079f8:	4668      	mov	r0, sp
 80079fa:	f005 f943 	bl	800cc84 <SysTimeGetMcuTime>
 80079fe:	466b      	mov	r3, sp
 8007a00:	9900      	ldr	r1, [sp, #0]
 8007a02:	2204      	movs	r2, #4
 8007a04:	5e9a      	ldrsh	r2, [r3, r2]
 8007a06:	4806      	ldr	r0, [pc, #24]	; (8007a20 <OnRadioRxDone+0x60>)
 8007a08:	f005 fa8a 	bl	800cf20 <TraceSend>
 8007a0c:	4805      	ldr	r0, [pc, #20]	; (8007a24 <OnRadioRxDone+0x64>)
 8007a0e:	f005 fa87 	bl	800cf20 <TraceSend>
}
 8007a12:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8007a14:	20001660 	.word	0x20001660
 8007a18:	200007a0 	.word	0x200007a0
 8007a1c:	20000980 	.word	0x20000980
 8007a20:	0800fb5d 	.word	0x0800fb5d
 8007a24:	0800fb88 	.word	0x0800fb88

08007a28 <OnRadioTxDone>:
{
 8007a28:	b530      	push	{r4, r5, lr}
 8007a2a:	b085      	sub	sp, #20
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 8007a2c:	f005 fa27 	bl	800ce7e <TimerGetCurrentTime>
    MacCtx.LastTxSysTime = SysTimeGet( );
 8007a30:	466c      	mov	r4, sp
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 8007a32:	4b14      	ldr	r3, [pc, #80]	; (8007a84 <OnRadioTxDone+0x5c>)
    MacCtx.LastTxSysTime = SysTimeGet( );
 8007a34:	4d14      	ldr	r5, [pc, #80]	; (8007a88 <OnRadioTxDone+0x60>)
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 8007a36:	6018      	str	r0, [r3, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 8007a38:	0020      	movs	r0, r4
 8007a3a:	f005 f8f9 	bl	800cc30 <SysTimeGet>
 8007a3e:	23ce      	movs	r3, #206	; 0xce
 8007a40:	009b      	lsls	r3, r3, #2
 8007a42:	18eb      	adds	r3, r5, r3
 8007a44:	cc06      	ldmia	r4!, {r1, r2}
 8007a46:	c306      	stmia	r3!, {r1, r2}
    LoRaMacRadioEvents.Events.TxDone = 1;
 8007a48:	2310      	movs	r3, #16
 8007a4a:	4a10      	ldr	r2, [pc, #64]	; (8007a8c <OnRadioTxDone+0x64>)
 8007a4c:	7811      	ldrb	r1, [r2, #0]
 8007a4e:	430b      	orrs	r3, r1
 8007a50:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8007a52:	23d2      	movs	r3, #210	; 0xd2
 8007a54:	009b      	lsls	r3, r3, #2
 8007a56:	58eb      	ldr	r3, [r5, r3]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d003      	beq.n	8007a64 <OnRadioTxDone+0x3c>
 8007a5c:	68db      	ldr	r3, [r3, #12]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d000      	beq.n	8007a64 <OnRadioTxDone+0x3c>
        MacCtx.MacCallbacks->MacProcessNotify( );
 8007a62:	4798      	blx	r3
    PRINTNOW(); PRINTF("PHY txDone\n\r" );
 8007a64:	ac02      	add	r4, sp, #8
 8007a66:	0020      	movs	r0, r4
 8007a68:	f005 f90c 	bl	800cc84 <SysTimeGetMcuTime>
 8007a6c:	2304      	movs	r3, #4
 8007a6e:	5ee2      	ldrsh	r2, [r4, r3]
 8007a70:	9902      	ldr	r1, [sp, #8]
 8007a72:	4807      	ldr	r0, [pc, #28]	; (8007a90 <OnRadioTxDone+0x68>)
 8007a74:	f005 fa54 	bl	800cf20 <TraceSend>
 8007a78:	4806      	ldr	r0, [pc, #24]	; (8007a94 <OnRadioTxDone+0x6c>)
 8007a7a:	f005 fa51 	bl	800cf20 <TraceSend>
}
 8007a7e:	b005      	add	sp, #20
 8007a80:	bd30      	pop	{r4, r5, pc}
 8007a82:	46c0      	nop			; (mov r8, r8)
 8007a84:	2000165c 	.word	0x2000165c
 8007a88:	20000980 	.word	0x20000980
 8007a8c:	200007a0 	.word	0x200007a0
 8007a90:	0800fb5d 	.word	0x0800fb5d
 8007a94:	0800fb95 	.word	0x0800fb95

08007a98 <SwitchClass>:
{
 8007a98:	b5f0      	push	{r4, r5, r6, r7, lr}
    switch( MacCtx.NvmCtx->DeviceClass )
 8007a9a:	4c44      	ldr	r4, [pc, #272]	; (8007bac <SwitchClass+0x114>)
 8007a9c:	4e44      	ldr	r6, [pc, #272]	; (8007bb0 <SwitchClass+0x118>)
{
 8007a9e:	b085      	sub	sp, #20
    switch( MacCtx.NvmCtx->DeviceClass )
 8007aa0:	59a3      	ldr	r3, [r4, r6]
{
 8007aa2:	0005      	movs	r5, r0
    switch( MacCtx.NvmCtx->DeviceClass )
 8007aa4:	0019      	movs	r1, r3
 8007aa6:	31f0      	adds	r1, #240	; 0xf0
 8007aa8:	780a      	ldrb	r2, [r1, #0]
 8007aaa:	4694      	mov	ip, r2
 8007aac:	2a01      	cmp	r2, #1
 8007aae:	d012      	beq.n	8007ad6 <SwitchClass+0x3e>
 8007ab0:	2a00      	cmp	r2, #0
 8007ab2:	d004      	beq.n	8007abe <SwitchClass+0x26>
 8007ab4:	2a02      	cmp	r2, #2
 8007ab6:	d100      	bne.n	8007aba <SwitchClass+0x22>
 8007ab8:	e06f      	b.n	8007b9a <SwitchClass+0x102>
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8007aba:	2003      	movs	r0, #3
 8007abc:	e013      	b.n	8007ae6 <SwitchClass+0x4e>
            if( deviceClass == CLASS_A )
 8007abe:	2800      	cmp	r0, #0
 8007ac0:	d107      	bne.n	8007ad2 <SwitchClass+0x3a>
                MacCtx.NvmCtx->MacParams.RxCChannel = MacCtx.NvmCtx->MacParams.Rx2Channel;
 8007ac2:	001a      	movs	r2, r3
 8007ac4:	331d      	adds	r3, #29
 8007ac6:	3225      	adds	r2, #37	; 0x25
 8007ac8:	32ff      	adds	r2, #255	; 0xff
 8007aca:	33ff      	adds	r3, #255	; 0xff
 8007acc:	cb03      	ldmia	r3!, {r0, r1}
 8007ace:	c203      	stmia	r2!, {r0, r1}
 8007ad0:	e7f3      	b.n	8007aba <SwitchClass+0x22>
            if( deviceClass == CLASS_B )
 8007ad2:	2801      	cmp	r0, #1
 8007ad4:	d109      	bne.n	8007aea <SwitchClass+0x52>
            status = LoRaMacClassBSwitchClass( deviceClass );
 8007ad6:	0028      	movs	r0, r5
 8007ad8:	f002 fc56 	bl	800a388 <LoRaMacClassBSwitchClass>
            if( status == LORAMAC_STATUS_OK )
 8007adc:	2800      	cmp	r0, #0
 8007ade:	d102      	bne.n	8007ae6 <SwitchClass+0x4e>
                MacCtx.NvmCtx->DeviceClass = deviceClass;
 8007ae0:	59a3      	ldr	r3, [r4, r6]
 8007ae2:	33f0      	adds	r3, #240	; 0xf0
 8007ae4:	701d      	strb	r5, [r3, #0]
}
 8007ae6:	b005      	add	sp, #20
 8007ae8:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if( deviceClass == CLASS_C )
 8007aea:	2003      	movs	r0, #3
 8007aec:	2d02      	cmp	r5, #2
 8007aee:	d1fa      	bne.n	8007ae6 <SwitchClass+0x4e>
                MacCtx.NvmCtx->DeviceClass = deviceClass;
 8007af0:	700d      	strb	r5, [r1, #0]
                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8007af2:	20f3      	movs	r0, #243	; 0xf3
 8007af4:	21f8      	movs	r1, #248	; 0xf8
 8007af6:	0080      	lsls	r0, r0, #2
 8007af8:	0089      	lsls	r1, r1, #2
 8007afa:	1861      	adds	r1, r4, r1
 8007afc:	1820      	adds	r0, r4, r0
 8007afe:	c8c4      	ldmia	r0!, {r2, r6, r7}
 8007b00:	c1c4      	stmia	r1!, {r2, r6, r7}
 8007b02:	c844      	ldmia	r0!, {r2, r6}
 8007b04:	c144      	stmia	r1!, {r2, r6}
 8007b06:	0019      	movs	r1, r3
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8007b08:	4662      	mov	r2, ip
 8007b0a:	482a      	ldr	r0, [pc, #168]	; (8007bb4 <SwitchClass+0x11c>)
 8007b0c:	3151      	adds	r1, #81	; 0x51
 8007b0e:	5425      	strb	r5, [r4, r0]
                    if( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.IsEnabled == true )
 8007b10:	780d      	ldrb	r5, [r1, #0]
 8007b12:	2d00      	cmp	r5, #0
 8007b14:	d03c      	beq.n	8007b90 <SwitchClass+0xf8>
                        MacCtx.NvmCtx->MacParams.RxCChannel.Frequency = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 8007b16:	2128      	movs	r1, #40	; 0x28
 8007b18:	001d      	movs	r5, r3
 8007b1a:	434a      	muls	r2, r1
 8007b1c:	189a      	adds	r2, r3, r2
 8007b1e:	6e51      	ldr	r1, [r2, #100]	; 0x64
 8007b20:	35fc      	adds	r5, #252	; 0xfc
 8007b22:	62a9      	str	r1, [r5, #40]	; 0x28
                        MacCtx.NvmCtx->MacParams.RxCChannel.Datarate = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 8007b24:	3268      	adds	r2, #104	; 0x68
 8007b26:	7815      	ldrb	r5, [r2, #0]
 8007b28:	2294      	movs	r2, #148	; 0x94
 8007b2a:	0052      	lsls	r2, r2, #1
 8007b2c:	549d      	strb	r5, [r3, r2]
                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8007b2e:	4a22      	ldr	r2, [pc, #136]	; (8007bb8 <SwitchClass+0x120>)
 8007b30:	5ca5      	ldrb	r5, [r4, r2]
 8007b32:	3a35      	subs	r2, #53	; 0x35
 8007b34:	54a5      	strb	r5, [r4, r2]
                        MacCtx.RxWindowCConfig.Frequency = MacCtx.NvmCtx->MacParams.RxCChannel.Frequency;
 8007b36:	3204      	adds	r2, #4
 8007b38:	50a1      	str	r1, [r4, r2]
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8007b3a:	222e      	movs	r2, #46	; 0x2e
 8007b3c:	32ff      	adds	r2, #255	; 0xff
 8007b3e:	5c99      	ldrb	r1, [r3, r2]
 8007b40:	22fc      	movs	r2, #252	; 0xfc
 8007b42:	0092      	lsls	r2, r2, #2
 8007b44:	54a1      	strb	r1, [r4, r2]
                        MacCtx.RxWindowCConfig.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 8007b46:	2240      	movs	r2, #64	; 0x40
 8007b48:	32ff      	adds	r2, #255	; 0xff
 8007b4a:	5c9a      	ldrb	r2, [r3, r2]
 8007b4c:	4b1b      	ldr	r3, [pc, #108]	; (8007bbc <SwitchClass+0x124>)
 8007b4e:	54e2      	strb	r2, [r4, r3]
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 8007b50:	2303      	movs	r3, #3
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 8007b52:	2201      	movs	r2, #1
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 8007b54:	5423      	strb	r3, [r4, r0]
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 8007b56:	4b1a      	ldr	r3, [pc, #104]	; (8007bc0 <SwitchClass+0x128>)
 8007b58:	54e2      	strb	r2, [r4, r3]
                MacCtx.NodeAckRequested = false;
 8007b5a:	2500      	movs	r5, #0
 8007b5c:	4b19      	ldr	r3, [pc, #100]	; (8007bc4 <SwitchClass+0x12c>)
 8007b5e:	54e5      	strb	r5, [r4, r3]
                Radio.Sleep( );
 8007b60:	4b19      	ldr	r3, [pc, #100]	; (8007bc8 <SwitchClass+0x130>)
 8007b62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b64:	9303      	str	r3, [sp, #12]
 8007b66:	4798      	blx	r3
                RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8007b68:	4b11      	ldr	r3, [pc, #68]	; (8007bb0 <SwitchClass+0x118>)
                                                 MacCtx.NvmCtx->MacParams.RxCChannel.Datarate,
 8007b6a:	2194      	movs	r1, #148	; 0x94
                RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8007b6c:	58e3      	ldr	r3, [r4, r3]
                                                 MacCtx.NvmCtx->MacParams.RxCChannel.Datarate,
 8007b6e:	0049      	lsls	r1, r1, #1
                RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8007b70:	001a      	movs	r2, r3
 8007b72:	001c      	movs	r4, r3
 8007b74:	5659      	ldrsb	r1, [r3, r1]
 8007b76:	7818      	ldrb	r0, [r3, #0]
 8007b78:	4b14      	ldr	r3, [pc, #80]	; (8007bcc <SwitchClass+0x134>)
 8007b7a:	32ff      	adds	r2, #255	; 0xff
 8007b7c:	7852      	ldrb	r2, [r2, #1]
 8007b7e:	34fc      	adds	r4, #252	; 0xfc
 8007b80:	9300      	str	r3, [sp, #0]
 8007b82:	6823      	ldr	r3, [r4, #0]
 8007b84:	f003 fbaa 	bl	800b2dc <RegionComputeRxWindowParameters>
                OpenContinuousRxCWindow( );
 8007b88:	f7ff fea4 	bl	80078d4 <OpenContinuousRxCWindow>
                status = LORAMAC_STATUS_OK;
 8007b8c:	0028      	movs	r0, r5
 8007b8e:	e7aa      	b.n	8007ae6 <SwitchClass+0x4e>
 8007b90:	3201      	adds	r2, #1
 8007b92:	3128      	adds	r1, #40	; 0x28
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8007b94:	2a04      	cmp	r2, #4
 8007b96:	d1bb      	bne.n	8007b10 <SwitchClass+0x78>
 8007b98:	e7df      	b.n	8007b5a <SwitchClass+0xc2>
 8007b9a:	2003      	movs	r0, #3
            if( deviceClass == CLASS_A )
 8007b9c:	2d00      	cmp	r5, #0
 8007b9e:	d1a2      	bne.n	8007ae6 <SwitchClass+0x4e>
                Radio.Sleep( );
 8007ba0:	4b09      	ldr	r3, [pc, #36]	; (8007bc8 <SwitchClass+0x130>)
                MacCtx.NvmCtx->DeviceClass = deviceClass;
 8007ba2:	700d      	strb	r5, [r1, #0]
                Radio.Sleep( );
 8007ba4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ba6:	9303      	str	r3, [sp, #12]
 8007ba8:	4798      	blx	r3
 8007baa:	e7ef      	b.n	8007b8c <SwitchClass+0xf4>
 8007bac:	20000980 	.word	0x20000980
 8007bb0:	00000484 	.word	0x00000484
 8007bb4:	000003f3 	.word	0x000003f3
 8007bb8:	00000415 	.word	0x00000415
 8007bbc:	000003f1 	.word	0x000003f1
 8007bc0:	000003f2 	.word	0x000003f2
 8007bc4:	00000414 	.word	0x00000414
 8007bc8:	0800f5a4 	.word	0x0800f5a4
 8007bcc:	20000d60 	.word	0x20000d60

08007bd0 <RxWindowSetup.constprop.6>:
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
 8007bd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007bd2:	000d      	movs	r5, r1
    TimerStop( rxTimer );
 8007bd4:	f005 f90e 	bl	800cdf4 <TimerStop>
    Radio.Standby( );
 8007bd8:	4e0c      	ldr	r6, [pc, #48]	; (8007c0c <RxWindowSetup.constprop.6+0x3c>)
    if( RegionRxConfig( MacCtx.NvmCtx->Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8007bda:	4f0d      	ldr	r7, [pc, #52]	; (8007c10 <RxWindowSetup.constprop.6+0x40>)
    Radio.Standby( );
 8007bdc:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8007bde:	9301      	str	r3, [sp, #4]
 8007be0:	4798      	blx	r3
    if( RegionRxConfig( MacCtx.NvmCtx->Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8007be2:	4c0c      	ldr	r4, [pc, #48]	; (8007c14 <RxWindowSetup.constprop.6+0x44>)
 8007be4:	4a0c      	ldr	r2, [pc, #48]	; (8007c18 <RxWindowSetup.constprop.6+0x48>)
 8007be6:	59e3      	ldr	r3, [r4, r7]
 8007be8:	0029      	movs	r1, r5
 8007bea:	7818      	ldrb	r0, [r3, #0]
 8007bec:	f003 fb81 	bl	800b2f2 <RegionRxConfig>
 8007bf0:	2800      	cmp	r0, #0
 8007bf2:	d009      	beq.n	8007c08 <RxWindowSetup.constprop.6+0x38>
        Radio.Rx( MacCtx.NvmCtx->MacParams.MaxRxWindow );
 8007bf4:	59e3      	ldr	r3, [r4, r7]
 8007bf6:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
 8007bf8:	33fc      	adds	r3, #252	; 0xfc
 8007bfa:	6898      	ldr	r0, [r3, #8]
 8007bfc:	9201      	str	r2, [sp, #4]
 8007bfe:	4790      	blx	r2
        MacCtx.RxSlot = rxConfig->RxSlot;
 8007c00:	2390      	movs	r3, #144	; 0x90
 8007c02:	7cea      	ldrb	r2, [r5, #19]
 8007c04:	00db      	lsls	r3, r3, #3
 8007c06:	54e2      	strb	r2, [r4, r3]
}
 8007c08:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8007c0a:	46c0      	nop			; (mov r8, r8)
 8007c0c:	0800f5a4 	.word	0x0800f5a4
 8007c10:	00000484 	.word	0x00000484
 8007c14:	20000980 	.word	0x20000980
 8007c18:	20000da0 	.word	0x20000da0

08007c1c <OnRxWindow1TimerEvent>:
{
 8007c1c:	b510      	push	{r4, lr}
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 8007c1e:	4b10      	ldr	r3, [pc, #64]	; (8007c60 <OnRxWindow1TimerEvent+0x44>)
 8007c20:	4a10      	ldr	r2, [pc, #64]	; (8007c64 <OnRxWindow1TimerEvent+0x48>)
 8007c22:	5c99      	ldrb	r1, [r3, r2]
 8007c24:	3a5d      	subs	r2, #93	; 0x5d
 8007c26:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow1Config.DrOffset = MacCtx.NvmCtx->MacParams.Rx1DrOffset;
 8007c28:	4a0f      	ldr	r2, [pc, #60]	; (8007c68 <OnRxWindow1TimerEvent+0x4c>)
 8007c2a:	589a      	ldr	r2, [r3, r2]
 8007c2c:	0011      	movs	r1, r2
 8007c2e:	31ff      	adds	r1, #255	; 0xff
 8007c30:	7e88      	ldrb	r0, [r1, #26]
 8007c32:	490e      	ldr	r1, [pc, #56]	; (8007c6c <OnRxWindow1TimerEvent+0x50>)
 8007c34:	5458      	strb	r0, [r3, r1]
    MacCtx.RxWindow1Config.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8007c36:	212e      	movs	r1, #46	; 0x2e
 8007c38:	31ff      	adds	r1, #255	; 0xff
 8007c3a:	5c50      	ldrb	r0, [r2, r1]
 8007c3c:	21f2      	movs	r1, #242	; 0xf2
 8007c3e:	0089      	lsls	r1, r1, #2
 8007c40:	5458      	strb	r0, [r3, r1]
    MacCtx.RxWindow1Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 8007c42:	2140      	movs	r1, #64	; 0x40
 8007c44:	31ff      	adds	r1, #255	; 0xff
 8007c46:	5c51      	ldrb	r1, [r2, r1]
 8007c48:	4a09      	ldr	r2, [pc, #36]	; (8007c70 <OnRxWindow1TimerEvent+0x54>)
    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 8007c4a:	480a      	ldr	r0, [pc, #40]	; (8007c74 <OnRxWindow1TimerEvent+0x58>)
    MacCtx.RxWindow1Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 8007c4c:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow1Config.RxContinuous = false;
 8007c4e:	2200      	movs	r2, #0
 8007c50:	4909      	ldr	r1, [pc, #36]	; (8007c78 <OnRxWindow1TimerEvent+0x5c>)
 8007c52:	545a      	strb	r2, [r3, r1]
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 8007c54:	4909      	ldr	r1, [pc, #36]	; (8007c7c <OnRxWindow1TimerEvent+0x60>)
 8007c56:	545a      	strb	r2, [r3, r1]
    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 8007c58:	4909      	ldr	r1, [pc, #36]	; (8007c80 <OnRxWindow1TimerEvent+0x64>)
 8007c5a:	f7ff ffb9 	bl	8007bd0 <RxWindowSetup.constprop.6>
}
 8007c5e:	bd10      	pop	{r4, pc}
 8007c60:	20000980 	.word	0x20000980
 8007c64:	00000415 	.word	0x00000415
 8007c68:	00000484 	.word	0x00000484
 8007c6c:	000003bb 	.word	0x000003bb
 8007c70:	000003c9 	.word	0x000003c9
 8007c74:	20000d00 	.word	0x20000d00
 8007c78:	000003ca 	.word	0x000003ca
 8007c7c:	000003cb 	.word	0x000003cb
 8007c80:	20000d38 	.word	0x20000d38

08007c84 <OnRxWindow2TimerEvent>:
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8007c84:	2290      	movs	r2, #144	; 0x90
{
 8007c86:	b510      	push	{r4, lr}
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8007c88:	4b13      	ldr	r3, [pc, #76]	; (8007cd8 <OnRxWindow2TimerEvent+0x54>)
 8007c8a:	00d2      	lsls	r2, r2, #3
 8007c8c:	5c9a      	ldrb	r2, [r3, r2]
 8007c8e:	2a00      	cmp	r2, #0
 8007c90:	d020      	beq.n	8007cd4 <OnRxWindow2TimerEvent+0x50>
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8007c92:	4a12      	ldr	r2, [pc, #72]	; (8007cdc <OnRxWindow2TimerEvent+0x58>)
 8007c94:	5c99      	ldrb	r1, [r3, r2]
 8007c96:	3a49      	subs	r2, #73	; 0x49
 8007c98:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow2Config.Frequency = MacCtx.NvmCtx->MacParams.Rx2Channel.Frequency;
 8007c9a:	4a11      	ldr	r2, [pc, #68]	; (8007ce0 <OnRxWindow2TimerEvent+0x5c>)
 8007c9c:	589a      	ldr	r2, [r3, r2]
 8007c9e:	0011      	movs	r1, r2
 8007ca0:	31fc      	adds	r1, #252	; 0xfc
 8007ca2:	6a08      	ldr	r0, [r1, #32]
 8007ca4:	21f4      	movs	r1, #244	; 0xf4
 8007ca6:	0089      	lsls	r1, r1, #2
 8007ca8:	5058      	str	r0, [r3, r1]
    MacCtx.RxWindow2Config.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8007caa:	212e      	movs	r1, #46	; 0x2e
 8007cac:	31ff      	adds	r1, #255	; 0xff
 8007cae:	5c50      	ldrb	r0, [r2, r1]
 8007cb0:	21f7      	movs	r1, #247	; 0xf7
 8007cb2:	0089      	lsls	r1, r1, #2
 8007cb4:	5458      	strb	r0, [r3, r1]
    MacCtx.RxWindow2Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 8007cb6:	2140      	movs	r1, #64	; 0x40
 8007cb8:	31ff      	adds	r1, #255	; 0xff
 8007cba:	5c51      	ldrb	r1, [r2, r1]
 8007cbc:	4a09      	ldr	r2, [pc, #36]	; (8007ce4 <OnRxWindow2TimerEvent+0x60>)
    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 8007cbe:	480a      	ldr	r0, [pc, #40]	; (8007ce8 <OnRxWindow2TimerEvent+0x64>)
    MacCtx.RxWindow2Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 8007cc0:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow2Config.RxContinuous = false;
 8007cc2:	2100      	movs	r1, #0
 8007cc4:	4a09      	ldr	r2, [pc, #36]	; (8007cec <OnRxWindow2TimerEvent+0x68>)
 8007cc6:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8007cc8:	4a09      	ldr	r2, [pc, #36]	; (8007cf0 <OnRxWindow2TimerEvent+0x6c>)
 8007cca:	3101      	adds	r1, #1
 8007ccc:	5499      	strb	r1, [r3, r2]
    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 8007cce:	4909      	ldr	r1, [pc, #36]	; (8007cf4 <OnRxWindow2TimerEvent+0x70>)
 8007cd0:	f7ff ff7e 	bl	8007bd0 <RxWindowSetup.constprop.6>
}
 8007cd4:	bd10      	pop	{r4, pc}
 8007cd6:	46c0      	nop			; (mov r8, r8)
 8007cd8:	20000980 	.word	0x20000980
 8007cdc:	00000415 	.word	0x00000415
 8007ce0:	00000484 	.word	0x00000484
 8007ce4:	000003dd 	.word	0x000003dd
 8007ce8:	20000d18 	.word	0x20000d18
 8007cec:	000003de 	.word	0x000003de
 8007cf0:	000003df 	.word	0x000003df
 8007cf4:	20000d4c 	.word	0x20000d4c

08007cf8 <ProcessMacCommands.isra.1.constprop.7>:
    uint8_t status = 0;
 8007cf8:	2300      	movs	r3, #0
static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
 8007cfa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007cfc:	b095      	sub	sp, #84	; 0x54
 8007cfe:	9206      	str	r2, [sp, #24]
    uint8_t status = 0;
 8007d00:	220d      	movs	r2, #13
static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
 8007d02:	0007      	movs	r7, r0
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8007d04:	001c      	movs	r4, r3
static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
 8007d06:	9104      	str	r1, [sp, #16]
    uint8_t status = 0;
 8007d08:	a906      	add	r1, sp, #24
 8007d0a:	1852      	adds	r2, r2, r1
 8007d0c:	7013      	strb	r3, [r2, #0]
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8007d0e:	aa0a      	add	r2, sp, #40	; 0x28
 8007d10:	8013      	strh	r3, [r2, #0]
    bool adrBlockFound = false;
 8007d12:	9302      	str	r3, [sp, #8]
    while( macIndex < commandsSize )
 8007d14:	9b04      	ldr	r3, [sp, #16]
 8007d16:	429c      	cmp	r4, r3
 8007d18:	d301      	bcc.n	8007d1e <ProcessMacCommands.isra.1.constprop.7+0x26>
}
 8007d1a:	b015      	add	sp, #84	; 0x54
 8007d1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        switch( payload[macIndex++] )
 8007d1e:	5d38      	ldrb	r0, [r7, r4]
 8007d20:	1c66      	adds	r6, r4, #1
 8007d22:	3802      	subs	r0, #2
 8007d24:	b2f6      	uxtb	r6, r6
 8007d26:	2811      	cmp	r0, #17
 8007d28:	d8f7      	bhi.n	8007d1a <ProcessMacCommands.isra.1.constprop.7+0x22>
 8007d2a:	f7f8 fa09 	bl	8000140 <__gnu_thumb1_case_shi>
 8007d2e:	0012      	.short	0x0012
 8007d30:	00910029 	.word	0x00910029
 8007d34:	00f200aa 	.word	0x00f200aa
 8007d38:	01360108 	.word	0x01360108
 8007d3c:	01a20153 	.word	0x01a20153
 8007d40:	fff6fff6 	.word	0xfff6fff6
 8007d44:	fff601d9 	.word	0xfff601d9
 8007d48:	021ffff6 	.word	0x021ffff6
 8007d4c:	0245022a 	.word	0x0245022a
 8007d50:	0255      	.short	0x0255
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 8007d52:	2003      	movs	r0, #3
 8007d54:	f002 fd04 	bl	800a760 <LoRaMacConfirmQueueIsCmdActive>
 8007d58:	2800      	cmp	r0, #0
 8007d5a:	d00f      	beq.n	8007d7c <ProcessMacCommands.isra.1.constprop.7+0x84>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 8007d5c:	2103      	movs	r1, #3
 8007d5e:	2000      	movs	r0, #0
 8007d60:	f002 fca8 	bl	800a6b4 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 8007d64:	228b      	movs	r2, #139	; 0x8b
 8007d66:	5db9      	ldrb	r1, [r7, r6]
 8007d68:	4bd8      	ldr	r3, [pc, #864]	; (80080cc <ProcessMacCommands.isra.1.constprop.7+0x3d4>)
 8007d6a:	00d2      	lsls	r2, r2, #3
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 8007d6c:	1ce6      	adds	r6, r4, #3
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 8007d6e:	3402      	adds	r4, #2
 8007d70:	5499      	strb	r1, [r3, r2]
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 8007d72:	b2e4      	uxtb	r4, r4
 8007d74:	5d39      	ldrb	r1, [r7, r4]
 8007d76:	4ad6      	ldr	r2, [pc, #856]	; (80080d0 <ProcessMacCommands.isra.1.constprop.7+0x3d8>)
 8007d78:	b2f6      	uxtb	r6, r6
 8007d7a:	5499      	strb	r1, [r3, r2]
                uint8_t eirpDwellTime = payload[macIndex++];
 8007d7c:	0034      	movs	r4, r6
 8007d7e:	e7c9      	b.n	8007d14 <ProcessMacCommands.isra.1.constprop.7+0x1c>
                int8_t linkAdrDatarate = DR_0;
 8007d80:	2300      	movs	r3, #0
 8007d82:	aa06      	add	r2, sp, #24
 8007d84:	7393      	strb	r3, [r2, #14]
                int8_t linkAdrTxPower = TX_POWER_0;
 8007d86:	73d3      	strb	r3, [r2, #15]
                uint8_t linkAdrNbRep = 0;
 8007d88:	ad0b      	add	r5, sp, #44	; 0x2c
                uint8_t linkAdrNbBytesParsed = 0;
 8007d8a:	aa0c      	add	r2, sp, #48	; 0x30
                uint8_t linkAdrNbRep = 0;
 8007d8c:	702b      	strb	r3, [r5, #0]
                uint8_t linkAdrNbBytesParsed = 0;
 8007d8e:	7013      	strb	r3, [r2, #0]
                if( adrBlockFound == false )
 8007d90:	9b02      	ldr	r3, [sp, #8]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d14e      	bne.n	8007e34 <ProcessMacCommands.isra.1.constprop.7+0x13c>
                    linkAdrReq.Payload = &payload[macIndex - 1];
 8007d96:	1e73      	subs	r3, r6, #1
 8007d98:	a910      	add	r1, sp, #64	; 0x40
 8007d9a:	18fb      	adds	r3, r7, r3
 8007d9c:	604b      	str	r3, [r1, #4]
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 8007d9e:	9b04      	ldr	r3, [sp, #16]
 8007da0:	3301      	adds	r3, #1
 8007da2:	1b9b      	subs	r3, r3, r6
 8007da4:	720b      	strb	r3, [r1, #8]
                    linkAdrReq.AdrEnabled = MacCtx.NvmCtx->AdrCtrlOn;
 8007da6:	4ecb      	ldr	r6, [pc, #812]	; (80080d4 <ProcessMacCommands.isra.1.constprop.7+0x3dc>)
 8007da8:	4bc8      	ldr	r3, [pc, #800]	; (80080cc <ProcessMacCommands.isra.1.constprop.7+0x3d4>)
 8007daa:	599b      	ldr	r3, [r3, r6]
 8007dac:	0018      	movs	r0, r3
 8007dae:	30f2      	adds	r0, #242	; 0xf2
 8007db0:	7800      	ldrb	r0, [r0, #0]
 8007db2:	7288      	strb	r0, [r1, #10]
                    linkAdrReq.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8007db4:	2096      	movs	r0, #150	; 0x96
 8007db6:	0040      	lsls	r0, r0, #1
 8007db8:	5c18      	ldrb	r0, [r3, r0]
 8007dba:	7248      	strb	r0, [r1, #9]
                    linkAdrReq.CurrentDatarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8007dbc:	0018      	movs	r0, r3
 8007dbe:	30f9      	adds	r0, #249	; 0xf9
 8007dc0:	7800      	ldrb	r0, [r0, #0]
 8007dc2:	72c8      	strb	r0, [r1, #11]
                    linkAdrReq.CurrentTxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 8007dc4:	0018      	movs	r0, r3
 8007dc6:	30f8      	adds	r0, #248	; 0xf8
 8007dc8:	7800      	ldrb	r0, [r0, #0]
 8007dca:	7308      	strb	r0, [r1, #12]
                    linkAdrReq.CurrentNbRep = MacCtx.NvmCtx->MacParams.ChannelsNbTrans;
 8007dcc:	0018      	movs	r0, r3
 8007dce:	30ff      	adds	r0, #255	; 0xff
 8007dd0:	7e40      	ldrb	r0, [r0, #25]
 8007dd2:	7348      	strb	r0, [r1, #13]
                    linkAdrReq.Version = MacCtx.NvmCtx->Version;
 8007dd4:	20e8      	movs	r0, #232	; 0xe8
 8007dd6:	0040      	lsls	r0, r0, #1
 8007dd8:	5818      	ldr	r0, [r3, r0]
                    status = RegionLinkAdrReq( MacCtx.NvmCtx->Region, &linkAdrReq, &linkAdrDatarate,
 8007dda:	781b      	ldrb	r3, [r3, #0]
 8007ddc:	9201      	str	r2, [sp, #4]
 8007dde:	469c      	mov	ip, r3
 8007de0:	230f      	movs	r3, #15
 8007de2:	aa06      	add	r2, sp, #24
 8007de4:	189b      	adds	r3, r3, r2
 8007de6:	220e      	movs	r2, #14
                    linkAdrReq.Version = MacCtx.NvmCtx->Version;
 8007de8:	9010      	str	r0, [sp, #64]	; 0x40
                    status = RegionLinkAdrReq( MacCtx.NvmCtx->Region, &linkAdrReq, &linkAdrDatarate,
 8007dea:	a806      	add	r0, sp, #24
 8007dec:	1812      	adds	r2, r2, r0
 8007dee:	9500      	str	r5, [sp, #0]
 8007df0:	4660      	mov	r0, ip
 8007df2:	f003 fa95 	bl	800b320 <RegionLinkAdrReq>
 8007df6:	ab06      	add	r3, sp, #24
 8007df8:	7358      	strb	r0, [r3, #13]
                    if( ( status & 0x07 ) == 0x07 )
 8007dfa:	43c0      	mvns	r0, r0
 8007dfc:	0743      	lsls	r3, r0, #29
 8007dfe:	d10d      	bne.n	8007e1c <ProcessMacCommands.isra.1.constprop.7+0x124>
                        MacCtx.NvmCtx->MacParams.ChannelsDatarate = linkAdrDatarate;
 8007e00:	4bb2      	ldr	r3, [pc, #712]	; (80080cc <ProcessMacCommands.isra.1.constprop.7+0x3d4>)
 8007e02:	a906      	add	r1, sp, #24
 8007e04:	599b      	ldr	r3, [r3, r6]
 8007e06:	7b89      	ldrb	r1, [r1, #14]
 8007e08:	001a      	movs	r2, r3
 8007e0a:	32f9      	adds	r2, #249	; 0xf9
 8007e0c:	7011      	strb	r1, [r2, #0]
                        MacCtx.NvmCtx->MacParams.ChannelsTxPower = linkAdrTxPower;
 8007e0e:	a906      	add	r1, sp, #24
 8007e10:	7bc9      	ldrb	r1, [r1, #15]
 8007e12:	3a01      	subs	r2, #1
 8007e14:	7011      	strb	r1, [r2, #0]
                        MacCtx.NvmCtx->MacParams.ChannelsNbTrans = linkAdrNbRep;
 8007e16:	782a      	ldrb	r2, [r5, #0]
 8007e18:	33ff      	adds	r3, #255	; 0xff
 8007e1a:	765a      	strb	r2, [r3, #25]
static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
 8007e1c:	2500      	movs	r5, #0
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 8007e1e:	ab0c      	add	r3, sp, #48	; 0x30
 8007e20:	781e      	ldrb	r6, [r3, #0]
 8007e22:	2105      	movs	r1, #5
 8007e24:	0030      	movs	r0, r6
 8007e26:	f7f8 f99f 	bl	8000168 <__udivsi3>
 8007e2a:	b2c0      	uxtb	r0, r0
 8007e2c:	4285      	cmp	r5, r0
 8007e2e:	d304      	bcc.n	8007e3a <ProcessMacCommands.isra.1.constprop.7+0x142>
                    macIndex += linkAdrNbBytesParsed - 1;
 8007e30:	19a6      	adds	r6, r4, r6
 8007e32:	b2f6      	uxtb	r6, r6
 8007e34:	2301      	movs	r3, #1
 8007e36:	9302      	str	r3, [sp, #8]
 8007e38:	e7a0      	b.n	8007d7c <ProcessMacCommands.isra.1.constprop.7+0x84>
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 8007e3a:	230d      	movs	r3, #13
 8007e3c:	a906      	add	r1, sp, #24
 8007e3e:	185b      	adds	r3, r3, r1
 8007e40:	2201      	movs	r2, #1
 8007e42:	0019      	movs	r1, r3
 8007e44:	2003      	movs	r0, #3
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 8007e46:	3501      	adds	r5, #1
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 8007e48:	f002 fae0 	bl	800a40c <LoRaMacCommandsAddCmd>
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 8007e4c:	b2ed      	uxtb	r5, r5
 8007e4e:	e7e6      	b.n	8007e1e <ProcessMacCommands.isra.1.constprop.7+0x126>
                MacCtx.NvmCtx->MaxDCycle = payload[macIndex++] & 0x0F;
 8007e50:	4a9e      	ldr	r2, [pc, #632]	; (80080cc <ProcessMacCommands.isra.1.constprop.7+0x3d4>)
 8007e52:	4ba0      	ldr	r3, [pc, #640]	; (80080d4 <ProcessMacCommands.isra.1.constprop.7+0x3dc>)
 8007e54:	3402      	adds	r4, #2
 8007e56:	58d1      	ldr	r1, [r2, r3]
 8007e58:	220f      	movs	r2, #15
 8007e5a:	5dbb      	ldrb	r3, [r7, r6]
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 8007e5c:	2004      	movs	r0, #4
                MacCtx.NvmCtx->MaxDCycle = payload[macIndex++] & 0x0F;
 8007e5e:	4013      	ands	r3, r2
 8007e60:	322e      	adds	r2, #46	; 0x2e
 8007e62:	32ff      	adds	r2, #255	; 0xff
 8007e64:	548b      	strb	r3, [r1, r2]
                MacCtx.NvmCtx->AggregatedDCycle = 1 << MacCtx.NvmCtx->MaxDCycle;
 8007e66:	3a3c      	subs	r2, #60	; 0x3c
 8007e68:	3aff      	subs	r2, #255	; 0xff
 8007e6a:	409a      	lsls	r2, r3
 8007e6c:	0013      	movs	r3, r2
 8007e6e:	22e1      	movs	r2, #225	; 0xe1
 8007e70:	0052      	lsls	r2, r2, #1
 8007e72:	528b      	strh	r3, [r1, r2]
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 8007e74:	2200      	movs	r2, #0
 8007e76:	a90a      	add	r1, sp, #40	; 0x28
                MacCtx.NvmCtx->MaxDCycle = payload[macIndex++] & 0x0F;
 8007e78:	b2e4      	uxtb	r4, r4
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 8007e7a:	f002 fac7 	bl	800a40c <LoRaMacCommandsAddCmd>
                uint8_t delay = payload[macIndex++] & 0x0F;
 8007e7e:	0026      	movs	r6, r4
 8007e80:	e77c      	b.n	8007d7c <ProcessMacCommands.isra.1.constprop.7+0x84>
                status = 0x07;
 8007e82:	2107      	movs	r1, #7
 8007e84:	ab06      	add	r3, sp, #24
 8007e86:	7359      	strb	r1, [r3, #13]
                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 8007e88:	5dbb      	ldrb	r3, [r7, r6]
 8007e8a:	ad10      	add	r5, sp, #64	; 0x40
 8007e8c:	091a      	lsrs	r2, r3, #4
 8007e8e:	400a      	ands	r2, r1
 8007e90:	706a      	strb	r2, [r5, #1]
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 8007e92:	220f      	movs	r2, #15
 8007e94:	4013      	ands	r3, r2
 8007e96:	702b      	strb	r3, [r5, #0]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8007e98:	1d22      	adds	r2, r4, #4
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 8007e9a:	1ce3      	adds	r3, r4, #3
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8007e9c:	b2db      	uxtb	r3, r3
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8007e9e:	b2d2      	uxtb	r2, r2
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8007ea0:	5cfb      	ldrb	r3, [r7, r3]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8007ea2:	5cba      	ldrb	r2, [r7, r2]
 8007ea4:	1d66      	adds	r6, r4, #5
                macIndex++;
 8007ea6:	3402      	adds	r4, #2
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8007ea8:	0412      	lsls	r2, r2, #16
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 8007eaa:	b2e4      	uxtb	r4, r4
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8007eac:	021b      	lsls	r3, r3, #8
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8007eae:	4313      	orrs	r3, r2
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 8007eb0:	5d3a      	ldrb	r2, [r7, r4]
                status = RegionRxParamSetupReq( MacCtx.NvmCtx->Region, &rxParamSetupReq );
 8007eb2:	4c88      	ldr	r4, [pc, #544]	; (80080d4 <ProcessMacCommands.isra.1.constprop.7+0x3dc>)
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8007eb4:	4313      	orrs	r3, r2
                rxParamSetupReq.Frequency *= 100;
 8007eb6:	2264      	movs	r2, #100	; 0x64
 8007eb8:	4353      	muls	r3, r2
 8007eba:	9311      	str	r3, [sp, #68]	; 0x44
                status = RegionRxParamSetupReq( MacCtx.NvmCtx->Region, &rxParamSetupReq );
 8007ebc:	4b83      	ldr	r3, [pc, #524]	; (80080cc <ProcessMacCommands.isra.1.constprop.7+0x3d4>)
 8007ebe:	0029      	movs	r1, r5
 8007ec0:	591b      	ldr	r3, [r3, r4]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8007ec2:	b2f6      	uxtb	r6, r6
                status = RegionRxParamSetupReq( MacCtx.NvmCtx->Region, &rxParamSetupReq );
 8007ec4:	7818      	ldrb	r0, [r3, #0]
 8007ec6:	9303      	str	r3, [sp, #12]
 8007ec8:	f003 fa39 	bl	800b33e <RegionRxParamSetupReq>
 8007ecc:	ab06      	add	r3, sp, #24
 8007ece:	7358      	strb	r0, [r3, #13]
                if( ( status & 0x07 ) == 0x07 )
 8007ed0:	2307      	movs	r3, #7
 8007ed2:	4003      	ands	r3, r0
 8007ed4:	2b07      	cmp	r3, #7
 8007ed6:	d10f      	bne.n	8007ef8 <ProcessMacCommands.isra.1.constprop.7+0x200>
                    MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 8007ed8:	2190      	movs	r1, #144	; 0x90
 8007eda:	4b7c      	ldr	r3, [pc, #496]	; (80080cc <ProcessMacCommands.isra.1.constprop.7+0x3d4>)
 8007edc:	782a      	ldrb	r2, [r5, #0]
 8007ede:	591b      	ldr	r3, [r3, r4]
 8007ee0:	0049      	lsls	r1, r1, #1
 8007ee2:	545a      	strb	r2, [r3, r1]
                    MacCtx.NvmCtx->MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 8007ee4:	3108      	adds	r1, #8
 8007ee6:	545a      	strb	r2, [r3, r1]
                    MacCtx.NvmCtx->MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 8007ee8:	001a      	movs	r2, r3
 8007eea:	6869      	ldr	r1, [r5, #4]
 8007eec:	32fc      	adds	r2, #252	; 0xfc
 8007eee:	6211      	str	r1, [r2, #32]
                    MacCtx.NvmCtx->MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 8007ef0:	6291      	str	r1, [r2, #40]	; 0x28
                    MacCtx.NvmCtx->MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 8007ef2:	786a      	ldrb	r2, [r5, #1]
 8007ef4:	33ff      	adds	r3, #255	; 0xff
 8007ef6:	769a      	strb	r2, [r3, #26]
                macCmdPayload[0] = status;
 8007ef8:	a90a      	add	r1, sp, #40	; 0x28
 8007efa:	7008      	strb	r0, [r1, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 8007efc:	2201      	movs	r2, #1
 8007efe:	2005      	movs	r0, #5
 8007f00:	f002 fa84 	bl	800a40c <LoRaMacCommandsAddCmd>
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 8007f04:	2310      	movs	r3, #16
 8007f06:	4971      	ldr	r1, [pc, #452]	; (80080cc <ProcessMacCommands.isra.1.constprop.7+0x3d4>)
 8007f08:	4a73      	ldr	r2, [pc, #460]	; (80080d8 <ProcessMacCommands.isra.1.constprop.7+0x3e0>)
 8007f0a:	5c88      	ldrb	r0, [r1, r2]
 8007f0c:	4303      	orrs	r3, r0
 8007f0e:	548b      	strb	r3, [r1, r2]
 8007f10:	e734      	b.n	8007d7c <ProcessMacCommands.isra.1.constprop.7+0x84>
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 8007f12:	23d2      	movs	r3, #210	; 0xd2
 8007f14:	4a6d      	ldr	r2, [pc, #436]	; (80080cc <ProcessMacCommands.isra.1.constprop.7+0x3d4>)
 8007f16:	009b      	lsls	r3, r3, #2
 8007f18:	58d3      	ldr	r3, [r2, r3]
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 8007f1a:	20ff      	movs	r0, #255	; 0xff
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d003      	beq.n	8007f28 <ProcessMacCommands.isra.1.constprop.7+0x230>
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d000      	beq.n	8007f28 <ProcessMacCommands.isra.1.constprop.7+0x230>
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 8007f26:	4798      	blx	r3
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 8007f28:	233f      	movs	r3, #63	; 0x3f
 8007f2a:	9a06      	ldr	r2, [sp, #24]
                macCmdPayload[0] = batteryLevel;
 8007f2c:	a90a      	add	r1, sp, #40	; 0x28
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 8007f2e:	4013      	ands	r3, r2
                macCmdPayload[0] = batteryLevel;
 8007f30:	7008      	strb	r0, [r1, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 8007f32:	2202      	movs	r2, #2
 8007f34:	2006      	movs	r0, #6
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 8007f36:	704b      	strb	r3, [r1, #1]
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 8007f38:	f002 fa68 	bl	800a40c <LoRaMacCommandsAddCmd>
 8007f3c:	e71e      	b.n	8007d7c <ProcessMacCommands.isra.1.constprop.7+0x84>
                status = 0x03;
 8007f3e:	250d      	movs	r5, #13
 8007f40:	ab06      	add	r3, sp, #24
 8007f42:	18ed      	adds	r5, r5, r3
 8007f44:	2303      	movs	r3, #3
 8007f46:	702b      	strb	r3, [r5, #0]
                newChannelReq.ChannelId = payload[macIndex++];
 8007f48:	5dbb      	ldrb	r3, [r7, r6]
 8007f4a:	a90c      	add	r1, sp, #48	; 0x30
 8007f4c:	710b      	strb	r3, [r1, #4]
                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 8007f4e:	1ce3      	adds	r3, r4, #3
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8007f50:	b2db      	uxtb	r3, r3
 8007f52:	5cf8      	ldrb	r0, [r7, r3]
 8007f54:	1d23      	adds	r3, r4, #4
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8007f56:	b2db      	uxtb	r3, r3
 8007f58:	5cfb      	ldrb	r3, [r7, r3]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8007f5a:	0200      	lsls	r0, r0, #8
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8007f5c:	041b      	lsls	r3, r3, #16
 8007f5e:	4303      	orrs	r3, r0
                newChannelReq.ChannelId = payload[macIndex++];
 8007f60:	1ca0      	adds	r0, r4, #2
                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 8007f62:	b2c0      	uxtb	r0, r0
 8007f64:	5c38      	ldrb	r0, [r7, r0]
                chParam.DrRange.Value = payload[macIndex++];
 8007f66:	1da6      	adds	r6, r4, #6
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8007f68:	4303      	orrs	r3, r0
                chParam.Frequency *= 100;
 8007f6a:	2064      	movs	r0, #100	; 0x64
 8007f6c:	4343      	muls	r3, r0
 8007f6e:	9310      	str	r3, [sp, #64]	; 0x40
                chParam.Rx1Frequency = 0;
 8007f70:	2300      	movs	r3, #0
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8007f72:	3405      	adds	r4, #5
                chParam.DrRange.Value = payload[macIndex++];
 8007f74:	b2e4      	uxtb	r4, r4
                chParam.Rx1Frequency = 0;
 8007f76:	9311      	str	r3, [sp, #68]	; 0x44
                chParam.DrRange.Value = payload[macIndex++];
 8007f78:	5d3b      	ldrb	r3, [r7, r4]
                newChannelReq.NewChannel = &chParam;
 8007f7a:	aa10      	add	r2, sp, #64	; 0x40
                chParam.DrRange.Value = payload[macIndex++];
 8007f7c:	7213      	strb	r3, [r2, #8]
                newChannelReq.NewChannel = &chParam;
 8007f7e:	920c      	str	r2, [sp, #48]	; 0x30
                status = RegionNewChannelReq( MacCtx.NvmCtx->Region, &newChannelReq );
 8007f80:	4b54      	ldr	r3, [pc, #336]	; (80080d4 <ProcessMacCommands.isra.1.constprop.7+0x3dc>)
 8007f82:	4a52      	ldr	r2, [pc, #328]	; (80080cc <ProcessMacCommands.isra.1.constprop.7+0x3d4>)
                chParam.DrRange.Value = payload[macIndex++];
 8007f84:	b2f6      	uxtb	r6, r6
                status = RegionNewChannelReq( MacCtx.NvmCtx->Region, &newChannelReq );
 8007f86:	58d3      	ldr	r3, [r2, r3]
 8007f88:	7818      	ldrb	r0, [r3, #0]
 8007f8a:	f003 f9e1 	bl	800b350 <RegionNewChannelReq>
                macCmdPayload[0] = status;
 8007f8e:	a90a      	add	r1, sp, #40	; 0x28
                status = RegionNewChannelReq( MacCtx.NvmCtx->Region, &newChannelReq );
 8007f90:	7028      	strb	r0, [r5, #0]
                macCmdPayload[0] = status;
 8007f92:	7008      	strb	r0, [r1, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 8007f94:	2201      	movs	r2, #1
 8007f96:	2007      	movs	r0, #7
 8007f98:	e7ce      	b.n	8007f38 <ProcessMacCommands.isra.1.constprop.7+0x240>
                uint8_t delay = payload[macIndex++] & 0x0F;
 8007f9a:	230f      	movs	r3, #15
 8007f9c:	5dba      	ldrb	r2, [r7, r6]
 8007f9e:	3402      	adds	r4, #2
 8007fa0:	b2e4      	uxtb	r4, r4
 8007fa2:	401a      	ands	r2, r3
                if( delay == 0 )
 8007fa4:	d100      	bne.n	8007fa8 <ProcessMacCommands.isra.1.constprop.7+0x2b0>
                    delay++;
 8007fa6:	3201      	adds	r2, #1
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 = delay * 1000;
 8007fa8:	4d48      	ldr	r5, [pc, #288]	; (80080cc <ProcessMacCommands.isra.1.constprop.7+0x3d4>)
 8007faa:	4b4a      	ldr	r3, [pc, #296]	; (80080d4 <ProcessMacCommands.isra.1.constprop.7+0x3dc>)
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 8007fac:	2008      	movs	r0, #8
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 = delay * 1000;
 8007fae:	58e9      	ldr	r1, [r5, r3]
 8007fb0:	3b9c      	subs	r3, #156	; 0x9c
 8007fb2:	4353      	muls	r3, r2
                MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + 1000;
 8007fb4:	22fa      	movs	r2, #250	; 0xfa
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 = delay * 1000;
 8007fb6:	31fc      	adds	r1, #252	; 0xfc
                MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + 1000;
 8007fb8:	0092      	lsls	r2, r2, #2
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 = delay * 1000;
 8007fba:	60cb      	str	r3, [r1, #12]
                MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + 1000;
 8007fbc:	189b      	adds	r3, r3, r2
 8007fbe:	610b      	str	r3, [r1, #16]
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	a90a      	add	r1, sp, #40	; 0x28
 8007fc4:	f002 fa22 	bl	800a40c <LoRaMacCommandsAddCmd>
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 8007fc8:	2310      	movs	r3, #16
 8007fca:	4a43      	ldr	r2, [pc, #268]	; (80080d8 <ProcessMacCommands.isra.1.constprop.7+0x3e0>)
 8007fcc:	5ca9      	ldrb	r1, [r5, r2]
 8007fce:	430b      	orrs	r3, r1
 8007fd0:	54ab      	strb	r3, [r5, r2]
 8007fd2:	e754      	b.n	8007e7e <ProcessMacCommands.isra.1.constprop.7+0x186>
                txParamSetupReq.UplinkDwellTime = 0;
 8007fd4:	2200      	movs	r2, #0
                uint8_t eirpDwellTime = payload[macIndex++];
 8007fd6:	3402      	adds	r4, #2
 8007fd8:	b2e3      	uxtb	r3, r4
 8007fda:	9305      	str	r3, [sp, #20]
                txParamSetupReq.UplinkDwellTime = 0;
 8007fdc:	ac0b      	add	r4, sp, #44	; 0x2c
                uint8_t eirpDwellTime = payload[macIndex++];
 8007fde:	5dbb      	ldrb	r3, [r7, r6]
                txParamSetupReq.UplinkDwellTime = 0;
 8007fe0:	7022      	strb	r2, [r4, #0]
                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 8007fe2:	3220      	adds	r2, #32
 8007fe4:	401a      	ands	r2, r3
 8007fe6:	d142      	bne.n	800806e <ProcessMacCommands.isra.1.constprop.7+0x376>
                    txParamSetupReq.DownlinkDwellTime = 1;
 8007fe8:	7062      	strb	r2, [r4, #1]
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 8007fea:	06da      	lsls	r2, r3, #27
 8007fec:	d501      	bpl.n	8007ff2 <ProcessMacCommands.isra.1.constprop.7+0x2fa>
                    txParamSetupReq.UplinkDwellTime = 1;
 8007fee:	2201      	movs	r2, #1
 8007ff0:	7022      	strb	r2, [r4, #0]
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 8007ff2:	220f      	movs	r2, #15
 8007ff4:	4013      	ands	r3, r2
 8007ff6:	70a3      	strb	r3, [r4, #2]
                if( RegionTxParamSetupReq( MacCtx.NvmCtx->Region, &txParamSetupReq ) != -1 )
 8007ff8:	4e36      	ldr	r6, [pc, #216]	; (80080d4 <ProcessMacCommands.isra.1.constprop.7+0x3dc>)
 8007ffa:	4b34      	ldr	r3, [pc, #208]	; (80080cc <ProcessMacCommands.isra.1.constprop.7+0x3d4>)
 8007ffc:	0021      	movs	r1, r4
 8007ffe:	599b      	ldr	r3, [r3, r6]
 8008000:	7818      	ldrb	r0, [r3, #0]
 8008002:	9303      	str	r3, [sp, #12]
 8008004:	f003 f9ad 	bl	800b362 <RegionTxParamSetupReq>
 8008008:	1c43      	adds	r3, r0, #1
 800800a:	d02e      	beq.n	800806a <ProcessMacCommands.isra.1.constprop.7+0x372>
                    MacCtx.NvmCtx->MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 800800c:	4b2f      	ldr	r3, [pc, #188]	; (80080cc <ProcessMacCommands.isra.1.constprop.7+0x3d4>)
 800800e:	599d      	ldr	r5, [r3, r6]
 8008010:	7823      	ldrb	r3, [r4, #0]
 8008012:	9303      	str	r3, [sp, #12]
 8008014:	2396      	movs	r3, #150	; 0x96
 8008016:	9a03      	ldr	r2, [sp, #12]
 8008018:	005b      	lsls	r3, r3, #1
 800801a:	54ea      	strb	r2, [r5, r3]
                    MacCtx.NvmCtx->MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 800801c:	232e      	movs	r3, #46	; 0x2e
 800801e:	7862      	ldrb	r2, [r4, #1]
 8008020:	33ff      	adds	r3, #255	; 0xff
 8008022:	54ea      	strb	r2, [r5, r3]
                    MacCtx.NvmCtx->MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 8008024:	002b      	movs	r3, r5
 8008026:	33fc      	adds	r3, #252	; 0xfc
 8008028:	9307      	str	r3, [sp, #28]
 800802a:	78a3      	ldrb	r3, [r4, #2]
 800802c:	4a2b      	ldr	r2, [pc, #172]	; (80080dc <ProcessMacCommands.isra.1.constprop.7+0x3e4>)
 800802e:	5cd0      	ldrb	r0, [r2, r3]
 8008030:	f7f8 fd12 	bl	8000a58 <__aeabi_ui2f>
 8008034:	9b07      	ldr	r3, [sp, #28]
                    getPhy.Attribute = PHY_MIN_TX_DR;
 8008036:	a90c      	add	r1, sp, #48	; 0x30
                    MacCtx.NvmCtx->MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 8008038:	6358      	str	r0, [r3, #52]	; 0x34
                    getPhy.Attribute = PHY_MIN_TX_DR;
 800803a:	2302      	movs	r3, #2
 800803c:	700b      	strb	r3, [r1, #0]
                    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800803e:	9b03      	ldr	r3, [sp, #12]
 8008040:	708b      	strb	r3, [r1, #2]
                    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8008042:	7828      	ldrb	r0, [r5, #0]
 8008044:	f003 f90c 	bl	800b260 <RegionGetPhyParam>
                    MacCtx.NvmCtx->MacParams.ChannelsDatarate = MAX( MacCtx.NvmCtx->MacParams.ChannelsDatarate, ( int8_t )phyParam.Value );
 8008048:	4b20      	ldr	r3, [pc, #128]	; (80080cc <ProcessMacCommands.isra.1.constprop.7+0x3d4>)
                    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800804a:	9010      	str	r0, [sp, #64]	; 0x40
                    MacCtx.NvmCtx->MacParams.ChannelsDatarate = MAX( MacCtx.NvmCtx->MacParams.ChannelsDatarate, ( int8_t )phyParam.Value );
 800804c:	599b      	ldr	r3, [r3, r6]
 800804e:	1c02      	adds	r2, r0, #0
 8008050:	33f9      	adds	r3, #249	; 0xf9
 8008052:	7819      	ldrb	r1, [r3, #0]
 8008054:	b240      	sxtb	r0, r0
 8008056:	b24c      	sxtb	r4, r1
 8008058:	42a0      	cmp	r0, r4
 800805a:	da00      	bge.n	800805e <ProcessMacCommands.isra.1.constprop.7+0x366>
 800805c:	1c0a      	adds	r2, r1, #0
 800805e:	701a      	strb	r2, [r3, #0]
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 8008060:	a90a      	add	r1, sp, #40	; 0x28
 8008062:	2200      	movs	r2, #0
 8008064:	2009      	movs	r0, #9
 8008066:	f002 f9d1 	bl	800a40c <LoRaMacCommandsAddCmd>
                uint8_t eirpDwellTime = payload[macIndex++];
 800806a:	9e05      	ldr	r6, [sp, #20]
 800806c:	e686      	b.n	8007d7c <ProcessMacCommands.isra.1.constprop.7+0x84>
                    txParamSetupReq.DownlinkDwellTime = 1;
 800806e:	2201      	movs	r2, #1
 8008070:	e7ba      	b.n	8007fe8 <ProcessMacCommands.isra.1.constprop.7+0x2f0>
                status = 0x03;
 8008072:	250d      	movs	r5, #13
 8008074:	ab06      	add	r3, sp, #24
 8008076:	18ed      	adds	r5, r5, r3
 8008078:	2303      	movs	r3, #3
 800807a:	702b      	strb	r3, [r5, #0]
                dlChannelReq.ChannelId = payload[macIndex++];
 800807c:	5dbb      	ldrb	r3, [r7, r6]
 800807e:	a910      	add	r1, sp, #64	; 0x40
 8008080:	700b      	strb	r3, [r1, #0]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8008082:	1d22      	adds	r2, r4, #4
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 8008084:	1ce3      	adds	r3, r4, #3
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8008086:	b2db      	uxtb	r3, r3
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8008088:	b2d2      	uxtb	r2, r2
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800808a:	5cfb      	ldrb	r3, [r7, r3]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800808c:	5cba      	ldrb	r2, [r7, r2]
 800808e:	1d66      	adds	r6, r4, #5
                dlChannelReq.ChannelId = payload[macIndex++];
 8008090:	3402      	adds	r4, #2
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8008092:	0412      	lsls	r2, r2, #16
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 8008094:	b2e4      	uxtb	r4, r4
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8008096:	021b      	lsls	r3, r3, #8
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8008098:	4313      	orrs	r3, r2
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 800809a:	5d3a      	ldrb	r2, [r7, r4]
                status = RegionDlChannelReq( MacCtx.NvmCtx->Region, &dlChannelReq );
 800809c:	4c0b      	ldr	r4, [pc, #44]	; (80080cc <ProcessMacCommands.isra.1.constprop.7+0x3d4>)
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800809e:	4313      	orrs	r3, r2
                dlChannelReq.Rx1Frequency *= 100;
 80080a0:	2264      	movs	r2, #100	; 0x64
 80080a2:	4353      	muls	r3, r2
 80080a4:	604b      	str	r3, [r1, #4]
                status = RegionDlChannelReq( MacCtx.NvmCtx->Region, &dlChannelReq );
 80080a6:	4b0b      	ldr	r3, [pc, #44]	; (80080d4 <ProcessMacCommands.isra.1.constprop.7+0x3dc>)
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80080a8:	b2f6      	uxtb	r6, r6
                status = RegionDlChannelReq( MacCtx.NvmCtx->Region, &dlChannelReq );
 80080aa:	58e3      	ldr	r3, [r4, r3]
 80080ac:	7818      	ldrb	r0, [r3, #0]
 80080ae:	f003 f961 	bl	800b374 <RegionDlChannelReq>
                macCmdPayload[0] = status;
 80080b2:	a90a      	add	r1, sp, #40	; 0x28
 80080b4:	7008      	strb	r0, [r1, #0]
                status = RegionDlChannelReq( MacCtx.NvmCtx->Region, &dlChannelReq );
 80080b6:	7028      	strb	r0, [r5, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 80080b8:	2201      	movs	r2, #1
 80080ba:	200a      	movs	r0, #10
 80080bc:	f002 f9a6 	bl	800a40c <LoRaMacCommandsAddCmd>
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 80080c0:	2310      	movs	r3, #16
 80080c2:	4a05      	ldr	r2, [pc, #20]	; (80080d8 <ProcessMacCommands.isra.1.constprop.7+0x3e0>)
 80080c4:	5ca1      	ldrb	r1, [r4, r2]
 80080c6:	430b      	orrs	r3, r1
 80080c8:	54a3      	strb	r3, [r4, r2]
 80080ca:	e657      	b.n	8007d7c <ProcessMacCommands.isra.1.constprop.7+0x84>
 80080cc:	20000980 	.word	0x20000980
 80080d0:	00000459 	.word	0x00000459
 80080d4:	00000484 	.word	0x00000484
 80080d8:	00000481 	.word	0x00000481
 80080dc:	0800fa42 	.word	0x0800fa42
                SysTime_t sysTime = { 0 };
 80080e0:	231e      	movs	r3, #30
 80080e2:	aa06      	add	r2, sp, #24
 80080e4:	189b      	adds	r3, r3, r2
 80080e6:	2200      	movs	r2, #0
 80080e8:	801a      	strh	r2, [r3, #0]
                gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 80080ea:	1ca3      	adds	r3, r4, #2
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 80080ec:	b2db      	uxtb	r3, r3
 80080ee:	5cfd      	ldrb	r5, [r7, r3]
 80080f0:	1ce3      	adds	r3, r4, #3
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 80080f2:	b2db      	uxtb	r3, r3
 80080f4:	5cf9      	ldrb	r1, [r7, r3]
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 80080f6:	022d      	lsls	r5, r5, #8
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 80080f8:	0409      	lsls	r1, r1, #16
 80080fa:	430d      	orrs	r5, r1
 80080fc:	1d23      	adds	r3, r4, #4
                gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 80080fe:	5db9      	ldrb	r1, [r7, r6]
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8008100:	b2db      	uxtb	r3, r3
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 8008102:	430d      	orrs	r5, r1
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8008104:	5cf9      	ldrb	r1, [r7, r3]
                gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 8008106:	23fa      	movs	r3, #250	; 0xfa
                gpsEpochTime.SubSeconds = payload[macIndex++];
 8008108:	1da6      	adds	r6, r4, #6
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 800810a:	3405      	adds	r4, #5
                gpsEpochTime.SubSeconds = payload[macIndex++];
 800810c:	b2e4      	uxtb	r4, r4
                gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 800810e:	5d3a      	ldrb	r2, [r7, r4]
 8008110:	009b      	lsls	r3, r3, #2
 8008112:	4353      	muls	r3, r2
 8008114:	aa06      	add	r2, sp, #24
 8008116:	121b      	asrs	r3, r3, #8
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8008118:	0609      	lsls	r1, r1, #24
                gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 800811a:	8393      	strh	r3, [r2, #28]
                sysTimeCurrent = SysTimeGet( );
 800811c:	a810      	add	r0, sp, #64	; 0x40
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 800811e:	430d      	orrs	r5, r1
                sysTimeCurrent = SysTimeGet( );
 8008120:	f004 fd86 	bl	800cc30 <SysTimeGet>
                sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 8008124:	4b3a      	ldr	r3, [pc, #232]	; (8008210 <ProcessMacCommands.isra.1.constprop.7+0x518>)
                sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 8008126:	4c3b      	ldr	r4, [pc, #236]	; (8008214 <ProcessMacCommands.isra.1.constprop.7+0x51c>)
                sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 8008128:	18e9      	adds	r1, r5, r3
                sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 800812a:	23cf      	movs	r3, #207	; 0xcf
 800812c:	009b      	lsls	r3, r3, #2
 800812e:	18e3      	adds	r3, r4, r3
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008134:	9300      	str	r3, [sp, #0]
 8008136:	23ce      	movs	r3, #206	; 0xce
 8008138:	009b      	lsls	r3, r3, #2
 800813a:	58e3      	ldr	r3, [r4, r3]
 800813c:	a80e      	add	r0, sp, #56	; 0x38
 800813e:	910c      	str	r1, [sp, #48]	; 0x30
 8008140:	f004 fd42 	bl	800cbc8 <SysTimeSub>
 8008144:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008146:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008148:	9300      	str	r3, [sp, #0]
 800814a:	9910      	ldr	r1, [sp, #64]	; 0x40
 800814c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800814e:	a80c      	add	r0, sp, #48	; 0x30
 8008150:	f004 fd20 	bl	800cb94 <SysTimeAdd>
                SysTimeSet( sysTime );
 8008154:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008156:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008158:	f004 fd4c 	bl	800cbf4 <SysTimeSet>
                LoRaMacClassBDeviceTimeAns( );
 800815c:	f002 f91e 	bl	800a39c <LoRaMacClassBDeviceTimeAns>
                MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 8008160:	2387      	movs	r3, #135	; 0x87
 8008162:	2201      	movs	r2, #1
 8008164:	00db      	lsls	r3, r3, #3
                gpsEpochTime.SubSeconds = payload[macIndex++];
 8008166:	b2f6      	uxtb	r6, r6
                MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 8008168:	54e2      	strb	r2, [r4, r3]
 800816a:	e607      	b.n	8007d7c <ProcessMacCommands.isra.1.constprop.7+0x84>
                if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 800816c:	2390      	movs	r3, #144	; 0x90
 800816e:	4a29      	ldr	r2, [pc, #164]	; (8008214 <ProcessMacCommands.isra.1.constprop.7+0x51c>)
 8008170:	00db      	lsls	r3, r3, #3
 8008172:	5cd3      	ldrb	r3, [r2, r3]
 8008174:	3b04      	subs	r3, #4
 8008176:	2b01      	cmp	r3, #1
 8008178:	d800      	bhi.n	800817c <ProcessMacCommands.isra.1.constprop.7+0x484>
 800817a:	e5ff      	b.n	8007d7c <ProcessMacCommands.isra.1.constprop.7+0x84>
                    LoRaMacClassBPingSlotInfoAns( );
 800817c:	f002 f90a 	bl	800a394 <LoRaMacClassBPingSlotInfoAns>
 8008180:	e5fc      	b.n	8007d7c <ProcessMacCommands.isra.1.constprop.7+0x84>
                frequency = ( uint32_t )payload[macIndex++];
 8008182:	1ca3      	adds	r3, r4, #2
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 8008184:	b2db      	uxtb	r3, r3
 8008186:	5cf9      	ldrb	r1, [r7, r3]
 8008188:	1ce3      	adds	r3, r4, #3
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 800818a:	b2db      	uxtb	r3, r3
 800818c:	5cfb      	ldrb	r3, [r7, r3]
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 800818e:	0209      	lsls	r1, r1, #8
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8008190:	041b      	lsls	r3, r3, #16
 8008192:	4319      	orrs	r1, r3
                frequency *= 100;
 8008194:	2364      	movs	r3, #100	; 0x64
                frequency = ( uint32_t )payload[macIndex++];
 8008196:	5dba      	ldrb	r2, [r7, r6]
                datarate = payload[macIndex++] & 0x0F;
 8008198:	1d66      	adds	r6, r4, #5
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 800819a:	3404      	adds	r4, #4
                datarate = payload[macIndex++] & 0x0F;
 800819c:	b2e4      	uxtb	r4, r4
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 800819e:	4311      	orrs	r1, r2
                datarate = payload[macIndex++] & 0x0F;
 80081a0:	5d38      	ldrb	r0, [r7, r4]
                frequency *= 100;
 80081a2:	4359      	muls	r1, r3
                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 80081a4:	3b55      	subs	r3, #85	; 0x55
 80081a6:	4018      	ands	r0, r3
 80081a8:	f002 f8f5 	bl	800a396 <LoRaMacClassBPingSlotChannelReq>
                macCmdPayload[0] = status;
 80081ac:	a90a      	add	r1, sp, #40	; 0x28
 80081ae:	7008      	strb	r0, [r1, #0]
                datarate = payload[macIndex++] & 0x0F;
 80081b0:	b2f6      	uxtb	r6, r6
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
 80081b2:	2201      	movs	r2, #1
 80081b4:	2011      	movs	r0, #17
 80081b6:	e6bf      	b.n	8007f38 <ProcessMacCommands.isra.1.constprop.7+0x240>
                beaconTimingDelay = ( uint16_t )payload[macIndex++];
 80081b8:	1ca3      	adds	r3, r4, #2
                beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 80081ba:	b2db      	uxtb	r3, r3
 80081bc:	5cf8      	ldrb	r0, [r7, r3]
 80081be:	5dbb      	ldrb	r3, [r7, r6]
 80081c0:	0200      	lsls	r0, r0, #8
 80081c2:	4318      	orrs	r0, r3
                beaconTimingChannel = payload[macIndex++];
 80081c4:	1d26      	adds	r6, r4, #4
                LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 80081c6:	4b14      	ldr	r3, [pc, #80]	; (8008218 <ProcessMacCommands.isra.1.constprop.7+0x520>)
                beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 80081c8:	3403      	adds	r4, #3
                beaconTimingChannel = payload[macIndex++];
 80081ca:	b2e4      	uxtb	r4, r4
                LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 80081cc:	5d39      	ldrb	r1, [r7, r4]
 80081ce:	681a      	ldr	r2, [r3, #0]
                beaconTimingChannel = payload[macIndex++];
 80081d0:	b2f6      	uxtb	r6, r6
                LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 80081d2:	f002 f8e2 	bl	800a39a <LoRaMacClassBBeaconTimingAns>
 80081d6:	e5d1      	b.n	8007d7c <ProcessMacCommands.isra.1.constprop.7+0x84>
                    frequency = ( uint32_t )payload[macIndex++];
 80081d8:	5dba      	ldrb	r2, [r7, r6]
 80081da:	1ca3      	adds	r3, r4, #2
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 80081dc:	1d26      	adds	r6, r4, #4
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 80081de:	3403      	adds	r4, #3
 80081e0:	b2db      	uxtb	r3, r3
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 80081e2:	b2e4      	uxtb	r4, r4
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 80081e4:	5cf8      	ldrb	r0, [r7, r3]
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 80081e6:	5d3b      	ldrb	r3, [r7, r4]
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 80081e8:	0200      	lsls	r0, r0, #8
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 80081ea:	041b      	lsls	r3, r3, #16
 80081ec:	4318      	orrs	r0, r3
                    frequency *= 100;
 80081ee:	2364      	movs	r3, #100	; 0x64
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 80081f0:	4310      	orrs	r0, r2
                    frequency *= 100;
 80081f2:	4358      	muls	r0, r3
                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 80081f4:	f002 f8d3 	bl	800a39e <LoRaMacClassBBeaconFreqReq>
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 80081f8:	b2f6      	uxtb	r6, r6
 80081fa:	a90a      	add	r1, sp, #40	; 0x28
                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 80081fc:	2800      	cmp	r0, #0
 80081fe:	d004      	beq.n	800820a <ProcessMacCommands.isra.1.constprop.7+0x512>
                        macCmdPayload[0] = 1;
 8008200:	2301      	movs	r3, #1
 8008202:	700b      	strb	r3, [r1, #0]
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 8008204:	2201      	movs	r2, #1
 8008206:	2013      	movs	r0, #19
 8008208:	e696      	b.n	8007f38 <ProcessMacCommands.isra.1.constprop.7+0x240>
                        macCmdPayload[0] = 0;
 800820a:	7008      	strb	r0, [r1, #0]
 800820c:	e7fa      	b.n	8008204 <ProcessMacCommands.isra.1.constprop.7+0x50c>
 800820e:	46c0      	nop			; (mov r8, r8)
 8008210:	12d53d80 	.word	0x12d53d80
 8008214:	20000980 	.word	0x20000980
 8008218:	20001660 	.word	0x20001660

0800821c <LoRaMacIsBusy>:
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800821c:	22d0      	movs	r2, #208	; 0xd0
 800821e:	4b06      	ldr	r3, [pc, #24]	; (8008238 <LoRaMacIsBusy+0x1c>)
 8008220:	0092      	lsls	r2, r2, #2
 8008222:	589a      	ldr	r2, [r3, r2]
    return true;
 8008224:	2001      	movs	r0, #1
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 8008226:	2a00      	cmp	r2, #0
 8008228:	d105      	bne.n	8008236 <LoRaMacIsBusy+0x1a>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 800822a:	4a04      	ldr	r2, [pc, #16]	; (800823c <LoRaMacIsBusy+0x20>)
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800822c:	5c98      	ldrb	r0, [r3, r2]
 800822e:	3801      	subs	r0, #1
 8008230:	1e43      	subs	r3, r0, #1
 8008232:	4198      	sbcs	r0, r3
 8008234:	b2c0      	uxtb	r0, r0
}
 8008236:	4770      	bx	lr
 8008238:	20000980 	.word	0x20000980
 800823c:	00000482 	.word	0x00000482

08008240 <PrepareFrame>:
{
 8008240:	b5f0      	push	{r4, r5, r6, r7, lr}
    MacCtx.PktBufferLen = 0;
 8008242:	2500      	movs	r5, #0
{
 8008244:	001f      	movs	r7, r3
 8008246:	b087      	sub	sp, #28
 8008248:	ab0c      	add	r3, sp, #48	; 0x30
    MacCtx.PktBufferLen = 0;
 800824a:	4c57      	ldr	r4, [pc, #348]	; (80083a8 <PrepareFrame+0x168>)
{
 800824c:	881e      	ldrh	r6, [r3, #0]
    MacCtx.NodeAckRequested = false;
 800824e:	4b57      	ldr	r3, [pc, #348]	; (80083ac <PrepareFrame+0x16c>)
{
 8008250:	9203      	str	r2, [sp, #12]
    MacCtx.NodeAckRequested = false;
 8008252:	54e5      	strb	r5, [r4, r3]
        fBufferSize = 0;
 8008254:	003b      	movs	r3, r7
 8008256:	1e5a      	subs	r2, r3, #1
 8008258:	4193      	sbcs	r3, r2
 800825a:	425b      	negs	r3, r3
 800825c:	401e      	ands	r6, r3
{
 800825e:	9001      	str	r0, [sp, #4]
 8008260:	9102      	str	r1, [sp, #8]
    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 8008262:	0032      	movs	r2, r6
 8008264:	0039      	movs	r1, r7
 8008266:	4852      	ldr	r0, [pc, #328]	; (80083b0 <PrepareFrame+0x170>)
    MacCtx.PktBufferLen = 0;
 8008268:	8025      	strh	r5, [r4, #0]
    uint32_t fCntUp = 0;
 800826a:	9504      	str	r5, [sp, #16]
    size_t macCmdsSize = 0;
 800826c:	9505      	str	r5, [sp, #20]
    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 800826e:	f004 feba 	bl	800cfe6 <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 8008272:	4b50      	ldr	r3, [pc, #320]	; (80083b4 <PrepareFrame+0x174>)
 8008274:	b2f2      	uxtb	r2, r6
 8008276:	54e2      	strb	r2, [r4, r3]
    MacCtx.PktBuffer[0] = macHdr->Value;
 8008278:	9b01      	ldr	r3, [sp, #4]
 800827a:	781b      	ldrb	r3, [r3, #0]
 800827c:	70a3      	strb	r3, [r4, #2]
    switch( macHdr->Bits.MType )
 800827e:	9b01      	ldr	r3, [sp, #4]
 8008280:	781b      	ldrb	r3, [r3, #0]
 8008282:	095b      	lsrs	r3, r3, #5
 8008284:	2b04      	cmp	r3, #4
 8008286:	d03c      	beq.n	8008302 <PrepareFrame+0xc2>
 8008288:	2b07      	cmp	r3, #7
 800828a:	d100      	bne.n	800828e <PrepareFrame+0x4e>
 800828c:	e07e      	b.n	800838c <PrepareFrame+0x14c>
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 800828e:	2002      	movs	r0, #2
    switch( macHdr->Bits.MType )
 8008290:	2b02      	cmp	r3, #2
 8008292:	d134      	bne.n	80082fe <PrepareFrame+0xbe>
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 8008294:	0026      	movs	r6, r4
 8008296:	2304      	movs	r3, #4
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 8008298:	0027      	movs	r7, r4
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 800829a:	36ff      	adds	r6, #255	; 0xff
 800829c:	7173      	strb	r3, [r6, #5]
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 800829e:	4b46      	ldr	r3, [pc, #280]	; (80083b8 <PrepareFrame+0x178>)
 80082a0:	37fc      	adds	r7, #252	; 0xfc
 80082a2:	60fb      	str	r3, [r7, #12]
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 80082a4:	23ff      	movs	r3, #255	; 0xff
 80082a6:	7373      	strb	r3, [r6, #13]
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 80082a8:	9b01      	ldr	r3, [sp, #4]
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 80082aa:	9903      	ldr	r1, [sp, #12]
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 80082ac:	781b      	ldrb	r3, [r3, #0]
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = MacCtx.NvmCtx->DevAddr;
 80082ae:	4d43      	ldr	r5, [pc, #268]	; (80083bc <PrepareFrame+0x17c>)
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 80082b0:	73b3      	strb	r3, [r6, #14]
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 80082b2:	2394      	movs	r3, #148	; 0x94
 80082b4:	005b      	lsls	r3, r3, #1
 80082b6:	54e1      	strb	r1, [r4, r3]
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = MacCtx.NvmCtx->DevAddr;
 80082b8:	5963      	ldr	r3, [r4, r5]
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 80082ba:	a804      	add	r0, sp, #16
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = MacCtx.NvmCtx->DevAddr;
 80082bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082be:	617b      	str	r3, [r7, #20]
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 80082c0:	9b02      	ldr	r3, [sp, #8]
 80082c2:	781b      	ldrb	r3, [r3, #0]
 80082c4:	7573      	strb	r3, [r6, #21]
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 80082c6:	2398      	movs	r3, #152	; 0x98
 80082c8:	005b      	lsls	r3, r3, #1
 80082ca:	54e2      	strb	r2, [r4, r3]
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 80082cc:	4b38      	ldr	r3, [pc, #224]	; (80083b0 <PrepareFrame+0x170>)
 80082ce:	633b      	str	r3, [r7, #48]	; 0x30
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 80082d0:	f002 fc0e 	bl	800aaf0 <LoRaMacCryptoGetFCntUp>
 80082d4:	0003      	movs	r3, r0
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 80082d6:	2012      	movs	r0, #18
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d110      	bne.n	80082fe <PrepareFrame+0xbe>
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 80082dc:	0021      	movs	r1, r4
 80082de:	9a04      	ldr	r2, [sp, #16]
 80082e0:	31fe      	adds	r1, #254	; 0xfe
 80082e2:	830a      	strh	r2, [r1, #24]
            MacCtx.McpsConfirm.NbRetries = 0;
 80082e4:	4936      	ldr	r1, [pc, #216]	; (80083c0 <PrepareFrame+0x180>)
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 80082e6:	a805      	add	r0, sp, #20
            MacCtx.McpsConfirm.NbRetries = 0;
 80082e8:	5463      	strb	r3, [r4, r1]
            MacCtx.McpsConfirm.AckReceived = false;
 80082ea:	3901      	subs	r1, #1
 80082ec:	5463      	strb	r3, [r4, r1]
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 80082ee:	2389      	movs	r3, #137	; 0x89
 80082f0:	00db      	lsls	r3, r3, #3
 80082f2:	50e2      	str	r2, [r4, r3]
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 80082f4:	f002 f934 	bl	800a560 <LoRaMacCommandsGetSizeSerializedCmds>
 80082f8:	2800      	cmp	r0, #0
 80082fa:	d006      	beq.n	800830a <PrepareFrame+0xca>
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80082fc:	2013      	movs	r0, #19
}
 80082fe:	b007      	add	sp, #28
 8008300:	bdf0      	pop	{r4, r5, r6, r7, pc}
            MacCtx.NodeAckRequested = true;
 8008302:	2301      	movs	r3, #1
 8008304:	4929      	ldr	r1, [pc, #164]	; (80083ac <PrepareFrame+0x16c>)
 8008306:	5463      	strb	r3, [r4, r1]
 8008308:	e7c4      	b.n	8008294 <PrepareFrame+0x54>
            if( macCmdsSize > 0 )
 800830a:	9b05      	ldr	r3, [sp, #20]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d101      	bne.n	8008314 <PrepareFrame+0xd4>
    return LORAMAC_STATUS_OK;
 8008310:	2000      	movs	r0, #0
 8008312:	e7f4      	b.n	80082fe <PrepareFrame+0xbe>
                availableSize = GetMaxAppPayloadWithoutFOptsLength( MacCtx.NvmCtx->MacParams.ChannelsDatarate );
 8008314:	20f9      	movs	r0, #249	; 0xf9
 8008316:	5963      	ldr	r3, [r4, r5]
 8008318:	5618      	ldrsb	r0, [r3, r0]
 800831a:	f7ff f98f 	bl	800763c <GetMaxAppPayloadWithoutFOptsLength>
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 800831e:	4b25      	ldr	r3, [pc, #148]	; (80083b4 <PrepareFrame+0x174>)
 8008320:	5ce3      	ldrb	r3, [r4, r3]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d01e      	beq.n	8008364 <PrepareFrame+0x124>
 8008326:	9b05      	ldr	r3, [sp, #20]
 8008328:	2b0f      	cmp	r3, #15
 800832a:	d811      	bhi.n	8008350 <PrepareFrame+0x110>
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 800832c:	4a25      	ldr	r2, [pc, #148]	; (80083c4 <PrepareFrame+0x184>)
 800832e:	a905      	add	r1, sp, #20
 8008330:	200f      	movs	r0, #15
 8008332:	f002 f921 	bl	800a578 <LoRaMacCommandsSerializeCmds>
 8008336:	2800      	cmp	r0, #0
 8008338:	d1e0      	bne.n	80082fc <PrepareFrame+0xbc>
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 800833a:	210f      	movs	r1, #15
 800833c:	9b02      	ldr	r3, [sp, #8]
 800833e:	9a05      	ldr	r2, [sp, #20]
 8008340:	781b      	ldrb	r3, [r3, #0]
 8008342:	400a      	ands	r2, r1
 8008344:	438b      	bics	r3, r1
 8008346:	4313      	orrs	r3, r2
 8008348:	9a02      	ldr	r2, [sp, #8]
 800834a:	7013      	strb	r3, [r2, #0]
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800834c:	7573      	strb	r3, [r6, #21]
 800834e:	e7d6      	b.n	80082fe <PrepareFrame+0xbe>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.NvmCtx->MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8008350:	5962      	ldr	r2, [r4, r5]
 8008352:	a905      	add	r1, sp, #20
 8008354:	3241      	adds	r2, #65	; 0x41
 8008356:	32ff      	adds	r2, #255	; 0xff
 8008358:	f002 f90e 	bl	800a578 <LoRaMacCommandsSerializeCmds>
 800835c:	2800      	cmp	r0, #0
 800835e:	d1cd      	bne.n	80082fc <PrepareFrame+0xbc>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 8008360:	300a      	adds	r0, #10
 8008362:	e7cc      	b.n	80082fe <PrepareFrame+0xbe>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.NvmCtx->MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8008364:	5962      	ldr	r2, [r4, r5]
 8008366:	a905      	add	r1, sp, #20
 8008368:	3241      	adds	r2, #65	; 0x41
 800836a:	32ff      	adds	r2, #255	; 0xff
 800836c:	f002 f904 	bl	800a578 <LoRaMacCommandsSerializeCmds>
 8008370:	2800      	cmp	r0, #0
 8008372:	d1c3      	bne.n	80082fc <PrepareFrame+0xbc>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 8008374:	2394      	movs	r3, #148	; 0x94
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 8008376:	2298      	movs	r2, #152	; 0x98
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 8008378:	005b      	lsls	r3, r3, #1
 800837a:	54e0      	strb	r0, [r4, r3]
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.NvmCtx->MacCommandsBuffer;
 800837c:	5963      	ldr	r3, [r4, r5]
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 800837e:	0052      	lsls	r2, r2, #1
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.NvmCtx->MacCommandsBuffer;
 8008380:	3341      	adds	r3, #65	; 0x41
 8008382:	33ff      	adds	r3, #255	; 0xff
 8008384:	633b      	str	r3, [r7, #48]	; 0x30
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 8008386:	9b05      	ldr	r3, [sp, #20]
 8008388:	54a3      	strb	r3, [r4, r2]
 800838a:	e7b8      	b.n	80082fe <PrepareFrame+0xbe>
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 800838c:	2f00      	cmp	r7, #0
 800838e:	d0bf      	beq.n	8008310 <PrepareFrame+0xd0>
 8008390:	2a00      	cmp	r2, #0
 8008392:	d0bd      	beq.n	8008310 <PrepareFrame+0xd0>
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 8008394:	b2f2      	uxtb	r2, r6
 8008396:	0039      	movs	r1, r7
 8008398:	480b      	ldr	r0, [pc, #44]	; (80083c8 <PrepareFrame+0x188>)
 800839a:	f004 fe24 	bl	800cfe6 <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 800839e:	4b05      	ldr	r3, [pc, #20]	; (80083b4 <PrepareFrame+0x174>)
 80083a0:	5ce3      	ldrb	r3, [r4, r3]
 80083a2:	3301      	adds	r3, #1
 80083a4:	8023      	strh	r3, [r4, #0]
 80083a6:	e7b3      	b.n	8008310 <PrepareFrame+0xd0>
 80083a8:	20000980 	.word	0x20000980
 80083ac:	00000414 	.word	0x00000414
 80083b0:	20000ab8 	.word	0x20000ab8
 80083b4:	00000237 	.word	0x00000237
 80083b8:	20000982 	.word	0x20000982
 80083bc:	00000484 	.word	0x00000484
 80083c0:	00000441 	.word	0x00000441
 80083c4:	20000a98 	.word	0x20000a98
 80083c8:	20000983 	.word	0x20000983

080083cc <SendFrameOnChannel>:
{
 80083cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80083ce:	b089      	sub	sp, #36	; 0x24
    int8_t txPower = 0;
 80083d0:	ab02      	add	r3, sp, #8
 80083d2:	1ddf      	adds	r7, r3, #7
 80083d4:	2300      	movs	r3, #0
    txConfig.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 80083d6:	4c37      	ldr	r4, [pc, #220]	; (80084b4 <SendFrameOnChannel+0xe8>)
 80083d8:	4e37      	ldr	r6, [pc, #220]	; (80084b8 <SendFrameOnChannel+0xec>)
    int8_t txPower = 0;
 80083da:	703b      	strb	r3, [r7, #0]
    txConfig.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 80083dc:	59a3      	ldr	r3, [r4, r6]
    txConfig.Channel = channel;
 80083de:	ad04      	add	r5, sp, #16
    txConfig.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 80083e0:	001a      	movs	r2, r3
{
 80083e2:	9001      	str	r0, [sp, #4]
    txConfig.Channel = channel;
 80083e4:	7028      	strb	r0, [r5, #0]
    txConfig.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 80083e6:	32f9      	adds	r2, #249	; 0xf9
 80083e8:	7812      	ldrb	r2, [r2, #0]
 80083ea:	706a      	strb	r2, [r5, #1]
    txConfig.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 80083ec:	001a      	movs	r2, r3
 80083ee:	32f8      	adds	r2, #248	; 0xf8
 80083f0:	7812      	ldrb	r2, [r2, #0]
    txConfig.MaxEirp = MacCtx.NvmCtx->MacParams.MaxEirp;
 80083f2:	33fc      	adds	r3, #252	; 0xfc
    txConfig.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 80083f4:	70aa      	strb	r2, [r5, #2]
    txConfig.MaxEirp = MacCtx.NvmCtx->MacParams.MaxEirp;
 80083f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    txConfig.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 80083f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    txConfig.MaxEirp = MacCtx.NvmCtx->MacParams.MaxEirp;
 80083fa:	606a      	str	r2, [r5, #4]
    txConfig.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 80083fc:	60ab      	str	r3, [r5, #8]
    txConfig.PktLen = MacCtx.PktBufferLen;
 80083fe:	8823      	ldrh	r3, [r4, #0]
 8008400:	81ab      	strh	r3, [r5, #12]
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8008402:	f001 ffb6 	bl	800a372 <LoRaMacClassBIsBeaconExpected>
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 8008406:	230e      	movs	r3, #14
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8008408:	2800      	cmp	r0, #0
 800840a:	d109      	bne.n	8008420 <SendFrameOnChannel+0x54>
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 800840c:	59a3      	ldr	r3, [r4, r6]
 800840e:	33f0      	adds	r3, #240	; 0xf0
 8008410:	781b      	ldrb	r3, [r3, #0]
 8008412:	2b01      	cmp	r3, #1
 8008414:	d10d      	bne.n	8008432 <SendFrameOnChannel+0x66>
        if( LoRaMacClassBIsPingExpected( ) == true )
 8008416:	f001 ffae 	bl	800a376 <LoRaMacClassBIsPingExpected>
 800841a:	2800      	cmp	r0, #0
 800841c:	d003      	beq.n	8008426 <SendFrameOnChannel+0x5a>
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800841e:	230f      	movs	r3, #15
}
 8008420:	0018      	movs	r0, r3
 8008422:	b009      	add	sp, #36	; 0x24
 8008424:	bdf0      	pop	{r4, r5, r6, r7, pc}
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8008426:	f001 ffa8 	bl	800a37a <LoRaMacClassBIsMulticastExpected>
 800842a:	2800      	cmp	r0, #0
 800842c:	d1f7      	bne.n	800841e <SendFrameOnChannel+0x52>
            LoRaMacClassBStopRxSlots( );
 800842e:	f001 ffba 	bl	800a3a6 <LoRaMacClassBStopRxSlots>
    RegionTxConfig( MacCtx.NvmCtx->Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 8008432:	59a3      	ldr	r3, [r4, r6]
 8008434:	003a      	movs	r2, r7
 8008436:	7818      	ldrb	r0, [r3, #0]
 8008438:	0029      	movs	r1, r5
 800843a:	4b20      	ldr	r3, [pc, #128]	; (80084bc <SendFrameOnChannel+0xf0>)
 800843c:	f002 ff64 	bl	800b308 <RegionTxConfig>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008440:	2201      	movs	r2, #1
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8008442:	2583      	movs	r5, #131	; 0x83
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008444:	4b1e      	ldr	r3, [pc, #120]	; (80084c0 <SendFrameOnChannel+0xf4>)
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8008446:	00ed      	lsls	r5, r5, #3
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008448:	54e2      	strb	r2, [r4, r3]
    MacCtx.McpsConfirm.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800844a:	59a3      	ldr	r3, [r4, r6]
 800844c:	33f9      	adds	r3, #249	; 0xf9
 800844e:	781a      	ldrb	r2, [r3, #0]
 8008450:	4b1c      	ldr	r3, [pc, #112]	; (80084c4 <SendFrameOnChannel+0xf8>)
 8008452:	54e2      	strb	r2, [r4, r3]
    MacCtx.McpsConfirm.TxPower = txPower;
 8008454:	783a      	ldrb	r2, [r7, #0]
 8008456:	4b1c      	ldr	r3, [pc, #112]	; (80084c8 <SendFrameOnChannel+0xfc>)
 8008458:	54e2      	strb	r2, [r4, r3]
    MacCtx.McpsConfirm.Channel = channel;
 800845a:	4b1c      	ldr	r3, [pc, #112]	; (80084cc <SendFrameOnChannel+0x100>)
 800845c:	9a01      	ldr	r2, [sp, #4]
 800845e:	50e2      	str	r2, [r4, r3]
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8008460:	5963      	ldr	r3, [r4, r5]
 8008462:	4a1b      	ldr	r2, [pc, #108]	; (80084d0 <SendFrameOnChannel+0x104>)
 8008464:	50a3      	str	r3, [r4, r2]
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8008466:	4a1b      	ldr	r2, [pc, #108]	; (80084d4 <SendFrameOnChannel+0x108>)
 8008468:	50a3      	str	r3, [r4, r2]
    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 800846a:	f001 ff88 	bl	800a37e <LoRaMacClassBIsBeaconModeActive>
 800846e:	2800      	cmp	r0, #0
 8008470:	d119      	bne.n	80084a6 <SendFrameOnChannel+0xda>
    LoRaMacClassBHaltBeaconing( );
 8008472:	f001 ff87 	bl	800a384 <LoRaMacClassBHaltBeaconing>
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8008476:	21d0      	movs	r1, #208	; 0xd0
 8008478:	2202      	movs	r2, #2
 800847a:	4b0e      	ldr	r3, [pc, #56]	; (80084b4 <SendFrameOnChannel+0xe8>)
 800847c:	0089      	lsls	r1, r1, #2
 800847e:	5858      	ldr	r0, [r3, r1]
 8008480:	4302      	orrs	r2, r0
 8008482:	505a      	str	r2, [r3, r1]
    if( MacCtx.NodeAckRequested == false )
 8008484:	4a14      	ldr	r2, [pc, #80]	; (80084d8 <SendFrameOnChannel+0x10c>)
 8008486:	5c9a      	ldrb	r2, [r3, r2]
 8008488:	2a00      	cmp	r2, #0
 800848a:	d104      	bne.n	8008496 <SendFrameOnChannel+0xca>
        MacCtx.ChannelsNbTransCounter++;
 800848c:	2182      	movs	r1, #130	; 0x82
 800848e:	00c9      	lsls	r1, r1, #3
 8008490:	5c5a      	ldrb	r2, [r3, r1]
 8008492:	3201      	adds	r2, #1
 8008494:	545a      	strb	r2, [r3, r1]
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 8008496:	7819      	ldrb	r1, [r3, #0]
 8008498:	4b10      	ldr	r3, [pc, #64]	; (80084dc <SendFrameOnChannel+0x110>)
 800849a:	4811      	ldr	r0, [pc, #68]	; (80084e0 <SendFrameOnChannel+0x114>)
 800849c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800849e:	9301      	str	r3, [sp, #4]
 80084a0:	4798      	blx	r3
    return LORAMAC_STATUS_OK;
 80084a2:	2300      	movs	r3, #0
 80084a4:	e7bc      	b.n	8008420 <SendFrameOnChannel+0x54>
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 80084a6:	5960      	ldr	r0, [r4, r5]
 80084a8:	f001 ff7b 	bl	800a3a2 <LoRaMacClassBIsUplinkCollision>
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 80084ac:	2310      	movs	r3, #16
        if( collisionTime > 0 )
 80084ae:	2800      	cmp	r0, #0
 80084b0:	d0df      	beq.n	8008472 <SendFrameOnChannel+0xa6>
 80084b2:	e7b5      	b.n	8008420 <SendFrameOnChannel+0x54>
 80084b4:	20000980 	.word	0x20000980
 80084b8:	00000484 	.word	0x00000484
 80084bc:	20000d98 	.word	0x20000d98
 80084c0:	0000043d 	.word	0x0000043d
 80084c4:	0000043e 	.word	0x0000043e
 80084c8:	0000043f 	.word	0x0000043f
 80084cc:	0000044c 	.word	0x0000044c
 80084d0:	00000444 	.word	0x00000444
 80084d4:	00000454 	.word	0x00000454
 80084d8:	00000414 	.word	0x00000414
 80084dc:	0800f5a4 	.word	0x0800f5a4
 80084e0:	20000982 	.word	0x20000982

080084e4 <ScheduleTx>:
    TimerTime_t dutyCycleTimeOff = 0;
 80084e4:	2300      	movs	r3, #0
    CalculateBackOff( MacCtx.NvmCtx->LastTxChannel );
 80084e6:	229f      	movs	r2, #159	; 0x9f
{
 80084e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    CalculateBackOff( MacCtx.NvmCtx->LastTxChannel );
 80084ea:	4c8b      	ldr	r4, [pc, #556]	; (8008718 <ScheduleTx+0x234>)
 80084ec:	4e8b      	ldr	r6, [pc, #556]	; (800871c <ScheduleTx+0x238>)
{
 80084ee:	b08b      	sub	sp, #44	; 0x2c
    TimerTime_t dutyCycleTimeOff = 0;
 80084f0:	9304      	str	r3, [sp, #16]
    size_t macCmdsSize = 0;
 80084f2:	9305      	str	r3, [sp, #20]
    CalculateBackOff( MacCtx.NvmCtx->LastTxChannel );
 80084f4:	59a3      	ldr	r3, [r4, r6]
{
 80084f6:	9003      	str	r0, [sp, #12]
    CalculateBackOff( MacCtx.NvmCtx->LastTxChannel );
 80084f8:	0052      	lsls	r2, r2, #1
 80084fa:	5c99      	ldrb	r1, [r3, r2]
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 80084fc:	3296      	adds	r2, #150	; 0x96
 80084fe:	5c9a      	ldrb	r2, [r3, r2]
 8008500:	ad07      	add	r5, sp, #28
 8008502:	2a00      	cmp	r2, #0
 8008504:	d161      	bne.n	80085ca <ScheduleTx+0xe6>
    calcBackOff.DutyCycleEnabled = MacCtx.NvmCtx->DutyCycleOn;
 8008506:	273e      	movs	r7, #62	; 0x3e
        calcBackOff.Joined = true;
 8008508:	702a      	strb	r2, [r5, #0]
    calcBackOff.DutyCycleEnabled = MacCtx.NvmCtx->DutyCycleOn;
 800850a:	37ff      	adds	r7, #255	; 0xff
 800850c:	5dda      	ldrb	r2, [r3, r7]
    calcBackOff.Channel = channel;
 800850e:	70e9      	strb	r1, [r5, #3]
    calcBackOff.DutyCycleEnabled = MacCtx.NvmCtx->DutyCycleOn;
 8008510:	70aa      	strb	r2, [r5, #2]
    calcBackOff.ElapsedTime = TimerGetElapsedTime( MacCtx.NvmCtx->InitializationTime );
 8008512:	22e6      	movs	r2, #230	; 0xe6
 8008514:	0052      	lsls	r2, r2, #1
 8008516:	5898      	ldr	r0, [r3, r2]
 8008518:	f004 fcb7 	bl	800ce8a <TimerGetElapsedTime>
    calcBackOff.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800851c:	2383      	movs	r3, #131	; 0x83
    calcBackOff.ElapsedTime = TimerGetElapsedTime( MacCtx.NvmCtx->InitializationTime );
 800851e:	6068      	str	r0, [r5, #4]
    calcBackOff.LastTxIsJoinRequest = false;
 8008520:	2000      	movs	r0, #0
    calcBackOff.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8008522:	00db      	lsls	r3, r3, #3
 8008524:	58e3      	ldr	r3, [r4, r3]
    calcBackOff.LastTxIsJoinRequest = false;
 8008526:	7068      	strb	r0, [r5, #1]
    calcBackOff.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8008528:	60ab      	str	r3, [r5, #8]
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) && ( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true ) )
 800852a:	4b7d      	ldr	r3, [pc, #500]	; (8008720 <ScheduleTx+0x23c>)
 800852c:	5ce3      	ldrb	r3, [r4, r3]
 800852e:	075b      	lsls	r3, r3, #29
 8008530:	d505      	bpl.n	800853e <ScheduleTx+0x5a>
 8008532:	f002 f915 	bl	800a760 <LoRaMacConfirmQueueIsCmdActive>
 8008536:	2800      	cmp	r0, #0
 8008538:	d001      	beq.n	800853e <ScheduleTx+0x5a>
        calcBackOff.LastTxIsJoinRequest = true;
 800853a:	2301      	movs	r3, #1
 800853c:	706b      	strb	r3, [r5, #1]
    RegionCalcBackOff( MacCtx.NvmCtx->Region, &calcBackOff );
 800853e:	59a3      	ldr	r3, [r4, r6]
 8008540:	0029      	movs	r1, r5
 8008542:	7818      	ldrb	r0, [r3, #0]
 8008544:	f002 ff2a 	bl	800b39c <RegionCalcBackOff>
    MacCtx.NvmCtx->AggregatedTimeOff = ( MacCtx.TxTimeOnAir * MacCtx.NvmCtx->AggregatedDCycle - MacCtx.TxTimeOnAir );
 8008548:	22e1      	movs	r2, #225	; 0xe1
 800854a:	59a3      	ldr	r3, [r4, r6]
 800854c:	0052      	lsls	r2, r2, #1
 800854e:	5a99      	ldrh	r1, [r3, r2]
 8008550:	2283      	movs	r2, #131	; 0x83
 8008552:	00d2      	lsls	r2, r2, #3
 8008554:	58a2      	ldr	r2, [r4, r2]
 8008556:	3901      	subs	r1, #1
 8008558:	434a      	muls	r2, r1
 800855a:	21e4      	movs	r1, #228	; 0xe4
 800855c:	0049      	lsls	r1, r1, #1
 800855e:	505a      	str	r2, [r3, r1]
    nextChan.AggrTimeOff = MacCtx.NvmCtx->AggregatedTimeOff;
 8008560:	9207      	str	r2, [sp, #28]
    nextChan.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8008562:	001a      	movs	r2, r3
 8008564:	32f9      	adds	r2, #249	; 0xf9
 8008566:	7812      	ldrb	r2, [r2, #0]
 8008568:	722a      	strb	r2, [r5, #8]
    nextChan.DutyCycleEnabled = MacCtx.NvmCtx->DutyCycleOn;
 800856a:	5dda      	ldrb	r2, [r3, r7]
 800856c:	72aa      	strb	r2, [r5, #10]
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 800856e:	22ea      	movs	r2, #234	; 0xea
 8008570:	0052      	lsls	r2, r2, #1
 8008572:	5c9a      	ldrb	r2, [r3, r2]
 8008574:	2a00      	cmp	r2, #0
 8008576:	d12a      	bne.n	80085ce <ScheduleTx+0xea>
        nextChan.Joined = true;
 8008578:	726a      	strb	r2, [r5, #9]
    nextChan.LastAggrTx = MacCtx.NvmCtx->LastTxDoneTime;
 800857a:	22e2      	movs	r2, #226	; 0xe2
 800857c:	0052      	lsls	r2, r2, #1
 800857e:	589a      	ldr	r2, [r3, r2]
    status = RegionNextChannel( MacCtx.NvmCtx->Region, &nextChan, &MacCtx.Channel, &dutyCycleTimeOff, &MacCtx.NvmCtx->AggregatedTimeOff );
 8008580:	7818      	ldrb	r0, [r3, #0]
 8008582:	33c9      	adds	r3, #201	; 0xc9
 8008584:	33ff      	adds	r3, #255	; 0xff
    nextChan.LastAggrTx = MacCtx.NvmCtx->LastTxDoneTime;
 8008586:	606a      	str	r2, [r5, #4]
    status = RegionNextChannel( MacCtx.NvmCtx->Region, &nextChan, &MacCtx.Channel, &dutyCycleTimeOff, &MacCtx.NvmCtx->AggregatedTimeOff );
 8008588:	0029      	movs	r1, r5
 800858a:	9300      	str	r3, [sp, #0]
 800858c:	4a65      	ldr	r2, [pc, #404]	; (8008724 <ScheduleTx+0x240>)
 800858e:	ab04      	add	r3, sp, #16
 8008590:	f002 ff0b 	bl	800b3aa <RegionNextChannel>
 8008594:	1e05      	subs	r5, r0, #0
    if( status != LORAMAC_STATUS_OK )
 8008596:	d01c      	beq.n	80085d2 <ScheduleTx+0xee>
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 8008598:	280b      	cmp	r0, #11
 800859a:	d113      	bne.n	80085c4 <ScheduleTx+0xe0>
 800859c:	9b03      	ldr	r3, [sp, #12]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d010      	beq.n	80085c4 <ScheduleTx+0xe0>
            return LORAMAC_STATUS_OK;
 80085a2:	2500      	movs	r5, #0
            if( dutyCycleTimeOff != 0 )
 80085a4:	9904      	ldr	r1, [sp, #16]
 80085a6:	42a9      	cmp	r1, r5
 80085a8:	d00c      	beq.n	80085c4 <ScheduleTx+0xe0>
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 80085aa:	22d0      	movs	r2, #208	; 0xd0
 80085ac:	2320      	movs	r3, #32
 80085ae:	0092      	lsls	r2, r2, #2
 80085b0:	58a0      	ldr	r0, [r4, r2]
 80085b2:	4303      	orrs	r3, r0
 80085b4:	50a3      	str	r3, [r4, r2]
                TimerSetValue( &MacCtx.TxDelayedTimer, dutyCycleTimeOff );
 80085b6:	4c5c      	ldr	r4, [pc, #368]	; (8008728 <ScheduleTx+0x244>)
 80085b8:	0020      	movs	r0, r4
 80085ba:	f004 fc4f 	bl	800ce5c <TimerSetValue>
                TimerStart( &MacCtx.TxDelayedTimer );
 80085be:	0020      	movs	r0, r4
 80085c0:	f004 fb9c 	bl	800ccfc <TimerStart>
}
 80085c4:	0028      	movs	r0, r5
 80085c6:	b00b      	add	sp, #44	; 0x2c
 80085c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        calcBackOff.Joined = true;
 80085ca:	2201      	movs	r2, #1
 80085cc:	e79b      	b.n	8008506 <ScheduleTx+0x22>
        nextChan.Joined = true;
 80085ce:	2201      	movs	r2, #1
 80085d0:	e7d2      	b.n	8008578 <ScheduleTx+0x94>
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 80085d2:	59a1      	ldr	r1, [r4, r6]
                                     RegionApplyDrOffset( MacCtx.NvmCtx->Region, MacCtx.NvmCtx->MacParams.DownlinkDwellTime, MacCtx.NvmCtx->MacParams.ChannelsDatarate, MacCtx.NvmCtx->MacParams.Rx1DrOffset ),
 80085d4:	202e      	movs	r0, #46	; 0x2e
 80085d6:	000b      	movs	r3, r1
 80085d8:	000a      	movs	r2, r1
 80085da:	33ff      	adds	r3, #255	; 0xff
 80085dc:	32f9      	adds	r2, #249	; 0xf9
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 80085de:	780d      	ldrb	r5, [r1, #0]
                                     RegionApplyDrOffset( MacCtx.NvmCtx->Region, MacCtx.NvmCtx->MacParams.DownlinkDwellTime, MacCtx.NvmCtx->MacParams.ChannelsDatarate, MacCtx.NvmCtx->MacParams.Rx1DrOffset ),
 80085e0:	7e9b      	ldrb	r3, [r3, #26]
 80085e2:	7812      	ldrb	r2, [r2, #0]
 80085e4:	30ff      	adds	r0, #255	; 0xff
 80085e6:	5c09      	ldrb	r1, [r1, r0]
 80085e8:	b25b      	sxtb	r3, r3
 80085ea:	b252      	sxtb	r2, r2
 80085ec:	0028      	movs	r0, r5
 80085ee:	f002 fef0 	bl	800b3d2 <RegionApplyDrOffset>
                                     MacCtx.NvmCtx->MacParams.MinRxSymbols,
 80085f2:	59a3      	ldr	r3, [r4, r6]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 80085f4:	b241      	sxtb	r1, r0
 80085f6:	001f      	movs	r7, r3
 80085f8:	33ff      	adds	r3, #255	; 0xff
 80085fa:	785a      	ldrb	r2, [r3, #1]
 80085fc:	4b4b      	ldr	r3, [pc, #300]	; (800872c <ScheduleTx+0x248>)
 80085fe:	37fc      	adds	r7, #252	; 0xfc
 8008600:	9300      	str	r3, [sp, #0]
 8008602:	0028      	movs	r0, r5
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	f002 fe69 	bl	800b2dc <RegionComputeRxWindowParameters>
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800860a:	59a3      	ldr	r3, [r4, r6]
                                     MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate,
 800860c:	2190      	movs	r1, #144	; 0x90
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800860e:	001a      	movs	r2, r3
 8008610:	001d      	movs	r5, r3
                                     MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate,
 8008612:	0049      	lsls	r1, r1, #1
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8008614:	5659      	ldrsb	r1, [r3, r1]
 8008616:	7818      	ldrb	r0, [r3, #0]
 8008618:	4b45      	ldr	r3, [pc, #276]	; (8008730 <ScheduleTx+0x24c>)
 800861a:	32ff      	adds	r2, #255	; 0xff
 800861c:	7852      	ldrb	r2, [r2, #1]
 800861e:	35fc      	adds	r5, #252	; 0xfc
 8008620:	9300      	str	r3, [sp, #0]
 8008622:	682b      	ldr	r3, [r5, #0]
 8008624:	f002 fe5a 	bl	800b2dc <RegionComputeRxWindowParameters>
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 8008628:	22ea      	movs	r2, #234	; 0xea
 800862a:	59a3      	ldr	r3, [r4, r6]
 800862c:	0052      	lsls	r2, r2, #1
 800862e:	5c9a      	ldrb	r2, [r3, r2]
 8008630:	2a00      	cmp	r2, #0
 8008632:	d121      	bne.n	8008678 <ScheduleTx+0x194>
        MacCtx.RxWindow1Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8008634:	22f1      	movs	r2, #241	; 0xf1
 8008636:	33fc      	adds	r3, #252	; 0xfc
 8008638:	0092      	lsls	r2, r2, #2
 800863a:	6959      	ldr	r1, [r3, #20]
 800863c:	58a2      	ldr	r2, [r4, r2]
        MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800863e:	699b      	ldr	r3, [r3, #24]
        MacCtx.RxWindow1Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8008640:	188a      	adds	r2, r1, r2
 8008642:	21ec      	movs	r1, #236	; 0xec
 8008644:	0089      	lsls	r1, r1, #2
 8008646:	5062      	str	r2, [r4, r1]
        MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8008648:	22f6      	movs	r2, #246	; 0xf6
 800864a:	0092      	lsls	r2, r2, #2
 800864c:	58a2      	ldr	r2, [r4, r2]
    switch( MacCtx.TxMsg.Type )
 800864e:	0025      	movs	r5, r4
        MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8008650:	189b      	adds	r3, r3, r2
 8008652:	22ed      	movs	r2, #237	; 0xed
 8008654:	0092      	lsls	r2, r2, #2
 8008656:	50a3      	str	r3, [r4, r2]
    LoRaMacStatus_t retval = SecureFrame( MacCtx.NvmCtx->MacParams.ChannelsDatarate, MacCtx.Channel );
 8008658:	59a3      	ldr	r3, [r4, r6]
 800865a:	26f9      	movs	r6, #249	; 0xf9
 800865c:	579e      	ldrsb	r6, [r3, r6]
    uint32_t fCntUp = 0;
 800865e:	2300      	movs	r3, #0
    LoRaMacStatus_t retval = SecureFrame( MacCtx.NvmCtx->MacParams.ChannelsDatarate, MacCtx.Channel );
 8008660:	4a34      	ldr	r2, [pc, #208]	; (8008734 <ScheduleTx+0x250>)
    switch( MacCtx.TxMsg.Type )
 8008662:	35ff      	adds	r5, #255	; 0xff
    LoRaMacStatus_t retval = SecureFrame( MacCtx.NvmCtx->MacParams.ChannelsDatarate, MacCtx.Channel );
 8008664:	5ca7      	ldrb	r7, [r4, r2]
    uint32_t fCntUp = 0;
 8008666:	9306      	str	r3, [sp, #24]
    switch( MacCtx.TxMsg.Type )
 8008668:	796b      	ldrb	r3, [r5, #5]
 800866a:	9203      	str	r2, [sp, #12]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d024      	beq.n	80086ba <ScheduleTx+0x1d6>
 8008670:	2b04      	cmp	r3, #4
 8008672:	d02f      	beq.n	80086d4 <ScheduleTx+0x1f0>
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8008674:	2503      	movs	r5, #3
 8008676:	e7a5      	b.n	80085c4 <ScheduleTx+0xe0>
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8008678:	a805      	add	r0, sp, #20
 800867a:	f001 ff71 	bl	800a560 <LoRaMacCommandsGetSizeSerializedCmds>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800867e:	2513      	movs	r5, #19
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8008680:	2800      	cmp	r0, #0
 8008682:	d19f      	bne.n	80085c4 <ScheduleTx+0xe0>
    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8008684:	20f9      	movs	r0, #249	; 0xf9
        if( ValidatePayloadLength( MacCtx.AppDataSize, MacCtx.NvmCtx->MacParams.ChannelsDatarate, macCmdsSize ) == false )
 8008686:	4b2c      	ldr	r3, [pc, #176]	; (8008738 <ScheduleTx+0x254>)
 8008688:	5ce5      	ldrb	r5, [r4, r3]
 800868a:	9b05      	ldr	r3, [sp, #20]
 800868c:	b2df      	uxtb	r7, r3
 800868e:	59a3      	ldr	r3, [r4, r6]
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 8008690:	19ef      	adds	r7, r5, r7
    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8008692:	5618      	ldrsb	r0, [r3, r0]
 8008694:	f7fe ffd2 	bl	800763c <GetMaxAppPayloadWithoutFOptsLength>
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 8008698:	b280      	uxth	r0, r0
            return LORAMAC_STATUS_LENGTH_ERROR;
 800869a:	2508      	movs	r5, #8
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 800869c:	42b8      	cmp	r0, r7
 800869e:	d200      	bcs.n	80086a2 <ScheduleTx+0x1be>
 80086a0:	e790      	b.n	80085c4 <ScheduleTx+0xe0>
        MacCtx.RxWindow1Delay = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 80086a2:	22f1      	movs	r2, #241	; 0xf1
 80086a4:	59a3      	ldr	r3, [r4, r6]
 80086a6:	0092      	lsls	r2, r2, #2
 80086a8:	33fc      	adds	r3, #252	; 0xfc
 80086aa:	68d9      	ldr	r1, [r3, #12]
 80086ac:	58a2      	ldr	r2, [r4, r2]
        MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 80086ae:	691b      	ldr	r3, [r3, #16]
        MacCtx.RxWindow1Delay = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 80086b0:	188a      	adds	r2, r1, r2
 80086b2:	21ec      	movs	r1, #236	; 0xec
 80086b4:	0089      	lsls	r1, r1, #2
 80086b6:	5062      	str	r2, [r4, r1]
 80086b8:	e7c6      	b.n	8008648 <ScheduleTx+0x164>
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 80086ba:	4820      	ldr	r0, [pc, #128]	; (800873c <ScheduleTx+0x258>)
 80086bc:	f002 fa78 	bl	800abb0 <LoRaMacCryptoPrepareJoinRequest>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 80086c0:	2800      	cmp	r0, #0
 80086c2:	d126      	bne.n	8008712 <ScheduleTx+0x22e>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 80086c4:	7b6b      	ldrb	r3, [r5, #13]
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 80086c6:	8023      	strh	r3, [r4, #0]
    return SendFrameOnChannel( MacCtx.Channel );
 80086c8:	9b03      	ldr	r3, [sp, #12]
 80086ca:	5ce0      	ldrb	r0, [r4, r3]
 80086cc:	f7ff fe7e 	bl	80083cc <SendFrameOnChannel>
 80086d0:	0005      	movs	r5, r0
 80086d2:	e777      	b.n	80085c4 <ScheduleTx+0xe0>
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 80086d4:	a806      	add	r0, sp, #24
 80086d6:	f002 fa0b 	bl	800aaf0 <LoRaMacCryptoGetFCntUp>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 80086da:	2512      	movs	r5, #18
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 80086dc:	2800      	cmp	r0, #0
 80086de:	d000      	beq.n	80086e2 <ScheduleTx+0x1fe>
 80086e0:	e770      	b.n	80085c4 <ScheduleTx+0xe0>
            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
 80086e2:	2382      	movs	r3, #130	; 0x82
 80086e4:	00db      	lsls	r3, r3, #3
 80086e6:	5ce3      	ldrb	r3, [r4, r3]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d103      	bne.n	80086f4 <ScheduleTx+0x210>
 80086ec:	4b14      	ldr	r3, [pc, #80]	; (8008740 <ScheduleTx+0x25c>)
 80086ee:	5ce3      	ldrb	r3, [r4, r3]
 80086f0:	2b01      	cmp	r3, #1
 80086f2:	d902      	bls.n	80086fa <ScheduleTx+0x216>
                fCntUp -= 1;
 80086f4:	9b06      	ldr	r3, [sp, #24]
 80086f6:	3b01      	subs	r3, #1
 80086f8:	9306      	str	r3, [sp, #24]
            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 80086fa:	b2f1      	uxtb	r1, r6
 80086fc:	4b0f      	ldr	r3, [pc, #60]	; (800873c <ScheduleTx+0x258>)
 80086fe:	003a      	movs	r2, r7
 8008700:	9806      	ldr	r0, [sp, #24]
 8008702:	f002 fa85 	bl	800ac10 <LoRaMacCryptoSecureMessage>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8008706:	2800      	cmp	r0, #0
 8008708:	d103      	bne.n	8008712 <ScheduleTx+0x22e>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800870a:	0023      	movs	r3, r4
 800870c:	33ff      	adds	r3, #255	; 0xff
 800870e:	7b5b      	ldrb	r3, [r3, #13]
 8008710:	e7d9      	b.n	80086c6 <ScheduleTx+0x1e2>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8008712:	2511      	movs	r5, #17
 8008714:	e756      	b.n	80085c4 <ScheduleTx+0xe0>
 8008716:	46c0      	nop			; (mov r8, r8)
 8008718:	20000980 	.word	0x20000980
 800871c:	00000484 	.word	0x00000484
 8008720:	00000481 	.word	0x00000481
 8008724:	20000d95 	.word	0x20000d95
 8008728:	20000ce8 	.word	0x20000ce8
 800872c:	20000d38 	.word	0x20000d38
 8008730:	20000d4c 	.word	0x20000d4c
 8008734:	00000415 	.word	0x00000415
 8008738:	00000237 	.word	0x00000237
 800873c:	20000a88 	.word	0x20000a88
 8008740:	00000412 	.word	0x00000412

08008744 <OnTxDelayedTimerEvent>:
{
 8008744:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.TxDelayedTimer );
 8008746:	4811      	ldr	r0, [pc, #68]	; (800878c <OnTxDelayedTimerEvent+0x48>)
 8008748:	f004 fb54 	bl	800cdf4 <TimerStop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800874c:	22d0      	movs	r2, #208	; 0xd0
 800874e:	2320      	movs	r3, #32
 8008750:	4c0f      	ldr	r4, [pc, #60]	; (8008790 <OnTxDelayedTimerEvent+0x4c>)
 8008752:	0092      	lsls	r2, r2, #2
 8008754:	58a1      	ldr	r1, [r4, r2]
    switch( ScheduleTx( true ) )
 8008756:	2001      	movs	r0, #1
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8008758:	4399      	bics	r1, r3
 800875a:	50a1      	str	r1, [r4, r2]
    switch( ScheduleTx( true ) )
 800875c:	f7ff fec2 	bl	80084e4 <ScheduleTx>
 8008760:	2800      	cmp	r0, #0
 8008762:	d012      	beq.n	800878a <OnTxDelayedTimerEvent+0x46>
 8008764:	280b      	cmp	r0, #11
 8008766:	d010      	beq.n	800878a <OnTxDelayedTimerEvent+0x46>
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 8008768:	2009      	movs	r0, #9
            MacCtx.McpsConfirm.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800876a:	4b0a      	ldr	r3, [pc, #40]	; (8008794 <OnTxDelayedTimerEvent+0x50>)
 800876c:	58e3      	ldr	r3, [r4, r3]
 800876e:	33f9      	adds	r3, #249	; 0xf9
 8008770:	781a      	ldrb	r2, [r3, #0]
 8008772:	4b09      	ldr	r3, [pc, #36]	; (8008798 <OnTxDelayedTimerEvent+0x54>)
 8008774:	54e2      	strb	r2, [r4, r3]
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 8008776:	4b09      	ldr	r3, [pc, #36]	; (800879c <OnTxDelayedTimerEvent+0x58>)
 8008778:	5ce2      	ldrb	r2, [r4, r3]
 800877a:	4b09      	ldr	r3, [pc, #36]	; (80087a0 <OnTxDelayedTimerEvent+0x5c>)
 800877c:	54e2      	strb	r2, [r4, r3]
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 800877e:	4b09      	ldr	r3, [pc, #36]	; (80087a4 <OnTxDelayedTimerEvent+0x60>)
 8008780:	54e0      	strb	r0, [r4, r3]
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 8008782:	f001 ffd1 	bl	800a728 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 8008786:	f7fe fef7 	bl	8007578 <StopRetransmission>
}
 800878a:	bd10      	pop	{r4, pc}
 800878c:	20000ce8 	.word	0x20000ce8
 8008790:	20000980 	.word	0x20000980
 8008794:	00000484 	.word	0x00000484
 8008798:	0000043e 	.word	0x0000043e
 800879c:	00000412 	.word	0x00000412
 80087a0:	00000441 	.word	0x00000441
 80087a4:	0000043d 	.word	0x0000043d

080087a8 <Send>:
{
 80087a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80087aa:	b091      	sub	sp, #68	; 0x44
 80087ac:	9307      	str	r3, [sp, #28]
    int8_t datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 80087ae:	4c47      	ldr	r4, [pc, #284]	; (80088cc <Send+0x124>)
 80087b0:	4b47      	ldr	r3, [pc, #284]	; (80088d0 <Send+0x128>)
{
 80087b2:	9105      	str	r1, [sp, #20]
    int8_t datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 80087b4:	5919      	ldr	r1, [r3, r4]
{
 80087b6:	9004      	str	r0, [sp, #16]
    int8_t datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 80087b8:	000b      	movs	r3, r1
{
 80087ba:	9206      	str	r2, [sp, #24]
    int8_t datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 80087bc:	33f9      	adds	r3, #249	; 0xf9
 80087be:	781b      	ldrb	r3, [r3, #0]
    int8_t txPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 80087c0:	2700      	movs	r7, #0
    int8_t datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 80087c2:	b25b      	sxtb	r3, r3
 80087c4:	9303      	str	r3, [sp, #12]
    int8_t txPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 80087c6:	000b      	movs	r3, r1
 80087c8:	33f8      	adds	r3, #248	; 0xf8
 80087ca:	57df      	ldrsb	r7, [r3, r7]
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 80087cc:	3b04      	subs	r3, #4
 80087ce:	681d      	ldr	r5, [r3, #0]
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 80087d0:	23ea      	movs	r3, #234	; 0xea
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 80087d2:	950a      	str	r5, [sp, #40]	; 0x28
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 80087d4:	005b      	lsls	r3, r3, #1
 80087d6:	5ccb      	ldrb	r3, [r1, r3]
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 80087d8:	2607      	movs	r6, #7
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d063      	beq.n	80088a6 <Send+0xfe>
    if( MacCtx.NvmCtx->MaxDCycle == 0 )
 80087de:	239e      	movs	r3, #158	; 0x9e
 80087e0:	005b      	lsls	r3, r3, #1
 80087e2:	5ccb      	ldrb	r3, [r1, r3]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d102      	bne.n	80087ee <Send+0x46>
        MacCtx.NvmCtx->AggregatedTimeOff = 0;
 80087e8:	22e4      	movs	r2, #228	; 0xe4
 80087ea:	0052      	lsls	r2, r2, #1
 80087ec:	508b      	str	r3, [r1, r2]
    fCtrl.Bits.FOptsLen      = 0;
 80087ee:	2300      	movs	r3, #0
 80087f0:	aa09      	add	r2, sp, #36	; 0x24
 80087f2:	7013      	strb	r3, [r2, #0]
    fCtrl.Bits.Adr           = MacCtx.NvmCtx->AdrCtrlOn;
 80087f4:	000b      	movs	r3, r1
 80087f6:	33f2      	adds	r3, #242	; 0xf2
 80087f8:	781b      	ldrb	r3, [r3, #0]
 80087fa:	2010      	movs	r0, #16
 80087fc:	469c      	mov	ip, r3
 80087fe:	01db      	lsls	r3, r3, #7
 8008800:	7013      	strb	r3, [r2, #0]
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 8008802:	000b      	movs	r3, r1
 8008804:	33f0      	adds	r3, #240	; 0xf0
 8008806:	781e      	ldrb	r6, [r3, #0]
 8008808:	7813      	ldrb	r3, [r2, #0]
 800880a:	2e01      	cmp	r6, #1
 800880c:	d14e      	bne.n	80088ac <Send+0x104>
        fCtrl.Bits.FPending      = 1;
 800880e:	4303      	orrs	r3, r0
        fCtrl.Bits.FPending      = 0;
 8008810:	7013      	strb	r3, [r2, #0]
    if( MacCtx.NvmCtx->SrvAckRequested == true )
 8008812:	23e0      	movs	r3, #224	; 0xe0
 8008814:	005b      	lsls	r3, r3, #1
 8008816:	5ccb      	ldrb	r3, [r1, r3]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d004      	beq.n	8008826 <Send+0x7e>
        fCtrl.Bits.Ack = 1;
 800881c:	2320      	movs	r3, #32
 800881e:	aa09      	add	r2, sp, #36	; 0x24
 8008820:	7810      	ldrb	r0, [r2, #0]
 8008822:	4303      	orrs	r3, r0
 8008824:	7013      	strb	r3, [r2, #0]
    adrNext.Version = MacCtx.NvmCtx->Version;
 8008826:	23e8      	movs	r3, #232	; 0xe8
 8008828:	005b      	lsls	r3, r3, #1
 800882a:	58cb      	ldr	r3, [r1, r3]
 800882c:	a80b      	add	r0, sp, #44	; 0x2c
 800882e:	930b      	str	r3, [sp, #44]	; 0x2c
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 8008830:	4663      	mov	r3, ip
    adrNext.UpdateChanMask = true;
 8008832:	2601      	movs	r6, #1
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 8008834:	7143      	strb	r3, [r0, #5]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 8008836:	23fd      	movs	r3, #253	; 0xfd
    adrNext.AdrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 8008838:	6085      	str	r5, [r0, #8]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 800883a:	4d25      	ldr	r5, [pc, #148]	; (80088d0 <Send+0x128>)
    adrNext.UpdateChanMask = true;
 800883c:	7106      	strb	r6, [r0, #4]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 800883e:	009b      	lsls	r3, r3, #2
 8008840:	5aeb      	ldrh	r3, [r5, r3]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &MacCtx.NvmCtx->MacParams.ChannelsDatarate,
 8008842:	000a      	movs	r2, r1
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 8008844:	8183      	strh	r3, [r0, #12]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 8008846:	4b23      	ldr	r3, [pc, #140]	; (80088d4 <Send+0x12c>)
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &MacCtx.NvmCtx->MacParams.ChannelsDatarate,
 8008848:	32f8      	adds	r2, #248	; 0xf8
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 800884a:	5aeb      	ldrh	r3, [r5, r3]
    adrNext.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 800884c:	7447      	strb	r7, [r0, #17]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 800884e:	81c3      	strh	r3, [r0, #14]
    adrNext.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8008850:	9b03      	ldr	r3, [sp, #12]
 8008852:	7403      	strb	r3, [r0, #16]
    adrNext.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8008854:	2396      	movs	r3, #150	; 0x96
 8008856:	005b      	lsls	r3, r3, #1
 8008858:	5ccb      	ldrb	r3, [r1, r3]
 800885a:	7483      	strb	r3, [r0, #18]
    adrNext.Region = MacCtx.NvmCtx->Region;
 800885c:	780b      	ldrb	r3, [r1, #0]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &MacCtx.NvmCtx->MacParams.ChannelsDatarate,
 800885e:	31f9      	adds	r1, #249	; 0xf9
    adrNext.Region = MacCtx.NvmCtx->Region;
 8008860:	74c3      	strb	r3, [r0, #19]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &MacCtx.NvmCtx->MacParams.ChannelsDatarate,
 8008862:	ab0a      	add	r3, sp, #40	; 0x28
 8008864:	f001 fd0e 	bl	800a284 <LoRaMacAdrCalcNext>
 8008868:	2340      	movs	r3, #64	; 0x40
 800886a:	a909      	add	r1, sp, #36	; 0x24
 800886c:	4030      	ands	r0, r6
 800886e:	780e      	ldrb	r6, [r1, #0]
 8008870:	0180      	lsls	r0, r0, #6
 8008872:	439e      	bics	r6, r3
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 8008874:	9b07      	ldr	r3, [sp, #28]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &MacCtx.NvmCtx->MacParams.ChannelsDatarate,
 8008876:	4306      	orrs	r6, r0
 8008878:	700e      	strb	r6, [r1, #0]
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 800887a:	9a05      	ldr	r2, [sp, #20]
 800887c:	9300      	str	r3, [sp, #0]
 800887e:	9804      	ldr	r0, [sp, #16]
 8008880:	9b06      	ldr	r3, [sp, #24]
 8008882:	f7ff fcdd 	bl	8008240 <PrepareFrame>
 8008886:	1e06      	subs	r6, r0, #0
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 8008888:	d001      	beq.n	800888e <Send+0xe6>
 800888a:	280a      	cmp	r0, #10
 800888c:	d104      	bne.n	8008898 <Send+0xf0>
        status = ScheduleTx( false );
 800888e:	2000      	movs	r0, #0
 8008890:	f7ff fe28 	bl	80084e4 <ScheduleTx>
 8008894:	1e06      	subs	r6, r0, #0
    if( status != LORAMAC_STATUS_OK )
 8008896:	d00b      	beq.n	80088b0 <Send+0x108>
        MacCtx.NvmCtx->MacParams.ChannelsDatarate = datarate;
 8008898:	592b      	ldr	r3, [r5, r4]
 800889a:	9903      	ldr	r1, [sp, #12]
 800889c:	001a      	movs	r2, r3
        MacCtx.NvmCtx->MacParams.ChannelsTxPower = txPower;
 800889e:	33f8      	adds	r3, #248	; 0xf8
        MacCtx.NvmCtx->MacParams.ChannelsDatarate = datarate;
 80088a0:	32f9      	adds	r2, #249	; 0xf9
 80088a2:	7011      	strb	r1, [r2, #0]
        MacCtx.NvmCtx->MacParams.ChannelsTxPower = txPower;
 80088a4:	701f      	strb	r7, [r3, #0]
}
 80088a6:	0030      	movs	r0, r6
 80088a8:	b011      	add	sp, #68	; 0x44
 80088aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
        fCtrl.Bits.FPending      = 0;
 80088ac:	4383      	bics	r3, r0
 80088ae:	e7af      	b.n	8008810 <Send+0x68>
        MacCtx.NvmCtx->SrvAckRequested = false;
 80088b0:	22e0      	movs	r2, #224	; 0xe0
 80088b2:	592b      	ldr	r3, [r5, r4]
 80088b4:	0052      	lsls	r2, r2, #1
 80088b6:	5498      	strb	r0, [r3, r2]
        MacCtx.NvmCtx->AdrAckCounter = adrAckCounter;
 80088b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80088ba:	33f4      	adds	r3, #244	; 0xf4
 80088bc:	601a      	str	r2, [r3, #0]
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 80088be:	f001 fe1f 	bl	800a500 <LoRaMacCommandsRemoveNoneStickyCmds>
 80088c2:	2800      	cmp	r0, #0
 80088c4:	d0ef      	beq.n	80088a6 <Send+0xfe>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80088c6:	2613      	movs	r6, #19
 80088c8:	e7ed      	b.n	80088a6 <Send+0xfe>
 80088ca:	46c0      	nop			; (mov r8, r8)
 80088cc:	00000484 	.word	0x00000484
 80088d0:	20000980 	.word	0x20000980
 80088d4:	000003f6 	.word	0x000003f6

080088d8 <SendReJoinReq>:
{
 80088d8:	b570      	push	{r4, r5, r6, lr}
 80088da:	0005      	movs	r5, r0
    macHdr.Value = 0;
 80088dc:	2400      	movs	r4, #0
    bool allowDelayedTx = true;
 80088de:	2001      	movs	r0, #1
    switch( joinReqType )
 80088e0:	2dff      	cmp	r5, #255	; 0xff
 80088e2:	d11a      	bne.n	800891a <SendReJoinReq+0x42>
            SwitchClass( CLASS_A );
 80088e4:	0020      	movs	r0, r4
 80088e6:	f7ff f8d7 	bl	8007a98 <SwitchClass>
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 80088ea:	4b0d      	ldr	r3, [pc, #52]	; (8008920 <SendReJoinReq+0x48>)
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 80088ec:	490d      	ldr	r1, [pc, #52]	; (8008924 <SendReJoinReq+0x4c>)
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 80088ee:	001a      	movs	r2, r3
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 80088f0:	33fc      	adds	r3, #252	; 0xfc
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 80088f2:	32ff      	adds	r2, #255	; 0xff
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 80088f4:	60d9      	str	r1, [r3, #12]
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 80088f6:	7154      	strb	r4, [r2, #5]
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 80088f8:	7355      	strb	r5, [r2, #13]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 80088fa:	7394      	strb	r4, [r2, #14]
            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
 80088fc:	f7fe fe12 	bl	8007524 <SecureElementGetJoinEui>
 8008900:	2208      	movs	r2, #8
 8008902:	0001      	movs	r1, r0
 8008904:	4808      	ldr	r0, [pc, #32]	; (8008928 <SendReJoinReq+0x50>)
 8008906:	f004 fb6e 	bl	800cfe6 <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
 800890a:	f7fe fdf5 	bl	80074f8 <SecureElementGetDevEui>
 800890e:	2208      	movs	r2, #8
 8008910:	0001      	movs	r1, r0
 8008912:	4806      	ldr	r0, [pc, #24]	; (800892c <SendReJoinReq+0x54>)
 8008914:	f004 fb67 	bl	800cfe6 <memcpy1>
            allowDelayedTx = false;
 8008918:	0020      	movs	r0, r4
    status = ScheduleTx( allowDelayedTx );
 800891a:	f7ff fde3 	bl	80084e4 <ScheduleTx>
}
 800891e:	bd70      	pop	{r4, r5, r6, pc}
 8008920:	20000980 	.word	0x20000980
 8008924:	20000982 	.word	0x20000982
 8008928:	20000a8e 	.word	0x20000a8e
 800892c:	20000a96 	.word	0x20000a96

08008930 <SetTxContinuousWave>:
{
 8008930:	b510      	push	{r4, lr}
    continuousWave.Channel = MacCtx.Channel;
 8008932:	4b13      	ldr	r3, [pc, #76]	; (8008980 <SetTxContinuousWave+0x50>)
 8008934:	4c13      	ldr	r4, [pc, #76]	; (8008984 <SetTxContinuousWave+0x54>)
{
 8008936:	b086      	sub	sp, #24
    continuousWave.Channel = MacCtx.Channel;
 8008938:	5ce3      	ldrb	r3, [r4, r3]
 800893a:	aa02      	add	r2, sp, #8
 800893c:	7013      	strb	r3, [r2, #0]
    continuousWave.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800893e:	4b12      	ldr	r3, [pc, #72]	; (8008988 <SetTxContinuousWave+0x58>)
 8008940:	a902      	add	r1, sp, #8
 8008942:	58e3      	ldr	r3, [r4, r3]
 8008944:	001a      	movs	r2, r3
 8008946:	32f9      	adds	r2, #249	; 0xf9
 8008948:	7812      	ldrb	r2, [r2, #0]
 800894a:	704a      	strb	r2, [r1, #1]
    continuousWave.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 800894c:	001a      	movs	r2, r3
 800894e:	32f8      	adds	r2, #248	; 0xf8
 8008950:	7812      	ldrb	r2, [r2, #0]
 8008952:	708a      	strb	r2, [r1, #2]
    continuousWave.MaxEirp = MacCtx.NvmCtx->MacParams.MaxEirp;
 8008954:	001a      	movs	r2, r3
 8008956:	32fc      	adds	r2, #252	; 0xfc
 8008958:	6b51      	ldr	r1, [r2, #52]	; 0x34
    continuousWave.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 800895a:	6b92      	ldr	r2, [r2, #56]	; 0x38
    continuousWave.MaxEirp = MacCtx.NvmCtx->MacParams.MaxEirp;
 800895c:	9103      	str	r1, [sp, #12]
    continuousWave.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 800895e:	9201      	str	r2, [sp, #4]
 8008960:	9204      	str	r2, [sp, #16]
    continuousWave.Timeout = timeout;
 8008962:	aa02      	add	r2, sp, #8
 8008964:	8190      	strh	r0, [r2, #12]
    RegionSetContinuousWave( MacCtx.NvmCtx->Region, &continuousWave );
 8008966:	0011      	movs	r1, r2
 8008968:	7818      	ldrb	r0, [r3, #0]
 800896a:	f002 fd2b 	bl	800b3c4 <RegionSetContinuousWave>
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800896e:	22d0      	movs	r2, #208	; 0xd0
 8008970:	2302      	movs	r3, #2
}
 8008972:	2000      	movs	r0, #0
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8008974:	0092      	lsls	r2, r2, #2
 8008976:	58a1      	ldr	r1, [r4, r2]
 8008978:	430b      	orrs	r3, r1
 800897a:	50a3      	str	r3, [r4, r2]
}
 800897c:	b006      	add	sp, #24
 800897e:	bd10      	pop	{r4, pc}
 8008980:	00000415 	.word	0x00000415
 8008984:	20000980 	.word	0x20000980
 8008988:	00000484 	.word	0x00000484

0800898c <SetTxContinuousWave1>:
{
 800898c:	b510      	push	{r4, lr}
 800898e:	0004      	movs	r4, r0
    Radio.SetTxContinuousWave( frequency, power, timeout );
 8008990:	4b07      	ldr	r3, [pc, #28]	; (80089b0 <SetTxContinuousWave1+0x24>)
{
 8008992:	0008      	movs	r0, r1
    Radio.SetTxContinuousWave( frequency, power, timeout );
 8008994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008996:	b251      	sxtb	r1, r2
 8008998:	0022      	movs	r2, r4
 800899a:	4798      	blx	r3
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800899c:	22d0      	movs	r2, #208	; 0xd0
 800899e:	2302      	movs	r3, #2
 80089a0:	4904      	ldr	r1, [pc, #16]	; (80089b4 <SetTxContinuousWave1+0x28>)
 80089a2:	0092      	lsls	r2, r2, #2
 80089a4:	5888      	ldr	r0, [r1, r2]
 80089a6:	4303      	orrs	r3, r0
 80089a8:	508b      	str	r3, [r1, r2]
}
 80089aa:	2000      	movs	r0, #0
 80089ac:	bd10      	pop	{r4, pc}
 80089ae:	46c0      	nop			; (mov r8, r8)
 80089b0:	0800f5a4 	.word	0x0800f5a4
 80089b4:	20000980 	.word	0x20000980

080089b8 <GetCtxs>:
{
 80089b8:	b513      	push	{r0, r1, r4, lr}
    Contexts.MacNvmCtx = &NvmMacCtx;
 80089ba:	4b14      	ldr	r3, [pc, #80]	; (8008a0c <GetCtxs+0x54>)
 80089bc:	4c14      	ldr	r4, [pc, #80]	; (8008a10 <GetCtxs+0x58>)
    Contexts.CryptoNvmCtx = LoRaMacCryptoGetNvmCtx( &Contexts.CryptoNvmCtxSize );
 80089be:	4815      	ldr	r0, [pc, #84]	; (8008a14 <GetCtxs+0x5c>)
    Contexts.MacNvmCtx = &NvmMacCtx;
 80089c0:	6023      	str	r3, [r4, #0]
    Contexts.MacNvmCtxSize = sizeof( NvmMacCtx );
 80089c2:	23ee      	movs	r3, #238	; 0xee
 80089c4:	005b      	lsls	r3, r3, #1
 80089c6:	6063      	str	r3, [r4, #4]
    Contexts.CryptoNvmCtx = LoRaMacCryptoGetNvmCtx( &Contexts.CryptoNvmCtxSize );
 80089c8:	f002 f88a 	bl	800aae0 <LoRaMacCryptoGetNvmCtx>
    GetNvmCtxParams_t params ={ 0 };
 80089cc:	2300      	movs	r3, #0
    Contexts.RegionNvmCtx = RegionGetNvmCtx( MacCtx.NvmCtx->Region, &params );
 80089ce:	4a12      	ldr	r2, [pc, #72]	; (8008a18 <GetCtxs+0x60>)
    GetNvmCtxParams_t params ={ 0 };
 80089d0:	9301      	str	r3, [sp, #4]
    Contexts.RegionNvmCtx = RegionGetNvmCtx( MacCtx.NvmCtx->Region, &params );
 80089d2:	4b12      	ldr	r3, [pc, #72]	; (8008a1c <GetCtxs+0x64>)
 80089d4:	a901      	add	r1, sp, #4
 80089d6:	58d3      	ldr	r3, [r2, r3]
    Contexts.CryptoNvmCtx = LoRaMacCryptoGetNvmCtx( &Contexts.CryptoNvmCtxSize );
 80089d8:	6120      	str	r0, [r4, #16]
    Contexts.RegionNvmCtx = RegionGetNvmCtx( MacCtx.NvmCtx->Region, &params );
 80089da:	7818      	ldrb	r0, [r3, #0]
 80089dc:	f002 fc5a 	bl	800b294 <RegionGetNvmCtx>
    Contexts.RegionNvmCtxSize = params.nvmCtxSize;
 80089e0:	9b01      	ldr	r3, [sp, #4]
    Contexts.RegionNvmCtx = RegionGetNvmCtx( MacCtx.NvmCtx->Region, &params );
 80089e2:	60a0      	str	r0, [r4, #8]
    Contexts.SecureElementNvmCtx = SecureElementGetNvmCtx( &Contexts.SecureElementNvmCtxSize );
 80089e4:	480e      	ldr	r0, [pc, #56]	; (8008a20 <GetCtxs+0x68>)
    Contexts.RegionNvmCtxSize = params.nvmCtxSize;
 80089e6:	60e3      	str	r3, [r4, #12]
    Contexts.SecureElementNvmCtx = SecureElementGetNvmCtx( &Contexts.SecureElementNvmCtxSize );
 80089e8:	f7fe fc86 	bl	80072f8 <SecureElementGetNvmCtx>
 80089ec:	61a0      	str	r0, [r4, #24]
    Contexts.CommandsNvmCtx = LoRaMacCommandsGetNvmCtx( &Contexts.CommandsNvmCtxSize );
 80089ee:	480d      	ldr	r0, [pc, #52]	; (8008a24 <GetCtxs+0x6c>)
 80089f0:	f001 fd06 	bl	800a400 <LoRaMacCommandsGetNvmCtx>
 80089f4:	6220      	str	r0, [r4, #32]
    Contexts.ClassBNvmCtx = LoRaMacClassBGetNvmCtx( &Contexts.ClassBNvmCtxSize );
 80089f6:	480c      	ldr	r0, [pc, #48]	; (8008a28 <GetCtxs+0x70>)
 80089f8:	f001 fcad 	bl	800a356 <LoRaMacClassBGetNvmCtx>
 80089fc:	62a0      	str	r0, [r4, #40]	; 0x28
    Contexts.ConfirmQueueNvmCtx = LoRaMacConfirmQueueGetNvmCtx( &Contexts.ConfirmQueueNvmCtxSize );
 80089fe:	480b      	ldr	r0, [pc, #44]	; (8008a2c <GetCtxs+0x74>)
 8008a00:	f001 fe1c 	bl	800a63c <LoRaMacConfirmQueueGetNvmCtx>
 8008a04:	6320      	str	r0, [r4, #48]	; 0x30
}
 8008a06:	0020      	movs	r0, r4
 8008a08:	bd16      	pop	{r1, r2, r4, pc}
 8008a0a:	46c0      	nop			; (mov r8, r8)
 8008a0c:	200007a4 	.word	0x200007a4
 8008a10:	20001670 	.word	0x20001670
 8008a14:	20001684 	.word	0x20001684
 8008a18:	20000980 	.word	0x20000980
 8008a1c:	00000484 	.word	0x00000484
 8008a20:	2000168c 	.word	0x2000168c
 8008a24:	20001694 	.word	0x20001694
 8008a28:	2000169c 	.word	0x2000169c
 8008a2c:	200016a4 	.word	0x200016a4

08008a30 <RestoreCtxs>:
{
 8008a30:	b537      	push	{r0, r1, r2, r4, r5, lr}
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8008a32:	2303      	movs	r3, #3
{
 8008a34:	1e04      	subs	r4, r0, #0
    if( contexts == NULL )
 8008a36:	d01f      	beq.n	8008a78 <RestoreCtxs+0x48>
    if( MacCtx.MacState != LORAMAC_STOPPED )
 8008a38:	23d0      	movs	r3, #208	; 0xd0
 8008a3a:	4d1d      	ldr	r5, [pc, #116]	; (8008ab0 <RestoreCtxs+0x80>)
 8008a3c:	009b      	lsls	r3, r3, #2
 8008a3e:	58ea      	ldr	r2, [r5, r3]
        return LORAMAC_STATUS_BUSY;
 8008a40:	2301      	movs	r3, #1
    if( MacCtx.MacState != LORAMAC_STOPPED )
 8008a42:	429a      	cmp	r2, r3
 8008a44:	d118      	bne.n	8008a78 <RestoreCtxs+0x48>
    if( contexts->MacNvmCtx != NULL )
 8008a46:	6801      	ldr	r1, [r0, #0]
 8008a48:	2900      	cmp	r1, #0
 8008a4a:	d004      	beq.n	8008a56 <RestoreCtxs+0x26>
        memcpy1( ( uint8_t* ) &NvmMacCtx, ( uint8_t* ) contexts->MacNvmCtx, contexts->MacNvmCtxSize );
 8008a4c:	6843      	ldr	r3, [r0, #4]
 8008a4e:	4819      	ldr	r0, [pc, #100]	; (8008ab4 <RestoreCtxs+0x84>)
 8008a50:	b29a      	uxth	r2, r3
 8008a52:	f004 fac8 	bl	800cfe6 <memcpy1>
    params.Type = INIT_TYPE_RESTORE_CTX;
 8008a56:	2302      	movs	r3, #2
 8008a58:	466a      	mov	r2, sp
 8008a5a:	7113      	strb	r3, [r2, #4]
    params.NvmCtx = contexts->RegionNvmCtx;
 8008a5c:	68a3      	ldr	r3, [r4, #8]
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 8008a5e:	4669      	mov	r1, sp
    params.NvmCtx = contexts->RegionNvmCtx;
 8008a60:	9300      	str	r3, [sp, #0]
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 8008a62:	4b15      	ldr	r3, [pc, #84]	; (8008ab8 <RestoreCtxs+0x88>)
 8008a64:	58eb      	ldr	r3, [r5, r3]
 8008a66:	7818      	ldrb	r0, [r3, #0]
 8008a68:	f002 fc0d 	bl	800b286 <RegionInitDefaults>
    if( SecureElementRestoreNvmCtx( contexts->SecureElementNvmCtx ) != SECURE_ELEMENT_SUCCESS )
 8008a6c:	69a0      	ldr	r0, [r4, #24]
 8008a6e:	f7fe fc35 	bl	80072dc <SecureElementRestoreNvmCtx>
 8008a72:	2800      	cmp	r0, #0
 8008a74:	d002      	beq.n	8008a7c <RestoreCtxs+0x4c>
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8008a76:	2311      	movs	r3, #17
}
 8008a78:	0018      	movs	r0, r3
 8008a7a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    if( LoRaMacCryptoRestoreNvmCtx( contexts->CryptoNvmCtx ) != LORAMAC_CRYPTO_SUCCESS )
 8008a7c:	6920      	ldr	r0, [r4, #16]
 8008a7e:	f002 f821 	bl	800aac4 <LoRaMacCryptoRestoreNvmCtx>
 8008a82:	2800      	cmp	r0, #0
 8008a84:	d1f7      	bne.n	8008a76 <RestoreCtxs+0x46>
    if( LoRaMacCommandsRestoreNvmCtx( contexts->CommandsNvmCtx ) != LORAMAC_COMMANDS_SUCCESS )
 8008a86:	6a20      	ldr	r0, [r4, #32]
 8008a88:	f001 fcac 	bl	800a3e4 <LoRaMacCommandsRestoreNvmCtx>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8008a8c:	2313      	movs	r3, #19
    if( LoRaMacCommandsRestoreNvmCtx( contexts->CommandsNvmCtx ) != LORAMAC_COMMANDS_SUCCESS )
 8008a8e:	1e05      	subs	r5, r0, #0
 8008a90:	d1f2      	bne.n	8008a78 <RestoreCtxs+0x48>
    if( LoRaMacClassBRestoreNvmCtx( contexts->ClassBNvmCtx ) != true )
 8008a92:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8008a94:	f001 fc5d 	bl	800a352 <LoRaMacClassBRestoreNvmCtx>
        return LORAMAC_STATUS_CLASS_B_ERROR;
 8008a98:	2314      	movs	r3, #20
    if( LoRaMacClassBRestoreNvmCtx( contexts->ClassBNvmCtx ) != true )
 8008a9a:	2800      	cmp	r0, #0
 8008a9c:	d0ec      	beq.n	8008a78 <RestoreCtxs+0x48>
    if( LoRaMacConfirmQueueRestoreNvmCtx( contexts->ConfirmQueueNvmCtx ) != true )
 8008a9e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8008aa0:	f001 fdbe 	bl	800a620 <LoRaMacConfirmQueueRestoreNvmCtx>
        return LORAMAC_STATUS_CONFIRM_QUEUE_ERROR;
 8008aa4:	2315      	movs	r3, #21
    if( LoRaMacConfirmQueueRestoreNvmCtx( contexts->ConfirmQueueNvmCtx ) != true )
 8008aa6:	2800      	cmp	r0, #0
 8008aa8:	d0e6      	beq.n	8008a78 <RestoreCtxs+0x48>
    return LORAMAC_STATUS_OK;
 8008aaa:	002b      	movs	r3, r5
 8008aac:	e7e4      	b.n	8008a78 <RestoreCtxs+0x48>
 8008aae:	46c0      	nop			; (mov r8, r8)
 8008ab0:	20000980 	.word	0x20000980
 8008ab4:	200007a4 	.word	0x200007a4
 8008ab8:	00000484 	.word	0x00000484

08008abc <DetermineFrameType>:
{
 8008abc:	0002      	movs	r2, r0
 8008abe:	b510      	push	{r4, lr}
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8008ac0:	2003      	movs	r0, #3
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 8008ac2:	2a00      	cmp	r2, #0
 8008ac4:	d00b      	beq.n	8008ade <DetermineFrameType+0x22>
 8008ac6:	2900      	cmp	r1, #0
 8008ac8:	d009      	beq.n	8008ade <DetermineFrameType+0x22>
    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 8008aca:	230f      	movs	r3, #15
 8008acc:	7b14      	ldrb	r4, [r2, #12]
 8008ace:	401c      	ands	r4, r3
 8008ad0:	d006      	beq.n	8008ae0 <DetermineFrameType+0x24>
 8008ad2:	1c53      	adds	r3, r2, #1
 8008ad4:	7fdb      	ldrb	r3, [r3, #31]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d002      	beq.n	8008ae0 <DetermineFrameType+0x24>
        *fType = FRAME_TYPE_A;
 8008ada:	2000      	movs	r0, #0
 8008adc:	7008      	strb	r0, [r1, #0]
}
 8008ade:	bd10      	pop	{r4, pc}
    else if( macMsg->FRMPayloadSize == 0 )
 8008ae0:	0013      	movs	r3, r2
 8008ae2:	3328      	adds	r3, #40	; 0x28
 8008ae4:	7818      	ldrb	r0, [r3, #0]
 8008ae6:	2800      	cmp	r0, #0
 8008ae8:	d102      	bne.n	8008af0 <DetermineFrameType+0x34>
        *fType = FRAME_TYPE_B;
 8008aea:	2201      	movs	r2, #1
 8008aec:	700a      	strb	r2, [r1, #0]
 8008aee:	e7f6      	b.n	8008ade <DetermineFrameType+0x22>
        return LORAMAC_STATUS_ERROR;
 8008af0:	2017      	movs	r0, #23
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 8008af2:	2c00      	cmp	r4, #0
 8008af4:	d1f3      	bne.n	8008ade <DetermineFrameType+0x22>
 8008af6:	3201      	adds	r2, #1
 8008af8:	7fd3      	ldrb	r3, [r2, #31]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d103      	bne.n	8008b06 <DetermineFrameType+0x4a>
        *fType = FRAME_TYPE_C;
 8008afe:	3302      	adds	r3, #2
        *fType = FRAME_TYPE_D;
 8008b00:	700b      	strb	r3, [r1, #0]
    return LORAMAC_STATUS_OK;
 8008b02:	0020      	movs	r0, r4
        *fType = FRAME_TYPE_D;
 8008b04:	e7eb      	b.n	8008ade <DetermineFrameType+0x22>
 8008b06:	2303      	movs	r3, #3
 8008b08:	e7fa      	b.n	8008b00 <DetermineFrameType+0x44>
	...

08008b0c <LoRaMacProcess>:
{
 8008b0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b0e:	b0ad      	sub	sp, #180	; 0xb4
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008b10:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8008b14:	b672      	cpsid	i
    LoRaMacRadioEvents.Value = 0;
 8008b16:	2000      	movs	r0, #0
    events = LoRaMacRadioEvents;
 8008b18:	4ac8      	ldr	r2, [pc, #800]	; (8008e3c <LoRaMacProcess+0x330>)
 8008b1a:	6813      	ldr	r3, [r2, #0]
    LoRaMacRadioEvents.Value = 0;
 8008b1c:	6010      	str	r0, [r2, #0]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b1e:	f381 8810 	msr	PRIMASK, r1
    if( events.Value != 0 )
 8008b22:	4283      	cmp	r3, r0
 8008b24:	d100      	bne.n	8008b28 <LoRaMacProcess+0x1c>
 8008b26:	e0e6      	b.n	8008cf6 <LoRaMacProcess+0x1ea>
 8008b28:	b2db      	uxtb	r3, r3
 8008b2a:	9303      	str	r3, [sp, #12]
        if( events.Events.TxDone == 1 )
 8008b2c:	06db      	lsls	r3, r3, #27
 8008b2e:	d559      	bpl.n	8008be4 <LoRaMacProcess+0xd8>
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 8008b30:	4cc3      	ldr	r4, [pc, #780]	; (8008e40 <LoRaMacProcess+0x334>)
 8008b32:	4dc4      	ldr	r5, [pc, #784]	; (8008e44 <LoRaMacProcess+0x338>)
 8008b34:	5963      	ldr	r3, [r4, r5]
 8008b36:	33f0      	adds	r3, #240	; 0xf0
 8008b38:	781b      	ldrb	r3, [r3, #0]
 8008b3a:	2b02      	cmp	r3, #2
 8008b3c:	d003      	beq.n	8008b46 <LoRaMacProcess+0x3a>
        Radio.Sleep( );
 8008b3e:	4bc2      	ldr	r3, [pc, #776]	; (8008e48 <LoRaMacProcess+0x33c>)
 8008b40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b42:	9302      	str	r3, [sp, #8]
 8008b44:	4798      	blx	r3
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 8008b46:	23ec      	movs	r3, #236	; 0xec
 8008b48:	4ec0      	ldr	r6, [pc, #768]	; (8008e4c <LoRaMacProcess+0x340>)
 8008b4a:	009b      	lsls	r3, r3, #2
 8008b4c:	58e1      	ldr	r1, [r4, r3]
 8008b4e:	0030      	movs	r0, r6
 8008b50:	f004 f984 	bl	800ce5c <TimerSetValue>
    TimerStart( &MacCtx.RxWindowTimer1 );
 8008b54:	0030      	movs	r0, r6
 8008b56:	f004 f8d1 	bl	800ccfc <TimerStart>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 8008b5a:	23ed      	movs	r3, #237	; 0xed
 8008b5c:	4ebc      	ldr	r6, [pc, #752]	; (8008e50 <LoRaMacProcess+0x344>)
 8008b5e:	009b      	lsls	r3, r3, #2
 8008b60:	58e1      	ldr	r1, [r4, r3]
 8008b62:	0030      	movs	r0, r6
 8008b64:	f004 f97a 	bl	800ce5c <TimerSetValue>
    TimerStart( &MacCtx.RxWindowTimer2 );
 8008b68:	0030      	movs	r0, r6
 8008b6a:	f004 f8c7 	bl	800ccfc <TimerStart>
    if( ( MacCtx.NvmCtx->DeviceClass == CLASS_C ) || ( MacCtx.NodeAckRequested == true ) )
 8008b6e:	5963      	ldr	r3, [r4, r5]
 8008b70:	4eb8      	ldr	r6, [pc, #736]	; (8008e54 <LoRaMacProcess+0x348>)
 8008b72:	001a      	movs	r2, r3
 8008b74:	32f0      	adds	r2, #240	; 0xf0
 8008b76:	7812      	ldrb	r2, [r2, #0]
 8008b78:	2a02      	cmp	r2, #2
 8008b7a:	d002      	beq.n	8008b82 <LoRaMacProcess+0x76>
 8008b7c:	5da2      	ldrb	r2, [r4, r6]
 8008b7e:	2a00      	cmp	r2, #0
 8008b80:	d011      	beq.n	8008ba6 <LoRaMacProcess+0x9a>
        getPhy.Attribute = PHY_ACK_TIMEOUT;
 8008b82:	2216      	movs	r2, #22
 8008b84:	a914      	add	r1, sp, #80	; 0x50
        phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8008b86:	7818      	ldrb	r0, [r3, #0]
        getPhy.Attribute = PHY_ACK_TIMEOUT;
 8008b88:	700a      	strb	r2, [r1, #0]
        phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8008b8a:	f002 fb69 	bl	800b260 <RegionGetPhyParam>
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 8008b8e:	23ed      	movs	r3, #237	; 0xed
 8008b90:	009b      	lsls	r3, r3, #2
 8008b92:	4fb1      	ldr	r7, [pc, #708]	; (8008e58 <LoRaMacProcess+0x34c>)
 8008b94:	58e1      	ldr	r1, [r4, r3]
        phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8008b96:	9016      	str	r0, [sp, #88]	; 0x58
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 8008b98:	1809      	adds	r1, r1, r0
 8008b9a:	0038      	movs	r0, r7
 8008b9c:	f004 f95e 	bl	800ce5c <TimerSetValue>
        TimerStart( &MacCtx.AckTimeoutTimer );
 8008ba0:	0038      	movs	r0, r7
 8008ba2:	f004 f8ab 	bl	800ccfc <TimerStart>
    MacCtx.NvmCtx->LastTxChannel = MacCtx.Channel;
 8008ba6:	219f      	movs	r1, #159	; 0x9f
 8008ba8:	4aac      	ldr	r2, [pc, #688]	; (8008e5c <LoRaMacProcess+0x350>)
 8008baa:	5963      	ldr	r3, [r4, r5]
 8008bac:	5ca2      	ldrb	r2, [r4, r2]
 8008bae:	0049      	lsls	r1, r1, #1
 8008bb0:	545a      	strb	r2, [r3, r1]
    txDone.Channel = MacCtx.Channel;
 8008bb2:	a920      	add	r1, sp, #128	; 0x80
 8008bb4:	700a      	strb	r2, [r1, #0]
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 8008bb6:	22ea      	movs	r2, #234	; 0xea
 8008bb8:	0052      	lsls	r2, r2, #1
 8008bba:	5c9a      	ldrb	r2, [r3, r2]
 8008bbc:	2a00      	cmp	r2, #0
 8008bbe:	d000      	beq.n	8008bc2 <LoRaMacProcess+0xb6>
 8008bc0:	e13a      	b.n	8008e38 <LoRaMacProcess+0x32c>
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 8008bc2:	4fa7      	ldr	r7, [pc, #668]	; (8008e60 <LoRaMacProcess+0x354>)
        txDone.Joined  = true;
 8008bc4:	704a      	strb	r2, [r1, #1]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 8008bc6:	683a      	ldr	r2, [r7, #0]
    RegionSetBandTxDone( MacCtx.NvmCtx->Region, &txDone );
 8008bc8:	7818      	ldrb	r0, [r3, #0]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 8008bca:	604a      	str	r2, [r1, #4]
    RegionSetBandTxDone( MacCtx.NvmCtx->Region, &txDone );
 8008bcc:	f002 fb54 	bl	800b278 <RegionSetBandTxDone>
    MacCtx.NvmCtx->LastTxDoneTime = TxDoneParams.CurTime;
 8008bd0:	23e2      	movs	r3, #226	; 0xe2
 8008bd2:	5962      	ldr	r2, [r4, r5]
 8008bd4:	6839      	ldr	r1, [r7, #0]
 8008bd6:	005b      	lsls	r3, r3, #1
 8008bd8:	50d1      	str	r1, [r2, r3]
    if( MacCtx.NodeAckRequested == false )
 8008bda:	5da3      	ldrb	r3, [r4, r6]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d101      	bne.n	8008be4 <LoRaMacProcess+0xd8>
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8008be0:	4aa0      	ldr	r2, [pc, #640]	; (8008e64 <LoRaMacProcess+0x358>)
 8008be2:	54a3      	strb	r3, [r4, r2]
        if( events.Events.RxDone == 1 )
 8008be4:	9b03      	ldr	r3, [sp, #12]
 8008be6:	071b      	lsls	r3, r3, #28
 8008be8:	d556      	bpl.n	8008c98 <LoRaMacProcess+0x18c>
    uint8_t *payload = RxDoneParams.Payload;
 8008bea:	4b9f      	ldr	r3, [pc, #636]	; (8008e68 <LoRaMacProcess+0x35c>)
    uint32_t address = MacCtx.NvmCtx->DevAddr;
 8008bec:	4c94      	ldr	r4, [pc, #592]	; (8008e40 <LoRaMacProcess+0x334>)
    uint16_t size = RxDoneParams.Size;
 8008bee:	891a      	ldrh	r2, [r3, #8]
    uint32_t address = MacCtx.NvmCtx->DevAddr;
 8008bf0:	4e94      	ldr	r6, [pc, #592]	; (8008e44 <LoRaMacProcess+0x338>)
    uint16_t size = RxDoneParams.Size;
 8008bf2:	9204      	str	r2, [sp, #16]
    int16_t rssi = RxDoneParams.Rssi;
 8008bf4:	210a      	movs	r1, #10
 8008bf6:	5e5a      	ldrsh	r2, [r3, r1]
    uint8_t *payload = RxDoneParams.Payload;
 8008bf8:	685f      	ldr	r7, [r3, #4]
    int16_t rssi = RxDoneParams.Rssi;
 8008bfa:	9206      	str	r2, [sp, #24]
    uint32_t address = MacCtx.NvmCtx->DevAddr;
 8008bfc:	59a2      	ldr	r2, [r4, r6]
    int8_t snr = RxDoneParams.Snr;
 8008bfe:	7b1b      	ldrb	r3, [r3, #12]
    uint32_t address = MacCtx.NvmCtx->DevAddr;
 8008c00:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
    int8_t snr = RxDoneParams.Snr;
 8008c02:	b25b      	sxtb	r3, r3
    uint32_t address = MacCtx.NvmCtx->DevAddr;
 8008c04:	9207      	str	r2, [sp, #28]
    MacCtx.McpsConfirm.AckReceived = false;
 8008c06:	2288      	movs	r2, #136	; 0x88
    int8_t snr = RxDoneParams.Snr;
 8008c08:	9305      	str	r3, [sp, #20]
    uint32_t downLinkCounter = 0;
 8008c0a:	2300      	movs	r3, #0
    MacCtx.McpsConfirm.AckReceived = false;
 8008c0c:	00d2      	lsls	r2, r2, #3
 8008c0e:	54a3      	strb	r3, [r4, r2]
    MacCtx.McpsIndication.Rssi = rssi;
 8008c10:	9906      	ldr	r1, [sp, #24]
 8008c12:	4a96      	ldr	r2, [pc, #600]	; (8008e6c <LoRaMacProcess+0x360>)
    uint32_t downLinkCounter = 0;
 8008c14:	9313      	str	r3, [sp, #76]	; 0x4c
    MacCtx.McpsIndication.Rssi = rssi;
 8008c16:	52a1      	strh	r1, [r4, r2]
    MacCtx.McpsIndication.Snr = snr;
 8008c18:	9905      	ldr	r1, [sp, #20]
 8008c1a:	4a95      	ldr	r2, [pc, #596]	; (8008e70 <LoRaMacProcess+0x364>)
 8008c1c:	54a1      	strb	r1, [r4, r2]
    MacCtx.McpsIndication.RxSlot = MacCtx.RxSlot;
 8008c1e:	3254      	adds	r2, #84	; 0x54
 8008c20:	5ca2      	ldrb	r2, [r4, r2]
 8008c22:	4994      	ldr	r1, [pc, #592]	; (8008e74 <LoRaMacProcess+0x368>)
 8008c24:	5462      	strb	r2, [r4, r1]
    MacCtx.McpsIndication.Multicast = 0;
 8008c26:	4a94      	ldr	r2, [pc, #592]	; (8008e78 <LoRaMacProcess+0x36c>)
 8008c28:	52a3      	strh	r3, [r4, r2]
    MacCtx.McpsIndication.FramePending = 0;
 8008c2a:	4a94      	ldr	r2, [pc, #592]	; (8008e7c <LoRaMacProcess+0x370>)
 8008c2c:	54a3      	strb	r3, [r4, r2]
    MacCtx.McpsIndication.Buffer = NULL;
 8008c2e:	4a94      	ldr	r2, [pc, #592]	; (8008e80 <LoRaMacProcess+0x374>)
 8008c30:	50a3      	str	r3, [r4, r2]
    MacCtx.McpsIndication.BufferSize = 0;
 8008c32:	3204      	adds	r2, #4
 8008c34:	54a3      	strb	r3, [r4, r2]
    MacCtx.McpsIndication.RxData = false;
 8008c36:	4a93      	ldr	r2, [pc, #588]	; (8008e84 <LoRaMacProcess+0x378>)
 8008c38:	54a3      	strb	r3, [r4, r2]
    MacCtx.McpsIndication.AckReceived = false;
 8008c3a:	4a93      	ldr	r2, [pc, #588]	; (8008e88 <LoRaMacProcess+0x37c>)
 8008c3c:	54a3      	strb	r3, [r4, r2]
    MacCtx.McpsIndication.DownLinkCounter = 0;
 8008c3e:	3202      	adds	r2, #2
 8008c40:	50a3      	str	r3, [r4, r2]
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 8008c42:	4a92      	ldr	r2, [pc, #584]	; (8008e8c <LoRaMacProcess+0x380>)
 8008c44:	54a3      	strb	r3, [r4, r2]
    MacCtx.McpsIndication.DevAddress = 0;
 8008c46:	4a92      	ldr	r2, [pc, #584]	; (8008e90 <LoRaMacProcess+0x384>)
 8008c48:	50a3      	str	r3, [r4, r2]
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 8008c4a:	3204      	adds	r2, #4
 8008c4c:	54a3      	strb	r3, [r4, r2]
    Radio.Sleep( );
 8008c4e:	4b7e      	ldr	r3, [pc, #504]	; (8008e48 <LoRaMacProcess+0x33c>)
 8008c50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c52:	9302      	str	r3, [sp, #8]
 8008c54:	4798      	blx	r3
    TimerStop( &MacCtx.RxWindowTimer2 );
 8008c56:	487e      	ldr	r0, [pc, #504]	; (8008e50 <LoRaMacProcess+0x344>)
 8008c58:	f004 f8cc 	bl	800cdf4 <TimerStop>
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 8008c5c:	9904      	ldr	r1, [sp, #16]
 8008c5e:	0038      	movs	r0, r7
 8008c60:	f001 fb85 	bl	800a36e <LoRaMacClassBRxBeacon>
 8008c64:	4b83      	ldr	r3, [pc, #524]	; (8008e74 <LoRaMacProcess+0x368>)
 8008c66:	1e05      	subs	r5, r0, #0
 8008c68:	930a      	str	r3, [sp, #40]	; 0x28
 8008c6a:	4b83      	ldr	r3, [pc, #524]	; (8008e78 <LoRaMacProcess+0x36c>)
 8008c6c:	9602      	str	r6, [sp, #8]
 8008c6e:	930c      	str	r3, [sp, #48]	; 0x30
 8008c70:	4b82      	ldr	r3, [pc, #520]	; (8008e7c <LoRaMacProcess+0x370>)
 8008c72:	930d      	str	r3, [sp, #52]	; 0x34
 8008c74:	4b82      	ldr	r3, [pc, #520]	; (8008e80 <LoRaMacProcess+0x374>)
 8008c76:	9308      	str	r3, [sp, #32]
 8008c78:	4b82      	ldr	r3, [pc, #520]	; (8008e84 <LoRaMacProcess+0x378>)
 8008c7a:	930b      	str	r3, [sp, #44]	; 0x2c
 8008c7c:	4b82      	ldr	r3, [pc, #520]	; (8008e88 <LoRaMacProcess+0x37c>)
 8008c7e:	930e      	str	r3, [sp, #56]	; 0x38
 8008c80:	4b82      	ldr	r3, [pc, #520]	; (8008e8c <LoRaMacProcess+0x380>)
 8008c82:	9309      	str	r3, [sp, #36]	; 0x24
 8008c84:	4b82      	ldr	r3, [pc, #520]	; (8008e90 <LoRaMacProcess+0x384>)
 8008c86:	930f      	str	r3, [sp, #60]	; 0x3c
 8008c88:	d100      	bne.n	8008c8c <LoRaMacProcess+0x180>
 8008c8a:	e113      	b.n	8008eb4 <LoRaMacProcess+0x3a8>
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 8008c8c:	4b81      	ldr	r3, [pc, #516]	; (8008e94 <LoRaMacProcess+0x388>)
 8008c8e:	9a06      	ldr	r2, [sp, #24]
 8008c90:	52e2      	strh	r2, [r4, r3]
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 8008c92:	9a05      	ldr	r2, [sp, #20]
 8008c94:	3302      	adds	r3, #2
 8008c96:	54e2      	strb	r2, [r4, r3]
        if( events.Events.TxTimeout == 1 )
 8008c98:	9b03      	ldr	r3, [sp, #12]
 8008c9a:	075b      	lsls	r3, r3, #29
 8008c9c:	d51d      	bpl.n	8008cda <LoRaMacProcess+0x1ce>
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 8008c9e:	4c68      	ldr	r4, [pc, #416]	; (8008e40 <LoRaMacProcess+0x334>)
 8008ca0:	4b68      	ldr	r3, [pc, #416]	; (8008e44 <LoRaMacProcess+0x338>)
 8008ca2:	58e3      	ldr	r3, [r4, r3]
 8008ca4:	33f0      	adds	r3, #240	; 0xf0
 8008ca6:	781b      	ldrb	r3, [r3, #0]
 8008ca8:	2b02      	cmp	r3, #2
 8008caa:	d003      	beq.n	8008cb4 <LoRaMacProcess+0x1a8>
        Radio.Sleep( );
 8008cac:	4b66      	ldr	r3, [pc, #408]	; (8008e48 <LoRaMacProcess+0x33c>)
 8008cae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cb0:	9302      	str	r3, [sp, #8]
 8008cb2:	4798      	blx	r3
    UpdateRxSlotIdleState( );
 8008cb4:	f7fe fc50 	bl	8007558 <UpdateRxSlotIdleState>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 8008cb8:	2002      	movs	r0, #2
 8008cba:	4b6a      	ldr	r3, [pc, #424]	; (8008e64 <LoRaMacProcess+0x358>)
 8008cbc:	54e0      	strb	r0, [r4, r3]
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 8008cbe:	f001 fd33 	bl	800a728 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 8008cc2:	4b64      	ldr	r3, [pc, #400]	; (8008e54 <LoRaMacProcess+0x348>)
 8008cc4:	5ce3      	ldrb	r3, [r4, r3]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d002      	beq.n	8008cd0 <LoRaMacProcess+0x1c4>
        MacCtx.AckTimeoutRetry = true;
 8008cca:	2201      	movs	r2, #1
 8008ccc:	4b72      	ldr	r3, [pc, #456]	; (8008e98 <LoRaMacProcess+0x38c>)
 8008cce:	54e2      	strb	r2, [r4, r3]
    MacCtx.MacFlags.Bits.MacDone = 1;
 8008cd0:	2320      	movs	r3, #32
 8008cd2:	4a72      	ldr	r2, [pc, #456]	; (8008e9c <LoRaMacProcess+0x390>)
 8008cd4:	5ca1      	ldrb	r1, [r4, r2]
 8008cd6:	430b      	orrs	r3, r1
 8008cd8:	54a3      	strb	r3, [r4, r2]
        if( events.Events.RxError == 1 )
 8008cda:	9b03      	ldr	r3, [sp, #12]
 8008cdc:	079b      	lsls	r3, r3, #30
 8008cde:	d503      	bpl.n	8008ce8 <LoRaMacProcess+0x1dc>
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 8008ce0:	2106      	movs	r1, #6
 8008ce2:	2005      	movs	r0, #5
 8008ce4:	f7fe fd14 	bl	8007710 <HandleRadioRxErrorTimeout>
        if( events.Events.RxTimeout == 1 )
 8008ce8:	9b03      	ldr	r3, [sp, #12]
 8008cea:	07db      	lsls	r3, r3, #31
 8008cec:	d503      	bpl.n	8008cf6 <LoRaMacProcess+0x1ea>
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 8008cee:	2104      	movs	r1, #4
 8008cf0:	2003      	movs	r0, #3
 8008cf2:	f7fe fd0d 	bl	8007710 <HandleRadioRxErrorTimeout>
    LoRaMacClassBProcess( );
 8008cf6:	f001 fb57 	bl	800a3a8 <LoRaMacClassBProcess>
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 8008cfa:	4d68      	ldr	r5, [pc, #416]	; (8008e9c <LoRaMacProcess+0x390>)
 8008cfc:	4c50      	ldr	r4, [pc, #320]	; (8008e40 <LoRaMacProcess+0x334>)
 8008cfe:	5d62      	ldrb	r2, [r4, r5]
 8008d00:	0693      	lsls	r3, r2, #26
 8008d02:	d567      	bpl.n	8008dd4 <LoRaMacProcess+0x2c8>
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 8008d04:	21d0      	movs	r1, #208	; 0xd0
    MacCtx.AllowRequests = requestState;
 8008d06:	2300      	movs	r3, #0
 8008d08:	4865      	ldr	r0, [pc, #404]	; (8008ea0 <LoRaMacProcess+0x394>)
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 8008d0a:	0089      	lsls	r1, r1, #2
    MacCtx.AllowRequests = requestState;
 8008d0c:	5423      	strb	r3, [r4, r0]
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 8008d0e:	5863      	ldr	r3, [r4, r1]
 8008d10:	9002      	str	r0, [sp, #8]
 8008d12:	0618      	lsls	r0, r3, #24
 8008d14:	d502      	bpl.n	8008d1c <LoRaMacProcess+0x210>
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8008d16:	2082      	movs	r0, #130	; 0x82
 8008d18:	4383      	bics	r3, r0
 8008d1a:	5063      	str	r3, [r4, r1]

static uint8_t IsRequestPending( void )
{
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8008d1c:	2305      	movs	r3, #5
 8008d1e:	421a      	tst	r2, r3
 8008d20:	d100      	bne.n	8008d24 <LoRaMacProcess+0x218>
 8008d22:	e310      	b.n	8009346 <LoRaMacProcess+0x83a>
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8008d24:	200b      	movs	r0, #11
 8008d26:	f001 fd1b 	bl	800a760 <LoRaMacConfirmQueueIsCmdActive>
 8008d2a:	2800      	cmp	r0, #0
 8008d2c:	d100      	bne.n	8008d30 <LoRaMacProcess+0x224>
 8008d2e:	e30a      	b.n	8009346 <LoRaMacProcess+0x83a>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 8008d30:	5d63      	ldrb	r3, [r4, r5]
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8008d32:	07da      	lsls	r2, r3, #31
 8008d34:	d500      	bpl.n	8008d38 <LoRaMacProcess+0x22c>
 8008d36:	e306      	b.n	8009346 <LoRaMacProcess+0x83a>
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8008d38:	075b      	lsls	r3, r3, #29
 8008d3a:	d400      	bmi.n	8008d3e <LoRaMacProcess+0x232>
 8008d3c:	e303      	b.n	8009346 <LoRaMacProcess+0x83a>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8008d3e:	22d0      	movs	r2, #208	; 0xd0
 8008d40:	2302      	movs	r3, #2
 8008d42:	0092      	lsls	r2, r2, #2
 8008d44:	58a1      	ldr	r1, [r4, r2]
 8008d46:	4399      	bics	r1, r3
 8008d48:	50a1      	str	r1, [r4, r2]
    if( MacCtx.MacState == LORAMAC_IDLE )
 8008d4a:	23d0      	movs	r3, #208	; 0xd0
 8008d4c:	009b      	lsls	r3, r3, #2
 8008d4e:	58e3      	ldr	r3, [r4, r3]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d12b      	bne.n	8008dac <LoRaMacProcess+0x2a0>
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8008d54:	5d67      	ldrb	r7, [r4, r5]
 8008d56:	3301      	adds	r3, #1
 8008d58:	003a      	movs	r2, r7
 8008d5a:	401a      	ands	r2, r3
 8008d5c:	d002      	beq.n	8008d64 <LoRaMacProcess+0x258>
            MacCtx.MacFlags.Bits.McpsReq = 0;
 8008d5e:	0039      	movs	r1, r7
 8008d60:	4399      	bics	r1, r3
 8008d62:	5561      	strb	r1, [r4, r5]
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8008d64:	2104      	movs	r1, #4
 8008d66:	5d63      	ldrb	r3, [r4, r5]
 8008d68:	420b      	tst	r3, r1
 8008d6a:	d001      	beq.n	8008d70 <LoRaMacProcess+0x264>
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8008d6c:	438b      	bics	r3, r1
 8008d6e:	5563      	strb	r3, [r4, r5]
    MacCtx.AllowRequests = requestState;
 8008d70:	2301      	movs	r3, #1
 8008d72:	9902      	ldr	r1, [sp, #8]
 8008d74:	5463      	strb	r3, [r4, r1]
        if( reqEvents.Bits.McpsReq == 1 )
 8008d76:	2a00      	cmp	r2, #0
 8008d78:	d005      	beq.n	8008d86 <LoRaMacProcess+0x27a>
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 8008d7a:	23d1      	movs	r3, #209	; 0xd1
 8008d7c:	009b      	lsls	r3, r3, #2
 8008d7e:	58e3      	ldr	r3, [r4, r3]
 8008d80:	4848      	ldr	r0, [pc, #288]	; (8008ea4 <LoRaMacProcess+0x398>)
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	4798      	blx	r3
        if( reqEvents.Bits.MlmeReq == 1 )
 8008d86:	2604      	movs	r6, #4
 8008d88:	4237      	tst	r7, r6
 8008d8a:	d009      	beq.n	8008da0 <LoRaMacProcess+0x294>
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 8008d8c:	4846      	ldr	r0, [pc, #280]	; (8008ea8 <LoRaMacProcess+0x39c>)
 8008d8e:	f001 fcff 	bl	800a790 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 8008d92:	f001 fd29 	bl	800a7e8 <LoRaMacConfirmQueueGetCnt>
 8008d96:	2800      	cmp	r0, #0
 8008d98:	d002      	beq.n	8008da0 <LoRaMacProcess+0x294>
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 8008d9a:	5d63      	ldrb	r3, [r4, r5]
 8008d9c:	431e      	orrs	r6, r3
 8008d9e:	5566      	strb	r6, [r4, r5]
        LoRaMacClassBResumeBeaconing( );
 8008da0:	f001 faf1 	bl	800a386 <LoRaMacClassBResumeBeaconing>
        MacCtx.MacFlags.Bits.MacDone = 0;
 8008da4:	2220      	movs	r2, #32
 8008da6:	5d63      	ldrb	r3, [r4, r5]
 8008da8:	4393      	bics	r3, r2
 8008daa:	5563      	strb	r3, [r4, r5]
    if( MacCtx.MacState == LORAMAC_IDLE )
 8008dac:	23d0      	movs	r3, #208	; 0xd0
 8008dae:	009b      	lsls	r3, r3, #2
 8008db0:	58e3      	ldr	r3, [r4, r3]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d10b      	bne.n	8008dce <LoRaMacProcess+0x2c2>
        bool isStickyMacCommandPending = false;
 8008db6:	ae20      	add	r6, sp, #128	; 0x80
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 8008db8:	0030      	movs	r0, r6
        bool isStickyMacCommandPending = false;
 8008dba:	7033      	strb	r3, [r6, #0]
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 8008dbc:	f001 fc02 	bl	800a5c4 <LoRaMacCommandsStickyCmdsPending>
        if( isStickyMacCommandPending == true )
 8008dc0:	7833      	ldrb	r3, [r6, #0]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d003      	beq.n	8008dce <LoRaMacProcess+0x2c2>
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 8008dc6:	2310      	movs	r3, #16
 8008dc8:	5d62      	ldrb	r2, [r4, r5]
 8008dca:	4313      	orrs	r3, r2
 8008dcc:	5563      	strb	r3, [r4, r5]
    MacCtx.AllowRequests = requestState;
 8008dce:	2301      	movs	r3, #1
 8008dd0:	9a02      	ldr	r2, [sp, #8]
 8008dd2:	54a3      	strb	r3, [r4, r2]
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 8008dd4:	2208      	movs	r2, #8
 8008dd6:	5d63      	ldrb	r3, [r4, r5]
 8008dd8:	4213      	tst	r3, r2
 8008dda:	d007      	beq.n	8008dec <LoRaMacProcess+0x2e0>
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 8008ddc:	4393      	bics	r3, r2
 8008dde:	5563      	strb	r3, [r4, r5]
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication );
 8008de0:	23d1      	movs	r3, #209	; 0xd1
 8008de2:	009b      	lsls	r3, r3, #2
 8008de4:	58e3      	ldr	r3, [r4, r3]
 8008de6:	4831      	ldr	r0, [pc, #196]	; (8008eac <LoRaMacProcess+0x3a0>)
 8008de8:	68db      	ldr	r3, [r3, #12]
 8008dea:	4798      	blx	r3
    if( MacCtx.MacFlags.Bits.MlmeSchedUplinkInd == 1 )
 8008dec:	2610      	movs	r6, #16
 8008dee:	5d63      	ldrb	r3, [r4, r5]
 8008df0:	4233      	tst	r3, r6
 8008df2:	d00c      	beq.n	8008e0e <LoRaMacProcess+0x302>
        schduleUplinkIndication.MlmeIndication = MLME_SCHEDULE_UPLINK;
 8008df4:	2306      	movs	r3, #6
 8008df6:	a820      	add	r0, sp, #128	; 0x80
 8008df8:	7003      	strb	r3, [r0, #0]
        schduleUplinkIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	7043      	strb	r3, [r0, #1]
        MacCtx.MacPrimitives->MacMlmeIndication( &schduleUplinkIndication );
 8008dfe:	23d1      	movs	r3, #209	; 0xd1
 8008e00:	009b      	lsls	r3, r3, #2
 8008e02:	58e3      	ldr	r3, [r4, r3]
 8008e04:	68db      	ldr	r3, [r3, #12]
 8008e06:	4798      	blx	r3
        MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 0;
 8008e08:	5d63      	ldrb	r3, [r4, r5]
 8008e0a:	43b3      	bics	r3, r6
 8008e0c:	5563      	strb	r3, [r4, r5]
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8008e0e:	2202      	movs	r2, #2
 8008e10:	5d63      	ldrb	r3, [r4, r5]
 8008e12:	4213      	tst	r3, r2
 8008e14:	d007      	beq.n	8008e26 <LoRaMacProcess+0x31a>
        MacCtx.MacFlags.Bits.McpsInd = 0;
 8008e16:	4393      	bics	r3, r2
 8008e18:	5563      	strb	r3, [r4, r5]
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication );
 8008e1a:	23d1      	movs	r3, #209	; 0xd1
 8008e1c:	009b      	lsls	r3, r3, #2
 8008e1e:	58e3      	ldr	r3, [r4, r3]
 8008e20:	4823      	ldr	r0, [pc, #140]	; (8008eb0 <LoRaMacProcess+0x3a4>)
 8008e22:	685b      	ldr	r3, [r3, #4]
 8008e24:	4798      	blx	r3
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 8008e26:	2390      	movs	r3, #144	; 0x90
 8008e28:	00db      	lsls	r3, r3, #3
 8008e2a:	5ce3      	ldrb	r3, [r4, r3]
 8008e2c:	2b02      	cmp	r3, #2
 8008e2e:	d101      	bne.n	8008e34 <LoRaMacProcess+0x328>
        OpenContinuousRxCWindow( );
 8008e30:	f7fe fd50 	bl	80078d4 <OpenContinuousRxCWindow>
}
 8008e34:	b02d      	add	sp, #180	; 0xb4
 8008e36:	bdf0      	pop	{r4, r5, r6, r7, pc}
        txDone.Joined  = true;
 8008e38:	2201      	movs	r2, #1
 8008e3a:	e6c2      	b.n	8008bc2 <LoRaMacProcess+0xb6>
 8008e3c:	200007a0 	.word	0x200007a0
 8008e40:	20000980 	.word	0x20000980
 8008e44:	00000484 	.word	0x00000484
 8008e48:	0800f5a4 	.word	0x0800f5a4
 8008e4c:	20000d00 	.word	0x20000d00
 8008e50:	20000d18 	.word	0x20000d18
 8008e54:	00000414 	.word	0x00000414
 8008e58:	20000d78 	.word	0x20000d78
 8008e5c:	00000415 	.word	0x00000415
 8008e60:	2000165c 	.word	0x2000165c
 8008e64:	0000043d 	.word	0x0000043d
 8008e68:	20001660 	.word	0x20001660
 8008e6c:	0000042a 	.word	0x0000042a
 8008e70:	0000042c 	.word	0x0000042c
 8008e74:	0000042d 	.word	0x0000042d
 8008e78:	0000041e 	.word	0x0000041e
 8008e7c:	00000421 	.word	0x00000421
 8008e80:	00000424 	.word	0x00000424
 8008e84:	00000429 	.word	0x00000429
 8008e88:	0000042e 	.word	0x0000042e
 8008e8c:	0000041c 	.word	0x0000041c
 8008e90:	00000434 	.word	0x00000434
 8008e94:	00000476 	.word	0x00000476
 8008e98:	00000413 	.word	0x00000413
 8008e9c:	00000481 	.word	0x00000481
 8008ea0:	00000482 	.word	0x00000482
 8008ea4:	20000dbc 	.word	0x20000dbc
 8008ea8:	20000dd0 	.word	0x20000dd0
 8008eac:	20000de4 	.word	0x20000de4
 8008eb0:	20000d9c 	.word	0x20000d9c
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 8008eb4:	9b02      	ldr	r3, [sp, #8]
 8008eb6:	58e3      	ldr	r3, [r4, r3]
 8008eb8:	9306      	str	r3, [sp, #24]
 8008eba:	33f0      	adds	r3, #240	; 0xf0
 8008ebc:	781b      	ldrb	r3, [r3, #0]
 8008ebe:	2b01      	cmp	r3, #1
 8008ec0:	d10c      	bne.n	8008edc <LoRaMacProcess+0x3d0>
        if( LoRaMacClassBIsPingExpected( ) == true )
 8008ec2:	f001 fa58 	bl	800a376 <LoRaMacClassBIsPingExpected>
 8008ec6:	1e06      	subs	r6, r0, #0
 8008ec8:	d018      	beq.n	8008efc <LoRaMacProcess+0x3f0>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8008eca:	0028      	movs	r0, r5
 8008ecc:	f001 fa48 	bl	800a360 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 8008ed0:	0028      	movs	r0, r5
 8008ed2:	f001 fa4a 	bl	800a36a <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 8008ed6:	2304      	movs	r3, #4
            MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 8008ed8:	4abd      	ldr	r2, [pc, #756]	; (80091d0 <LoRaMacProcess+0x6c4>)
 8008eda:	54a3      	strb	r3, [r4, r2]
    macHdr.Value = payload[pktHeaderLen++];
 8008edc:	783b      	ldrb	r3, [r7, #0]
    switch( macHdr.Bits.MType )
 8008ede:	0958      	lsrs	r0, r3, #5
 8008ee0:	3801      	subs	r0, #1
    macHdr.Value = payload[pktHeaderLen++];
 8008ee2:	9306      	str	r3, [sp, #24]
    switch( macHdr.Bits.MType )
 8008ee4:	2806      	cmp	r0, #6
 8008ee6:	d900      	bls.n	8008eea <LoRaMacProcess+0x3de>
 8008ee8:	e21f      	b.n	800932a <LoRaMacProcess+0x81e>
 8008eea:	f7f7 f933 	bl	8000154 <__gnu_thumb1_case_uhi>
 8008eee:	0013      	.short	0x0013
 8008ef0:	009b021e 	.word	0x009b021e
 8008ef4:	0098021e 	.word	0x0098021e
 8008ef8:	020b021e 	.word	0x020b021e
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8008efc:	f001 fa3d 	bl	800a37a <LoRaMacClassBIsMulticastExpected>
 8008f00:	2800      	cmp	r0, #0
 8008f02:	d0eb      	beq.n	8008edc <LoRaMacProcess+0x3d0>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8008f04:	0030      	movs	r0, r6
 8008f06:	f001 fa2c 	bl	800a362 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8008f0a:	0030      	movs	r0, r6
 8008f0c:	f001 fa2e 	bl	800a36c <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 8008f10:	2305      	movs	r3, #5
 8008f12:	e7e1      	b.n	8008ed8 <LoRaMacProcess+0x3cc>
            macMsgJoinAccept.BufSize = size;
 8008f14:	466b      	mov	r3, sp
 8008f16:	7c1e      	ldrb	r6, [r3, #16]
            if( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE )
 8008f18:	9b02      	ldr	r3, [sp, #8]
            macMsgJoinAccept.Buffer = payload;
 8008f1a:	ad16      	add	r5, sp, #88	; 0x58
            if( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE )
 8008f1c:	58e3      	ldr	r3, [r4, r3]
            macMsgJoinAccept.Buffer = payload;
 8008f1e:	9716      	str	r7, [sp, #88]	; 0x58
            if( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE )
 8008f20:	9304      	str	r3, [sp, #16]
 8008f22:	23ea      	movs	r3, #234	; 0xea
 8008f24:	9a04      	ldr	r2, [sp, #16]
            macMsgJoinAccept.BufSize = size;
 8008f26:	712e      	strb	r6, [r5, #4]
            if( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE )
 8008f28:	005b      	lsls	r3, r3, #1
 8008f2a:	5cd7      	ldrb	r7, [r2, r3]
 8008f2c:	2f00      	cmp	r7, #0
 8008f2e:	d006      	beq.n	8008f3e <LoRaMacProcess+0x432>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008f30:	2101      	movs	r1, #1
 8008f32:	4aa8      	ldr	r2, [pc, #672]	; (80091d4 <LoRaMacProcess+0x6c8>)
 8008f34:	4ba8      	ldr	r3, [pc, #672]	; (80091d8 <LoRaMacProcess+0x6cc>)
 8008f36:	54d1      	strb	r1, [r2, r3]
                PrepareRxDoneAbort( );
 8008f38:	f7fe fbcc 	bl	80076d4 <PrepareRxDoneAbort>
 8008f3c:	e6ac      	b.n	8008c98 <LoRaMacProcess+0x18c>
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, SecureElementGetJoinEui( ), &macMsgJoinAccept );
 8008f3e:	f7fe faf1 	bl	8007524 <SecureElementGetJoinEui>
 8008f42:	002a      	movs	r2, r5
 8008f44:	0001      	movs	r1, r0
 8008f46:	20ff      	movs	r0, #255	; 0xff
 8008f48:	f001 ff84 	bl	800ae54 <LoRaMacCryptoHandleJoinAccept>
            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 8008f4c:	2800      	cmp	r0, #0
 8008f4e:	d15e      	bne.n	800900e <LoRaMacProcess+0x502>
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 8008f50:	7aaa      	ldrb	r2, [r5, #10]
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 8008f52:	7ae9      	ldrb	r1, [r5, #11]
                MacCtx.NvmCtx->NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 8008f54:	9b02      	ldr	r3, [sp, #8]
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 8008f56:	0409      	lsls	r1, r1, #16
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 8008f58:	0212      	lsls	r2, r2, #8
                MacCtx.NvmCtx->NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 8008f5a:	58e3      	ldr	r3, [r4, r3]
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 8008f5c:	430a      	orrs	r2, r1
                MacCtx.NvmCtx->NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 8008f5e:	7a69      	ldrb	r1, [r5, #9]
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 8008f60:	430a      	orrs	r2, r1
                MacCtx.NvmCtx->MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 8008f62:	0019      	movs	r1, r3
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 8008f64:	649a      	str	r2, [r3, #72]	; 0x48
                MacCtx.NvmCtx->DevAddr = macMsgJoinAccept.DevAddr;
 8008f66:	68ea      	ldr	r2, [r5, #12]
                MacCtx.NvmCtx->MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 8008f68:	31ff      	adds	r1, #255	; 0xff
                MacCtx.NvmCtx->DevAddr = macMsgJoinAccept.DevAddr;
 8008f6a:	64da      	str	r2, [r3, #76]	; 0x4c
                MacCtx.NvmCtx->MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 8008f6c:	7c2a      	ldrb	r2, [r5, #16]
 8008f6e:	0652      	lsls	r2, r2, #25
 8008f70:	0f52      	lsrs	r2, r2, #29
 8008f72:	768a      	strb	r2, [r1, #26]
                MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 8008f74:	2190      	movs	r1, #144	; 0x90
 8008f76:	7c2a      	ldrb	r2, [r5, #16]
 8008f78:	0049      	lsls	r1, r1, #1
 8008f7a:	0712      	lsls	r2, r2, #28
 8008f7c:	0f12      	lsrs	r2, r2, #28
 8008f7e:	545a      	strb	r2, [r3, r1]
                MacCtx.NvmCtx->MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 8008f80:	3108      	adds	r1, #8
 8008f82:	545a      	strb	r2, [r3, r1]
 8008f84:	0019      	movs	r1, r3
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 8008f86:	7c6a      	ldrb	r2, [r5, #17]
 8008f88:	31fc      	adds	r1, #252	; 0xfc
                if( MacCtx.NvmCtx->MacParams.ReceiveDelay1 == 0 )
 8008f8a:	2a00      	cmp	r2, #0
 8008f8c:	d03d      	beq.n	800900a <LoRaMacProcess+0x4fe>
                    MacCtx.NvmCtx->MacParams.ReceiveDelay1 = 1;
 8008f8e:	60ca      	str	r2, [r1, #12]
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 *= 1000;
 8008f90:	22fa      	movs	r2, #250	; 0xfa
 8008f92:	68c8      	ldr	r0, [r1, #12]
 8008f94:	0092      	lsls	r2, r2, #2
 8008f96:	4342      	muls	r2, r0
                MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + 1000;
 8008f98:	20fa      	movs	r0, #250	; 0xfa
 8008f9a:	0080      	lsls	r0, r0, #2
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 *= 1000;
 8008f9c:	60ca      	str	r2, [r1, #12]
                MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + 1000;
 8008f9e:	1812      	adds	r2, r2, r0
 8008fa0:	610a      	str	r2, [r1, #16]
                MacCtx.NvmCtx->Version.Fields.Minor = 0;
 8008fa2:	22e9      	movs	r2, #233	; 0xe9
 8008fa4:	2500      	movs	r5, #0
 8008fa6:	0052      	lsls	r2, r2, #1
 8008fa8:	549d      	strb	r5, [r3, r2]
                applyCFList.Payload = macMsgJoinAccept.CFList;
 8008faa:	a914      	add	r1, sp, #80	; 0x50
 8008fac:	3aa1      	subs	r2, #161	; 0xa1
                applyCFList.Size = size - 17;
 8008fae:	3e11      	subs	r6, #17
 8008fb0:	710e      	strb	r6, [r1, #4]
                applyCFList.Payload = macMsgJoinAccept.CFList;
 8008fb2:	a80e      	add	r0, sp, #56	; 0x38
 8008fb4:	3aff      	subs	r2, #255	; 0xff
 8008fb6:	1812      	adds	r2, r2, r0
                RegionApplyCFList( MacCtx.NvmCtx->Region, &applyCFList );
 8008fb8:	7818      	ldrb	r0, [r3, #0]
                applyCFList.Payload = macMsgJoinAccept.CFList;
 8008fba:	9214      	str	r2, [sp, #80]	; 0x50
                RegionApplyCFList( MacCtx.NvmCtx->Region, &applyCFList );
 8008fbc:	f002 f97e 	bl	800b2bc <RegionApplyCFList>
                MacCtx.NvmCtx->NetworkActivation = ACTIVATION_TYPE_OTAA;
 8008fc0:	9b02      	ldr	r3, [sp, #8]
 8008fc2:	2102      	movs	r1, #2
 8008fc4:	58e2      	ldr	r2, [r4, r3]
 8008fc6:	23ea      	movs	r3, #234	; 0xea
 8008fc8:	005b      	lsls	r3, r3, #1
 8008fca:	54d1      	strb	r1, [r2, r3]
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8008fcc:	0028      	movs	r0, r5
 8008fce:	f001 fbc7 	bl	800a760 <LoRaMacConfirmQueueIsCmdActive>
 8008fd2:	42a8      	cmp	r0, r5
 8008fd4:	d003      	beq.n	8008fde <LoRaMacProcess+0x4d2>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 8008fd6:	0029      	movs	r1, r5
 8008fd8:	0028      	movs	r0, r5
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 8008fda:	f001 fb6b 	bl	800a6b4 <LoRaMacConfirmQueueSetStatus>
    if( MacCtx.NodeAckRequested == true )
 8008fde:	4c7d      	ldr	r4, [pc, #500]	; (80091d4 <LoRaMacProcess+0x6c8>)
 8008fe0:	4b7e      	ldr	r3, [pc, #504]	; (80091dc <LoRaMacProcess+0x6d0>)
 8008fe2:	5ce3      	ldrb	r3, [r4, r3]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d100      	bne.n	8008fea <LoRaMacProcess+0x4de>
 8008fe8:	e1a5      	b.n	8009336 <LoRaMacProcess+0x82a>
        if( MacCtx.McpsConfirm.AckReceived == true )
 8008fea:	2388      	movs	r3, #136	; 0x88
 8008fec:	00db      	lsls	r3, r3, #3
 8008fee:	5ce3      	ldrb	r3, [r4, r3]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d002      	beq.n	8008ffa <LoRaMacProcess+0x4ee>
            OnAckTimeoutTimerEvent( NULL );
 8008ff4:	2000      	movs	r0, #0
 8008ff6:	f7fe fb3f 	bl	8007678 <OnAckTimeoutTimerEvent>
    MacCtx.MacFlags.Bits.MacDone = 1;
 8008ffa:	2320      	movs	r3, #32
 8008ffc:	4a78      	ldr	r2, [pc, #480]	; (80091e0 <LoRaMacProcess+0x6d4>)
 8008ffe:	5ca1      	ldrb	r1, [r4, r2]
 8009000:	430b      	orrs	r3, r1
 8009002:	54a3      	strb	r3, [r4, r2]
    UpdateRxSlotIdleState( );
 8009004:	f7fe faa8 	bl	8007558 <UpdateRxSlotIdleState>
 8009008:	e646      	b.n	8008c98 <LoRaMacProcess+0x18c>
                    MacCtx.NvmCtx->MacParams.ReceiveDelay1 = 1;
 800900a:	2201      	movs	r2, #1
 800900c:	e7bf      	b.n	8008f8e <LoRaMacProcess+0x482>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800900e:	0038      	movs	r0, r7
 8009010:	f001 fba6 	bl	800a760 <LoRaMacConfirmQueueIsCmdActive>
 8009014:	2800      	cmp	r0, #0
 8009016:	d0e2      	beq.n	8008fde <LoRaMacProcess+0x4d2>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 8009018:	0039      	movs	r1, r7
 800901a:	2007      	movs	r0, #7
 800901c:	e7dd      	b.n	8008fda <LoRaMacProcess+0x4ce>
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800901e:	2301      	movs	r3, #1
 8009020:	4a70      	ldr	r2, [pc, #448]	; (80091e4 <LoRaMacProcess+0x6d8>)
 8009022:	54a3      	strb	r3, [r4, r2]
            getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8009024:	222e      	movs	r2, #46	; 0x2e
 8009026:	4e6b      	ldr	r6, [pc, #428]	; (80091d4 <LoRaMacProcess+0x6c8>)
 8009028:	9b02      	ldr	r3, [sp, #8]
 800902a:	32ff      	adds	r2, #255	; 0xff
 800902c:	58f3      	ldr	r3, [r6, r3]
 800902e:	a911      	add	r1, sp, #68	; 0x44
 8009030:	5c9a      	ldrb	r2, [r3, r2]
 8009032:	708a      	strb	r2, [r1, #2]
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 8009034:	2284      	movs	r2, #132	; 0x84
 8009036:	00d2      	lsls	r2, r2, #3
 8009038:	5cb2      	ldrb	r2, [r6, r2]
 800903a:	704a      	strb	r2, [r1, #1]
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 800903c:	220d      	movs	r2, #13
 800903e:	700a      	strb	r2, [r1, #0]
            if( MacCtx.NvmCtx->RepeaterSupport == true )
 8009040:	2240      	movs	r2, #64	; 0x40
 8009042:	32ff      	adds	r2, #255	; 0xff
 8009044:	5c9a      	ldrb	r2, [r3, r2]
 8009046:	2a00      	cmp	r2, #0
 8009048:	d001      	beq.n	800904e <LoRaMacProcess+0x542>
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800904a:	220e      	movs	r2, #14
 800904c:	700a      	strb	r2, [r1, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800904e:	7818      	ldrb	r0, [r3, #0]
 8009050:	f002 f906 	bl	800b260 <RegionGetPhyParam>
            if( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORA_MAC_FRMPAYLOAD_OVERHEAD ) ) > ( int16_t )phyParam.Value )
 8009054:	9a04      	ldr	r2, [sp, #16]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009056:	9012      	str	r0, [sp, #72]	; 0x48
            if( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORA_MAC_FRMPAYLOAD_OVERHEAD ) ) > ( int16_t )phyParam.Value )
 8009058:	3a0d      	subs	r2, #13
 800905a:	1c13      	adds	r3, r2, #0
 800905c:	0412      	lsls	r2, r2, #16
 800905e:	d500      	bpl.n	8009062 <LoRaMacProcess+0x556>
 8009060:	2300      	movs	r3, #0
 8009062:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009064:	b21b      	sxth	r3, r3
 8009066:	b212      	sxth	r2, r2
 8009068:	4293      	cmp	r3, r2
 800906a:	dd00      	ble.n	800906e <LoRaMacProcess+0x562>
 800906c:	e760      	b.n	8008f30 <LoRaMacProcess+0x424>
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800906e:	22ff      	movs	r2, #255	; 0xff
            macMsgData.BufSize = size;
 8009070:	9b04      	ldr	r3, [sp, #16]
            macMsgData.Buffer = payload;
 8009072:	ad20      	add	r5, sp, #128	; 0x80
            macMsgData.BufSize = size;
 8009074:	712b      	strb	r3, [r5, #4]
            macMsgData.FRMPayload = MacCtx.RxPayload;
 8009076:	4b5c      	ldr	r3, [pc, #368]	; (80091e8 <LoRaMacProcess+0x6dc>)
            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 8009078:	0028      	movs	r0, r5
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800907a:	9329      	str	r3, [sp, #164]	; 0xa4
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800907c:	ab2a      	add	r3, sp, #168	; 0xa8
            macMsgData.Buffer = payload;
 800907e:	9720      	str	r7, [sp, #128]	; 0x80
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 8009080:	701a      	strb	r2, [r3, #0]
            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 8009082:	f001 ffeb 	bl	800b05c <LoRaMacParserData>
 8009086:	2800      	cmp	r0, #0
 8009088:	d000      	beq.n	800908c <LoRaMacProcess+0x580>
 800908a:	e751      	b.n	8008f30 <LoRaMacProcess+0x424>
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 800908c:	4b57      	ldr	r3, [pc, #348]	; (80091ec <LoRaMacProcess+0x6e0>)
 800908e:	68aa      	ldr	r2, [r5, #8]
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 8009090:	a914      	add	r1, sp, #80	; 0x50
 8009092:	0028      	movs	r0, r5
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 8009094:	50f2      	str	r2, [r6, r3]
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 8009096:	f7ff fd11 	bl	8008abc <DetermineFrameType>
 800909a:	2800      	cmp	r0, #0
 800909c:	d000      	beq.n	80090a0 <LoRaMacProcess+0x594>
 800909e:	e747      	b.n	8008f30 <LoRaMacProcess+0x424>
                if( ( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 80090a0:	9b02      	ldr	r3, [sp, #8]
 80090a2:	0004      	movs	r4, r0
 80090a4:	58f3      	ldr	r3, [r6, r3]
 80090a6:	68a9      	ldr	r1, [r5, #8]
 80090a8:	001a      	movs	r2, r3
            downLinkCounter = 0;
 80090aa:	9013      	str	r0, [sp, #76]	; 0x4c
 80090ac:	3251      	adds	r2, #81	; 0x51
                if( ( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 80090ae:	1cd0      	adds	r0, r2, #3
 80090b0:	6800      	ldr	r0, [r0, #0]
 80090b2:	9004      	str	r0, [sp, #16]
 80090b4:	4288      	cmp	r0, r1
 80090b6:	d12f      	bne.n	8009118 <LoRaMacProcess+0x60c>
 80090b8:	7810      	ldrb	r0, [r2, #0]
 80090ba:	2800      	cmp	r0, #0
 80090bc:	d02c      	beq.n	8009118 <LoRaMacProcess+0x60c>
                    addrID = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.GroupID;
 80090be:	2028      	movs	r0, #40	; 0x28
 80090c0:	4360      	muls	r0, r4
 80090c2:	1818      	adds	r0, r3, r0
 80090c4:	0002      	movs	r2, r0
 80090c6:	3252      	adds	r2, #82	; 0x52
 80090c8:	7814      	ldrb	r4, [r2, #0]
                    downLinkCounter = *( MacCtx.NvmCtx->MulticastChannelList[i].DownLinkCounter );
 80090ca:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
                    multicast = 1;
 80090cc:	2101      	movs	r1, #1
                    downLinkCounter = *( MacCtx.NvmCtx->MulticastChannelList[i].DownLinkCounter );
 80090ce:	6812      	ldr	r2, [r2, #0]
 80090d0:	9213      	str	r2, [sp, #76]	; 0x4c
                    if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 80090d2:	001a      	movs	r2, r3
 80090d4:	32f0      	adds	r2, #240	; 0xf0
 80090d6:	7812      	ldrb	r2, [r2, #0]
                    multicast = 1;
 80090d8:	9107      	str	r1, [sp, #28]
                    if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 80090da:	2a02      	cmp	r2, #2
 80090dc:	d103      	bne.n	80090e6 <LoRaMacProcess+0x5da>
                        MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 80090de:	4a3d      	ldr	r2, [pc, #244]	; (80091d4 <LoRaMacProcess+0x6c8>)
 80090e0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80090e2:	3102      	adds	r1, #2
 80090e4:	5411      	strb	r1, [r2, r0]
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 80090e6:	2215      	movs	r2, #21
 80090e8:	a911      	add	r1, sp, #68	; 0x44
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80090ea:	7818      	ldrb	r0, [r3, #0]
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 80090ec:	700a      	strb	r2, [r1, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80090ee:	f002 f8b7 	bl	800b260 <RegionGetPhyParam>
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, MacCtx.NvmCtx->Version, phyParam.Value, &fCntID, &downLinkCounter );
 80090f2:	4a38      	ldr	r2, [pc, #224]	; (80091d4 <LoRaMacProcess+0x6c8>)
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80090f4:	9012      	str	r0, [sp, #72]	; 0x48
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, MacCtx.NvmCtx->Version, phyParam.Value, &fCntID, &downLinkCounter );
 80090f6:	b281      	uxth	r1, r0
 80090f8:	9802      	ldr	r0, [sp, #8]
 80090fa:	ab14      	add	r3, sp, #80	; 0x50
 80090fc:	5810      	ldr	r0, [r2, r0]
 80090fe:	22e9      	movs	r2, #233	; 0xe9
 8009100:	0052      	lsls	r2, r2, #1
 8009102:	781b      	ldrb	r3, [r3, #0]
 8009104:	5c82      	ldrb	r2, [r0, r2]
 8009106:	4e34      	ldr	r6, [pc, #208]	; (80091d8 <LoRaMacProcess+0x6cc>)
    switch( addrID )
 8009108:	2c04      	cmp	r4, #4
 800910a:	d84d      	bhi.n	80091a8 <LoRaMacProcess+0x69c>
 800910c:	0020      	movs	r0, r4
 800910e:	f7f7 f80d 	bl	800012c <__gnu_thumb1_case_uqi>
 8009112:	460c      	.short	0x460c
 8009114:	4442      	.short	0x4442
 8009116:	37          	.byte	0x37
 8009117:	00          	.byte	0x00
 8009118:	3401      	adds	r4, #1
 800911a:	3228      	adds	r2, #40	; 0x28
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800911c:	2c04      	cmp	r4, #4
 800911e:	d1c6      	bne.n	80090ae <LoRaMacProcess+0x5a2>
    uint32_t address = MacCtx.NvmCtx->DevAddr;
 8009120:	9a07      	ldr	r2, [sp, #28]
 8009122:	9204      	str	r2, [sp, #16]
            multicast = 0;
 8009124:	2200      	movs	r2, #0
 8009126:	9207      	str	r2, [sp, #28]
 8009128:	e7dd      	b.n	80090e6 <LoRaMacProcess+0x5da>
            *fCntID = MC_FCNT_DOWN_0;
 800912a:	2504      	movs	r5, #4
    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
 800912c:	af20      	add	r7, sp, #128	; 0x80
 800912e:	89fa      	ldrh	r2, [r7, #14]
 8009130:	ab13      	add	r3, sp, #76	; 0x4c
 8009132:	0028      	movs	r0, r5
 8009134:	f001 fcea 	bl	800ab0c <LoRaMacCryptoGetFCntDown>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8009138:	2800      	cmp	r0, #0
 800913a:	d039      	beq.n	80091b0 <LoRaMacProcess+0x6a4>
 800913c:	4b25      	ldr	r3, [pc, #148]	; (80091d4 <LoRaMacProcess+0x6c8>)
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 800913e:	2807      	cmp	r0, #7
 8009140:	d12f      	bne.n	80091a2 <LoRaMacProcess+0x696>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 8009142:	2208      	movs	r2, #8
 8009144:	559a      	strb	r2, [r3, r6]
                    if( ( MacCtx.NvmCtx->Version.Fields.Minor == 0 ) && ( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN ) && ( MacCtx.NvmCtx->LastRxMic == macMsgData.MIC ) )
 8009146:	9a02      	ldr	r2, [sp, #8]
 8009148:	589b      	ldr	r3, [r3, r2]
 800914a:	22e9      	movs	r2, #233	; 0xe9
 800914c:	0052      	lsls	r2, r2, #1
 800914e:	5c9a      	ldrb	r2, [r3, r2]
 8009150:	2a00      	cmp	r2, #0
 8009152:	d10f      	bne.n	8009174 <LoRaMacProcess+0x668>
 8009154:	9906      	ldr	r1, [sp, #24]
 8009156:	321f      	adds	r2, #31
 8009158:	4391      	bics	r1, r2
 800915a:	000a      	movs	r2, r1
 800915c:	29a0      	cmp	r1, #160	; 0xa0
 800915e:	d109      	bne.n	8009174 <LoRaMacProcess+0x668>
 8009160:	3239      	adds	r2, #57	; 0x39
 8009162:	32ff      	adds	r2, #255	; 0xff
 8009164:	5899      	ldr	r1, [r3, r2]
 8009166:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009168:	4291      	cmp	r1, r2
 800916a:	d103      	bne.n	8009174 <LoRaMacProcess+0x668>
                        MacCtx.NvmCtx->SrvAckRequested = true;
 800916c:	22e0      	movs	r2, #224	; 0xe0
 800916e:	2101      	movs	r1, #1
 8009170:	0052      	lsls	r2, r2, #1
 8009172:	5499      	strb	r1, [r3, r2]
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 8009174:	2386      	movs	r3, #134	; 0x86
 8009176:	4a17      	ldr	r2, [pc, #92]	; (80091d4 <LoRaMacProcess+0x6c8>)
 8009178:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800917a:	00db      	lsls	r3, r3, #3
 800917c:	50d1      	str	r1, [r2, r3]
 800917e:	e6db      	b.n	8008f38 <LoRaMacProcess+0x42c>
                *fCntID = FCNT_DOWN;
 8009180:	2503      	movs	r5, #3
            if( lrWanVersion.Fields.Minor == 1 )
 8009182:	2a01      	cmp	r2, #1
 8009184:	d1d2      	bne.n	800912c <LoRaMacProcess+0x620>
                    *fCntID = A_FCNT_DOWN;
 8009186:	3d01      	subs	r5, #1
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 8009188:	2b00      	cmp	r3, #0
 800918a:	d0cf      	beq.n	800912c <LoRaMacProcess+0x620>
                    *fCntID = A_FCNT_DOWN;
 800918c:	3b03      	subs	r3, #3
 800918e:	425d      	negs	r5, r3
 8009190:	415d      	adcs	r5, r3
 8009192:	3501      	adds	r5, #1
 8009194:	e7ca      	b.n	800912c <LoRaMacProcess+0x620>
            *fCntID = MC_FCNT_DOWN_2;
 8009196:	2506      	movs	r5, #6
 8009198:	e7c8      	b.n	800912c <LoRaMacProcess+0x620>
            *fCntID = MC_FCNT_DOWN_3;
 800919a:	2507      	movs	r5, #7
 800919c:	e7c6      	b.n	800912c <LoRaMacProcess+0x620>
            *fCntID = MC_FCNT_DOWN_1;
 800919e:	2505      	movs	r5, #5
 80091a0:	e7c4      	b.n	800912c <LoRaMacProcess+0x620>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
 80091a2:	220a      	movs	r2, #10
                else if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT )
 80091a4:	2808      	cmp	r0, #8
 80091a6:	d001      	beq.n	80091ac <LoRaMacProcess+0x6a0>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80091a8:	2201      	movs	r2, #1
 80091aa:	4b0a      	ldr	r3, [pc, #40]	; (80091d4 <LoRaMacProcess+0x6c8>)
 80091ac:	559a      	strb	r2, [r3, r6]
 80091ae:	e7e1      	b.n	8009174 <LoRaMacProcess+0x668>
            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 80091b0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80091b2:	9700      	str	r7, [sp, #0]
 80091b4:	002a      	movs	r2, r5
 80091b6:	9904      	ldr	r1, [sp, #16]
 80091b8:	0020      	movs	r0, r4
 80091ba:	f001 fd8d 	bl	800acd8 <LoRaMacCryptoUnsecureMessage>
 80091be:	4b05      	ldr	r3, [pc, #20]	; (80091d4 <LoRaMacProcess+0x6c8>)
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 80091c0:	2800      	cmp	r0, #0
 80091c2:	d015      	beq.n	80091f0 <LoRaMacProcess+0x6e4>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 80091c4:	220b      	movs	r2, #11
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 80091c6:	2802      	cmp	r0, #2
 80091c8:	d000      	beq.n	80091cc <LoRaMacProcess+0x6c0>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 80091ca:	220c      	movs	r2, #12
 80091cc:	559a      	strb	r2, [r3, r6]
 80091ce:	e6b3      	b.n	8008f38 <LoRaMacProcess+0x42c>
 80091d0:	0000042d 	.word	0x0000042d
 80091d4:	20000980 	.word	0x20000980
 80091d8:	0000041d 	.word	0x0000041d
 80091dc:	00000414 	.word	0x00000414
 80091e0:	00000481 	.word	0x00000481
 80091e4:	0000041c 	.word	0x0000041c
 80091e8:	20000bb8 	.word	0x20000bb8
 80091ec:	00000434 	.word	0x00000434
            MacCtx.McpsIndication.Multicast = multicast;
 80091f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80091f2:	9907      	ldr	r1, [sp, #28]
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 80091f4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
            MacCtx.McpsIndication.Multicast = multicast;
 80091f6:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 80091f8:	7b3a      	ldrb	r2, [r7, #12]
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 80091fa:	5598      	strb	r0, [r3, r6]
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 80091fc:	06d1      	lsls	r1, r2, #27
 80091fe:	0fc9      	lsrs	r1, r1, #31
 8009200:	5519      	strb	r1, [r3, r4]
            MacCtx.McpsIndication.Buffer = NULL;
 8009202:	9908      	ldr	r1, [sp, #32]
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 8009204:	9c13      	ldr	r4, [sp, #76]	; 0x4c
            MacCtx.McpsIndication.Buffer = NULL;
 8009206:	5058      	str	r0, [r3, r1]
            MacCtx.McpsIndication.BufferSize = 0;
 8009208:	2185      	movs	r1, #133	; 0x85
 800920a:	00c9      	lsls	r1, r1, #3
 800920c:	5458      	strb	r0, [r3, r1]
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800920e:	3108      	adds	r1, #8
 8009210:	505c      	str	r4, [r3, r1]
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 8009212:	0692      	lsls	r2, r2, #26
 8009214:	990e      	ldr	r1, [sp, #56]	; 0x38
 8009216:	0fd2      	lsrs	r2, r2, #31
 8009218:	545a      	strb	r2, [r3, r1]
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800921a:	499e      	ldr	r1, [pc, #632]	; (8009494 <LoRaMacProcess+0x988>)
 800921c:	5458      	strb	r0, [r3, r1]
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800921e:	3103      	adds	r1, #3
 8009220:	545a      	strb	r2, [r3, r1]
            if( ( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 ) ||
 8009222:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009224:	5c9a      	ldrb	r2, [r3, r2]
 8009226:	2a01      	cmp	r2, #1
 8009228:	d803      	bhi.n	8009232 <LoRaMacProcess+0x726>
                MacCtx.NvmCtx->AdrAckCounter = 0;
 800922a:	9902      	ldr	r1, [sp, #8]
 800922c:	585b      	ldr	r3, [r3, r1]
 800922e:	33f4      	adds	r3, #244	; 0xf4
 8009230:	6018      	str	r0, [r3, #0]
            if( multicast == 1 )
 8009232:	9b07      	ldr	r3, [sp, #28]
 8009234:	4c98      	ldr	r4, [pc, #608]	; (8009498 <LoRaMacProcess+0x98c>)
 8009236:	ad20      	add	r5, sp, #128	; 0x80
 8009238:	2b01      	cmp	r3, #1
 800923a:	d119      	bne.n	8009270 <LoRaMacProcess+0x764>
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 800923c:	3301      	adds	r3, #1
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800923e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009240:	5463      	strb	r3, [r4, r1]
            RemoveMacCommands( MacCtx.McpsIndication.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 8009242:	4b96      	ldr	r3, [pc, #600]	; (800949c <LoRaMacProcess+0x990>)
 8009244:	5ce1      	ldrb	r1, [r4, r3]
 8009246:	7b2b      	ldrb	r3, [r5, #12]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 8009248:	2a01      	cmp	r2, #1
 800924a:	d805      	bhi.n	8009258 <LoRaMacProcess+0x74c>
        if( request == MCPS_CONFIRMED )
 800924c:	2901      	cmp	r1, #1
 800924e:	d101      	bne.n	8009254 <LoRaMacProcess+0x748>
            if( fCtrl.Bits.Ack == 1 )
 8009250:	069b      	lsls	r3, r3, #26
 8009252:	d501      	bpl.n	8009258 <LoRaMacProcess+0x74c>
                LoRaMacCommandsRemoveStickyAnsCmds( );
 8009254:	f001 f968 	bl	800a528 <LoRaMacCommandsRemoveStickyAnsCmds>
            switch( fType )
 8009258:	ab14      	add	r3, sp, #80	; 0x50
 800925a:	7818      	ldrb	r0, [r3, #0]
 800925c:	2803      	cmp	r0, #3
 800925e:	d84c      	bhi.n	80092fa <LoRaMacProcess+0x7ee>
 8009260:	2749      	movs	r7, #73	; 0x49
 8009262:	ab0e      	add	r3, sp, #56	; 0x38
 8009264:	18ff      	adds	r7, r7, r3
 8009266:	4e8e      	ldr	r6, [pc, #568]	; (80094a0 <LoRaMacProcess+0x994>)
 8009268:	f7f6 ff60 	bl	800012c <__gnu_thumb1_case_uqi>
 800926c:	2342331c 	.word	0x2342331c
 8009270:	9b02      	ldr	r3, [sp, #8]
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 8009272:	9806      	ldr	r0, [sp, #24]
 8009274:	58e1      	ldr	r1, [r4, r3]
 8009276:	231f      	movs	r3, #31
 8009278:	4398      	bics	r0, r3
 800927a:	0003      	movs	r3, r0
 800927c:	20e0      	movs	r0, #224	; 0xe0
 800927e:	0040      	lsls	r0, r0, #1
 8009280:	2ba0      	cmp	r3, #160	; 0xa0
 8009282:	d10c      	bne.n	800929e <LoRaMacProcess+0x792>
                    MacCtx.NvmCtx->SrvAckRequested = true;
 8009284:	3b9f      	subs	r3, #159	; 0x9f
 8009286:	540b      	strb	r3, [r1, r0]
                    if( MacCtx.NvmCtx->Version.Fields.Minor == 0 )
 8009288:	33d2      	adds	r3, #210	; 0xd2
 800928a:	33ff      	adds	r3, #255	; 0xff
 800928c:	5ccb      	ldrb	r3, [r1, r3]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d103      	bne.n	800929a <LoRaMacProcess+0x78e>
                        MacCtx.NvmCtx->LastRxMic = macMsgData.MIC;
 8009292:	33d9      	adds	r3, #217	; 0xd9
 8009294:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8009296:	33ff      	adds	r3, #255	; 0xff
 8009298:	50c8      	str	r0, [r1, r3]
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800929a:	2301      	movs	r3, #1
 800929c:	e7cf      	b.n	800923e <LoRaMacProcess+0x732>
                    MacCtx.NvmCtx->SrvAckRequested = false;
 800929e:	2300      	movs	r3, #0
 80092a0:	540b      	strb	r3, [r1, r0]
 80092a2:	e7cc      	b.n	800923e <LoRaMacProcess+0x732>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.McpsIndication.RxSlot );
 80092a4:	7b29      	ldrb	r1, [r5, #12]
 80092a6:	9a05      	ldr	r2, [sp, #20]
 80092a8:	0709      	lsls	r1, r1, #28
 80092aa:	0f09      	lsrs	r1, r1, #28
 80092ac:	a824      	add	r0, sp, #144	; 0x90
 80092ae:	f7fe fd23 	bl	8007cf8 <ProcessMacCommands.isra.1.constprop.7>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 80092b2:	7ffb      	ldrb	r3, [r7, #31]
 80092b4:	55a3      	strb	r3, [r4, r6]
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 80092b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80092b8:	9304      	str	r3, [sp, #16]
 80092ba:	9a04      	ldr	r2, [sp, #16]
 80092bc:	9b08      	ldr	r3, [sp, #32]
 80092be:	50e2      	str	r2, [r4, r3]
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 80092c0:	ab2a      	add	r3, sp, #168	; 0xa8
 80092c2:	781a      	ldrb	r2, [r3, #0]
 80092c4:	2385      	movs	r3, #133	; 0x85
 80092c6:	00db      	lsls	r3, r3, #3
 80092c8:	54e2      	strb	r2, [r4, r3]
                    MacCtx.McpsIndication.RxData = true;
 80092ca:	2301      	movs	r3, #1
 80092cc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80092ce:	54a3      	strb	r3, [r4, r2]
 80092d0:	e008      	b.n	80092e4 <LoRaMacProcess+0x7d8>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.McpsIndication.RxSlot );
 80092d2:	7b29      	ldrb	r1, [r5, #12]
 80092d4:	9a05      	ldr	r2, [sp, #20]
 80092d6:	0709      	lsls	r1, r1, #28
 80092d8:	0f09      	lsrs	r1, r1, #28
 80092da:	a824      	add	r0, sp, #144	; 0x90
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.McpsIndication.RxSlot );
 80092dc:	f7fe fd0c 	bl	8007cf8 <ProcessMacCommands.isra.1.constprop.7>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 80092e0:	7ffb      	ldrb	r3, [r7, #31]
 80092e2:	55a3      	strb	r3, [r4, r6]
            MacCtx.MacFlags.Bits.McpsInd = 1;
 80092e4:	2302      	movs	r3, #2
 80092e6:	4a6f      	ldr	r2, [pc, #444]	; (80094a4 <LoRaMacProcess+0x998>)
 80092e8:	5ca1      	ldrb	r1, [r4, r2]
 80092ea:	430b      	orrs	r3, r1
 80092ec:	54a3      	strb	r3, [r4, r2]
 80092ee:	e676      	b.n	8008fde <LoRaMacProcess+0x4d2>
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.McpsIndication.RxSlot );
 80092f0:	ab2a      	add	r3, sp, #168	; 0xa8
 80092f2:	7819      	ldrb	r1, [r3, #0]
 80092f4:	9a05      	ldr	r2, [sp, #20]
 80092f6:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80092f8:	e7f0      	b.n	80092dc <LoRaMacProcess+0x7d0>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80092fa:	2301      	movs	r3, #1
 80092fc:	55a3      	strb	r3, [r4, r6]
                    PrepareRxDoneAbort( );
 80092fe:	f7fe f9e9 	bl	80076d4 <PrepareRxDoneAbort>
 8009302:	e7ef      	b.n	80092e4 <LoRaMacProcess+0x7d8>
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 8009304:	9e04      	ldr	r6, [sp, #16]
 8009306:	4d68      	ldr	r5, [pc, #416]	; (80094a8 <LoRaMacProcess+0x99c>)
 8009308:	3e01      	subs	r6, #1
 800930a:	b2b2      	uxth	r2, r6
 800930c:	1c79      	adds	r1, r7, #1
 800930e:	0028      	movs	r0, r5
 8009310:	f003 fe69 	bl	800cfe6 <memcpy1>
            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 8009314:	2303      	movs	r3, #3
 8009316:	4a65      	ldr	r2, [pc, #404]	; (80094ac <LoRaMacProcess+0x9a0>)
 8009318:	54a3      	strb	r3, [r4, r2]
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800931a:	2200      	movs	r2, #0
 800931c:	4b64      	ldr	r3, [pc, #400]	; (80094b0 <LoRaMacProcess+0x9a4>)
 800931e:	54e2      	strb	r2, [r4, r3]
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 8009320:	4b64      	ldr	r3, [pc, #400]	; (80094b4 <LoRaMacProcess+0x9a8>)
 8009322:	50e5      	str	r5, [r4, r3]
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 8009324:	3304      	adds	r3, #4
 8009326:	54e6      	strb	r6, [r4, r3]
 8009328:	e7dc      	b.n	80092e4 <LoRaMacProcess+0x7d8>
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800932a:	2201      	movs	r2, #1
 800932c:	4b60      	ldr	r3, [pc, #384]	; (80094b0 <LoRaMacProcess+0x9a4>)
 800932e:	54e2      	strb	r2, [r4, r3]
            PrepareRxDoneAbort( );
 8009330:	f7fe f9d0 	bl	80076d4 <PrepareRxDoneAbort>
 8009334:	e653      	b.n	8008fde <LoRaMacProcess+0x4d2>
        if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 8009336:	9b02      	ldr	r3, [sp, #8]
 8009338:	58e3      	ldr	r3, [r4, r3]
 800933a:	33f0      	adds	r3, #240	; 0xf0
 800933c:	781b      	ldrb	r3, [r3, #0]
 800933e:	2b02      	cmp	r3, #2
 8009340:	d000      	beq.n	8009344 <LoRaMacProcess+0x838>
 8009342:	e65a      	b.n	8008ffa <LoRaMacProcess+0x4ee>
 8009344:	e656      	b.n	8008ff4 <LoRaMacProcess+0x4e8>
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8009346:	2704      	movs	r7, #4
 8009348:	5d63      	ldrb	r3, [r4, r5]
 800934a:	423b      	tst	r3, r7
 800934c:	d012      	beq.n	8009374 <LoRaMacProcess+0x868>
        if( ( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true ) )
 800934e:	2000      	movs	r0, #0
 8009350:	26d0      	movs	r6, #208	; 0xd0
 8009352:	f001 fa05 	bl	800a760 <LoRaMacConfirmQueueIsCmdActive>
 8009356:	00b6      	lsls	r6, r6, #2
 8009358:	2800      	cmp	r0, #0
 800935a:	d035      	beq.n	80093c8 <LoRaMacProcess+0x8bc>
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 800935c:	2000      	movs	r0, #0
 800935e:	f001 f9c5 	bl	800a6ec <LoRaMacConfirmQueueGetStatus>
 8009362:	2800      	cmp	r0, #0
 8009364:	d102      	bne.n	800936c <LoRaMacProcess+0x860>
                MacCtx.ChannelsNbTransCounter = 0;
 8009366:	2382      	movs	r3, #130	; 0x82
 8009368:	00db      	lsls	r3, r3, #3
 800936a:	54e0      	strb	r0, [r4, r3]
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800936c:	2302      	movs	r3, #2
 800936e:	59a2      	ldr	r2, [r4, r6]
 8009370:	439a      	bics	r2, r3
 8009372:	51a2      	str	r2, [r4, r6]
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8009374:	5d61      	ldrb	r1, [r4, r5]
 8009376:	07cb      	lsls	r3, r1, #31
 8009378:	d400      	bmi.n	800937c <LoRaMacProcess+0x870>
 800937a:	e4e6      	b.n	8008d4a <LoRaMacProcess+0x23e>
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800937c:	4b47      	ldr	r3, [pc, #284]	; (800949c <LoRaMacProcess+0x990>)
 800937e:	5ce3      	ldrb	r3, [r4, r3]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d001      	beq.n	8009388 <LoRaMacProcess+0x87c>
 8009384:	2b03      	cmp	r3, #3
 8009386:	d12a      	bne.n	80093de <LoRaMacProcess+0x8d2>
        MacCtx.NvmCtx->MacParams.ChannelsNbTrans )
 8009388:	4b4b      	ldr	r3, [pc, #300]	; (80094b8 <LoRaMacProcess+0x9ac>)
    if( MacCtx.ChannelsNbTransCounter >=
 800938a:	2082      	movs	r0, #130	; 0x82
        MacCtx.NvmCtx->MacParams.ChannelsNbTrans )
 800938c:	58e3      	ldr	r3, [r4, r3]
    if( MacCtx.ChannelsNbTransCounter >=
 800938e:	00c0      	lsls	r0, r0, #3
        MacCtx.NvmCtx->MacParams.ChannelsNbTrans )
 8009390:	001a      	movs	r2, r3
 8009392:	32ff      	adds	r2, #255	; 0xff
    if( MacCtx.ChannelsNbTransCounter >=
 8009394:	5c20      	ldrb	r0, [r4, r0]
 8009396:	7e52      	ldrb	r2, [r2, #25]
 8009398:	4290      	cmp	r0, r2
 800939a:	d209      	bcs.n	80093b0 <LoRaMacProcess+0x8a4>
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800939c:	078a      	lsls	r2, r1, #30
 800939e:	d555      	bpl.n	800944c <LoRaMacProcess+0x940>
        if( MacCtx.NvmCtx->DeviceClass == CLASS_A )
 80093a0:	33f0      	adds	r3, #240	; 0xf0
 80093a2:	781b      	ldrb	r3, [r3, #0]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d003      	beq.n	80093b0 <LoRaMacProcess+0x8a4>
            if( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 )
 80093a8:	4b44      	ldr	r3, [pc, #272]	; (80094bc <LoRaMacProcess+0x9b0>)
 80093aa:	5ce3      	ldrb	r3, [r4, r3]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d14d      	bne.n	800944c <LoRaMacProcess+0x940>
            TimerStop( &MacCtx.TxDelayedTimer );
 80093b0:	4843      	ldr	r0, [pc, #268]	; (80094c0 <LoRaMacProcess+0x9b4>)
 80093b2:	f003 fd1f 	bl	800cdf4 <TimerStop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 80093b6:	22d0      	movs	r2, #208	; 0xd0
 80093b8:	2320      	movs	r3, #32
 80093ba:	0092      	lsls	r2, r2, #2
 80093bc:	58a1      	ldr	r1, [r4, r2]
 80093be:	4399      	bics	r1, r3
 80093c0:	50a1      	str	r1, [r4, r2]
            StopRetransmission( );
 80093c2:	f7fe f8d9 	bl	8007578 <StopRetransmission>
 80093c6:	e4c0      	b.n	8008d4a <LoRaMacProcess+0x23e>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 80093c8:	0038      	movs	r0, r7
 80093ca:	f001 f9c9 	bl	800a760 <LoRaMacConfirmQueueIsCmdActive>
 80093ce:	2800      	cmp	r0, #0
 80093d0:	d1cc      	bne.n	800936c <LoRaMacProcess+0x860>
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
 80093d2:	2005      	movs	r0, #5
 80093d4:	f001 f9c4 	bl	800a760 <LoRaMacConfirmQueueIsCmdActive>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 80093d8:	2800      	cmp	r0, #0
 80093da:	d1c7      	bne.n	800936c <LoRaMacProcess+0x860>
 80093dc:	e7ca      	b.n	8009374 <LoRaMacProcess+0x868>
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 80093de:	2b01      	cmp	r3, #1
 80093e0:	d134      	bne.n	800944c <LoRaMacProcess+0x940>
            if( MacCtx.AckTimeoutRetry == true )
 80093e2:	4b38      	ldr	r3, [pc, #224]	; (80094c4 <LoRaMacProcess+0x9b8>)
 80093e4:	5ce2      	ldrb	r2, [r4, r3]
 80093e6:	2a00      	cmp	r2, #0
 80093e8:	d100      	bne.n	80093ec <LoRaMacProcess+0x8e0>
 80093ea:	e4ae      	b.n	8008d4a <LoRaMacProcess+0x23e>
    if( MacCtx.AckTimeoutRetriesCounter >=
 80093ec:	4836      	ldr	r0, [pc, #216]	; (80094c8 <LoRaMacProcess+0x9bc>)
        MacCtx.AckTimeoutRetries )
 80093ee:	4e37      	ldr	r6, [pc, #220]	; (80094cc <LoRaMacProcess+0x9c0>)
    if( MacCtx.AckTimeoutRetriesCounter >=
 80093f0:	5c23      	ldrb	r3, [r4, r0]
        MacCtx.AckTimeoutRetries )
 80093f2:	5da7      	ldrb	r7, [r4, r6]
 80093f4:	9003      	str	r0, [sp, #12]
    if( MacCtx.AckTimeoutRetriesCounter >=
 80093f6:	42bb      	cmp	r3, r7
 80093f8:	d205      	bcs.n	8009406 <LoRaMacProcess+0x8fa>
    return false;
 80093fa:	2200      	movs	r2, #0
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 80093fc:	0789      	lsls	r1, r1, #30
 80093fe:	d502      	bpl.n	8009406 <LoRaMacProcess+0x8fa>
        if( MacCtx.McpsConfirm.AckReceived == true )
 8009400:	2288      	movs	r2, #136	; 0x88
 8009402:	00d2      	lsls	r2, r2, #3
 8009404:	5ca2      	ldrb	r2, [r4, r2]
                if( MacCtx.NvmCtx->Version.Fields.Minor == 0 )
 8009406:	21e9      	movs	r1, #233	; 0xe9
 8009408:	4e2b      	ldr	r6, [pc, #172]	; (80094b8 <LoRaMacProcess+0x9ac>)
 800940a:	0049      	lsls	r1, r1, #1
 800940c:	59a0      	ldr	r0, [r4, r6]
 800940e:	5c41      	ldrb	r1, [r0, r1]
 8009410:	2900      	cmp	r1, #0
 8009412:	d13b      	bne.n	800948c <LoRaMacProcess+0x980>
                    if( stopRetransmission == false )
 8009414:	2a00      	cmp	r2, #0
 8009416:	d123      	bne.n	8009460 <LoRaMacProcess+0x954>
    if( MacCtx.AckTimeoutRetriesCounter < MacCtx.AckTimeoutRetries )
 8009418:	42bb      	cmp	r3, r7
 800941a:	d217      	bcs.n	800944c <LoRaMacProcess+0x940>
        MacCtx.AckTimeoutRetriesCounter++;
 800941c:	3301      	adds	r3, #1
 800941e:	9a03      	ldr	r2, [sp, #12]
 8009420:	b2db      	uxtb	r3, r3
 8009422:	54a3      	strb	r3, [r4, r2]
        if( ( MacCtx.AckTimeoutRetriesCounter % 2 ) == 1 )
 8009424:	07db      	lsls	r3, r3, #31
 8009426:	d511      	bpl.n	800944c <LoRaMacProcess+0x940>
            getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8009428:	2322      	movs	r3, #34	; 0x22
 800942a:	a916      	add	r1, sp, #88	; 0x58
 800942c:	700b      	strb	r3, [r1, #0]
            getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800942e:	330b      	adds	r3, #11
 8009430:	33ff      	adds	r3, #255	; 0xff
 8009432:	5cc3      	ldrb	r3, [r0, r3]
 8009434:	708b      	strb	r3, [r1, #2]
            getPhy.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8009436:	0003      	movs	r3, r0
 8009438:	33f9      	adds	r3, #249	; 0xf9
 800943a:	781b      	ldrb	r3, [r3, #0]
 800943c:	704b      	strb	r3, [r1, #1]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800943e:	7800      	ldrb	r0, [r0, #0]
 8009440:	f001 ff0e 	bl	800b260 <RegionGetPhyParam>
            MacCtx.NvmCtx->MacParams.ChannelsDatarate = phyParam.Value;
 8009444:	59a3      	ldr	r3, [r4, r6]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009446:	9020      	str	r0, [sp, #128]	; 0x80
            MacCtx.NvmCtx->MacParams.ChannelsDatarate = phyParam.Value;
 8009448:	33f9      	adds	r3, #249	; 0xf9
 800944a:	7018      	strb	r0, [r3, #0]
            MacCtx.MacFlags.Bits.MacDone = 0;
 800944c:	2220      	movs	r2, #32
            MacCtx.AckTimeoutRetry = false;
 800944e:	2000      	movs	r0, #0
            MacCtx.MacFlags.Bits.MacDone = 0;
 8009450:	5d63      	ldrb	r3, [r4, r5]
 8009452:	4393      	bics	r3, r2
 8009454:	5563      	strb	r3, [r4, r5]
            MacCtx.AckTimeoutRetry = false;
 8009456:	4b1b      	ldr	r3, [pc, #108]	; (80094c4 <LoRaMacProcess+0x9b8>)
 8009458:	54e0      	strb	r0, [r4, r3]
            OnTxDelayedTimerEvent( NULL );
 800945a:	f7ff f973 	bl	8008744 <OnTxDelayedTimerEvent>
 800945e:	e474      	b.n	8008d4a <LoRaMacProcess+0x23e>
    if( MacCtx.McpsConfirm.AckReceived == false )
 8009460:	2788      	movs	r7, #136	; 0x88
 8009462:	00ff      	lsls	r7, r7, #3
 8009464:	5de6      	ldrb	r6, [r4, r7]
 8009466:	2e00      	cmp	r6, #0
 8009468:	d10b      	bne.n	8009482 <LoRaMacProcess+0x976>
        params.Type = INIT_TYPE_RESTORE_DEFAULT_CHANNELS;
 800946a:	2301      	movs	r3, #1
 800946c:	a920      	add	r1, sp, #128	; 0x80
 800946e:	710b      	strb	r3, [r1, #4]
        params.NvmCtx = Contexts.RegionNvmCtx;
 8009470:	4b17      	ldr	r3, [pc, #92]	; (80094d0 <LoRaMacProcess+0x9c4>)
        RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 8009472:	7800      	ldrb	r0, [r0, #0]
        params.NvmCtx = Contexts.RegionNvmCtx;
 8009474:	689b      	ldr	r3, [r3, #8]
 8009476:	9320      	str	r3, [sp, #128]	; 0x80
        RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 8009478:	f001 ff05 	bl	800b286 <RegionInitDefaults>
        MacCtx.NodeAckRequested = false;
 800947c:	4b15      	ldr	r3, [pc, #84]	; (80094d4 <LoRaMacProcess+0x9c8>)
        MacCtx.McpsConfirm.AckReceived = false;
 800947e:	55e6      	strb	r6, [r4, r7]
        MacCtx.NodeAckRequested = false;
 8009480:	54e6      	strb	r6, [r4, r3]
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 8009482:	9b03      	ldr	r3, [sp, #12]
 8009484:	5ce2      	ldrb	r2, [r4, r3]
 8009486:	4b14      	ldr	r3, [pc, #80]	; (80094d8 <LoRaMacProcess+0x9cc>)
 8009488:	54e2      	strb	r2, [r4, r3]
 800948a:	e791      	b.n	80093b0 <LoRaMacProcess+0x8a4>
        if( stopRetransmission == true )
 800948c:	2a00      	cmp	r2, #0
 800948e:	d0dd      	beq.n	800944c <LoRaMacProcess+0x940>
 8009490:	e78e      	b.n	80093b0 <LoRaMacProcess+0x8a4>
 8009492:	46c0      	nop			; (mov r8, r8)
 8009494:	0000043d 	.word	0x0000043d
 8009498:	20000980 	.word	0x20000980
 800949c:	0000043c 	.word	0x0000043c
 80094a0:	0000041f 	.word	0x0000041f
 80094a4:	00000481 	.word	0x00000481
 80094a8:	20000bb8 	.word	0x20000bb8
 80094ac:	0000041c 	.word	0x0000041c
 80094b0:	0000041d 	.word	0x0000041d
 80094b4:	00000424 	.word	0x00000424
 80094b8:	00000484 	.word	0x00000484
 80094bc:	0000042d 	.word	0x0000042d
 80094c0:	20000ce8 	.word	0x20000ce8
 80094c4:	00000413 	.word	0x00000413
 80094c8:	00000412 	.word	0x00000412
 80094cc:	00000411 	.word	0x00000411
 80094d0:	20001670 	.word	0x20001670
 80094d4:	00000414 	.word	0x00000414
 80094d8:	00000441 	.word	0x00000441

080094dc <LoRaMacInitialization>:
    return 0;
}


LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 80094dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80094de:	b091      	sub	sp, #68	; 0x44
 80094e0:	0007      	movs	r7, r0
 80094e2:	9100      	str	r1, [sp, #0]
 80094e4:	9201      	str	r2, [sp, #4]
    LoRaMacClassBParams_t classBParams;

    if( ( primitives == NULL ) ||
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80094e6:	2303      	movs	r3, #3
    if( ( primitives == NULL ) ||
 80094e8:	2800      	cmp	r0, #0
 80094ea:	d100      	bne.n	80094ee <LoRaMacInitialization+0x12>
 80094ec:	e15b      	b.n	80097a6 <LoRaMacInitialization+0x2ca>
 80094ee:	2900      	cmp	r1, #0
 80094f0:	d100      	bne.n	80094f4 <LoRaMacInitialization+0x18>
 80094f2:	e158      	b.n	80097a6 <LoRaMacInitialization+0x2ca>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 80094f4:	6802      	ldr	r2, [r0, #0]
 80094f6:	2a00      	cmp	r2, #0
 80094f8:	d100      	bne.n	80094fc <LoRaMacInitialization+0x20>
 80094fa:	e154      	b.n	80097a6 <LoRaMacInitialization+0x2ca>
 80094fc:	6842      	ldr	r2, [r0, #4]
 80094fe:	2a00      	cmp	r2, #0
 8009500:	d100      	bne.n	8009504 <LoRaMacInitialization+0x28>
 8009502:	e150      	b.n	80097a6 <LoRaMacInitialization+0x2ca>
        ( primitives->MacMcpsIndication == NULL ) ||
 8009504:	6882      	ldr	r2, [r0, #8]
 8009506:	2a00      	cmp	r2, #0
 8009508:	d100      	bne.n	800950c <LoRaMacInitialization+0x30>
 800950a:	e14c      	b.n	80097a6 <LoRaMacInitialization+0x2ca>
        ( primitives->MacMlmeConfirm == NULL ) ||
 800950c:	68c2      	ldr	r2, [r0, #12]
 800950e:	2a00      	cmp	r2, #0
 8009510:	d100      	bne.n	8009514 <LoRaMacInitialization+0x38>
 8009512:	e148      	b.n	80097a6 <LoRaMacInitialization+0x2ca>
        ( primitives->MacMlmeIndication == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 8009514:	9801      	ldr	r0, [sp, #4]
 8009516:	f001 fea0 	bl	800b25a <RegionIsActive>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 800951a:	2309      	movs	r3, #9
    if( RegionIsActive( region ) == false )
 800951c:	2800      	cmp	r0, #0
 800951e:	d100      	bne.n	8009522 <LoRaMacInitialization+0x46>
 8009520:	e141      	b.n	80097a6 <LoRaMacInitialization+0x2ca>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives, EventConfirmQueueNvmCtxChanged );
 8009522:	0038      	movs	r0, r7
 8009524:	49c2      	ldr	r1, [pc, #776]	; (8009830 <LoRaMacInitialization+0x354>)
 8009526:	f001 f863 	bl	800a5f0 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &NvmMacCtx, 0x00, sizeof( LoRaMacNvmCtx_t ) );
 800952a:	22ee      	movs	r2, #238	; 0xee
 800952c:	4ec1      	ldr	r6, [pc, #772]	; (8009834 <LoRaMacInitialization+0x358>)
 800952e:	0052      	lsls	r2, r2, #1
 8009530:	0030      	movs	r0, r6
 8009532:	2100      	movs	r1, #0
 8009534:	f003 fd6c 	bl	800d010 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 8009538:	2291      	movs	r2, #145	; 0x91
 800953a:	4cbf      	ldr	r4, [pc, #764]	; (8009838 <LoRaMacInitialization+0x35c>)
 800953c:	00d2      	lsls	r2, r2, #3
 800953e:	2100      	movs	r1, #0
 8009540:	0020      	movs	r0, r4
 8009542:	f003 fd65 	bl	800d010 <memset1>
    MacCtx.NvmCtx = &NvmMacCtx;

    // Set non zero variables to its default value
    MacCtx.AckTimeoutRetriesCounter = 1;
 8009546:	2001      	movs	r0, #1
 8009548:	4bbc      	ldr	r3, [pc, #752]	; (800983c <LoRaMacInitialization+0x360>)
    MacCtx.AckTimeoutRetries = 1;
    MacCtx.NvmCtx->Region = region;
    MacCtx.NvmCtx->DeviceClass = CLASS_A;
 800954a:	2200      	movs	r2, #0
    MacCtx.AckTimeoutRetriesCounter = 1;
 800954c:	54e0      	strb	r0, [r4, r3]
    MacCtx.AckTimeoutRetries = 1;
 800954e:	4bbc      	ldr	r3, [pc, #752]	; (8009840 <LoRaMacInitialization+0x364>)
    MacCtx.NvmCtx = &NvmMacCtx;
 8009550:	4dbc      	ldr	r5, [pc, #752]	; (8009844 <LoRaMacInitialization+0x368>)
    MacCtx.AckTimeoutRetries = 1;
 8009552:	54e0      	strb	r0, [r4, r3]
    MacCtx.NvmCtx->Region = region;
 8009554:	9b01      	ldr	r3, [sp, #4]
    lrWanVersion.Fields.Revision = 3;
    lrWanVersion.Fields.Rfu      = 0;
    MacCtx.NvmCtx->Version = lrWanVersion;

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8009556:	a902      	add	r1, sp, #8
    MacCtx.NvmCtx->Region = region;
 8009558:	7033      	strb	r3, [r6, #0]
    MacCtx.NvmCtx->DeviceClass = CLASS_A;
 800955a:	0033      	movs	r3, r6
 800955c:	33f0      	adds	r3, #240	; 0xf0
 800955e:	701a      	strb	r2, [r3, #0]
    MacCtx.NvmCtx->RepeaterSupport = false;
 8009560:	2340      	movs	r3, #64	; 0x40
 8009562:	33ff      	adds	r3, #255	; 0xff
 8009564:	54f2      	strb	r2, [r6, r3]
    MacCtx.NvmCtx->Version = lrWanVersion;
 8009566:	4ab8      	ldr	r2, [pc, #736]	; (8009848 <LoRaMacInitialization+0x36c>)
 8009568:	3391      	adds	r3, #145	; 0x91
 800956a:	50f2      	str	r2, [r6, r3]
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800956c:	3bc2      	subs	r3, #194	; 0xc2
 800956e:	3bff      	subs	r3, #255	; 0xff
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009570:	9801      	ldr	r0, [sp, #4]
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8009572:	700b      	strb	r3, [r1, #0]
    MacCtx.NvmCtx = &NvmMacCtx;
 8009574:	5166      	str	r6, [r4, r5]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009576:	f001 fe73 	bl	800b260 <RegionGetPhyParam>
 800957a:	9003      	str	r0, [sp, #12]
    MacCtx.NvmCtx->DutyCycleOn = ( bool ) phyParam.Value;
 800957c:	1e42      	subs	r2, r0, #1
 800957e:	4190      	sbcs	r0, r2
 8009580:	223e      	movs	r2, #62	; 0x3e
 8009582:	5963      	ldr	r3, [r4, r5]
 8009584:	32ff      	adds	r2, #255	; 0xff
 8009586:	5498      	strb	r0, [r3, r2]

    getPhy.Attribute = PHY_DEF_TX_POWER;
 8009588:	3a34      	subs	r2, #52	; 0x34
 800958a:	3aff      	subs	r2, #255	; 0xff
 800958c:	a902      	add	r1, sp, #8
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800958e:	7818      	ldrb	r0, [r3, #0]
    getPhy.Attribute = PHY_DEF_TX_POWER;
 8009590:	700a      	strb	r2, [r1, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009592:	f001 fe65 	bl	800b260 <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower = phyParam.Value;

    getPhy.Attribute = PHY_DEF_TX_DR;
 8009596:	2106      	movs	r1, #6
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower = phyParam.Value;
 8009598:	5963      	ldr	r3, [r4, r5]
    getPhy.Attribute = PHY_DEF_TX_DR;
 800959a:	ae02      	add	r6, sp, #8
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower = phyParam.Value;
 800959c:	7118      	strb	r0, [r3, #4]
    getPhy.Attribute = PHY_DEF_TX_DR;
 800959e:	7031      	strb	r1, [r6, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80095a0:	9003      	str	r0, [sp, #12]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80095a2:	0031      	movs	r1, r6
 80095a4:	7818      	ldrb	r0, [r3, #0]
 80095a6:	f001 fe5b 	bl	800b260 <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate = phyParam.Value;

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 80095aa:	2210      	movs	r2, #16
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate = phyParam.Value;
 80095ac:	5963      	ldr	r3, [r4, r5]
    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 80095ae:	ae02      	add	r6, sp, #8
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate = phyParam.Value;
 80095b0:	7158      	strb	r0, [r3, #5]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80095b2:	0031      	movs	r1, r6
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80095b4:	9003      	str	r0, [sp, #12]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80095b6:	7818      	ldrb	r0, [r3, #0]
    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 80095b8:	7032      	strb	r2, [r6, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80095ba:	f001 fe51 	bl	800b260 <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.MaxRxWindow = phyParam.Value;

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 80095be:	2211      	movs	r2, #17
    MacCtx.NvmCtx->MacParamsDefaults.MaxRxWindow = phyParam.Value;
 80095c0:	5963      	ldr	r3, [r4, r5]
    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 80095c2:	ae02      	add	r6, sp, #8
    MacCtx.NvmCtx->MacParamsDefaults.MaxRxWindow = phyParam.Value;
 80095c4:	6118      	str	r0, [r3, #16]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80095c6:	0031      	movs	r1, r6
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80095c8:	9003      	str	r0, [sp, #12]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80095ca:	7818      	ldrb	r0, [r3, #0]
    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 80095cc:	7032      	strb	r2, [r6, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80095ce:	f001 fe47 	bl	800b260 <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay1 = phyParam.Value;

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 80095d2:	2212      	movs	r2, #18
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 80095d4:	5963      	ldr	r3, [r4, r5]
    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 80095d6:	ae02      	add	r6, sp, #8
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 80095d8:	6158      	str	r0, [r3, #20]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80095da:	0031      	movs	r1, r6
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80095dc:	9003      	str	r0, [sp, #12]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80095de:	7818      	ldrb	r0, [r3, #0]
    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 80095e0:	7032      	strb	r2, [r6, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80095e2:	f001 fe3d 	bl	800b260 <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay2 = phyParam.Value;

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 80095e6:	2213      	movs	r2, #19
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 80095e8:	5963      	ldr	r3, [r4, r5]
    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 80095ea:	ae02      	add	r6, sp, #8
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 80095ec:	6198      	str	r0, [r3, #24]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80095ee:	0031      	movs	r1, r6
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80095f0:	9003      	str	r0, [sp, #12]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80095f2:	7818      	ldrb	r0, [r3, #0]
    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 80095f4:	7032      	strb	r2, [r6, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80095f6:	f001 fe33 	bl	800b260 <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 80095fa:	2614      	movs	r6, #20
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 80095fc:	5963      	ldr	r3, [r4, r5]
    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 80095fe:	aa02      	add	r2, sp, #8
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 8009600:	61d8      	str	r0, [r3, #28]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009602:	0011      	movs	r1, r2
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009604:	9003      	str	r0, [sp, #12]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009606:	7818      	ldrb	r0, [r3, #0]
    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 8009608:	7016      	strb	r6, [r2, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800960a:	f001 fe29 	bl	800b260 <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 800960e:	2217      	movs	r2, #23
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 8009610:	5963      	ldr	r3, [r4, r5]
    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 8009612:	a902      	add	r1, sp, #8
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 8009614:	6218      	str	r0, [r3, #32]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009616:	9003      	str	r0, [sp, #12]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009618:	7818      	ldrb	r0, [r3, #0]
    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 800961a:	700a      	strb	r2, [r1, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800961c:	f001 fe20 	bl	800b260 <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 8009620:	5963      	ldr	r3, [r4, r5]

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 8009622:	a902      	add	r1, sp, #8
    MacCtx.NvmCtx->MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 8009624:	1d9a      	adds	r2, r3, #6
 8009626:	77d0      	strb	r0, [r2, #31]
    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 8009628:	2218      	movs	r2, #24
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800962a:	9003      	str	r0, [sp, #12]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800962c:	7818      	ldrb	r0, [r3, #0]
    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 800962e:	700a      	strb	r2, [r1, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009630:	f001 fe16 	bl	800b260 <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
    MacCtx.NvmCtx->MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;

    getPhy.Attribute = PHY_DEF_RX2_DR;
 8009634:	2219      	movs	r2, #25
    MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 8009636:	5963      	ldr	r3, [r4, r5]
    getPhy.Attribute = PHY_DEF_RX2_DR;
 8009638:	a902      	add	r1, sp, #8
    MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 800963a:	6298      	str	r0, [r3, #40]	; 0x28
    MacCtx.NvmCtx->MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 800963c:	6318      	str	r0, [r3, #48]	; 0x30
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800963e:	9003      	str	r0, [sp, #12]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009640:	7818      	ldrb	r0, [r3, #0]
    getPhy.Attribute = PHY_DEF_RX2_DR;
 8009642:	700a      	strb	r2, [r1, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009644:	f001 fe0c 	bl	800b260 <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 8009648:	5963      	ldr	r3, [r4, r5]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800964a:	9003      	str	r0, [sp, #12]
    MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 800964c:	001a      	movs	r2, r3
 800964e:	b2c0      	uxtb	r0, r0
 8009650:	322c      	adds	r2, #44	; 0x2c
 8009652:	7010      	strb	r0, [r2, #0]
    MacCtx.NvmCtx->MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 8009654:	7210      	strb	r0, [r2, #8]

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 8009656:	221e      	movs	r2, #30
 8009658:	a902      	add	r1, sp, #8
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800965a:	7818      	ldrb	r0, [r3, #0]
    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 800965c:	700a      	strb	r2, [r1, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800965e:	f001 fdff 	bl	800b260 <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 8009662:	5963      	ldr	r3, [r4, r5]

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 8009664:	a902      	add	r1, sp, #8
    MacCtx.NvmCtx->MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 8009666:	001a      	movs	r2, r3
 8009668:	3238      	adds	r2, #56	; 0x38
 800966a:	7010      	strb	r0, [r2, #0]
    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 800966c:	221f      	movs	r2, #31
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800966e:	9003      	str	r0, [sp, #12]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009670:	7818      	ldrb	r0, [r3, #0]
    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 8009672:	700a      	strb	r2, [r1, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009674:	f001 fdf4 	bl	800b260 <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 8009678:	5963      	ldr	r3, [r4, r5]

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 800967a:	a902      	add	r1, sp, #8
    MacCtx.NvmCtx->MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 800967c:	001a      	movs	r2, r3
 800967e:	3239      	adds	r2, #57	; 0x39
 8009680:	7010      	strb	r0, [r2, #0]
    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 8009682:	2220      	movs	r2, #32
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009684:	9003      	str	r0, [sp, #12]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009686:	7818      	ldrb	r0, [r3, #0]
    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 8009688:	700a      	strb	r2, [r1, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800968a:	f001 fde9 	bl	800b260 <RegionGetPhyParam>
 800968e:	9003      	str	r0, [sp, #12]
    MacCtx.NvmCtx->MacParamsDefaults.MaxEirp = phyParam.fValue;
 8009690:	5963      	ldr	r3, [r4, r5]
 8009692:	9a03      	ldr	r2, [sp, #12]

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 8009694:	a902      	add	r1, sp, #8
    MacCtx.NvmCtx->MacParamsDefaults.MaxEirp = phyParam.fValue;
 8009696:	63da      	str	r2, [r3, #60]	; 0x3c
    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 8009698:	2221      	movs	r2, #33	; 0x21
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800969a:	7818      	ldrb	r0, [r3, #0]
    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 800969c:	700a      	strb	r2, [r1, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800969e:	f001 fddf 	bl	800b260 <RegionGetPhyParam>
 80096a2:	9003      	str	r0, [sp, #12]
    MacCtx.NvmCtx->MacParamsDefaults.AntennaGain = phyParam.fValue;
 80096a4:	5963      	ldr	r3, [r4, r5]
 80096a6:	9a03      	ldr	r2, [sp, #12]

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 80096a8:	a902      	add	r1, sp, #8
    MacCtx.NvmCtx->MacParamsDefaults.AntennaGain = phyParam.fValue;
 80096aa:	641a      	str	r2, [r3, #64]	; 0x40
    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 80096ac:	220b      	movs	r2, #11
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80096ae:	7818      	ldrb	r0, [r3, #0]
    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 80096b0:	700a      	strb	r2, [r1, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80096b2:	f001 fdd5 	bl	800b260 <RegionGetPhyParam>
    MacCtx.AdrAckLimit = phyParam.Value;
 80096b6:	23fd      	movs	r3, #253	; 0xfd
 80096b8:	009b      	lsls	r3, r3, #2
 80096ba:	52e0      	strh	r0, [r4, r3]

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 80096bc:	230c      	movs	r3, #12
 80096be:	aa02      	add	r2, sp, #8
 80096c0:	7013      	strb	r3, [r2, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80096c2:	5963      	ldr	r3, [r4, r5]
 80096c4:	0011      	movs	r1, r2
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80096c6:	9003      	str	r0, [sp, #12]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80096c8:	7818      	ldrb	r0, [r3, #0]
 80096ca:	f001 fdc9 	bl	800b260 <RegionGetPhyParam>
    MacCtx.AdrAckDelay = phyParam.Value;
 80096ce:	4b5f      	ldr	r3, [pc, #380]	; (800984c <LoRaMacInitialization+0x370>)
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80096d0:	9003      	str	r0, [sp, #12]
    MacCtx.AdrAckDelay = phyParam.Value;
 80096d2:	52e0      	strh	r0, [r4, r3]

    // Init parameters which are not set in function ResetMacParameters
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsNbTrans = 1;
    MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError = 20;
    MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols = 6;
 80096d4:	2106      	movs	r1, #6
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsNbTrans = 1;
 80096d6:	2001      	movs	r0, #1
 80096d8:	5963      	ldr	r3, [r4, r5]
 80096da:	1d5a      	adds	r2, r3, #5
 80096dc:	77d0      	strb	r0, [r2, #31]
    MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols = 6;
 80096de:	7319      	strb	r1, [r3, #12]

    MacCtx.NvmCtx->MacParams.SystemMaxRxError = MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError;
    MacCtx.NvmCtx->MacParams.MinRxSymbols = MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols;
 80096e0:	0019      	movs	r1, r3
    MacCtx.NvmCtx->MacParams.SystemMaxRxError = MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError;
 80096e2:	32f7      	adds	r2, #247	; 0xf7
    MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError = 20;
 80096e4:	609e      	str	r6, [r3, #8]
    MacCtx.NvmCtx->MacParams.MinRxSymbols = MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols;
 80096e6:	31ff      	adds	r1, #255	; 0xff
    MacCtx.NvmCtx->MacParams.SystemMaxRxError = MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError;
 80096e8:	6016      	str	r6, [r2, #0]
    MacCtx.NvmCtx->MacParams.MinRxSymbols = MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols;
 80096ea:	3e0e      	subs	r6, #14
 80096ec:	704e      	strb	r6, [r1, #1]
    MacCtx.NvmCtx->MacParams.MaxRxWindow = MacCtx.NvmCtx->MacParamsDefaults.MaxRxWindow;
 80096ee:	691e      	ldr	r6, [r3, #16]
 80096f0:	6096      	str	r6, [r2, #8]
    MacCtx.NvmCtx->MacParams.ReceiveDelay1 = MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay1;
 80096f2:	695e      	ldr	r6, [r3, #20]
 80096f4:	60d6      	str	r6, [r2, #12]
    MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay2;
 80096f6:	699e      	ldr	r6, [r3, #24]
 80096f8:	6116      	str	r6, [r2, #16]
    MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 = MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay1;
 80096fa:	69de      	ldr	r6, [r3, #28]
    MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 = MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay2;
 80096fc:	6a1b      	ldr	r3, [r3, #32]
    MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 = MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay1;
 80096fe:	6156      	str	r6, [r2, #20]
    MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 = MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay2;
 8009700:	6193      	str	r3, [r2, #24]
    MacCtx.NvmCtx->MacParams.ChannelsNbTrans = MacCtx.NvmCtx->MacParamsDefaults.ChannelsNbTrans;
 8009702:	7648      	strb	r0, [r1, #25]
 8009704:	0006      	movs	r6, r0

    ResetMacParameters( );
 8009706:	f7fe f86b 	bl	80077e0 <ResetMacParameters>

    MacCtx.NvmCtx->PublicNetwork = true;
 800970a:	5963      	ldr	r3, [r4, r5]
    // Reset duty cycle times
    MacCtx.NvmCtx->LastTxDoneTime = 0;
    MacCtx.NvmCtx->AggregatedTimeOff = 0;

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 800970c:	4850      	ldr	r0, [pc, #320]	; (8009850 <LoRaMacInitialization+0x374>)
    MacCtx.NvmCtx->PublicNetwork = true;
 800970e:	0019      	movs	r1, r3
 8009710:	31f1      	adds	r1, #241	; 0xf1
 8009712:	000a      	movs	r2, r1
 8009714:	7016      	strb	r6, [r2, #0]
    MacCtx.MacPrimitives = primitives;
 8009716:	22d1      	movs	r2, #209	; 0xd1
 8009718:	0092      	lsls	r2, r2, #2
 800971a:	50a7      	str	r7, [r4, r2]
    MacCtx.MacFlags.Value = 0;
 800971c:	2700      	movs	r7, #0
    MacCtx.MacCallbacks = callbacks;
 800971e:	9900      	ldr	r1, [sp, #0]
 8009720:	3204      	adds	r2, #4
 8009722:	50a1      	str	r1, [r4, r2]
    MacCtx.MacFlags.Value = 0;
 8009724:	4a4b      	ldr	r2, [pc, #300]	; (8009854 <LoRaMacInitialization+0x378>)
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 8009726:	494c      	ldr	r1, [pc, #304]	; (8009858 <LoRaMacInitialization+0x37c>)
    MacCtx.MacFlags.Value = 0;
 8009728:	54a7      	strb	r7, [r4, r2]
    MacCtx.MacState = LORAMAC_STOPPED;
 800972a:	3a42      	subs	r2, #66	; 0x42
 800972c:	3aff      	subs	r2, #255	; 0xff
 800972e:	50a6      	str	r6, [r4, r2]
    MacCtx.NvmCtx->LastTxDoneTime = 0;
 8009730:	3a7d      	subs	r2, #125	; 0x7d
 8009732:	3aff      	subs	r2, #255	; 0xff
 8009734:	509f      	str	r7, [r3, r2]
    MacCtx.NvmCtx->AggregatedTimeOff = 0;
 8009736:	3204      	adds	r2, #4
 8009738:	509f      	str	r7, [r3, r2]
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 800973a:	f003 fad5 	bl	800cce8 <TimerInit>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 800973e:	4947      	ldr	r1, [pc, #284]	; (800985c <LoRaMacInitialization+0x380>)
 8009740:	4847      	ldr	r0, [pc, #284]	; (8009860 <LoRaMacInitialization+0x384>)
 8009742:	f003 fad1 	bl	800cce8 <TimerInit>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 8009746:	4947      	ldr	r1, [pc, #284]	; (8009864 <LoRaMacInitialization+0x388>)
 8009748:	4847      	ldr	r0, [pc, #284]	; (8009868 <LoRaMacInitialization+0x38c>)
 800974a:	f003 facd 	bl	800cce8 <TimerInit>
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
 800974e:	4947      	ldr	r1, [pc, #284]	; (800986c <LoRaMacInitialization+0x390>)
 8009750:	4847      	ldr	r0, [pc, #284]	; (8009870 <LoRaMacInitialization+0x394>)
 8009752:	f003 fac9 	bl	800cce8 <TimerInit>

    // Store the current initialization time
    MacCtx.NvmCtx->InitializationTime = TimerGetCurrentTime( );
 8009756:	5966      	ldr	r6, [r4, r5]
 8009758:	f003 fb91 	bl	800ce7e <TimerGetCurrentTime>
 800975c:	23e6      	movs	r3, #230	; 0xe6
 800975e:	005b      	lsls	r3, r3, #1
 8009760:	50f0      	str	r0, [r6, r3]

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 8009762:	4a44      	ldr	r2, [pc, #272]	; (8009874 <LoRaMacInitialization+0x398>)
 8009764:	3381      	adds	r3, #129	; 0x81
 8009766:	33ff      	adds	r3, #255	; 0xff
 8009768:	50e2      	str	r2, [r4, r3]
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 800976a:	4a43      	ldr	r2, [pc, #268]	; (8009878 <LoRaMacInitialization+0x39c>)
 800976c:	3308      	adds	r3, #8
 800976e:	50e2      	str	r2, [r4, r3]
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 8009770:	4a42      	ldr	r2, [pc, #264]	; (800987c <LoRaMacInitialization+0x3a0>)
 8009772:	3308      	adds	r3, #8
 8009774:	50e2      	str	r2, [r4, r3]
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 8009776:	4a42      	ldr	r2, [pc, #264]	; (8009880 <LoRaMacInitialization+0x3a4>)
 8009778:	3b0c      	subs	r3, #12
 800977a:	50e2      	str	r2, [r4, r3]
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
    Radio.Init( &MacCtx.RadioEvents );
 800977c:	4e41      	ldr	r6, [pc, #260]	; (8009884 <LoRaMacInitialization+0x3a8>)
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 800977e:	4a42      	ldr	r2, [pc, #264]	; (8009888 <LoRaMacInitialization+0x3ac>)
 8009780:	3308      	adds	r3, #8
 8009782:	50e2      	str	r2, [r4, r3]
    Radio.Init( &MacCtx.RadioEvents );
 8009784:	68b3      	ldr	r3, [r6, #8]
 8009786:	4841      	ldr	r0, [pc, #260]	; (800988c <LoRaMacInitialization+0x3b0>)
 8009788:	9301      	str	r3, [sp, #4]
 800978a:	4798      	blx	r3

    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_INIT;
    params.NvmCtx = NULL;
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 800978c:	5963      	ldr	r3, [r4, r5]
    params.Type = INIT_TYPE_INIT;
 800978e:	a906      	add	r1, sp, #24
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 8009790:	7818      	ldrb	r0, [r3, #0]
    params.Type = INIT_TYPE_INIT;
 8009792:	710f      	strb	r7, [r1, #4]
    params.NvmCtx = NULL;
 8009794:	9706      	str	r7, [sp, #24]
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 8009796:	f001 fd76 	bl	800b286 <RegionInitDefaults>

    // Initialize the Secure Element driver
    if( SecureElementInit( EventSecureElementNvmCtxChanged ) != SECURE_ELEMENT_SUCCESS )
 800979a:	483d      	ldr	r0, [pc, #244]	; (8009890 <LoRaMacInitialization+0x3b4>)
 800979c:	f7fd fd06 	bl	80071ac <SecureElementInit>
 80097a0:	42b8      	cmp	r0, r7
 80097a2:	d003      	beq.n	80097ac <LoRaMacInitialization+0x2d0>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 80097a4:	2311      	movs	r3, #17
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &EventClassBNvmCtxChanged );

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );

    return LORAMAC_STATUS_OK;
}
 80097a6:	0018      	movs	r0, r3
 80097a8:	b011      	add	sp, #68	; 0x44
 80097aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( LoRaMacCryptoInit( EventCryptoNvmCtxChanged ) != LORAMAC_CRYPTO_SUCCESS )
 80097ac:	4839      	ldr	r0, [pc, #228]	; (8009894 <LoRaMacInitialization+0x3b8>)
 80097ae:	f001 f955 	bl	800aa5c <LoRaMacCryptoInit>
 80097b2:	2800      	cmp	r0, #0
 80097b4:	d1f6      	bne.n	80097a4 <LoRaMacInitialization+0x2c8>
    if( LoRaMacCommandsInit( EventCommandsNvmCtxChanged ) != LORAMAC_COMMANDS_SUCCESS )
 80097b6:	4838      	ldr	r0, [pc, #224]	; (8009898 <LoRaMacInitialization+0x3bc>)
 80097b8:	f000 fe02 	bl	800a3c0 <LoRaMacCommandsInit>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80097bc:	2313      	movs	r3, #19
    if( LoRaMacCommandsInit( EventCommandsNvmCtxChanged ) != LORAMAC_COMMANDS_SUCCESS )
 80097be:	2800      	cmp	r0, #0
 80097c0:	d1f1      	bne.n	80097a6 <LoRaMacInitialization+0x2ca>
    if( LoRaMacCryptoSetMulticastReference( MacCtx.NvmCtx->MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 80097c2:	5960      	ldr	r0, [r4, r5]
 80097c4:	3050      	adds	r0, #80	; 0x50
 80097c6:	f001 f9df 	bl	800ab88 <LoRaMacCryptoSetMulticastReference>
 80097ca:	1e07      	subs	r7, r0, #0
 80097cc:	d1ea      	bne.n	80097a4 <LoRaMacInitialization+0x2c8>
    srand1( Radio.Random( ) );
 80097ce:	69f3      	ldr	r3, [r6, #28]
 80097d0:	9301      	str	r3, [sp, #4]
 80097d2:	4798      	blx	r3
 80097d4:	f003 fbf6 	bl	800cfc4 <srand1>
    Radio.SetPublicNetwork( MacCtx.NvmCtx->PublicNetwork );
 80097d8:	5963      	ldr	r3, [r4, r5]
 80097da:	33f1      	adds	r3, #241	; 0xf1
 80097dc:	7818      	ldrb	r0, [r3, #0]
 80097de:	6e33      	ldr	r3, [r6, #96]	; 0x60
 80097e0:	9301      	str	r3, [sp, #4]
 80097e2:	4798      	blx	r3
    Radio.Sleep( );
 80097e4:	6b73      	ldr	r3, [r6, #52]	; 0x34
 80097e6:	9301      	str	r3, [sp, #4]
 80097e8:	4798      	blx	r3
        classBCallbacks.GetTemperatureLevel = callbacks->GetTemperatureLevel;
 80097ea:	9b00      	ldr	r3, [sp, #0]
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &EventClassBNvmCtxChanged );
 80097ec:	a904      	add	r1, sp, #16
        classBCallbacks.GetTemperatureLevel = callbacks->GetTemperatureLevel;
 80097ee:	685b      	ldr	r3, [r3, #4]
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &EventClassBNvmCtxChanged );
 80097f0:	a808      	add	r0, sp, #32
        classBCallbacks.GetTemperatureLevel = callbacks->GetTemperatureLevel;
 80097f2:	9301      	str	r3, [sp, #4]
 80097f4:	9304      	str	r3, [sp, #16]
        classBCallbacks.MacProcessNotify = callbacks->MacProcessNotify;
 80097f6:	9b00      	ldr	r3, [sp, #0]
 80097f8:	68db      	ldr	r3, [r3, #12]
 80097fa:	9300      	str	r3, [sp, #0]
 80097fc:	9305      	str	r3, [sp, #20]
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 80097fe:	4b27      	ldr	r3, [pc, #156]	; (800989c <LoRaMacInitialization+0x3c0>)
 8009800:	9308      	str	r3, [sp, #32]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 8009802:	4b27      	ldr	r3, [pc, #156]	; (80098a0 <LoRaMacInitialization+0x3c4>)
 8009804:	9309      	str	r3, [sp, #36]	; 0x24
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 8009806:	4b27      	ldr	r3, [pc, #156]	; (80098a4 <LoRaMacInitialization+0x3c8>)
 8009808:	930a      	str	r3, [sp, #40]	; 0x28
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 800980a:	4b27      	ldr	r3, [pc, #156]	; (80098a8 <LoRaMacInitialization+0x3cc>)
 800980c:	930b      	str	r3, [sp, #44]	; 0x2c
    classBParams.LoRaMacDevAddr = &MacCtx.NvmCtx->DevAddr;
 800980e:	5963      	ldr	r3, [r4, r5]
 8009810:	001a      	movs	r2, r3
 8009812:	324c      	adds	r2, #76	; 0x4c
 8009814:	920c      	str	r2, [sp, #48]	; 0x30
    classBParams.LoRaMacParams = &MacCtx.NvmCtx->MacParams;
 8009816:	32ac      	adds	r2, #172	; 0xac
    classBParams.LoRaMacRegion = &MacCtx.NvmCtx->Region;
 8009818:	930d      	str	r3, [sp, #52]	; 0x34
    classBParams.LoRaMacParams = &MacCtx.NvmCtx->MacParams;
 800981a:	920e      	str	r2, [sp, #56]	; 0x38
    classBParams.MulticastChannels = &MacCtx.NvmCtx->MulticastChannelList[0];
 800981c:	3350      	adds	r3, #80	; 0x50
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &EventClassBNvmCtxChanged );
 800981e:	4a23      	ldr	r2, [pc, #140]	; (80098ac <LoRaMacInitialization+0x3d0>)
    classBParams.MulticastChannels = &MacCtx.NvmCtx->MulticastChannelList[0];
 8009820:	930f      	str	r3, [sp, #60]	; 0x3c
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &EventClassBNvmCtxChanged );
 8009822:	f000 fd95 	bl	800a350 <LoRaMacClassBInit>
    MacCtx.AllowRequests = requestState;
 8009826:	2201      	movs	r2, #1
 8009828:	4b21      	ldr	r3, [pc, #132]	; (80098b0 <LoRaMacInitialization+0x3d4>)
 800982a:	54e2      	strb	r2, [r4, r3]
    return LORAMAC_STATUS_OK;
 800982c:	003b      	movs	r3, r7
 800982e:	e7ba      	b.n	80097a6 <LoRaMacInitialization+0x2ca>
 8009830:	08007631 	.word	0x08007631
 8009834:	200007a4 	.word	0x200007a4
 8009838:	20000980 	.word	0x20000980
 800983c:	00000412 	.word	0x00000412
 8009840:	00000411 	.word	0x00000411
 8009844:	00000484 	.word	0x00000484
 8009848:	01000300 	.word	0x01000300
 800984c:	000003f6 	.word	0x000003f6
 8009850:	20000ce8 	.word	0x20000ce8
 8009854:	00000481 	.word	0x00000481
 8009858:	08008745 	.word	0x08008745
 800985c:	08007c1d 	.word	0x08007c1d
 8009860:	20000d00 	.word	0x20000d00
 8009864:	08007c85 	.word	0x08007c85
 8009868:	20000d18 	.word	0x20000d18
 800986c:	08007679 	.word	0x08007679
 8009870:	20000d78 	.word	0x20000d78
 8009874:	08007a29 	.word	0x08007a29
 8009878:	080079c1 	.word	0x080079c1
 800987c:	0800752d 	.word	0x0800752d
 8009880:	08007975 	.word	0x08007975
 8009884:	0800f5a4 	.word	0x0800f5a4
 8009888:	08007929 	.word	0x08007929
 800988c:	20000ccc 	.word	0x20000ccc
 8009890:	08007613 	.word	0x08007613
 8009894:	08007609 	.word	0x08007609
 8009898:	0800761d 	.word	0x0800761d
 800989c:	20000de4 	.word	0x20000de4
 80098a0:	20000d9c 	.word	0x20000d9c
 80098a4:	20000dd0 	.word	0x20000dd0
 80098a8:	20000e01 	.word	0x20000e01
 80098ac:	08007627 	.word	0x08007627
 80098b0:	00000482 	.word	0x00000482

080098b4 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
    MacCtx.MacState = LORAMAC_IDLE;
 80098b4:	23d0      	movs	r3, #208	; 0xd0
 80098b6:	2000      	movs	r0, #0
 80098b8:	4a01      	ldr	r2, [pc, #4]	; (80098c0 <LoRaMacStart+0xc>)
 80098ba:	009b      	lsls	r3, r3, #2
 80098bc:	50d0      	str	r0, [r2, r3]
    return LORAMAC_STATUS_OK;
}
 80098be:	4770      	bx	lr
 80098c0:	20000980 	.word	0x20000980

080098c4 <LoRaMacQueryTxPossible>:
    }
    return LORAMAC_STATUS_BUSY;
}

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 80098c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 80098c6:	4b2e      	ldr	r3, [pc, #184]	; (8009980 <LoRaMacQueryTxPossible+0xbc>)
{
 80098c8:	000c      	movs	r4, r1
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 80098ca:	492e      	ldr	r1, [pc, #184]	; (8009984 <LoRaMacQueryTxPossible+0xc0>)
    int8_t datarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
    int8_t txPower = MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower;
    size_t macCmdsSize = 0;
 80098cc:	2700      	movs	r7, #0
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 80098ce:	58cb      	ldr	r3, [r1, r3]
{
 80098d0:	b08b      	sub	sp, #44	; 0x2c
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 80098d2:	001a      	movs	r2, r3
 80098d4:	32f4      	adds	r2, #244	; 0xf4
 80098d6:	6816      	ldr	r6, [r2, #0]
{
 80098d8:	9001      	str	r0, [sp, #4]
    int8_t datarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
 80098da:	aa02      	add	r2, sp, #8
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 80098dc:	9603      	str	r6, [sp, #12]
    int8_t datarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
 80098de:	1c95      	adds	r5, r2, #2
 80098e0:	795a      	ldrb	r2, [r3, #5]
 80098e2:	702a      	strb	r2, [r5, #0]
    int8_t txPower = MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower;
 80098e4:	7918      	ldrb	r0, [r3, #4]
 80098e6:	aa02      	add	r2, sp, #8
 80098e8:	3203      	adds	r2, #3
 80098ea:	7010      	strb	r0, [r2, #0]
    size_t macCmdsSize = 0;
 80098ec:	9704      	str	r7, [sp, #16]

    if( txInfo == NULL )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80098ee:	2003      	movs	r0, #3
    if( txInfo == NULL )
 80098f0:	42bc      	cmp	r4, r7
 80098f2:	d03e      	beq.n	8009972 <LoRaMacQueryTxPossible+0xae>
    }

    // Setup ADR request
    adrNext.Version = MacCtx.NvmCtx->Version;
 80098f4:	37d1      	adds	r7, #209	; 0xd1
 80098f6:	37ff      	adds	r7, #255	; 0xff
 80098f8:	59df      	ldr	r7, [r3, r7]
 80098fa:	a805      	add	r0, sp, #20
 80098fc:	9705      	str	r7, [sp, #20]
    adrNext.UpdateChanMask = false;
 80098fe:	2700      	movs	r7, #0
 8009900:	7107      	strb	r7, [r0, #4]
    adrNext.AdrEnabled = MacCtx.NvmCtx->AdrCtrlOn;
 8009902:	001f      	movs	r7, r3
 8009904:	37f2      	adds	r7, #242	; 0xf2
 8009906:	783f      	ldrb	r7, [r7, #0]
    adrNext.AdrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 8009908:	6086      	str	r6, [r0, #8]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 800990a:	26fd      	movs	r6, #253	; 0xfd
    adrNext.AdrEnabled = MacCtx.NvmCtx->AdrCtrlOn;
 800990c:	7147      	strb	r7, [r0, #5]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 800990e:	00b6      	lsls	r6, r6, #2
 8009910:	5b8e      	ldrh	r6, [r1, r6]
 8009912:	8186      	strh	r6, [r0, #12]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 8009914:	4e1c      	ldr	r6, [pc, #112]	; (8009988 <LoRaMacQueryTxPossible+0xc4>)
 8009916:	5b89      	ldrh	r1, [r1, r6]
 8009918:	81c1      	strh	r1, [r0, #14]
    adrNext.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800991a:	0019      	movs	r1, r3
 800991c:	31f9      	adds	r1, #249	; 0xf9
 800991e:	7809      	ldrb	r1, [r1, #0]
 8009920:	7401      	strb	r1, [r0, #16]
    adrNext.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 8009922:	0019      	movs	r1, r3
 8009924:	31f8      	adds	r1, #248	; 0xf8
 8009926:	7809      	ldrb	r1, [r1, #0]
 8009928:	7441      	strb	r1, [r0, #17]
    adrNext.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800992a:	2196      	movs	r1, #150	; 0x96
 800992c:	0049      	lsls	r1, r1, #1
 800992e:	5c59      	ldrb	r1, [r3, r1]
 8009930:	7481      	strb	r1, [r0, #18]
    adrNext.Region = MacCtx.NvmCtx->Region;
 8009932:	781b      	ldrb	r3, [r3, #0]

    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 8009934:	0029      	movs	r1, r5
    adrNext.Region = MacCtx.NvmCtx->Region;
 8009936:	74c3      	strb	r3, [r0, #19]
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 8009938:	ab03      	add	r3, sp, #12
 800993a:	f000 fca3 	bl	800a284 <LoRaMacAdrCalcNext>

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800993e:	2000      	movs	r0, #0
 8009940:	5628      	ldrsb	r0, [r5, r0]
 8009942:	f7fd fe7b 	bl	800763c <GetMaxAppPayloadWithoutFOptsLength>
 8009946:	7060      	strb	r0, [r4, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8009948:	a804      	add	r0, sp, #16
 800994a:	f000 fe09 	bl	800a560 <LoRaMacCommandsGetSizeSerializedCmds>
 800994e:	0003      	movs	r3, r0
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8009950:	2013      	movs	r0, #19
    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8009952:	2b00      	cmp	r3, #0
 8009954:	d10d      	bne.n	8009972 <LoRaMacQueryTxPossible+0xae>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 8009956:	9804      	ldr	r0, [sp, #16]
 8009958:	280f      	cmp	r0, #15
 800995a:	d80c      	bhi.n	8009976 <LoRaMacQueryTxPossible+0xb2>
 800995c:	7863      	ldrb	r3, [r4, #1]
 800995e:	4298      	cmp	r0, r3
 8009960:	d809      	bhi.n	8009976 <LoRaMacQueryTxPossible+0xb2>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 8009962:	1a1a      	subs	r2, r3, r0
 8009964:	7022      	strb	r2, [r4, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 8009966:	9a01      	ldr	r2, [sp, #4]
 8009968:	1810      	adds	r0, r2, r0
        {
            return LORAMAC_STATUS_OK;
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 800996a:	4283      	cmp	r3, r0
 800996c:	4180      	sbcs	r0, r0
 800996e:	4240      	negs	r0, r0
 8009970:	00c0      	lsls	r0, r0, #3
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
        return LORAMAC_STATUS_LENGTH_ERROR;
    }
}
 8009972:	b00b      	add	sp, #44	; 0x2c
 8009974:	bdf0      	pop	{r4, r5, r6, r7, pc}
        txInfo->MaxPossibleApplicationDataSize = 0;
 8009976:	2300      	movs	r3, #0
        return LORAMAC_STATUS_LENGTH_ERROR;
 8009978:	2008      	movs	r0, #8
        txInfo->MaxPossibleApplicationDataSize = 0;
 800997a:	7023      	strb	r3, [r4, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 800997c:	e7f9      	b.n	8009972 <LoRaMacQueryTxPossible+0xae>
 800997e:	46c0      	nop			; (mov r8, r8)
 8009980:	00000484 	.word	0x00000484
 8009984:	20000980 	.word	0x20000980
 8009988:	000003f6 	.word	0x000003f6

0800998c <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 800998c:	b513      	push	{r0, r1, r4, lr}
 800998e:	0004      	movs	r4, r0
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8009990:	2003      	movs	r0, #3
    if( mibGet == NULL )
 8009992:	2c00      	cmp	r4, #0
 8009994:	d02e      	beq.n	80099f4 <LoRaMacMibGetRequestConfirm+0x68>
    }

    switch( mibGet->Type )
 8009996:	7820      	ldrb	r0, [r4, #0]
 8009998:	2834      	cmp	r0, #52	; 0x34
 800999a:	d900      	bls.n	800999e <LoRaMacMibGetRequestConfirm+0x12>
 800999c:	e0ca      	b.n	8009b34 <LoRaMacMibGetRequestConfirm+0x1a8>
 800999e:	f7f6 fbc5 	bl	800012c <__gnu_thumb1_case_uqi>
 80099a2:	211b      	.short	0x211b
 80099a4:	36312e2a 	.word	0x36312e2a
 80099a8:	c9c9c93c 	.word	0xc9c9c93c
 80099ac:	c9c9c9c9 	.word	0xc9c9c9c9
 80099b0:	c9c9c9c9 	.word	0xc9c9c9c9
 80099b4:	c9c9c9c9 	.word	0xc9c9c9c9
 80099b8:	c9c9c9c9 	.word	0xc9c9c9c9
 80099bc:	41c9c9c9 	.word	0x41c9c9c9
 80099c0:	5e574c46 	.word	0x5e574c46
 80099c4:	72746c66 	.word	0x72746c66
 80099c8:	88827c76 	.word	0x88827c76
 80099cc:	9f9a948e 	.word	0x9f9a948e
 80099d0:	b4aea4a9 	.word	0xb4aea4a9
 80099d4:	c4ba      	.short	0xc4ba
 80099d6:	c1          	.byte	0xc1
 80099d7:	00          	.byte	0x00
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = MacCtx.NvmCtx->DeviceClass;
 80099d8:	4a58      	ldr	r2, [pc, #352]	; (8009b3c <LoRaMacMibGetRequestConfirm+0x1b0>)
 80099da:	4b59      	ldr	r3, [pc, #356]	; (8009b40 <LoRaMacMibGetRequestConfirm+0x1b4>)
 80099dc:	58d3      	ldr	r3, [r2, r3]
 80099de:	33f0      	adds	r3, #240	; 0xf0
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
            break;
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = MacCtx.NvmCtx->AdrCtrlOn;
 80099e0:	781b      	ldrb	r3, [r3, #0]
 80099e2:	e005      	b.n	80099f0 <LoRaMacMibGetRequestConfirm+0x64>
            mibGet->Param.NetworkActivation = MacCtx.NvmCtx->NetworkActivation;
 80099e4:	4b56      	ldr	r3, [pc, #344]	; (8009b40 <LoRaMacMibGetRequestConfirm+0x1b4>)
 80099e6:	4a55      	ldr	r2, [pc, #340]	; (8009b3c <LoRaMacMibGetRequestConfirm+0x1b0>)
 80099e8:	58d2      	ldr	r2, [r2, r3]
 80099ea:	23ea      	movs	r3, #234	; 0xea
 80099ec:	005b      	lsls	r3, r3, #1
 80099ee:	5cd3      	ldrb	r3, [r2, r3]
 80099f0:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80099f2:	2000      	movs	r0, #0
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
            break;
        }
    }
    return status;
}
 80099f4:	bd16      	pop	{r1, r2, r4, pc}
            mibGet->Param.DevEui = SecureElementGetDevEui( );
 80099f6:	f7fd fd7f 	bl	80074f8 <SecureElementGetDevEui>
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 80099fa:	6060      	str	r0, [r4, #4]
 80099fc:	e7f9      	b.n	80099f2 <LoRaMacMibGetRequestConfirm+0x66>
 80099fe:	f7fd fd91 	bl	8007524 <SecureElementGetJoinEui>
 8009a02:	e7fa      	b.n	80099fa <LoRaMacMibGetRequestConfirm+0x6e>
            mibGet->Param.AdrEnable = MacCtx.NvmCtx->AdrCtrlOn;
 8009a04:	4a4d      	ldr	r2, [pc, #308]	; (8009b3c <LoRaMacMibGetRequestConfirm+0x1b0>)
 8009a06:	4b4e      	ldr	r3, [pc, #312]	; (8009b40 <LoRaMacMibGetRequestConfirm+0x1b4>)
 8009a08:	58d3      	ldr	r3, [r2, r3]
 8009a0a:	33f2      	adds	r3, #242	; 0xf2
 8009a0c:	e7e8      	b.n	80099e0 <LoRaMacMibGetRequestConfirm+0x54>
            mibGet->Param.NetID = MacCtx.NvmCtx->NetID;
 8009a0e:	4a4b      	ldr	r2, [pc, #300]	; (8009b3c <LoRaMacMibGetRequestConfirm+0x1b0>)
 8009a10:	4b4b      	ldr	r3, [pc, #300]	; (8009b40 <LoRaMacMibGetRequestConfirm+0x1b4>)
 8009a12:	58d3      	ldr	r3, [r2, r3]
 8009a14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
            mibGet->Param.SystemMaxRxError = MacCtx.NvmCtx->MacParams.SystemMaxRxError;
 8009a16:	6063      	str	r3, [r4, #4]
 8009a18:	e7eb      	b.n	80099f2 <LoRaMacMibGetRequestConfirm+0x66>
            mibGet->Param.DevAddr = MacCtx.NvmCtx->DevAddr;
 8009a1a:	4a48      	ldr	r2, [pc, #288]	; (8009b3c <LoRaMacMibGetRequestConfirm+0x1b0>)
 8009a1c:	4b48      	ldr	r3, [pc, #288]	; (8009b40 <LoRaMacMibGetRequestConfirm+0x1b4>)
 8009a1e:	58d3      	ldr	r3, [r2, r3]
 8009a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a22:	e7f8      	b.n	8009a16 <LoRaMacMibGetRequestConfirm+0x8a>
            mibGet->Param.EnablePublicNetwork = MacCtx.NvmCtx->PublicNetwork;
 8009a24:	4a45      	ldr	r2, [pc, #276]	; (8009b3c <LoRaMacMibGetRequestConfirm+0x1b0>)
 8009a26:	4b46      	ldr	r3, [pc, #280]	; (8009b40 <LoRaMacMibGetRequestConfirm+0x1b4>)
 8009a28:	58d3      	ldr	r3, [r2, r3]
 8009a2a:	33f1      	adds	r3, #241	; 0xf1
 8009a2c:	e7d8      	b.n	80099e0 <LoRaMacMibGetRequestConfirm+0x54>
            mibGet->Param.EnableRepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 8009a2e:	4b44      	ldr	r3, [pc, #272]	; (8009b40 <LoRaMacMibGetRequestConfirm+0x1b4>)
 8009a30:	4a42      	ldr	r2, [pc, #264]	; (8009b3c <LoRaMacMibGetRequestConfirm+0x1b0>)
 8009a32:	58d2      	ldr	r2, [r2, r3]
 8009a34:	2340      	movs	r3, #64	; 0x40
 8009a36:	33ff      	adds	r3, #255	; 0xff
 8009a38:	e7d9      	b.n	80099ee <LoRaMacMibGetRequestConfirm+0x62>
            getPhy.Attribute = PHY_CHANNELS;
 8009a3a:	231d      	movs	r3, #29
            getPhy.Attribute = PHY_CHANNELS_MASK;
 8009a3c:	466a      	mov	r2, sp
 8009a3e:	7013      	strb	r3, [r2, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009a40:	4a3e      	ldr	r2, [pc, #248]	; (8009b3c <LoRaMacMibGetRequestConfirm+0x1b0>)
 8009a42:	4b3f      	ldr	r3, [pc, #252]	; (8009b40 <LoRaMacMibGetRequestConfirm+0x1b4>)
 8009a44:	4669      	mov	r1, sp
 8009a46:	58d3      	ldr	r3, [r2, r3]
 8009a48:	7818      	ldrb	r0, [r3, #0]
 8009a4a:	f001 fc09 	bl	800b260 <RegionGetPhyParam>
 8009a4e:	e7d4      	b.n	80099fa <LoRaMacMibGetRequestConfirm+0x6e>
            mibGet->Param.Rx2Channel = MacCtx.NvmCtx->MacParams.Rx2Channel;
 8009a50:	4a3a      	ldr	r2, [pc, #232]	; (8009b3c <LoRaMacMibGetRequestConfirm+0x1b0>)
 8009a52:	4b3b      	ldr	r3, [pc, #236]	; (8009b40 <LoRaMacMibGetRequestConfirm+0x1b4>)
 8009a54:	3404      	adds	r4, #4
 8009a56:	58d3      	ldr	r3, [r2, r3]
 8009a58:	331d      	adds	r3, #29
            mibGet->Param.RxCChannel = MacCtx.NvmCtx->MacParams.RxCChannel;
 8009a5a:	33ff      	adds	r3, #255	; 0xff
 8009a5c:	e004      	b.n	8009a68 <LoRaMacMibGetRequestConfirm+0xdc>
            mibGet->Param.Rx2Channel = MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel;
 8009a5e:	4a37      	ldr	r2, [pc, #220]	; (8009b3c <LoRaMacMibGetRequestConfirm+0x1b0>)
 8009a60:	4b37      	ldr	r3, [pc, #220]	; (8009b40 <LoRaMacMibGetRequestConfirm+0x1b4>)
 8009a62:	3404      	adds	r4, #4
 8009a64:	58d3      	ldr	r3, [r2, r3]
 8009a66:	3328      	adds	r3, #40	; 0x28
            mibGet->Param.RxCChannel = MacCtx.NvmCtx->MacParamsDefaults.RxCChannel;
 8009a68:	cb06      	ldmia	r3!, {r1, r2}
 8009a6a:	c406      	stmia	r4!, {r1, r2}
 8009a6c:	e7c1      	b.n	80099f2 <LoRaMacMibGetRequestConfirm+0x66>
            mibGet->Param.RxCChannel = MacCtx.NvmCtx->MacParams.RxCChannel;
 8009a6e:	4a33      	ldr	r2, [pc, #204]	; (8009b3c <LoRaMacMibGetRequestConfirm+0x1b0>)
 8009a70:	4b33      	ldr	r3, [pc, #204]	; (8009b40 <LoRaMacMibGetRequestConfirm+0x1b4>)
 8009a72:	3404      	adds	r4, #4
 8009a74:	58d3      	ldr	r3, [r2, r3]
 8009a76:	3325      	adds	r3, #37	; 0x25
 8009a78:	e7ef      	b.n	8009a5a <LoRaMacMibGetRequestConfirm+0xce>
            mibGet->Param.RxCChannel = MacCtx.NvmCtx->MacParamsDefaults.RxCChannel;
 8009a7a:	4a30      	ldr	r2, [pc, #192]	; (8009b3c <LoRaMacMibGetRequestConfirm+0x1b0>)
 8009a7c:	4b30      	ldr	r3, [pc, #192]	; (8009b40 <LoRaMacMibGetRequestConfirm+0x1b4>)
 8009a7e:	3404      	adds	r4, #4
 8009a80:	58d3      	ldr	r3, [r2, r3]
 8009a82:	3330      	adds	r3, #48	; 0x30
 8009a84:	e7f0      	b.n	8009a68 <LoRaMacMibGetRequestConfirm+0xdc>
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 8009a86:	231b      	movs	r3, #27
 8009a88:	e7d8      	b.n	8009a3c <LoRaMacMibGetRequestConfirm+0xb0>
            getPhy.Attribute = PHY_CHANNELS_MASK;
 8009a8a:	231a      	movs	r3, #26
 8009a8c:	e7d6      	b.n	8009a3c <LoRaMacMibGetRequestConfirm+0xb0>
            mibGet->Param.ChannelsNbTrans = MacCtx.NvmCtx->MacParams.ChannelsNbTrans;
 8009a8e:	4a2b      	ldr	r2, [pc, #172]	; (8009b3c <LoRaMacMibGetRequestConfirm+0x1b0>)
 8009a90:	4b2b      	ldr	r3, [pc, #172]	; (8009b40 <LoRaMacMibGetRequestConfirm+0x1b4>)
 8009a92:	58d3      	ldr	r3, [r2, r3]
 8009a94:	33ff      	adds	r3, #255	; 0xff
 8009a96:	7e5b      	ldrb	r3, [r3, #25]
 8009a98:	e7aa      	b.n	80099f0 <LoRaMacMibGetRequestConfirm+0x64>
            mibGet->Param.MaxRxWindow = MacCtx.NvmCtx->MacParams.MaxRxWindow;
 8009a9a:	4a28      	ldr	r2, [pc, #160]	; (8009b3c <LoRaMacMibGetRequestConfirm+0x1b0>)
 8009a9c:	4b28      	ldr	r3, [pc, #160]	; (8009b40 <LoRaMacMibGetRequestConfirm+0x1b4>)
 8009a9e:	58d3      	ldr	r3, [r2, r3]
 8009aa0:	33fc      	adds	r3, #252	; 0xfc
 8009aa2:	689b      	ldr	r3, [r3, #8]
 8009aa4:	e7b7      	b.n	8009a16 <LoRaMacMibGetRequestConfirm+0x8a>
            mibGet->Param.ReceiveDelay1 = MacCtx.NvmCtx->MacParams.ReceiveDelay1;
 8009aa6:	4a25      	ldr	r2, [pc, #148]	; (8009b3c <LoRaMacMibGetRequestConfirm+0x1b0>)
 8009aa8:	4b25      	ldr	r3, [pc, #148]	; (8009b40 <LoRaMacMibGetRequestConfirm+0x1b4>)
 8009aaa:	58d3      	ldr	r3, [r2, r3]
 8009aac:	33fc      	adds	r3, #252	; 0xfc
 8009aae:	68db      	ldr	r3, [r3, #12]
 8009ab0:	e7b1      	b.n	8009a16 <LoRaMacMibGetRequestConfirm+0x8a>
            mibGet->Param.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay2;
 8009ab2:	4a22      	ldr	r2, [pc, #136]	; (8009b3c <LoRaMacMibGetRequestConfirm+0x1b0>)
 8009ab4:	4b22      	ldr	r3, [pc, #136]	; (8009b40 <LoRaMacMibGetRequestConfirm+0x1b4>)
 8009ab6:	58d3      	ldr	r3, [r2, r3]
 8009ab8:	33fc      	adds	r3, #252	; 0xfc
 8009aba:	691b      	ldr	r3, [r3, #16]
 8009abc:	e7ab      	b.n	8009a16 <LoRaMacMibGetRequestConfirm+0x8a>
            mibGet->Param.JoinAcceptDelay1 = MacCtx.NvmCtx->MacParams.JoinAcceptDelay1;
 8009abe:	4a1f      	ldr	r2, [pc, #124]	; (8009b3c <LoRaMacMibGetRequestConfirm+0x1b0>)
 8009ac0:	4b1f      	ldr	r3, [pc, #124]	; (8009b40 <LoRaMacMibGetRequestConfirm+0x1b4>)
 8009ac2:	58d3      	ldr	r3, [r2, r3]
 8009ac4:	33fc      	adds	r3, #252	; 0xfc
 8009ac6:	695b      	ldr	r3, [r3, #20]
 8009ac8:	e7a5      	b.n	8009a16 <LoRaMacMibGetRequestConfirm+0x8a>
            mibGet->Param.JoinAcceptDelay2 = MacCtx.NvmCtx->MacParams.JoinAcceptDelay2;
 8009aca:	4a1c      	ldr	r2, [pc, #112]	; (8009b3c <LoRaMacMibGetRequestConfirm+0x1b0>)
 8009acc:	4b1c      	ldr	r3, [pc, #112]	; (8009b40 <LoRaMacMibGetRequestConfirm+0x1b4>)
 8009ace:	58d3      	ldr	r3, [r2, r3]
 8009ad0:	33fc      	adds	r3, #252	; 0xfc
 8009ad2:	699b      	ldr	r3, [r3, #24]
 8009ad4:	e79f      	b.n	8009a16 <LoRaMacMibGetRequestConfirm+0x8a>
            mibGet->Param.ChannelsDefaultDatarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
 8009ad6:	4a19      	ldr	r2, [pc, #100]	; (8009b3c <LoRaMacMibGetRequestConfirm+0x1b0>)
 8009ad8:	4b19      	ldr	r3, [pc, #100]	; (8009b40 <LoRaMacMibGetRequestConfirm+0x1b4>)
 8009ada:	58d3      	ldr	r3, [r2, r3]
 8009adc:	795b      	ldrb	r3, [r3, #5]
 8009ade:	e787      	b.n	80099f0 <LoRaMacMibGetRequestConfirm+0x64>
            mibGet->Param.ChannelsDatarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8009ae0:	4a16      	ldr	r2, [pc, #88]	; (8009b3c <LoRaMacMibGetRequestConfirm+0x1b0>)
 8009ae2:	4b17      	ldr	r3, [pc, #92]	; (8009b40 <LoRaMacMibGetRequestConfirm+0x1b4>)
 8009ae4:	58d3      	ldr	r3, [r2, r3]
 8009ae6:	33f9      	adds	r3, #249	; 0xf9
 8009ae8:	e77a      	b.n	80099e0 <LoRaMacMibGetRequestConfirm+0x54>
            mibGet->Param.ChannelsDefaultTxPower = MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower;
 8009aea:	4a14      	ldr	r2, [pc, #80]	; (8009b3c <LoRaMacMibGetRequestConfirm+0x1b0>)
 8009aec:	4b14      	ldr	r3, [pc, #80]	; (8009b40 <LoRaMacMibGetRequestConfirm+0x1b4>)
 8009aee:	58d3      	ldr	r3, [r2, r3]
 8009af0:	791b      	ldrb	r3, [r3, #4]
 8009af2:	e77d      	b.n	80099f0 <LoRaMacMibGetRequestConfirm+0x64>
            mibGet->Param.ChannelsTxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 8009af4:	4a11      	ldr	r2, [pc, #68]	; (8009b3c <LoRaMacMibGetRequestConfirm+0x1b0>)
 8009af6:	4b12      	ldr	r3, [pc, #72]	; (8009b40 <LoRaMacMibGetRequestConfirm+0x1b4>)
 8009af8:	58d3      	ldr	r3, [r2, r3]
 8009afa:	33f8      	adds	r3, #248	; 0xf8
 8009afc:	e770      	b.n	80099e0 <LoRaMacMibGetRequestConfirm+0x54>
            mibGet->Param.SystemMaxRxError = MacCtx.NvmCtx->MacParams.SystemMaxRxError;
 8009afe:	4a0f      	ldr	r2, [pc, #60]	; (8009b3c <LoRaMacMibGetRequestConfirm+0x1b0>)
 8009b00:	4b0f      	ldr	r3, [pc, #60]	; (8009b40 <LoRaMacMibGetRequestConfirm+0x1b4>)
 8009b02:	58d3      	ldr	r3, [r2, r3]
 8009b04:	33fc      	adds	r3, #252	; 0xfc
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	e785      	b.n	8009a16 <LoRaMacMibGetRequestConfirm+0x8a>
            mibGet->Param.MinRxSymbols = MacCtx.NvmCtx->MacParams.MinRxSymbols;
 8009b0a:	4a0c      	ldr	r2, [pc, #48]	; (8009b3c <LoRaMacMibGetRequestConfirm+0x1b0>)
 8009b0c:	4b0c      	ldr	r3, [pc, #48]	; (8009b40 <LoRaMacMibGetRequestConfirm+0x1b4>)
 8009b0e:	58d3      	ldr	r3, [r2, r3]
 8009b10:	33ff      	adds	r3, #255	; 0xff
 8009b12:	785b      	ldrb	r3, [r3, #1]
 8009b14:	e76c      	b.n	80099f0 <LoRaMacMibGetRequestConfirm+0x64>
            mibGet->Param.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 8009b16:	4a09      	ldr	r2, [pc, #36]	; (8009b3c <LoRaMacMibGetRequestConfirm+0x1b0>)
 8009b18:	4b09      	ldr	r3, [pc, #36]	; (8009b40 <LoRaMacMibGetRequestConfirm+0x1b4>)
 8009b1a:	58d3      	ldr	r3, [r2, r3]
 8009b1c:	33fc      	adds	r3, #252	; 0xfc
 8009b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            mibGet->Param.DefaultAntennaGain = MacCtx.NvmCtx->MacParamsDefaults.AntennaGain;
 8009b20:	6063      	str	r3, [r4, #4]
 8009b22:	e766      	b.n	80099f2 <LoRaMacMibGetRequestConfirm+0x66>
            mibGet->Param.Contexts = GetCtxs( );
 8009b24:	f7fe ff48 	bl	80089b8 <GetCtxs>
 8009b28:	e767      	b.n	80099fa <LoRaMacMibGetRequestConfirm+0x6e>
            mibGet->Param.DefaultAntennaGain = MacCtx.NvmCtx->MacParamsDefaults.AntennaGain;
 8009b2a:	4a04      	ldr	r2, [pc, #16]	; (8009b3c <LoRaMacMibGetRequestConfirm+0x1b0>)
 8009b2c:	4b04      	ldr	r3, [pc, #16]	; (8009b40 <LoRaMacMibGetRequestConfirm+0x1b4>)
 8009b2e:	58d3      	ldr	r3, [r2, r3]
 8009b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b32:	e7f5      	b.n	8009b20 <LoRaMacMibGetRequestConfirm+0x194>
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 8009b34:	0020      	movs	r0, r4
 8009b36:	f000 fc29 	bl	800a38c <LoRaMacClassBMibGetRequestConfirm>
            break;
 8009b3a:	e75b      	b.n	80099f4 <LoRaMacMibGetRequestConfirm+0x68>
 8009b3c:	20000980 	.word	0x20000980
 8009b40:	00000484 	.word	0x00000484

08009b44 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 8009b44:	b570      	push	{r4, r5, r6, lr}
 8009b46:	0004      	movs	r4, r0
 8009b48:	b088      	sub	sp, #32
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8009b4a:	2603      	movs	r6, #3
    if( mibSet == NULL )
 8009b4c:	2800      	cmp	r0, #0
 8009b4e:	d079      	beq.n	8009c44 <LoRaMacMibSetRequestConfirm+0x100>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 8009b50:	23d0      	movs	r3, #208	; 0xd0
 8009b52:	4d91      	ldr	r5, [pc, #580]	; (8009d98 <LoRaMacMibSetRequestConfirm+0x254>)
 8009b54:	009b      	lsls	r3, r3, #2
 8009b56:	58eb      	ldr	r3, [r5, r3]
    {
        return LORAMAC_STATUS_BUSY;
 8009b58:	3e02      	subs	r6, #2
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 8009b5a:	079b      	lsls	r3, r3, #30
 8009b5c:	d472      	bmi.n	8009c44 <LoRaMacMibSetRequestConfirm+0x100>
    }

    switch( mibSet->Type )
 8009b5e:	7800      	ldrb	r0, [r0, #0]
 8009b60:	2835      	cmp	r0, #53	; 0x35
 8009b62:	d900      	bls.n	8009b66 <LoRaMacMibSetRequestConfirm+0x22>
 8009b64:	e219      	b.n	8009f9a <LoRaMacMibSetRequestConfirm+0x456>
 8009b66:	f7f6 faf5 	bl	8000154 <__gnu_thumb1_case_uhi>
 8009b6a:	0036      	.short	0x0036
 8009b6c:	0045003b 	.word	0x0045003b
 8009b70:	00540050 	.word	0x00540050
 8009b74:	005f005a 	.word	0x005f005a
 8009b78:	00700064 	.word	0x00700064
 8009b7c:	007a0075 	.word	0x007a0075
 8009b80:	0084007f 	.word	0x0084007f
 8009b84:	008e0089 	.word	0x008e0089
 8009b88:	00980093 	.word	0x00980093
 8009b8c:	00a2009d 	.word	0x00a2009d
 8009b90:	00ac00a7 	.word	0x00ac00a7
 8009b94:	00b600b1 	.word	0x00b600b1
 8009b98:	00c000bb 	.word	0x00c000bb
 8009b9c:	00ca00c5 	.word	0x00ca00c5
 8009ba0:	00d500cf 	.word	0x00d500cf
 8009ba4:	00e500db 	.word	0x00e500db
 8009ba8:	00ec0218 	.word	0x00ec0218
 8009bac:	011d0103 	.word	0x011d0103
 8009bb0:	01760155 	.word	0x01760155
 8009bb4:	017b0168 	.word	0x017b0168
 8009bb8:	018b0185 	.word	0x018b0185
 8009bbc:	01970191 	.word	0x01970191
 8009bc0:	01a3019d 	.word	0x01a3019d
 8009bc4:	01da01b4 	.word	0x01da01b4
 8009bc8:	01ea01c9 	.word	0x01ea01c9
 8009bcc:	01f801f1 	.word	0x01f801f1
 8009bd0:	020301fe 	.word	0x020301fe
 8009bd4:	020a      	.short	0x020a
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 8009bd6:	7920      	ldrb	r0, [r4, #4]
 8009bd8:	f7fd ff5e 	bl	8007a98 <SwitchClass>
            }
            break;
        }
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 8009bdc:	0006      	movs	r6, r0
            break;
 8009bde:	e00f      	b.n	8009c00 <LoRaMacMibSetRequestConfirm+0xbc>
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 8009be0:	7923      	ldrb	r3, [r4, #4]
 8009be2:	2b02      	cmp	r3, #2
 8009be4:	d00b      	beq.n	8009bfe <LoRaMacMibSetRequestConfirm+0xba>
                MacCtx.NvmCtx->NetworkActivation = mibSet->Param.NetworkActivation;
 8009be6:	4a6d      	ldr	r2, [pc, #436]	; (8009d9c <LoRaMacMibSetRequestConfirm+0x258>)
 8009be8:	58a9      	ldr	r1, [r5, r2]
 8009bea:	22ea      	movs	r2, #234	; 0xea
 8009bec:	0052      	lsls	r2, r2, #1
 8009bee:	548b      	strb	r3, [r1, r2]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009bf0:	2600      	movs	r6, #0
 8009bf2:	e005      	b.n	8009c00 <LoRaMacMibSetRequestConfirm+0xbc>
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 8009bf4:	6860      	ldr	r0, [r4, #4]
 8009bf6:	f7fd fc6d 	bl	80074d4 <SecureElementSetDevEui>
 8009bfa:	2800      	cmp	r0, #0
 8009bfc:	d0f8      	beq.n	8009bf0 <LoRaMacMibSetRequestConfirm+0xac>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8009bfe:	2603      	movs	r6, #3
        }
    }
    EventRegionNvmCtxChanged( );
 8009c00:	f7fd fcfd 	bl	80075fe <EventRegionNvmCtxChanged>
    EventMacNvmCtxChanged( );
 8009c04:	f7fd fcf6 	bl	80075f4 <EventMacNvmCtxChanged>
    return status;
 8009c08:	e01c      	b.n	8009c44 <LoRaMacMibSetRequestConfirm+0x100>
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 8009c0a:	6860      	ldr	r0, [r4, #4]
 8009c0c:	f7fd fc78 	bl	8007500 <SecureElementSetJoinEui>
 8009c10:	e7f3      	b.n	8009bfa <LoRaMacMibSetRequestConfirm+0xb6>
            MacCtx.NvmCtx->AdrCtrlOn = mibSet->Param.AdrEnable;
 8009c12:	4b62      	ldr	r3, [pc, #392]	; (8009d9c <LoRaMacMibSetRequestConfirm+0x258>)
 8009c14:	7922      	ldrb	r2, [r4, #4]
 8009c16:	58eb      	ldr	r3, [r5, r3]
 8009c18:	33f2      	adds	r3, #242	; 0xf2
                MacCtx.NvmCtx->MacParams.ChannelsDatarate = verify.DatarateParams.Datarate;
 8009c1a:	701a      	strb	r2, [r3, #0]
 8009c1c:	e7e8      	b.n	8009bf0 <LoRaMacMibSetRequestConfirm+0xac>
            MacCtx.NvmCtx->NetID = mibSet->Param.NetID;
 8009c1e:	4b5f      	ldr	r3, [pc, #380]	; (8009d9c <LoRaMacMibSetRequestConfirm+0x258>)
 8009c20:	6862      	ldr	r2, [r4, #4]
 8009c22:	58eb      	ldr	r3, [r5, r3]
 8009c24:	649a      	str	r2, [r3, #72]	; 0x48
 8009c26:	e7e3      	b.n	8009bf0 <LoRaMacMibSetRequestConfirm+0xac>
            MacCtx.NvmCtx->DevAddr = mibSet->Param.DevAddr;
 8009c28:	4b5c      	ldr	r3, [pc, #368]	; (8009d9c <LoRaMacMibSetRequestConfirm+0x258>)
 8009c2a:	6862      	ldr	r2, [r4, #4]
 8009c2c:	58eb      	ldr	r3, [r5, r3]
 8009c2e:	64da      	str	r2, [r3, #76]	; 0x4c
 8009c30:	e7de      	b.n	8009bf0 <LoRaMacMibSetRequestConfirm+0xac>
            if( mibSet->Param.GenAppKey != NULL )
 8009c32:	6861      	ldr	r1, [r4, #4]
 8009c34:	2900      	cmp	r1, #0
 8009c36:	d0e2      	beq.n	8009bfe <LoRaMacMibSetRequestConfirm+0xba>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( GEN_APP_KEY, mibSet->Param.GenAppKey ) )
 8009c38:	2001      	movs	r0, #1
 8009c3a:	f001 f8f5 	bl	800ae28 <LoRaMacCryptoSetKey>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8009c3e:	2611      	movs	r6, #17
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( GEN_APP_KEY, mibSet->Param.GenAppKey ) )
 8009c40:	2800      	cmp	r0, #0
 8009c42:	d0d5      	beq.n	8009bf0 <LoRaMacMibSetRequestConfirm+0xac>
}
 8009c44:	0030      	movs	r0, r6
 8009c46:	b008      	add	sp, #32
 8009c48:	bd70      	pop	{r4, r5, r6, pc}
            if( mibSet->Param.AppKey != NULL )
 8009c4a:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 8009c4c:	2000      	movs	r0, #0
            if( mibSet->Param.AppKey != NULL )
 8009c4e:	2900      	cmp	r1, #0
 8009c50:	d1f3      	bne.n	8009c3a <LoRaMacMibSetRequestConfirm+0xf6>
 8009c52:	e7d4      	b.n	8009bfe <LoRaMacMibSetRequestConfirm+0xba>
            if( mibSet->Param.NwkKey != NULL )
 8009c54:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 8009c56:	2002      	movs	r0, #2
            if( mibSet->Param.NwkKey != NULL )
 8009c58:	2900      	cmp	r1, #0
 8009c5a:	d1ee      	bne.n	8009c3a <LoRaMacMibSetRequestConfirm+0xf6>
 8009c5c:	e7cf      	b.n	8009bfe <LoRaMacMibSetRequestConfirm+0xba>
            if( mibSet->Param.JSIntKey != NULL )
 8009c5e:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( J_S_INT_KEY, mibSet->Param.JSIntKey ) )
 8009c60:	2003      	movs	r0, #3
            if( mibSet->Param.JSIntKey != NULL )
 8009c62:	2900      	cmp	r1, #0
 8009c64:	d1e9      	bne.n	8009c3a <LoRaMacMibSetRequestConfirm+0xf6>
 8009c66:	e7ca      	b.n	8009bfe <LoRaMacMibSetRequestConfirm+0xba>
            if( mibSet->Param.JSEncKey != NULL )
 8009c68:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( J_S_ENC_KEY, mibSet->Param.JSEncKey ) )
 8009c6a:	2004      	movs	r0, #4
            if( mibSet->Param.JSEncKey != NULL )
 8009c6c:	2900      	cmp	r1, #0
 8009c6e:	d1e4      	bne.n	8009c3a <LoRaMacMibSetRequestConfirm+0xf6>
 8009c70:	e7c5      	b.n	8009bfe <LoRaMacMibSetRequestConfirm+0xba>
            if( mibSet->Param.FNwkSIntKey != NULL )
 8009c72:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( F_NWK_S_INT_KEY, mibSet->Param.FNwkSIntKey ) )
 8009c74:	2005      	movs	r0, #5
            if( mibSet->Param.FNwkSIntKey != NULL )
 8009c76:	2900      	cmp	r1, #0
 8009c78:	d1df      	bne.n	8009c3a <LoRaMacMibSetRequestConfirm+0xf6>
 8009c7a:	e7c0      	b.n	8009bfe <LoRaMacMibSetRequestConfirm+0xba>
            if( mibSet->Param.SNwkSIntKey != NULL )
 8009c7c:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( S_NWK_S_INT_KEY, mibSet->Param.SNwkSIntKey ) )
 8009c7e:	2006      	movs	r0, #6
            if( mibSet->Param.SNwkSIntKey != NULL )
 8009c80:	2900      	cmp	r1, #0
 8009c82:	d1da      	bne.n	8009c3a <LoRaMacMibSetRequestConfirm+0xf6>
 8009c84:	e7bb      	b.n	8009bfe <LoRaMacMibSetRequestConfirm+0xba>
            if( mibSet->Param.NwkSEncKey != NULL )
 8009c86:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_ENC_KEY, mibSet->Param.NwkSEncKey ) )
 8009c88:	2007      	movs	r0, #7
            if( mibSet->Param.NwkSEncKey != NULL )
 8009c8a:	2900      	cmp	r1, #0
 8009c8c:	d1d5      	bne.n	8009c3a <LoRaMacMibSetRequestConfirm+0xf6>
 8009c8e:	e7b6      	b.n	8009bfe <LoRaMacMibSetRequestConfirm+0xba>
            if( mibSet->Param.AppSKey != NULL )
 8009c90:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 8009c92:	2008      	movs	r0, #8
            if( mibSet->Param.AppSKey != NULL )
 8009c94:	2900      	cmp	r1, #0
 8009c96:	d1d0      	bne.n	8009c3a <LoRaMacMibSetRequestConfirm+0xf6>
 8009c98:	e7b1      	b.n	8009bfe <LoRaMacMibSetRequestConfirm+0xba>
            if( mibSet->Param.McKEKey != NULL )
 8009c9a:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 8009c9c:	207f      	movs	r0, #127	; 0x7f
            if( mibSet->Param.McKEKey != NULL )
 8009c9e:	2900      	cmp	r1, #0
 8009ca0:	d1cb      	bne.n	8009c3a <LoRaMacMibSetRequestConfirm+0xf6>
 8009ca2:	e7ac      	b.n	8009bfe <LoRaMacMibSetRequestConfirm+0xba>
            if( mibSet->Param.McKey0 != NULL )
 8009ca4:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 8009ca6:	2080      	movs	r0, #128	; 0x80
            if( mibSet->Param.McKey0 != NULL )
 8009ca8:	2900      	cmp	r1, #0
 8009caa:	d1c6      	bne.n	8009c3a <LoRaMacMibSetRequestConfirm+0xf6>
 8009cac:	e7a7      	b.n	8009bfe <LoRaMacMibSetRequestConfirm+0xba>
            if( mibSet->Param.McAppSKey0 != NULL )
 8009cae:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 8009cb0:	2081      	movs	r0, #129	; 0x81
            if( mibSet->Param.McAppSKey0 != NULL )
 8009cb2:	2900      	cmp	r1, #0
 8009cb4:	d1c1      	bne.n	8009c3a <LoRaMacMibSetRequestConfirm+0xf6>
 8009cb6:	e7a2      	b.n	8009bfe <LoRaMacMibSetRequestConfirm+0xba>
            if( mibSet->Param.McNwkSKey0 != NULL )
 8009cb8:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 8009cba:	2082      	movs	r0, #130	; 0x82
            if( mibSet->Param.McNwkSKey0 != NULL )
 8009cbc:	2900      	cmp	r1, #0
 8009cbe:	d1bc      	bne.n	8009c3a <LoRaMacMibSetRequestConfirm+0xf6>
 8009cc0:	e79d      	b.n	8009bfe <LoRaMacMibSetRequestConfirm+0xba>
            if( mibSet->Param.McKey1 != NULL )
 8009cc2:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_1, mibSet->Param.McKey1 ) )
 8009cc4:	2083      	movs	r0, #131	; 0x83
            if( mibSet->Param.McKey1 != NULL )
 8009cc6:	2900      	cmp	r1, #0
 8009cc8:	d1b7      	bne.n	8009c3a <LoRaMacMibSetRequestConfirm+0xf6>
 8009cca:	e798      	b.n	8009bfe <LoRaMacMibSetRequestConfirm+0xba>
            if( mibSet->Param.McAppSKey1 != NULL )
 8009ccc:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_1, mibSet->Param.McAppSKey1 ) )
 8009cce:	2084      	movs	r0, #132	; 0x84
            if( mibSet->Param.McAppSKey1 != NULL )
 8009cd0:	2900      	cmp	r1, #0
 8009cd2:	d1b2      	bne.n	8009c3a <LoRaMacMibSetRequestConfirm+0xf6>
 8009cd4:	e793      	b.n	8009bfe <LoRaMacMibSetRequestConfirm+0xba>
            if( mibSet->Param.McNwkSKey1 != NULL )
 8009cd6:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_1, mibSet->Param.McNwkSKey1 ) )
 8009cd8:	2085      	movs	r0, #133	; 0x85
            if( mibSet->Param.McNwkSKey1 != NULL )
 8009cda:	2900      	cmp	r1, #0
 8009cdc:	d1ad      	bne.n	8009c3a <LoRaMacMibSetRequestConfirm+0xf6>
 8009cde:	e78e      	b.n	8009bfe <LoRaMacMibSetRequestConfirm+0xba>
            if( mibSet->Param.McKey2 != NULL )
 8009ce0:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_2, mibSet->Param.McKey2 ) )
 8009ce2:	2086      	movs	r0, #134	; 0x86
            if( mibSet->Param.McKey2 != NULL )
 8009ce4:	2900      	cmp	r1, #0
 8009ce6:	d1a8      	bne.n	8009c3a <LoRaMacMibSetRequestConfirm+0xf6>
 8009ce8:	e789      	b.n	8009bfe <LoRaMacMibSetRequestConfirm+0xba>
            if( mibSet->Param.McAppSKey2 != NULL )
 8009cea:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_2, mibSet->Param.McAppSKey2 ) )
 8009cec:	2087      	movs	r0, #135	; 0x87
            if( mibSet->Param.McAppSKey2 != NULL )
 8009cee:	2900      	cmp	r1, #0
 8009cf0:	d1a3      	bne.n	8009c3a <LoRaMacMibSetRequestConfirm+0xf6>
 8009cf2:	e784      	b.n	8009bfe <LoRaMacMibSetRequestConfirm+0xba>
            if( mibSet->Param.McNwkSKey2 != NULL )
 8009cf4:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_2, mibSet->Param.McNwkSKey2 ) )
 8009cf6:	2088      	movs	r0, #136	; 0x88
            if( mibSet->Param.McNwkSKey2 != NULL )
 8009cf8:	2900      	cmp	r1, #0
 8009cfa:	d19e      	bne.n	8009c3a <LoRaMacMibSetRequestConfirm+0xf6>
 8009cfc:	e77f      	b.n	8009bfe <LoRaMacMibSetRequestConfirm+0xba>
            if( mibSet->Param.McKey3 != NULL )
 8009cfe:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_3, mibSet->Param.McKey3 ) )
 8009d00:	2089      	movs	r0, #137	; 0x89
            if( mibSet->Param.McKey3 != NULL )
 8009d02:	2900      	cmp	r1, #0
 8009d04:	d199      	bne.n	8009c3a <LoRaMacMibSetRequestConfirm+0xf6>
 8009d06:	e77a      	b.n	8009bfe <LoRaMacMibSetRequestConfirm+0xba>
            if( mibSet->Param.McAppSKey3 != NULL )
 8009d08:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_3, mibSet->Param.McAppSKey3 ) )
 8009d0a:	208a      	movs	r0, #138	; 0x8a
            if( mibSet->Param.McAppSKey3 != NULL )
 8009d0c:	2900      	cmp	r1, #0
 8009d0e:	d000      	beq.n	8009d12 <LoRaMacMibSetRequestConfirm+0x1ce>
 8009d10:	e793      	b.n	8009c3a <LoRaMacMibSetRequestConfirm+0xf6>
 8009d12:	e774      	b.n	8009bfe <LoRaMacMibSetRequestConfirm+0xba>
            if( mibSet->Param.McNwkSKey3 != NULL )
 8009d14:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_3, mibSet->Param.McNwkSKey3 ) )
 8009d16:	208b      	movs	r0, #139	; 0x8b
            if( mibSet->Param.McNwkSKey3 != NULL )
 8009d18:	2900      	cmp	r1, #0
 8009d1a:	d000      	beq.n	8009d1e <LoRaMacMibSetRequestConfirm+0x1da>
 8009d1c:	e78d      	b.n	8009c3a <LoRaMacMibSetRequestConfirm+0xf6>
 8009d1e:	e76e      	b.n	8009bfe <LoRaMacMibSetRequestConfirm+0xba>
            MacCtx.NvmCtx->PublicNetwork = mibSet->Param.EnablePublicNetwork;
 8009d20:	4b1e      	ldr	r3, [pc, #120]	; (8009d9c <LoRaMacMibSetRequestConfirm+0x258>)
 8009d22:	7920      	ldrb	r0, [r4, #4]
 8009d24:	58eb      	ldr	r3, [r5, r3]
 8009d26:	33f1      	adds	r3, #241	; 0xf1
 8009d28:	7018      	strb	r0, [r3, #0]
            Radio.SetPublicNetwork( MacCtx.NvmCtx->PublicNetwork );
 8009d2a:	4b1d      	ldr	r3, [pc, #116]	; (8009da0 <LoRaMacMibSetRequestConfirm+0x25c>)
 8009d2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009d2e:	9303      	str	r3, [sp, #12]
 8009d30:	4798      	blx	r3
 8009d32:	e75d      	b.n	8009bf0 <LoRaMacMibSetRequestConfirm+0xac>
            MacCtx.NvmCtx->RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 8009d34:	4b19      	ldr	r3, [pc, #100]	; (8009d9c <LoRaMacMibSetRequestConfirm+0x258>)
 8009d36:	7921      	ldrb	r1, [r4, #4]
 8009d38:	58ea      	ldr	r2, [r5, r3]
 8009d3a:	2340      	movs	r3, #64	; 0x40
 8009d3c:	33ff      	adds	r3, #255	; 0xff
 8009d3e:	54d1      	strb	r1, [r2, r3]
 8009d40:	e756      	b.n	8009bf0 <LoRaMacMibSetRequestConfirm+0xac>
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8009d42:	222e      	movs	r2, #46	; 0x2e
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8009d44:	7a23      	ldrb	r3, [r4, #8]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8009d46:	4e15      	ldr	r6, [pc, #84]	; (8009d9c <LoRaMacMibSetRequestConfirm+0x258>)
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8009d48:	a905      	add	r1, sp, #20
 8009d4a:	700b      	strb	r3, [r1, #0]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8009d4c:	59ab      	ldr	r3, [r5, r6]
 8009d4e:	32ff      	adds	r2, #255	; 0xff
 8009d50:	5c9a      	ldrb	r2, [r3, r2]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 8009d52:	7818      	ldrb	r0, [r3, #0]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8009d54:	704a      	strb	r2, [r1, #1]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 8009d56:	2207      	movs	r2, #7
 8009d58:	f001 faa5 	bl	800b2a6 <RegionVerify>
 8009d5c:	2800      	cmp	r0, #0
 8009d5e:	d100      	bne.n	8009d62 <LoRaMacMibSetRequestConfirm+0x21e>
 8009d60:	e74d      	b.n	8009bfe <LoRaMacMibSetRequestConfirm+0xba>
                MacCtx.NvmCtx->MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 8009d62:	59ab      	ldr	r3, [r5, r6]
 8009d64:	331d      	adds	r3, #29
 8009d66:	33ff      	adds	r3, #255	; 0xff
                MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 8009d68:	3404      	adds	r4, #4
 8009d6a:	cc06      	ldmia	r4!, {r1, r2}
 8009d6c:	c306      	stmia	r3!, {r1, r2}
 8009d6e:	e73f      	b.n	8009bf0 <LoRaMacMibSetRequestConfirm+0xac>
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8009d70:	222e      	movs	r2, #46	; 0x2e
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8009d72:	7a23      	ldrb	r3, [r4, #8]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8009d74:	4e09      	ldr	r6, [pc, #36]	; (8009d9c <LoRaMacMibSetRequestConfirm+0x258>)
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8009d76:	a905      	add	r1, sp, #20
 8009d78:	700b      	strb	r3, [r1, #0]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8009d7a:	59ab      	ldr	r3, [r5, r6]
 8009d7c:	32ff      	adds	r2, #255	; 0xff
 8009d7e:	5c9a      	ldrb	r2, [r3, r2]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 8009d80:	7818      	ldrb	r0, [r3, #0]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8009d82:	704a      	strb	r2, [r1, #1]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 8009d84:	2207      	movs	r2, #7
 8009d86:	f001 fa8e 	bl	800b2a6 <RegionVerify>
 8009d8a:	2800      	cmp	r0, #0
 8009d8c:	d100      	bne.n	8009d90 <LoRaMacMibSetRequestConfirm+0x24c>
 8009d8e:	e736      	b.n	8009bfe <LoRaMacMibSetRequestConfirm+0xba>
                MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 8009d90:	59ab      	ldr	r3, [r5, r6]
 8009d92:	3328      	adds	r3, #40	; 0x28
 8009d94:	e7e8      	b.n	8009d68 <LoRaMacMibSetRequestConfirm+0x224>
 8009d96:	46c0      	nop			; (mov r8, r8)
 8009d98:	20000980 	.word	0x20000980
 8009d9c:	00000484 	.word	0x00000484
 8009da0:	0800f5a4 	.word	0x0800f5a4
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8009da4:	222e      	movs	r2, #46	; 0x2e
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8009da6:	7a23      	ldrb	r3, [r4, #8]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8009da8:	4e7e      	ldr	r6, [pc, #504]	; (8009fa4 <LoRaMacMibSetRequestConfirm+0x460>)
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8009daa:	a905      	add	r1, sp, #20
 8009dac:	700b      	strb	r3, [r1, #0]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8009dae:	59ab      	ldr	r3, [r5, r6]
 8009db0:	32ff      	adds	r2, #255	; 0xff
 8009db2:	5c9a      	ldrb	r2, [r3, r2]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 8009db4:	7818      	ldrb	r0, [r3, #0]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8009db6:	704a      	strb	r2, [r1, #1]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 8009db8:	2207      	movs	r2, #7
 8009dba:	f001 fa74 	bl	800b2a6 <RegionVerify>
 8009dbe:	2800      	cmp	r0, #0
 8009dc0:	d100      	bne.n	8009dc4 <LoRaMacMibSetRequestConfirm+0x280>
 8009dc2:	e71c      	b.n	8009bfe <LoRaMacMibSetRequestConfirm+0xba>
                MacCtx.NvmCtx->MacParams.RxCChannel = mibSet->Param.RxCChannel;
 8009dc4:	59aa      	ldr	r2, [r5, r6]
 8009dc6:	3404      	adds	r4, #4
 8009dc8:	0013      	movs	r3, r2
 8009dca:	3325      	adds	r3, #37	; 0x25
 8009dcc:	33ff      	adds	r3, #255	; 0xff
 8009dce:	cc03      	ldmia	r4!, {r0, r1}
 8009dd0:	c303      	stmia	r3!, {r0, r1}
                if( ( MacCtx.NvmCtx->DeviceClass == CLASS_C ) && ( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE ) )
 8009dd2:	3b3c      	subs	r3, #60	; 0x3c
 8009dd4:	781b      	ldrb	r3, [r3, #0]
 8009dd6:	2b02      	cmp	r3, #2
 8009dd8:	d000      	beq.n	8009ddc <LoRaMacMibSetRequestConfirm+0x298>
 8009dda:	e709      	b.n	8009bf0 <LoRaMacMibSetRequestConfirm+0xac>
 8009ddc:	33d3      	adds	r3, #211	; 0xd3
 8009dde:	33ff      	adds	r3, #255	; 0xff
 8009de0:	5cd3      	ldrb	r3, [r2, r3]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d100      	bne.n	8009de8 <LoRaMacMibSetRequestConfirm+0x2a4>
 8009de6:	e703      	b.n	8009bf0 <LoRaMacMibSetRequestConfirm+0xac>
                    Radio.Sleep( );
 8009de8:	4b6f      	ldr	r3, [pc, #444]	; (8009fa8 <LoRaMacMibSetRequestConfirm+0x464>)
 8009dea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009dec:	9303      	str	r3, [sp, #12]
 8009dee:	4798      	blx	r3
                    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8009df0:	59ab      	ldr	r3, [r5, r6]
                                                     MacCtx.NvmCtx->MacParams.RxCChannel.Datarate,
 8009df2:	2194      	movs	r1, #148	; 0x94
                    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8009df4:	001a      	movs	r2, r3
 8009df6:	001c      	movs	r4, r3
                                                     MacCtx.NvmCtx->MacParams.RxCChannel.Datarate,
 8009df8:	0049      	lsls	r1, r1, #1
                    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8009dfa:	5659      	ldrsb	r1, [r3, r1]
 8009dfc:	7818      	ldrb	r0, [r3, #0]
 8009dfe:	4b6b      	ldr	r3, [pc, #428]	; (8009fac <LoRaMacMibSetRequestConfirm+0x468>)
 8009e00:	32ff      	adds	r2, #255	; 0xff
 8009e02:	7852      	ldrb	r2, [r2, #1]
 8009e04:	34fc      	adds	r4, #252	; 0xfc
 8009e06:	9300      	str	r3, [sp, #0]
 8009e08:	6823      	ldr	r3, [r4, #0]
 8009e0a:	f001 fa67 	bl	800b2dc <RegionComputeRxWindowParameters>
                    OpenContinuousRxCWindow( );
 8009e0e:	f7fd fd61 	bl	80078d4 <OpenContinuousRxCWindow>
 8009e12:	e6ed      	b.n	8009bf0 <LoRaMacMibSetRequestConfirm+0xac>
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8009e14:	222e      	movs	r2, #46	; 0x2e
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8009e16:	7a23      	ldrb	r3, [r4, #8]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8009e18:	4e62      	ldr	r6, [pc, #392]	; (8009fa4 <LoRaMacMibSetRequestConfirm+0x460>)
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8009e1a:	a905      	add	r1, sp, #20
 8009e1c:	700b      	strb	r3, [r1, #0]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8009e1e:	59ab      	ldr	r3, [r5, r6]
 8009e20:	32ff      	adds	r2, #255	; 0xff
 8009e22:	5c9a      	ldrb	r2, [r3, r2]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 8009e24:	7818      	ldrb	r0, [r3, #0]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8009e26:	704a      	strb	r2, [r1, #1]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 8009e28:	2207      	movs	r2, #7
 8009e2a:	f001 fa3c 	bl	800b2a6 <RegionVerify>
 8009e2e:	2800      	cmp	r0, #0
 8009e30:	d100      	bne.n	8009e34 <LoRaMacMibSetRequestConfirm+0x2f0>
 8009e32:	e6e4      	b.n	8009bfe <LoRaMacMibSetRequestConfirm+0xba>
                MacCtx.NvmCtx->MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 8009e34:	59ab      	ldr	r3, [r5, r6]
 8009e36:	3330      	adds	r3, #48	; 0x30
 8009e38:	e796      	b.n	8009d68 <LoRaMacMibSetRequestConfirm+0x224>
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 8009e3a:	6863      	ldr	r3, [r4, #4]
 8009e3c:	a906      	add	r1, sp, #24
 8009e3e:	9306      	str	r3, [sp, #24]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 8009e40:	2301      	movs	r3, #1
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 8009e42:	710b      	strb	r3, [r1, #4]
            if( RegionChanMaskSet( MacCtx.NvmCtx->Region, &chanMaskSet ) == false )
 8009e44:	4b57      	ldr	r3, [pc, #348]	; (8009fa4 <LoRaMacMibSetRequestConfirm+0x460>)
 8009e46:	58eb      	ldr	r3, [r5, r3]
 8009e48:	7818      	ldrb	r0, [r3, #0]
 8009e4a:	f001 fa3e 	bl	800b2ca <RegionChanMaskSet>
 8009e4e:	2800      	cmp	r0, #0
 8009e50:	d000      	beq.n	8009e54 <LoRaMacMibSetRequestConfirm+0x310>
 8009e52:	e6cd      	b.n	8009bf0 <LoRaMacMibSetRequestConfirm+0xac>
 8009e54:	e6d3      	b.n	8009bfe <LoRaMacMibSetRequestConfirm+0xba>
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 8009e56:	6863      	ldr	r3, [r4, #4]
 8009e58:	a906      	add	r1, sp, #24
 8009e5a:	9306      	str	r3, [sp, #24]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	e7f0      	b.n	8009e42 <LoRaMacMibSetRequestConfirm+0x2fe>
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8009e60:	7922      	ldrb	r2, [r4, #4]
 8009e62:	1e53      	subs	r3, r2, #1
 8009e64:	2b0e      	cmp	r3, #14
 8009e66:	d900      	bls.n	8009e6a <LoRaMacMibSetRequestConfirm+0x326>
 8009e68:	e6c9      	b.n	8009bfe <LoRaMacMibSetRequestConfirm+0xba>
                MacCtx.NvmCtx->MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 8009e6a:	4b4e      	ldr	r3, [pc, #312]	; (8009fa4 <LoRaMacMibSetRequestConfirm+0x460>)
 8009e6c:	58eb      	ldr	r3, [r5, r3]
 8009e6e:	33ff      	adds	r3, #255	; 0xff
 8009e70:	765a      	strb	r2, [r3, #25]
 8009e72:	e6bd      	b.n	8009bf0 <LoRaMacMibSetRequestConfirm+0xac>
            MacCtx.NvmCtx->MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 8009e74:	4b4b      	ldr	r3, [pc, #300]	; (8009fa4 <LoRaMacMibSetRequestConfirm+0x460>)
 8009e76:	6862      	ldr	r2, [r4, #4]
 8009e78:	58eb      	ldr	r3, [r5, r3]
 8009e7a:	33fc      	adds	r3, #252	; 0xfc
 8009e7c:	609a      	str	r2, [r3, #8]
 8009e7e:	e6b7      	b.n	8009bf0 <LoRaMacMibSetRequestConfirm+0xac>
            MacCtx.NvmCtx->MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 8009e80:	4b48      	ldr	r3, [pc, #288]	; (8009fa4 <LoRaMacMibSetRequestConfirm+0x460>)
 8009e82:	6862      	ldr	r2, [r4, #4]
 8009e84:	58eb      	ldr	r3, [r5, r3]
 8009e86:	33fc      	adds	r3, #252	; 0xfc
 8009e88:	60da      	str	r2, [r3, #12]
 8009e8a:	e6b1      	b.n	8009bf0 <LoRaMacMibSetRequestConfirm+0xac>
            MacCtx.NvmCtx->MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 8009e8c:	4b45      	ldr	r3, [pc, #276]	; (8009fa4 <LoRaMacMibSetRequestConfirm+0x460>)
 8009e8e:	6862      	ldr	r2, [r4, #4]
 8009e90:	58eb      	ldr	r3, [r5, r3]
 8009e92:	33fc      	adds	r3, #252	; 0xfc
 8009e94:	611a      	str	r2, [r3, #16]
 8009e96:	e6ab      	b.n	8009bf0 <LoRaMacMibSetRequestConfirm+0xac>
            MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 8009e98:	4b42      	ldr	r3, [pc, #264]	; (8009fa4 <LoRaMacMibSetRequestConfirm+0x460>)
 8009e9a:	6862      	ldr	r2, [r4, #4]
 8009e9c:	58eb      	ldr	r3, [r5, r3]
 8009e9e:	33fc      	adds	r3, #252	; 0xfc
 8009ea0:	615a      	str	r2, [r3, #20]
 8009ea2:	e6a5      	b.n	8009bf0 <LoRaMacMibSetRequestConfirm+0xac>
            MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 8009ea4:	4b3f      	ldr	r3, [pc, #252]	; (8009fa4 <LoRaMacMibSetRequestConfirm+0x460>)
 8009ea6:	6862      	ldr	r2, [r4, #4]
 8009ea8:	58eb      	ldr	r3, [r5, r3]
 8009eaa:	33fc      	adds	r3, #252	; 0xfc
 8009eac:	619a      	str	r2, [r3, #24]
 8009eae:	e69f      	b.n	8009bf0 <LoRaMacMibSetRequestConfirm+0xac>
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 8009eb0:	7923      	ldrb	r3, [r4, #4]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DEF_TX_DR ) == true )
 8009eb2:	4c3c      	ldr	r4, [pc, #240]	; (8009fa4 <LoRaMacMibSetRequestConfirm+0x460>)
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 8009eb4:	ae05      	add	r6, sp, #20
 8009eb6:	7033      	strb	r3, [r6, #0]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DEF_TX_DR ) == true )
 8009eb8:	592b      	ldr	r3, [r5, r4]
 8009eba:	2206      	movs	r2, #6
 8009ebc:	7818      	ldrb	r0, [r3, #0]
 8009ebe:	0031      	movs	r1, r6
 8009ec0:	f001 f9f1 	bl	800b2a6 <RegionVerify>
 8009ec4:	2800      	cmp	r0, #0
 8009ec6:	d100      	bne.n	8009eca <LoRaMacMibSetRequestConfirm+0x386>
 8009ec8:	e699      	b.n	8009bfe <LoRaMacMibSetRequestConfirm+0xba>
                MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate = verify.DatarateParams.Datarate;
 8009eca:	592b      	ldr	r3, [r5, r4]
 8009ecc:	7832      	ldrb	r2, [r6, #0]
 8009ece:	715a      	strb	r2, [r3, #5]
 8009ed0:	e68e      	b.n	8009bf0 <LoRaMacMibSetRequestConfirm+0xac>
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8009ed2:	2296      	movs	r2, #150	; 0x96
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 8009ed4:	7923      	ldrb	r3, [r4, #4]
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8009ed6:	4c33      	ldr	r4, [pc, #204]	; (8009fa4 <LoRaMacMibSetRequestConfirm+0x460>)
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 8009ed8:	ae05      	add	r6, sp, #20
 8009eda:	7033      	strb	r3, [r6, #0]
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8009edc:	592b      	ldr	r3, [r5, r4]
 8009ede:	0052      	lsls	r2, r2, #1
 8009ee0:	5c9a      	ldrb	r2, [r3, r2]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_DR ) == true )
 8009ee2:	7818      	ldrb	r0, [r3, #0]
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8009ee4:	70b2      	strb	r2, [r6, #2]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_DR ) == true )
 8009ee6:	0031      	movs	r1, r6
 8009ee8:	2205      	movs	r2, #5
 8009eea:	f001 f9dc 	bl	800b2a6 <RegionVerify>
 8009eee:	2800      	cmp	r0, #0
 8009ef0:	d100      	bne.n	8009ef4 <LoRaMacMibSetRequestConfirm+0x3b0>
 8009ef2:	e684      	b.n	8009bfe <LoRaMacMibSetRequestConfirm+0xba>
                MacCtx.NvmCtx->MacParams.ChannelsDatarate = verify.DatarateParams.Datarate;
 8009ef4:	592b      	ldr	r3, [r5, r4]
 8009ef6:	33f9      	adds	r3, #249	; 0xf9
 8009ef8:	7832      	ldrb	r2, [r6, #0]
 8009efa:	e68e      	b.n	8009c1a <LoRaMacMibSetRequestConfirm+0xd6>
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 8009efc:	7923      	ldrb	r3, [r4, #4]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DEF_TX_POWER ) == true )
 8009efe:	4c29      	ldr	r4, [pc, #164]	; (8009fa4 <LoRaMacMibSetRequestConfirm+0x460>)
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 8009f00:	ae05      	add	r6, sp, #20
 8009f02:	7033      	strb	r3, [r6, #0]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DEF_TX_POWER ) == true )
 8009f04:	592b      	ldr	r3, [r5, r4]
 8009f06:	220a      	movs	r2, #10
 8009f08:	7818      	ldrb	r0, [r3, #0]
 8009f0a:	0031      	movs	r1, r6
 8009f0c:	f001 f9cb 	bl	800b2a6 <RegionVerify>
 8009f10:	2800      	cmp	r0, #0
 8009f12:	d100      	bne.n	8009f16 <LoRaMacMibSetRequestConfirm+0x3d2>
 8009f14:	e673      	b.n	8009bfe <LoRaMacMibSetRequestConfirm+0xba>
                MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower = verify.TxPower;
 8009f16:	592b      	ldr	r3, [r5, r4]
 8009f18:	7832      	ldrb	r2, [r6, #0]
 8009f1a:	711a      	strb	r2, [r3, #4]
 8009f1c:	e668      	b.n	8009bf0 <LoRaMacMibSetRequestConfirm+0xac>
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 8009f1e:	7923      	ldrb	r3, [r4, #4]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_POWER ) == true )
 8009f20:	4c20      	ldr	r4, [pc, #128]	; (8009fa4 <LoRaMacMibSetRequestConfirm+0x460>)
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 8009f22:	ae05      	add	r6, sp, #20
 8009f24:	7033      	strb	r3, [r6, #0]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_POWER ) == true )
 8009f26:	592b      	ldr	r3, [r5, r4]
 8009f28:	2209      	movs	r2, #9
 8009f2a:	7818      	ldrb	r0, [r3, #0]
 8009f2c:	0031      	movs	r1, r6
 8009f2e:	f001 f9ba 	bl	800b2a6 <RegionVerify>
 8009f32:	2800      	cmp	r0, #0
 8009f34:	d100      	bne.n	8009f38 <LoRaMacMibSetRequestConfirm+0x3f4>
 8009f36:	e662      	b.n	8009bfe <LoRaMacMibSetRequestConfirm+0xba>
                MacCtx.NvmCtx->MacParams.ChannelsTxPower = verify.TxPower;
 8009f38:	592b      	ldr	r3, [r5, r4]
 8009f3a:	33f8      	adds	r3, #248	; 0xf8
 8009f3c:	e7dc      	b.n	8009ef8 <LoRaMacMibSetRequestConfirm+0x3b4>
            MacCtx.NvmCtx->MacParams.SystemMaxRxError = MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 8009f3e:	4b19      	ldr	r3, [pc, #100]	; (8009fa4 <LoRaMacMibSetRequestConfirm+0x460>)
 8009f40:	6862      	ldr	r2, [r4, #4]
 8009f42:	58eb      	ldr	r3, [r5, r3]
 8009f44:	609a      	str	r2, [r3, #8]
 8009f46:	33fc      	adds	r3, #252	; 0xfc
 8009f48:	601a      	str	r2, [r3, #0]
 8009f4a:	e651      	b.n	8009bf0 <LoRaMacMibSetRequestConfirm+0xac>
            MacCtx.NvmCtx->MacParams.MinRxSymbols = MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 8009f4c:	4b15      	ldr	r3, [pc, #84]	; (8009fa4 <LoRaMacMibSetRequestConfirm+0x460>)
 8009f4e:	7922      	ldrb	r2, [r4, #4]
 8009f50:	58eb      	ldr	r3, [r5, r3]
 8009f52:	731a      	strb	r2, [r3, #12]
 8009f54:	33ff      	adds	r3, #255	; 0xff
 8009f56:	705a      	strb	r2, [r3, #1]
 8009f58:	e64a      	b.n	8009bf0 <LoRaMacMibSetRequestConfirm+0xac>
            MacCtx.NvmCtx->MacParams.AntennaGain = mibSet->Param.AntennaGain;
 8009f5a:	4b12      	ldr	r3, [pc, #72]	; (8009fa4 <LoRaMacMibSetRequestConfirm+0x460>)
 8009f5c:	6862      	ldr	r2, [r4, #4]
 8009f5e:	58eb      	ldr	r3, [r5, r3]
 8009f60:	33fc      	adds	r3, #252	; 0xfc
 8009f62:	639a      	str	r2, [r3, #56]	; 0x38
 8009f64:	e644      	b.n	8009bf0 <LoRaMacMibSetRequestConfirm+0xac>
            MacCtx.NvmCtx->MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 8009f66:	4b0f      	ldr	r3, [pc, #60]	; (8009fa4 <LoRaMacMibSetRequestConfirm+0x460>)
 8009f68:	6862      	ldr	r2, [r4, #4]
 8009f6a:	58eb      	ldr	r3, [r5, r3]
 8009f6c:	641a      	str	r2, [r3, #64]	; 0x40
 8009f6e:	e63f      	b.n	8009bf0 <LoRaMacMibSetRequestConfirm+0xac>
            if( mibSet->Param.Contexts != 0 )
 8009f70:	6860      	ldr	r0, [r4, #4]
 8009f72:	2800      	cmp	r0, #0
 8009f74:	d100      	bne.n	8009f78 <LoRaMacMibSetRequestConfirm+0x434>
 8009f76:	e642      	b.n	8009bfe <LoRaMacMibSetRequestConfirm+0xba>
                status = RestoreCtxs( mibSet->Param.Contexts );
 8009f78:	f7fe fd5a 	bl	8008a30 <RestoreCtxs>
 8009f7c:	e62e      	b.n	8009bdc <LoRaMacMibSetRequestConfirm+0x98>
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 8009f7e:	79a3      	ldrb	r3, [r4, #6]
 8009f80:	2b01      	cmp	r3, #1
 8009f82:	d900      	bls.n	8009f86 <LoRaMacMibSetRequestConfirm+0x442>
 8009f84:	e63b      	b.n	8009bfe <LoRaMacMibSetRequestConfirm+0xba>
                MacCtx.NvmCtx->Version = mibSet->Param.AbpLrWanVersion;
 8009f86:	4b07      	ldr	r3, [pc, #28]	; (8009fa4 <LoRaMacMibSetRequestConfirm+0x460>)
 8009f88:	6861      	ldr	r1, [r4, #4]
 8009f8a:	58ea      	ldr	r2, [r5, r3]
 8009f8c:	23e8      	movs	r3, #232	; 0xe8
 8009f8e:	005b      	lsls	r3, r3, #1
 8009f90:	50d1      	str	r1, [r2, r3]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 8009f92:	6860      	ldr	r0, [r4, #4]
 8009f94:	f000 fd8e 	bl	800aab4 <LoRaMacCryptoSetLrWanVersion>
 8009f98:	e651      	b.n	8009c3e <LoRaMacMibSetRequestConfirm+0xfa>
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 8009f9a:	0020      	movs	r0, r4
 8009f9c:	f000 f9f8 	bl	800a390 <LoRaMacMibClassBSetRequestConfirm>
 8009fa0:	e61c      	b.n	8009bdc <LoRaMacMibSetRequestConfirm+0x98>
 8009fa2:	46c0      	nop			; (mov r8, r8)
 8009fa4:	00000484 	.word	0x00000484
 8009fa8:	0800f5a4 	.word	0x0800f5a4
 8009fac:	20000d60 	.word	0x20000d60

08009fb0 <LoRaMacMlmeRequest>:

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8009fb0:	2300      	movs	r3, #0
{
 8009fb2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009fb4:	b085      	sub	sp, #20
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8009fb6:	aa02      	add	r2, sp, #8
{
 8009fb8:	0005      	movs	r5, r0
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8009fba:	8013      	strh	r3, [r2, #0]

    if( mlmeRequest == NULL )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8009fbc:	2703      	movs	r7, #3
    if( mlmeRequest == NULL )
 8009fbe:	4298      	cmp	r0, r3
 8009fc0:	d004      	beq.n	8009fcc <LoRaMacMlmeRequest+0x1c>
    }
    if( LoRaMacIsBusy( ) == true )
 8009fc2:	f7fe f92b 	bl	800821c <LoRaMacIsBusy>
 8009fc6:	2800      	cmp	r0, #0
 8009fc8:	d003      	beq.n	8009fd2 <LoRaMacMlmeRequest+0x22>
    {
        return LORAMAC_STATUS_BUSY;
 8009fca:	2701      	movs	r7, #1
    {
        LoRaMacConfirmQueueAdd( &queueElement );
        EventMacNvmCtxChanged( );
    }
    return status;
}
 8009fcc:	0038      	movs	r0, r7
 8009fce:	b005      	add	sp, #20
 8009fd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( LoRaMacConfirmQueueIsFull( ) == true )
 8009fd2:	f000 fc0f 	bl	800a7f4 <LoRaMacConfirmQueueIsFull>
 8009fd6:	2800      	cmp	r0, #0
 8009fd8:	d1f7      	bne.n	8009fca <LoRaMacMlmeRequest+0x1a>
    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8009fda:	f000 fc05 	bl	800a7e8 <LoRaMacConfirmQueueGetCnt>
 8009fde:	1e01      	subs	r1, r0, #0
 8009fe0:	d103      	bne.n	8009fea <LoRaMacMlmeRequest+0x3a>
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 8009fe2:	2214      	movs	r2, #20
 8009fe4:	4849      	ldr	r0, [pc, #292]	; (800a10c <LoRaMacMlmeRequest+0x15c>)
 8009fe6:	f003 f813 	bl	800d010 <memset1>
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009fea:	2301      	movs	r3, #1
    MacCtx.MacFlags.Bits.MlmeReq = 1;
 8009fec:	2104      	movs	r1, #4
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009fee:	4c48      	ldr	r4, [pc, #288]	; (800a110 <LoRaMacMlmeRequest+0x160>)
 8009ff0:	4a48      	ldr	r2, [pc, #288]	; (800a114 <LoRaMacMlmeRequest+0x164>)
    queueElement.Request = mlmeRequest->Type;
 8009ff2:	ae03      	add	r6, sp, #12
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009ff4:	54a3      	strb	r3, [r4, r2]
    MacCtx.MacFlags.Bits.MlmeReq = 1;
 8009ff6:	4a48      	ldr	r2, [pc, #288]	; (800a118 <LoRaMacMlmeRequest+0x168>)
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009ff8:	7073      	strb	r3, [r6, #1]
    MacCtx.MacFlags.Bits.MlmeReq = 1;
 8009ffa:	5ca0      	ldrb	r0, [r4, r2]
 8009ffc:	9201      	str	r2, [sp, #4]
 8009ffe:	4301      	orrs	r1, r0
 800a000:	54a1      	strb	r1, [r4, r2]
    queueElement.RestrictCommonReadyToHandle = false;
 800a002:	2100      	movs	r1, #0
    queueElement.Request = mlmeRequest->Type;
 800a004:	7828      	ldrb	r0, [r5, #0]
    queueElement.RestrictCommonReadyToHandle = false;
 800a006:	70f1      	strb	r1, [r6, #3]
    queueElement.Request = mlmeRequest->Type;
 800a008:	7030      	strb	r0, [r6, #0]
    switch( mlmeRequest->Type )
 800a00a:	280d      	cmp	r0, #13
 800a00c:	d900      	bls.n	800a010 <LoRaMacMlmeRequest+0x60>
 800a00e:	e07b      	b.n	800a108 <LoRaMacMlmeRequest+0x158>
 800a010:	f7f6 f88c 	bl	800012c <__gnu_thumb1_case_uqi>
 800a014:	397a7a07 	.word	0x397a7a07
 800a018:	7a7a4e48 	.word	0x7a7a4e48
 800a01c:	6e7a547a 	.word	0x6e7a547a
 800a020:	6a58      	.short	0x6a58
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 800a022:	23d0      	movs	r3, #208	; 0xd0
 800a024:	009b      	lsls	r3, r3, #2
 800a026:	58e7      	ldr	r7, [r4, r3]
 800a028:	2320      	movs	r3, #32
 800a02a:	401f      	ands	r7, r3
 800a02c:	d1cd      	bne.n	8009fca <LoRaMacMlmeRequest+0x1a>
            ResetMacParameters( );
 800a02e:	f7fd fbd7 	bl	80077e0 <ResetMacParameters>
            MacCtx.NvmCtx->MacParams.ChannelsDatarate = RegionAlternateDr( MacCtx.NvmCtx->Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 800a032:	2104      	movs	r1, #4
 800a034:	4b39      	ldr	r3, [pc, #228]	; (800a11c <LoRaMacMlmeRequest+0x16c>)
 800a036:	003a      	movs	r2, r7
 800a038:	58e3      	ldr	r3, [r4, r3]
 800a03a:	9300      	str	r3, [sp, #0]
 800a03c:	5669      	ldrsb	r1, [r5, r1]
 800a03e:	7818      	ldrb	r0, [r3, #0]
 800a040:	f001 f9a1 	bl	800b386 <RegionAlternateDr>
 800a044:	9b00      	ldr	r3, [sp, #0]
 800a046:	33f9      	adds	r3, #249	; 0xf9
 800a048:	7018      	strb	r0, [r3, #0]
            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 800a04a:	2307      	movs	r3, #7
            status = SendReJoinReq( JOIN_REQ );
 800a04c:	20ff      	movs	r0, #255	; 0xff
            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 800a04e:	7073      	strb	r3, [r6, #1]
            status = SendReJoinReq( JOIN_REQ );
 800a050:	f7fe fc42 	bl	80088d8 <SendReJoinReq>
 800a054:	1e07      	subs	r7, r0, #0
            if( status != LORAMAC_STATUS_OK )
 800a056:	d01e      	beq.n	800a096 <LoRaMacMlmeRequest+0xe6>
                MacCtx.NvmCtx->MacParams.ChannelsDatarate = RegionAlternateDr( MacCtx.NvmCtx->Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 800a058:	2104      	movs	r1, #4
 800a05a:	4b30      	ldr	r3, [pc, #192]	; (800a11c <LoRaMacMlmeRequest+0x16c>)
 800a05c:	5669      	ldrsb	r1, [r5, r1]
 800a05e:	58e6      	ldr	r6, [r4, r3]
 800a060:	2201      	movs	r2, #1
 800a062:	7830      	ldrb	r0, [r6, #0]
 800a064:	f001 f98f 	bl	800b386 <RegionAlternateDr>
 800a068:	36f9      	adds	r6, #249	; 0xf9
 800a06a:	7030      	strb	r0, [r6, #0]
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 800a06c:	f000 fbbc 	bl	800a7e8 <LoRaMacConfirmQueueGetCnt>
 800a070:	2800      	cmp	r0, #0
 800a072:	d1ab      	bne.n	8009fcc <LoRaMacMlmeRequest+0x1c>
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800a074:	2204      	movs	r2, #4
            MacCtx.NodeAckRequested = false;
 800a076:	4b2a      	ldr	r3, [pc, #168]	; (800a120 <LoRaMacMlmeRequest+0x170>)
 800a078:	54e0      	strb	r0, [r4, r3]
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800a07a:	9b01      	ldr	r3, [sp, #4]
 800a07c:	5ce3      	ldrb	r3, [r4, r3]
 800a07e:	4393      	bics	r3, r2
 800a080:	9a01      	ldr	r2, [sp, #4]
 800a082:	54a3      	strb	r3, [r4, r2]
 800a084:	e7a2      	b.n	8009fcc <LoRaMacMlmeRequest+0x1c>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800a086:	2200      	movs	r2, #0
 800a088:	2002      	movs	r0, #2
 800a08a:	a902      	add	r1, sp, #8
 800a08c:	f000 f9be 	bl	800a40c <LoRaMacCommandsAddCmd>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800a090:	2713      	movs	r7, #19
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800a092:	2800      	cmp	r0, #0
 800a094:	d1ea      	bne.n	800a06c <LoRaMacMlmeRequest+0xbc>
        LoRaMacConfirmQueueAdd( &queueElement );
 800a096:	0030      	movs	r0, r6
 800a098:	f000 fad8 	bl	800a64c <LoRaMacConfirmQueueAdd>
        EventMacNvmCtxChanged( );
 800a09c:	2700      	movs	r7, #0
 800a09e:	f7fd faa9 	bl	80075f4 <EventMacNvmCtxChanged>
 800a0a2:	e793      	b.n	8009fcc <LoRaMacMlmeRequest+0x1c>
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 800a0a4:	88a8      	ldrh	r0, [r5, #4]
 800a0a6:	f7fe fc43 	bl	8008930 <SetTxContinuousWave>
            status = SetTxContinuousWave1( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 800a0aa:	1e07      	subs	r7, r0, #0
    if( status != LORAMAC_STATUS_OK )
 800a0ac:	d1de      	bne.n	800a06c <LoRaMacMlmeRequest+0xbc>
 800a0ae:	e7f2      	b.n	800a096 <LoRaMacMlmeRequest+0xe6>
            status = SetTxContinuousWave1( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 800a0b0:	7b2a      	ldrb	r2, [r5, #12]
 800a0b2:	88a8      	ldrh	r0, [r5, #4]
 800a0b4:	68a9      	ldr	r1, [r5, #8]
 800a0b6:	f7fe fc69 	bl	800898c <SetTxContinuousWave1>
 800a0ba:	e7f6      	b.n	800a0aa <LoRaMacMlmeRequest+0xfa>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800a0bc:	2200      	movs	r2, #0
 800a0be:	a902      	add	r1, sp, #8
 800a0c0:	200d      	movs	r0, #13
 800a0c2:	e7e3      	b.n	800a08c <LoRaMacMlmeRequest+0xdc>
            if( MacCtx.NvmCtx->DeviceClass == CLASS_A )
 800a0c4:	4b15      	ldr	r3, [pc, #84]	; (800a11c <LoRaMacMlmeRequest+0x16c>)
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800a0c6:	2702      	movs	r7, #2
            if( MacCtx.NvmCtx->DeviceClass == CLASS_A )
 800a0c8:	58e3      	ldr	r3, [r4, r3]
 800a0ca:	33f0      	adds	r3, #240	; 0xf0
 800a0cc:	781b      	ldrb	r3, [r3, #0]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d1cc      	bne.n	800a06c <LoRaMacMlmeRequest+0xbc>
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 800a0d2:	792d      	ldrb	r5, [r5, #4]
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 800a0d4:	0768      	lsls	r0, r5, #29
 800a0d6:	0f40      	lsrs	r0, r0, #29
 800a0d8:	f000 f953 	bl	800a382 <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 800a0dc:	ab02      	add	r3, sp, #8
 800a0de:	701d      	strb	r5, [r3, #0]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 800a0e0:	2201      	movs	r2, #1
 800a0e2:	0019      	movs	r1, r3
 800a0e4:	2010      	movs	r0, #16
 800a0e6:	e7d1      	b.n	800a08c <LoRaMacMlmeRequest+0xdc>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800a0e8:	2200      	movs	r2, #0
 800a0ea:	a902      	add	r1, sp, #8
 800a0ec:	2012      	movs	r0, #18
 800a0ee:	e7cd      	b.n	800a08c <LoRaMacMlmeRequest+0xdc>
            queueElement.RestrictCommonReadyToHandle = true;
 800a0f0:	70f3      	strb	r3, [r6, #3]
            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 800a0f2:	f000 f937 	bl	800a364 <LoRaMacClassBIsAcquisitionInProgress>
                status = LORAMAC_STATUS_BUSY;
 800a0f6:	2701      	movs	r7, #1
            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 800a0f8:	1e05      	subs	r5, r0, #0
 800a0fa:	d1b7      	bne.n	800a06c <LoRaMacMlmeRequest+0xbc>
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 800a0fc:	f000 f92f 	bl	800a35e <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 800a100:	0028      	movs	r0, r5
 800a102:	f000 f931 	bl	800a368 <LoRaMacClassBBeaconTimerEvent>
 800a106:	e7c6      	b.n	800a096 <LoRaMacMlmeRequest+0xe6>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800a108:	2702      	movs	r7, #2
 800a10a:	e7af      	b.n	800a06c <LoRaMacMlmeRequest+0xbc>
 800a10c:	20000dd0 	.word	0x20000dd0
 800a110:	20000980 	.word	0x20000980
 800a114:	00000451 	.word	0x00000451
 800a118:	00000481 	.word	0x00000481
 800a11c:	00000484 	.word	0x00000484
 800a120:	00000414 	.word	0x00000414

0800a124 <LoRaMacMcpsRequest>:

LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest )
{
 800a124:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a126:	0004      	movs	r4, r0
 800a128:	b089      	sub	sp, #36	; 0x24
    void* fBuffer;
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
    bool readyToSend = false;

    if( mcpsRequest == NULL )
 800a12a:	2800      	cmp	r0, #0
 800a12c:	d103      	bne.n	800a136 <LoRaMacMcpsRequest+0x12>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800a12e:	2503      	movs	r5, #3
        }
    }

    EventMacNvmCtxChanged( );
    return status;
}
 800a130:	0028      	movs	r0, r5
 800a132:	b009      	add	sp, #36	; 0x24
 800a134:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( LoRaMacIsBusy( ) == true )
 800a136:	f7fe f871 	bl	800821c <LoRaMacIsBusy>
        return LORAMAC_STATUS_BUSY;
 800a13a:	2501      	movs	r5, #1
    if( LoRaMacIsBusy( ) == true )
 800a13c:	1e06      	subs	r6, r0, #0
 800a13e:	9001      	str	r0, [sp, #4]
 800a140:	d1f6      	bne.n	800a130 <LoRaMacMcpsRequest+0xc>
    macHdr.Value = 0;
 800a142:	ab04      	add	r3, sp, #16
 800a144:	7018      	strb	r0, [r3, #0]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 800a146:	0001      	movs	r1, r0
 800a148:	2214      	movs	r2, #20
 800a14a:	4845      	ldr	r0, [pc, #276]	; (800a260 <LoRaMacMcpsRequest+0x13c>)
 800a14c:	f002 ff60 	bl	800d010 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a150:	4f44      	ldr	r7, [pc, #272]	; (800a264 <LoRaMacMcpsRequest+0x140>)
 800a152:	4b45      	ldr	r3, [pc, #276]	; (800a268 <LoRaMacMcpsRequest+0x144>)
 800a154:	54fd      	strb	r5, [r7, r3]
    MacCtx.AckTimeoutRetriesCounter = 1;
 800a156:	4b45      	ldr	r3, [pc, #276]	; (800a26c <LoRaMacMcpsRequest+0x148>)
 800a158:	54fd      	strb	r5, [r7, r3]
    switch( mcpsRequest->Type )
 800a15a:	7823      	ldrb	r3, [r4, #0]
 800a15c:	42ab      	cmp	r3, r5
 800a15e:	d05c      	beq.n	800a21a <LoRaMacMcpsRequest+0xf6>
 800a160:	2b00      	cmp	r3, #0
 800a162:	d004      	beq.n	800a16e <LoRaMacMcpsRequest+0x4a>
 800a164:	2b03      	cmp	r3, #3
 800a166:	d066      	beq.n	800a236 <LoRaMacMcpsRequest+0x112>
    int8_t datarate = DR_0;
 800a168:	9600      	str	r6, [sp, #0]
    uint8_t fPort = 0;
 800a16a:	9601      	str	r6, [sp, #4]
 800a16c:	e013      	b.n	800a196 <LoRaMacMcpsRequest+0x72>
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 800a16e:	221f      	movs	r2, #31
            MacCtx.AckTimeoutRetries = 1;
 800a170:	4b3f      	ldr	r3, [pc, #252]	; (800a270 <LoRaMacMcpsRequest+0x14c>)
 800a172:	54fd      	strb	r5, [r7, r3]
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 800a174:	ab04      	add	r3, sp, #16
 800a176:	781b      	ldrb	r3, [r3, #0]
 800a178:	401a      	ands	r2, r3
 800a17a:	2340      	movs	r3, #64	; 0x40
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 800a17c:	4313      	orrs	r3, r2
 800a17e:	aa04      	add	r2, sp, #16
 800a180:	7013      	strb	r3, [r2, #0]
            fPort = mcpsRequest->Req.Confirmed.fPort;
 800a182:	7923      	ldrb	r3, [r4, #4]
 800a184:	9301      	str	r3, [sp, #4]
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
 800a186:	68a3      	ldr	r3, [r4, #8]
 800a188:	9302      	str	r3, [sp, #8]
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
 800a18a:	89a3      	ldrh	r3, [r4, #12]
 800a18c:	9303      	str	r3, [sp, #12]
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 800a18e:	230e      	movs	r3, #14
            readyToSend = true;
 800a190:	2601      	movs	r6, #1
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 800a192:	56e3      	ldrsb	r3, [r4, r3]
 800a194:	9300      	str	r3, [sp, #0]
    getPhy.Attribute = PHY_MIN_TX_DR;
 800a196:	2302      	movs	r3, #2
    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800a198:	2296      	movs	r2, #150	; 0x96
 800a19a:	4d36      	ldr	r5, [pc, #216]	; (800a274 <LoRaMacMcpsRequest+0x150>)
    getPhy.Attribute = PHY_MIN_TX_DR;
 800a19c:	a905      	add	r1, sp, #20
 800a19e:	700b      	strb	r3, [r1, #0]
    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800a1a0:	597b      	ldr	r3, [r7, r5]
 800a1a2:	0052      	lsls	r2, r2, #1
 800a1a4:	5c9a      	ldrb	r2, [r3, r2]
 800a1a6:	708a      	strb	r2, [r1, #2]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a1a8:	7818      	ldrb	r0, [r3, #0]
 800a1aa:	f001 f859 	bl	800b260 <RegionGetPhyParam>
 800a1ae:	9006      	str	r0, [sp, #24]
    if( readyToSend == true )
 800a1b0:	2e00      	cmp	r6, #0
 800a1b2:	d053      	beq.n	800a25c <LoRaMacMcpsRequest+0x138>
        if( MacCtx.NvmCtx->AdrCtrlOn == false )
 800a1b4:	597b      	ldr	r3, [r7, r5]
 800a1b6:	001a      	movs	r2, r3
 800a1b8:	32f2      	adds	r2, #242	; 0xf2
 800a1ba:	7812      	ldrb	r2, [r2, #0]
 800a1bc:	2a00      	cmp	r2, #0
 800a1be:	d118      	bne.n	800a1f2 <LoRaMacMcpsRequest+0xce>
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 800a1c0:	9900      	ldr	r1, [sp, #0]
 800a1c2:	1c02      	adds	r2, r0, #0
 800a1c4:	b240      	sxtb	r0, r0
            verify.DatarateParams.Datarate = datarate;
 800a1c6:	ae07      	add	r6, sp, #28
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 800a1c8:	4288      	cmp	r0, r1
 800a1ca:	da01      	bge.n	800a1d0 <LoRaMacMcpsRequest+0xac>
 800a1cc:	466a      	mov	r2, sp
 800a1ce:	7812      	ldrb	r2, [r2, #0]
            verify.DatarateParams.Datarate = datarate;
 800a1d0:	7032      	strb	r2, [r6, #0]
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800a1d2:	2296      	movs	r2, #150	; 0x96
 800a1d4:	0052      	lsls	r2, r2, #1
 800a1d6:	5c9a      	ldrb	r2, [r3, r2]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_DR ) == true )
 800a1d8:	7818      	ldrb	r0, [r3, #0]
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800a1da:	70b2      	strb	r2, [r6, #2]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_DR ) == true )
 800a1dc:	0031      	movs	r1, r6
 800a1de:	2205      	movs	r2, #5
 800a1e0:	f001 f861 	bl	800b2a6 <RegionVerify>
 800a1e4:	2800      	cmp	r0, #0
 800a1e6:	d0a2      	beq.n	800a12e <LoRaMacMcpsRequest+0xa>
                MacCtx.NvmCtx->MacParams.ChannelsDatarate = verify.DatarateParams.Datarate;
 800a1e8:	4b1e      	ldr	r3, [pc, #120]	; (800a264 <LoRaMacMcpsRequest+0x140>)
 800a1ea:	7832      	ldrb	r2, [r6, #0]
 800a1ec:	595b      	ldr	r3, [r3, r5]
 800a1ee:	33f9      	adds	r3, #249	; 0xf9
 800a1f0:	701a      	strb	r2, [r3, #0]
        status = Send( &macHdr, fPort, fBuffer, fBufferSize );
 800a1f2:	9b03      	ldr	r3, [sp, #12]
 800a1f4:	9a02      	ldr	r2, [sp, #8]
 800a1f6:	9901      	ldr	r1, [sp, #4]
 800a1f8:	a804      	add	r0, sp, #16
 800a1fa:	f7fe fad5 	bl	80087a8 <Send>
 800a1fe:	4b19      	ldr	r3, [pc, #100]	; (800a264 <LoRaMacMcpsRequest+0x140>)
 800a200:	1e05      	subs	r5, r0, #0
        if( status == LORAMAC_STATUS_OK )
 800a202:	d127      	bne.n	800a254 <LoRaMacMcpsRequest+0x130>
            MacCtx.McpsConfirm.McpsRequest = mcpsRequest->Type;
 800a204:	7821      	ldrb	r1, [r4, #0]
 800a206:	4a1c      	ldr	r2, [pc, #112]	; (800a278 <LoRaMacMcpsRequest+0x154>)
 800a208:	5499      	strb	r1, [r3, r2]
            MacCtx.MacFlags.Bits.McpsReq = 1;
 800a20a:	2201      	movs	r2, #1
 800a20c:	491b      	ldr	r1, [pc, #108]	; (800a27c <LoRaMacMcpsRequest+0x158>)
 800a20e:	5c58      	ldrb	r0, [r3, r1]
 800a210:	4302      	orrs	r2, r0
 800a212:	545a      	strb	r2, [r3, r1]
    EventMacNvmCtxChanged( );
 800a214:	f7fd f9ee 	bl	80075f4 <EventMacNvmCtxChanged>
    return status;
 800a218:	e78a      	b.n	800a130 <LoRaMacMcpsRequest+0xc>
            MacCtx.AckTimeoutRetries = MIN( mcpsRequest->Req.Confirmed.NbTrials, MAX_ACK_RETRIES );
 800a21a:	7be2      	ldrb	r2, [r4, #15]
 800a21c:	1c13      	adds	r3, r2, #0
 800a21e:	2a08      	cmp	r2, #8
 800a220:	d900      	bls.n	800a224 <LoRaMacMcpsRequest+0x100>
 800a222:	2308      	movs	r3, #8
 800a224:	4a12      	ldr	r2, [pc, #72]	; (800a270 <LoRaMacMcpsRequest+0x14c>)
 800a226:	54bb      	strb	r3, [r7, r2]
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 800a228:	221f      	movs	r2, #31
 800a22a:	ab04      	add	r3, sp, #16
 800a22c:	781b      	ldrb	r3, [r3, #0]
 800a22e:	401a      	ands	r2, r3
 800a230:	2380      	movs	r3, #128	; 0x80
 800a232:	425b      	negs	r3, r3
 800a234:	e7a2      	b.n	800a17c <LoRaMacMcpsRequest+0x58>
            MacCtx.AckTimeoutRetries = 1;
 800a236:	4b0e      	ldr	r3, [pc, #56]	; (800a270 <LoRaMacMcpsRequest+0x14c>)
 800a238:	54fd      	strb	r5, [r7, r3]
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 800a23a:	ab04      	add	r3, sp, #16
 800a23c:	781a      	ldrb	r2, [r3, #0]
 800a23e:	2320      	movs	r3, #32
 800a240:	425b      	negs	r3, r3
 800a242:	4313      	orrs	r3, r2
 800a244:	aa04      	add	r2, sp, #16
 800a246:	7013      	strb	r3, [r2, #0]
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 800a248:	6863      	ldr	r3, [r4, #4]
 800a24a:	9302      	str	r3, [sp, #8]
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
 800a24c:	8923      	ldrh	r3, [r4, #8]
 800a24e:	9303      	str	r3, [sp, #12]
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 800a250:	230a      	movs	r3, #10
 800a252:	e79d      	b.n	800a190 <LoRaMacMcpsRequest+0x6c>
            MacCtx.NodeAckRequested = false;
 800a254:	2100      	movs	r1, #0
 800a256:	4a0a      	ldr	r2, [pc, #40]	; (800a280 <LoRaMacMcpsRequest+0x15c>)
 800a258:	5499      	strb	r1, [r3, r2]
 800a25a:	e7db      	b.n	800a214 <LoRaMacMcpsRequest+0xf0>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800a25c:	2502      	movs	r5, #2
 800a25e:	e7d9      	b.n	800a214 <LoRaMacMcpsRequest+0xf0>
 800a260:	20000dbc 	.word	0x20000dbc
 800a264:	20000980 	.word	0x20000980
 800a268:	0000043d 	.word	0x0000043d
 800a26c:	00000412 	.word	0x00000412
 800a270:	00000411 	.word	0x00000411
 800a274:	00000484 	.word	0x00000484
 800a278:	0000043c 	.word	0x0000043c
 800a27c:	00000481 	.word	0x00000481
 800a280:	00000414 	.word	0x00000414

0800a284 <LoRaMacAdrCalcNext>:
 * \param [OUT] adrAckCounter The calculated ADR acknowledgement counter.
 *
 * \retval Returns true, if an ADR request should be performed.
 */
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 800a284:	b5f0      	push	{r4, r5, r6, r7, lr}
    if( adrNext->Version.Fields.Minor == 0 )
    {
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
    }
    return false;
 800a286:	2500      	movs	r5, #0
{
 800a288:	b08b      	sub	sp, #44	; 0x2c
 800a28a:	9104      	str	r1, [sp, #16]
 800a28c:	9205      	str	r2, [sp, #20]
 800a28e:	9303      	str	r3, [sp, #12]
    if( adrNext->Version.Fields.Minor == 0 )
 800a290:	7883      	ldrb	r3, [r0, #2]
{
 800a292:	0004      	movs	r4, r0
    if( adrNext->Version.Fields.Minor == 0 )
 800a294:	42ab      	cmp	r3, r5
 800a296:	d127      	bne.n	800a2e8 <LoRaMacAdrCalcNext+0x64>
    int8_t txPower = adrNext->TxPower;
 800a298:	2311      	movs	r3, #17
    int8_t datarate = adrNext->Datarate;
 800a29a:	2610      	movs	r6, #16
    int8_t txPower = adrNext->TxPower;
 800a29c:	56c3      	ldrsb	r3, [r0, r3]
    int8_t datarate = adrNext->Datarate;
 800a29e:	5786      	ldrsb	r6, [r0, r6]
    *adrAckCounter = adrNext->AdrAckCounter;
 800a2a0:	6882      	ldr	r2, [r0, #8]
    int8_t txPower = adrNext->TxPower;
 800a2a2:	9302      	str	r3, [sp, #8]
    *adrAckCounter = adrNext->AdrAckCounter;
 800a2a4:	9b03      	ldr	r3, [sp, #12]
    int8_t datarate = adrNext->Datarate;
 800a2a6:	0037      	movs	r7, r6
    *adrAckCounter = adrNext->AdrAckCounter;
 800a2a8:	601a      	str	r2, [r3, #0]
    if( adrNext->AdrEnabled == true )
 800a2aa:	7945      	ldrb	r5, [r0, #5]
 800a2ac:	2d00      	cmp	r5, #0
 800a2ae:	d016      	beq.n	800a2de <LoRaMacAdrCalcNext+0x5a>
        getPhy.Attribute = PHY_MIN_TX_DR;
 800a2b0:	2302      	movs	r3, #2
 800a2b2:	aa06      	add	r2, sp, #24
 800a2b4:	7013      	strb	r3, [r2, #0]
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800a2b6:	7c83      	ldrb	r3, [r0, #18]
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800a2b8:	0011      	movs	r1, r2
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800a2ba:	7093      	strb	r3, [r2, #2]
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800a2bc:	7cc0      	ldrb	r0, [r0, #19]
 800a2be:	f000 ffcf 	bl	800b260 <RegionGetPhyParam>
        minTxDatarate = phyParam.Value;
 800a2c2:	b243      	sxtb	r3, r0
 800a2c4:	9301      	str	r3, [sp, #4]
        datarate = MAX( datarate, minTxDatarate );
 800a2c6:	429e      	cmp	r6, r3
 800a2c8:	da01      	bge.n	800a2ce <LoRaMacAdrCalcNext+0x4a>
 800a2ca:	466b      	mov	r3, sp
 800a2cc:	791f      	ldrb	r7, [r3, #4]
        if( datarate == minTxDatarate )
 800a2ce:	9b01      	ldr	r3, [sp, #4]
        datarate = MAX( datarate, minTxDatarate );
 800a2d0:	b27f      	sxtb	r7, r7
        if( datarate == minTxDatarate )
 800a2d2:	429e      	cmp	r6, r3
 800a2d4:	dc0b      	bgt.n	800a2ee <LoRaMacAdrCalcNext+0x6a>
            *adrAckCounter = 0;
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	9b03      	ldr	r3, [sp, #12]
 800a2da:	601a      	str	r2, [r3, #0]
                        adrAckReq = false;
 800a2dc:	2500      	movs	r5, #0
    *drOut = datarate;
 800a2de:	9b04      	ldr	r3, [sp, #16]
    *txPowOut = txPower;
 800a2e0:	9a02      	ldr	r2, [sp, #8]
    *drOut = datarate;
 800a2e2:	701f      	strb	r7, [r3, #0]
    *txPowOut = txPower;
 800a2e4:	9b05      	ldr	r3, [sp, #20]
 800a2e6:	701a      	strb	r2, [r3, #0]
}
 800a2e8:	0028      	movs	r0, r5
 800a2ea:	b00b      	add	sp, #44	; 0x2c
 800a2ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 800a2ee:	2500      	movs	r5, #0
 800a2f0:	89a1      	ldrh	r1, [r4, #12]
 800a2f2:	68a2      	ldr	r2, [r4, #8]
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 800a2f4:	89e3      	ldrh	r3, [r4, #14]
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 800a2f6:	428a      	cmp	r2, r1
 800a2f8:	416d      	adcs	r5, r5
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 800a2fa:	185b      	adds	r3, r3, r1
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 800a2fc:	b2ed      	uxtb	r5, r5
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 800a2fe:	429a      	cmp	r2, r3
 800a300:	d3ed      	bcc.n	800a2de <LoRaMacAdrCalcNext+0x5a>
                getPhy.Attribute = PHY_MAX_TX_POWER;
 800a302:	2308      	movs	r3, #8
 800a304:	aa06      	add	r2, sp, #24
 800a306:	7013      	strb	r3, [r2, #0]
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800a308:	0011      	movs	r1, r2
 800a30a:	7ce0      	ldrb	r0, [r4, #19]
 800a30c:	f000 ffa8 	bl	800b260 <RegionGetPhyParam>
                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 800a310:	89e1      	ldrh	r1, [r4, #14]
                txPower = phyParam.Value;
 800a312:	b243      	sxtb	r3, r0
                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 800a314:	68a0      	ldr	r0, [r4, #8]
                txPower = phyParam.Value;
 800a316:	9302      	str	r3, [sp, #8]
                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 800a318:	f7f5 ffac 	bl	8000274 <__aeabi_uidivmod>
 800a31c:	000e      	movs	r6, r1
 800a31e:	2901      	cmp	r1, #1
 800a320:	d1dd      	bne.n	800a2de <LoRaMacAdrCalcNext+0x5a>
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 800a322:	2322      	movs	r3, #34	; 0x22
 800a324:	aa06      	add	r2, sp, #24
                    getPhy.Datarate = datarate;
 800a326:	7057      	strb	r7, [r2, #1]
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 800a328:	7013      	strb	r3, [r2, #0]
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800a32a:	7ca3      	ldrb	r3, [r4, #18]
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800a32c:	0011      	movs	r1, r2
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800a32e:	7093      	strb	r3, [r2, #2]
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800a330:	7ce0      	ldrb	r0, [r4, #19]
 800a332:	f000 ff95 	bl	800b260 <RegionGetPhyParam>
                    if( datarate == minTxDatarate )
 800a336:	9b01      	ldr	r3, [sp, #4]
                    datarate = phyParam.Value;
 800a338:	b247      	sxtb	r7, r0
                    if( datarate == minTxDatarate )
 800a33a:	42bb      	cmp	r3, r7
 800a33c:	d1cf      	bne.n	800a2de <LoRaMacAdrCalcNext+0x5a>
                        if( adrNext->UpdateChanMask == true )
 800a33e:	7925      	ldrb	r5, [r4, #4]
 800a340:	2d00      	cmp	r5, #0
 800a342:	d0cc      	beq.n	800a2de <LoRaMacAdrCalcNext+0x5a>
                            params.Type = INIT_TYPE_RESTORE_DEFAULT_CHANNELS;
 800a344:	a908      	add	r1, sp, #32
 800a346:	710e      	strb	r6, [r1, #4]
                            RegionInitDefaults( adrNext->Region, &params );
 800a348:	7ce0      	ldrb	r0, [r4, #19]
 800a34a:	f000 ff9c 	bl	800b286 <RegionInitDefaults>
 800a34e:	e7c5      	b.n	800a2dc <LoRaMacAdrCalcNext+0x58>

0800a350 <LoRaMacClassBInit>:
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif // LORAMAC_CLASSB_ENABLED
}
 800a350:	4770      	bx	lr

0800a352 <LoRaMacClassBRestoreNvmCtx>:
        return false;
    }
#else
    return true;
#endif // LORAMAC_CLASSB_ENABLED
}
 800a352:	2001      	movs	r0, #1
 800a354:	4770      	bx	lr

0800a356 <LoRaMacClassBGetNvmCtx>:
{
#ifdef LORAMAC_CLASSB_ENABLED
    *classBNvmCtxSize = sizeof( NvmCtx );
    return &NvmCtx;
#else
    *classBNvmCtxSize = 0;
 800a356:	2300      	movs	r3, #0
 800a358:	6003      	str	r3, [r0, #0]
    return NULL;
#endif // LORAMAC_CLASSB_ENABLED
}
 800a35a:	0018      	movs	r0, r3
 800a35c:	4770      	bx	lr

0800a35e <LoRaMacClassBSetBeaconState>:
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 800a35e:	4770      	bx	lr

0800a360 <LoRaMacClassBSetPingSlotState>:
 800a360:	4770      	bx	lr

0800a362 <LoRaMacClassBSetMulticastSlotState>:
 800a362:	4770      	bx	lr

0800a364 <LoRaMacClassBIsAcquisitionInProgress>:
    }
    return false;
#else
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}
 800a364:	2000      	movs	r0, #0
 800a366:	4770      	bx	lr

0800a368 <LoRaMacClassBBeaconTimerEvent>:
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 800a368:	4770      	bx	lr

0800a36a <LoRaMacClassBPingSlotTimerEvent>:
 800a36a:	4770      	bx	lr

0800a36c <LoRaMacClassBMulticastSlotTimerEvent>:
 800a36c:	4770      	bx	lr

0800a36e <LoRaMacClassBRxBeacon>:
    }
    return beaconProcessed;
#else
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}
 800a36e:	2000      	movs	r0, #0
 800a370:	4770      	bx	lr

0800a372 <LoRaMacClassBIsBeaconExpected>:
 800a372:	2000      	movs	r0, #0
 800a374:	4770      	bx	lr

0800a376 <LoRaMacClassBIsPingExpected>:
 800a376:	2000      	movs	r0, #0
 800a378:	4770      	bx	lr

0800a37a <LoRaMacClassBIsMulticastExpected>:
 800a37a:	2000      	movs	r0, #0
 800a37c:	4770      	bx	lr

0800a37e <LoRaMacClassBIsBeaconModeActive>:
 800a37e:	2000      	movs	r0, #0
 800a380:	4770      	bx	lr

0800a382 <LoRaMacClassBSetPingSlotInfo>:
 800a382:	4770      	bx	lr

0800a384 <LoRaMacClassBHaltBeaconing>:

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 800a384:	4770      	bx	lr

0800a386 <LoRaMacClassBResumeBeaconing>:
 800a386:	4770      	bx	lr

0800a388 <LoRaMacClassBSwitchClass>:
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif // LORAMAC_CLASSB_ENABLED
}
 800a388:	2002      	movs	r0, #2
 800a38a:	4770      	bx	lr

0800a38c <LoRaMacClassBMibGetRequestConfirm>:
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif // LORAMAC_CLASSB_ENABLED
}
 800a38c:	2002      	movs	r0, #2
 800a38e:	4770      	bx	lr

0800a390 <LoRaMacMibClassBSetRequestConfirm>:
 800a390:	2002      	movs	r0, #2
 800a392:	4770      	bx	lr

0800a394 <LoRaMacClassBPingSlotInfoAns>:
 800a394:	4770      	bx	lr

0800a396 <LoRaMacClassBPingSlotChannelReq>:

    return status;
#else
    return 0;
#endif // LORAMAC_CLASSB_ENABLED
}
 800a396:	2000      	movs	r0, #0
 800a398:	4770      	bx	lr

0800a39a <LoRaMacClassBBeaconTimingAns>:

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 800a39a:	4770      	bx	lr

0800a39c <LoRaMacClassBDeviceTimeAns>:
 800a39c:	4770      	bx	lr

0800a39e <LoRaMacClassBBeaconFreqReq>:
    }
    return false;
#else
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}
 800a39e:	2000      	movs	r0, #0
 800a3a0:	4770      	bx	lr

0800a3a2 <LoRaMacClassBIsUplinkCollision>:
    }
    return 0;
#else
    return 0;
#endif // LORAMAC_CLASSB_ENABLED
}
 800a3a2:	2000      	movs	r0, #0
 800a3a4:	4770      	bx	lr

0800a3a6 <LoRaMacClassBStopRxSlots>:
 800a3a6:	4770      	bx	lr

0800a3a8 <LoRaMacClassBProcess>:
 800a3a8:	4770      	bx	lr
	...

0800a3ac <NvmCtxCallback>:
/*
 * \brief Wrapper function for the NvmCtx
 */
static void NvmCtxCallback( void )
{
    if( CommandsNvmCtxChanged != NULL )
 800a3ac:	4b03      	ldr	r3, [pc, #12]	; (800a3bc <NvmCtxCallback+0x10>)
{
 800a3ae:	b510      	push	{r4, lr}
    if( CommandsNvmCtxChanged != NULL )
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d000      	beq.n	800a3b8 <NvmCtxCallback+0xc>
    {
        CommandsNvmCtxChanged( );
 800a3b6:	4798      	blx	r3
    }
}
 800a3b8:	bd10      	pop	{r4, pc}
 800a3ba:	46c0      	nop			; (mov r8, r8)
 800a3bc:	20000e08 	.word	0x20000e08

0800a3c0 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( LoRaMacCommandsNvmEvent commandsNvmCtxChanged )
{
 800a3c0:	b570      	push	{r4, r5, r6, lr}
    // Initialize with default
    memset1( ( uint8_t* )&NvmCtx, 0, sizeof( NvmCtx ) );
 800a3c2:	4c06      	ldr	r4, [pc, #24]	; (800a3dc <LoRaMacCommandsInit+0x1c>)
{
 800a3c4:	0005      	movs	r5, r0
    memset1( ( uint8_t* )&NvmCtx, 0, sizeof( NvmCtx ) );
 800a3c6:	22fc      	movs	r2, #252	; 0xfc
 800a3c8:	0020      	movs	r0, r4
 800a3ca:	2100      	movs	r1, #0
 800a3cc:	f002 fe20 	bl	800d010 <memset1>
    list->First = 0;
 800a3d0:	2000      	movs	r0, #0

    LinkedListInit( &NvmCtx.MacCommandList );

    // Assign callback
    CommandsNvmCtxChanged = commandsNvmCtxChanged;
 800a3d2:	4b03      	ldr	r3, [pc, #12]	; (800a3e0 <LoRaMacCommandsInit+0x20>)
    list->First = 0;
 800a3d4:	6020      	str	r0, [r4, #0]
    CommandsNvmCtxChanged = commandsNvmCtxChanged;
 800a3d6:	601d      	str	r5, [r3, #0]
    list->Last = 0;
 800a3d8:	6060      	str	r0, [r4, #4]

    return LORAMAC_COMMANDS_SUCCESS;
}
 800a3da:	bd70      	pop	{r4, r5, r6, pc}
 800a3dc:	20000e0c 	.word	0x20000e0c
 800a3e0:	20000e08 	.word	0x20000e08

0800a3e4 <LoRaMacCommandsRestoreNvmCtx>:

LoRaMacCommandStatus_t LoRaMacCommandsRestoreNvmCtx( void* commandsNvmCtx )
{
 800a3e4:	0001      	movs	r1, r0
 800a3e6:	b510      	push	{r4, lr}
        memcpy1( ( uint8_t* )&NvmCtx, ( uint8_t* )commandsNvmCtx, sizeof( NvmCtx ) );
        return LORAMAC_COMMANDS_SUCCESS;
    }
    else
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800a3e8:	2001      	movs	r0, #1
    if( commandsNvmCtx != NULL )
 800a3ea:	2900      	cmp	r1, #0
 800a3ec:	d004      	beq.n	800a3f8 <LoRaMacCommandsRestoreNvmCtx+0x14>
        memcpy1( ( uint8_t* )&NvmCtx, ( uint8_t* )commandsNvmCtx, sizeof( NvmCtx ) );
 800a3ee:	4803      	ldr	r0, [pc, #12]	; (800a3fc <LoRaMacCommandsRestoreNvmCtx+0x18>)
 800a3f0:	22fc      	movs	r2, #252	; 0xfc
 800a3f2:	f002 fdf8 	bl	800cfe6 <memcpy1>
        return LORAMAC_COMMANDS_SUCCESS;
 800a3f6:	2000      	movs	r0, #0
    }
}
 800a3f8:	bd10      	pop	{r4, pc}
 800a3fa:	46c0      	nop			; (mov r8, r8)
 800a3fc:	20000e0c 	.word	0x20000e0c

0800a400 <LoRaMacCommandsGetNvmCtx>:

void* LoRaMacCommandsGetNvmCtx( size_t* commandsNvmCtxSize )
{
    *commandsNvmCtxSize = sizeof( NvmCtx );
 800a400:	23fc      	movs	r3, #252	; 0xfc
 800a402:	6003      	str	r3, [r0, #0]
    return &NvmCtx;
}
 800a404:	4800      	ldr	r0, [pc, #0]	; (800a408 <LoRaMacCommandsGetNvmCtx+0x8>)
 800a406:	4770      	bx	lr
 800a408:	20000e0c 	.word	0x20000e0c

0800a40c <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 800a40c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a40e:	0006      	movs	r6, r0
 800a410:	0017      	movs	r7, r2
    if( payload == 0 )
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800a412:	2001      	movs	r0, #1
    if( payload == 0 )
 800a414:	2900      	cmp	r1, #0
 800a416:	d03c      	beq.n	800a492 <LoRaMacCommandsAddCmd+0x86>
 800a418:	2500      	movs	r5, #0
 800a41a:	4b21      	ldr	r3, [pc, #132]	; (800a4a0 <LoRaMacCommandsAddCmd+0x94>)
 800a41c:	0018      	movs	r0, r3
    while( IsSlotFree( ( const MacCommand_t* )&NvmCtx.MacCommandSlots[itr] ) == false )
 800a41e:	469c      	mov	ip, r3
 800a420:	012a      	lsls	r2, r5, #4
 800a422:	3010      	adds	r0, #16
        if( mem[size] != 0x00 )
 800a424:	781c      	ldrb	r4, [r3, #0]
 800a426:	2c00      	cmp	r4, #0
 800a428:	d134      	bne.n	800a494 <LoRaMacCommandsAddCmd+0x88>
 800a42a:	3301      	adds	r3, #1
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 800a42c:	4283      	cmp	r3, r0
 800a42e:	d1f9      	bne.n	800a424 <LoRaMacCommandsAddCmd+0x18>
    if( list->First == 0 )
 800a430:	481c      	ldr	r0, [pc, #112]	; (800a4a4 <LoRaMacCommandsAddCmd+0x98>)
 800a432:	6803      	ldr	r3, [r0, #0]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d101      	bne.n	800a43c <LoRaMacCommandsAddCmd+0x30>
        list->First = element;
 800a438:	4663      	mov	r3, ip
 800a43a:	6003      	str	r3, [r0, #0]
    if( list->Last )
 800a43c:	6843      	ldr	r3, [r0, #4]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d001      	beq.n	800a446 <LoRaMacCommandsAddCmd+0x3a>
        list->Last->Next = element;
 800a442:	4664      	mov	r4, ip
 800a444:	601c      	str	r4, [r3, #0]
    element->Next = 0;
 800a446:	2400      	movs	r4, #0
 800a448:	1883      	adds	r3, r0, r2
 800a44a:	609c      	str	r4, [r3, #8]
    list->Last = element;
 800a44c:	4664      	mov	r4, ip
        return LORAMAC_COMMANDS_ERROR;
    }

    // Set Values
    newCmd->CID = cid;
    newCmd->PayloadSize = payloadSize;
 800a44e:	3501      	adds	r5, #1
    newCmd->CID = cid;
 800a450:	731e      	strb	r6, [r3, #12]
    newCmd->PayloadSize = payloadSize;
 800a452:	012b      	lsls	r3, r5, #4
 800a454:	50c7      	str	r7, [r0, r3]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 800a456:	320d      	adds	r2, #13
 800a458:	b2bb      	uxth	r3, r7
    list->Last = element;
 800a45a:	6044      	str	r4, [r0, #4]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 800a45c:	1880      	adds	r0, r0, r2
 800a45e:	001a      	movs	r2, r3
 800a460:	f002 fdc1 	bl	800cfe6 <memcpy1>
            return false;
 800a464:	2400      	movs	r4, #0
 800a466:	2e0a      	cmp	r6, #10
 800a468:	d807      	bhi.n	800a47a <LoRaMacCommandsAddCmd+0x6e>
 800a46a:	3401      	adds	r4, #1
 800a46c:	23a4      	movs	r3, #164	; 0xa4
 800a46e:	40b4      	lsls	r4, r6
 800a470:	00db      	lsls	r3, r3, #3
 800a472:	401c      	ands	r4, r3
 800a474:	1e63      	subs	r3, r4, #1
 800a476:	419c      	sbcs	r4, r3
 800a478:	b2e4      	uxtb	r4, r4
    newCmd->IsSticky = IsSticky( cid );
 800a47a:	4b0a      	ldr	r3, [pc, #40]	; (800a4a4 <LoRaMacCommandsAddCmd+0x98>)
 800a47c:	012d      	lsls	r5, r5, #4
 800a47e:	195d      	adds	r5, r3, r5

    NvmCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 800a480:	33f8      	adds	r3, #248	; 0xf8
 800a482:	681a      	ldr	r2, [r3, #0]
    newCmd->IsSticky = IsSticky( cid );
 800a484:	712c      	strb	r4, [r5, #4]
    NvmCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 800a486:	3201      	adds	r2, #1
 800a488:	19d7      	adds	r7, r2, r7
 800a48a:	601f      	str	r7, [r3, #0]

    NvmCtxCallback( );
 800a48c:	f7ff ff8e 	bl	800a3ac <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
 800a490:	2000      	movs	r0, #0
}
 800a492:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a494:	3501      	adds	r5, #1
 800a496:	0003      	movs	r3, r0
        if( itr == NUM_OF_MAC_COMMANDS )
 800a498:	2d0f      	cmp	r5, #15
 800a49a:	d1bf      	bne.n	800a41c <LoRaMacCommandsAddCmd+0x10>
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 800a49c:	2002      	movs	r0, #2
 800a49e:	e7f8      	b.n	800a492 <LoRaMacCommandsAddCmd+0x86>
 800a4a0:	20000e14 	.word	0x20000e14
 800a4a4:	20000e0c 	.word	0x20000e0c

0800a4a8 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 800a4a8:	b510      	push	{r4, lr}
    if( macCmd == NULL )
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800a4aa:	2401      	movs	r4, #1
    if( macCmd == NULL )
 800a4ac:	2800      	cmp	r0, #0
 800a4ae:	d023      	beq.n	800a4f8 <LoRaMacCommandsRemoveCmd+0x50>
    curElement = list->First;
 800a4b0:	4a12      	ldr	r2, [pc, #72]	; (800a4fc <LoRaMacCommandsRemoveCmd+0x54>)
 800a4b2:	6813      	ldr	r3, [r2, #0]
    if( element != curElement )
 800a4b4:	4298      	cmp	r0, r3
 800a4b6:	d104      	bne.n	800a4c2 <LoRaMacCommandsRemoveCmd+0x1a>
        list->First = element->Next;
 800a4b8:	6803      	ldr	r3, [r0, #0]
 800a4ba:	6013      	str	r3, [r2, #0]
        curElement = NULL;
 800a4bc:	2300      	movs	r3, #0
 800a4be:	e005      	b.n	800a4cc <LoRaMacCommandsRemoveCmd+0x24>
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 800a4c0:	000b      	movs	r3, r1
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d002      	beq.n	800a4cc <LoRaMacCommandsRemoveCmd+0x24>
 800a4c6:	6819      	ldr	r1, [r3, #0]
 800a4c8:	4288      	cmp	r0, r1
 800a4ca:	d1f9      	bne.n	800a4c0 <LoRaMacCommandsRemoveCmd+0x18>
    if( list->Last == element )
 800a4cc:	6851      	ldr	r1, [r2, #4]
 800a4ce:	4288      	cmp	r0, r1
 800a4d0:	d100      	bne.n	800a4d4 <LoRaMacCommandsRemoveCmd+0x2c>
        list->Last = PrevElement;
 800a4d2:	6053      	str	r3, [r2, #4]
    if( PrevElement != NULL )
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d001      	beq.n	800a4dc <LoRaMacCommandsRemoveCmd+0x34>
        PrevElement->Next = element->Next;
 800a4d8:	6801      	ldr	r1, [r0, #0]
 800a4da:	6019      	str	r1, [r3, #0]
    element->Next = NULL;
 800a4dc:	2400      	movs	r4, #0
    if( LinkedListRemove( &NvmCtx.MacCommandList, macCmd ) == false )
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
    }

    NvmCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 800a4de:	32f8      	adds	r2, #248	; 0xf8
 800a4e0:	6813      	ldr	r3, [r2, #0]
 800a4e2:	6881      	ldr	r1, [r0, #8]
 800a4e4:	3b01      	subs	r3, #1
 800a4e6:	1a5b      	subs	r3, r3, r1
    element->Next = NULL;
 800a4e8:	6004      	str	r4, [r0, #0]
    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 800a4ea:	0021      	movs	r1, r4
    NvmCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 800a4ec:	6013      	str	r3, [r2, #0]
    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 800a4ee:	2210      	movs	r2, #16
 800a4f0:	f002 fd8e 	bl	800d010 <memset1>
    if( FreeMacCommandSlot( macCmd ) == false )
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    NvmCtxCallback( );
 800a4f4:	f7ff ff5a 	bl	800a3ac <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
}
 800a4f8:	0020      	movs	r0, r4
 800a4fa:	bd10      	pop	{r4, pc}
 800a4fc:	20000e0c 	.word	0x20000e0c

0800a500 <LoRaMacCommandsRemoveNoneStickyCmds>:
{
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = NvmCtx.MacCommandList.First;
 800a500:	4b08      	ldr	r3, [pc, #32]	; (800a524 <LoRaMacCommandsRemoveNoneStickyCmds+0x24>)
{
 800a502:	b570      	push	{r4, r5, r6, lr}
    curElement = NvmCtx.MacCommandList.First;
 800a504:	681c      	ldr	r4, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800a506:	2c00      	cmp	r4, #0
 800a508:	d103      	bne.n	800a512 <LoRaMacCommandsRemoveNoneStickyCmds+0x12>
        {
            curElement = curElement->Next;
        }
    }

    NvmCtxCallback( );
 800a50a:	f7ff ff4f 	bl	800a3ac <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
}
 800a50e:	0020      	movs	r0, r4
 800a510:	bd70      	pop	{r4, r5, r6, pc}
        if( curElement->IsSticky == false )
 800a512:	7b23      	ldrb	r3, [r4, #12]
 800a514:	6825      	ldr	r5, [r4, #0]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d102      	bne.n	800a520 <LoRaMacCommandsRemoveNoneStickyCmds+0x20>
            LoRaMacCommandsRemoveCmd( curElement );
 800a51a:	0020      	movs	r0, r4
 800a51c:	f7ff ffc4 	bl	800a4a8 <LoRaMacCommandsRemoveCmd>
{
 800a520:	002c      	movs	r4, r5
 800a522:	e7f0      	b.n	800a506 <LoRaMacCommandsRemoveNoneStickyCmds+0x6>
 800a524:	20000e0c 	.word	0x20000e0c

0800a528 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 800a528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a52a:	26a4      	movs	r6, #164	; 0xa4
 800a52c:	2501      	movs	r5, #1
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = NvmCtx.MacCommandList.First;
 800a52e:	4b0b      	ldr	r3, [pc, #44]	; (800a55c <LoRaMacCommandsRemoveStickyAnsCmds+0x34>)
 800a530:	00f6      	lsls	r6, r6, #3
 800a532:	681c      	ldr	r4, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800a534:	2c00      	cmp	r4, #0
 800a536:	d103      	bne.n	800a540 <LoRaMacCommandsRemoveStickyAnsCmds+0x18>
            LoRaMacCommandsRemoveCmd( curElement );
        }
        curElement = nexElement;
    }

    NvmCtxCallback( );
 800a538:	f7ff ff38 	bl	800a3ac <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
}
 800a53c:	0020      	movs	r0, r4
 800a53e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if( IsSticky( curElement->CID ) == true )
 800a540:	7923      	ldrb	r3, [r4, #4]
        nexElement = curElement->Next;
 800a542:	6827      	ldr	r7, [r4, #0]
 800a544:	2b0a      	cmp	r3, #10
 800a546:	d806      	bhi.n	800a556 <LoRaMacCommandsRemoveStickyAnsCmds+0x2e>
 800a548:	002a      	movs	r2, r5
 800a54a:	409a      	lsls	r2, r3
 800a54c:	4232      	tst	r2, r6
 800a54e:	d002      	beq.n	800a556 <LoRaMacCommandsRemoveStickyAnsCmds+0x2e>
            LoRaMacCommandsRemoveCmd( curElement );
 800a550:	0020      	movs	r0, r4
 800a552:	f7ff ffa9 	bl	800a4a8 <LoRaMacCommandsRemoveCmd>
{
 800a556:	003c      	movs	r4, r7
 800a558:	e7ec      	b.n	800a534 <LoRaMacCommandsRemoveStickyAnsCmds+0xc>
 800a55a:	46c0      	nop			; (mov r8, r8)
 800a55c:	20000e0c 	.word	0x20000e0c

0800a560 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
    if( size == NULL )
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800a560:	2301      	movs	r3, #1
    if( size == NULL )
 800a562:	2800      	cmp	r0, #0
 800a564:	d004      	beq.n	800a570 <LoRaMacCommandsGetSizeSerializedCmds+0x10>
    }
    *size = NvmCtx.SerializedCmdsSize;
 800a566:	4b03      	ldr	r3, [pc, #12]	; (800a574 <LoRaMacCommandsGetSizeSerializedCmds+0x14>)
 800a568:	33f8      	adds	r3, #248	; 0xf8
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	6003      	str	r3, [r0, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 800a56e:	2300      	movs	r3, #0
}
 800a570:	0018      	movs	r0, r3
 800a572:	4770      	bx	lr
 800a574:	20000e0c 	.word	0x20000e0c

0800a578 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 800a578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a57a:	0006      	movs	r6, r0
 800a57c:	0015      	movs	r5, r2
    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800a57e:	2001      	movs	r0, #1
    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 800a580:	2a00      	cmp	r2, #0
 800a582:	d007      	beq.n	800a594 <LoRaMacCommandsSerializeCmds+0x1c>
 800a584:	2900      	cmp	r1, #0
 800a586:	d005      	beq.n	800a594 <LoRaMacCommandsSerializeCmds+0x1c>
    }
    MacCommand_t* curElement;
    curElement = NvmCtx.MacCommandList.First;
 800a588:	4b0d      	ldr	r3, [pc, #52]	; (800a5c0 <LoRaMacCommandsSerializeCmds+0x48>)
 800a58a:	681c      	ldr	r4, [r3, #0]
    uint8_t itr = 0;
 800a58c:	2300      	movs	r3, #0

    // Loop through all elements
    while( curElement != NULL )
 800a58e:	2c00      	cmp	r4, #0
 800a590:	d101      	bne.n	800a596 <LoRaMacCommandsSerializeCmds+0x1e>
            break;
        }
        curElement = curElement->Next;
    }

    return LORAMAC_COMMANDS_SUCCESS;
 800a592:	2000      	movs	r0, #0
}
 800a594:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 800a596:	68a2      	ldr	r2, [r4, #8]
 800a598:	1af1      	subs	r1, r6, r3
 800a59a:	3201      	adds	r2, #1
 800a59c:	4291      	cmp	r1, r2
 800a59e:	d3f8      	bcc.n	800a592 <LoRaMacCommandsSerializeCmds+0x1a>
            buffer[itr++] = curElement->CID;
 800a5a0:	7922      	ldrb	r2, [r4, #4]
 800a5a2:	1c5f      	adds	r7, r3, #1
 800a5a4:	54ea      	strb	r2, [r5, r3]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 800a5a6:	68a3      	ldr	r3, [r4, #8]
            buffer[itr++] = curElement->CID;
 800a5a8:	b2ff      	uxtb	r7, r7
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 800a5aa:	b29a      	uxth	r2, r3
 800a5ac:	1d61      	adds	r1, r4, #5
 800a5ae:	19e8      	adds	r0, r5, r7
 800a5b0:	f002 fd19 	bl	800cfe6 <memcpy1>
            itr = itr + curElement->PayloadSize;
 800a5b4:	68a3      	ldr	r3, [r4, #8]
        curElement = curElement->Next;
 800a5b6:	6824      	ldr	r4, [r4, #0]
            itr = itr + curElement->PayloadSize;
 800a5b8:	18ff      	adds	r7, r7, r3
 800a5ba:	b2fb      	uxtb	r3, r7
 800a5bc:	e7e7      	b.n	800a58e <LoRaMacCommandsSerializeCmds+0x16>
 800a5be:	46c0      	nop			; (mov r8, r8)
 800a5c0:	20000e0c 	.word	0x20000e0c

0800a5c4 <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
    if( cmdsPending == NULL )
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800a5c4:	2301      	movs	r3, #1
    if( cmdsPending == NULL )
 800a5c6:	2800      	cmp	r0, #0
 800a5c8:	d00b      	beq.n	800a5e2 <LoRaMacCommandsStickyCmdsPending+0x1e>
    }
    MacCommand_t* curElement;
    curElement = NvmCtx.MacCommandList.First;

    *cmdsPending = false;
 800a5ca:	2200      	movs	r2, #0
    curElement = NvmCtx.MacCommandList.First;
 800a5cc:	4b07      	ldr	r3, [pc, #28]	; (800a5ec <LoRaMacCommandsStickyCmdsPending+0x28>)
 800a5ce:	681b      	ldr	r3, [r3, #0]
    *cmdsPending = false;
 800a5d0:	7002      	strb	r2, [r0, #0]

    // Loop through all elements
    while( curElement != NULL )
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d005      	beq.n	800a5e2 <LoRaMacCommandsStickyCmdsPending+0x1e>
    {
        if( curElement->IsSticky == true )
 800a5d6:	7b1a      	ldrb	r2, [r3, #12]
 800a5d8:	2a00      	cmp	r2, #0
 800a5da:	d004      	beq.n	800a5e6 <LoRaMacCommandsStickyCmdsPending+0x22>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
 800a5dc:	2301      	movs	r3, #1
 800a5de:	7003      	strb	r3, [r0, #0]
            return LORAMAC_COMMANDS_SUCCESS;
 800a5e0:	2300      	movs	r3, #0
        }
        curElement = curElement->Next;
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800a5e2:	0018      	movs	r0, r3
 800a5e4:	4770      	bx	lr
        curElement = curElement->Next;
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	e7f3      	b.n	800a5d2 <LoRaMacCommandsStickyCmdsPending+0xe>
 800a5ea:	46c0      	nop			; (mov r8, r8)
 800a5ec:	20000e0c 	.word	0x20000e0c

0800a5f0 <LoRaMacConfirmQueueInit>:
    }
    return NULL;
}

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives, LoRaMacConfirmQueueNvmEvent confirmQueueNvmCtxChanged )
{
 800a5f0:	b570      	push	{r4, r5, r6, lr}
    ConfirmQueueCtx.Primitives = primitives;
 800a5f2:	4c0a      	ldr	r4, [pc, #40]	; (800a61c <LoRaMacConfirmQueueInit+0x2c>)

    // Assign nvm context
    ConfirmQueueCtx.ConfirmQueueNvmCtx = &ConfirmQueueNvmCtx;

    // Init counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt = 0;
 800a5f4:	2200      	movs	r2, #0
 800a5f6:	0023      	movs	r3, r4
    ConfirmQueueCtx.Primitives = primitives;
 800a5f8:	6020      	str	r0, [r4, #0]
    ConfirmQueueCtx.ConfirmQueueNvmCtx = &ConfirmQueueNvmCtx;
 800a5fa:	0020      	movs	r0, r4
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt = 0;
 800a5fc:	3328      	adds	r3, #40	; 0x28
    ConfirmQueueCtx.ConfirmQueueNvmCtx = &ConfirmQueueNvmCtx;
 800a5fe:	3014      	adds	r0, #20
{
 800a600:	000d      	movs	r5, r1
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt = 0;
 800a602:	701a      	strb	r2, [r3, #0]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;

    memset1( ( uint8_t* )ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue ) );
 800a604:	21ff      	movs	r1, #255	; 0xff
 800a606:	3214      	adds	r2, #20
    ConfirmQueueCtx.ConfirmQueueNvmCtx = &ConfirmQueueNvmCtx;
 800a608:	6120      	str	r0, [r4, #16]
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 800a60a:	6060      	str	r0, [r4, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 800a60c:	60a0      	str	r0, [r4, #8]
    memset1( ( uint8_t* )ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue ) );
 800a60e:	f002 fcff 	bl	800d010 <memset1>

    // Common status
    ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a612:	2301      	movs	r3, #1
 800a614:	6922      	ldr	r2, [r4, #16]

    // Assign callback
    ConfirmQueueCtx.LoRaMacConfirmQueueNvmEvent = confirmQueueNvmCtxChanged;
 800a616:	60e5      	str	r5, [r4, #12]
    ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a618:	7553      	strb	r3, [r2, #21]
}
 800a61a:	bd70      	pop	{r4, r5, r6, pc}
 800a61c:	20000f08 	.word	0x20000f08

0800a620 <LoRaMacConfirmQueueRestoreNvmCtx>:

bool LoRaMacConfirmQueueRestoreNvmCtx( void* confirmQueueNvmCtx )
{
 800a620:	0001      	movs	r1, r0
        memcpy1( ( uint8_t* )&ConfirmQueueNvmCtx, ( uint8_t* ) confirmQueueNvmCtx, sizeof( ConfirmQueueNvmCtx ) );
        return true;
    }
    else
    {
        return false;
 800a622:	2000      	movs	r0, #0
{
 800a624:	b510      	push	{r4, lr}
    if( confirmQueueNvmCtx != NULL )
 800a626:	4281      	cmp	r1, r0
 800a628:	d005      	beq.n	800a636 <LoRaMacConfirmQueueRestoreNvmCtx+0x16>
        memcpy1( ( uint8_t* )&ConfirmQueueNvmCtx, ( uint8_t* ) confirmQueueNvmCtx, sizeof( ConfirmQueueNvmCtx ) );
 800a62a:	4803      	ldr	r0, [pc, #12]	; (800a638 <LoRaMacConfirmQueueRestoreNvmCtx+0x18>)
 800a62c:	2216      	movs	r2, #22
 800a62e:	3014      	adds	r0, #20
 800a630:	f002 fcd9 	bl	800cfe6 <memcpy1>
        return true;
 800a634:	2001      	movs	r0, #1
    }
}
 800a636:	bd10      	pop	{r4, pc}
 800a638:	20000f08 	.word	0x20000f08

0800a63c <LoRaMacConfirmQueueGetNvmCtx>:

void* LoRaMacConfirmQueueGetNvmCtx( size_t* confirmQueueNvmCtxSize )
{
    *confirmQueueNvmCtxSize = sizeof( ConfirmQueueNvmCtx );
 800a63c:	2316      	movs	r3, #22
 800a63e:	6003      	str	r3, [r0, #0]
    return &ConfirmQueueNvmCtx;
 800a640:	4801      	ldr	r0, [pc, #4]	; (800a648 <LoRaMacConfirmQueueGetNvmCtx+0xc>)
}
 800a642:	3014      	adds	r0, #20
 800a644:	4770      	bx	lr
 800a646:	46c0      	nop			; (mov r8, r8)
 800a648:	20000f08 	.word	0x20000f08

0800a64c <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 800a64c:	b530      	push	{r4, r5, lr}
    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 800a64e:	4c0d      	ldr	r4, [pc, #52]	; (800a684 <LoRaMacConfirmQueueAdd+0x38>)
    {
        // Protect the buffer against overwrites
        return false;
 800a650:	2100      	movs	r1, #0
    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 800a652:	6922      	ldr	r2, [r4, #16]
 800a654:	7d13      	ldrb	r3, [r2, #20]
 800a656:	2b04      	cmp	r3, #4
 800a658:	d812      	bhi.n	800a680 <LoRaMacConfirmQueueAdd+0x34>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 800a65a:	7805      	ldrb	r5, [r0, #0]
 800a65c:	68a3      	ldr	r3, [r4, #8]
 800a65e:	701d      	strb	r5, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 800a660:	7845      	ldrb	r5, [r0, #1]
 800a662:	705d      	strb	r5, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 800a664:	78c0      	ldrb	r0, [r0, #3]
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 800a666:	7099      	strb	r1, [r3, #2]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 800a668:	70d8      	strb	r0, [r3, #3]
    // Increase counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt++;
 800a66a:	7d11      	ldrb	r1, [r2, #20]
        bufferPointer++;
 800a66c:	1d18      	adds	r0, r3, #4
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt++;
 800a66e:	3101      	adds	r1, #1
 800a670:	7511      	strb	r1, [r2, #20]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800a672:	0011      	movs	r1, r2
 800a674:	3110      	adds	r1, #16
 800a676:	428b      	cmp	r3, r1
 800a678:	d100      	bne.n	800a67c <LoRaMacConfirmQueueAdd+0x30>
        bufferPointer = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 800a67a:	0010      	movs	r0, r2
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );

    return true;
 800a67c:	2101      	movs	r1, #1
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 800a67e:	60a0      	str	r0, [r4, #8]
}
 800a680:	0008      	movs	r0, r1
 800a682:	bd30      	pop	{r4, r5, pc}
 800a684:	20000f08 	.word	0x20000f08

0800a688 <LoRaMacConfirmQueueRemoveFirst>:

bool LoRaMacConfirmQueueRemoveFirst( void )
{
    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt == 0 )
    {
        return false;
 800a688:	2000      	movs	r0, #0
{
 800a68a:	b510      	push	{r4, lr}
    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt == 0 )
 800a68c:	4908      	ldr	r1, [pc, #32]	; (800a6b0 <LoRaMacConfirmQueueRemoveFirst+0x28>)
 800a68e:	690b      	ldr	r3, [r1, #16]
 800a690:	7d1a      	ldrb	r2, [r3, #20]
 800a692:	4282      	cmp	r2, r0
 800a694:	d00a      	beq.n	800a6ac <LoRaMacConfirmQueueRemoveFirst+0x24>
    }

    // Increase counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt--;
 800a696:	3a01      	subs	r2, #1
 800a698:	751a      	strb	r2, [r3, #20]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800a69a:	001a      	movs	r2, r3
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 800a69c:	684c      	ldr	r4, [r1, #4]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800a69e:	3210      	adds	r2, #16
        bufferPointer++;
 800a6a0:	1d20      	adds	r0, r4, #4
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800a6a2:	4294      	cmp	r4, r2
 800a6a4:	d100      	bne.n	800a6a8 <LoRaMacConfirmQueueRemoveFirst+0x20>
        bufferPointer = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 800a6a6:	0018      	movs	r0, r3
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 800a6a8:	6048      	str	r0, [r1, #4]

    return true;
 800a6aa:	2001      	movs	r0, #1
}
 800a6ac:	bd10      	pop	{r4, pc}
 800a6ae:	46c0      	nop			; (mov r8, r8)
 800a6b0:	20000f08 	.word	0x20000f08

0800a6b4 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 800a6b4:	b570      	push	{r4, r5, r6, lr}
    MlmeConfirmQueue_t* element = NULL;

    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt > 0 )
 800a6b6:	4c0c      	ldr	r4, [pc, #48]	; (800a6e8 <LoRaMacConfirmQueueSetStatus+0x34>)
 800a6b8:	6922      	ldr	r2, [r4, #16]
 800a6ba:	7d13      	ldrb	r3, [r2, #20]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d005      	beq.n	800a6cc <LoRaMacConfirmQueueSetStatus+0x18>
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800a6c0:	0015      	movs	r5, r2
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800a6c2:	6863      	ldr	r3, [r4, #4]
 800a6c4:	68a4      	ldr	r4, [r4, #8]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800a6c6:	3510      	adds	r5, #16
    while( element != bufferEnd )
 800a6c8:	429c      	cmp	r4, r3
 800a6ca:	d100      	bne.n	800a6ce <LoRaMacConfirmQueueSetStatus+0x1a>
        {
            element->Status = status;
            element->ReadyToHandle = true;
        }
    }
}
 800a6cc:	bd70      	pop	{r4, r5, r6, pc}
        if( element->Request == request )
 800a6ce:	781e      	ldrb	r6, [r3, #0]
 800a6d0:	428e      	cmp	r6, r1
 800a6d2:	d005      	beq.n	800a6e0 <LoRaMacConfirmQueueSetStatus+0x2c>
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800a6d4:	42ab      	cmp	r3, r5
 800a6d6:	d101      	bne.n	800a6dc <LoRaMacConfirmQueueSetStatus+0x28>
        bufferPointer = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 800a6d8:	0013      	movs	r3, r2
 800a6da:	e7f5      	b.n	800a6c8 <LoRaMacConfirmQueueSetStatus+0x14>
        bufferPointer++;
 800a6dc:	3304      	adds	r3, #4
 800a6de:	e7f3      	b.n	800a6c8 <LoRaMacConfirmQueueSetStatus+0x14>
            element->ReadyToHandle = true;
 800a6e0:	2201      	movs	r2, #1
            element->Status = status;
 800a6e2:	7058      	strb	r0, [r3, #1]
            element->ReadyToHandle = true;
 800a6e4:	709a      	strb	r2, [r3, #2]
 800a6e6:	e7f1      	b.n	800a6cc <LoRaMacConfirmQueueSetStatus+0x18>
 800a6e8:	20000f08 	.word	0x20000f08

0800a6ec <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 800a6ec:	b530      	push	{r4, r5, lr}
    MlmeConfirmQueue_t* element = NULL;

    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt > 0 )
 800a6ee:	490d      	ldr	r1, [pc, #52]	; (800a724 <LoRaMacConfirmQueueGetStatus+0x38>)
        if( element != NULL )
        {
            return element->Status;
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a6f0:	2301      	movs	r3, #1
    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt > 0 )
 800a6f2:	690a      	ldr	r2, [r1, #16]
 800a6f4:	7d14      	ldrb	r4, [r2, #20]
 800a6f6:	2c00      	cmp	r4, #0
 800a6f8:	d006      	beq.n	800a708 <LoRaMacConfirmQueueGetStatus+0x1c>
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800a6fa:	0014      	movs	r4, r2
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800a6fc:	684b      	ldr	r3, [r1, #4]
 800a6fe:	6889      	ldr	r1, [r1, #8]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800a700:	3410      	adds	r4, #16
    while( element != bufferEnd )
 800a702:	4299      	cmp	r1, r3
 800a704:	d102      	bne.n	800a70c <LoRaMacConfirmQueueGetStatus+0x20>
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a706:	2301      	movs	r3, #1
}
 800a708:	0018      	movs	r0, r3
 800a70a:	bd30      	pop	{r4, r5, pc}
        if( element->Request == request )
 800a70c:	781d      	ldrb	r5, [r3, #0]
 800a70e:	4285      	cmp	r5, r0
 800a710:	d005      	beq.n	800a71e <LoRaMacConfirmQueueGetStatus+0x32>
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800a712:	42a3      	cmp	r3, r4
 800a714:	d101      	bne.n	800a71a <LoRaMacConfirmQueueGetStatus+0x2e>
        bufferPointer = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 800a716:	0013      	movs	r3, r2
 800a718:	e7f3      	b.n	800a702 <LoRaMacConfirmQueueGetStatus+0x16>
        bufferPointer++;
 800a71a:	3304      	adds	r3, #4
 800a71c:	e7f1      	b.n	800a702 <LoRaMacConfirmQueueGetStatus+0x16>
            return element->Status;
 800a71e:	785b      	ldrb	r3, [r3, #1]
 800a720:	e7f2      	b.n	800a708 <LoRaMacConfirmQueueGetStatus+0x1c>
 800a722:	46c0      	nop			; (mov r8, r8)
 800a724:	20000f08 	.word	0x20000f08

0800a728 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 800a728:	b570      	push	{r4, r5, r6, lr}
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 800a72a:	490c      	ldr	r1, [pc, #48]	; (800a75c <LoRaMacConfirmQueueSetStatusCmn+0x34>)

    ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus = status;
 800a72c:	690a      	ldr	r2, [r1, #16]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 800a72e:	684b      	ldr	r3, [r1, #4]

    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt > 0 )
 800a730:	7d14      	ldrb	r4, [r2, #20]
    ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus = status;
 800a732:	7550      	strb	r0, [r2, #21]
    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt > 0 )
 800a734:	2c00      	cmp	r4, #0
 800a736:	d00d      	beq.n	800a754 <LoRaMacConfirmQueueSetStatusCmn+0x2c>
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800a738:	0014      	movs	r4, r2
            element->Status = status;
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
            {
                element->ReadyToHandle = true;
 800a73a:	2501      	movs	r5, #1
            }
            element = IncreaseBufferPointer( element );
        }while( element != ConfirmQueueCtx.BufferEnd );
 800a73c:	6889      	ldr	r1, [r1, #8]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800a73e:	3410      	adds	r4, #16
            if( element->RestrictCommonReadyToHandle == false )
 800a740:	78de      	ldrb	r6, [r3, #3]
            element->Status = status;
 800a742:	7058      	strb	r0, [r3, #1]
            if( element->RestrictCommonReadyToHandle == false )
 800a744:	2e00      	cmp	r6, #0
 800a746:	d100      	bne.n	800a74a <LoRaMacConfirmQueueSetStatusCmn+0x22>
                element->ReadyToHandle = true;
 800a748:	709d      	strb	r5, [r3, #2]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800a74a:	42a3      	cmp	r3, r4
 800a74c:	d103      	bne.n	800a756 <LoRaMacConfirmQueueSetStatusCmn+0x2e>
        bufferPointer = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 800a74e:	0013      	movs	r3, r2
        }while( element != ConfirmQueueCtx.BufferEnd );
 800a750:	4299      	cmp	r1, r3
 800a752:	d1f5      	bne.n	800a740 <LoRaMacConfirmQueueSetStatusCmn+0x18>
    }
}
 800a754:	bd70      	pop	{r4, r5, r6, pc}
        bufferPointer++;
 800a756:	3304      	adds	r3, #4
 800a758:	e7fa      	b.n	800a750 <LoRaMacConfirmQueueSetStatusCmn+0x28>
 800a75a:	46c0      	nop			; (mov r8, r8)
 800a75c:	20000f08 	.word	0x20000f08

0800a760 <LoRaMacConfirmQueueIsCmdActive>:
    return ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 800a760:	4a0a      	ldr	r2, [pc, #40]	; (800a78c <LoRaMacConfirmQueueIsCmdActive+0x2c>)
{
 800a762:	b530      	push	{r4, r5, lr}
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 800a764:	6853      	ldr	r3, [r2, #4]
 800a766:	6891      	ldr	r1, [r2, #8]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800a768:	6912      	ldr	r2, [r2, #16]
 800a76a:	0014      	movs	r4, r2
 800a76c:	3410      	adds	r4, #16
    while( element != bufferEnd )
 800a76e:	4299      	cmp	r1, r3
 800a770:	d101      	bne.n	800a776 <LoRaMacConfirmQueueIsCmdActive+0x16>
    {
        return true;
    }
    return false;
 800a772:	2000      	movs	r0, #0
}
 800a774:	bd30      	pop	{r4, r5, pc}
        if( element->Request == request )
 800a776:	781d      	ldrb	r5, [r3, #0]
 800a778:	4285      	cmp	r5, r0
 800a77a:	d005      	beq.n	800a788 <LoRaMacConfirmQueueIsCmdActive+0x28>
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800a77c:	42a3      	cmp	r3, r4
 800a77e:	d001      	beq.n	800a784 <LoRaMacConfirmQueueIsCmdActive+0x24>
        bufferPointer++;
 800a780:	3304      	adds	r3, #4
 800a782:	e7f4      	b.n	800a76e <LoRaMacConfirmQueueIsCmdActive+0xe>
        bufferPointer = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 800a784:	0013      	movs	r3, r2
 800a786:	e7f2      	b.n	800a76e <LoRaMacConfirmQueueIsCmdActive+0xe>
        return true;
 800a788:	2001      	movs	r0, #1
 800a78a:	e7f3      	b.n	800a774 <LoRaMacConfirmQueueIsCmdActive+0x14>
 800a78c:	20000f08 	.word	0x20000f08

0800a790 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 800a790:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a792:	0005      	movs	r5, r0
    uint8_t nbElements = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt;
    bool readyToHandle = false;
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 800a794:	2400      	movs	r4, #0
    uint8_t nbElements = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt;
 800a796:	4e13      	ldr	r6, [pc, #76]	; (800a7e4 <LoRaMacConfirmQueueHandleCb+0x54>)
{
 800a798:	b085      	sub	sp, #20
    uint8_t nbElements = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt;
 800a79a:	6933      	ldr	r3, [r6, #16]
 800a79c:	7d1b      	ldrb	r3, [r3, #20]
 800a79e:	9301      	str	r3, [sp, #4]
    for( uint8_t i = 0; i < nbElements; i++ )
 800a7a0:	9b01      	ldr	r3, [sp, #4]
 800a7a2:	429c      	cmp	r4, r3
 800a7a4:	d101      	bne.n	800a7aa <LoRaMacConfirmQueueHandleCb+0x1a>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
        }
    }
}
 800a7a6:	b005      	add	sp, #20
 800a7a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 800a7aa:	6873      	ldr	r3, [r6, #4]
 800a7ac:	7818      	ldrb	r0, [r3, #0]
 800a7ae:	7028      	strb	r0, [r5, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 800a7b0:	7859      	ldrb	r1, [r3, #1]
 800a7b2:	7069      	strb	r1, [r5, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 800a7b4:	789f      	ldrb	r7, [r3, #2]
        if( readyToHandle == true )
 800a7b6:	2f00      	cmp	r7, #0
 800a7b8:	d00d      	beq.n	800a7d6 <LoRaMacConfirmQueueHandleCb+0x46>
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 800a7ba:	6833      	ldr	r3, [r6, #0]
 800a7bc:	0028      	movs	r0, r5
 800a7be:	689b      	ldr	r3, [r3, #8]
 800a7c0:	4798      	blx	r3
        LoRaMacConfirmQueueRemoveFirst( );
 800a7c2:	f7ff ff61 	bl	800a688 <LoRaMacConfirmQueueRemoveFirst>
        if( readyToHandle == false )
 800a7c6:	2f00      	cmp	r7, #0
 800a7c8:	d102      	bne.n	800a7d0 <LoRaMacConfirmQueueHandleCb+0x40>
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 800a7ca:	a803      	add	r0, sp, #12
 800a7cc:	f7ff ff3e 	bl	800a64c <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 800a7d0:	3401      	adds	r4, #1
 800a7d2:	b2e4      	uxtb	r4, r4
 800a7d4:	e7e4      	b.n	800a7a0 <LoRaMacConfirmQueueHandleCb+0x10>
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 800a7d6:	aa03      	add	r2, sp, #12
 800a7d8:	7010      	strb	r0, [r2, #0]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 800a7da:	7051      	strb	r1, [r2, #1]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 800a7dc:	78db      	ldrb	r3, [r3, #3]
 800a7de:	70d3      	strb	r3, [r2, #3]
 800a7e0:	e7ef      	b.n	800a7c2 <LoRaMacConfirmQueueHandleCb+0x32>
 800a7e2:	46c0      	nop			; (mov r8, r8)
 800a7e4:	20000f08 	.word	0x20000f08

0800a7e8 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
    return ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt;
 800a7e8:	4b01      	ldr	r3, [pc, #4]	; (800a7f0 <LoRaMacConfirmQueueGetCnt+0x8>)
 800a7ea:	691b      	ldr	r3, [r3, #16]
 800a7ec:	7d18      	ldrb	r0, [r3, #20]
}
 800a7ee:	4770      	bx	lr
 800a7f0:	20000f08 	.word	0x20000f08

0800a7f4 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 800a7f4:	2004      	movs	r0, #4
    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 800a7f6:	4b03      	ldr	r3, [pc, #12]	; (800a804 <LoRaMacConfirmQueueIsFull+0x10>)
 800a7f8:	691b      	ldr	r3, [r3, #16]
 800a7fa:	7d1b      	ldrb	r3, [r3, #20]
 800a7fc:	4298      	cmp	r0, r3
 800a7fe:	4180      	sbcs	r0, r0
 800a800:	4240      	negs	r0, r0
    }
    else
    {
        return false;
    }
}
 800a802:	4770      	bx	lr
 800a804:	20000f08 	.word	0x20000f08

0800a808 <GetLastFcntDown>:
{
    if( lastDown == NULL )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }
    switch( fCntID )
 800a808:	3801      	subs	r0, #1
{
 800a80a:	b500      	push	{lr}
            break;
        case MC_FCNT_DOWN_3:
            *lastDown = CryptoCtx.NvmCtx->FCntList.McFCntDown3;
            break;
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 800a80c:	2305      	movs	r3, #5
    switch( fCntID )
 800a80e:	2806      	cmp	r0, #6
 800a810:	d80d      	bhi.n	800a82e <GetLastFcntDown+0x26>
 800a812:	4b11      	ldr	r3, [pc, #68]	; (800a858 <GetLastFcntDown+0x50>)
            *lastDown = CryptoCtx.NvmCtx->FCntList.McFCntDown3;
 800a814:	685b      	ldr	r3, [r3, #4]
    switch( fCntID )
 800a816:	f7f5 fc89 	bl	800012c <__gnu_thumb1_case_uqi>
 800a81a:	0c04      	.short	0x0c04
 800a81c:	1b191611 	.word	0x1b191611
 800a820:	1d          	.byte	0x1d
 800a821:	00          	.byte	0x00
            *lastDown = CryptoCtx.NvmCtx->FCntList.NFCntDown;
 800a822:	691a      	ldr	r2, [r3, #16]
 800a824:	600a      	str	r2, [r1, #0]
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.NFCntDown;
 800a826:	001a      	movs	r2, r3
 800a828:	3210      	adds	r2, #16
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.FCntDown;
 800a82a:	631a      	str	r2, [r3, #48]	; 0x30
    }
    return LORAMAC_CRYPTO_SUCCESS;
 800a82c:	2300      	movs	r3, #0
}
 800a82e:	0018      	movs	r0, r3
 800a830:	bd00      	pop	{pc}
            *lastDown = CryptoCtx.NvmCtx->FCntList.AFCntDown;
 800a832:	695a      	ldr	r2, [r3, #20]
 800a834:	600a      	str	r2, [r1, #0]
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.AFCntDown;
 800a836:	001a      	movs	r2, r3
 800a838:	3214      	adds	r2, #20
 800a83a:	e7f6      	b.n	800a82a <GetLastFcntDown+0x22>
            *lastDown = CryptoCtx.NvmCtx->FCntList.FCntDown;
 800a83c:	699a      	ldr	r2, [r3, #24]
 800a83e:	600a      	str	r2, [r1, #0]
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.FCntDown;
 800a840:	001a      	movs	r2, r3
 800a842:	3218      	adds	r2, #24
 800a844:	e7f1      	b.n	800a82a <GetLastFcntDown+0x22>
            *lastDown = CryptoCtx.NvmCtx->FCntList.McFCntDown0;
 800a846:	69db      	ldr	r3, [r3, #28]
            *lastDown = CryptoCtx.NvmCtx->FCntList.McFCntDown3;
 800a848:	600b      	str	r3, [r1, #0]
 800a84a:	e7ef      	b.n	800a82c <GetLastFcntDown+0x24>
            *lastDown = CryptoCtx.NvmCtx->FCntList.McFCntDown1;
 800a84c:	6a1b      	ldr	r3, [r3, #32]
 800a84e:	e7fb      	b.n	800a848 <GetLastFcntDown+0x40>
            *lastDown = CryptoCtx.NvmCtx->FCntList.McFCntDown2;
 800a850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a852:	e7f9      	b.n	800a848 <GetLastFcntDown+0x40>
            *lastDown = CryptoCtx.NvmCtx->FCntList.McFCntDown3;
 800a854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a856:	e7f7      	b.n	800a848 <GetLastFcntDown+0x40>
 800a858:	20000f34 	.word	0x20000f34

0800a85c <DummyCB>:
 * Dummy callback in case if the user provides NULL function pointer
 */
static void DummyCB( void )
{
    return;
}
 800a85c:	4770      	bx	lr

0800a85e <PayloadEncrypt>:
{
 800a85e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a860:	b08d      	sub	sp, #52	; 0x34
 800a862:	001e      	movs	r6, r3
 800a864:	ab12      	add	r3, sp, #72	; 0x48
 800a866:	781b      	ldrb	r3, [r3, #0]
 800a868:	9001      	str	r0, [sp, #4]
 800a86a:	9302      	str	r3, [sp, #8]
    if( buffer == 0 )
 800a86c:	9b01      	ldr	r3, [sp, #4]
{
 800a86e:	000f      	movs	r7, r1
 800a870:	9203      	str	r2, [sp, #12]
 800a872:	9d13      	ldr	r5, [sp, #76]	; 0x4c
        return LORAMAC_CRYPTO_ERROR_NPE;
 800a874:	200a      	movs	r0, #10
    if( buffer == 0 )
 800a876:	2b00      	cmp	r3, #0
 800a878:	d023      	beq.n	800a8c2 <PayloadEncrypt+0x64>
    uint8_t aBlock[16] = { 0 };
 800a87a:	ac08      	add	r4, sp, #32
    uint8_t sBlock[16] = { 0 };
 800a87c:	2210      	movs	r2, #16
 800a87e:	2100      	movs	r1, #0
 800a880:	a804      	add	r0, sp, #16
 800a882:	f004 f8de 	bl	800ea42 <memset>
    uint8_t aBlock[16] = { 0 };
 800a886:	0020      	movs	r0, r4
 800a888:	2210      	movs	r2, #16
 800a88a:	2100      	movs	r1, #0
 800a88c:	f004 f8d9 	bl	800ea42 <memset>
    aBlock[0] = 0x01;
 800a890:	2301      	movs	r3, #1
 800a892:	7023      	strb	r3, [r4, #0]
    aBlock[5] = dir;
 800a894:	9b02      	ldr	r3, [sp, #8]
    aBlock[6] = address & 0xFF;
 800a896:	71a6      	strb	r6, [r4, #6]
    aBlock[5] = dir;
 800a898:	7163      	strb	r3, [r4, #5]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 800a89a:	0a33      	lsrs	r3, r6, #8
 800a89c:	71e3      	strb	r3, [r4, #7]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 800a89e:	0c33      	lsrs	r3, r6, #16
 800a8a0:	7223      	strb	r3, [r4, #8]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 800a8a2:	0a2b      	lsrs	r3, r5, #8
    aBlock[10] = frameCounter & 0xFF;
 800a8a4:	72a5      	strb	r5, [r4, #10]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 800a8a6:	72e3      	strb	r3, [r4, #11]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 800a8a8:	0e36      	lsrs	r6, r6, #24
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 800a8aa:	0c2b      	lsrs	r3, r5, #16
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 800a8ac:	0e2d      	lsrs	r5, r5, #24
    aBlock[9] = ( address >> 24 ) & 0xFF;
 800a8ae:	7266      	strb	r6, [r4, #9]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 800a8b0:	7323      	strb	r3, [r4, #12]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 800a8b2:	7365      	strb	r5, [r4, #13]
    while( size > 0 )
 800a8b4:	2400      	movs	r4, #0
 800a8b6:	0123      	lsls	r3, r4, #4
 800a8b8:	b2db      	uxtb	r3, r3
 800a8ba:	9302      	str	r3, [sp, #8]
 800a8bc:	2f00      	cmp	r7, #0
 800a8be:	dc02      	bgt.n	800a8c6 <PayloadEncrypt+0x68>
    return LORAMAC_CRYPTO_SUCCESS;
 800a8c0:	2000      	movs	r0, #0
}
 800a8c2:	b00d      	add	sp, #52	; 0x34
 800a8c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a8c6:	3401      	adds	r4, #1
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 800a8c8:	ad04      	add	r5, sp, #16
 800a8ca:	b2e4      	uxtb	r4, r4
        aBlock[15] = ctr & 0xFF;
 800a8cc:	a808      	add	r0, sp, #32
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 800a8ce:	002b      	movs	r3, r5
 800a8d0:	9a03      	ldr	r2, [sp, #12]
 800a8d2:	2110      	movs	r1, #16
        aBlock[15] = ctr & 0xFF;
 800a8d4:	73c4      	strb	r4, [r0, #15]
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 800a8d6:	f7fc fd3f 	bl	8007358 <SecureElementAesEncrypt>
 800a8da:	2800      	cmp	r0, #0
 800a8dc:	d115      	bne.n	800a90a <PayloadEncrypt+0xac>
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 800a8de:	1c3e      	adds	r6, r7, #0
 800a8e0:	1c33      	adds	r3, r6, #0
 800a8e2:	2f10      	cmp	r7, #16
 800a8e4:	dd00      	ble.n	800a8e8 <PayloadEncrypt+0x8a>
 800a8e6:	2310      	movs	r3, #16
 800a8e8:	b21b      	sxth	r3, r3
 800a8ea:	4298      	cmp	r0, r3
 800a8ec:	db02      	blt.n	800a8f4 <PayloadEncrypt+0x96>
 800a8ee:	3f10      	subs	r7, #16
 800a8f0:	b23f      	sxth	r7, r7
 800a8f2:	e7e0      	b.n	800a8b6 <PayloadEncrypt+0x58>
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 800a8f4:	9b02      	ldr	r3, [sp, #8]
 800a8f6:	9a01      	ldr	r2, [sp, #4]
 800a8f8:	181b      	adds	r3, r3, r0
 800a8fa:	18d3      	adds	r3, r2, r3
 800a8fc:	781a      	ldrb	r2, [r3, #0]
 800a8fe:	5c29      	ldrb	r1, [r5, r0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 800a900:	3001      	adds	r0, #1
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 800a902:	404a      	eors	r2, r1
 800a904:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 800a906:	b2c0      	uxtb	r0, r0
 800a908:	e7ea      	b.n	800a8e0 <PayloadEncrypt+0x82>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800a90a:	200f      	movs	r0, #15
 800a90c:	e7d9      	b.n	800a8c2 <PayloadEncrypt+0x64>
	...

0800a910 <DeriveSessionKey10x>:
{
 800a910:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a912:	001d      	movs	r5, r3
 800a914:	b085      	sub	sp, #20
 800a916:	0004      	movs	r4, r0
 800a918:	000f      	movs	r7, r1
 800a91a:	0016      	movs	r6, r2
        return LORAMAC_CRYPTO_ERROR_NPE;
 800a91c:	230a      	movs	r3, #10
    if( ( joinNonce == 0 ) || ( netID == 0 ) || ( devNonce == 0 ) )
 800a91e:	2d00      	cmp	r5, #0
 800a920:	d027      	beq.n	800a972 <DeriveSessionKey10x+0x62>
    uint8_t compBase[16] = { 0 };
 800a922:	2210      	movs	r2, #16
 800a924:	2100      	movs	r1, #0
 800a926:	4668      	mov	r0, sp
 800a928:	f004 f88b 	bl	800ea42 <memset>
            compBase[0] = 0x01;
 800a92c:	2301      	movs	r3, #1
    switch( keyID )
 800a92e:	2c08      	cmp	r4, #8
 800a930:	d100      	bne.n	800a934 <DeriveSessionKey10x+0x24>
            compBase[0] = 0x02;
 800a932:	2302      	movs	r3, #2
 800a934:	466a      	mov	r2, sp
 800a936:	7013      	strb	r3, [r2, #0]
    memcpy1( compBase + 1, joinNonce, 3 );
 800a938:	466b      	mov	r3, sp
 800a93a:	2203      	movs	r2, #3
 800a93c:	1c58      	adds	r0, r3, #1
 800a93e:	0039      	movs	r1, r7
 800a940:	f002 fb51 	bl	800cfe6 <memcpy1>
    memcpy1( compBase + 4, netID, 3 );
 800a944:	2203      	movs	r2, #3
 800a946:	0031      	movs	r1, r6
 800a948:	a801      	add	r0, sp, #4
 800a94a:	f002 fb4c 	bl	800cfe6 <memcpy1>
    memcpy1( compBase + 7, devNonce, 2 );
 800a94e:	466b      	mov	r3, sp
 800a950:	2202      	movs	r2, #2
 800a952:	1dd8      	adds	r0, r3, #7
 800a954:	0029      	movs	r1, r5
 800a956:	f002 fb46 	bl	800cfe6 <memcpy1>
    if( SecureElementDeriveAndStoreKey( CryptoCtx.NvmCtx->LrWanVersion, compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 800a95a:	4b07      	ldr	r3, [pc, #28]	; (800a978 <DeriveSessionKey10x+0x68>)
 800a95c:	2202      	movs	r2, #2
 800a95e:	6858      	ldr	r0, [r3, #4]
 800a960:	4669      	mov	r1, sp
 800a962:	0023      	movs	r3, r4
 800a964:	6800      	ldr	r0, [r0, #0]
 800a966:	f7fc fd7e 	bl	8007466 <SecureElementDeriveAndStoreKey>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800a96a:	230f      	movs	r3, #15
    if( SecureElementDeriveAndStoreKey( CryptoCtx.NvmCtx->LrWanVersion, compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 800a96c:	2800      	cmp	r0, #0
 800a96e:	d100      	bne.n	800a972 <DeriveSessionKey10x+0x62>
    return LORAMAC_CRYPTO_SUCCESS;
 800a970:	0003      	movs	r3, r0
}
 800a972:	0018      	movs	r0, r3
 800a974:	b005      	add	sp, #20
 800a976:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a978:	20000f34 	.word	0x20000f34

0800a97c <LoRaMacCryptoDeriveMcKEKey.part.2>:
    }

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
 800a97c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    // Prevent other keys than McRootKey
    if( keyID != MC_ROOT_KEY )
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
    }
    uint8_t compBase[16] = { 0 };
 800a97e:	2210      	movs	r2, #16
 800a980:	2100      	movs	r1, #0
 800a982:	4668      	mov	r0, sp
 800a984:	f004 f85d 	bl	800ea42 <memset>

    if( SecureElementDeriveAndStoreKey( CryptoCtx.NvmCtx->LrWanVersion, compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 800a988:	4b07      	ldr	r3, [pc, #28]	; (800a9a8 <LoRaMacCryptoDeriveMcKEKey.part.2+0x2c>)
 800a98a:	2209      	movs	r2, #9
 800a98c:	6858      	ldr	r0, [r3, #4]
 800a98e:	4669      	mov	r1, sp
 800a990:	237f      	movs	r3, #127	; 0x7f
 800a992:	6800      	ldr	r0, [r0, #0]
 800a994:	f7fc fd67 	bl	8007466 <SecureElementDeriveAndStoreKey>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800a998:	230f      	movs	r3, #15
    if( SecureElementDeriveAndStoreKey( CryptoCtx.NvmCtx->LrWanVersion, compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 800a99a:	2800      	cmp	r0, #0
 800a99c:	d100      	bne.n	800a9a0 <LoRaMacCryptoDeriveMcKEKey.part.2+0x24>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 800a99e:	0003      	movs	r3, r0
}
 800a9a0:	0018      	movs	r0, r3
 800a9a2:	b005      	add	sp, #20
 800a9a4:	bd00      	pop	{pc}
 800a9a6:	46c0      	nop			; (mov r8, r8)
 800a9a8:	20000f34 	.word	0x20000f34

0800a9ac <VerifyCmacB0.constprop.3>:
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
 800a9ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a9ae:	b0c7      	sub	sp, #284	; 0x11c
 800a9b0:	9000      	str	r0, [sp, #0]
 800a9b2:	001c      	movs	r4, r3
    if( msg == 0 )
 800a9b4:	9b00      	ldr	r3, [sp, #0]
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
 800a9b6:	000d      	movs	r5, r1
 800a9b8:	9201      	str	r2, [sp, #4]
 800a9ba:	9f4c      	ldr	r7, [sp, #304]	; 0x130
 800a9bc:	9e4d      	ldr	r6, [sp, #308]	; 0x134
        return LORAMAC_CRYPTO_ERROR_NPE;
 800a9be:	200a      	movs	r0, #10
    if( msg == 0 )
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d042      	beq.n	800aa4a <VerifyCmacB0.constprop.3+0x9e>
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800a9c4:	2380      	movs	r3, #128	; 0x80
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800a9c6:	3004      	adds	r0, #4
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800a9c8:	005b      	lsls	r3, r3, #1
 800a9ca:	4299      	cmp	r1, r3
 800a9cc:	d83d      	bhi.n	800aa4a <VerifyCmacB0.constprop.3+0x9e>
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 800a9ce:	2288      	movs	r2, #136	; 0x88
 800a9d0:	2100      	movs	r1, #0
 800a9d2:	0052      	lsls	r2, r2, #1
 800a9d4:	a802      	add	r0, sp, #8
 800a9d6:	f002 fb1b 	bl	800d010 <memset1>
    b0[0] = 0x49;
 800a9da:	2349      	movs	r3, #73	; 0x49
 800a9dc:	aa02      	add	r2, sp, #8
 800a9de:	7013      	strb	r3, [r2, #0]
    if( ( isAck == true ) && ( dir == DOWNLINK ) )
 800a9e0:	2c00      	cmp	r4, #0
 800a9e2:	d034      	beq.n	800aa4e <VerifyCmacB0.constprop.3+0xa2>
        confFCnt = ( uint16_t )( CryptoCtx.NvmCtx->FCntList.FCntUp % 65536 );
 800a9e4:	4b1c      	ldr	r3, [pc, #112]	; (800aa58 <VerifyCmacB0.constprop.3+0xac>)
 800a9e6:	685b      	ldr	r3, [r3, #4]
 800a9e8:	68db      	ldr	r3, [r3, #12]
        b0[1] = confFCnt & 0xFF;
 800a9ea:	7053      	strb	r3, [r2, #1]
        b0[2] = ( confFCnt >> 8 ) & 0xFF;
 800a9ec:	b29b      	uxth	r3, r3
 800a9ee:	0a1b      	lsrs	r3, r3, #8
 800a9f0:	7093      	strb	r3, [r2, #2]
    b0[3] = 0x00;
 800a9f2:	2400      	movs	r4, #0
    b0[5] = dir;
 800a9f4:	2201      	movs	r2, #1
    b0[3] = 0x00;
 800a9f6:	ab02      	add	r3, sp, #8
    b0[5] = dir;
 800a9f8:	715a      	strb	r2, [r3, #5]
    b0[6] = devAddr & 0xFF;
 800a9fa:	719f      	strb	r7, [r3, #6]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 800a9fc:	aa02      	add	r2, sp, #8
    b0[3] = 0x00;
 800a9fe:	70dc      	strb	r4, [r3, #3]
    b0[4] = 0x00;
 800aa00:	711c      	strb	r4, [r3, #4]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 800aa02:	0a3b      	lsrs	r3, r7, #8
 800aa04:	71d3      	strb	r3, [r2, #7]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 800aa06:	0c3b      	lsrs	r3, r7, #16
 800aa08:	7213      	strb	r3, [r2, #8]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 800aa0a:	0a33      	lsrs	r3, r6, #8
    b0[10] = fCnt & 0xFF;
 800aa0c:	7296      	strb	r6, [r2, #10]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 800aa0e:	72d3      	strb	r3, [r2, #11]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 800aa10:	0e3f      	lsrs	r7, r7, #24
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 800aa12:	0c33      	lsrs	r3, r6, #16
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 800aa14:	0e36      	lsrs	r6, r6, #24
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 800aa16:	7313      	strb	r3, [r2, #12]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 800aa18:	7257      	strb	r7, [r2, #9]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 800aa1a:	7356      	strb	r6, [r2, #13]
    b0[14] = 0x00;
 800aa1c:	7394      	strb	r4, [r2, #14]
    b0[15] = msgLen & 0xFF;
 800aa1e:	73d5      	strb	r5, [r2, #15]
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 800aa20:	9900      	ldr	r1, [sp, #0]
 800aa22:	002a      	movs	r2, r5
 800aa24:	a806      	add	r0, sp, #24
 800aa26:	f002 fade 	bl	800cfe6 <memcpy1>
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 800aa2a:	0029      	movs	r1, r5
 800aa2c:	3110      	adds	r1, #16
 800aa2e:	9b01      	ldr	r3, [sp, #4]
 800aa30:	b289      	uxth	r1, r1
 800aa32:	9a4e      	ldr	r2, [sp, #312]	; 0x138
 800aa34:	a802      	add	r0, sp, #8
 800aa36:	f7fc fc77 	bl	8007328 <SecureElementVerifyAesCmac>
 800aa3a:	0003      	movs	r3, r0
        return LORAMAC_CRYPTO_SUCCESS;
 800aa3c:	0020      	movs	r0, r4
    if( retval == SECURE_ELEMENT_SUCCESS )
 800aa3e:	42a3      	cmp	r3, r4
 800aa40:	d003      	beq.n	800aa4a <VerifyCmacB0.constprop.3+0x9e>
        return LORAMAC_CRYPTO_FAIL_MIC;
 800aa42:	3001      	adds	r0, #1
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 800aa44:	4283      	cmp	r3, r0
 800aa46:	d000      	beq.n	800aa4a <VerifyCmacB0.constprop.3+0x9e>
    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800aa48:	300e      	adds	r0, #14
}
 800aa4a:	b047      	add	sp, #284	; 0x11c
 800aa4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        b0[1] = 0x00;
 800aa4e:	ab02      	add	r3, sp, #8
 800aa50:	705c      	strb	r4, [r3, #1]
        b0[2] = 0x00;
 800aa52:	709c      	strb	r4, [r3, #2]
 800aa54:	e7cd      	b.n	800a9f2 <VerifyCmacB0.constprop.3+0x46>
 800aa56:	46c0      	nop			; (mov r8, r8)
 800aa58:	20000f34 	.word	0x20000f34

0800aa5c <LoRaMacCryptoInit>:
{
 800aa5c:	b570      	push	{r4, r5, r6, lr}
    CryptoCtx.NvmCtx = &NvmCryptoCtx;
 800aa5e:	4c12      	ldr	r4, [pc, #72]	; (800aaa8 <LoRaMacCryptoInit+0x4c>)
 800aa60:	0023      	movs	r3, r4
 800aa62:	330c      	adds	r3, #12
 800aa64:	6063      	str	r3, [r4, #4]
    if( cryptoNvmCtxChanged != 0 )
 800aa66:	2800      	cmp	r0, #0
 800aa68:	d01b      	beq.n	800aaa2 <LoRaMacCryptoInit+0x46>
        CryptoCtx.EventCryptoNvmCtxChanged = cryptoNvmCtxChanged;
 800aa6a:	60a0      	str	r0, [r4, #8]
    memset1( (uint8_t*) CryptoCtx.NvmCtx, 0, sizeof( LoRaMacCryptoNvmCtx_t ) );
 800aa6c:	0020      	movs	r0, r4
 800aa6e:	2234      	movs	r2, #52	; 0x34
 800aa70:	300c      	adds	r0, #12
 800aa72:	2100      	movs	r1, #0
 800aa74:	f002 facc 	bl	800d010 <memset1>
    CryptoCtx.NvmCtx->LrWanVersion.Fields.Major = 1;
 800aa78:	6863      	ldr	r3, [r4, #4]
    CryptoCtx.NvmCtx->LrWanVersion.Fields.Rfu = 0;
 800aa7a:	4a0c      	ldr	r2, [pc, #48]	; (800aaac <LoRaMacCryptoInit+0x50>)
    CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.FCntDown;
 800aa7c:	0019      	movs	r1, r3
    CryptoCtx.NvmCtx->LrWanVersion.Fields.Rfu = 0;
 800aa7e:	601a      	str	r2, [r3, #0]
    CryptoCtx.NvmCtx->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 800aa80:	2201      	movs	r2, #1
    CryptoCtx.NvmCtx->FCntList.FCntUp = 0;
 800aa82:	2500      	movs	r5, #0
    CryptoCtx.NvmCtx->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 800aa84:	4252      	negs	r2, r2
    CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.FCntDown;
 800aa86:	3118      	adds	r1, #24
    CryptoCtx.NvmCtx->FCntList.FCntUp = 0;
 800aa88:	60dd      	str	r5, [r3, #12]
    CryptoCtx.NvmCtx->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 800aa8a:	611a      	str	r2, [r3, #16]
    CryptoCtx.NvmCtx->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 800aa8c:	615a      	str	r2, [r3, #20]
    CryptoCtx.NvmCtx->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 800aa8e:	619a      	str	r2, [r3, #24]
    CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.FCntDown;
 800aa90:	6319      	str	r1, [r3, #48]	; 0x30
    CryptoCtx.NvmCtx->FCntList.McFCntDown0 = FCNT_DOWN_INITAL_VALUE;
 800aa92:	61da      	str	r2, [r3, #28]
    CryptoCtx.NvmCtx->FCntList.McFCntDown1 = FCNT_DOWN_INITAL_VALUE;
 800aa94:	621a      	str	r2, [r3, #32]
    CryptoCtx.NvmCtx->FCntList.McFCntDown2 = FCNT_DOWN_INITAL_VALUE;
 800aa96:	625a      	str	r2, [r3, #36]	; 0x24
    CryptoCtx.NvmCtx->FCntList.McFCntDown3 = FCNT_DOWN_INITAL_VALUE;
 800aa98:	629a      	str	r2, [r3, #40]	; 0x28
    CryptoCtx.EventCryptoNvmCtxChanged( );
 800aa9a:	68a3      	ldr	r3, [r4, #8]
 800aa9c:	4798      	blx	r3
}
 800aa9e:	0028      	movs	r0, r5
 800aaa0:	bd70      	pop	{r4, r5, r6, pc}
        CryptoCtx.EventCryptoNvmCtxChanged = DummyCB;
 800aaa2:	4b03      	ldr	r3, [pc, #12]	; (800aab0 <LoRaMacCryptoInit+0x54>)
 800aaa4:	60a3      	str	r3, [r4, #8]
 800aaa6:	e7e1      	b.n	800aa6c <LoRaMacCryptoInit+0x10>
 800aaa8:	20000f34 	.word	0x20000f34
 800aaac:	01010100 	.word	0x01010100
 800aab0:	0800a85d 	.word	0x0800a85d

0800aab4 <LoRaMacCryptoSetLrWanVersion>:
    CryptoCtx.NvmCtx->LrWanVersion = version;
 800aab4:	4b02      	ldr	r3, [pc, #8]	; (800aac0 <LoRaMacCryptoSetLrWanVersion+0xc>)
 800aab6:	685b      	ldr	r3, [r3, #4]
 800aab8:	6018      	str	r0, [r3, #0]
}
 800aaba:	2000      	movs	r0, #0
 800aabc:	4770      	bx	lr
 800aabe:	46c0      	nop			; (mov r8, r8)
 800aac0:	20000f34 	.word	0x20000f34

0800aac4 <LoRaMacCryptoRestoreNvmCtx>:
{
 800aac4:	0001      	movs	r1, r0
 800aac6:	b510      	push	{r4, lr}
        return LORAMAC_CRYPTO_ERROR_NPE;
 800aac8:	200a      	movs	r0, #10
    if( cryptoNvmCtx != 0 )
 800aaca:	2900      	cmp	r1, #0
 800aacc:	d005      	beq.n	800aada <LoRaMacCryptoRestoreNvmCtx+0x16>
        memcpy1( ( uint8_t* ) &NvmCryptoCtx, ( uint8_t* ) cryptoNvmCtx, CRYPTO_NVM_CTX_SIZE );
 800aace:	4803      	ldr	r0, [pc, #12]	; (800aadc <LoRaMacCryptoRestoreNvmCtx+0x18>)
 800aad0:	2234      	movs	r2, #52	; 0x34
 800aad2:	300c      	adds	r0, #12
 800aad4:	f002 fa87 	bl	800cfe6 <memcpy1>
        return LORAMAC_CRYPTO_SUCCESS;
 800aad8:	2000      	movs	r0, #0
}
 800aada:	bd10      	pop	{r4, pc}
 800aadc:	20000f34 	.word	0x20000f34

0800aae0 <LoRaMacCryptoGetNvmCtx>:
    *cryptoNvmCtxSize = CRYPTO_NVM_CTX_SIZE;
 800aae0:	2334      	movs	r3, #52	; 0x34
 800aae2:	6003      	str	r3, [r0, #0]
    return &NvmCryptoCtx;
 800aae4:	4801      	ldr	r0, [pc, #4]	; (800aaec <LoRaMacCryptoGetNvmCtx+0xc>)
}
 800aae6:	300c      	adds	r0, #12
 800aae8:	4770      	bx	lr
 800aaea:	46c0      	nop			; (mov r8, r8)
 800aaec:	20000f34 	.word	0x20000f34

0800aaf0 <LoRaMacCryptoGetFCntUp>:
        return LORAMAC_CRYPTO_ERROR_NPE;
 800aaf0:	230a      	movs	r3, #10
    if( currentUp == NULL )
 800aaf2:	2800      	cmp	r0, #0
 800aaf4:	d005      	beq.n	800ab02 <LoRaMacCryptoGetFCntUp+0x12>
    *currentUp = CryptoCtx.NvmCtx->FCntList.FCntUp + 1;
 800aaf6:	4b04      	ldr	r3, [pc, #16]	; (800ab08 <LoRaMacCryptoGetFCntUp+0x18>)
 800aaf8:	685b      	ldr	r3, [r3, #4]
 800aafa:	68db      	ldr	r3, [r3, #12]
 800aafc:	3301      	adds	r3, #1
 800aafe:	6003      	str	r3, [r0, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 800ab00:	2300      	movs	r3, #0
}
 800ab02:	0018      	movs	r0, r3
 800ab04:	4770      	bx	lr
 800ab06:	46c0      	nop			; (mov r8, r8)
 800ab08:	20000f34 	.word	0x20000f34

0800ab0c <LoRaMacCryptoGetFCntDown>:
{
 800ab0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab0e:	001c      	movs	r4, r3
    uint32_t lastDown = 0;
 800ab10:	2300      	movs	r3, #0
{
 800ab12:	b085      	sub	sp, #20
 800ab14:	0007      	movs	r7, r0
 800ab16:	9101      	str	r1, [sp, #4]
 800ab18:	0016      	movs	r6, r2
    uint32_t lastDown = 0;
 800ab1a:	9303      	str	r3, [sp, #12]
        return LORAMAC_CRYPTO_ERROR_NPE;
 800ab1c:	200a      	movs	r0, #10
    if( currentDown == NULL )
 800ab1e:	429c      	cmp	r4, r3
 800ab20:	d027      	beq.n	800ab72 <LoRaMacCryptoGetFCntDown+0x66>
    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 800ab22:	a903      	add	r1, sp, #12
 800ab24:	0038      	movs	r0, r7
 800ab26:	f7ff fe6f 	bl	800a808 <GetLastFcntDown>
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800ab2a:	2800      	cmp	r0, #0
 800ab2c:	d121      	bne.n	800ab72 <LoRaMacCryptoGetFCntDown+0x66>
    if( lastDown == FCNT_DOWN_INITAL_VALUE )
 800ab2e:	9903      	ldr	r1, [sp, #12]
 800ab30:	1c4b      	adds	r3, r1, #1
 800ab32:	d101      	bne.n	800ab38 <LoRaMacCryptoGetFCntDown+0x2c>
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 800ab34:	6026      	str	r6, [r4, #0]
 800ab36:	e005      	b.n	800ab44 <LoRaMacCryptoGetFCntDown+0x38>
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 800ab38:	b28b      	uxth	r3, r1
 800ab3a:	1af3      	subs	r3, r6, r3
        if( fCntDiff > 0 )
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	dd14      	ble.n	800ab6a <LoRaMacCryptoGetFCntDown+0x5e>
            *currentDown = lastDown + fCntDiff;
 800ab40:	18cb      	adds	r3, r1, r3
 800ab42:	6023      	str	r3, [r4, #0]
    if( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 0 )
 800ab44:	4b0f      	ldr	r3, [pc, #60]	; (800ab84 <LoRaMacCryptoGetFCntDown+0x78>)
 800ab46:	685b      	ldr	r3, [r3, #4]
 800ab48:	789d      	ldrb	r5, [r3, #2]
 800ab4a:	2d00      	cmp	r5, #0
 800ab4c:	d111      	bne.n	800ab72 <LoRaMacCryptoGetFCntDown+0x66>
        if( ( ( int64_t )*currentDown - ( int64_t )lastDown ) >= maxFCntGap )
 800ab4e:	002b      	movs	r3, r5
 800ab50:	000e      	movs	r6, r1
 800ab52:	002f      	movs	r7, r5
 800ab54:	6822      	ldr	r2, [r4, #0]
 800ab56:	1b92      	subs	r2, r2, r6
 800ab58:	41bb      	sbcs	r3, r7
 800ab5a:	429d      	cmp	r5, r3
 800ab5c:	dc09      	bgt.n	800ab72 <LoRaMacCryptoGetFCntDown+0x66>
 800ab5e:	d102      	bne.n	800ab66 <LoRaMacCryptoGetFCntDown+0x5a>
 800ab60:	9901      	ldr	r1, [sp, #4]
 800ab62:	4291      	cmp	r1, r2
 800ab64:	d805      	bhi.n	800ab72 <LoRaMacCryptoGetFCntDown+0x66>
            return LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT;
 800ab66:	2008      	movs	r0, #8
 800ab68:	e003      	b.n	800ab72 <LoRaMacCryptoGetFCntDown+0x66>
        else if( fCntDiff == 0 )
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d103      	bne.n	800ab76 <LoRaMacCryptoGetFCntDown+0x6a>
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 800ab6e:	2007      	movs	r0, #7
            *currentDown = lastDown;
 800ab70:	6021      	str	r1, [r4, #0]
}
 800ab72:	b005      	add	sp, #20
 800ab74:	bdf0      	pop	{r4, r5, r6, r7, pc}
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 800ab76:	2280      	movs	r2, #128	; 0x80
 800ab78:	0c0b      	lsrs	r3, r1, #16
 800ab7a:	041b      	lsls	r3, r3, #16
 800ab7c:	0252      	lsls	r2, r2, #9
 800ab7e:	189b      	adds	r3, r3, r2
 800ab80:	199e      	adds	r6, r3, r6
 800ab82:	e7d7      	b.n	800ab34 <LoRaMacCryptoGetFCntDown+0x28>
 800ab84:	20000f34 	.word	0x20000f34

0800ab88 <LoRaMacCryptoSetMulticastReference>:
{
 800ab88:	0003      	movs	r3, r0
        return LORAMAC_CRYPTO_ERROR_NPE;
 800ab8a:	200a      	movs	r0, #10
    if( multicastList == NULL )
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d00c      	beq.n	800abaa <LoRaMacCryptoSetMulticastReference+0x22>
    multicastList[0].DownLinkCounter = &CryptoCtx.NvmCtx->FCntList.McFCntDown0;
 800ab90:	4a06      	ldr	r2, [pc, #24]	; (800abac <LoRaMacCryptoSetMulticastReference+0x24>)
    return LORAMAC_CRYPTO_SUCCESS;
 800ab92:	2000      	movs	r0, #0
    multicastList[0].DownLinkCounter = &CryptoCtx.NvmCtx->FCntList.McFCntDown0;
 800ab94:	6852      	ldr	r2, [r2, #4]
 800ab96:	0011      	movs	r1, r2
 800ab98:	311c      	adds	r1, #28
 800ab9a:	61d9      	str	r1, [r3, #28]
    multicastList[1].DownLinkCounter = &CryptoCtx.NvmCtx->FCntList.McFCntDown1;
 800ab9c:	3104      	adds	r1, #4
 800ab9e:	6459      	str	r1, [r3, #68]	; 0x44
    multicastList[2].DownLinkCounter = &CryptoCtx.NvmCtx->FCntList.McFCntDown2;
 800aba0:	3104      	adds	r1, #4
 800aba2:	66d9      	str	r1, [r3, #108]	; 0x6c
    multicastList[3].DownLinkCounter = &CryptoCtx.NvmCtx->FCntList.McFCntDown3;
 800aba4:	3228      	adds	r2, #40	; 0x28
 800aba6:	3394      	adds	r3, #148	; 0x94
 800aba8:	601a      	str	r2, [r3, #0]
}
 800abaa:	4770      	bx	lr
 800abac:	20000f34 	.word	0x20000f34

0800abb0 <LoRaMacCryptoPrepareJoinRequest>:
{
 800abb0:	b530      	push	{r4, r5, lr}
 800abb2:	0004      	movs	r4, r0
 800abb4:	b085      	sub	sp, #20
        return LORAMAC_CRYPTO_ERROR_NPE;
 800abb6:	200a      	movs	r0, #10
    if( macMsg == 0 )
 800abb8:	2c00      	cmp	r4, #0
 800abba:	d013      	beq.n	800abe4 <LoRaMacCryptoPrepareJoinRequest+0x34>
    uint32_t devNonce = 0;
 800abbc:	2300      	movs	r3, #0
    SecureElementRandomNumber( &devNonce );
 800abbe:	a803      	add	r0, sp, #12
    uint32_t devNonce = 0;
 800abc0:	9303      	str	r3, [sp, #12]
    SecureElementRandomNumber( &devNonce );
 800abc2:	f7fc fc79 	bl	80074b8 <SecureElementRandomNumber>
    CryptoCtx.NvmCtx->DevNonce = devNonce;
 800abc6:	4d11      	ldr	r5, [pc, #68]	; (800ac0c <LoRaMacCryptoPrepareJoinRequest+0x5c>)
 800abc8:	9b03      	ldr	r3, [sp, #12]
 800abca:	686a      	ldr	r2, [r5, #4]
 800abcc:	8093      	strh	r3, [r2, #4]
    CryptoCtx.EventCryptoNvmCtxChanged( );
 800abce:	68ab      	ldr	r3, [r5, #8]
 800abd0:	4798      	blx	r3
    macMsg->DevNonce = CryptoCtx.NvmCtx->DevNonce;
 800abd2:	686b      	ldr	r3, [r5, #4]
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800abd4:	0020      	movs	r0, r4
    macMsg->DevNonce = CryptoCtx.NvmCtx->DevNonce;
 800abd6:	889b      	ldrh	r3, [r3, #4]
 800abd8:	82e3      	strh	r3, [r4, #22]
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800abda:	f000 fa9a 	bl	800b112 <LoRaMacSerializerJoinRequest>
 800abde:	2800      	cmp	r0, #0
 800abe0:	d002      	beq.n	800abe8 <LoRaMacCryptoPrepareJoinRequest+0x38>
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800abe2:	2011      	movs	r0, #17
}
 800abe4:	b005      	add	sp, #20
 800abe6:	bd30      	pop	{r4, r5, pc}
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 800abe8:	0023      	movs	r3, r4
 800abea:	3318      	adds	r3, #24
 800abec:	9300      	str	r3, [sp, #0]
 800abee:	2213      	movs	r2, #19
 800abf0:	2302      	movs	r3, #2
 800abf2:	6821      	ldr	r1, [r4, #0]
 800abf4:	f7fc fb88 	bl	8007308 <SecureElementComputeAesCmac>
 800abf8:	0003      	movs	r3, r0
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800abfa:	200f      	movs	r0, #15
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d1f1      	bne.n	800abe4 <LoRaMacCryptoPrepareJoinRequest+0x34>
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800ac00:	0020      	movs	r0, r4
 800ac02:	f000 fa86 	bl	800b112 <LoRaMacSerializerJoinRequest>
 800ac06:	2800      	cmp	r0, #0
 800ac08:	d0ec      	beq.n	800abe4 <LoRaMacCryptoPrepareJoinRequest+0x34>
 800ac0a:	e7ea      	b.n	800abe2 <LoRaMacCryptoPrepareJoinRequest+0x32>
 800ac0c:	20000f34 	.word	0x20000f34

0800ac10 <LoRaMacCryptoSecureMessage>:
{
 800ac10:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac12:	0006      	movs	r6, r0
 800ac14:	b089      	sub	sp, #36	; 0x24
 800ac16:	001d      	movs	r5, r3
        return LORAMAC_CRYPTO_ERROR_NPE;
 800ac18:	200a      	movs	r0, #10
    if( macMsg == NULL )
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d023      	beq.n	800ac66 <LoRaMacCryptoSecureMessage+0x56>
    if( fCntUp < CryptoCtx.NvmCtx->FCntList.FCntUp )
 800ac1e:	4c2d      	ldr	r4, [pc, #180]	; (800acd4 <LoRaMacCryptoSecureMessage+0xc4>)
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 800ac20:	3804      	subs	r0, #4
    if( fCntUp < CryptoCtx.NvmCtx->FCntList.FCntUp )
 800ac22:	6863      	ldr	r3, [r4, #4]
 800ac24:	68db      	ldr	r3, [r3, #12]
 800ac26:	42b3      	cmp	r3, r6
 800ac28:	d81d      	bhi.n	800ac66 <LoRaMacCryptoSecureMessage+0x56>
    if( macMsg->FPort == 0 )
 800ac2a:	1c6a      	adds	r2, r5, #1
 800ac2c:	7fd2      	ldrb	r2, [r2, #31]
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
 800ac2e:	1e51      	subs	r1, r2, #1
 800ac30:	418a      	sbcs	r2, r1
 800ac32:	3207      	adds	r2, #7
    if( fCntUp > CryptoCtx.NvmCtx->FCntList.FCntUp )
 800ac34:	42b3      	cmp	r3, r6
 800ac36:	d30a      	bcc.n	800ac4e <LoRaMacCryptoSecureMessage+0x3e>
    CryptoCtx.NvmCtx->FCntList.FCntUp = fCntUp;
 800ac38:	6863      	ldr	r3, [r4, #4]
 800ac3a:	60de      	str	r6, [r3, #12]
    CryptoCtx.EventCryptoNvmCtxChanged( );
 800ac3c:	68a3      	ldr	r3, [r4, #8]
 800ac3e:	4798      	blx	r3
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800ac40:	0028      	movs	r0, r5
 800ac42:	f000 fa9b 	bl	800b17c <LoRaMacSerializerData>
 800ac46:	1e07      	subs	r7, r0, #0
 800ac48:	d00f      	beq.n	800ac6a <LoRaMacCryptoSecureMessage+0x5a>
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800ac4a:	2011      	movs	r0, #17
 800ac4c:	e00b      	b.n	800ac66 <LoRaMacCryptoSecureMessage+0x56>
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 800ac4e:	002b      	movs	r3, r5
 800ac50:	3328      	adds	r3, #40	; 0x28
 800ac52:	7819      	ldrb	r1, [r3, #0]
 800ac54:	2300      	movs	r3, #0
 800ac56:	9601      	str	r6, [sp, #4]
 800ac58:	9300      	str	r3, [sp, #0]
 800ac5a:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800ac5c:	68ab      	ldr	r3, [r5, #8]
 800ac5e:	f7ff fdfe 	bl	800a85e <PayloadEncrypt>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800ac62:	2800      	cmp	r0, #0
 800ac64:	d0e8      	beq.n	800ac38 <LoRaMacCryptoSecureMessage+0x28>
}
 800ac66:	b009      	add	sp, #36	; 0x24
 800ac68:	bdf0      	pop	{r4, r5, r6, r7, pc}
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), NWK_S_ENC_KEY, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 800ac6a:	6829      	ldr	r1, [r5, #0]
        return LORAMAC_CRYPTO_ERROR_NPE;
 800ac6c:	200a      	movs	r0, #10
    if( ( msg == 0 ) || ( cmac == 0 ) )
 800ac6e:	2900      	cmp	r1, #0
 800ac70:	d0f9      	beq.n	800ac66 <LoRaMacCryptoSecureMessage+0x56>
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), NWK_S_ENC_KEY, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 800ac72:	792b      	ldrb	r3, [r5, #4]
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800ac74:	2480      	movs	r4, #128	; 0x80
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), NWK_S_ENC_KEY, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 800ac76:	3b04      	subs	r3, #4
 800ac78:	9303      	str	r3, [sp, #12]
 800ac7a:	466b      	mov	r3, sp
 800ac7c:	899a      	ldrh	r2, [r3, #12]
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800ac7e:	0064      	lsls	r4, r4, #1
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800ac80:	200e      	movs	r0, #14
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800ac82:	42a2      	cmp	r2, r4
 800ac84:	d8ef      	bhi.n	800ac66 <LoRaMacCryptoSecureMessage+0x56>
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), NWK_S_ENC_KEY, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 800ac86:	68a8      	ldr	r0, [r5, #8]
    b0[0] = 0x49;
 800ac88:	3cb7      	subs	r4, #183	; 0xb7
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 800ac8a:	0a03      	lsrs	r3, r0, #8
    b0[0] = 0x49;
 800ac8c:	9404      	str	r4, [sp, #16]
    b0[3] = 0x00;
 800ac8e:	ac04      	add	r4, sp, #16
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 800ac90:	71e3      	strb	r3, [r4, #7]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 800ac92:	0c03      	lsrs	r3, r0, #16
 800ac94:	7223      	strb	r3, [r4, #8]
    b0[15] = msgLen & 0xFF;
 800ac96:	9b03      	ldr	r3, [sp, #12]
    b0[6] = devAddr & 0xFF;
 800ac98:	71a0      	strb	r0, [r4, #6]
    b0[15] = msgLen & 0xFF;
 800ac9a:	73e3      	strb	r3, [r4, #15]
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), NWK_S_ENC_KEY, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 800ac9c:	002b      	movs	r3, r5
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 800ac9e:	0e00      	lsrs	r0, r0, #24
 800aca0:	7260      	strb	r0, [r4, #9]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 800aca2:	0a30      	lsrs	r0, r6, #8
    b0[10] = fCnt & 0xFF;
 800aca4:	72a6      	strb	r6, [r4, #10]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 800aca6:	72e0      	strb	r0, [r4, #11]
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), NWK_S_ENC_KEY, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 800aca8:	332c      	adds	r3, #44	; 0x2c
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 800acaa:	0c30      	lsrs	r0, r6, #16
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 800acac:	0e36      	lsrs	r6, r6, #24
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 800acae:	7320      	strb	r0, [r4, #12]
    b0[3] = 0x00;
 800acb0:	80a7      	strh	r7, [r4, #4]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 800acb2:	7366      	strb	r6, [r4, #13]
    b0[14] = 0x00;
 800acb4:	73a7      	strb	r7, [r4, #14]
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 800acb6:	0020      	movs	r0, r4
 800acb8:	9300      	str	r3, [sp, #0]
 800acba:	2307      	movs	r3, #7
 800acbc:	f7fc fb24 	bl	8007308 <SecureElementComputeAesCmac>
 800acc0:	0003      	movs	r3, r0
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800acc2:	200f      	movs	r0, #15
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d1ce      	bne.n	800ac66 <LoRaMacCryptoSecureMessage+0x56>
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800acc8:	0028      	movs	r0, r5
 800acca:	f000 fa57 	bl	800b17c <LoRaMacSerializerData>
 800acce:	2800      	cmp	r0, #0
 800acd0:	d0c9      	beq.n	800ac66 <LoRaMacCryptoSecureMessage+0x56>
 800acd2:	e7ba      	b.n	800ac4a <LoRaMacCryptoSecureMessage+0x3a>
 800acd4:	20000f34 	.word	0x20000f34

0800acd8 <LoRaMacCryptoUnsecureMessage>:
{
 800acd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800acda:	b08b      	sub	sp, #44	; 0x2c
 800acdc:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800acde:	0007      	movs	r7, r0
 800ace0:	9106      	str	r1, [sp, #24]
 800ace2:	9207      	str	r2, [sp, #28]
 800ace4:	001c      	movs	r4, r3
        return LORAMAC_CRYPTO_ERROR_NPE;
 800ace6:	260a      	movs	r6, #10
    if( macMsg == 0 )
 800ace8:	2d00      	cmp	r5, #0
 800acea:	d008      	beq.n	800acfe <LoRaMacCryptoUnsecureMessage+0x26>
    uint32_t lastDown = 0;
 800acec:	2300      	movs	r3, #0
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 800acee:	a909      	add	r1, sp, #36	; 0x24
 800acf0:	0010      	movs	r0, r2
    uint32_t lastDown = 0;
 800acf2:	9309      	str	r3, [sp, #36]	; 0x24
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 800acf4:	f7ff fd88 	bl	800a808 <GetLastFcntDown>
 800acf8:	2800      	cmp	r0, #0
 800acfa:	d003      	beq.n	800ad04 <LoRaMacCryptoUnsecureMessage+0x2c>
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 800acfc:	2606      	movs	r6, #6
}
 800acfe:	0030      	movs	r0, r6
 800ad00:	b00b      	add	sp, #44	; 0x2c
 800ad02:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( ( currentDown > lastDown ) ||
 800ad04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad06:	429c      	cmp	r4, r3
 800ad08:	d801      	bhi.n	800ad0e <LoRaMacCryptoUnsecureMessage+0x36>
 800ad0a:	3301      	adds	r3, #1
 800ad0c:	d1f6      	bne.n	800acfc <LoRaMacCryptoUnsecureMessage+0x24>
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800ad0e:	0028      	movs	r0, r5
 800ad10:	f000 f9a4 	bl	800b05c <LoRaMacParserData>
        return LORAMAC_CRYPTO_ERROR_PARSER;
 800ad14:	2610      	movs	r6, #16
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800ad16:	2800      	cmp	r0, #0
 800ad18:	d1f1      	bne.n	800acfe <LoRaMacCryptoUnsecureMessage+0x26>
        if( KeyAddrList[i].AddrID == addrID )
 800ad1a:	4a2c      	ldr	r2, [pc, #176]	; (800adcc <LoRaMacCryptoUnsecureMessage+0xf4>)
 800ad1c:	0083      	lsls	r3, r0, #2
 800ad1e:	469c      	mov	ip, r3
 800ad20:	5c9b      	ldrb	r3, [r3, r2]
 800ad22:	42bb      	cmp	r3, r7
 800ad24:	d13d      	bne.n	800ada2 <LoRaMacCryptoUnsecureMessage+0xca>
    if( address != macMsg->FHDR.DevAddr )
 800ad26:	68ab      	ldr	r3, [r5, #8]
 800ad28:	9906      	ldr	r1, [sp, #24]
 800ad2a:	9305      	str	r3, [sp, #20]
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 800ad2c:	2602      	movs	r6, #2
    if( address != macMsg->FHDR.DevAddr )
 800ad2e:	428b      	cmp	r3, r1
 800ad30:	d1e5      	bne.n	800acfe <LoRaMacCryptoUnsecureMessage+0x26>
    if( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 0 )
 800ad32:	4927      	ldr	r1, [pc, #156]	; (800add0 <LoRaMacCryptoUnsecureMessage+0xf8>)
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 800ad34:	7b2b      	ldrb	r3, [r5, #12]
    if( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 0 )
 800ad36:	6849      	ldr	r1, [r1, #4]
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 800ad38:	069b      	lsls	r3, r3, #26
    if( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 0 )
 800ad3a:	7889      	ldrb	r1, [r1, #2]
    payloadDecryptionKeyID = curItem->AppSkey;
 800ad3c:	4462      	add	r2, ip
        isAck = false;
 800ad3e:	1e48      	subs	r0, r1, #1
 800ad40:	4181      	sbcs	r1, r0
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 800ad42:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
        isAck = false;
 800ad44:	4249      	negs	r1, r1
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 800ad46:	0fdb      	lsrs	r3, r3, #31
    payloadDecryptionKeyID = curItem->AppSkey;
 800ad48:	7857      	ldrb	r7, [r2, #1]
        isAck = false;
 800ad4a:	400b      	ands	r3, r1
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 800ad4c:	7892      	ldrb	r2, [r2, #2]
 800ad4e:	7929      	ldrb	r1, [r5, #4]
 800ad50:	9002      	str	r0, [sp, #8]
 800ad52:	9806      	ldr	r0, [sp, #24]
 800ad54:	9401      	str	r4, [sp, #4]
 800ad56:	9000      	str	r0, [sp, #0]
 800ad58:	3904      	subs	r1, #4
 800ad5a:	b289      	uxth	r1, r1
 800ad5c:	6828      	ldr	r0, [r5, #0]
 800ad5e:	f7ff fe25 	bl	800a9ac <VerifyCmacB0.constprop.3>
 800ad62:	1e06      	subs	r6, r0, #0
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800ad64:	d1cb      	bne.n	800acfe <LoRaMacCryptoUnsecureMessage+0x26>
    if( macMsg->FPort == 0 )
 800ad66:	1c6b      	adds	r3, r5, #1
 800ad68:	7fdb      	ldrb	r3, [r3, #31]
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d100      	bne.n	800ad70 <LoRaMacCryptoUnsecureMessage+0x98>
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
 800ad6e:	2707      	movs	r7, #7
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 800ad70:	002b      	movs	r3, r5
 800ad72:	3328      	adds	r3, #40	; 0x28
 800ad74:	7819      	ldrb	r1, [r3, #0]
 800ad76:	2301      	movs	r3, #1
 800ad78:	9401      	str	r4, [sp, #4]
 800ad7a:	9300      	str	r3, [sp, #0]
 800ad7c:	003a      	movs	r2, r7
 800ad7e:	9b05      	ldr	r3, [sp, #20]
 800ad80:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800ad82:	f7ff fd6c 	bl	800a85e <PayloadEncrypt>
 800ad86:	1e06      	subs	r6, r0, #0
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800ad88:	d1b9      	bne.n	800acfe <LoRaMacCryptoUnsecureMessage+0x26>
    switch( fCntID )
 800ad8a:	9807      	ldr	r0, [sp, #28]
 800ad8c:	4b10      	ldr	r3, [pc, #64]	; (800add0 <LoRaMacCryptoUnsecureMessage+0xf8>)
 800ad8e:	3801      	subs	r0, #1
 800ad90:	2806      	cmp	r0, #6
 800ad92:	d80c      	bhi.n	800adae <LoRaMacCryptoUnsecureMessage+0xd6>
            CryptoCtx.NvmCtx->FCntList.McFCntDown3 = currentDown;
 800ad94:	685a      	ldr	r2, [r3, #4]
    switch( fCntID )
 800ad96:	f7f5 f9c9 	bl	800012c <__gnu_thumb1_case_uqi>
 800ad9a:	0d09      	.short	0x0d09
 800ad9c:	1513110f 	.word	0x1513110f
 800ada0:	17          	.byte	0x17
 800ada1:	00          	.byte	0x00
 800ada2:	3001      	adds	r0, #1
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 800ada4:	2805      	cmp	r0, #5
 800ada6:	d1b9      	bne.n	800ad1c <LoRaMacCryptoUnsecureMessage+0x44>
 800ada8:	260c      	movs	r6, #12
 800adaa:	e7a8      	b.n	800acfe <LoRaMacCryptoUnsecureMessage+0x26>
            CryptoCtx.NvmCtx->FCntList.NFCntDown = currentDown;
 800adac:	6114      	str	r4, [r2, #16]
    CryptoCtx.EventCryptoNvmCtxChanged( );
 800adae:	689b      	ldr	r3, [r3, #8]
 800adb0:	4798      	blx	r3
 800adb2:	e7a4      	b.n	800acfe <LoRaMacCryptoUnsecureMessage+0x26>
            CryptoCtx.NvmCtx->FCntList.AFCntDown = currentDown;
 800adb4:	6154      	str	r4, [r2, #20]
 800adb6:	e7fa      	b.n	800adae <LoRaMacCryptoUnsecureMessage+0xd6>
            CryptoCtx.NvmCtx->FCntList.FCntDown = currentDown;
 800adb8:	6194      	str	r4, [r2, #24]
 800adba:	e7f8      	b.n	800adae <LoRaMacCryptoUnsecureMessage+0xd6>
            CryptoCtx.NvmCtx->FCntList.McFCntDown0 = currentDown;
 800adbc:	61d4      	str	r4, [r2, #28]
 800adbe:	e7f6      	b.n	800adae <LoRaMacCryptoUnsecureMessage+0xd6>
            CryptoCtx.NvmCtx->FCntList.McFCntDown1 = currentDown;
 800adc0:	6214      	str	r4, [r2, #32]
 800adc2:	e7f4      	b.n	800adae <LoRaMacCryptoUnsecureMessage+0xd6>
            CryptoCtx.NvmCtx->FCntList.McFCntDown2 = currentDown;
 800adc4:	6254      	str	r4, [r2, #36]	; 0x24
 800adc6:	e7f2      	b.n	800adae <LoRaMacCryptoUnsecureMessage+0xd6>
            CryptoCtx.NvmCtx->FCntList.McFCntDown3 = currentDown;
 800adc8:	6294      	str	r4, [r2, #40]	; 0x28
 800adca:	e7f0      	b.n	800adae <LoRaMacCryptoUnsecureMessage+0xd6>
 800adcc:	20000048 	.word	0x20000048
 800add0:	20000f34 	.word	0x20000f34

0800add4 <LoRaMacCryptoDeriveMcRootKey>:
{
 800add4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800add6:	4b13      	ldr	r3, [pc, #76]	; (800ae24 <LoRaMacCryptoDeriveMcRootKey+0x50>)
 800add8:	0004      	movs	r4, r0
 800adda:	685e      	ldr	r6, [r3, #4]
 800addc:	78b5      	ldrb	r5, [r6, #2]
    if( ( ( keyID == APP_KEY ) && ( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 0 ) ) ||
 800adde:	2800      	cmp	r0, #0
 800ade0:	d105      	bne.n	800adee <LoRaMacCryptoDeriveMcRootKey+0x1a>
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 800ade2:	230b      	movs	r3, #11
    if( ( ( keyID == APP_KEY ) && ( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 0 ) ) ||
 800ade4:	2d00      	cmp	r5, #0
 800ade6:	d107      	bne.n	800adf8 <LoRaMacCryptoDeriveMcRootKey+0x24>
}
 800ade8:	0018      	movs	r0, r3
 800adea:	b004      	add	sp, #16
 800adec:	bd70      	pop	{r4, r5, r6, pc}
    if( ( ( keyID == APP_KEY ) && ( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 0 ) ) ||
 800adee:	2801      	cmp	r0, #1
 800adf0:	d102      	bne.n	800adf8 <LoRaMacCryptoDeriveMcRootKey+0x24>
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 800adf2:	230b      	movs	r3, #11
        ( ( keyID == GEN_APP_KEY ) && ( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 1 ) ) )
 800adf4:	2d01      	cmp	r5, #1
 800adf6:	d0f7      	beq.n	800ade8 <LoRaMacCryptoDeriveMcRootKey+0x14>
    uint8_t compBase[16] = { 0 };
 800adf8:	2210      	movs	r2, #16
 800adfa:	2100      	movs	r1, #0
 800adfc:	4668      	mov	r0, sp
 800adfe:	f003 fe20 	bl	800ea42 <memset>
    if( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 1 )
 800ae02:	2d01      	cmp	r5, #1
 800ae04:	d102      	bne.n	800ae0c <LoRaMacCryptoDeriveMcRootKey+0x38>
        compBase[0] = 0x20;
 800ae06:	2320      	movs	r3, #32
 800ae08:	466a      	mov	r2, sp
 800ae0a:	7013      	strb	r3, [r2, #0]
    if( SecureElementDeriveAndStoreKey( CryptoCtx.NvmCtx->LrWanVersion, compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 800ae0c:	2309      	movs	r3, #9
 800ae0e:	0022      	movs	r2, r4
 800ae10:	4669      	mov	r1, sp
 800ae12:	6830      	ldr	r0, [r6, #0]
 800ae14:	f7fc fb27 	bl	8007466 <SecureElementDeriveAndStoreKey>
    return LORAMAC_CRYPTO_SUCCESS;
 800ae18:	2300      	movs	r3, #0
    if( SecureElementDeriveAndStoreKey( CryptoCtx.NvmCtx->LrWanVersion, compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 800ae1a:	4298      	cmp	r0, r3
 800ae1c:	d0e4      	beq.n	800ade8 <LoRaMacCryptoDeriveMcRootKey+0x14>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800ae1e:	330f      	adds	r3, #15
 800ae20:	e7e2      	b.n	800ade8 <LoRaMacCryptoDeriveMcRootKey+0x14>
 800ae22:	46c0      	nop			; (mov r8, r8)
 800ae24:	20000f34 	.word	0x20000f34

0800ae28 <LoRaMacCryptoSetKey>:
{
 800ae28:	b510      	push	{r4, lr}
 800ae2a:	0004      	movs	r4, r0
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 800ae2c:	f7fc fb12 	bl	8007454 <SecureElementSetKey>
 800ae30:	2800      	cmp	r0, #0
 800ae32:	d001      	beq.n	800ae38 <LoRaMacCryptoSetKey+0x10>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800ae34:	200f      	movs	r0, #15
}
 800ae36:	bd10      	pop	{r4, pc}
    if( ( keyID == GEN_APP_KEY ) || ( keyID == APP_KEY ) )
 800ae38:	2c01      	cmp	r4, #1
 800ae3a:	d808      	bhi.n	800ae4e <LoRaMacCryptoSetKey+0x26>
        if( LoRaMacCryptoDeriveMcRootKey( keyID ) != LORAMAC_CRYPTO_SUCCESS )
 800ae3c:	0020      	movs	r0, r4
 800ae3e:	f7ff ffc9 	bl	800add4 <LoRaMacCryptoDeriveMcRootKey>
 800ae42:	2800      	cmp	r0, #0
 800ae44:	d1f6      	bne.n	800ae34 <LoRaMacCryptoSetKey+0xc>
 800ae46:	f7ff fd99 	bl	800a97c <LoRaMacCryptoDeriveMcKEKey.part.2>
        if( LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 800ae4a:	2800      	cmp	r0, #0
 800ae4c:	d1f2      	bne.n	800ae34 <LoRaMacCryptoSetKey+0xc>
    return LORAMAC_CRYPTO_SUCCESS;
 800ae4e:	2000      	movs	r0, #0
 800ae50:	e7f1      	b.n	800ae36 <LoRaMacCryptoSetKey+0xe>
	...

0800ae54 <LoRaMacCryptoHandleJoinAccept>:
{
 800ae54:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae56:	b0c9      	sub	sp, #292	; 0x124
 800ae58:	9001      	str	r0, [sp, #4]
 800ae5a:	9102      	str	r1, [sp, #8]
 800ae5c:	0014      	movs	r4, r2
        return LORAMAC_CRYPTO_ERROR_NPE;
 800ae5e:	250a      	movs	r5, #10
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 800ae60:	2a00      	cmp	r2, #0
 800ae62:	d01b      	beq.n	800ae9c <LoRaMacCryptoHandleJoinAccept+0x48>
 800ae64:	2900      	cmp	r1, #0
 800ae66:	d019      	beq.n	800ae9c <LoRaMacCryptoHandleJoinAccept+0x48>
        micComputationOffset = CRYPTO_MIC_COMPUTATION_OFFSET;
 800ae68:	3502      	adds	r5, #2
    if( joinReqType == JOIN_REQ )
 800ae6a:	28ff      	cmp	r0, #255	; 0xff
 800ae6c:	d000      	beq.n	800ae70 <LoRaMacCryptoHandleJoinAccept+0x1c>
    uint8_t micComputationOffset = 0;
 800ae6e:	2500      	movs	r5, #0
    memset1( procBuffer, 0, ( macMsg->BufSize + micComputationOffset ) );
 800ae70:	b2ab      	uxth	r3, r5
 800ae72:	9303      	str	r3, [sp, #12]
 800ae74:	7922      	ldrb	r2, [r4, #4]
 800ae76:	af05      	add	r7, sp, #20
 800ae78:	189a      	adds	r2, r3, r2
 800ae7a:	2100      	movs	r1, #0
 800ae7c:	0038      	movs	r0, r7
 800ae7e:	f002 f8c7 	bl	800d010 <memset1>
    if( SecureElementAesEncrypt( macMsg->Buffer + LORAMAC_MHDR_FIELD_SIZE, ( macMsg->BufSize - LORAMAC_MHDR_FIELD_SIZE ), encryptionKeyID, ( procBuffer + micComputationOffset ) ) != SECURE_ELEMENT_SUCCESS )
 800ae82:	7921      	ldrb	r1, [r4, #4]
 800ae84:	6823      	ldr	r3, [r4, #0]
 800ae86:	197d      	adds	r5, r7, r5
 800ae88:	3901      	subs	r1, #1
 800ae8a:	1c58      	adds	r0, r3, #1
 800ae8c:	b289      	uxth	r1, r1
 800ae8e:	002b      	movs	r3, r5
 800ae90:	2202      	movs	r2, #2
 800ae92:	f7fc fa61 	bl	8007358 <SecureElementAesEncrypt>
 800ae96:	2800      	cmp	r0, #0
 800ae98:	d003      	beq.n	800aea2 <LoRaMacCryptoHandleJoinAccept+0x4e>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800ae9a:	250f      	movs	r5, #15
}
 800ae9c:	0028      	movs	r0, r5
 800ae9e:	b049      	add	sp, #292	; 0x124
 800aea0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    memcpy1( macMsg->Buffer + LORAMAC_MHDR_FIELD_SIZE, ( procBuffer + micComputationOffset ), ( macMsg->BufSize - LORAMAC_MHDR_FIELD_SIZE ) );
 800aea2:	7922      	ldrb	r2, [r4, #4]
 800aea4:	6823      	ldr	r3, [r4, #0]
 800aea6:	3a01      	subs	r2, #1
 800aea8:	1c58      	adds	r0, r3, #1
 800aeaa:	0029      	movs	r1, r5
 800aeac:	b292      	uxth	r2, r2
 800aeae:	f002 f89a 	bl	800cfe6 <memcpy1>
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800aeb2:	0020      	movs	r0, r4
 800aeb4:	f000 f886 	bl	800afc4 <LoRaMacParserJoinAccept>
        return LORAMAC_CRYPTO_ERROR_PARSER;
 800aeb8:	2510      	movs	r5, #16
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800aeba:	2800      	cmp	r0, #0
 800aebc:	d1ee      	bne.n	800ae9c <LoRaMacCryptoHandleJoinAccept+0x48>
 800aebe:	4e40      	ldr	r6, [pc, #256]	; (800afc0 <LoRaMacCryptoHandleJoinAccept+0x16c>)
    if( macMsg->DLSettings.Bits.OptNeg == 1 )
 800aec0:	7c22      	ldrb	r2, [r4, #16]
 800aec2:	6873      	ldr	r3, [r6, #4]
 800aec4:	2a7f      	cmp	r2, #127	; 0x7f
 800aec6:	d949      	bls.n	800af5c <LoRaMacCryptoHandleJoinAccept+0x108>
        CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor = 1;
 800aec8:	2201      	movs	r2, #1
        micComputationKeyID = J_S_INT_KEY;
 800aeca:	3d0d      	subs	r5, #13
        CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor = 1;
 800aecc:	709a      	strb	r2, [r3, #2]
    if( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 0 )
 800aece:	789b      	ldrb	r3, [r3, #2]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d146      	bne.n	800af62 <LoRaMacCryptoHandleJoinAccept+0x10e>
        if( SecureElementVerifyAesCmac( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), macMsg->MIC, micComputationKeyID ) != SECURE_ELEMENT_SUCCESS )
 800aed4:	7921      	ldrb	r1, [r4, #4]
 800aed6:	002b      	movs	r3, r5
 800aed8:	3904      	subs	r1, #4
 800aeda:	b289      	uxth	r1, r1
 800aedc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800aede:	6820      	ldr	r0, [r4, #0]
 800aee0:	f7fc fa22 	bl	8007328 <SecureElementVerifyAesCmac>
 800aee4:	2800      	cmp	r0, #0
 800aee6:	d1d8      	bne.n	800ae9a <LoRaMacCryptoHandleJoinAccept+0x46>
        retval = LoRaMacCryptoDeriveMcRootKey( GEN_APP_KEY );
 800aee8:	2001      	movs	r0, #1
 800aeea:	f7ff ff73 	bl	800add4 <LoRaMacCryptoDeriveMcRootKey>
 800aeee:	1e05      	subs	r5, r0, #0
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800aef0:	d1d4      	bne.n	800ae9c <LoRaMacCryptoHandleJoinAccept+0x48>
 800aef2:	f7ff fd43 	bl	800a97c <LoRaMacCryptoDeriveMcKEKey.part.2>
 800aef6:	1e05      	subs	r5, r0, #0
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800aef8:	d1d0      	bne.n	800ae9c <LoRaMacCryptoHandleJoinAccept+0x48>
        retval = DeriveSessionKey10x( APP_S_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* ) &CryptoCtx.NvmCtx->DevNonce );
 800aefa:	6873      	ldr	r3, [r6, #4]
 800aefc:	1da7      	adds	r7, r4, #6
 800aefe:	3409      	adds	r4, #9
 800af00:	3304      	adds	r3, #4
 800af02:	0022      	movs	r2, r4
 800af04:	0039      	movs	r1, r7
 800af06:	2008      	movs	r0, #8
 800af08:	f7ff fd02 	bl	800a910 <DeriveSessionKey10x>
 800af0c:	1e05      	subs	r5, r0, #0
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800af0e:	d1c5      	bne.n	800ae9c <LoRaMacCryptoHandleJoinAccept+0x48>
        retval = DeriveSessionKey10x( NWK_S_ENC_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* ) &CryptoCtx.NvmCtx->DevNonce );
 800af10:	6873      	ldr	r3, [r6, #4]
 800af12:	0022      	movs	r2, r4
 800af14:	3304      	adds	r3, #4
 800af16:	0039      	movs	r1, r7
 800af18:	2007      	movs	r0, #7
 800af1a:	f7ff fcf9 	bl	800a910 <DeriveSessionKey10x>
 800af1e:	1e05      	subs	r5, r0, #0
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800af20:	d1bc      	bne.n	800ae9c <LoRaMacCryptoHandleJoinAccept+0x48>
        retval = DeriveSessionKey10x( F_NWK_S_INT_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* ) &CryptoCtx.NvmCtx->DevNonce );
 800af22:	6873      	ldr	r3, [r6, #4]
 800af24:	0022      	movs	r2, r4
 800af26:	3304      	adds	r3, #4
 800af28:	0039      	movs	r1, r7
 800af2a:	2005      	movs	r0, #5
 800af2c:	f7ff fcf0 	bl	800a910 <DeriveSessionKey10x>
 800af30:	1e05      	subs	r5, r0, #0
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800af32:	d1b3      	bne.n	800ae9c <LoRaMacCryptoHandleJoinAccept+0x48>
        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* ) &CryptoCtx.NvmCtx->DevNonce );
 800af34:	6873      	ldr	r3, [r6, #4]
 800af36:	0022      	movs	r2, r4
 800af38:	3304      	adds	r3, #4
 800af3a:	0039      	movs	r1, r7
 800af3c:	2006      	movs	r0, #6
 800af3e:	f7ff fce7 	bl	800a910 <DeriveSessionKey10x>
 800af42:	1e05      	subs	r5, r0, #0
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800af44:	d1aa      	bne.n	800ae9c <LoRaMacCryptoHandleJoinAccept+0x48>
    CryptoCtx.NvmCtx->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 800af46:	2201      	movs	r2, #1
    CryptoCtx.NvmCtx->FCntList.FCntUp = 0;
 800af48:	6873      	ldr	r3, [r6, #4]
    CryptoCtx.NvmCtx->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 800af4a:	4252      	negs	r2, r2
    CryptoCtx.NvmCtx->FCntList.FCntUp = 0;
 800af4c:	60d8      	str	r0, [r3, #12]
    CryptoCtx.NvmCtx->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 800af4e:	619a      	str	r2, [r3, #24]
    CryptoCtx.NvmCtx->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 800af50:	611a      	str	r2, [r3, #16]
    CryptoCtx.NvmCtx->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 800af52:	615a      	str	r2, [r3, #20]
    CryptoCtx.EventCryptoNvmCtxChanged( );
 800af54:	68b3      	ldr	r3, [r6, #8]
    CryptoCtx.RJcount0 = 0;
 800af56:	8030      	strh	r0, [r6, #0]
    CryptoCtx.EventCryptoNvmCtxChanged( );
 800af58:	4798      	blx	r3
    return LORAMAC_CRYPTO_SUCCESS;
 800af5a:	e79f      	b.n	800ae9c <LoRaMacCryptoHandleJoinAccept+0x48>
        CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor = 0;
 800af5c:	7098      	strb	r0, [r3, #2]
        micComputationKeyID = NWK_KEY;
 800af5e:	2502      	movs	r5, #2
 800af60:	e7b5      	b.n	800aece <LoRaMacCryptoHandleJoinAccept+0x7a>
        procBuffer[bufItr++] = ( uint8_t ) joinReqType;
 800af62:	9b01      	ldr	r3, [sp, #4]
        memcpyr( &procBuffer[bufItr], joinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 800af64:	2208      	movs	r2, #8
        procBuffer[bufItr++] = ( uint8_t ) joinReqType;
 800af66:	703b      	strb	r3, [r7, #0]
        memcpyr( &procBuffer[bufItr], joinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 800af68:	ab04      	add	r3, sp, #16
 800af6a:	1d58      	adds	r0, r3, #5
 800af6c:	9902      	ldr	r1, [sp, #8]
 800af6e:	f002 f843 	bl	800cff8 <memcpyr>
        procBuffer[bufItr++] = CryptoCtx.NvmCtx->DevNonce & 0xFF;
 800af72:	6873      	ldr	r3, [r6, #4]
        if( SecureElementVerifyAesCmac( procBuffer,  ( macMsg->BufSize + micComputationOffset - LORAMAC_MHDR_FIELD_SIZE - LORAMAC_MIC_FIELD_SIZE ), macMsg->MIC, micComputationKeyID ) != SECURE_ELEMENT_SUCCESS )
 800af74:	0038      	movs	r0, r7
        procBuffer[bufItr++] = CryptoCtx.NvmCtx->DevNonce & 0xFF;
 800af76:	889a      	ldrh	r2, [r3, #4]
 800af78:	727a      	strb	r2, [r7, #9]
        procBuffer[bufItr++] = ( CryptoCtx.NvmCtx->DevNonce >> 8 ) & 0xFF;
 800af7a:	889b      	ldrh	r3, [r3, #4]
        if( SecureElementVerifyAesCmac( procBuffer,  ( macMsg->BufSize + micComputationOffset - LORAMAC_MHDR_FIELD_SIZE - LORAMAC_MIC_FIELD_SIZE ), macMsg->MIC, micComputationKeyID ) != SECURE_ELEMENT_SUCCESS )
 800af7c:	6a62      	ldr	r2, [r4, #36]	; 0x24
        procBuffer[bufItr++] = ( CryptoCtx.NvmCtx->DevNonce >> 8 ) & 0xFF;
 800af7e:	0a1b      	lsrs	r3, r3, #8
 800af80:	72bb      	strb	r3, [r7, #10]
        procBuffer[bufItr++] = macMsg->MHDR.Value;
 800af82:	7963      	ldrb	r3, [r4, #5]
 800af84:	72fb      	strb	r3, [r7, #11]
        if( SecureElementVerifyAesCmac( procBuffer,  ( macMsg->BufSize + micComputationOffset - LORAMAC_MHDR_FIELD_SIZE - LORAMAC_MIC_FIELD_SIZE ), macMsg->MIC, micComputationKeyID ) != SECURE_ELEMENT_SUCCESS )
 800af86:	7921      	ldrb	r1, [r4, #4]
 800af88:	9b03      	ldr	r3, [sp, #12]
 800af8a:	3905      	subs	r1, #5
 800af8c:	1859      	adds	r1, r3, r1
 800af8e:	b289      	uxth	r1, r1
 800af90:	002b      	movs	r3, r5
 800af92:	f7fc f9c9 	bl	8007328 <SecureElementVerifyAesCmac>
 800af96:	2800      	cmp	r0, #0
 800af98:	d000      	beq.n	800af9c <LoRaMacCryptoHandleJoinAccept+0x148>
 800af9a:	e77e      	b.n	800ae9a <LoRaMacCryptoHandleJoinAccept+0x46>
        currentJoinNonce |= ( ( uint32_t ) macMsg->JoinNonce[1] << 8 );
 800af9c:	79e3      	ldrb	r3, [r4, #7]
        currentJoinNonce |= ( ( uint32_t ) macMsg->JoinNonce[2] << 16 );
 800af9e:	7a22      	ldrb	r2, [r4, #8]
        currentJoinNonce |= ( ( uint32_t ) macMsg->JoinNonce[1] << 8 );
 800afa0:	021b      	lsls	r3, r3, #8
        currentJoinNonce |= ( ( uint32_t ) macMsg->JoinNonce[2] << 16 );
 800afa2:	0412      	lsls	r2, r2, #16
        currentJoinNonce = ( uint32_t ) macMsg->JoinNonce[0];
 800afa4:	79a1      	ldrb	r1, [r4, #6]
        currentJoinNonce |= ( ( uint32_t ) macMsg->JoinNonce[2] << 16 );
 800afa6:	4313      	orrs	r3, r2
        if( currentJoinNonce > CryptoCtx.NvmCtx->JoinNonce )
 800afa8:	6872      	ldr	r2, [r6, #4]
        currentJoinNonce |= ( ( uint32_t ) macMsg->JoinNonce[2] << 16 );
 800afaa:	430b      	orrs	r3, r1
        if( currentJoinNonce > CryptoCtx.NvmCtx->JoinNonce )
 800afac:	6891      	ldr	r1, [r2, #8]
            return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 800afae:	2503      	movs	r5, #3
        if( currentJoinNonce > CryptoCtx.NvmCtx->JoinNonce )
 800afb0:	4299      	cmp	r1, r3
 800afb2:	d300      	bcc.n	800afb6 <LoRaMacCryptoHandleJoinAccept+0x162>
 800afb4:	e772      	b.n	800ae9c <LoRaMacCryptoHandleJoinAccept+0x48>
            CryptoCtx.NvmCtx->JoinNonce = currentJoinNonce;
 800afb6:	6093      	str	r3, [r2, #8]
            CryptoCtx.EventCryptoNvmCtxChanged( );
 800afb8:	68b3      	ldr	r3, [r6, #8]
 800afba:	4798      	blx	r3
 800afbc:	e794      	b.n	800aee8 <LoRaMacCryptoHandleJoinAccept+0x94>
 800afbe:	46c0      	nop			; (mov r8, r8)
 800afc0:	20000f34 	.word	0x20000f34

0800afc4 <LoRaMacParserJoinAccept>:
*/
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 800afc4:	b510      	push	{r4, lr}
 800afc6:	0004      	movs	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
    {
        return LORAMAC_PARSER_ERROR_NPE;
 800afc8:	2002      	movs	r0, #2
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800afca:	2c00      	cmp	r4, #0
 800afcc:	d040      	beq.n	800b050 <LoRaMacParserJoinAccept+0x8c>
 800afce:	6821      	ldr	r1, [r4, #0]
 800afd0:	2900      	cmp	r1, #0
 800afd2:	d03d      	beq.n	800b050 <LoRaMacParserJoinAccept+0x8c>
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800afd4:	780b      	ldrb	r3, [r1, #0]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 800afd6:	1da0      	adds	r0, r4, #6
    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800afd8:	7163      	strb	r3, [r4, #5]
    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 800afda:	3101      	adds	r1, #1
 800afdc:	2203      	movs	r2, #3
 800afde:	f002 f802 	bl	800cfe6 <memcpy1>
    bufItr = bufItr + 3;

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 800afe2:	0020      	movs	r0, r4
 800afe4:	6823      	ldr	r3, [r4, #0]
 800afe6:	2203      	movs	r2, #3
 800afe8:	1d19      	adds	r1, r3, #4
 800afea:	3009      	adds	r0, #9
 800afec:	f001 fffb 	bl	800cfe6 <memcpy1>
    bufItr = bufItr + 3;

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 800aff0:	6821      	ldr	r1, [r4, #0]
 800aff2:	79ca      	ldrb	r2, [r1, #7]
 800aff4:	60e2      	str	r2, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800aff6:	7a0b      	ldrb	r3, [r1, #8]
 800aff8:	021b      	lsls	r3, r3, #8
 800affa:	431a      	orrs	r2, r3
 800affc:	60e2      	str	r2, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800affe:	7a4b      	ldrb	r3, [r1, #9]
 800b000:	041b      	lsls	r3, r3, #16
 800b002:	4313      	orrs	r3, r2
 800b004:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800b006:	7a8a      	ldrb	r2, [r1, #10]
 800b008:	0612      	lsls	r2, r2, #24
 800b00a:	4313      	orrs	r3, r2
 800b00c:	60e3      	str	r3, [r4, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 800b00e:	7acb      	ldrb	r3, [r1, #11]
 800b010:	7423      	strb	r3, [r4, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 800b012:	7b0b      	ldrb	r3, [r1, #12]
 800b014:	7463      	strb	r3, [r4, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_C_FLIST_FIELD_SIZE )
 800b016:	7923      	ldrb	r3, [r4, #4]
 800b018:	2b21      	cmp	r3, #33	; 0x21
 800b01a:	d11a      	bne.n	800b052 <LoRaMacParserJoinAccept+0x8e>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_C_FLIST_FIELD_SIZE );
 800b01c:	0020      	movs	r0, r4
 800b01e:	310d      	adds	r1, #13
 800b020:	2210      	movs	r2, #16
 800b022:	3012      	adds	r0, #18
 800b024:	f001 ffdf 	bl	800cfe6 <memcpy1>
        bufItr = bufItr + LORAMAC_C_FLIST_FIELD_SIZE;
 800b028:	231d      	movs	r3, #29
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
    {
        return LORAMAC_PARSER_FAIL;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 800b02a:	6820      	ldr	r0, [r4, #0]
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800b02c:	1c5a      	adds	r2, r3, #1
    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 800b02e:	5cc1      	ldrb	r1, [r0, r3]
 800b030:	6261      	str	r1, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800b032:	5c82      	ldrb	r2, [r0, r2]
 800b034:	0212      	lsls	r2, r2, #8
 800b036:	4311      	orrs	r1, r2
 800b038:	6261      	str	r1, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800b03a:	1c9a      	adds	r2, r3, #2
 800b03c:	5c82      	ldrb	r2, [r0, r2]
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800b03e:	3303      	adds	r3, #3
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800b040:	0412      	lsls	r2, r2, #16
 800b042:	430a      	orrs	r2, r1
 800b044:	6262      	str	r2, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800b046:	5cc3      	ldrb	r3, [r0, r3]

    return LORAMAC_PARSER_SUCCESS;
 800b048:	2000      	movs	r0, #0
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800b04a:	061b      	lsls	r3, r3, #24
 800b04c:	431a      	orrs	r2, r3
 800b04e:	6262      	str	r2, [r4, #36]	; 0x24
}
 800b050:	bd10      	pop	{r4, pc}
        return LORAMAC_PARSER_FAIL;
 800b052:	2001      	movs	r0, #1
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 800b054:	2b11      	cmp	r3, #17
 800b056:	dcfb      	bgt.n	800b050 <LoRaMacParserJoinAccept+0x8c>
    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 800b058:	230d      	movs	r3, #13
 800b05a:	e7e6      	b.n	800b02a <LoRaMacParserJoinAccept+0x66>

0800b05c <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 800b05c:	b570      	push	{r4, r5, r6, lr}
 800b05e:	0004      	movs	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
    {
        return LORAMAC_PARSER_ERROR_NPE;
 800b060:	2002      	movs	r0, #2
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800b062:	2c00      	cmp	r4, #0
 800b064:	d054      	beq.n	800b110 <LoRaMacParserData+0xb4>
 800b066:	6821      	ldr	r1, [r4, #0]
 800b068:	2900      	cmp	r1, #0
 800b06a:	d051      	beq.n	800b110 <LoRaMacParserData+0xb4>
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800b06c:	780b      	ldrb	r3, [r1, #0]
    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800b06e:	0020      	movs	r0, r4
    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800b070:	7163      	strb	r3, [r4, #5]
    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 800b072:	784a      	ldrb	r2, [r1, #1]
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800b074:	3010      	adds	r0, #16
    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 800b076:	60a2      	str	r2, [r4, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800b078:	788b      	ldrb	r3, [r1, #2]
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 800b07a:	1c65      	adds	r5, r4, #1
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800b07c:	021b      	lsls	r3, r3, #8
 800b07e:	431a      	orrs	r2, r3
 800b080:	60a2      	str	r2, [r4, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800b082:	78cb      	ldrb	r3, [r1, #3]
 800b084:	041b      	lsls	r3, r3, #16
 800b086:	4313      	orrs	r3, r2
 800b088:	60a3      	str	r3, [r4, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800b08a:	790a      	ldrb	r2, [r1, #4]
 800b08c:	0612      	lsls	r2, r2, #24
 800b08e:	4313      	orrs	r3, r2
 800b090:	60a3      	str	r3, [r4, #8]
    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 800b092:	794b      	ldrb	r3, [r1, #5]
 800b094:	7323      	strb	r3, [r4, #12]
    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 800b096:	798b      	ldrb	r3, [r1, #6]
 800b098:	81e3      	strh	r3, [r4, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 800b09a:	79ca      	ldrb	r2, [r1, #7]
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800b09c:	3108      	adds	r1, #8
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 800b09e:	0212      	lsls	r2, r2, #8
 800b0a0:	4313      	orrs	r3, r2
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800b0a2:	7b22      	ldrb	r2, [r4, #12]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 800b0a4:	81e3      	strh	r3, [r4, #14]
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800b0a6:	0712      	lsls	r2, r2, #28
 800b0a8:	0f12      	lsrs	r2, r2, #28
 800b0aa:	f001 ff9c 	bl	800cfe6 <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800b0ae:	7b21      	ldrb	r1, [r4, #12]
    macMsg->FRMPayloadSize = 0;
 800b0b0:	0020      	movs	r0, r4
    macMsg->FPort = 0;
 800b0b2:	2300      	movs	r3, #0
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800b0b4:	0709      	lsls	r1, r1, #28
 800b0b6:	0f09      	lsrs	r1, r1, #28
 800b0b8:	000e      	movs	r6, r1
    macMsg->FRMPayloadSize = 0;
 800b0ba:	3028      	adds	r0, #40	; 0x28
    macMsg->FPort = 0;
 800b0bc:	77eb      	strb	r3, [r5, #31]
    macMsg->FRMPayloadSize = 0;
 800b0be:	7003      	strb	r3, [r0, #0]

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 800b0c0:	7922      	ldrb	r2, [r4, #4]
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800b0c2:	3608      	adds	r6, #8
    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 800b0c4:	1b93      	subs	r3, r2, r6
 800b0c6:	2b04      	cmp	r3, #4
 800b0c8:	dd0c      	ble.n	800b0e4 <LoRaMacParserData+0x88>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 800b0ca:	6823      	ldr	r3, [r4, #0]
 800b0cc:	3109      	adds	r1, #9

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 800b0ce:	3a04      	subs	r2, #4
        macMsg->FPort = macMsg->Buffer[bufItr++];
 800b0d0:	5d9e      	ldrb	r6, [r3, r6]
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 800b0d2:	1a52      	subs	r2, r2, r1
 800b0d4:	b2d2      	uxtb	r2, r2
        macMsg->FPort = macMsg->Buffer[bufItr++];
 800b0d6:	77ee      	strb	r6, [r5, #31]
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 800b0d8:	7002      	strb	r2, [r0, #0]
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 800b0da:	1859      	adds	r1, r3, r1
 800b0dc:	b292      	uxth	r2, r2
 800b0de:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b0e0:	f001 ff81 	bl	800cfe6 <memcpy1>
    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );

    return LORAMAC_PARSER_SUCCESS;
 800b0e4:	2000      	movs	r0, #0
    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 800b0e6:	6822      	ldr	r2, [r4, #0]
 800b0e8:	7923      	ldrb	r3, [r4, #4]
 800b0ea:	18d3      	adds	r3, r2, r3
 800b0ec:	1f1a      	subs	r2, r3, #4
 800b0ee:	7811      	ldrb	r1, [r2, #0]
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 800b0f0:	1eda      	subs	r2, r3, #3
    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 800b0f2:	62e1      	str	r1, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 800b0f4:	7812      	ldrb	r2, [r2, #0]
 800b0f6:	0212      	lsls	r2, r2, #8
 800b0f8:	4311      	orrs	r1, r2
 800b0fa:	62e1      	str	r1, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 800b0fc:	1e9a      	subs	r2, r3, #2
 800b0fe:	7812      	ldrb	r2, [r2, #0]
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 800b100:	3b01      	subs	r3, #1
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 800b102:	0412      	lsls	r2, r2, #16
 800b104:	430a      	orrs	r2, r1
 800b106:	62e2      	str	r2, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 800b108:	781b      	ldrb	r3, [r3, #0]
 800b10a:	061b      	lsls	r3, r3, #24
 800b10c:	431a      	orrs	r2, r3
 800b10e:	62e2      	str	r2, [r4, #44]	; 0x2c
}
 800b110:	bd70      	pop	{r4, r5, r6, pc}

0800b112 <LoRaMacSerializerJoinRequest>:
*/
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 800b112:	b510      	push	{r4, lr}
 800b114:	0004      	movs	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800b116:	2001      	movs	r0, #1
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800b118:	2c00      	cmp	r4, #0
 800b11a:	d02e      	beq.n	800b17a <LoRaMacSerializerJoinRequest+0x68>
 800b11c:	6823      	ldr	r3, [r4, #0]
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d02b      	beq.n	800b17a <LoRaMacSerializerJoinRequest+0x68>
    }

    uint16_t bufItr = 0;

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 800b122:	7922      	ldrb	r2, [r4, #4]
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 800b124:	1800      	adds	r0, r0, r0
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 800b126:	2a16      	cmp	r2, #22
 800b128:	d927      	bls.n	800b17a <LoRaMacSerializerJoinRequest+0x68>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800b12a:	7962      	ldrb	r2, [r4, #5]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 800b12c:	1da1      	adds	r1, r4, #6
    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800b12e:	701a      	strb	r2, [r3, #0]
    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 800b130:	6823      	ldr	r3, [r4, #0]
 800b132:	2208      	movs	r2, #8
 800b134:	1c58      	adds	r0, r3, #1
 800b136:	f001 ff5f 	bl	800cff8 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 800b13a:	0021      	movs	r1, r4
 800b13c:	6820      	ldr	r0, [r4, #0]
 800b13e:	2208      	movs	r2, #8
 800b140:	3009      	adds	r0, #9
 800b142:	310e      	adds	r1, #14
 800b144:	f001 ff58 	bl	800cff8 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 800b148:	8ae3      	ldrh	r3, [r4, #22]
 800b14a:	6822      	ldr	r2, [r4, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;

    macMsg->BufSize = bufItr;

    return LORAMAC_SERIALIZER_SUCCESS;
 800b14c:	2000      	movs	r0, #0
    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 800b14e:	7453      	strb	r3, [r2, #17]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 800b150:	8ae3      	ldrh	r3, [r4, #22]
 800b152:	6822      	ldr	r2, [r4, #0]
 800b154:	0a1b      	lsrs	r3, r3, #8
 800b156:	7493      	strb	r3, [r2, #18]
    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800b158:	69a3      	ldr	r3, [r4, #24]
 800b15a:	6822      	ldr	r2, [r4, #0]
 800b15c:	74d3      	strb	r3, [r2, #19]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800b15e:	69a3      	ldr	r3, [r4, #24]
 800b160:	6822      	ldr	r2, [r4, #0]
 800b162:	0a1b      	lsrs	r3, r3, #8
 800b164:	7513      	strb	r3, [r2, #20]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800b166:	69a3      	ldr	r3, [r4, #24]
 800b168:	6822      	ldr	r2, [r4, #0]
 800b16a:	0c1b      	lsrs	r3, r3, #16
 800b16c:	7553      	strb	r3, [r2, #21]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800b16e:	69a3      	ldr	r3, [r4, #24]
 800b170:	6822      	ldr	r2, [r4, #0]
 800b172:	0e1b      	lsrs	r3, r3, #24
 800b174:	7593      	strb	r3, [r2, #22]
    macMsg->BufSize = bufItr;
 800b176:	2317      	movs	r3, #23
 800b178:	7123      	strb	r3, [r4, #4]
}
 800b17a:	bd10      	pop	{r4, pc}

0800b17c <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 800b17c:	b570      	push	{r4, r5, r6, lr}
 800b17e:	0004      	movs	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800b180:	2001      	movs	r0, #1
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800b182:	2c00      	cmp	r4, #0
 800b184:	d068      	beq.n	800b258 <LoRaMacSerializerData+0xdc>
 800b186:	6821      	ldr	r1, [r4, #0]
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800b188:	2001      	movs	r0, #1
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800b18a:	2900      	cmp	r1, #0
 800b18c:	d064      	beq.n	800b258 <LoRaMacSerializerData+0xdc>
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;

    if( macMsg->FRMPayloadSize > 0 )
 800b18e:	0025      	movs	r5, r4
 800b190:	3528      	adds	r5, #40	; 0x28
 800b192:	7828      	ldrb	r0, [r5, #0]
    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800b194:	7b22      	ldrb	r2, [r4, #12]
 800b196:	0003      	movs	r3, r0
 800b198:	1e5e      	subs	r6, r3, #1
 800b19a:	41b3      	sbcs	r3, r6
 800b19c:	0712      	lsls	r2, r2, #28
 800b19e:	0f12      	lsrs	r2, r2, #28
 800b1a0:	189b      	adds	r3, r3, r2
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
    }

    computedBufSize += macMsg->FRMPayloadSize;
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 800b1a2:	3004      	adds	r0, #4
    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800b1a4:	3308      	adds	r3, #8
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 800b1a6:	181b      	adds	r3, r3, r0

    if( macMsg->BufSize < computedBufSize )
 800b1a8:	7922      	ldrb	r2, [r4, #4]
 800b1aa:	b29b      	uxth	r3, r3
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 800b1ac:	2002      	movs	r0, #2
    if( macMsg->BufSize < computedBufSize )
 800b1ae:	429a      	cmp	r2, r3
 800b1b0:	d352      	bcc.n	800b258 <LoRaMacSerializerData+0xdc>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800b1b2:	7963      	ldrb	r3, [r4, #5]
 800b1b4:	700b      	strb	r3, [r1, #0]
    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800b1b6:	0021      	movs	r1, r4
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 800b1b8:	68a3      	ldr	r3, [r4, #8]
 800b1ba:	6822      	ldr	r2, [r4, #0]
    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800b1bc:	3110      	adds	r1, #16
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 800b1be:	7053      	strb	r3, [r2, #1]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 800b1c0:	68a3      	ldr	r3, [r4, #8]
 800b1c2:	6822      	ldr	r2, [r4, #0]
 800b1c4:	0a1b      	lsrs	r3, r3, #8
 800b1c6:	7093      	strb	r3, [r2, #2]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 800b1c8:	68a3      	ldr	r3, [r4, #8]
 800b1ca:	6822      	ldr	r2, [r4, #0]
 800b1cc:	0c1b      	lsrs	r3, r3, #16
 800b1ce:	70d3      	strb	r3, [r2, #3]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 800b1d0:	68a3      	ldr	r3, [r4, #8]
 800b1d2:	6822      	ldr	r2, [r4, #0]
 800b1d4:	0e1b      	lsrs	r3, r3, #24
 800b1d6:	7113      	strb	r3, [r2, #4]
    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 800b1d8:	7b23      	ldrb	r3, [r4, #12]
 800b1da:	6822      	ldr	r2, [r4, #0]
 800b1dc:	7153      	strb	r3, [r2, #5]
    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 800b1de:	89e3      	ldrh	r3, [r4, #14]
 800b1e0:	6822      	ldr	r2, [r4, #0]
 800b1e2:	7193      	strb	r3, [r2, #6]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 800b1e4:	89e3      	ldrh	r3, [r4, #14]
 800b1e6:	6822      	ldr	r2, [r4, #0]
 800b1e8:	0a1b      	lsrs	r3, r3, #8
 800b1ea:	71d3      	strb	r3, [r2, #7]
    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800b1ec:	7b22      	ldrb	r2, [r4, #12]
 800b1ee:	6820      	ldr	r0, [r4, #0]
 800b1f0:	0712      	lsls	r2, r2, #28
 800b1f2:	0f12      	lsrs	r2, r2, #28
 800b1f4:	3008      	adds	r0, #8
 800b1f6:	f001 fef6 	bl	800cfe6 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800b1fa:	7b23      	ldrb	r3, [r4, #12]

    if( macMsg->FRMPayloadSize > 0 )
 800b1fc:	782a      	ldrb	r2, [r5, #0]
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800b1fe:	071b      	lsls	r3, r3, #28
 800b200:	0f1b      	lsrs	r3, r3, #28
 800b202:	001e      	movs	r6, r3
 800b204:	3608      	adds	r6, #8
    if( macMsg->FRMPayloadSize > 0 )
 800b206:	2a00      	cmp	r2, #0
 800b208:	d005      	beq.n	800b216 <LoRaMacSerializerData+0x9a>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 800b20a:	1c62      	adds	r2, r4, #1
 800b20c:	7fd2      	ldrb	r2, [r2, #31]
 800b20e:	6821      	ldr	r1, [r4, #0]
 800b210:	3309      	adds	r3, #9
 800b212:	558a      	strb	r2, [r1, r6]
 800b214:	001e      	movs	r6, r3
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 800b216:	6823      	ldr	r3, [r4, #0]
 800b218:	782a      	ldrb	r2, [r5, #0]
 800b21a:	1998      	adds	r0, r3, r6
 800b21c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b21e:	f001 fee2 	bl	800cfe6 <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 800b222:	782b      	ldrb	r3, [r5, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800b224:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800b226:	6821      	ldr	r1, [r4, #0]
    bufItr = bufItr + macMsg->FRMPayloadSize;
 800b228:	18f3      	adds	r3, r6, r3
 800b22a:	b29b      	uxth	r3, r3
    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800b22c:	54ca      	strb	r2, [r1, r3]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800b22e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800b230:	6820      	ldr	r0, [r4, #0]
    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800b232:	1c5a      	adds	r2, r3, #1
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800b234:	b292      	uxth	r2, r2
 800b236:	0a09      	lsrs	r1, r1, #8
 800b238:	5481      	strb	r1, [r0, r2]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800b23a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800b23c:	6820      	ldr	r0, [r4, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800b23e:	1c9a      	adds	r2, r3, #2
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800b240:	b292      	uxth	r2, r2
 800b242:	0c09      	lsrs	r1, r1, #16
 800b244:	5481      	strb	r1, [r0, r2]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800b246:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800b248:	1cda      	adds	r2, r3, #3
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800b24a:	6820      	ldr	r0, [r4, #0]
 800b24c:	b292      	uxth	r2, r2
 800b24e:	0e09      	lsrs	r1, r1, #24
 800b250:	5481      	strb	r1, [r0, r2]

    macMsg->BufSize = bufItr;

    return LORAMAC_SERIALIZER_SUCCESS;
 800b252:	2000      	movs	r0, #0
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800b254:	3304      	adds	r3, #4
    macMsg->BufSize = bufItr;
 800b256:	7123      	strb	r3, [r4, #4]
}
 800b258:	bd70      	pop	{r4, r5, r6, pc}

0800b25a <RegionIsActive>:
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 800b25a:	4243      	negs	r3, r0
 800b25c:	4158      	adcs	r0, r3
        }
    }
}
 800b25e:	4770      	bx	lr

0800b260 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 800b260:	b507      	push	{r0, r1, r2, lr}
    PhyParam_t phyParam = { 0 };
    switch( region )
 800b262:	2800      	cmp	r0, #0
 800b264:	d105      	bne.n	800b272 <RegionGetPhyParam+0x12>
    {
        AS923_GET_PHY_PARAM( );
 800b266:	0008      	movs	r0, r1
 800b268:	f000 f8d6 	bl	800b418 <RegionAS923GetPhyParam>
 800b26c:	9001      	str	r0, [sp, #4]
        default:
        {
            return phyParam;
        }
    }
}
 800b26e:	9801      	ldr	r0, [sp, #4]
 800b270:	bd0e      	pop	{r1, r2, r3, pc}
            return phyParam;
 800b272:	2300      	movs	r3, #0
 800b274:	9301      	str	r3, [sp, #4]
 800b276:	e7fa      	b.n	800b26e <RegionGetPhyParam+0xe>

0800b278 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 800b278:	b510      	push	{r4, lr}
    switch( region )
 800b27a:	2800      	cmp	r0, #0
 800b27c:	d102      	bne.n	800b284 <RegionSetBandTxDone+0xc>
    {
        AS923_SET_BAND_TX_DONE( );
 800b27e:	0008      	movs	r0, r1
 800b280:	f000 f96c 	bl	800b55c <RegionAS923SetBandTxDone>
        default:
        {
            return;
        }
    }
}
 800b284:	bd10      	pop	{r4, pc}

0800b286 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 800b286:	b510      	push	{r4, lr}
    switch( region )
 800b288:	2800      	cmp	r0, #0
 800b28a:	d102      	bne.n	800b292 <RegionInitDefaults+0xc>
    {
        AS923_INIT_DEFAULTS( );
 800b28c:	0008      	movs	r0, r1
 800b28e:	f000 f977 	bl	800b580 <RegionAS923InitDefaults>
        default:
        {
            break;
        }
    }
}
 800b292:	bd10      	pop	{r4, pc}

0800b294 <RegionGetNvmCtx>:

void* RegionGetNvmCtx( LoRaMacRegion_t region, GetNvmCtxParams_t* params )
{
 800b294:	b510      	push	{r4, lr}
    switch( region )
 800b296:	2800      	cmp	r0, #0
 800b298:	d103      	bne.n	800b2a2 <RegionGetNvmCtx+0xe>
    {
        AS923_GET_NVM_CTX( );
 800b29a:	0008      	movs	r0, r1
 800b29c:	f000 f9bc 	bl	800b618 <RegionAS923GetNvmCtx>
        default:
        {
           return 0;
        }
    }
}
 800b2a0:	bd10      	pop	{r4, pc}
           return 0;
 800b2a2:	2000      	movs	r0, #0
 800b2a4:	e7fc      	b.n	800b2a0 <RegionGetNvmCtx+0xc>

0800b2a6 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800b2a6:	b510      	push	{r4, lr}
 800b2a8:	000b      	movs	r3, r1
    switch( region )
 800b2aa:	2800      	cmp	r0, #0
 800b2ac:	d104      	bne.n	800b2b8 <RegionVerify+0x12>
    {
        AS923_VERIFY( );
 800b2ae:	0011      	movs	r1, r2
 800b2b0:	0018      	movs	r0, r3
 800b2b2:	f000 f9b7 	bl	800b624 <RegionAS923Verify>
        default:
        {
            return false;
        }
    }
}
 800b2b6:	bd10      	pop	{r4, pc}
            return false;
 800b2b8:	2000      	movs	r0, #0
 800b2ba:	e7fc      	b.n	800b2b6 <RegionVerify+0x10>

0800b2bc <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 800b2bc:	b510      	push	{r4, lr}
    switch( region )
 800b2be:	2800      	cmp	r0, #0
 800b2c0:	d102      	bne.n	800b2c8 <RegionApplyCFList+0xc>
    {
        AS923_APPLY_CF_LIST( );
 800b2c2:	0008      	movs	r0, r1
 800b2c4:	f000 fd48 	bl	800bd58 <RegionAS923ApplyCFList>
        default:
        {
            break;
        }
    }
}
 800b2c8:	bd10      	pop	{r4, pc}

0800b2ca <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 800b2ca:	b510      	push	{r4, lr}
    switch( region )
 800b2cc:	2800      	cmp	r0, #0
 800b2ce:	d103      	bne.n	800b2d8 <RegionChanMaskSet+0xe>
    {
        AS923_CHAN_MASK_SET( );
 800b2d0:	0008      	movs	r0, r1
 800b2d2:	f000 f9d5 	bl	800b680 <RegionAS923ChanMaskSet>
        default:
        {
            return false;
        }
    }
}
 800b2d6:	bd10      	pop	{r4, pc}
            return false;
 800b2d8:	2000      	movs	r0, #0
 800b2da:	e7fc      	b.n	800b2d6 <RegionChanMaskSet+0xc>

0800b2dc <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800b2dc:	b510      	push	{r4, lr}
 800b2de:	0004      	movs	r4, r0
 800b2e0:	0008      	movs	r0, r1
 800b2e2:	0011      	movs	r1, r2
 800b2e4:	001a      	movs	r2, r3
    switch( region )
 800b2e6:	2c00      	cmp	r4, #0
 800b2e8:	d102      	bne.n	800b2f0 <RegionComputeRxWindowParameters+0x14>
    {
        AS923_COMPUTE_RX_WINDOW_PARAMETERS( );
 800b2ea:	9b02      	ldr	r3, [sp, #8]
 800b2ec:	f000 f9e0 	bl	800b6b0 <RegionAS923ComputeRxWindowParameters>
        default:
        {
            break;
        }
    }
}
 800b2f0:	bd10      	pop	{r4, pc}

0800b2f2 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800b2f2:	b510      	push	{r4, lr}
 800b2f4:	000b      	movs	r3, r1
    switch( region )
 800b2f6:	2800      	cmp	r0, #0
 800b2f8:	d104      	bne.n	800b304 <RegionRxConfig+0x12>
    {
        AS923_RX_CONFIG( );
 800b2fa:	0011      	movs	r1, r2
 800b2fc:	0018      	movs	r0, r3
 800b2fe:	f000 fa19 	bl	800b734 <RegionAS923RxConfig>
        default:
        {
            return false;
        }
    }
}
 800b302:	bd10      	pop	{r4, pc}
            return false;
 800b304:	2000      	movs	r0, #0
 800b306:	e7fc      	b.n	800b302 <RegionRxConfig+0x10>

0800b308 <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800b308:	b510      	push	{r4, lr}
 800b30a:	0004      	movs	r4, r0
 800b30c:	0008      	movs	r0, r1
 800b30e:	0011      	movs	r1, r2
    switch( region )
 800b310:	2c00      	cmp	r4, #0
 800b312:	d103      	bne.n	800b31c <RegionTxConfig+0x14>
    {
        AS923_TX_CONFIG( );
 800b314:	001a      	movs	r2, r3
 800b316:	f000 fa81 	bl	800b81c <RegionAS923TxConfig>
        default:
        {
            return false;
        }
    }
}
 800b31a:	bd10      	pop	{r4, pc}
            return false;
 800b31c:	2000      	movs	r0, #0
 800b31e:	e7fc      	b.n	800b31a <RegionTxConfig+0x12>

0800b320 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800b320:	b513      	push	{r0, r1, r4, lr}
 800b322:	0004      	movs	r4, r0
 800b324:	0008      	movs	r0, r1
 800b326:	0011      	movs	r1, r2
 800b328:	001a      	movs	r2, r3
    switch( region )
 800b32a:	2c00      	cmp	r4, #0
 800b32c:	d105      	bne.n	800b33a <RegionLinkAdrReq+0x1a>
    {
        AS923_LINK_ADR_REQ( );
 800b32e:	9b05      	ldr	r3, [sp, #20]
 800b330:	9300      	str	r3, [sp, #0]
 800b332:	9b04      	ldr	r3, [sp, #16]
 800b334:	f000 fafa 	bl	800b92c <RegionAS923LinkAdrReq>
        default:
        {
            return 0;
        }
    }
}
 800b338:	bd16      	pop	{r1, r2, r4, pc}
            return 0;
 800b33a:	2000      	movs	r0, #0
 800b33c:	e7fc      	b.n	800b338 <RegionLinkAdrReq+0x18>

0800b33e <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 800b33e:	b510      	push	{r4, lr}
    switch( region )
 800b340:	2800      	cmp	r0, #0
 800b342:	d103      	bne.n	800b34c <RegionRxParamSetupReq+0xe>
    {
        AS923_RX_PARAM_SETUP_REQ( );
 800b344:	0008      	movs	r0, r1
 800b346:	f000 fb95 	bl	800ba74 <RegionAS923RxParamSetupReq>
        default:
        {
            return 0;
        }
    }
}
 800b34a:	bd10      	pop	{r4, pc}
            return 0;
 800b34c:	2000      	movs	r0, #0
 800b34e:	e7fc      	b.n	800b34a <RegionRxParamSetupReq+0xc>

0800b350 <RegionNewChannelReq>:

uint8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 800b350:	b510      	push	{r4, lr}
    switch( region )
 800b352:	2800      	cmp	r0, #0
 800b354:	d103      	bne.n	800b35e <RegionNewChannelReq+0xe>
    {
        AS923_NEW_CHANNEL_REQ( );
 800b356:	0008      	movs	r0, r1
 800b358:	f000 fd37 	bl	800bdca <RegionAS923NewChannelReq>
        default:
        {
            return 0;
        }
    }
}
 800b35c:	bd10      	pop	{r4, pc}
            return 0;
 800b35e:	2000      	movs	r0, #0
 800b360:	e7fc      	b.n	800b35c <RegionNewChannelReq+0xc>

0800b362 <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 800b362:	b510      	push	{r4, lr}
    switch( region )
 800b364:	2800      	cmp	r0, #0
 800b366:	d103      	bne.n	800b370 <RegionTxParamSetupReq+0xe>
    {
        AS923_TX_PARAM_SETUP_REQ( );
 800b368:	0008      	movs	r0, r1
 800b36a:	f000 fba2 	bl	800bab2 <RegionAS923TxParamSetupReq>
        default:
        {
            return 0;
        }
    }
}
 800b36e:	bd10      	pop	{r4, pc}
            return 0;
 800b370:	2000      	movs	r0, #0
 800b372:	e7fc      	b.n	800b36e <RegionTxParamSetupReq+0xc>

0800b374 <RegionDlChannelReq>:

uint8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 800b374:	b510      	push	{r4, lr}
    switch( region )
 800b376:	2800      	cmp	r0, #0
 800b378:	d103      	bne.n	800b382 <RegionDlChannelReq+0xe>
    {
        AS923_DL_CHANNEL_REQ( );
 800b37a:	0008      	movs	r0, r1
 800b37c:	f000 fb9c 	bl	800bab8 <RegionAS923DlChannelReq>
        default:
        {
            return 0;
        }
    }
}
 800b380:	bd10      	pop	{r4, pc}
            return 0;
 800b382:	2000      	movs	r0, #0
 800b384:	e7fc      	b.n	800b380 <RegionDlChannelReq+0xc>

0800b386 <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 800b386:	b510      	push	{r4, lr}
 800b388:	000b      	movs	r3, r1
    switch( region )
 800b38a:	2800      	cmp	r0, #0
 800b38c:	d104      	bne.n	800b398 <RegionAlternateDr+0x12>
    {
        AS923_ALTERNATE_DR( );
 800b38e:	0011      	movs	r1, r2
 800b390:	0018      	movs	r0, r3
 800b392:	f000 fbad 	bl	800baf0 <RegionAS923AlternateDr>
        default:
        {
            return 0;
        }
    }
}
 800b396:	bd10      	pop	{r4, pc}
            return 0;
 800b398:	2000      	movs	r0, #0
 800b39a:	e7fc      	b.n	800b396 <RegionAlternateDr+0x10>

0800b39c <RegionCalcBackOff>:

void RegionCalcBackOff( LoRaMacRegion_t region, CalcBackOffParams_t* calcBackOff )
{
 800b39c:	b510      	push	{r4, lr}
    switch( region )
 800b39e:	2800      	cmp	r0, #0
 800b3a0:	d102      	bne.n	800b3a8 <RegionCalcBackOff+0xc>
    {
        AS923_CALC_BACKOFF( );
 800b3a2:	0008      	movs	r0, r1
 800b3a4:	f000 fba6 	bl	800baf4 <RegionAS923CalcBackOff>
        default:
        {
            break;
        }
    }
}
 800b3a8:	bd10      	pop	{r4, pc}

0800b3aa <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800b3aa:	b510      	push	{r4, lr}
 800b3ac:	0004      	movs	r4, r0
 800b3ae:	0008      	movs	r0, r1
 800b3b0:	0011      	movs	r1, r2
 800b3b2:	001a      	movs	r2, r3
    switch( region )
 800b3b4:	2c00      	cmp	r4, #0
 800b3b6:	d103      	bne.n	800b3c0 <RegionNextChannel+0x16>
    {
        AS923_NEXT_CHANNEL( );
 800b3b8:	9b02      	ldr	r3, [sp, #8]
 800b3ba:	f000 fbb7 	bl	800bb2c <RegionAS923NextChannel>
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
        }
    }
}
 800b3be:	bd10      	pop	{r4, pc}
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 800b3c0:	2009      	movs	r0, #9
 800b3c2:	e7fc      	b.n	800b3be <RegionNextChannel+0x14>

0800b3c4 <RegionSetContinuousWave>:
        }
    }
}

void RegionSetContinuousWave( LoRaMacRegion_t region, ContinuousWaveParams_t* continuousWave )
{
 800b3c4:	b510      	push	{r4, lr}
    switch( region )
 800b3c6:	2800      	cmp	r0, #0
 800b3c8:	d102      	bne.n	800b3d0 <RegionSetContinuousWave+0xc>
    {
        AS923_SET_CONTINUOUS_WAVE( );
 800b3ca:	0008      	movs	r0, r1
 800b3cc:	f000 fd20 	bl	800be10 <RegionAS923SetContinuousWave>
        default:
        {
            break;
        }
    }
}
 800b3d0:	bd10      	pop	{r4, pc}

0800b3d2 <RegionApplyDrOffset>:

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 800b3d2:	b510      	push	{r4, lr}
 800b3d4:	0004      	movs	r4, r0
 800b3d6:	0008      	movs	r0, r1
 800b3d8:	0011      	movs	r1, r2
    switch( region )
 800b3da:	2c00      	cmp	r4, #0
 800b3dc:	d103      	bne.n	800b3e6 <RegionApplyDrOffset+0x14>
    {
        AS923_APPLY_DR_OFFSET( );
 800b3de:	001a      	movs	r2, r3
 800b3e0:	f000 fd3c 	bl	800be5c <RegionAS923ApplyDrOffset>
        default:
        {
            return dr;
        }
    }
}
 800b3e4:	bd10      	pop	{r4, pc}
            return dr;
 800b3e6:	b2d0      	uxtb	r0, r2
 800b3e8:	e7fc      	b.n	800b3e4 <RegionApplyDrOffset+0x12>
	...

0800b3ec <VerifyRfFreq>:

    return txPowerResult;
}

static bool VerifyRfFreq( uint32_t freq )
{
 800b3ec:	b513      	push	{r0, r1, r4, lr}
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 800b3ee:	4b07      	ldr	r3, [pc, #28]	; (800b40c <VerifyRfFreq+0x20>)
{
 800b3f0:	0004      	movs	r4, r0
    if( Radio.CheckRfFrequency( freq ) == false )
 800b3f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3f4:	9301      	str	r3, [sp, #4]
 800b3f6:	4798      	blx	r3
 800b3f8:	2800      	cmp	r0, #0
 800b3fa:	d006      	beq.n	800b40a <VerifyRfFreq+0x1e>
    {
        return false;
    }

    if( ( freq < 915000000 ) || ( freq > 928000000 ) )
 800b3fc:	2000      	movs	r0, #0
 800b3fe:	4b04      	ldr	r3, [pc, #16]	; (800b410 <VerifyRfFreq+0x24>)
 800b400:	18e4      	adds	r4, r4, r3
 800b402:	4b04      	ldr	r3, [pc, #16]	; (800b414 <VerifyRfFreq+0x28>)
 800b404:	42a3      	cmp	r3, r4
 800b406:	4140      	adcs	r0, r0
 800b408:	b2c0      	uxtb	r0, r0
    {
        return false;
    }
    return true;
}
 800b40a:	bd16      	pop	{r1, r2, r4, pc}
 800b40c:	0800f5a4 	.word	0x0800f5a4
 800b410:	c9763540 	.word	0xc9763540
 800b414:	00c65d40 	.word	0x00c65d40

0800b418 <RegionAS923GetPhyParam>:
    *delayTx = delayTransmission;
    return nbEnabledChannels;
}

PhyParam_t RegionAS923GetPhyParam( GetPhyParams_t* getPhy )
{
 800b418:	b507      	push	{r0, r1, r2, lr}
    PhyParam_t phyParam = { 0 };
 800b41a:	2200      	movs	r2, #0
{
 800b41c:	0003      	movs	r3, r0

    switch( getPhy->Attribute )
 800b41e:	7800      	ldrb	r0, [r0, #0]
    PhyParam_t phyParam = { 0 };
 800b420:	9200      	str	r2, [sp, #0]
    switch( getPhy->Attribute )
 800b422:	3801      	subs	r0, #1
 800b424:	2834      	cmp	r0, #52	; 0x34
 800b426:	d833      	bhi.n	800b490 <RegionAS923GetPhyParam+0x78>
 800b428:	f7f4 fe80 	bl	800012c <__gnu_thumb1_case_uqi>
 800b42c:	3232211b 	.word	0x3232211b
 800b430:	32321e32 	.word	0x32321e32
 800b434:	36343232 	.word	0x36343232
 800b438:	4c324338 	.word	0x4c324338
 800b43c:	5654514e 	.word	0x5654514e
 800b440:	65325b58 	.word	0x65325b58
 800b444:	6b69671e 	.word	0x6b69671e
 800b448:	716f6f6d 	.word	0x716f6f6d
 800b44c:	32322375 	.word	0x32322375
 800b450:	32323232 	.word	0x32323232
 800b454:	32323232 	.word	0x32323232
 800b458:	77323232 	.word	0x77323232
 800b45c:	32327d79 	.word	0x32327d79
 800b460:	7d          	.byte	0x7d
 800b461:	00          	.byte	0x00
    {
        case PHY_MIN_RX_DR:
        {
            if( getPhy->DownlinkDwellTime == 0 )
 800b462:	78db      	ldrb	r3, [r3, #3]
 800b464:	2b00      	cmp	r3, #0
 800b466:	d013      	beq.n	800b490 <RegionAS923GetPhyParam+0x78>
            }
            break;
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = AS923_DEFAULT_DATARATE;
 800b468:	2302      	movs	r3, #2
            phyParam.BeaconFormat.Rfu2Size = AS923_RFU2_SIZE;
            break;
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = AS923_BEACON_CHANNEL_DR;
 800b46a:	9300      	str	r3, [sp, #0]
            break;
 800b46c:	e010      	b.n	800b490 <RegionAS923GetPhyParam+0x78>
            if( getPhy->UplinkDwellTime == 0 )
 800b46e:	789b      	ldrb	r3, [r3, #2]
 800b470:	e7f8      	b.n	800b464 <RegionAS923GetPhyParam+0x4c>
            if( getPhy->UplinkDwellTime == 0 )
 800b472:	789a      	ldrb	r2, [r3, #2]
 800b474:	785b      	ldrb	r3, [r3, #1]
 800b476:	b25b      	sxtb	r3, r3
 800b478:	2a00      	cmp	r2, #0
 800b47a:	d104      	bne.n	800b486 <RegionAS923GetPhyParam+0x6e>
    if( dr == minDr )
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d005      	beq.n	800b48c <RegionAS923GetPhyParam+0x74>
        nextLowerDr = dr - 1;
 800b480:	3b01      	subs	r3, #1
 800b482:	b2da      	uxtb	r2, r3
 800b484:	e002      	b.n	800b48c <RegionAS923GetPhyParam+0x74>
        nextLowerDr = minDr;
 800b486:	001a      	movs	r2, r3
    if( dr == minDr )
 800b488:	2b02      	cmp	r3, #2
 800b48a:	d1f9      	bne.n	800b480 <RegionAS923GetPhyParam+0x68>
                phyParam.Value = GetNextLowerTxDr( getPhy->Datarate, AS923_DWELL_LIMIT_DATARATE );
 800b48c:	b252      	sxtb	r2, r2
 800b48e:	9200      	str	r2, [sp, #0]
            break;
        }
    }

    return phyParam;
}
 800b490:	9800      	ldr	r0, [sp, #0]
 800b492:	bd0e      	pop	{r1, r2, r3, pc}
            phyParam.Value = AS923_ADR_ACK_LIMIT;
 800b494:	2340      	movs	r3, #64	; 0x40
 800b496:	e7e8      	b.n	800b46a <RegionAS923GetPhyParam+0x52>
            phyParam.Value = AS923_ADR_ACK_DELAY;
 800b498:	2320      	movs	r3, #32
 800b49a:	e7e6      	b.n	800b46a <RegionAS923GetPhyParam+0x52>
 800b49c:	2201      	movs	r2, #1
            if( getPhy->UplinkDwellTime == 0 )
 800b49e:	7899      	ldrb	r1, [r3, #2]
 800b4a0:	569a      	ldrsb	r2, [r3, r2]
 800b4a2:	4b22      	ldr	r3, [pc, #136]	; (800b52c <RegionAS923GetPhyParam+0x114>)
 800b4a4:	2900      	cmp	r1, #0
 800b4a6:	d101      	bne.n	800b4ac <RegionAS923GetPhyParam+0x94>
                phyParam.Value = MaxPayloadOfDatarateDwell0AS923[getPhy->Datarate];
 800b4a8:	5c9b      	ldrb	r3, [r3, r2]
 800b4aa:	e7de      	b.n	800b46a <RegionAS923GetPhyParam+0x52>
                phyParam.Value = MaxPayloadOfDatarateDwell1UpAS923[getPhy->Datarate];
 800b4ac:	189b      	adds	r3, r3, r2
                phyParam.Value = MaxPayloadOfDatarateDwell1UpAS923[getPhy->Datarate];
 800b4ae:	7a1b      	ldrb	r3, [r3, #8]
 800b4b0:	e7db      	b.n	800b46a <RegionAS923GetPhyParam+0x52>
 800b4b2:	2201      	movs	r2, #1
            if( getPhy->UplinkDwellTime == 0 )
 800b4b4:	7899      	ldrb	r1, [r3, #2]
 800b4b6:	569a      	ldrsb	r2, [r3, r2]
 800b4b8:	4b1c      	ldr	r3, [pc, #112]	; (800b52c <RegionAS923GetPhyParam+0x114>)
                phyParam.Value = MaxPayloadOfDatarateRepeaterDwell0AS923[getPhy->Datarate];
 800b4ba:	189b      	adds	r3, r3, r2
            if( getPhy->UplinkDwellTime == 0 )
 800b4bc:	2900      	cmp	r1, #0
 800b4be:	d1f6      	bne.n	800b4ae <RegionAS923GetPhyParam+0x96>
                phyParam.Value = MaxPayloadOfDatarateRepeaterDwell0AS923[getPhy->Datarate];
 800b4c0:	7c1b      	ldrb	r3, [r3, #16]
 800b4c2:	e7d2      	b.n	800b46a <RegionAS923GetPhyParam+0x52>
            phyParam.Value = AS923_MAX_RX_WINDOW;
 800b4c4:	4b1a      	ldr	r3, [pc, #104]	; (800b530 <RegionAS923GetPhyParam+0x118>)
 800b4c6:	e7d0      	b.n	800b46a <RegionAS923GetPhyParam+0x52>
            phyParam.Value = AS923_RECEIVE_DELAY1;
 800b4c8:	23fa      	movs	r3, #250	; 0xfa
 800b4ca:	009b      	lsls	r3, r3, #2
 800b4cc:	e7cd      	b.n	800b46a <RegionAS923GetPhyParam+0x52>
            phyParam.Value = AS923_RECEIVE_DELAY2;
 800b4ce:	23fa      	movs	r3, #250	; 0xfa
 800b4d0:	00db      	lsls	r3, r3, #3
 800b4d2:	e7ca      	b.n	800b46a <RegionAS923GetPhyParam+0x52>
            phyParam.Value = AS923_JOIN_ACCEPT_DELAY1;
 800b4d4:	4b17      	ldr	r3, [pc, #92]	; (800b534 <RegionAS923GetPhyParam+0x11c>)
 800b4d6:	e7c8      	b.n	800b46a <RegionAS923GetPhyParam+0x52>
            phyParam.Value = AS923_JOIN_ACCEPT_DELAY2;
 800b4d8:	4b17      	ldr	r3, [pc, #92]	; (800b538 <RegionAS923GetPhyParam+0x120>)
 800b4da:	e7c6      	b.n	800b46a <RegionAS923GetPhyParam+0x52>
            phyParam.Value = AS923_MAX_FCNT_GAP;
 800b4dc:	2380      	movs	r3, #128	; 0x80
 800b4de:	01db      	lsls	r3, r3, #7
 800b4e0:	e7c3      	b.n	800b46a <RegionAS923GetPhyParam+0x52>
            phyParam.Value = ( AS923_ACKTIMEOUT + randr( -AS923_ACK_TIMEOUT_RND, AS923_ACK_TIMEOUT_RND ) );
 800b4e2:	21fa      	movs	r1, #250	; 0xfa
 800b4e4:	4815      	ldr	r0, [pc, #84]	; (800b53c <RegionAS923GetPhyParam+0x124>)
 800b4e6:	0089      	lsls	r1, r1, #2
 800b4e8:	f001 fd72 	bl	800cfd0 <randr>
 800b4ec:	23fa      	movs	r3, #250	; 0xfa
 800b4ee:	00db      	lsls	r3, r3, #3
 800b4f0:	18c0      	adds	r0, r0, r3
 800b4f2:	9000      	str	r0, [sp, #0]
            break;
 800b4f4:	e7cc      	b.n	800b490 <RegionAS923GetPhyParam+0x78>
            phyParam.Value = AS923_RX_WND_2_FREQ;
 800b4f6:	4b12      	ldr	r3, [pc, #72]	; (800b540 <RegionAS923GetPhyParam+0x128>)
 800b4f8:	e7b7      	b.n	800b46a <RegionAS923GetPhyParam+0x52>
            phyParam.ChannelsMask = NvmCtx.ChannelsMask;
 800b4fa:	4b12      	ldr	r3, [pc, #72]	; (800b544 <RegionAS923GetPhyParam+0x12c>)
 800b4fc:	e7b5      	b.n	800b46a <RegionAS923GetPhyParam+0x52>
            phyParam.ChannelsMask = NvmCtx.ChannelsDefaultMask;
 800b4fe:	4b12      	ldr	r3, [pc, #72]	; (800b548 <RegionAS923GetPhyParam+0x130>)
 800b500:	e7b3      	b.n	800b46a <RegionAS923GetPhyParam+0x52>
            phyParam.Value = AS923_MAX_NB_CHANNELS;
 800b502:	2310      	movs	r3, #16
 800b504:	e7b1      	b.n	800b46a <RegionAS923GetPhyParam+0x52>
            phyParam.Channels = NvmCtx.Channels;
 800b506:	4b11      	ldr	r3, [pc, #68]	; (800b54c <RegionAS923GetPhyParam+0x134>)
 800b508:	e7af      	b.n	800b46a <RegionAS923GetPhyParam+0x52>
            phyParam.Value = AS923_DEFAULT_UPLINK_DWELL_TIME;
 800b50a:	2301      	movs	r3, #1
 800b50c:	e7ad      	b.n	800b46a <RegionAS923GetPhyParam+0x52>
            phyParam.fValue = AS923_DEFAULT_MAX_EIRP;
 800b50e:	2383      	movs	r3, #131	; 0x83
 800b510:	05db      	lsls	r3, r3, #23
            phyParam.fValue = AS923_DEFAULT_ANTENNA_GAIN;
 800b512:	9300      	str	r3, [sp, #0]
            break;
 800b514:	e7bc      	b.n	800b490 <RegionAS923GetPhyParam+0x78>
            phyParam.fValue = AS923_DEFAULT_ANTENNA_GAIN;
 800b516:	4b0e      	ldr	r3, [pc, #56]	; (800b550 <RegionAS923GetPhyParam+0x138>)
 800b518:	e7fb      	b.n	800b512 <RegionAS923GetPhyParam+0xfa>
            phyParam.Value = AS923_BEACON_CHANNEL_FREQ;
 800b51a:	4b0e      	ldr	r3, [pc, #56]	; (800b554 <RegionAS923GetPhyParam+0x13c>)
 800b51c:	e7a5      	b.n	800b46a <RegionAS923GetPhyParam+0x52>
            phyParam.BeaconFormat.BeaconSize = AS923_BEACON_SIZE;
 800b51e:	466a      	mov	r2, sp
 800b520:	4b0d      	ldr	r3, [pc, #52]	; (800b558 <RegionAS923GetPhyParam+0x140>)
 800b522:	8013      	strh	r3, [r2, #0]
            break;
 800b524:	e7b4      	b.n	800b490 <RegionAS923GetPhyParam+0x78>
            phyParam.Value = AS923_BEACON_CHANNEL_DR;
 800b526:	2303      	movs	r3, #3
 800b528:	e79f      	b.n	800b46a <RegionAS923GetPhyParam+0x52>
 800b52a:	46c0      	nop			; (mov r8, r8)
 800b52c:	0800fa54 	.word	0x0800fa54
 800b530:	00000bb8 	.word	0x00000bb8
 800b534:	00001388 	.word	0x00001388
 800b538:	00001770 	.word	0x00001770
 800b53c:	fffffc18 	.word	0xfffffc18
 800b540:	3706ea00 	.word	0x3706ea00
 800b544:	20001044 	.word	0x20001044
 800b548:	20001046 	.word	0x20001046
 800b54c:	20000f74 	.word	0x20000f74
 800b550:	4009999a 	.word	0x4009999a
 800b554:	3709f740 	.word	0x3709f740
 800b558:	00000211 	.word	0x00000211

0800b55c <RegionAS923SetBandTxDone>:

void RegionAS923SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 800b55c:	0002      	movs	r2, r0
    RegionCommonSetBandTxDone( txDone->Joined, &NvmCtx.Bands[NvmCtx.Channels[txDone->Channel].Band], txDone->LastTxDoneTime );
 800b55e:	230c      	movs	r3, #12
 800b560:	7811      	ldrb	r1, [r2, #0]
 800b562:	4806      	ldr	r0, [pc, #24]	; (800b57c <RegionAS923SetBandTxDone+0x20>)
 800b564:	434b      	muls	r3, r1
{
 800b566:	b510      	push	{r4, lr}
    RegionCommonSetBandTxDone( txDone->Joined, &NvmCtx.Bands[NvmCtx.Channels[txDone->Channel].Band], txDone->LastTxDoneTime );
 800b568:	18c3      	adds	r3, r0, r3
 800b56a:	7a59      	ldrb	r1, [r3, #9]
 800b56c:	310c      	adds	r1, #12
 800b56e:	0109      	lsls	r1, r1, #4
 800b570:	1809      	adds	r1, r1, r0
 800b572:	7850      	ldrb	r0, [r2, #1]
 800b574:	6852      	ldr	r2, [r2, #4]
 800b576:	f000 fd1f 	bl	800bfb8 <RegionCommonSetBandTxDone>
}
 800b57a:	bd10      	pop	{r4, pc}
 800b57c:	20000f74 	.word	0x20000f74

0800b580 <RegionAS923InitDefaults>:

void RegionAS923InitDefaults( InitDefaultsParams_t* params )
{
 800b580:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    Band_t bands[AS923_MAX_NB_BANDS] =
 800b582:	2364      	movs	r3, #100	; 0x64
 800b584:	466a      	mov	r2, sp
 800b586:	8013      	strh	r3, [r2, #0]
 800b588:	2300      	movs	r3, #0
 800b58a:	7093      	strb	r3, [r2, #2]
 800b58c:	9301      	str	r3, [sp, #4]
 800b58e:	9302      	str	r3, [sp, #8]
 800b590:	9303      	str	r3, [sp, #12]
    {
        AS923_BAND0
    };

    switch( params->Type )
 800b592:	7903      	ldrb	r3, [r0, #4]
 800b594:	2b01      	cmp	r3, #1
 800b596:	d023      	beq.n	800b5e0 <RegionAS923InitDefaults+0x60>
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d002      	beq.n	800b5a2 <RegionAS923InitDefaults+0x22>
 800b59c:	2b02      	cmp	r3, #2
 800b59e:	d017      	beq.n	800b5d0 <RegionAS923InitDefaults+0x50>
        default:
        {
            break;
        }
    }
}
 800b5a0:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
            memcpy1( ( uint8_t* )NvmCtx.Bands, ( uint8_t* )bands, sizeof( Band_t ) * AS923_MAX_NB_BANDS );
 800b5a2:	4669      	mov	r1, sp
 800b5a4:	2210      	movs	r2, #16
 800b5a6:	4818      	ldr	r0, [pc, #96]	; (800b608 <RegionAS923InitDefaults+0x88>)
 800b5a8:	f001 fd1d 	bl	800cfe6 <memcpy1>
            NvmCtx.Channels[0] = ( ChannelParams_t ) AS923_LC1;
 800b5ac:	4b17      	ldr	r3, [pc, #92]	; (800b60c <RegionAS923InitDefaults+0x8c>)
 800b5ae:	4918      	ldr	r1, [pc, #96]	; (800b610 <RegionAS923InitDefaults+0x90>)
 800b5b0:	001a      	movs	r2, r3
 800b5b2:	0008      	movs	r0, r1
 800b5b4:	3218      	adds	r2, #24
 800b5b6:	ca70      	ldmia	r2!, {r4, r5, r6}
 800b5b8:	c070      	stmia	r0!, {r4, r5, r6}
            NvmCtx.Channels[1] = ( ChannelParams_t ) AS923_LC2;
 800b5ba:	3324      	adds	r3, #36	; 0x24
 800b5bc:	cb34      	ldmia	r3!, {r2, r4, r5}
 800b5be:	c034      	stmia	r0!, {r2, r4, r5}
            NvmCtx.ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 );
 800b5c0:	2303      	movs	r3, #3
 800b5c2:	31d2      	adds	r1, #210	; 0xd2
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, NvmCtx.ChannelsDefaultMask, 1 );
 800b5c4:	2201      	movs	r2, #1
 800b5c6:	4813      	ldr	r0, [pc, #76]	; (800b614 <RegionAS923InitDefaults+0x94>)
            NvmCtx.ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 );
 800b5c8:	800b      	strh	r3, [r1, #0]
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, NvmCtx.ChannelsDefaultMask, 1 );
 800b5ca:	f000 fce7 	bl	800bf9c <RegionCommonChanMaskCopy>
            break;
 800b5ce:	e7e7      	b.n	800b5a0 <RegionAS923InitDefaults+0x20>
            if( params->NvmCtx != 0 )
 800b5d0:	6801      	ldr	r1, [r0, #0]
 800b5d2:	2900      	cmp	r1, #0
 800b5d4:	d0e4      	beq.n	800b5a0 <RegionAS923InitDefaults+0x20>
                memcpy1( (uint8_t*) &NvmCtx, (uint8_t*) params->NvmCtx, sizeof( NvmCtx ) );
 800b5d6:	22d4      	movs	r2, #212	; 0xd4
 800b5d8:	480d      	ldr	r0, [pc, #52]	; (800b610 <RegionAS923InitDefaults+0x90>)
 800b5da:	f001 fd04 	bl	800cfe6 <memcpy1>
 800b5de:	e7df      	b.n	800b5a0 <RegionAS923InitDefaults+0x20>
            NvmCtx.ChannelsMask[0] |= NvmCtx.ChannelsDefaultMask[0];
 800b5e0:	4a0b      	ldr	r2, [pc, #44]	; (800b610 <RegionAS923InitDefaults+0x90>)
 800b5e2:	0011      	movs	r1, r2
 800b5e4:	0010      	movs	r0, r2
 800b5e6:	31d0      	adds	r1, #208	; 0xd0
 800b5e8:	30d2      	adds	r0, #210	; 0xd2
 800b5ea:	880b      	ldrh	r3, [r1, #0]
 800b5ec:	8800      	ldrh	r0, [r0, #0]
 800b5ee:	4303      	orrs	r3, r0
 800b5f0:	800b      	strh	r3, [r1, #0]
            NvmCtx.Channels[0] = ( ChannelParams_t ) AS923_LC1;
 800b5f2:	4b06      	ldr	r3, [pc, #24]	; (800b60c <RegionAS923InitDefaults+0x8c>)
 800b5f4:	0019      	movs	r1, r3
 800b5f6:	3118      	adds	r1, #24
 800b5f8:	c931      	ldmia	r1!, {r0, r4, r5}
 800b5fa:	c231      	stmia	r2!, {r0, r4, r5}
 800b5fc:	0010      	movs	r0, r2
            NvmCtx.Channels[1] = ( ChannelParams_t ) AS923_LC2;
 800b5fe:	3324      	adds	r3, #36	; 0x24
 800b600:	cb16      	ldmia	r3!, {r1, r2, r4}
 800b602:	c016      	stmia	r0!, {r1, r2, r4}
}
 800b604:	e7cc      	b.n	800b5a0 <RegionAS923InitDefaults+0x20>
 800b606:	46c0      	nop			; (mov r8, r8)
 800b608:	20001034 	.word	0x20001034
 800b60c:	0800fa54 	.word	0x0800fa54
 800b610:	20000f74 	.word	0x20000f74
 800b614:	20001044 	.word	0x20001044

0800b618 <RegionAS923GetNvmCtx>:

void* RegionAS923GetNvmCtx( GetNvmCtxParams_t* params )
{
    params->nvmCtxSize = sizeof( RegionAS923NvmCtx_t );
 800b618:	23d4      	movs	r3, #212	; 0xd4
 800b61a:	6003      	str	r3, [r0, #0]
    return &NvmCtx;
}
 800b61c:	4800      	ldr	r0, [pc, #0]	; (800b620 <RegionAS923GetNvmCtx+0x8>)
 800b61e:	4770      	bx	lr
 800b620:	20000f74 	.word	0x20000f74

0800b624 <RegionAS923Verify>:

bool RegionAS923Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800b624:	b510      	push	{r4, lr}
 800b626:	0003      	movs	r3, r0
    switch( phyAttribute )
 800b628:	290a      	cmp	r1, #10
 800b62a:	d827      	bhi.n	800b67c <RegionAS923Verify+0x58>
 800b62c:	0008      	movs	r0, r1
 800b62e:	f7f4 fd7d 	bl	800012c <__gnu_thumb1_case_uqi>
 800b632:	2506      	.short	0x2506
 800b634:	0a252525 	.word	0x0a252525
 800b638:	21251b16 	.word	0x21251b16
 800b63c:	21          	.byte	0x21
 800b63d:	00          	.byte	0x00
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 800b63e:	6818      	ldr	r0, [r3, #0]
 800b640:	f7ff fed4 	bl	800b3ec <VerifyRfFreq>
            return AS923_DUTY_CYCLE_ENABLED;
        }
        default:
            return false;
    }
}
 800b644:	bd10      	pop	{r4, pc}
 800b646:	2000      	movs	r0, #0
            if( verify->DatarateParams.UplinkDwellTime == 0 )
 800b648:	7899      	ldrb	r1, [r3, #2]
 800b64a:	5618      	ldrsb	r0, [r3, r0]
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AS923_RX_MIN_DATARATE, AS923_RX_MAX_DATARATE );
 800b64c:	2207      	movs	r2, #7
            if( verify->DatarateParams.DownlinkDwellTime == 0 )
 800b64e:	2900      	cmp	r1, #0
 800b650:	d10e      	bne.n	800b670 <RegionAS923Verify+0x4c>
            return RegionCommonValueInRange( verify->TxPower, AS923_MAX_TX_POWER, AS923_MIN_TX_POWER );
 800b652:	f000 fc64 	bl	800bf1e <RegionCommonValueInRange>
 800b656:	1e43      	subs	r3, r0, #1
 800b658:	4198      	sbcs	r0, r3
 800b65a:	b2c0      	uxtb	r0, r0
 800b65c:	e7f2      	b.n	800b644 <RegionAS923Verify+0x20>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 800b65e:	2000      	movs	r0, #0
 800b660:	2205      	movs	r2, #5
 800b662:	5618      	ldrsb	r0, [r3, r0]
            return RegionCommonValueInRange( verify->TxPower, AS923_MAX_TX_POWER, AS923_MIN_TX_POWER );
 800b664:	2100      	movs	r1, #0
 800b666:	e7f4      	b.n	800b652 <RegionAS923Verify+0x2e>
 800b668:	2000      	movs	r0, #0
            if( verify->DatarateParams.DownlinkDwellTime == 0 )
 800b66a:	7859      	ldrb	r1, [r3, #1]
 800b66c:	5618      	ldrsb	r0, [r3, r0]
 800b66e:	e7ed      	b.n	800b64c <RegionAS923Verify+0x28>
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AS923_DWELL_LIMIT_DATARATE, AS923_RX_MAX_DATARATE );
 800b670:	2102      	movs	r1, #2
 800b672:	e7ee      	b.n	800b652 <RegionAS923Verify+0x2e>
            return RegionCommonValueInRange( verify->TxPower, AS923_MAX_TX_POWER, AS923_MIN_TX_POWER );
 800b674:	2000      	movs	r0, #0
 800b676:	2207      	movs	r2, #7
 800b678:	5618      	ldrsb	r0, [r3, r0]
 800b67a:	e7f3      	b.n	800b664 <RegionAS923Verify+0x40>
            return AS923_DUTY_CYCLE_ENABLED;
 800b67c:	2000      	movs	r0, #0
 800b67e:	e7e1      	b.n	800b644 <RegionAS923Verify+0x20>

0800b680 <RegionAS923ChanMaskSet>:
        }
    }
}

bool RegionAS923ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 800b680:	b510      	push	{r4, lr}
    switch( chanMaskSet->ChannelsMaskType )
 800b682:	7904      	ldrb	r4, [r0, #4]
 800b684:	2c00      	cmp	r4, #0
 800b686:	d003      	beq.n	800b690 <RegionAS923ChanMaskSet+0x10>
 800b688:	2c01      	cmp	r4, #1
 800b68a:	d008      	beq.n	800b69e <RegionAS923ChanMaskSet+0x1e>
        {
            RegionCommonChanMaskCopy( NvmCtx.ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, 1 );
            break;
        }
        default:
            return false;
 800b68c:	2000      	movs	r0, #0
 800b68e:	e005      	b.n	800b69c <RegionAS923ChanMaskSet+0x1c>
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, chanMaskSet->ChannelsMaskIn, 1 );
 800b690:	2201      	movs	r2, #1
 800b692:	6801      	ldr	r1, [r0, #0]
 800b694:	4804      	ldr	r0, [pc, #16]	; (800b6a8 <RegionAS923ChanMaskSet+0x28>)
 800b696:	f000 fc81 	bl	800bf9c <RegionCommonChanMaskCopy>
    }
    return true;
 800b69a:	2001      	movs	r0, #1
}
 800b69c:	bd10      	pop	{r4, pc}
            RegionCommonChanMaskCopy( NvmCtx.ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, 1 );
 800b69e:	6801      	ldr	r1, [r0, #0]
 800b6a0:	0022      	movs	r2, r4
 800b6a2:	4802      	ldr	r0, [pc, #8]	; (800b6ac <RegionAS923ChanMaskSet+0x2c>)
 800b6a4:	e7f7      	b.n	800b696 <RegionAS923ChanMaskSet+0x16>
 800b6a6:	46c0      	nop			; (mov r8, r8)
 800b6a8:	20001044 	.word	0x20001044
 800b6ac:	20001046 	.word	0x20001046

0800b6b0 <RegionAS923ComputeRxWindowParameters>:

void RegionAS923ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800b6b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b6b2:	b087      	sub	sp, #28
 800b6b4:	001c      	movs	r4, r3
 800b6b6:	9104      	str	r1, [sp, #16]
 800b6b8:	0015      	movs	r5, r2
    double tSymbol = 0.0;

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, AS923_RX_MAX_DATARATE );
 800b6ba:	1c03      	adds	r3, r0, #0
 800b6bc:	2807      	cmp	r0, #7
 800b6be:	dd00      	ble.n	800b6c2 <RegionAS923ComputeRxWindowParameters+0x12>
 800b6c0:	2307      	movs	r3, #7
    switch( BandwidthsAS923[drIndex] )
 800b6c2:	4f18      	ldr	r7, [pc, #96]	; (800b724 <RegionAS923ComputeRxWindowParameters+0x74>)
    rxConfigParams->Datarate = MIN( datarate, AS923_RX_MAX_DATARATE );
 800b6c4:	b25e      	sxtb	r6, r3
    switch( BandwidthsAS923[drIndex] )
 800b6c6:	46bc      	mov	ip, r7
 800b6c8:	4a17      	ldr	r2, [pc, #92]	; (800b728 <RegionAS923ComputeRxWindowParameters+0x78>)
 800b6ca:	00b1      	lsls	r1, r6, #2
    rxConfigParams->Datarate = MIN( datarate, AS923_RX_MAX_DATARATE );
 800b6cc:	7063      	strb	r3, [r4, #1]
    switch( BandwidthsAS923[drIndex] )
 800b6ce:	1853      	adds	r3, r2, r1
 800b6d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            return 1;
 800b6d2:	2701      	movs	r7, #1
    switch( BandwidthsAS923[drIndex] )
 800b6d4:	4563      	cmp	r3, ip
 800b6d6:	d004      	beq.n	800b6e2 <RegionAS923ComputeRxWindowParameters+0x32>
            return 0;
 800b6d8:	4f14      	ldr	r7, [pc, #80]	; (800b72c <RegionAS923ComputeRxWindowParameters+0x7c>)
 800b6da:	19db      	adds	r3, r3, r7
 800b6dc:	425f      	negs	r7, r3
 800b6de:	415f      	adcs	r7, r3
 800b6e0:	007f      	lsls	r7, r7, #1
    rxConfigParams->Bandwidth = GetBandwidth( rxConfigParams->Datarate );
 800b6e2:	70a7      	strb	r7, [r4, #2]

    if( rxConfigParams->Datarate == DR_7 )
 800b6e4:	2806      	cmp	r0, #6
 800b6e6:	dd16      	ble.n	800b716 <RegionAS923ComputeRxWindowParameters+0x66>
    { // FSK
        tSymbol = RegionCommonComputeSymbolTimeFsk( DataratesAS923[rxConfigParams->Datarate] );
 800b6e8:	2032      	movs	r0, #50	; 0x32
 800b6ea:	f000 fd21 	bl	800c130 <RegionCommonComputeSymbolTimeFsk>
    else
    { // LoRa
        tSymbol = RegionCommonComputeSymbolTimeLoRa( DataratesAS923[rxConfigParams->Datarate], BandwidthsAS923[rxConfigParams->Datarate] );
    }

    RegionCommonComputeRxWindowParameters( tSymbol, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 800b6ee:	4b10      	ldr	r3, [pc, #64]	; (800b730 <RegionAS923ComputeRxWindowParameters+0x80>)
        tSymbol = RegionCommonComputeSymbolTimeLoRa( DataratesAS923[rxConfigParams->Datarate], BandwidthsAS923[rxConfigParams->Datarate] );
 800b6f0:	0006      	movs	r6, r0
    RegionCommonComputeRxWindowParameters( tSymbol, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 800b6f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
        tSymbol = RegionCommonComputeSymbolTimeLoRa( DataratesAS923[rxConfigParams->Datarate], BandwidthsAS923[rxConfigParams->Datarate] );
 800b6f4:	000f      	movs	r7, r1
    RegionCommonComputeRxWindowParameters( tSymbol, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 800b6f6:	9305      	str	r3, [sp, #20]
 800b6f8:	4798      	blx	r3
 800b6fa:	0023      	movs	r3, r4
 800b6fc:	3408      	adds	r4, #8
 800b6fe:	330c      	adds	r3, #12
 800b700:	9302      	str	r3, [sp, #8]
 800b702:	9000      	str	r0, [sp, #0]
 800b704:	9401      	str	r4, [sp, #4]
 800b706:	002b      	movs	r3, r5
 800b708:	9a04      	ldr	r2, [sp, #16]
 800b70a:	0030      	movs	r0, r6
 800b70c:	0039      	movs	r1, r7
 800b70e:	f000 fd1b 	bl	800c148 <RegionCommonComputeRxWindowParameters>
}
 800b712:	b007      	add	sp, #28
 800b714:	bdf0      	pop	{r4, r5, r6, r7, pc}
        tSymbol = RegionCommonComputeSymbolTimeLoRa( DataratesAS923[rxConfigParams->Datarate], BandwidthsAS923[rxConfigParams->Datarate] );
 800b716:	1851      	adds	r1, r2, r1
 800b718:	3250      	adds	r2, #80	; 0x50
 800b71a:	5d90      	ldrb	r0, [r2, r6]
 800b71c:	6b09      	ldr	r1, [r1, #48]	; 0x30
 800b71e:	f000 fced 	bl	800c0fc <RegionCommonComputeSymbolTimeLoRa>
 800b722:	e7e4      	b.n	800b6ee <RegionAS923ComputeRxWindowParameters+0x3e>
 800b724:	0003d090 	.word	0x0003d090
 800b728:	0800fa54 	.word	0x0800fa54
 800b72c:	fff85ee0 	.word	0xfff85ee0
 800b730:	0800f5a4 	.word	0x0800f5a4

0800b734 <RegionAS923RxConfig>:

bool RegionAS923RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800b734:	b5f0      	push	{r4, r5, r6, r7, lr}
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 800b736:	2701      	movs	r7, #1
    uint8_t maxPayload = 0;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;

    if( Radio.GetStatus( ) != RF_IDLE )
 800b738:	4b33      	ldr	r3, [pc, #204]	; (800b808 <RegionAS923RxConfig+0xd4>)
{
 800b73a:	b08d      	sub	sp, #52	; 0x34
    if( Radio.GetStatus( ) != RF_IDLE )
 800b73c:	68db      	ldr	r3, [r3, #12]
{
 800b73e:	910b      	str	r1, [sp, #44]	; 0x2c
    int8_t dr = rxConfig->Datarate;
 800b740:	57c7      	ldrsb	r7, [r0, r7]
{
 800b742:	0005      	movs	r5, r0
    if( Radio.GetStatus( ) != RF_IDLE )
 800b744:	930a      	str	r3, [sp, #40]	; 0x28
    uint32_t frequency = rxConfig->Frequency;
 800b746:	6844      	ldr	r4, [r0, #4]
    if( Radio.GetStatus( ) != RF_IDLE )
 800b748:	4798      	blx	r3
    {
        return false;
 800b74a:	2300      	movs	r3, #0
    if( Radio.GetStatus( ) != RF_IDLE )
 800b74c:	4298      	cmp	r0, r3
 800b74e:	d143      	bne.n	800b7d8 <RegionAS923RxConfig+0xa4>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 800b750:	7ceb      	ldrb	r3, [r5, #19]
 800b752:	2b00      	cmp	r3, #0
 800b754:	d109      	bne.n	800b76a <RegionAS923RxConfig+0x36>
    {
        // Apply window 1 frequency
        frequency = NvmCtx.Channels[rxConfig->Channel].Frequency;
 800b756:	220c      	movs	r2, #12
 800b758:	7829      	ldrb	r1, [r5, #0]
 800b75a:	4b2c      	ldr	r3, [pc, #176]	; (800b80c <RegionAS923RxConfig+0xd8>)
 800b75c:	434a      	muls	r2, r1
 800b75e:	58d1      	ldr	r1, [r2, r3]
        // Apply the alternative RX 1 window frequency, if it is available
        if( NvmCtx.Channels[rxConfig->Channel].Rx1Frequency != 0 )
 800b760:	189b      	adds	r3, r3, r2
 800b762:	685c      	ldr	r4, [r3, #4]
 800b764:	2c00      	cmp	r4, #0
 800b766:	d100      	bne.n	800b76a <RegionAS923RxConfig+0x36>
        frequency = NvmCtx.Channels[rxConfig->Channel].Frequency;
 800b768:	000c      	movs	r4, r1
            frequency = NvmCtx.Channels[rxConfig->Channel].Rx1Frequency;
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesAS923[dr];
 800b76a:	4b29      	ldr	r3, [pc, #164]	; (800b810 <RegionAS923RxConfig+0xdc>)

    Radio.SetChannel( frequency );
 800b76c:	0020      	movs	r0, r4
    phyDr = DataratesAS923[dr];
 800b76e:	3350      	adds	r3, #80	; 0x50
 800b770:	57db      	ldrsb	r3, [r3, r7]
 800b772:	001e      	movs	r6, r3
    Radio.SetChannel( frequency );
 800b774:	4b24      	ldr	r3, [pc, #144]	; (800b808 <RegionAS923RxConfig+0xd4>)
 800b776:	695b      	ldr	r3, [r3, #20]
 800b778:	930a      	str	r3, [sp, #40]	; 0x28
 800b77a:	4798      	blx	r3
 800b77c:	4b22      	ldr	r3, [pc, #136]	; (800b808 <RegionAS923RxConfig+0xd4>)
 800b77e:	6a1b      	ldr	r3, [r3, #32]
 800b780:	930a      	str	r3, [sp, #40]	; 0x28
 800b782:	7cab      	ldrb	r3, [r5, #18]

    // Radio configuration
    if( dr == DR_7 )
 800b784:	2f07      	cmp	r7, #7
 800b786:	d12a      	bne.n	800b7de <RegionAS923RxConfig+0xaa>
    {
        modem = MODEM_FSK;
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 800b788:	9309      	str	r3, [sp, #36]	; 0x24
 800b78a:	2301      	movs	r3, #1
 800b78c:	9305      	str	r3, [sp, #20]
 800b78e:	68ab      	ldr	r3, [r5, #8]
 800b790:	2400      	movs	r4, #0
 800b792:	b29b      	uxth	r3, r3
 800b794:	9302      	str	r3, [sp, #8]
 800b796:	2305      	movs	r3, #5
 800b798:	22fa      	movs	r2, #250	; 0xfa
 800b79a:	9301      	str	r3, [sp, #4]
 800b79c:	4b1d      	ldr	r3, [pc, #116]	; (800b814 <RegionAS923RxConfig+0xe0>)
 800b79e:	0092      	lsls	r2, r2, #2
 800b7a0:	9300      	str	r3, [sp, #0]
 800b7a2:	0023      	movs	r3, r4
 800b7a4:	4372      	muls	r2, r6
 800b7a6:	491c      	ldr	r1, [pc, #112]	; (800b818 <RegionAS923RxConfig+0xe4>)
 800b7a8:	9408      	str	r4, [sp, #32]
 800b7aa:	9407      	str	r4, [sp, #28]
 800b7ac:	9406      	str	r4, [sp, #24]
 800b7ae:	9404      	str	r4, [sp, #16]
 800b7b0:	9403      	str	r4, [sp, #12]
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 800b7b2:	0020      	movs	r0, r4
 800b7b4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800b7b6:	47b0      	blx	r6
    }

    // Check for repeater support
    if( rxConfig->RepeaterSupport == true )
 800b7b8:	7c6a      	ldrb	r2, [r5, #17]
        modem = MODEM_LORA;
 800b7ba:	0020      	movs	r0, r4
 800b7bc:	4b14      	ldr	r3, [pc, #80]	; (800b810 <RegionAS923RxConfig+0xdc>)
    if( rxConfig->RepeaterSupport == true )
 800b7be:	2a00      	cmp	r2, #0
 800b7c0:	d020      	beq.n	800b804 <RegionAS923RxConfig+0xd0>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterDwell0AS923[dr];
 800b7c2:	19db      	adds	r3, r3, r7
 800b7c4:	7c19      	ldrb	r1, [r3, #16]
    else
    {
        maxPayload = MaxPayloadOfDatarateDwell0AS923[dr];
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORA_MAC_FRMPAYLOAD_OVERHEAD );
 800b7c6:	4b10      	ldr	r3, [pc, #64]	; (800b808 <RegionAS923RxConfig+0xd4>)
 800b7c8:	310d      	adds	r1, #13
 800b7ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b7cc:	b2c9      	uxtb	r1, r1
 800b7ce:	930a      	str	r3, [sp, #40]	; 0x28
 800b7d0:	4798      	blx	r3
    TVL1( PRINTF( "RX on freq %d Hz at DR %d\n\r", frequency, dr );)

    *datarate = (uint8_t) dr;
 800b7d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b7d4:	701f      	strb	r7, [r3, #0]
    return true;
 800b7d6:	2301      	movs	r3, #1
}
 800b7d8:	0018      	movs	r0, r3
 800b7da:	b00d      	add	sp, #52	; 0x34
 800b7dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 800b7de:	68aa      	ldr	r2, [r5, #8]
 800b7e0:	2401      	movs	r4, #1
 800b7e2:	b292      	uxth	r2, r2
 800b7e4:	9309      	str	r3, [sp, #36]	; 0x24
 800b7e6:	9202      	str	r2, [sp, #8]
 800b7e8:	2300      	movs	r3, #0
 800b7ea:	2208      	movs	r2, #8
 800b7ec:	9307      	str	r3, [sp, #28]
 800b7ee:	9306      	str	r3, [sp, #24]
 800b7f0:	9305      	str	r3, [sp, #20]
 800b7f2:	9304      	str	r3, [sp, #16]
 800b7f4:	9303      	str	r3, [sp, #12]
 800b7f6:	9201      	str	r2, [sp, #4]
 800b7f8:	9300      	str	r3, [sp, #0]
 800b7fa:	78a9      	ldrb	r1, [r5, #2]
 800b7fc:	9408      	str	r4, [sp, #32]
 800b7fe:	0023      	movs	r3, r4
 800b800:	0032      	movs	r2, r6
 800b802:	e7d6      	b.n	800b7b2 <RegionAS923RxConfig+0x7e>
        maxPayload = MaxPayloadOfDatarateDwell0AS923[dr];
 800b804:	5dd9      	ldrb	r1, [r3, r7]
 800b806:	e7de      	b.n	800b7c6 <RegionAS923RxConfig+0x92>
 800b808:	0800f5a4 	.word	0x0800f5a4
 800b80c:	20000f74 	.word	0x20000f74
 800b810:	0800fa54 	.word	0x0800fa54
 800b814:	00014585 	.word	0x00014585
 800b818:	0000c350 	.word	0x0000c350

0800b81c <RegionAS923TxConfig>:

bool RegionAS923TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800b81c:	b5f0      	push	{r4, r5, r6, r7, lr}
    RadioModems_t modem;
    int8_t phyDr = DataratesAS923[txConfig->Datarate];
 800b81e:	4b3d      	ldr	r3, [pc, #244]	; (800b914 <RegionAS923TxConfig+0xf8>)
{
 800b820:	b091      	sub	sp, #68	; 0x44
 800b822:	920f      	str	r2, [sp, #60]	; 0x3c
    int8_t phyDr = DataratesAS923[txConfig->Datarate];
 800b824:	2201      	movs	r2, #1
{
 800b826:	910e      	str	r1, [sp, #56]	; 0x38
    int8_t phyDr = DataratesAS923[txConfig->Datarate];
 800b828:	0019      	movs	r1, r3
 800b82a:	5682      	ldrsb	r2, [r0, r2]
 800b82c:	3150      	adds	r1, #80	; 0x50
{
 800b82e:	0005      	movs	r5, r0
    int8_t phyDr = DataratesAS923[txConfig->Datarate];
 800b830:	5689      	ldrsb	r1, [r1, r2]
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, NvmCtx.Bands[NvmCtx.Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, NvmCtx.ChannelsMask );
 800b832:	782c      	ldrb	r4, [r5, #0]
    int8_t phyDr = DataratesAS923[txConfig->Datarate];
 800b834:	910a      	str	r1, [sp, #40]	; 0x28
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, NvmCtx.Bands[NvmCtx.Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, NvmCtx.ChannelsMask );
 800b836:	210c      	movs	r1, #12
 800b838:	4361      	muls	r1, r4
 800b83a:	4837      	ldr	r0, [pc, #220]	; (800b918 <RegionAS923TxConfig+0xfc>)
    txPowerResult =  MAX( txPower, maxBandTxPower );
 800b83c:	78ac      	ldrb	r4, [r5, #2]
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, NvmCtx.Bands[NvmCtx.Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, NvmCtx.ChannelsMask );
 800b83e:	1841      	adds	r1, r0, r1
 800b840:	7a49      	ldrb	r1, [r1, #9]
    txPowerResult =  MAX( txPower, maxBandTxPower );
 800b842:	b266      	sxtb	r6, r4
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, NvmCtx.Bands[NvmCtx.Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, NvmCtx.ChannelsMask );
 800b844:	310c      	adds	r1, #12
 800b846:	0109      	lsls	r1, r1, #4
 800b848:	1841      	adds	r1, r0, r1
    txPowerResult =  MAX( txPower, maxBandTxPower );
 800b84a:	7889      	ldrb	r1, [r1, #2]
 800b84c:	1c08      	adds	r0, r1, #0
 800b84e:	b249      	sxtb	r1, r1
 800b850:	42b1      	cmp	r1, r6
 800b852:	da00      	bge.n	800b856 <RegionAS923TxConfig+0x3a>
 800b854:	1c20      	adds	r0, r4, #0
    switch( BandwidthsAS923[drIndex] )
 800b856:	0092      	lsls	r2, r2, #2
 800b858:	189b      	adds	r3, r3, r2
 800b85a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b85c:	4a2f      	ldr	r2, [pc, #188]	; (800b91c <RegionAS923TxConfig+0x100>)
    txPowerResult =  MAX( txPower, maxBandTxPower );
 800b85e:	b241      	sxtb	r1, r0
 800b860:	910b      	str	r1, [sp, #44]	; 0x2c
            return 1;
 800b862:	2701      	movs	r7, #1
    switch( BandwidthsAS923[drIndex] )
 800b864:	4293      	cmp	r3, r2
 800b866:	d004      	beq.n	800b872 <RegionAS923TxConfig+0x56>
            return 0;
 800b868:	4a2d      	ldr	r2, [pc, #180]	; (800b920 <RegionAS923TxConfig+0x104>)
 800b86a:	189b      	adds	r3, r3, r2
 800b86c:	425f      	negs	r7, r3
 800b86e:	415f      	adcs	r7, r3
 800b870:	007f      	lsls	r7, r7, #1
    uint32_t bandwidth = GetBandwidth( txConfig->Datarate );
    int8_t phyTxPower = 0;

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 800b872:	68aa      	ldr	r2, [r5, #8]
 800b874:	6869      	ldr	r1, [r5, #4]
 800b876:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800b878:	f000 fcc0 	bl	800c1fc <RegionCommonComputeTxPower>

    // Setup the radio frequency
    Radio.SetChannel( NvmCtx.Channels[txConfig->Channel].Frequency );
 800b87c:	230c      	movs	r3, #12
 800b87e:	4c29      	ldr	r4, [pc, #164]	; (800b924 <RegionAS923TxConfig+0x108>)
 800b880:	782a      	ldrb	r2, [r5, #0]
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 800b882:	900d      	str	r0, [sp, #52]	; 0x34
    Radio.SetChannel( NvmCtx.Channels[txConfig->Channel].Frequency );
 800b884:	4353      	muls	r3, r2
 800b886:	6962      	ldr	r2, [r4, #20]
 800b888:	920c      	str	r2, [sp, #48]	; 0x30
 800b88a:	4a23      	ldr	r2, [pc, #140]	; (800b918 <RegionAS923TxConfig+0xfc>)
 800b88c:	5898      	ldr	r0, [r3, r2]
 800b88e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b890:	4798      	blx	r3
 800b892:	6a63      	ldr	r3, [r4, #36]	; 0x24

    if( txConfig->Datarate == DR_7 )
 800b894:	2201      	movs	r2, #1
 800b896:	930c      	str	r3, [sp, #48]	; 0x30
 800b898:	23fa      	movs	r3, #250	; 0xfa
 800b89a:	2400      	movs	r4, #0
 800b89c:	56aa      	ldrsb	r2, [r5, r2]
 800b89e:	011b      	lsls	r3, r3, #4
    { // High Speed FSK channel
        modem = MODEM_FSK;
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 800b8a0:	9308      	str	r3, [sp, #32]
 800b8a2:	9407      	str	r4, [sp, #28]
 800b8a4:	9406      	str	r4, [sp, #24]
 800b8a6:	9405      	str	r4, [sp, #20]
    if( txConfig->Datarate == DR_7 )
 800b8a8:	2a07      	cmp	r2, #7
 800b8aa:	d123      	bne.n	800b8f4 <RegionAS923TxConfig+0xd8>
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 800b8ac:	2301      	movs	r3, #1
 800b8ae:	9304      	str	r3, [sp, #16]
 800b8b0:	3304      	adds	r3, #4
 800b8b2:	9302      	str	r3, [sp, #8]
 800b8b4:	23fa      	movs	r3, #250	; 0xfa
 800b8b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b8b8:	009b      	lsls	r3, r3, #2
 800b8ba:	4353      	muls	r3, r2
 800b8bc:	9403      	str	r4, [sp, #12]
 800b8be:	9300      	str	r3, [sp, #0]
 800b8c0:	9401      	str	r4, [sp, #4]
 800b8c2:	003b      	movs	r3, r7
 800b8c4:	4a18      	ldr	r2, [pc, #96]	; (800b928 <RegionAS923TxConfig+0x10c>)
 800b8c6:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b8c8:	0020      	movs	r0, r4
 800b8ca:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800b8cc:	47b0      	blx	r6
        modem = MODEM_LORA;
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
    }
    TVL1( PRINTF( "TX on freq %d Hz at DR %d\n\r", NvmCtx.Channels[txConfig->Channel].Frequency, txConfig->Datarate );)
    // Setup maximum payload lenght of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 800b8ce:	4e15      	ldr	r6, [pc, #84]	; (800b924 <RegionAS923TxConfig+0x108>)
 800b8d0:	7b29      	ldrb	r1, [r5, #12]
 800b8d2:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 800b8d4:	0020      	movs	r0, r4
 800b8d6:	930a      	str	r3, [sp, #40]	; 0x28
 800b8d8:	4798      	blx	r3
    // Get the time-on-air of the next tx frame
    *txTimeOnAir = Radio.TimeOnAir( modem, txConfig->PktLen );
 800b8da:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800b8dc:	7b29      	ldrb	r1, [r5, #12]
 800b8de:	0020      	movs	r0, r4
 800b8e0:	930a      	str	r3, [sp, #40]	; 0x28
 800b8e2:	4798      	blx	r3
 800b8e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c

    *txPower = txPowerLimited;
 800b8e6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    *txTimeOnAir = Radio.TimeOnAir( modem, txConfig->PktLen );
 800b8e8:	6018      	str	r0, [r3, #0]
    return true;
}
 800b8ea:	2001      	movs	r0, #1
    *txPower = txPowerLimited;
 800b8ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b8ee:	701a      	strb	r2, [r3, #0]
}
 800b8f0:	b011      	add	sp, #68	; 0x44
 800b8f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 800b8f4:	2308      	movs	r3, #8
 800b8f6:	2601      	movs	r6, #1
 800b8f8:	9302      	str	r3, [sp, #8]
 800b8fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b8fc:	9403      	str	r4, [sp, #12]
 800b8fe:	9300      	str	r3, [sp, #0]
 800b900:	0022      	movs	r2, r4
 800b902:	9604      	str	r6, [sp, #16]
 800b904:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800b906:	9601      	str	r6, [sp, #4]
 800b908:	003b      	movs	r3, r7
 800b90a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b90c:	0030      	movs	r0, r6
 800b90e:	47a0      	blx	r4
        modem = MODEM_LORA;
 800b910:	0034      	movs	r4, r6
 800b912:	e7dc      	b.n	800b8ce <RegionAS923TxConfig+0xb2>
 800b914:	0800fa54 	.word	0x0800fa54
 800b918:	20000f74 	.word	0x20000f74
 800b91c:	0003d090 	.word	0x0003d090
 800b920:	fff85ee0 	.word	0xfff85ee0
 800b924:	0800f5a4 	.word	0x0800f5a4
 800b928:	000061a8 	.word	0x000061a8

0800b92c <RegionAS923LinkAdrReq>:

uint8_t RegionAS923LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800b92c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b92e:	0005      	movs	r5, r0
    uint8_t status = 0x07;
    RegionCommonLinkAdrParams_t linkAdrParams;
    uint8_t nextIndex = 0;
    uint8_t bytesProcessed = 0;
    uint16_t chMask = 0;
 800b930:	2000      	movs	r0, #0
    uint8_t status = 0x07;
 800b932:	2407      	movs	r4, #7
        chMask = linkAdrParams.ChMask;

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
        {
            status &= 0xFE; // Channel mask KO
 800b934:	2706      	movs	r7, #6
{
 800b936:	b095      	sub	sp, #84	; 0x54
 800b938:	9305      	str	r3, [sp, #20]
    uint16_t chMask = 0;
 800b93a:	ab06      	add	r3, sp, #24
{
 800b93c:	9103      	str	r1, [sp, #12]
 800b93e:	9204      	str	r2, [sp, #16]
    uint16_t chMask = 0;
 800b940:	80d8      	strh	r0, [r3, #6]
    uint8_t bytesProcessed = 0;
 800b942:	9001      	str	r0, [sp, #4]
    while( bytesProcessed < linkAdrReq->PayloadSize )
 800b944:	7a2b      	ldrb	r3, [r5, #8]
 800b946:	9a01      	ldr	r2, [sp, #4]
 800b948:	4293      	cmp	r3, r2
 800b94a:	d908      	bls.n	800b95e <RegionAS923LinkAdrReq+0x32>
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 800b94c:	686b      	ldr	r3, [r5, #4]
 800b94e:	9a01      	ldr	r2, [sp, #4]
 800b950:	ae0a      	add	r6, sp, #40	; 0x28
 800b952:	1898      	adds	r0, r3, r2
 800b954:	0031      	movs	r1, r6
 800b956:	f000 fb6f 	bl	800c038 <RegionCommonParseLinkAdrReq>
        if( nextIndex == 0 )
 800b95a:	2800      	cmp	r0, #0
 800b95c:	d148      	bne.n	800b9f0 <RegionAS923LinkAdrReq+0xc4>
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 800b95e:	2302      	movs	r3, #2
 800b960:	a808      	add	r0, sp, #32
 800b962:	7003      	strb	r3, [r0, #0]
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 800b964:	7a6b      	ldrb	r3, [r5, #9]
    phyParam = RegionAS923GetPhyParam( &getPhy );

    linkAdrVerifyParams.Status = status;
 800b966:	ae0c      	add	r6, sp, #48	; 0x30
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 800b968:	7083      	strb	r3, [r0, #2]
    phyParam = RegionAS923GetPhyParam( &getPhy );
 800b96a:	f7ff fd55 	bl	800b418 <RegionAS923GetPhyParam>
    linkAdrVerifyParams.Status = status;
 800b96e:	7134      	strb	r4, [r6, #4]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 800b970:	7aab      	ldrb	r3, [r5, #10]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 800b972:	ac0a      	add	r4, sp, #40	; 0x28
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 800b974:	7173      	strb	r3, [r6, #5]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 800b976:	7863      	ldrb	r3, [r4, #1]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
    linkAdrVerifyParams.NbChannels = AS923_MAX_NB_CHANNELS;
    linkAdrVerifyParams.ChannelsMask = &chMask;
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
    linkAdrVerifyParams.MaxDatarate = AS923_TX_MAX_DATARATE;
    linkAdrVerifyParams.Channels = NvmCtx.Channels;
 800b978:	4a3c      	ldr	r2, [pc, #240]	; (800ba6c <RegionAS923LinkAdrReq+0x140>)
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 800b97a:	71b3      	strb	r3, [r6, #6]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 800b97c:	78a3      	ldrb	r3, [r4, #2]
    linkAdrVerifyParams.MinTxPower = AS923_MIN_TX_POWER;
    linkAdrVerifyParams.MaxTxPower = AS923_MAX_TX_POWER;
    linkAdrVerifyParams.Version = linkAdrReq->Version;

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800b97e:	a906      	add	r1, sp, #24
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 800b980:	71f3      	strb	r3, [r6, #7]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 800b982:	7823      	ldrb	r3, [r4, #0]
 800b984:	7233      	strb	r3, [r6, #8]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 800b986:	7aeb      	ldrb	r3, [r5, #11]
 800b988:	7273      	strb	r3, [r6, #9]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 800b98a:	7b2b      	ldrb	r3, [r5, #12]
 800b98c:	72b3      	strb	r3, [r6, #10]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 800b98e:	7b6b      	ldrb	r3, [r5, #13]
    linkAdrVerifyParams.Channels = NvmCtx.Channels;
 800b990:	9212      	str	r2, [sp, #72]	; 0x48
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 800b992:	72f3      	strb	r3, [r6, #11]
    linkAdrVerifyParams.NbChannels = AS923_MAX_NB_CHANNELS;
 800b994:	2310      	movs	r3, #16
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800b996:	2212      	movs	r2, #18
    linkAdrVerifyParams.NbChannels = AS923_MAX_NB_CHANNELS;
 800b998:	7333      	strb	r3, [r6, #12]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 800b99a:	ab06      	add	r3, sp, #24
 800b99c:	1d9f      	adds	r7, r3, #6
    linkAdrVerifyParams.MaxDatarate = AS923_TX_MAX_DATARATE;
 800b99e:	2307      	movs	r3, #7
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800b9a0:	1852      	adds	r2, r2, r1
 800b9a2:	2111      	movs	r1, #17
    linkAdrVerifyParams.MaxDatarate = AS923_TX_MAX_DATARATE;
 800b9a4:	7573      	strb	r3, [r6, #21]
    linkAdrVerifyParams.MinTxPower = AS923_MIN_TX_POWER;
 800b9a6:	83b3      	strh	r3, [r6, #28]
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 800b9a8:	682b      	ldr	r3, [r5, #0]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 800b9aa:	7530      	strb	r0, [r6, #20]
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800b9ac:	a806      	add	r0, sp, #24
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 800b9ae:	930c      	str	r3, [sp, #48]	; 0x30
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800b9b0:	1809      	adds	r1, r1, r0
 800b9b2:	0023      	movs	r3, r4
 800b9b4:	0030      	movs	r0, r6
    linkAdrVerifyParams.ChannelsMask = &chMask;
 800b9b6:	9710      	str	r7, [sp, #64]	; 0x40
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800b9b8:	f000 fb59 	bl	800c06e <RegionCommonLinkAdrReqVerifyParams>
 800b9bc:	0005      	movs	r5, r0

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 800b9be:	2807      	cmp	r0, #7
 800b9c0:	d107      	bne.n	800b9d2 <RegionAS923LinkAdrReq+0xa6>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) NvmCtx.ChannelsMask, 0, sizeof( NvmCtx.ChannelsMask ) );
 800b9c2:	4e2b      	ldr	r6, [pc, #172]	; (800ba70 <RegionAS923LinkAdrReq+0x144>)
 800b9c4:	2202      	movs	r2, #2
 800b9c6:	2100      	movs	r1, #0
 800b9c8:	0030      	movs	r0, r6
 800b9ca:	f001 fb21 	bl	800d010 <memset1>
        // Update the channels mask
        NvmCtx.ChannelsMask[0] = chMask;
 800b9ce:	883b      	ldrh	r3, [r7, #0]
 800b9d0:	8033      	strh	r3, [r6, #0]
    *txPowOut = linkAdrParams.TxPower;
    *nbRepOut = linkAdrParams.NbRep;
    *nbBytesParsed = bytesProcessed;

    return status;
}
 800b9d2:	0028      	movs	r0, r5
    *drOut = linkAdrParams.Datarate;
 800b9d4:	7863      	ldrb	r3, [r4, #1]
 800b9d6:	9a03      	ldr	r2, [sp, #12]
 800b9d8:	7013      	strb	r3, [r2, #0]
    *txPowOut = linkAdrParams.TxPower;
 800b9da:	78a3      	ldrb	r3, [r4, #2]
 800b9dc:	9a04      	ldr	r2, [sp, #16]
 800b9de:	7013      	strb	r3, [r2, #0]
    *nbRepOut = linkAdrParams.NbRep;
 800b9e0:	7823      	ldrb	r3, [r4, #0]
 800b9e2:	9a05      	ldr	r2, [sp, #20]
 800b9e4:	7013      	strb	r3, [r2, #0]
    *nbBytesParsed = bytesProcessed;
 800b9e6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800b9e8:	9a01      	ldr	r2, [sp, #4]
 800b9ea:	701a      	strb	r2, [r3, #0]
}
 800b9ec:	b015      	add	sp, #84	; 0x54
 800b9ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
        bytesProcessed += nextIndex;
 800b9f0:	9b01      	ldr	r3, [sp, #4]
 800b9f2:	1818      	adds	r0, r3, r0
 800b9f4:	b2c3      	uxtb	r3, r0
 800b9f6:	9301      	str	r3, [sp, #4]
        chMask = linkAdrParams.ChMask;
 800b9f8:	88b2      	ldrh	r2, [r6, #4]
 800b9fa:	ab06      	add	r3, sp, #24
 800b9fc:	80da      	strh	r2, [r3, #6]
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 800b9fe:	78f1      	ldrb	r1, [r6, #3]
 800ba00:	2900      	cmp	r1, #0
 800ba02:	d102      	bne.n	800ba0a <RegionAS923LinkAdrReq+0xde>
            status &= 0xFE; // Channel mask KO
 800ba04:	003c      	movs	r4, r7
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 800ba06:	2a00      	cmp	r2, #0
 800ba08:	d09c      	beq.n	800b944 <RegionAS923LinkAdrReq+0x18>
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 800ba0a:	1e4b      	subs	r3, r1, #1
            status &= 0xFE; // Channel mask KO
 800ba0c:	003c      	movs	r4, r7
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 800ba0e:	2b04      	cmp	r3, #4
 800ba10:	d998      	bls.n	800b944 <RegionAS923LinkAdrReq+0x18>
 800ba12:	2906      	cmp	r1, #6
 800ba14:	d900      	bls.n	800ba18 <RegionAS923LinkAdrReq+0xec>
 800ba16:	e795      	b.n	800b944 <RegionAS923LinkAdrReq+0x18>
 800ba18:	2300      	movs	r3, #0
        status = 0x07;
 800ba1a:	2407      	movs	r4, #7
 800ba1c:	9302      	str	r3, [sp, #8]
                if( linkAdrParams.ChMaskCtrl == 6 )
 800ba1e:	2906      	cmp	r1, #6
 800ba20:	d117      	bne.n	800ba52 <RegionAS923LinkAdrReq+0x126>
                    if( NvmCtx.Channels[i].Frequency != 0 )
 800ba22:	4e12      	ldr	r6, [pc, #72]	; (800ba6c <RegionAS923LinkAdrReq+0x140>)
 800ba24:	46b4      	mov	ip, r6
 800ba26:	260c      	movs	r6, #12
 800ba28:	4660      	mov	r0, ip
 800ba2a:	435e      	muls	r6, r3
 800ba2c:	5986      	ldr	r6, [r0, r6]
 800ba2e:	2e00      	cmp	r6, #0
 800ba30:	d005      	beq.n	800ba3e <RegionAS923LinkAdrReq+0x112>
                        chMask |= 1 << i;
 800ba32:	2601      	movs	r6, #1
 800ba34:	409e      	lsls	r6, r3
 800ba36:	2001      	movs	r0, #1
 800ba38:	4332      	orrs	r2, r6
 800ba3a:	b292      	uxth	r2, r2
 800ba3c:	9002      	str	r0, [sp, #8]
 800ba3e:	3301      	adds	r3, #1
            for( uint8_t i = 0; i < AS923_MAX_NB_CHANNELS; i++ )
 800ba40:	2b10      	cmp	r3, #16
 800ba42:	d1ec      	bne.n	800ba1e <RegionAS923LinkAdrReq+0xf2>
 800ba44:	9b02      	ldr	r3, [sp, #8]
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d100      	bne.n	800ba4c <RegionAS923LinkAdrReq+0x120>
 800ba4a:	e77b      	b.n	800b944 <RegionAS923LinkAdrReq+0x18>
 800ba4c:	ab06      	add	r3, sp, #24
 800ba4e:	80da      	strh	r2, [r3, #6]
 800ba50:	e778      	b.n	800b944 <RegionAS923LinkAdrReq+0x18>
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 800ba52:	0016      	movs	r6, r2
 800ba54:	2001      	movs	r0, #1
 800ba56:	411e      	asrs	r6, r3
 800ba58:	4206      	tst	r6, r0
 800ba5a:	d0f0      	beq.n	800ba3e <RegionAS923LinkAdrReq+0x112>
 800ba5c:	260c      	movs	r6, #12
 800ba5e:	435e      	muls	r6, r3
 800ba60:	4802      	ldr	r0, [pc, #8]	; (800ba6c <RegionAS923LinkAdrReq+0x140>)
 800ba62:	5986      	ldr	r6, [r0, r6]
 800ba64:	2e00      	cmp	r6, #0
 800ba66:	d1ea      	bne.n	800ba3e <RegionAS923LinkAdrReq+0x112>
                        status &= 0xFE; // Channel mask KO
 800ba68:	003c      	movs	r4, r7
 800ba6a:	e7e8      	b.n	800ba3e <RegionAS923LinkAdrReq+0x112>
 800ba6c:	20000f74 	.word	0x20000f74
 800ba70:	20001044 	.word	0x20001044

0800ba74 <RegionAS923RxParamSetupReq>:

uint8_t RegionAS923RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 800ba74:	b570      	push	{r4, r5, r6, lr}
 800ba76:	0005      	movs	r5, r0
    uint8_t status = 0x07;

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 800ba78:	6840      	ldr	r0, [r0, #4]
 800ba7a:	f7ff fcb7 	bl	800b3ec <VerifyRfFreq>
    {
        status &= 0xFE; // Channel frequency KO
 800ba7e:	0004      	movs	r4, r0
 800ba80:	1e60      	subs	r0, r4, #1
 800ba82:	4184      	sbcs	r4, r0
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, AS923_RX_MIN_DATARATE, AS923_RX_MAX_DATARATE ) == false )
 800ba84:	2000      	movs	r0, #0
 800ba86:	2207      	movs	r2, #7
 800ba88:	5628      	ldrsb	r0, [r5, r0]
 800ba8a:	2100      	movs	r1, #0
        status &= 0xFE; // Channel frequency KO
 800ba8c:	3406      	adds	r4, #6
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, AS923_RX_MIN_DATARATE, AS923_RX_MAX_DATARATE ) == false )
 800ba8e:	f000 fa46 	bl	800bf1e <RegionCommonValueInRange>
 800ba92:	2800      	cmp	r0, #0
 800ba94:	d101      	bne.n	800ba9a <RegionAS923RxParamSetupReq+0x26>
    {
        status &= 0xFD; // Datarate KO
 800ba96:	2302      	movs	r3, #2
 800ba98:	439c      	bics	r4, r3
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, AS923_MIN_RX1_DR_OFFSET, AS923_MAX_RX1_DR_OFFSET ) == false )
 800ba9a:	2001      	movs	r0, #1
 800ba9c:	2207      	movs	r2, #7
 800ba9e:	5628      	ldrsb	r0, [r5, r0]
 800baa0:	2100      	movs	r1, #0
 800baa2:	f000 fa3c 	bl	800bf1e <RegionCommonValueInRange>
 800baa6:	2800      	cmp	r0, #0
 800baa8:	d101      	bne.n	800baae <RegionAS923RxParamSetupReq+0x3a>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 800baaa:	2304      	movs	r3, #4
 800baac:	439c      	bics	r4, r3
    }

    return status;
}
 800baae:	0020      	movs	r0, r4
 800bab0:	bd70      	pop	{r4, r5, r6, pc}

0800bab2 <RegionAS923TxParamSetupReq>:

int8_t RegionAS923TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
    // Accept the request
    return 0;
}
 800bab2:	2000      	movs	r0, #0
 800bab4:	4770      	bx	lr
	...

0800bab8 <RegionAS923DlChannelReq>:

uint8_t RegionAS923DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 800bab8:	b510      	push	{r4, lr}
 800baba:	0004      	movs	r4, r0
    uint8_t status = 0x03;

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency ) == false )
 800babc:	6840      	ldr	r0, [r0, #4]
 800babe:	f7ff fc95 	bl	800b3ec <VerifyRfFreq>
    {
        status &= 0xFE;
    }

    // Verify if an uplink frequency exists
    if( NvmCtx.Channels[dlChannelReq->ChannelId].Frequency == 0 )
 800bac2:	220c      	movs	r2, #12
        status &= 0xFE;
 800bac4:	1e43      	subs	r3, r0, #1
 800bac6:	4198      	sbcs	r0, r3
    if( NvmCtx.Channels[dlChannelReq->ChannelId].Frequency == 0 )
 800bac8:	7821      	ldrb	r1, [r4, #0]
 800baca:	4b08      	ldr	r3, [pc, #32]	; (800baec <RegionAS923DlChannelReq+0x34>)
 800bacc:	434a      	muls	r2, r1
 800bace:	58d1      	ldr	r1, [r2, r3]
        status &= 0xFE;
 800bad0:	3002      	adds	r0, #2
    if( NvmCtx.Channels[dlChannelReq->ChannelId].Frequency == 0 )
 800bad2:	2900      	cmp	r1, #0
 800bad4:	d102      	bne.n	800badc <RegionAS923DlChannelReq+0x24>
    {
        status &= 0xFD;
 800bad6:	2302      	movs	r3, #2
 800bad8:	4398      	bics	r0, r3
    {
        NvmCtx.Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
    }

    return status;
}
 800bada:	bd10      	pop	{r4, pc}
    if( status == 0x03 )
 800badc:	2803      	cmp	r0, #3
 800bade:	d103      	bne.n	800bae8 <RegionAS923DlChannelReq+0x30>
        NvmCtx.Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 800bae0:	189b      	adds	r3, r3, r2
 800bae2:	6862      	ldr	r2, [r4, #4]
 800bae4:	605a      	str	r2, [r3, #4]
 800bae6:	e7f8      	b.n	800bada <RegionAS923DlChannelReq+0x22>
 800bae8:	2002      	movs	r0, #2
 800baea:	e7f6      	b.n	800bada <RegionAS923DlChannelReq+0x22>
 800baec:	20000f74 	.word	0x20000f74

0800baf0 <RegionAS923AlternateDr>:

int8_t RegionAS923AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
    // Only AS923_DWELL_LIMIT_DATARATE is supported
    return AS923_DWELL_LIMIT_DATARATE;
}
 800baf0:	2002      	movs	r0, #2
 800baf2:	4770      	bx	lr

0800baf4 <RegionAS923CalcBackOff>:

void RegionAS923CalcBackOff( CalcBackOffParams_t* calcBackOff )
{
 800baf4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    RegionCommonCalcBackOffParams_t calcBackOffParams;

    calcBackOffParams.Channels = NvmCtx.Channels;
 800baf6:	4a0b      	ldr	r2, [pc, #44]	; (800bb24 <RegionAS923CalcBackOff+0x30>)
 800baf8:	ab01      	add	r3, sp, #4
 800bafa:	9201      	str	r2, [sp, #4]
    calcBackOffParams.Bands = NvmCtx.Bands;
 800bafc:	4a0a      	ldr	r2, [pc, #40]	; (800bb28 <RegionAS923CalcBackOff+0x34>)
 800bafe:	9202      	str	r2, [sp, #8]
    calcBackOffParams.LastTxIsJoinRequest = calcBackOff->LastTxIsJoinRequest;
 800bb00:	7842      	ldrb	r2, [r0, #1]
 800bb02:	721a      	strb	r2, [r3, #8]
    calcBackOffParams.Joined = calcBackOff->Joined;
 800bb04:	7802      	ldrb	r2, [r0, #0]
 800bb06:	725a      	strb	r2, [r3, #9]
    calcBackOffParams.DutyCycleEnabled = calcBackOff->DutyCycleEnabled;
 800bb08:	7882      	ldrb	r2, [r0, #2]
 800bb0a:	729a      	strb	r2, [r3, #10]
    calcBackOffParams.Channel = calcBackOff->Channel;
 800bb0c:	78c2      	ldrb	r2, [r0, #3]
 800bb0e:	72da      	strb	r2, [r3, #11]
    calcBackOffParams.ElapsedTime = calcBackOff->ElapsedTime;
 800bb10:	6842      	ldr	r2, [r0, #4]
 800bb12:	9204      	str	r2, [sp, #16]
    calcBackOffParams.TxTimeOnAir = calcBackOff->TxTimeOnAir;
 800bb14:	6882      	ldr	r2, [r0, #8]

    RegionCommonCalcBackOff( &calcBackOffParams );
 800bb16:	0018      	movs	r0, r3
    calcBackOffParams.TxTimeOnAir = calcBackOff->TxTimeOnAir;
 800bb18:	9205      	str	r2, [sp, #20]
    RegionCommonCalcBackOff( &calcBackOffParams );
 800bb1a:	f000 fb84 	bl	800c226 <RegionCommonCalcBackOff>
}
 800bb1e:	b007      	add	sp, #28
 800bb20:	bd00      	pop	{pc}
 800bb22:	46c0      	nop			; (mov r8, r8)
 800bb24:	20000f74 	.word	0x20000f74
 800bb28:	20001034 	.word	0x20001034

0800bb2c <RegionAS923NextChannel>:

LoRaMacStatus_t RegionAS923NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800bb2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb2e:	b08b      	sub	sp, #44	; 0x2c
 800bb30:	9104      	str	r1, [sp, #16]
 800bb32:	9200      	str	r2, [sp, #0]
    uint8_t channelNext = 0;
    uint8_t nbEnabledChannels = 0;
    uint8_t delayTx = 0;
    uint8_t enabledChannels[AS923_MAX_NB_CHANNELS] = { 0 };
 800bb34:	2100      	movs	r1, #0
 800bb36:	2210      	movs	r2, #16
{
 800bb38:	0005      	movs	r5, r0
    uint8_t enabledChannels[AS923_MAX_NB_CHANNELS] = { 0 };
 800bb3a:	a806      	add	r0, sp, #24
{
 800bb3c:	001e      	movs	r6, r3
    uint8_t enabledChannels[AS923_MAX_NB_CHANNELS] = { 0 };
 800bb3e:	f002 ff80 	bl	800ea42 <memset>
    TimerTime_t nextTxDelay = 0;

    if( RegionCommonCountChannels( NvmCtx.ChannelsMask, 0, 1 ) == 0 )
 800bb42:	4c4f      	ldr	r4, [pc, #316]	; (800bc80 <RegionAS923NextChannel+0x154>)
 800bb44:	2201      	movs	r2, #1
 800bb46:	2100      	movs	r1, #0
 800bb48:	0020      	movs	r0, r4
 800bb4a:	f000 fa07 	bl	800bf5c <RegionCommonCountChannels>
 800bb4e:	2800      	cmp	r0, #0
 800bb50:	d103      	bne.n	800bb5a <RegionAS923NextChannel+0x2e>
    { // Reactivate default channels
        NvmCtx.ChannelsMask[0] |= LC( 1 ) + LC( 2 );
 800bb52:	2303      	movs	r3, #3
 800bb54:	8822      	ldrh	r2, [r4, #0]
 800bb56:	4313      	orrs	r3, r2
 800bb58:	8023      	strh	r3, [r4, #0]
    }

    TimerTime_t elapsed = TimerGetElapsedTime( nextChanParams->LastAggrTx );
 800bb5a:	6868      	ldr	r0, [r5, #4]
 800bb5c:	f001 f995 	bl	800ce8a <TimerGetElapsedTime>
    if( ( nextChanParams->LastAggrTx == 0 ) || ( nextChanParams->AggrTimeOff <= elapsed ) )
 800bb60:	686b      	ldr	r3, [r5, #4]
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d003      	beq.n	800bb6e <RegionAS923NextChannel+0x42>
 800bb66:	682f      	ldr	r7, [r5, #0]
 800bb68:	4287      	cmp	r7, r0
 800bb6a:	d900      	bls.n	800bb6e <RegionAS923NextChannel+0x42>
 800bb6c:	e06e      	b.n	800bc4c <RegionAS923NextChannel+0x120>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 800bb6e:	2400      	movs	r4, #0
 800bb70:	6034      	str	r4, [r6, #0]

        // Update bands Time OFF
        nextTxDelay = RegionCommonUpdateBandTimeOff( nextChanParams->Joined, nextChanParams->DutyCycleEnabled, NvmCtx.Bands, AS923_MAX_NB_BANDS );
 800bb72:	2301      	movs	r3, #1
 800bb74:	7aa9      	ldrb	r1, [r5, #10]
 800bb76:	7a68      	ldrb	r0, [r5, #9]
 800bb78:	4a42      	ldr	r2, [pc, #264]	; (800bc84 <RegionAS923NextChannel+0x158>)
 800bb7a:	f000 fa23 	bl	800bfc4 <RegionCommonUpdateBandTimeOff>
 800bb7e:	9001      	str	r0, [sp, #4]

        // Search how many channels are enabled
        nbEnabledChannels = CountNbOfEnabledChannels( nextChanParams->Joined, nextChanParams->Datarate,
 800bb80:	7a6b      	ldrb	r3, [r5, #9]
    uint8_t delayTransmission = 0;
 800bb82:	0026      	movs	r6, r4
        nbEnabledChannels = CountNbOfEnabledChannels( nextChanParams->Joined, nextChanParams->Datarate,
 800bb84:	9302      	str	r3, [sp, #8]
 800bb86:	2308      	movs	r3, #8
    uint8_t nbEnabledChannels = 0;
 800bb88:	0027      	movs	r7, r4
        nbEnabledChannels = CountNbOfEnabledChannels( nextChanParams->Joined, nextChanParams->Datarate,
 800bb8a:	56eb      	ldrsb	r3, [r5, r3]
 800bb8c:	9303      	str	r3, [sp, #12]
 800bb8e:	b2e3      	uxtb	r3, r4
 800bb90:	9305      	str	r3, [sp, #20]
            if( ( channelsMask[k] & ( 1 << j ) ) != 0 )
 800bb92:	4b3d      	ldr	r3, [pc, #244]	; (800bc88 <RegionAS923NextChannel+0x15c>)
 800bb94:	2101      	movs	r1, #1
 800bb96:	001a      	movs	r2, r3
 800bb98:	32d0      	adds	r2, #208	; 0xd0
 800bb9a:	8812      	ldrh	r2, [r2, #0]
 800bb9c:	4122      	asrs	r2, r4
 800bb9e:	420a      	tst	r2, r1
 800bba0:	d129      	bne.n	800bbf6 <RegionAS923NextChannel+0xca>
 800bba2:	3401      	adds	r4, #1
        for( uint8_t j = 0; j < 16; j++ )
 800bba4:	2c10      	cmp	r4, #16
 800bba6:	d1f2      	bne.n	800bb8e <RegionAS923NextChannel+0x62>
    {
        delayTx++;
        nextTxDelay = nextChanParams->AggrTimeOff - elapsed;
    }

    if( nbEnabledChannels > 0 )
 800bba8:	2f00      	cmp	r7, #0
 800bbaa:	d05c      	beq.n	800bc66 <RegionAS923NextChannel+0x13a>
    {
        for( uint8_t  i = 0, j = randr( 0, nbEnabledChannels - 1 ); i < AS923_MAX_NB_CHANNELS; i++ )
 800bbac:	1e79      	subs	r1, r7, #1
 800bbae:	2000      	movs	r0, #0
 800bbb0:	f001 fa0e 	bl	800cfd0 <randr>
            channelNext = enabledChannels[j];
            j = ( j + 1 ) % nbEnabledChannels;

            // Perform carrier sense for AS923_CARRIER_SENSE_TIME
            // If the channel is free, we can stop the LBT mechanism
            if( Radio.IsChannelFree( MODEM_LORA, NvmCtx.Channels[channelNext].Frequency, AS923_RSSI_FREE_TH, AS923_CARRIER_SENSE_TIME ) == true )
 800bbb4:	4b35      	ldr	r3, [pc, #212]	; (800bc8c <RegionAS923NextChannel+0x160>)
        for( uint8_t  i = 0, j = randr( 0, nbEnabledChannels - 1 ); i < AS923_MAX_NB_CHANNELS; i++ )
 800bbb6:	b2c5      	uxtb	r5, r0
            if( Radio.IsChannelFree( MODEM_LORA, NvmCtx.Channels[channelNext].Frequency, AS923_RSSI_FREE_TH, AS923_CARRIER_SENSE_TIME ) == true )
 800bbb8:	699b      	ldr	r3, [r3, #24]
 800bbba:	9302      	str	r3, [sp, #8]
            channelNext = enabledChannels[j];
 800bbbc:	ab06      	add	r3, sp, #24
 800bbbe:	5d5b      	ldrb	r3, [r3, r5]
            j = ( j + 1 ) % nbEnabledChannels;
 800bbc0:	1c68      	adds	r0, r5, #1
 800bbc2:	0039      	movs	r1, r7
            channelNext = enabledChannels[j];
 800bbc4:	9301      	str	r3, [sp, #4]
            j = ( j + 1 ) % nbEnabledChannels;
 800bbc6:	f7f4 fc3f 	bl	8000448 <__aeabi_idivmod>
            if( Radio.IsChannelFree( MODEM_LORA, NvmCtx.Channels[channelNext].Frequency, AS923_RSSI_FREE_TH, AS923_CARRIER_SENSE_TIME ) == true )
 800bbca:	200c      	movs	r0, #12
 800bbcc:	2255      	movs	r2, #85	; 0x55
 800bbce:	9b01      	ldr	r3, [sp, #4]
            j = ( j + 1 ) % nbEnabledChannels;
 800bbd0:	b2cd      	uxtb	r5, r1
            if( Radio.IsChannelFree( MODEM_LORA, NvmCtx.Channels[channelNext].Frequency, AS923_RSSI_FREE_TH, AS923_CARRIER_SENSE_TIME ) == true )
 800bbd2:	4358      	muls	r0, r3
 800bbd4:	492c      	ldr	r1, [pc, #176]	; (800bc88 <RegionAS923NextChannel+0x15c>)
 800bbd6:	2306      	movs	r3, #6
 800bbd8:	5841      	ldr	r1, [r0, r1]
 800bbda:	4252      	negs	r2, r2
 800bbdc:	2001      	movs	r0, #1
 800bbde:	9e02      	ldr	r6, [sp, #8]
 800bbe0:	47b0      	blx	r6
 800bbe2:	2800      	cmp	r0, #0
 800bbe4:	d039      	beq.n	800bc5a <RegionAS923NextChannel+0x12e>
            {
                // Free channel found
                *channel = channelNext;
                *time = 0;
 800bbe6:	2000      	movs	r0, #0
                *channel = channelNext;
 800bbe8:	9b04      	ldr	r3, [sp, #16]
 800bbea:	9a01      	ldr	r2, [sp, #4]
 800bbec:	701a      	strb	r2, [r3, #0]
                *time = 0;
 800bbee:	9b00      	ldr	r3, [sp, #0]
 800bbf0:	6018      	str	r0, [r3, #0]
        // Datarate not supported by any channel, restore defaults
        NvmCtx.ChannelsMask[0] |= LC( 1 ) + LC( 2 );
        *time = 0;
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
    }
}
 800bbf2:	b00b      	add	sp, #44	; 0x2c
 800bbf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bbf6:	250c      	movs	r5, #12
 800bbf8:	4365      	muls	r5, r4
 800bbfa:	18eb      	adds	r3, r5, r3
                if( channels[i + j].Frequency == 0 )
 800bbfc:	681a      	ldr	r2, [r3, #0]
 800bbfe:	2a00      	cmp	r2, #0
 800bc00:	d0cf      	beq.n	800bba2 <RegionAS923NextChannel+0x76>
                if( joined == false )
 800bc02:	9a02      	ldr	r2, [sp, #8]
 800bc04:	2a00      	cmp	r2, #0
 800bc06:	d01b      	beq.n	800bc40 <RegionAS923NextChannel+0x114>
                                              channels[i + j].DrRange.Fields.Max ) == false )
 800bc08:	7a19      	ldrb	r1, [r3, #8]
                if( RegionCommonValueInRange( datarate, channels[i + j].DrRange.Fields.Min,
 800bc0a:	9803      	ldr	r0, [sp, #12]
                                              channels[i + j].DrRange.Fields.Max ) == false )
 800bc0c:	b24a      	sxtb	r2, r1
                if( RegionCommonValueInRange( datarate, channels[i + j].DrRange.Fields.Min,
 800bc0e:	0709      	lsls	r1, r1, #28
 800bc10:	1112      	asrs	r2, r2, #4
 800bc12:	1709      	asrs	r1, r1, #28
 800bc14:	f000 f983 	bl	800bf1e <RegionCommonValueInRange>
 800bc18:	2800      	cmp	r0, #0
 800bc1a:	d0c2      	beq.n	800bba2 <RegionAS923NextChannel+0x76>
                if( bands[channels[i + j].Band].TimeOff > 0 )
 800bc1c:	4b1a      	ldr	r3, [pc, #104]	; (800bc88 <RegionAS923NextChannel+0x15c>)
 800bc1e:	4a19      	ldr	r2, [pc, #100]	; (800bc84 <RegionAS923NextChannel+0x158>)
 800bc20:	18ed      	adds	r5, r5, r3
 800bc22:	7a6b      	ldrb	r3, [r5, #9]
 800bc24:	011b      	lsls	r3, r3, #4
 800bc26:	189b      	adds	r3, r3, r2
 800bc28:	68db      	ldr	r3, [r3, #12]
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d105      	bne.n	800bc3a <RegionAS923NextChannel+0x10e>
                enabledChannels[nbEnabledChannels++] = i + j;
 800bc2e:	1c7b      	adds	r3, r7, #1
 800bc30:	aa06      	add	r2, sp, #24
 800bc32:	b2e1      	uxtb	r1, r4
 800bc34:	55d1      	strb	r1, [r2, r7]
 800bc36:	b2df      	uxtb	r7, r3
 800bc38:	e7b3      	b.n	800bba2 <RegionAS923NextChannel+0x76>
                    delayTransmission++;
 800bc3a:	3601      	adds	r6, #1
 800bc3c:	b2f6      	uxtb	r6, r6
 800bc3e:	e7b0      	b.n	800bba2 <RegionAS923NextChannel+0x76>
                    if( ( AS923_JOIN_CHANNELS & ( 1 << j ) ) == 0 )
 800bc40:	2203      	movs	r2, #3
 800bc42:	2101      	movs	r1, #1
 800bc44:	4122      	asrs	r2, r4
 800bc46:	420a      	tst	r2, r1
 800bc48:	d1de      	bne.n	800bc08 <RegionAS923NextChannel+0xdc>
 800bc4a:	e7aa      	b.n	800bba2 <RegionAS923NextChannel+0x76>
        nextTxDelay = nextChanParams->AggrTimeOff - elapsed;
 800bc4c:	1a3b      	subs	r3, r7, r0
 800bc4e:	9301      	str	r3, [sp, #4]
            *time = nextTxDelay;
 800bc50:	9b00      	ldr	r3, [sp, #0]
 800bc52:	9a01      	ldr	r2, [sp, #4]
            return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 800bc54:	200b      	movs	r0, #11
            *time = nextTxDelay;
 800bc56:	601a      	str	r2, [r3, #0]
            return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 800bc58:	e7cb      	b.n	800bbf2 <RegionAS923NextChannel+0xc6>
 800bc5a:	3c01      	subs	r4, #1
 800bc5c:	b2e4      	uxtb	r4, r4
        for( uint8_t  i = 0, j = randr( 0, nbEnabledChannels - 1 ); i < AS923_MAX_NB_CHANNELS; i++ )
 800bc5e:	2c00      	cmp	r4, #0
 800bc60:	d1ac      	bne.n	800bbbc <RegionAS923NextChannel+0x90>
        return LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND;
 800bc62:	200d      	movs	r0, #13
 800bc64:	e7c5      	b.n	800bbf2 <RegionAS923NextChannel+0xc6>
        if( delayTx > 0 )
 800bc66:	2e00      	cmp	r6, #0
 800bc68:	d1f2      	bne.n	800bc50 <RegionAS923NextChannel+0x124>
        NvmCtx.ChannelsMask[0] |= LC( 1 ) + LC( 2 );
 800bc6a:	2203      	movs	r2, #3
 800bc6c:	4b06      	ldr	r3, [pc, #24]	; (800bc88 <RegionAS923NextChannel+0x15c>)
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 800bc6e:	200c      	movs	r0, #12
        NvmCtx.ChannelsMask[0] |= LC( 1 ) + LC( 2 );
 800bc70:	33d0      	adds	r3, #208	; 0xd0
 800bc72:	8819      	ldrh	r1, [r3, #0]
 800bc74:	430a      	orrs	r2, r1
 800bc76:	801a      	strh	r2, [r3, #0]
        *time = 0;
 800bc78:	9b00      	ldr	r3, [sp, #0]
 800bc7a:	601e      	str	r6, [r3, #0]
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 800bc7c:	e7b9      	b.n	800bbf2 <RegionAS923NextChannel+0xc6>
 800bc7e:	46c0      	nop			; (mov r8, r8)
 800bc80:	20001044 	.word	0x20001044
 800bc84:	20001034 	.word	0x20001034
 800bc88:	20000f74 	.word	0x20000f74
 800bc8c:	0800f5a4 	.word	0x0800f5a4

0800bc90 <RegionAS923ChannelAdd>:

LoRaMacStatus_t RegionAS923ChannelAdd( ChannelAddParams_t* channelAdd )
{
 800bc90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bool drInvalid = false;
    bool freqInvalid = false;
    uint8_t id = channelAdd->ChannelId;
 800bc92:	7906      	ldrb	r6, [r0, #4]
{
 800bc94:	0005      	movs	r5, r0

    if( id < AS923_NUMB_DEFAULT_CHANNELS )
 800bc96:	2e01      	cmp	r6, #1
 800bc98:	d801      	bhi.n	800bc9e <RegionAS923ChannelAdd+0xe>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 800bc9a:	2006      	movs	r0, #6

    memcpy1( ( uint8_t* ) &(NvmCtx.Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( NvmCtx.Channels[id] ) );
    NvmCtx.Channels[id].Band = 0;
    NvmCtx.ChannelsMask[0] |= ( 1 << id );
    return LORAMAC_STATUS_OK;
}
 800bc9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800bc9e:	2003      	movs	r0, #3
    if( id >= AS923_MAX_NB_CHANNELS )
 800bca0:	2e0f      	cmp	r6, #15
 800bca2:	d8fb      	bhi.n	800bc9c <RegionAS923ChannelAdd+0xc>
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, AS923_TX_MIN_DATARATE, AS923_TX_MAX_DATARATE ) == false )
 800bca4:	682b      	ldr	r3, [r5, #0]
 800bca6:	2207      	movs	r2, #7
 800bca8:	7a18      	ldrb	r0, [r3, #8]
 800bcaa:	2100      	movs	r1, #0
 800bcac:	0700      	lsls	r0, r0, #28
 800bcae:	1700      	asrs	r0, r0, #28
 800bcb0:	f000 f935 	bl	800bf1e <RegionCommonValueInRange>
 800bcb4:	0007      	movs	r7, r0
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, AS923_TX_MIN_DATARATE, AS923_TX_MAX_DATARATE ) == false )
 800bcb6:	2008      	movs	r0, #8
 800bcb8:	682b      	ldr	r3, [r5, #0]
 800bcba:	2207      	movs	r2, #7
 800bcbc:	5618      	ldrsb	r0, [r3, r0]
 800bcbe:	2100      	movs	r1, #0
 800bcc0:	1100      	asrs	r0, r0, #4
 800bcc2:	f000 f92c 	bl	800bf1e <RegionCommonValueInRange>
        drInvalid = true;
 800bcc6:	2401      	movs	r4, #1
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, AS923_TX_MIN_DATARATE, AS923_TX_MAX_DATARATE ) == false )
 800bcc8:	2800      	cmp	r0, #0
 800bcca:	d002      	beq.n	800bcd2 <RegionAS923ChannelAdd+0x42>
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, AS923_TX_MIN_DATARATE, AS923_TX_MAX_DATARATE ) == false )
 800bccc:	427c      	negs	r4, r7
 800bcce:	417c      	adcs	r4, r7
 800bcd0:	b2e4      	uxtb	r4, r4
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 800bcd2:	6829      	ldr	r1, [r5, #0]
 800bcd4:	7a0b      	ldrb	r3, [r1, #8]
 800bcd6:	071a      	lsls	r2, r3, #28
 800bcd8:	b25b      	sxtb	r3, r3
 800bcda:	1712      	asrs	r2, r2, #28
 800bcdc:	111b      	asrs	r3, r3, #4
 800bcde:	429a      	cmp	r2, r3
 800bce0:	dd00      	ble.n	800bce4 <RegionAS923ChannelAdd+0x54>
        drInvalid = true;
 800bce2:	2401      	movs	r4, #1
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency ) == false )
 800bce4:	6808      	ldr	r0, [r1, #0]
 800bce6:	f7ff fb81 	bl	800b3ec <VerifyRfFreq>
 800bcea:	2800      	cmp	r0, #0
 800bcec:	d103      	bne.n	800bcf6 <RegionAS923ChannelAdd+0x66>
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 800bcee:	2004      	movs	r0, #4
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 800bcf0:	2c00      	cmp	r4, #0
 800bcf2:	d0d3      	beq.n	800bc9c <RegionAS923ChannelAdd+0xc>
 800bcf4:	e7d1      	b.n	800bc9a <RegionAS923ChannelAdd+0xa>
        return LORAMAC_STATUS_DATARATE_INVALID;
 800bcf6:	2005      	movs	r0, #5
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 800bcf8:	2c00      	cmp	r4, #0
 800bcfa:	d1cf      	bne.n	800bc9c <RegionAS923ChannelAdd+0xc>
    memcpy1( ( uint8_t* ) &(NvmCtx.Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( NvmCtx.Channels[id] ) );
 800bcfc:	220c      	movs	r2, #12
 800bcfe:	0017      	movs	r7, r2
 800bd00:	4377      	muls	r7, r6
 800bd02:	4b08      	ldr	r3, [pc, #32]	; (800bd24 <RegionAS923ChannelAdd+0x94>)
 800bd04:	6829      	ldr	r1, [r5, #0]
 800bd06:	18ff      	adds	r7, r7, r3
 800bd08:	0038      	movs	r0, r7
 800bd0a:	f001 f96c 	bl	800cfe6 <memcpy1>
    NvmCtx.ChannelsMask[0] |= ( 1 << id );
 800bd0e:	2101      	movs	r1, #1
 800bd10:	40b1      	lsls	r1, r6
 800bd12:	4b04      	ldr	r3, [pc, #16]	; (800bd24 <RegionAS923ChannelAdd+0x94>)
    NvmCtx.Channels[id].Band = 0;
 800bd14:	727c      	strb	r4, [r7, #9]
    NvmCtx.ChannelsMask[0] |= ( 1 << id );
 800bd16:	33d0      	adds	r3, #208	; 0xd0
 800bd18:	881a      	ldrh	r2, [r3, #0]
    return LORAMAC_STATUS_OK;
 800bd1a:	0020      	movs	r0, r4
    NvmCtx.ChannelsMask[0] |= ( 1 << id );
 800bd1c:	430a      	orrs	r2, r1
 800bd1e:	801a      	strh	r2, [r3, #0]
    return LORAMAC_STATUS_OK;
 800bd20:	e7bc      	b.n	800bc9c <RegionAS923ChannelAdd+0xc>
 800bd22:	46c0      	nop			; (mov r8, r8)
 800bd24:	20000f74 	.word	0x20000f74

0800bd28 <RegionAS923ChannelsRemove>:

bool RegionAS923ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 800bd28:	b510      	push	{r4, lr}
    uint8_t id = channelRemove->ChannelId;
 800bd2a:	7804      	ldrb	r4, [r0, #0]

    if( id < AS923_NUMB_DEFAULT_CHANNELS )
    {
        return false;
 800bd2c:	2100      	movs	r1, #0
    if( id < AS923_NUMB_DEFAULT_CHANNELS )
 800bd2e:	2c01      	cmp	r4, #1
 800bd30:	d90c      	bls.n	800bd4c <RegionAS923ChannelsRemove+0x24>
    }

    // Remove the channel from the list of channels
    NvmCtx.Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 800bd32:	220c      	movs	r2, #12
 800bd34:	0013      	movs	r3, r2
 800bd36:	4363      	muls	r3, r4
 800bd38:	4805      	ldr	r0, [pc, #20]	; (800bd50 <RegionAS923ChannelsRemove+0x28>)
 800bd3a:	18c0      	adds	r0, r0, r3
 800bd3c:	f002 fe81 	bl	800ea42 <memset>

    return RegionCommonChanDisable( NvmCtx.ChannelsMask, id, AS923_MAX_NB_CHANNELS );
 800bd40:	0021      	movs	r1, r4
 800bd42:	2210      	movs	r2, #16
 800bd44:	4803      	ldr	r0, [pc, #12]	; (800bd54 <RegionAS923ChannelsRemove+0x2c>)
 800bd46:	f000 f8f4 	bl	800bf32 <RegionCommonChanDisable>
 800bd4a:	0001      	movs	r1, r0
}
 800bd4c:	0008      	movs	r0, r1
 800bd4e:	bd10      	pop	{r4, pc}
 800bd50:	20000f74 	.word	0x20000f74
 800bd54:	20001044 	.word	0x20001044

0800bd58 <RegionAS923ApplyCFList>:
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 800bd58:	2350      	movs	r3, #80	; 0x50
{
 800bd5a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bd5c:	b087      	sub	sp, #28
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 800bd5e:	ac03      	add	r4, sp, #12
 800bd60:	7223      	strb	r3, [r4, #8]
    if( applyCFList->Size != 16 )
 800bd62:	7903      	ldrb	r3, [r0, #4]
{
 800bd64:	0007      	movs	r7, r0
    if( applyCFList->Size != 16 )
 800bd66:	2b10      	cmp	r3, #16
 800bd68:	d123      	bne.n	800bdb2 <RegionAS923ApplyCFList+0x5a>
    if( applyCFList->Payload[15] != 0 )
 800bd6a:	6803      	ldr	r3, [r0, #0]
 800bd6c:	7bde      	ldrb	r6, [r3, #15]
 800bd6e:	2e00      	cmp	r6, #0
 800bd70:	d11f      	bne.n	800bdb2 <RegionAS923ApplyCFList+0x5a>
    for( uint8_t i = 0, chanIdx = AS923_NUMB_DEFAULT_CHANNELS; chanIdx < AS923_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 800bd72:	2502      	movs	r5, #2
        if( chanIdx < ( AS923_NUMB_CHANNELS_CF_LIST + AS923_NUMB_DEFAULT_CHANNELS ) )
 800bd74:	2d06      	cmp	r5, #6
 800bd76:	d81e      	bhi.n	800bdb6 <RegionAS923ApplyCFList+0x5e>
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 800bd78:	6839      	ldr	r1, [r7, #0]
 800bd7a:	5d8a      	ldrb	r2, [r1, r6]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 800bd7c:	1989      	adds	r1, r1, r6
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 800bd7e:	6022      	str	r2, [r4, #0]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 800bd80:	784b      	ldrb	r3, [r1, #1]
 800bd82:	021b      	lsls	r3, r3, #8
 800bd84:	431a      	orrs	r2, r3
 800bd86:	6022      	str	r2, [r4, #0]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 800bd88:	788b      	ldrb	r3, [r1, #2]
 800bd8a:	041b      	lsls	r3, r3, #16
 800bd8c:	4313      	orrs	r3, r2
            newChannel.Frequency *= 100;
 800bd8e:	2264      	movs	r2, #100	; 0x64
 800bd90:	4353      	muls	r3, r2
 800bd92:	6023      	str	r3, [r4, #0]
            newChannel.Rx1Frequency = 0;
 800bd94:	2300      	movs	r3, #0
            newChannel.Rx1Frequency = 0;
 800bd96:	6063      	str	r3, [r4, #4]
        if( newChannel.Frequency != 0 )
 800bd98:	6823      	ldr	r3, [r4, #0]
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d00f      	beq.n	800bdbe <RegionAS923ApplyCFList+0x66>
            channelAdd.NewChannel = &newChannel;
 800bd9e:	a801      	add	r0, sp, #4
 800bda0:	9401      	str	r4, [sp, #4]
            channelAdd.ChannelId = chanIdx;
 800bda2:	7105      	strb	r5, [r0, #4]
            RegionAS923ChannelAdd( &channelAdd );
 800bda4:	f7ff ff74 	bl	800bc90 <RegionAS923ChannelAdd>
    for( uint8_t i = 0, chanIdx = AS923_NUMB_DEFAULT_CHANNELS; chanIdx < AS923_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 800bda8:	3501      	adds	r5, #1
 800bdaa:	b2ed      	uxtb	r5, r5
 800bdac:	3603      	adds	r6, #3
 800bdae:	2d10      	cmp	r5, #16
 800bdb0:	d1e0      	bne.n	800bd74 <RegionAS923ApplyCFList+0x1c>
}
 800bdb2:	b007      	add	sp, #28
 800bdb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
            newChannel.Frequency = 0;
 800bdb6:	2300      	movs	r3, #0
 800bdb8:	6023      	str	r3, [r4, #0]
            newChannel.DrRange.Value = 0;
 800bdba:	7223      	strb	r3, [r4, #8]
 800bdbc:	e7eb      	b.n	800bd96 <RegionAS923ApplyCFList+0x3e>
            channelRemove.ChannelId = chanIdx;
 800bdbe:	466b      	mov	r3, sp
            RegionAS923ChannelsRemove( &channelRemove );
 800bdc0:	4668      	mov	r0, sp
            channelRemove.ChannelId = chanIdx;
 800bdc2:	701d      	strb	r5, [r3, #0]
            RegionAS923ChannelsRemove( &channelRemove );
 800bdc4:	f7ff ffb0 	bl	800bd28 <RegionAS923ChannelsRemove>
 800bdc8:	e7ee      	b.n	800bda8 <RegionAS923ApplyCFList+0x50>

0800bdca <RegionAS923NewChannelReq>:
{
 800bdca:	b513      	push	{r0, r1, r4, lr}
    if( newChannelReq->NewChannel->Frequency == 0 )
 800bdcc:	6802      	ldr	r2, [r0, #0]
 800bdce:	7903      	ldrb	r3, [r0, #4]
 800bdd0:	6814      	ldr	r4, [r2, #0]
 800bdd2:	2c00      	cmp	r4, #0
 800bdd4:	d109      	bne.n	800bdea <RegionAS923NewChannelReq+0x20>
        channelRemove.ChannelId = newChannelReq->ChannelId;
 800bdd6:	466a      	mov	r2, sp
        if( RegionAS923ChannelsRemove( &channelRemove ) == false )
 800bdd8:	4668      	mov	r0, sp
        channelRemove.ChannelId = newChannelReq->ChannelId;
 800bdda:	7013      	strb	r3, [r2, #0]
        if( RegionAS923ChannelsRemove( &channelRemove ) == false )
 800bddc:	f7ff ffa4 	bl	800bd28 <RegionAS923ChannelsRemove>
 800bde0:	2800      	cmp	r0, #0
 800bde2:	d000      	beq.n	800bde6 <RegionAS923NewChannelReq+0x1c>
    uint8_t status = 0x03;
 800bde4:	3403      	adds	r4, #3
}
 800bde6:	0020      	movs	r0, r4
 800bde8:	bd16      	pop	{r1, r2, r4, pc}
        channelAdd.NewChannel = newChannelReq->NewChannel;
 800bdea:	9200      	str	r2, [sp, #0]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 800bdec:	466a      	mov	r2, sp
        switch( RegionAS923ChannelAdd( &channelAdd ) )
 800bdee:	4668      	mov	r0, sp
        channelAdd.ChannelId = newChannelReq->ChannelId;
 800bdf0:	7113      	strb	r3, [r2, #4]
        switch( RegionAS923ChannelAdd( &channelAdd ) )
 800bdf2:	f7ff ff4d 	bl	800bc90 <RegionAS923ChannelAdd>
                status &= 0xFE;
 800bdf6:	2402      	movs	r4, #2
        switch( RegionAS923ChannelAdd( &channelAdd ) )
 800bdf8:	2804      	cmp	r0, #4
 800bdfa:	d0f4      	beq.n	800bde6 <RegionAS923NewChannelReq+0x1c>
                status &= 0xFD;
 800bdfc:	3c01      	subs	r4, #1
        switch( RegionAS923ChannelAdd( &channelAdd ) )
 800bdfe:	2805      	cmp	r0, #5
 800be00:	d0f1      	beq.n	800bde6 <RegionAS923NewChannelReq+0x1c>
                status &= 0xFC;
 800be02:	4242      	negs	r2, r0
 800be04:	4150      	adcs	r0, r2
    uint8_t status = 0x03;
 800be06:	3402      	adds	r4, #2
                status &= 0xFC;
 800be08:	4240      	negs	r0, r0
 800be0a:	4004      	ands	r4, r0
 800be0c:	e7eb      	b.n	800bde6 <RegionAS923NewChannelReq+0x1c>
	...

0800be10 <RegionAS923SetContinuousWave>:

void RegionAS923SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
    int8_t txPowerLimited = LimitTxPower( continuousWave->TxPower, NvmCtx.Bands[NvmCtx.Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, NvmCtx.ChannelsMask );
    int8_t phyTxPower = 0;
    uint32_t frequency = NvmCtx.Channels[continuousWave->Channel].Frequency;
 800be10:	230c      	movs	r3, #12
{
 800be12:	b537      	push	{r0, r1, r2, r4, r5, lr}
    int8_t txPowerLimited = LimitTxPower( continuousWave->TxPower, NvmCtx.Bands[NvmCtx.Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, NvmCtx.ChannelsMask );
 800be14:	7801      	ldrb	r1, [r0, #0]
    uint32_t frequency = NvmCtx.Channels[continuousWave->Channel].Frequency;
 800be16:	4a0f      	ldr	r2, [pc, #60]	; (800be54 <RegionAS923SetContinuousWave+0x44>)
 800be18:	434b      	muls	r3, r1
 800be1a:	589d      	ldr	r5, [r3, r2]
    int8_t txPowerLimited = LimitTxPower( continuousWave->TxPower, NvmCtx.Bands[NvmCtx.Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, NvmCtx.ChannelsMask );
 800be1c:	18d3      	adds	r3, r2, r3
 800be1e:	7a5b      	ldrb	r3, [r3, #9]
    txPowerResult =  MAX( txPower, maxBandTxPower );
 800be20:	7881      	ldrb	r1, [r0, #2]
    int8_t txPowerLimited = LimitTxPower( continuousWave->TxPower, NvmCtx.Bands[NvmCtx.Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, NvmCtx.ChannelsMask );
 800be22:	330c      	adds	r3, #12
 800be24:	011b      	lsls	r3, r3, #4
 800be26:	18d2      	adds	r2, r2, r3
    txPowerResult =  MAX( txPower, maxBandTxPower );
 800be28:	7893      	ldrb	r3, [r2, #2]
{
 800be2a:	0004      	movs	r4, r0
    txPowerResult =  MAX( txPower, maxBandTxPower );
 800be2c:	b24a      	sxtb	r2, r1
 800be2e:	1c18      	adds	r0, r3, #0
 800be30:	b25b      	sxtb	r3, r3
 800be32:	4293      	cmp	r3, r2
 800be34:	da00      	bge.n	800be38 <RegionAS923SetContinuousWave+0x28>
 800be36:	1c08      	adds	r0, r1, #0

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 800be38:	68a2      	ldr	r2, [r4, #8]
 800be3a:	6861      	ldr	r1, [r4, #4]
 800be3c:	b240      	sxtb	r0, r0
 800be3e:	f000 f9dd 	bl	800c1fc <RegionCommonComputeTxPower>

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 800be42:	4b05      	ldr	r3, [pc, #20]	; (800be58 <RegionAS923SetContinuousWave+0x48>)
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 800be44:	0001      	movs	r1, r0
    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 800be46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be48:	0028      	movs	r0, r5
 800be4a:	89a2      	ldrh	r2, [r4, #12]
 800be4c:	9301      	str	r3, [sp, #4]
 800be4e:	4798      	blx	r3
}
 800be50:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 800be52:	46c0      	nop			; (mov r8, r8)
 800be54:	20000f74 	.word	0x20000f74
 800be58:	0800f5a4 	.word	0x0800f5a4

0800be5c <RegionAS923ApplyDrOffset>:
    int8_t minDr = DR_0;

    // Update the minDR for a downlink dwell time configuration of 1
    if( downlinkDwellTime == 1 )
    {
        minDr = AS923_DWELL_LIMIT_DATARATE;
 800be5c:	3801      	subs	r0, #1
 800be5e:	4243      	negs	r3, r0
 800be60:	4158      	adcs	r0, r3
    }

    // Apply offset formula
    return MIN( DR_5, MAX( minDr, dr - EffectiveRx1DrOffsetAS923[drOffset] ) );
 800be62:	4b06      	ldr	r3, [pc, #24]	; (800be7c <RegionAS923ApplyDrOffset+0x20>)
        minDr = AS923_DWELL_LIMIT_DATARATE;
 800be64:	0040      	lsls	r0, r0, #1
    return MIN( DR_5, MAX( minDr, dr - EffectiveRx1DrOffsetAS923[drOffset] ) );
 800be66:	3358      	adds	r3, #88	; 0x58
 800be68:	569b      	ldrsb	r3, [r3, r2]
 800be6a:	1ac9      	subs	r1, r1, r3
 800be6c:	4281      	cmp	r1, r0
 800be6e:	da00      	bge.n	800be72 <RegionAS923ApplyDrOffset+0x16>
 800be70:	0001      	movs	r1, r0
 800be72:	2905      	cmp	r1, #5
 800be74:	dd00      	ble.n	800be78 <RegionAS923ApplyDrOffset+0x1c>
 800be76:	2105      	movs	r1, #5
 800be78:	b2c8      	uxtb	r0, r1
}
 800be7a:	4770      	bx	lr
 800be7c:	0800fa54 	.word	0x0800fa54

0800be80 <RegionCommonGetJoinDc>:

uint16_t RegionCommonGetJoinDc( TimerTime_t elapsedTime )
{
    uint16_t dutyCycle = 0;

    if( elapsedTime < 3600000 )
 800be80:	4b07      	ldr	r3, [pc, #28]	; (800bea0 <RegionCommonGetJoinDc+0x20>)
{
 800be82:	0002      	movs	r2, r0
    {
        dutyCycle = BACKOFF_DC_1_HOUR;
 800be84:	2064      	movs	r0, #100	; 0x64
    if( elapsedTime < 3600000 )
 800be86:	429a      	cmp	r2, r3
 800be88:	d908      	bls.n	800be9c <RegionCommonGetJoinDc+0x1c>
    {
        dutyCycle = BACKOFF_DC_10_HOURS;
    }
    else
    {
        dutyCycle = BACKOFF_DC_24_HOURS;
 800be8a:	2300      	movs	r3, #0
 800be8c:	4905      	ldr	r1, [pc, #20]	; (800bea4 <RegionCommonGetJoinDc+0x24>)
 800be8e:	4291      	cmp	r1, r2
 800be90:	415b      	adcs	r3, r3
 800be92:	4258      	negs	r0, r3
 800be94:	4b04      	ldr	r3, [pc, #16]	; (800bea8 <RegionCommonGetJoinDc+0x28>)
 800be96:	4018      	ands	r0, r3
 800be98:	4b04      	ldr	r3, [pc, #16]	; (800beac <RegionCommonGetJoinDc+0x2c>)
 800be9a:	18c0      	adds	r0, r0, r3
    }
    return dutyCycle;
}
 800be9c:	4770      	bx	lr
 800be9e:	46c0      	nop			; (mov r8, r8)
 800bea0:	0036ee7f 	.word	0x0036ee7f
 800bea4:	025c3f7f 	.word	0x025c3f7f
 800bea8:	ffffdcd8 	.word	0xffffdcd8
 800beac:	00002710 	.word	0x00002710

0800beb0 <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 800beb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800beb2:	2600      	movs	r6, #0
 800beb4:	9101      	str	r1, [sp, #4]
 800beb6:	ac08      	add	r4, sp, #32
 800beb8:	57a6      	ldrsb	r6, [r4, r6]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
    {
        return false;
 800beba:	2500      	movs	r5, #0
    return false;
}

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
    if( ( value >= min ) && ( value <= max ) )
 800bebc:	429a      	cmp	r2, r3
 800bebe:	db09      	blt.n	800bed4 <RegionCommonChanVerifyDr+0x24>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 800bec0:	002c      	movs	r4, r5
    if( ( value >= min ) && ( value <= max ) )
 800bec2:	42b2      	cmp	r2, r6
 800bec4:	dc06      	bgt.n	800bed4 <RegionCommonChanVerifyDr+0x24>
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 800bec6:	230f      	movs	r3, #15
 800bec8:	469c      	mov	ip, r3
 800beca:	0127      	lsls	r7, r4, #4
 800becc:	b2ff      	uxtb	r7, r7
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 800bece:	42b8      	cmp	r0, r7
 800bed0:	d802      	bhi.n	800bed8 <RegionCommonChanVerifyDr+0x28>
        return false;
 800bed2:	2500      	movs	r5, #0
}
 800bed4:	0028      	movs	r0, r5
 800bed6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 800bed8:	2500      	movs	r5, #0
 800beda:	9901      	ldr	r1, [sp, #4]
 800bedc:	0063      	lsls	r3, r4, #1
 800bede:	5a5b      	ldrh	r3, [r3, r1]
 800bee0:	9300      	str	r3, [sp, #0]
 800bee2:	9b00      	ldr	r3, [sp, #0]
 800bee4:	2601      	movs	r6, #1
 800bee6:	412b      	asrs	r3, r5
 800bee8:	4233      	tst	r3, r6
 800beea:	d010      	beq.n	800bf0e <RegionCommonChanVerifyDr+0x5e>
    if( ( value >= min ) && ( value <= max ) )
 800beec:	4661      	mov	r1, ip
 800beee:	360b      	adds	r6, #11
 800bef0:	197b      	adds	r3, r7, r5
 800bef2:	4373      	muls	r3, r6
 800bef4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800bef6:	18f3      	adds	r3, r6, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 800bef8:	7a1b      	ldrb	r3, [r3, #8]
 800befa:	b25e      	sxtb	r6, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 800befc:	071b      	lsls	r3, r3, #28
 800befe:	171b      	asrs	r3, r3, #28
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 800bf00:	1136      	asrs	r6, r6, #4
    if( ( value >= min ) && ( value <= max ) )
 800bf02:	400b      	ands	r3, r1
 800bf04:	429a      	cmp	r2, r3
 800bf06:	db02      	blt.n	800bf0e <RegionCommonChanVerifyDr+0x5e>
 800bf08:	400e      	ands	r6, r1
 800bf0a:	42b2      	cmp	r2, r6
 800bf0c:	dd05      	ble.n	800bf1a <RegionCommonChanVerifyDr+0x6a>
 800bf0e:	3501      	adds	r5, #1
        for( uint8_t j = 0; j < 16; j++ )
 800bf10:	2d10      	cmp	r5, #16
 800bf12:	d1e6      	bne.n	800bee2 <RegionCommonChanVerifyDr+0x32>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 800bf14:	3401      	adds	r4, #1
 800bf16:	b2e4      	uxtb	r4, r4
 800bf18:	e7d7      	b.n	800beca <RegionCommonChanVerifyDr+0x1a>
                    return true;
 800bf1a:	2501      	movs	r5, #1
 800bf1c:	e7da      	b.n	800bed4 <RegionCommonChanVerifyDr+0x24>

0800bf1e <RegionCommonValueInRange>:
    {
        return 1;
    }
    return 0;
 800bf1e:	2300      	movs	r3, #0
    if( ( value >= min ) && ( value <= max ) )
 800bf20:	4288      	cmp	r0, r1
 800bf22:	db04      	blt.n	800bf2e <RegionCommonValueInRange+0x10>
 800bf24:	0fc3      	lsrs	r3, r0, #31
 800bf26:	17d1      	asrs	r1, r2, #31
 800bf28:	4282      	cmp	r2, r0
 800bf2a:	414b      	adcs	r3, r1
        return 1;
 800bf2c:	b2db      	uxtb	r3, r3
}
 800bf2e:	0018      	movs	r0, r3
 800bf30:	4770      	bx	lr

0800bf32 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 800bf32:	b530      	push	{r4, r5, lr}
    uint8_t index = id / 16;

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
    {
        return false;
 800bf34:	2300      	movs	r3, #0
    uint8_t index = id / 16;
 800bf36:	090c      	lsrs	r4, r1, #4
    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 800bf38:	0915      	lsrs	r5, r2, #4
 800bf3a:	42a5      	cmp	r5, r4
 800bf3c:	d30c      	bcc.n	800bf58 <RegionCommonChanDisable+0x26>
 800bf3e:	4291      	cmp	r1, r2
 800bf40:	d20a      	bcs.n	800bf58 <RegionCommonChanDisable+0x26>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 800bf42:	330f      	adds	r3, #15
 800bf44:	4019      	ands	r1, r3
 800bf46:	3b0e      	subs	r3, #14
 800bf48:	001a      	movs	r2, r3
 800bf4a:	408a      	lsls	r2, r1
 800bf4c:	0011      	movs	r1, r2
 800bf4e:	0064      	lsls	r4, r4, #1
 800bf50:	1900      	adds	r0, r0, r4
 800bf52:	8802      	ldrh	r2, [r0, #0]
 800bf54:	438a      	bics	r2, r1
 800bf56:	8002      	strh	r2, [r0, #0]

    return true;
}
 800bf58:	0018      	movs	r0, r3
 800bf5a:	bd30      	pop	{r4, r5, pc}

0800bf5c <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 800bf5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    uint8_t nbChannels = 0;

    if( channelsMask == NULL )
    {
        return 0;
 800bf5e:	1e06      	subs	r6, r0, #0
{
 800bf60:	9201      	str	r2, [sp, #4]
    if( channelsMask == NULL )
 800bf62:	d005      	beq.n	800bf70 <RegionCommonCountChannels+0x14>
    uint8_t nbChannels = 0;
 800bf64:	2600      	movs	r6, #0
 800bf66:	004b      	lsls	r3, r1, #1
 800bf68:	18c3      	adds	r3, r0, r3
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 800bf6a:	9a01      	ldr	r2, [sp, #4]
 800bf6c:	4291      	cmp	r1, r2
 800bf6e:	d301      	bcc.n	800bf74 <RegionCommonCountChannels+0x18>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
    }

    return nbChannels;
}
 800bf70:	0030      	movs	r0, r6
 800bf72:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        nbChannels += CountChannels( channelsMask[i], 16 );
 800bf74:	2500      	movs	r5, #0
    uint8_t nbActiveBits = 0;
 800bf76:	002c      	movs	r4, r5
        nbChannels += CountChannels( channelsMask[i], 16 );
 800bf78:	881f      	ldrh	r7, [r3, #0]
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 800bf7a:	2001      	movs	r0, #1
 800bf7c:	40a8      	lsls	r0, r5
 800bf7e:	0002      	movs	r2, r0
 800bf80:	403a      	ands	r2, r7
 800bf82:	4290      	cmp	r0, r2
 800bf84:	d101      	bne.n	800bf8a <RegionCommonCountChannels+0x2e>
            nbActiveBits++;
 800bf86:	3401      	adds	r4, #1
 800bf88:	b2e4      	uxtb	r4, r4
 800bf8a:	3501      	adds	r5, #1
    for( uint8_t j = 0; j < nbBits; j++ )
 800bf8c:	2d10      	cmp	r5, #16
 800bf8e:	d1f4      	bne.n	800bf7a <RegionCommonCountChannels+0x1e>
        nbChannels += CountChannels( channelsMask[i], 16 );
 800bf90:	1936      	adds	r6, r6, r4
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 800bf92:	3101      	adds	r1, #1
        nbChannels += CountChannels( channelsMask[i], 16 );
 800bf94:	b2f6      	uxtb	r6, r6
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 800bf96:	b2c9      	uxtb	r1, r1
 800bf98:	3302      	adds	r3, #2
 800bf9a:	e7e6      	b.n	800bf6a <RegionCommonCountChannels+0xe>

0800bf9c <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 800bf9c:	b510      	push	{r4, lr}
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 800bf9e:	2800      	cmp	r0, #0
 800bfa0:	d005      	beq.n	800bfae <RegionCommonChanMaskCopy+0x12>
 800bfa2:	2900      	cmp	r1, #0
 800bfa4:	d003      	beq.n	800bfae <RegionCommonChanMaskCopy+0x12>
 800bfa6:	2300      	movs	r3, #0
 800bfa8:	0052      	lsls	r2, r2, #1
    {
        for( uint8_t i = 0; i < len; i++ )
 800bfaa:	4293      	cmp	r3, r2
 800bfac:	d100      	bne.n	800bfb0 <RegionCommonChanMaskCopy+0x14>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
        }
    }
}
 800bfae:	bd10      	pop	{r4, pc}
            channelsMaskDest[i] = channelsMaskSrc[i];
 800bfb0:	5acc      	ldrh	r4, [r1, r3]
 800bfb2:	52c4      	strh	r4, [r0, r3]
 800bfb4:	3302      	adds	r3, #2
 800bfb6:	e7f8      	b.n	800bfaa <RegionCommonChanMaskCopy+0xe>

0800bfb8 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( bool joined, Band_t* band, TimerTime_t lastTxDone )
{
    if( joined == true )
    {
        band->LastTxDoneTime = lastTxDone;
 800bfb8:	608a      	str	r2, [r1, #8]
    if( joined == true )
 800bfba:	2800      	cmp	r0, #0
 800bfbc:	d000      	beq.n	800bfc0 <RegionCommonSetBandTxDone+0x8>
    else
    {
        band->LastTxDoneTime = lastTxDone;
        band->LastJoinTxDoneTime = lastTxDone;
    }
}
 800bfbe:	4770      	bx	lr
        band->LastJoinTxDoneTime = lastTxDone;
 800bfc0:	604a      	str	r2, [r1, #4]
}
 800bfc2:	e7fc      	b.n	800bfbe <RegionCommonSetBandTxDone+0x6>

0800bfc4 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, bool dutyCycle, Band_t* bands, uint8_t nbBands )
{
 800bfc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    TimerTime_t nextTxDelay = TIMERTIME_T_MAX;
 800bfc6:	2501      	movs	r5, #1
{
 800bfc8:	000e      	movs	r6, r1
 800bfca:	1d14      	adds	r4, r2, #4
 800bfcc:	011b      	lsls	r3, r3, #4
 800bfce:	191b      	adds	r3, r3, r4
 800bfd0:	9001      	str	r0, [sp, #4]
 800bfd2:	9300      	str	r3, [sp, #0]
    TimerTime_t nextTxDelay = TIMERTIME_T_MAX;
 800bfd4:	426d      	negs	r5, r5

    // Update bands Time OFF
    for( uint8_t i = 0; i < nbBands; i++ )
 800bfd6:	9b00      	ldr	r3, [sp, #0]
 800bfd8:	429c      	cmp	r4, r3
 800bfda:	d104      	bne.n	800bfe6 <RegionCommonUpdateBandTimeOff+0x22>
                bands[i].TimeOff = 0;
            }
        }
    }

    return ( nextTxDelay == TIMERTIME_T_MAX ) ? 0 : nextTxDelay;
 800bfdc:	1c6b      	adds	r3, r5, #1
 800bfde:	d100      	bne.n	800bfe2 <RegionCommonUpdateBandTimeOff+0x1e>
 800bfe0:	2500      	movs	r5, #0
}
 800bfe2:	0028      	movs	r0, r5
 800bfe4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        if( joined == false )
 800bfe6:	9b01      	ldr	r3, [sp, #4]
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d11c      	bne.n	800c026 <RegionCommonUpdateBandTimeOff+0x62>
            TimerTime_t elapsedJoin = TimerGetElapsedTime( bands[i].LastJoinTxDoneTime );
 800bfec:	6820      	ldr	r0, [r4, #0]
 800bfee:	f000 ff4c 	bl	800ce8a <TimerGetElapsedTime>
 800bff2:	0007      	movs	r7, r0
            TimerTime_t elapsedTx = TimerGetElapsedTime( bands[i].LastTxDoneTime );
 800bff4:	6860      	ldr	r0, [r4, #4]
 800bff6:	f000 ff48 	bl	800ce8a <TimerGetElapsedTime>
            TimerTime_t txDoneTime =  MAX( elapsedJoin,
 800bffa:	0033      	movs	r3, r6
 800bffc:	1e5a      	subs	r2, r3, #1
 800bffe:	4193      	sbcs	r3, r2
 800c000:	425b      	negs	r3, r3
 800c002:	4018      	ands	r0, r3
 800c004:	42b8      	cmp	r0, r7
 800c006:	d200      	bcs.n	800c00a <RegionCommonUpdateBandTimeOff+0x46>
 800c008:	0038      	movs	r0, r7
                if( bands[i].TimeOff <= elapsed )
 800c00a:	68a3      	ldr	r3, [r4, #8]
 800c00c:	4283      	cmp	r3, r0
 800c00e:	d801      	bhi.n	800c014 <RegionCommonUpdateBandTimeOff+0x50>
                    bands[i].TimeOff = 0;
 800c010:	2300      	movs	r3, #0
 800c012:	60a3      	str	r3, [r4, #8]
                if( bands[i].TimeOff != 0 )
 800c014:	68a3      	ldr	r3, [r4, #8]
 800c016:	2b00      	cmp	r3, #0
 800c018:	d003      	beq.n	800c022 <RegionCommonUpdateBandTimeOff+0x5e>
                    nextTxDelay = MIN( bands[i].TimeOff - elapsed, nextTxDelay );
 800c01a:	1a18      	subs	r0, r3, r0
 800c01c:	4285      	cmp	r5, r0
 800c01e:	d900      	bls.n	800c022 <RegionCommonUpdateBandTimeOff+0x5e>
 800c020:	0005      	movs	r5, r0
 800c022:	3410      	adds	r4, #16
 800c024:	e7d7      	b.n	800bfd6 <RegionCommonUpdateBandTimeOff+0x12>
            if( dutyCycle == true )
 800c026:	2e00      	cmp	r6, #0
 800c028:	d003      	beq.n	800c032 <RegionCommonUpdateBandTimeOff+0x6e>
                TimerTime_t elapsed = TimerGetElapsedTime( bands[i].LastTxDoneTime );
 800c02a:	6860      	ldr	r0, [r4, #4]
 800c02c:	f000 ff2d 	bl	800ce8a <TimerGetElapsedTime>
 800c030:	e7eb      	b.n	800c00a <RegionCommonUpdateBandTimeOff+0x46>
                bands[i].TimeOff = 0;
 800c032:	60a6      	str	r6, [r4, #8]
                nextTxDelay = 0;
 800c034:	0035      	movs	r5, r6
 800c036:	e7f4      	b.n	800c022 <RegionCommonUpdateBandTimeOff+0x5e>

0800c038 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 800c038:	b510      	push	{r4, lr}
    uint8_t retIndex = 0;

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 800c03a:	7802      	ldrb	r2, [r0, #0]
{
 800c03c:	0003      	movs	r3, r0
    uint8_t retIndex = 0;
 800c03e:	2000      	movs	r0, #0
    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 800c040:	2a03      	cmp	r2, #3
 800c042:	d113      	bne.n	800c06c <RegionCommonParseLinkAdrReq+0x34>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 800c044:	785a      	ldrb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 800c046:	300f      	adds	r0, #15
 800c048:	0014      	movs	r4, r2
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 800c04a:	0912      	lsrs	r2, r2, #4
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 800c04c:	4004      	ands	r4, r0
 800c04e:	708c      	strb	r4, [r1, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 800c050:	704a      	strb	r2, [r1, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 800c052:	789a      	ldrb	r2, [r3, #2]
 800c054:	808a      	strh	r2, [r1, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 800c056:	78dc      	ldrb	r4, [r3, #3]
 800c058:	0224      	lsls	r4, r4, #8
 800c05a:	4322      	orrs	r2, r4
 800c05c:	808a      	strh	r2, [r1, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 800c05e:	791b      	ldrb	r3, [r3, #4]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 800c060:	065a      	lsls	r2, r3, #25
 800c062:	0f52      	lsrs	r2, r2, #29
        linkAdrParams->NbRep &= 0x0F;
 800c064:	4003      	ands	r3, r0
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 800c066:	70ca      	strb	r2, [r1, #3]
        linkAdrParams->NbRep &= 0x0F;
 800c068:	700b      	strb	r3, [r1, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 800c06a:	380a      	subs	r0, #10
    }
    return retIndex;
}
 800c06c:	bd10      	pop	{r4, pc}

0800c06e <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 800c06e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c070:	b087      	sub	sp, #28
 800c072:	9305      	str	r3, [sp, #20]
    uint8_t status = verifyParams->Status;
    int8_t datarate = verifyParams->Datarate;
 800c074:	2306      	movs	r3, #6
    int8_t txPower = verifyParams->TxPower;
 800c076:	2707      	movs	r7, #7
{
 800c078:	9103      	str	r1, [sp, #12]
 800c07a:	9204      	str	r2, [sp, #16]
    int8_t datarate = verifyParams->Datarate;
 800c07c:	56c3      	ldrsb	r3, [r0, r3]
    uint8_t status = verifyParams->Status;
 800c07e:	7905      	ldrb	r5, [r0, #4]
    int8_t datarate = verifyParams->Datarate;
 800c080:	9302      	str	r3, [sp, #8]
    int8_t nbRepetitions = verifyParams->NbRep;

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 800c082:	7943      	ldrb	r3, [r0, #5]
{
 800c084:	0004      	movs	r4, r0
    int8_t txPower = verifyParams->TxPower;
 800c086:	57c7      	ldrsb	r7, [r0, r7]
    int8_t nbRepetitions = verifyParams->NbRep;
 800c088:	7a06      	ldrb	r6, [r0, #8]
    if( verifyParams->AdrEnabled == false )
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d02b      	beq.n	800c0e6 <RegionCommonLinkAdrReqVerifyParams+0x78>
    int8_t nbRepetitions = verifyParams->NbRep;
 800c08e:	b276      	sxtb	r6, r6
        nbRepetitions = verifyParams->CurrentNbRep;
        datarate =  verifyParams->CurrentDatarate;
        txPower =  verifyParams->CurrentTxPower;
    }

    if( status != 0 )
 800c090:	2d00      	cmp	r5, #0
 800c092:	d01e      	beq.n	800c0d2 <RegionCommonLinkAdrReqVerifyParams+0x64>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 800c094:	69a2      	ldr	r2, [r4, #24]
 800c096:	2314      	movs	r3, #20
 800c098:	9201      	str	r2, [sp, #4]
 800c09a:	2215      	movs	r2, #21
 800c09c:	56a2      	ldrsb	r2, [r4, r2]
 800c09e:	56e3      	ldrsb	r3, [r4, r3]
 800c0a0:	9200      	str	r2, [sp, #0]
 800c0a2:	7b20      	ldrb	r0, [r4, #12]
 800c0a4:	9a02      	ldr	r2, [sp, #8]
 800c0a6:	6921      	ldr	r1, [r4, #16]
 800c0a8:	f7ff ff02 	bl	800beb0 <RegionCommonChanVerifyDr>
 800c0ac:	2800      	cmp	r0, #0
 800c0ae:	d101      	bne.n	800c0b4 <RegionCommonLinkAdrReqVerifyParams+0x46>
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
        {
            status &= 0xFD; // Datarate KO
 800c0b0:	2302      	movs	r3, #2
 800c0b2:	439d      	bics	r5, r3
        }

        // Verify tx power
        if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 800c0b4:	231d      	movs	r3, #29
 800c0b6:	221c      	movs	r2, #28
 800c0b8:	56e3      	ldrsb	r3, [r4, r3]
 800c0ba:	56a2      	ldrsb	r2, [r4, r2]
    if( ( value >= min ) && ( value <= max ) )
 800c0bc:	42bb      	cmp	r3, r7
 800c0be:	dc1a      	bgt.n	800c0f6 <RegionCommonLinkAdrReqVerifyParams+0x88>
 800c0c0:	42ba      	cmp	r2, r7
 800c0c2:	da01      	bge.n	800c0c8 <RegionCommonLinkAdrReqVerifyParams+0x5a>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
            }
            else
            {
                status &= 0xFB; // TxPower KO
 800c0c4:	2304      	movs	r3, #4
 800c0c6:	439d      	bics	r5, r3
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 800c0c8:	2d07      	cmp	r5, #7
 800c0ca:	d102      	bne.n	800c0d2 <RegionCommonLinkAdrReqVerifyParams+0x64>
    {
        if( nbRepetitions == 0 )
 800c0cc:	2e00      	cmp	r6, #0
 800c0ce:	d100      	bne.n	800c0d2 <RegionCommonLinkAdrReqVerifyParams+0x64>
        { // Restore the default value according to the LoRaWAN specification
            nbRepetitions = 1;
 800c0d0:	3601      	adds	r6, #1
    *dr = datarate;
    *txPow = txPower;
    *nbRep = nbRepetitions;

    return status;
}
 800c0d2:	0028      	movs	r0, r5
    *dr = datarate;
 800c0d4:	9b03      	ldr	r3, [sp, #12]
 800c0d6:	9a02      	ldr	r2, [sp, #8]
 800c0d8:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 800c0da:	9b04      	ldr	r3, [sp, #16]
 800c0dc:	701f      	strb	r7, [r3, #0]
    *nbRep = nbRepetitions;
 800c0de:	9b05      	ldr	r3, [sp, #20]
 800c0e0:	701e      	strb	r6, [r3, #0]
}
 800c0e2:	b007      	add	sp, #28
 800c0e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        datarate =  verifyParams->CurrentDatarate;
 800c0e6:	2309      	movs	r3, #9
        nbRepetitions = verifyParams->CurrentNbRep;
 800c0e8:	260b      	movs	r6, #11
        txPower =  verifyParams->CurrentTxPower;
 800c0ea:	270a      	movs	r7, #10
        datarate =  verifyParams->CurrentDatarate;
 800c0ec:	56c3      	ldrsb	r3, [r0, r3]
        nbRepetitions = verifyParams->CurrentNbRep;
 800c0ee:	5786      	ldrsb	r6, [r0, r6]
        datarate =  verifyParams->CurrentDatarate;
 800c0f0:	9302      	str	r3, [sp, #8]
        txPower =  verifyParams->CurrentTxPower;
 800c0f2:	57c7      	ldrsb	r7, [r0, r7]
 800c0f4:	e7cc      	b.n	800c090 <RegionCommonLinkAdrReqVerifyParams+0x22>
    if( ( value >= min ) && ( value <= max ) )
 800c0f6:	001f      	movs	r7, r3
 800c0f8:	e7e6      	b.n	800c0c8 <RegionCommonLinkAdrReqVerifyParams+0x5a>
	...

0800c0fc <RegionCommonComputeSymbolTimeLoRa>:

double RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidth )
{
    return ( ( double )( 1 << phyDr ) / ( double )bandwidth ) * 1000;
 800c0fc:	2301      	movs	r3, #1
 800c0fe:	4083      	lsls	r3, r0
{
 800c100:	b5d0      	push	{r4, r6, r7, lr}
    return ( ( double )( 1 << phyDr ) / ( double )bandwidth ) * 1000;
 800c102:	0018      	movs	r0, r3
{
 800c104:	000c      	movs	r4, r1
    return ( ( double )( 1 << phyDr ) / ( double )bandwidth ) * 1000;
 800c106:	f7f6 f9fd 	bl	8002504 <__aeabi_i2d>
 800c10a:	0006      	movs	r6, r0
 800c10c:	0020      	movs	r0, r4
 800c10e:	000f      	movs	r7, r1
 800c110:	f7f6 fa32 	bl	8002578 <__aeabi_ui2d>
 800c114:	0002      	movs	r2, r0
 800c116:	000b      	movs	r3, r1
 800c118:	0030      	movs	r0, r6
 800c11a:	0039      	movs	r1, r7
 800c11c:	f7f4 fff8 	bl	8001110 <__aeabi_ddiv>
 800c120:	2200      	movs	r2, #0
 800c122:	4b02      	ldr	r3, [pc, #8]	; (800c12c <RegionCommonComputeSymbolTimeLoRa+0x30>)
 800c124:	f7f5 fbfe 	bl	8001924 <__aeabi_dmul>
}
 800c128:	bdd0      	pop	{r4, r6, r7, pc}
 800c12a:	46c0      	nop			; (mov r8, r8)
 800c12c:	408f4000 	.word	0x408f4000

0800c130 <RegionCommonComputeSymbolTimeFsk>:

double RegionCommonComputeSymbolTimeFsk( uint8_t phyDr )
{
 800c130:	b510      	push	{r4, lr}
    return ( 8.0 / ( double )phyDr ); // 1 symbol equals 1 byte
 800c132:	f7f6 fa21 	bl	8002578 <__aeabi_ui2d>
 800c136:	0002      	movs	r2, r0
 800c138:	000b      	movs	r3, r1
 800c13a:	2000      	movs	r0, #0
 800c13c:	4901      	ldr	r1, [pc, #4]	; (800c144 <RegionCommonComputeSymbolTimeFsk+0x14>)
 800c13e:	f7f4 ffe7 	bl	8001110 <__aeabi_ddiv>
}
 800c142:	bd10      	pop	{r4, pc}
 800c144:	40200000 	.word	0x40200000

0800c148 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( double tSymbol, uint8_t minRxSymbols, uint32_t rxError, uint32_t wakeUpTime, uint32_t* windowTimeout, int32_t* windowOffset )
{
 800c148:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c14a:	0004      	movs	r4, r0
 800c14c:	000d      	movs	r5, r1
    *windowTimeout = MAX( ( uint32_t )ceil( ( ( 2 * minRxSymbols - 8 ) * tSymbol + 2 * rxError ) / tSymbol ), minRxSymbols ); // Computed number of symbols
 800c14e:	1f10      	subs	r0, r2, #4
{
 800c150:	b085      	sub	sp, #20
    *windowTimeout = MAX( ( uint32_t )ceil( ( ( 2 * minRxSymbols - 8 ) * tSymbol + 2 * rxError ) / tSymbol ), minRxSymbols ); // Computed number of symbols
 800c152:	0040      	lsls	r0, r0, #1
{
 800c154:	9200      	str	r2, [sp, #0]
 800c156:	9303      	str	r3, [sp, #12]
    *windowTimeout = MAX( ( uint32_t )ceil( ( ( 2 * minRxSymbols - 8 ) * tSymbol + 2 * rxError ) / tSymbol ), minRxSymbols ); // Computed number of symbols
 800c158:	f7f6 f9d4 	bl	8002504 <__aeabi_i2d>
 800c15c:	0022      	movs	r2, r4
 800c15e:	002b      	movs	r3, r5
 800c160:	f7f5 fbe0 	bl	8001924 <__aeabi_dmul>
 800c164:	9b03      	ldr	r3, [sp, #12]
 800c166:	0006      	movs	r6, r0
 800c168:	0058      	lsls	r0, r3, #1
 800c16a:	000f      	movs	r7, r1
 800c16c:	f7f6 fa04 	bl	8002578 <__aeabi_ui2d>
 800c170:	0002      	movs	r2, r0
 800c172:	000b      	movs	r3, r1
 800c174:	0030      	movs	r0, r6
 800c176:	0039      	movs	r1, r7
 800c178:	f7f4 fcae 	bl	8000ad8 <__aeabi_dadd>
 800c17c:	002b      	movs	r3, r5
 800c17e:	0022      	movs	r2, r4
 800c180:	f7f4 ffc6 	bl	8001110 <__aeabi_ddiv>
 800c184:	f003 f89c 	bl	800f2c0 <ceil>
 800c188:	f7f4 f9c2 	bl	8000510 <__aeabi_d2uiz>
 800c18c:	9b00      	ldr	r3, [sp, #0]
 800c18e:	0006      	movs	r6, r0
 800c190:	4298      	cmp	r0, r3
 800c192:	d200      	bcs.n	800c196 <RegionCommonComputeRxWindowParameters+0x4e>
 800c194:	001e      	movs	r6, r3
 800c196:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    *windowOffset = ( int32_t )ceil( ( 4.0 * tSymbol ) - ( ( *windowTimeout * tSymbol ) / 2.0 ) - wakeUpTime );
 800c198:	2200      	movs	r2, #0
    *windowTimeout = MAX( ( uint32_t )ceil( ( ( 2 * minRxSymbols - 8 ) * tSymbol + 2 * rxError ) / tSymbol ), minRxSymbols ); // Computed number of symbols
 800c19a:	601e      	str	r6, [r3, #0]
    *windowOffset = ( int32_t )ceil( ( 4.0 * tSymbol ) - ( ( *windowTimeout * tSymbol ) / 2.0 ) - wakeUpTime );
 800c19c:	0020      	movs	r0, r4
 800c19e:	4b15      	ldr	r3, [pc, #84]	; (800c1f4 <RegionCommonComputeRxWindowParameters+0xac>)
 800c1a0:	0029      	movs	r1, r5
 800c1a2:	f7f5 fbbf 	bl	8001924 <__aeabi_dmul>
 800c1a6:	9000      	str	r0, [sp, #0]
 800c1a8:	9101      	str	r1, [sp, #4]
 800c1aa:	0030      	movs	r0, r6
 800c1ac:	f7f6 f9e4 	bl	8002578 <__aeabi_ui2d>
 800c1b0:	0022      	movs	r2, r4
 800c1b2:	002b      	movs	r3, r5
 800c1b4:	f7f5 fbb6 	bl	8001924 <__aeabi_dmul>
 800c1b8:	2200      	movs	r2, #0
 800c1ba:	4b0f      	ldr	r3, [pc, #60]	; (800c1f8 <RegionCommonComputeRxWindowParameters+0xb0>)
 800c1bc:	f7f5 fbb2 	bl	8001924 <__aeabi_dmul>
 800c1c0:	0002      	movs	r2, r0
 800c1c2:	000b      	movs	r3, r1
 800c1c4:	9800      	ldr	r0, [sp, #0]
 800c1c6:	9901      	ldr	r1, [sp, #4]
 800c1c8:	f7f5 fe1e 	bl	8001e08 <__aeabi_dsub>
 800c1cc:	0004      	movs	r4, r0
 800c1ce:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c1d0:	000d      	movs	r5, r1
 800c1d2:	f7f6 f9d1 	bl	8002578 <__aeabi_ui2d>
 800c1d6:	0002      	movs	r2, r0
 800c1d8:	000b      	movs	r3, r1
 800c1da:	0020      	movs	r0, r4
 800c1dc:	0029      	movs	r1, r5
 800c1de:	f7f5 fe13 	bl	8001e08 <__aeabi_dsub>
 800c1e2:	f003 f86d 	bl	800f2c0 <ceil>
 800c1e6:	f7f6 f957 	bl	8002498 <__aeabi_d2iz>
 800c1ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c1ec:	6018      	str	r0, [r3, #0]
}
 800c1ee:	b005      	add	sp, #20
 800c1f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c1f2:	46c0      	nop			; (mov r8, r8)
 800c1f4:	40100000 	.word	0x40100000
 800c1f8:	3fe00000 	.word	0x3fe00000

0800c1fc <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 800c1fc:	b570      	push	{r4, r5, r6, lr}
    int8_t phyTxPower = 0;

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 800c1fe:	0040      	lsls	r0, r0, #1
{
 800c200:	1c14      	adds	r4, r2, #0
 800c202:	1c0d      	adds	r5, r1, #0
    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 800c204:	f7f4 fc28 	bl	8000a58 <__aeabi_ui2f>
 800c208:	1c01      	adds	r1, r0, #0
 800c20a:	1c28      	adds	r0, r5, #0
 800c20c:	f7f4 fa60 	bl	80006d0 <__aeabi_fsub>
 800c210:	1c21      	adds	r1, r4, #0
 800c212:	f7f4 fa5d 	bl	80006d0 <__aeabi_fsub>
 800c216:	f7f6 f9e1 	bl	80025dc <__aeabi_f2d>
 800c21a:	f003 f8d3 	bl	800f3c4 <floor>
 800c21e:	f7f6 f93b 	bl	8002498 <__aeabi_d2iz>

    return phyTxPower;
 800c222:	b240      	sxtb	r0, r0
}
 800c224:	bd70      	pop	{r4, r5, r6, pc}

0800c226 <RegionCommonCalcBackOff>:

void RegionCommonCalcBackOff( RegionCommonCalcBackOffParams_t* calcBackOffParams )
{
 800c226:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t bandIdx = calcBackOffParams->Channels[calcBackOffParams->Channel].Band;
 800c228:	230c      	movs	r3, #12
 800c22a:	7ac2      	ldrb	r2, [r0, #11]
{
 800c22c:	0004      	movs	r4, r0
    uint8_t bandIdx = calcBackOffParams->Channels[calcBackOffParams->Channel].Band;
 800c22e:	4353      	muls	r3, r2
 800c230:	6802      	ldr	r2, [r0, #0]
 800c232:	18d3      	adds	r3, r2, r3
    uint16_t dutyCycle = calcBackOffParams->Bands[bandIdx].DCycle;
 800c234:	7a5d      	ldrb	r5, [r3, #9]
 800c236:	6843      	ldr	r3, [r0, #4]
 800c238:	012d      	lsls	r5, r5, #4
 800c23a:	195d      	adds	r5, r3, r5
    uint16_t joinDutyCycle = 0;

    // Reset time-off to initial value.
    calcBackOffParams->Bands[bandIdx].TimeOff = 0;
 800c23c:	2300      	movs	r3, #0
 800c23e:	60eb      	str	r3, [r5, #12]

    if( calcBackOffParams->Joined == false )
 800c240:	7a43      	ldrb	r3, [r0, #9]
    uint16_t dutyCycle = calcBackOffParams->Bands[bandIdx].DCycle;
 800c242:	882e      	ldrh	r6, [r5, #0]
 800c244:	7a87      	ldrb	r7, [r0, #10]
    if( calcBackOffParams->Joined == false )
 800c246:	2b00      	cmp	r3, #0
 800c248:	d112      	bne.n	800c270 <RegionCommonCalcBackOff+0x4a>
    {
        // Get the join duty cycle
        joinDutyCycle = RegionCommonGetJoinDc( calcBackOffParams->ElapsedTime );
 800c24a:	68c0      	ldr	r0, [r0, #12]
 800c24c:	f7ff fe18 	bl	800be80 <RegionCommonGetJoinDc>
        // Apply the most restricting duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
        // Reset the timeoff if the last frame was not a join request and when the duty cycle is not enabled
        if( ( calcBackOffParams->DutyCycleEnabled == false ) && ( calcBackOffParams->LastTxIsJoinRequest == false ) )
 800c250:	2f00      	cmp	r7, #0
 800c252:	d102      	bne.n	800c25a <RegionCommonCalcBackOff+0x34>
 800c254:	7a23      	ldrb	r3, [r4, #8]
 800c256:	2b00      	cmp	r3, #0
 800c258:	d009      	beq.n	800c26e <RegionCommonCalcBackOff+0x48>
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 800c25a:	b282      	uxth	r2, r0
 800c25c:	1c33      	adds	r3, r6, #0
 800c25e:	4296      	cmp	r6, r2
 800c260:	d200      	bcs.n	800c264 <RegionCommonCalcBackOff+0x3e>
 800c262:	1c03      	adds	r3, r0, #0
            calcBackOffParams->Bands[bandIdx].TimeOff = 0;
        }
        else
        {
            // Apply band time-off.
            calcBackOffParams->Bands[bandIdx].TimeOff = calcBackOffParams->TxTimeOnAir * dutyCycle - calcBackOffParams->TxTimeOnAir;
 800c264:	6922      	ldr	r2, [r4, #16]
 800c266:	b29b      	uxth	r3, r3
 800c268:	3b01      	subs	r3, #1
 800c26a:	4353      	muls	r3, r2
 800c26c:	60eb      	str	r3, [r5, #12]
        else
        {
            calcBackOffParams->Bands[bandIdx].TimeOff = 0;
        }
    }
}
 800c26e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if( calcBackOffParams->DutyCycleEnabled == true )
 800c270:	2f00      	cmp	r7, #0
 800c272:	d0fc      	beq.n	800c26e <RegionCommonCalcBackOff+0x48>
            calcBackOffParams->Bands[bandIdx].TimeOff = calcBackOffParams->TxTimeOnAir * dutyCycle - calcBackOffParams->TxTimeOnAir;
 800c274:	6903      	ldr	r3, [r0, #16]
 800c276:	3e01      	subs	r6, #1
 800c278:	435e      	muls	r6, r3
 800c27a:	60ee      	str	r6, [r5, #12]
}
 800c27c:	e7f7      	b.n	800c26e <RegionCommonCalcBackOff+0x48>
	...

0800c280 <certif_tx>:
  certifParam.DemodMargin = mlmeConfirm->DemodMargin;
  certifParam.NbGateways = mlmeConfirm->NbGateways;
}

static bool certif_tx( void )
{
 800c280:	b530      	push	{r4, r5, lr}
  McpsReq_t mcpsReq;
  LoRaMacTxInfo_t txInfo;
  
  if( certifParam.LinkCheck == true )
 800c282:	4c29      	ldr	r4, [pc, #164]	; (800c328 <certif_tx+0xa8>)
{
 800c284:	b087      	sub	sp, #28
  if( certifParam.LinkCheck == true )
 800c286:	0023      	movs	r3, r4
 800c288:	33f8      	adds	r3, #248	; 0xf8
 800c28a:	781a      	ldrb	r2, [r3, #0]
 800c28c:	2a00      	cmp	r2, #0
 800c28e:	d027      	beq.n	800c2e0 <certif_tx+0x60>
  {
    certifParam.LinkCheck = false;
 800c290:	2200      	movs	r2, #0
 800c292:	701a      	strb	r2, [r3, #0]
    certifParam.DataBufferSize = 3;
 800c294:	2303      	movs	r3, #3
 800c296:	70e3      	strb	r3, [r4, #3]
    certifParam.DataBuffer[0] = 5;
 800c298:	3302      	adds	r3, #2
 800c29a:	7123      	strb	r3, [r4, #4]
    certifParam.DataBuffer[1] = certifParam.DemodMargin;
 800c29c:	0023      	movs	r3, r4
 800c29e:	33f9      	adds	r3, #249	; 0xf9
 800c2a0:	781b      	ldrb	r3, [r3, #0]
 800c2a2:	7163      	strb	r3, [r4, #5]
    certifParam.DataBuffer[2] = certifParam.NbGateways;
 800c2a4:	0023      	movs	r3, r4
 800c2a6:	33fa      	adds	r3, #250	; 0xfa
 800c2a8:	781b      	ldrb	r3, [r3, #0]
 800c2aa:	71a3      	strb	r3, [r4, #6]
    certifParam.State = 1;
 800c2ac:	2301      	movs	r3, #1
 800c2ae:	7063      	strb	r3, [r4, #1]
      certifParam.DataBuffer[1] = certifParam.DownLinkCounter;
      break;
    }
  }
    
  if( LoRaMacQueryTxPossible( certifParam.DataBufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 800c2b0:	78e0      	ldrb	r0, [r4, #3]
 800c2b2:	a901      	add	r1, sp, #4
 800c2b4:	f7fd fb06 	bl	80098c4 <LoRaMacQueryTxPossible>
 800c2b8:	ad02      	add	r5, sp, #8
 800c2ba:	4b1c      	ldr	r3, [pc, #112]	; (800c32c <certif_tx+0xac>)
 800c2bc:	2800      	cmp	r0, #0
 800c2be:	d01e      	beq.n	800c2fe <certif_tx+0x7e>
  {
      // Send empty frame in order to flush MAC commands
      mcpsReq.Type = MCPS_UNCONFIRMED;
 800c2c0:	2200      	movs	r2, #0
 800c2c2:	702a      	strb	r2, [r5, #0]
      mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800c2c4:	60aa      	str	r2, [r5, #8]
      mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800c2c6:	81aa      	strh	r2, [r5, #12]
      {
          mcpsReq.Type = MCPS_UNCONFIRMED;
          mcpsReq.Req.Unconfirmed.fPort = CERTIF_PORT;
          mcpsReq.Req.Unconfirmed.fBufferSize = certifParam.DataBufferSize;
          mcpsReq.Req.Unconfirmed.fBuffer = &(certifParam.DataBuffer);
          mcpsReq.Req.Unconfirmed.Datarate = DR_0;
 800c2c8:	73aa      	strb	r2, [r5, #14]
          mcpsReq.Req.Confirmed.Datarate = DR_0;
      }
  }

  /*cerification test on-going*/
  TimerStart( &CertifTxNextPacketTimer );
 800c2ca:	1d18      	adds	r0, r3, #4
 800c2cc:	f000 fd16 	bl	800ccfc <TimerStart>
	
  if( LoRaMacMcpsRequest( &mcpsReq ) == LORAMAC_STATUS_OK )
 800c2d0:	0028      	movs	r0, r5
 800c2d2:	f7fd ff27 	bl	800a124 <LoRaMacMcpsRequest>
 800c2d6:	1e43      	subs	r3, r0, #1
 800c2d8:	4198      	sbcs	r0, r3
 800c2da:	b2c0      	uxtb	r0, r0
  {
      return false;
  }
    return true;
}
 800c2dc:	b007      	add	sp, #28
 800c2de:	bd30      	pop	{r4, r5, pc}
    switch( certifParam.State )
 800c2e0:	7863      	ldrb	r3, [r4, #1]
 800c2e2:	2b01      	cmp	r3, #1
 800c2e4:	d002      	beq.n	800c2ec <certif_tx+0x6c>
 800c2e6:	2b04      	cmp	r3, #4
 800c2e8:	d1e2      	bne.n	800c2b0 <certif_tx+0x30>
 800c2ea:	e7df      	b.n	800c2ac <certif_tx+0x2c>
      certifParam.DataBufferSize = 2;
 800c2ec:	2302      	movs	r3, #2
 800c2ee:	70e3      	strb	r3, [r4, #3]
      certifParam.DataBuffer[0] = certifParam.DownLinkCounter >> 8;
 800c2f0:	0023      	movs	r3, r4
 800c2f2:	33f6      	adds	r3, #246	; 0xf6
 800c2f4:	881b      	ldrh	r3, [r3, #0]
 800c2f6:	0a1a      	lsrs	r2, r3, #8
 800c2f8:	7122      	strb	r2, [r4, #4]
      certifParam.DataBuffer[1] = certifParam.DownLinkCounter;
 800c2fa:	7163      	strb	r3, [r4, #5]
      break;
 800c2fc:	e7d8      	b.n	800c2b0 <certif_tx+0x30>
      if( IsTxConfirmed == LORAWAN_UNCONFIRMED_MSG )
 800c2fe:	781a      	ldrb	r2, [r3, #0]
 800c300:	78e0      	ldrb	r0, [r4, #3]
 800c302:	490b      	ldr	r1, [pc, #44]	; (800c330 <certif_tx+0xb0>)
 800c304:	24e0      	movs	r4, #224	; 0xe0
 800c306:	2a00      	cmp	r2, #0
 800c308:	d104      	bne.n	800c314 <certif_tx+0x94>
          mcpsReq.Type = MCPS_UNCONFIRMED;
 800c30a:	702a      	strb	r2, [r5, #0]
          mcpsReq.Req.Unconfirmed.fPort = CERTIF_PORT;
 800c30c:	712c      	strb	r4, [r5, #4]
          mcpsReq.Req.Unconfirmed.fBufferSize = certifParam.DataBufferSize;
 800c30e:	81a8      	strh	r0, [r5, #12]
          mcpsReq.Req.Unconfirmed.fBuffer = &(certifParam.DataBuffer);
 800c310:	60a9      	str	r1, [r5, #8]
 800c312:	e7d9      	b.n	800c2c8 <certif_tx+0x48>
          mcpsReq.Type = MCPS_CONFIRMED;
 800c314:	2201      	movs	r2, #1
 800c316:	702a      	strb	r2, [r5, #0]
          mcpsReq.Req.Confirmed.Datarate = DR_0;
 800c318:	2280      	movs	r2, #128	; 0x80
 800c31a:	0112      	lsls	r2, r2, #4
          mcpsReq.Req.Confirmed.fPort = CERTIF_PORT;
 800c31c:	712c      	strb	r4, [r5, #4]
          mcpsReq.Req.Confirmed.fBufferSize = certifParam.DataBufferSize;
 800c31e:	81a8      	strh	r0, [r5, #12]
          mcpsReq.Req.Confirmed.fBuffer = &(certifParam.DataBuffer);
 800c320:	60a9      	str	r1, [r5, #8]
          mcpsReq.Req.Confirmed.Datarate = DR_0;
 800c322:	81ea      	strh	r2, [r5, #14]
 800c324:	e7d1      	b.n	800c2ca <certif_tx+0x4a>
 800c326:	46c0      	nop			; (mov r8, r8)
 800c328:	20001066 	.word	0x20001066
 800c32c:	20001048 	.word	0x20001048
 800c330:	2000106a 	.word	0x2000106a

0800c334 <OnCertifTxNextPacketTimerEvent>:

/*!
 * \brief Function executed on TxNextPacket Timeout event
 */
static void OnCertifTxNextPacketTimerEvent( void* context )
{
 800c334:	b510      	push	{r4, lr}
    certif_tx( );
 800c336:	f7ff ffa3 	bl	800c280 <certif_tx>

}
 800c33a:	bd10      	pop	{r4, pc}

0800c33c <certif_running>:
    return certifParam.Running;
 800c33c:	4b01      	ldr	r3, [pc, #4]	; (800c344 <certif_running+0x8>)
 800c33e:	7818      	ldrb	r0, [r3, #0]
}
 800c340:	4770      	bx	lr
 800c342:	46c0      	nop			; (mov r8, r8)
 800c344:	20001066 	.word	0x20001066

0800c348 <certif_DownLinkIncrement>:
    certifParam.DownLinkCounter++;
 800c348:	4b02      	ldr	r3, [pc, #8]	; (800c354 <certif_DownLinkIncrement+0xc>)
 800c34a:	33f6      	adds	r3, #246	; 0xf6
 800c34c:	881a      	ldrh	r2, [r3, #0]
 800c34e:	3201      	adds	r2, #1
 800c350:	801a      	strh	r2, [r3, #0]
}
 800c352:	4770      	bx	lr
 800c354:	20001066 	.word	0x20001066

0800c358 <certif_linkCheck>:
  certifParam.LinkCheck = true;
 800c358:	4b06      	ldr	r3, [pc, #24]	; (800c374 <certif_linkCheck+0x1c>)
 800c35a:	2101      	movs	r1, #1
 800c35c:	001a      	movs	r2, r3
 800c35e:	32f8      	adds	r2, #248	; 0xf8
 800c360:	7011      	strb	r1, [r2, #0]
  certifParam.DemodMargin = mlmeConfirm->DemodMargin;
 800c362:	001a      	movs	r2, r3
 800c364:	7a01      	ldrb	r1, [r0, #8]
 800c366:	32f9      	adds	r2, #249	; 0xf9
 800c368:	7011      	strb	r1, [r2, #0]
  certifParam.NbGateways = mlmeConfirm->NbGateways;
 800c36a:	7a42      	ldrb	r2, [r0, #9]
 800c36c:	33fa      	adds	r3, #250	; 0xfa
 800c36e:	701a      	strb	r2, [r3, #0]
}
 800c370:	4770      	bx	lr
 800c372:	46c0      	nop			; (mov r8, r8)
 800c374:	20001066 	.word	0x20001066

0800c378 <certif_rx>:
{
 800c378:	b5f0      	push	{r4, r5, r6, r7, lr}
  if( certifParam.Running == false )
 800c37a:	4c61      	ldr	r4, [pc, #388]	; (800c500 <certif_rx+0x188>)
{
 800c37c:	b08d      	sub	sp, #52	; 0x34
  if( certifParam.Running == false )
 800c37e:	7823      	ldrb	r3, [r4, #0]
{
 800c380:	0002      	movs	r2, r0
 800c382:	000d      	movs	r5, r1
  if( certifParam.Running == false )
 800c384:	2b00      	cmp	r3, #0
 800c386:	d143      	bne.n	800c410 <certif_rx+0x98>
      if( ( mcpsIndication->BufferSize == 4 ) &&
 800c388:	7b07      	ldrb	r7, [r0, #12]
 800c38a:	2f04      	cmp	r7, #4
 800c38c:	d13a      	bne.n	800c404 <certif_rx+0x8c>
          ( mcpsIndication->Buffer[0] == 0x01 ) &&
 800c38e:	6882      	ldr	r2, [r0, #8]
      if( ( mcpsIndication->BufferSize == 4 ) &&
 800c390:	7811      	ldrb	r1, [r2, #0]
 800c392:	2901      	cmp	r1, #1
 800c394:	d136      	bne.n	800c404 <certif_rx+0x8c>
          ( mcpsIndication->Buffer[0] == 0x01 ) &&
 800c396:	7851      	ldrb	r1, [r2, #1]
 800c398:	2901      	cmp	r1, #1
 800c39a:	d133      	bne.n	800c404 <certif_rx+0x8c>
          ( mcpsIndication->Buffer[1] == 0x01 ) &&
 800c39c:	7891      	ldrb	r1, [r2, #2]
 800c39e:	2901      	cmp	r1, #1
 800c3a0:	d130      	bne.n	800c404 <certif_rx+0x8c>
          ( mcpsIndication->Buffer[2] == 0x01 ) &&
 800c3a2:	78d6      	ldrb	r6, [r2, #3]
 800c3a4:	2e01      	cmp	r6, #1
 800c3a6:	d12d      	bne.n	800c404 <certif_rx+0x8c>
          IsTxConfirmed = LORAWAN_UNCONFIRMED_MSG;
 800c3a8:	4a56      	ldr	r2, [pc, #344]	; (800c504 <certif_rx+0x18c>)
          mibReq.Type = MIB_ADR;
 800c3aa:	ad04      	add	r5, sp, #16
          IsTxConfirmed = LORAWAN_UNCONFIRMED_MSG;
 800c3ac:	7013      	strb	r3, [r2, #0]
          certifParam.DataBufferSize = 2;
 800c3ae:	2202      	movs	r2, #2
 800c3b0:	70e2      	strb	r2, [r4, #3]
          certifParam.DownLinkCounter = 0;
 800c3b2:	0022      	movs	r2, r4
 800c3b4:	32f6      	adds	r2, #246	; 0xf6
 800c3b6:	8013      	strh	r3, [r2, #0]
          certifParam.LinkCheck = false;
 800c3b8:	0022      	movs	r2, r4
 800c3ba:	32f8      	adds	r2, #248	; 0xf8
 800c3bc:	7013      	strb	r3, [r2, #0]
          certifParam.DemodMargin = 0;
 800c3be:	0022      	movs	r2, r4
 800c3c0:	32f9      	adds	r2, #249	; 0xf9
 800c3c2:	7013      	strb	r3, [r2, #0]
          certifParam.NbGateways = 0;
 800c3c4:	0022      	movs	r2, r4
          LoRaMacMibGetRequestConfirm( &mibReq );
 800c3c6:	0028      	movs	r0, r5
          certifParam.NbGateways = 0;
 800c3c8:	32fa      	adds	r2, #250	; 0xfa
 800c3ca:	7013      	strb	r3, [r2, #0]
          mibReq.Type = MIB_ADR;
 800c3cc:	702f      	strb	r7, [r5, #0]
          certifParam.Running = true;
 800c3ce:	7026      	strb	r6, [r4, #0]
          certifParam.State = 1;
 800c3d0:	7066      	strb	r6, [r4, #1]
          LoRaMacMibGetRequestConfirm( &mibReq );
 800c3d2:	f7fd fadb 	bl	800998c <LoRaMacMibGetRequestConfirm>
          AdrEnableInit=mibReq.Param.AdrEnable;
 800c3d6:	792b      	ldrb	r3, [r5, #4]
 800c3d8:	4a4a      	ldr	r2, [pc, #296]	; (800c504 <certif_rx+0x18c>)
          LoRaMacMibSetRequestConfirm( &mibReq );
 800c3da:	0028      	movs	r0, r5
          AdrEnableInit=mibReq.Param.AdrEnable;
 800c3dc:	7713      	strb	r3, [r2, #28]
          mibReq.Type = MIB_ADR;
 800c3de:	702f      	strb	r7, [r5, #0]
          mibReq.Param.AdrEnable = true;
 800c3e0:	712e      	strb	r6, [r5, #4]
          LoRaMacMibSetRequestConfirm( &mibReq );
 800c3e2:	f7fd fbaf 	bl	8009b44 <LoRaMacMibSetRequestConfirm>
        TimerInit( &CertifTxNextPacketTimer, OnCertifTxNextPacketTimerEvent );
 800c3e6:	4b47      	ldr	r3, [pc, #284]	; (800c504 <certif_rx+0x18c>)
 800c3e8:	4947      	ldr	r1, [pc, #284]	; (800c508 <certif_rx+0x190>)
 800c3ea:	1d1d      	adds	r5, r3, #4
 800c3ec:	0028      	movs	r0, r5
 800c3ee:	f000 fc7b 	bl	800cce8 <TimerInit>
        TimerSetValue( &CertifTxNextPacketTimer,  TEST_TX_DUTYCYCLE); 
 800c3f2:	4946      	ldr	r1, [pc, #280]	; (800c50c <certif_rx+0x194>)
 800c3f4:	0028      	movs	r0, r5
 800c3f6:	f000 fd31 	bl	800ce5c <TimerSetValue>
        certif_tx( );
 800c3fa:	f7ff ff41 	bl	800c280 <certif_tx>
    if ( certifParam.Running == false )
 800c3fe:	7823      	ldrb	r3, [r4, #0]
 800c400:	2b00      	cmp	r3, #0
 800c402:	d103      	bne.n	800c40c <certif_rx+0x94>
      TimerStop( &CertifTxNextPacketTimer );
 800c404:	483f      	ldr	r0, [pc, #252]	; (800c504 <certif_rx+0x18c>)
 800c406:	3004      	adds	r0, #4
 800c408:	f000 fcf4 	bl	800cdf4 <TimerStop>
}
 800c40c:	b00d      	add	sp, #52	; 0x34
 800c40e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      certifParam.State = mcpsIndication->Buffer[0];
 800c410:	6883      	ldr	r3, [r0, #8]
 800c412:	7818      	ldrb	r0, [r3, #0]
 800c414:	7060      	strb	r0, [r4, #1]
      switch( certifParam.State )
 800c416:	2808      	cmp	r0, #8
 800c418:	d8f1      	bhi.n	800c3fe <certif_rx+0x86>
 800c41a:	f7f3 fe87 	bl	800012c <__gnu_thumb1_case_uqi>
 800c41e:	1305      	.short	0x1305
 800c420:	2e201b16 	.word	0x2e201b16
 800c424:	4832      	.short	0x4832
 800c426:	6d          	.byte	0x6d
 800c427:	00          	.byte	0x00
          certifParam.DownLinkCounter = 0;
 800c428:	0022      	movs	r2, r4
 800c42a:	2300      	movs	r3, #0
 800c42c:	32f6      	adds	r2, #246	; 0xf6
          mibReq.Type = MIB_ADR;
 800c42e:	a804      	add	r0, sp, #16
          certifParam.DownLinkCounter = 0;
 800c430:	8013      	strh	r3, [r2, #0]
          certifParam.Running = false;
 800c432:	7023      	strb	r3, [r4, #0]
          mibReq.Type = MIB_ADR;
 800c434:	3304      	adds	r3, #4
 800c436:	7003      	strb	r3, [r0, #0]
          mibReq.Param.AdrEnable = AdrEnableInit;
 800c438:	4b32      	ldr	r3, [pc, #200]	; (800c504 <certif_rx+0x18c>)
 800c43a:	7f1b      	ldrb	r3, [r3, #28]
 800c43c:	7103      	strb	r3, [r0, #4]
          LoRaMacMibSetRequestConfirm( &mibReq );
 800c43e:	f7fd fb81 	bl	8009b44 <LoRaMacMibSetRequestConfirm>
 800c442:	e7dc      	b.n	800c3fe <certif_rx+0x86>
          certifParam.DataBufferSize = 2;
 800c444:	2302      	movs	r3, #2
 800c446:	70e3      	strb	r3, [r4, #3]
          break;
 800c448:	e7d9      	b.n	800c3fe <certif_rx+0x86>
          IsTxConfirmed = LORAWAN_CONFIRMED_MSG;
 800c44a:	2301      	movs	r3, #1
 800c44c:	4a2d      	ldr	r2, [pc, #180]	; (800c504 <certif_rx+0x18c>)
 800c44e:	7013      	strb	r3, [r2, #0]
          certifParam.State = 1;
 800c450:	7063      	strb	r3, [r4, #1]
          break;
 800c452:	e7d4      	b.n	800c3fe <certif_rx+0x86>
          IsTxConfirmed = LORAWAN_UNCONFIRMED_MSG;
 800c454:	2200      	movs	r2, #0
 800c456:	4b2b      	ldr	r3, [pc, #172]	; (800c504 <certif_rx+0x18c>)
 800c458:	701a      	strb	r2, [r3, #0]
          certifParam.State = 1;
 800c45a:	2301      	movs	r3, #1
 800c45c:	e7f8      	b.n	800c450 <certif_rx+0xd8>
          certifParam.DataBufferSize = mcpsIndication->BufferSize;
 800c45e:	7b15      	ldrb	r5, [r2, #12]
          certifParam.DataBuffer[0] = 4;
 800c460:	2204      	movs	r2, #4
 800c462:	7122      	strb	r2, [r4, #4]
          for( uint8_t i = 1; i < certifParam.DataBufferSize; i++ )
 800c464:	2200      	movs	r2, #0
          certifParam.DataBufferSize = mcpsIndication->BufferSize;
 800c466:	70e5      	strb	r5, [r4, #3]
 800c468:	3201      	adds	r2, #1
          for( uint8_t i = 1; i < certifParam.DataBufferSize; i++ )
 800c46a:	b2d1      	uxtb	r1, r2
 800c46c:	428d      	cmp	r5, r1
 800c46e:	d9c6      	bls.n	800c3fe <certif_rx+0x86>
              certifParam.DataBuffer[i] = mcpsIndication->Buffer[i] + 1;
 800c470:	5c98      	ldrb	r0, [r3, r2]
 800c472:	18a1      	adds	r1, r4, r2
 800c474:	3001      	adds	r0, #1
 800c476:	7108      	strb	r0, [r1, #4]
 800c478:	e7f6      	b.n	800c468 <certif_rx+0xf0>
          mlmeReq.Type = MLME_LINK_CHECK;
 800c47a:	2303      	movs	r3, #3
 800c47c:	a804      	add	r0, sp, #16
          mlmeReq.Type = MLME_DEVICE_TIME;
 800c47e:	7003      	strb	r3, [r0, #0]
 800c480:	e012      	b.n	800c4a8 <certif_rx+0x130>
            certifParam.DownLinkCounter = 0;
 800c482:	0023      	movs	r3, r4
 800c484:	2600      	movs	r6, #0
 800c486:	33f6      	adds	r3, #246	; 0xf6
 800c488:	801e      	strh	r6, [r3, #0]
            mibReq.Type = MIB_ADR;
 800c48a:	2304      	movs	r3, #4
 800c48c:	a804      	add	r0, sp, #16
 800c48e:	7003      	strb	r3, [r0, #0]
            mibReq.Param.AdrEnable = AdrEnableInit;
 800c490:	4b1c      	ldr	r3, [pc, #112]	; (800c504 <certif_rx+0x18c>)
            certifParam.Running = false;
 800c492:	7026      	strb	r6, [r4, #0]
            mibReq.Param.AdrEnable = AdrEnableInit;
 800c494:	7f1b      	ldrb	r3, [r3, #28]
 800c496:	7103      	strb	r3, [r0, #4]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800c498:	f7fd fb54 	bl	8009b44 <LoRaMacMibSetRequestConfirm>
            mlmeReq.Type = MLME_JOIN;
 800c49c:	466b      	mov	r3, sp
            mlmeReq.Req.Join = *JoinParameters;
 800c49e:	466a      	mov	r2, sp
            LoRaMacMlmeRequest( &mlmeReq );
 800c4a0:	4668      	mov	r0, sp
            mlmeReq.Type = MLME_JOIN;
 800c4a2:	701e      	strb	r6, [r3, #0]
            mlmeReq.Req.Join = *JoinParameters;
 800c4a4:	782b      	ldrb	r3, [r5, #0]
 800c4a6:	7113      	strb	r3, [r2, #4]
          LoRaMacMlmeRequest( &mlmeReq );
 800c4a8:	f7fd fd82 	bl	8009fb0 <LoRaMacMlmeRequest>
 800c4ac:	e7a7      	b.n	800c3fe <certif_rx+0x86>
          if( mcpsIndication->BufferSize == 3 )
 800c4ae:	7b12      	ldrb	r2, [r2, #12]
 800c4b0:	2a03      	cmp	r2, #3
 800c4b2:	d10a      	bne.n	800c4ca <certif_rx+0x152>
              mlmeReq.Type = MLME_TXCW;
 800c4b4:	a804      	add	r0, sp, #16
 800c4b6:	3201      	adds	r2, #1
 800c4b8:	7002      	strb	r2, [r0, #0]
              mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 800c4ba:	785a      	ldrb	r2, [r3, #1]
 800c4bc:	789b      	ldrb	r3, [r3, #2]
 800c4be:	0212      	lsls	r2, r2, #8
 800c4c0:	4313      	orrs	r3, r2
 800c4c2:	8083      	strh	r3, [r0, #4]
              LoRaMacMlmeRequest( &mlmeReq );
 800c4c4:	f7fd fd74 	bl	8009fb0 <LoRaMacMlmeRequest>
 800c4c8:	e7c7      	b.n	800c45a <certif_rx+0xe2>
          else if( mcpsIndication->BufferSize == 7 )
 800c4ca:	2a07      	cmp	r2, #7
 800c4cc:	d1c5      	bne.n	800c45a <certif_rx+0xe2>
              mlmeReq.Type = MLME_TXCW_1;
 800c4ce:	a804      	add	r0, sp, #16
 800c4d0:	3a02      	subs	r2, #2
 800c4d2:	7002      	strb	r2, [r0, #0]
              mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 800c4d4:	7859      	ldrb	r1, [r3, #1]
 800c4d6:	789a      	ldrb	r2, [r3, #2]
 800c4d8:	0209      	lsls	r1, r1, #8
 800c4da:	430a      	orrs	r2, r1
 800c4dc:	8082      	strh	r2, [r0, #4]
              mlmeReq.Req.TxCw.Frequency = ( uint32_t )( ( mcpsIndication->Buffer[3] << 16 ) | ( mcpsIndication->Buffer[4] << 8 ) | mcpsIndication->Buffer[5] ) * 100;
 800c4de:	78da      	ldrb	r2, [r3, #3]
 800c4e0:	7919      	ldrb	r1, [r3, #4]
 800c4e2:	0412      	lsls	r2, r2, #16
 800c4e4:	0209      	lsls	r1, r1, #8
 800c4e6:	430a      	orrs	r2, r1
 800c4e8:	7959      	ldrb	r1, [r3, #5]
 800c4ea:	430a      	orrs	r2, r1
 800c4ec:	2164      	movs	r1, #100	; 0x64
 800c4ee:	434a      	muls	r2, r1
 800c4f0:	6082      	str	r2, [r0, #8]
              mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[6];
 800c4f2:	799b      	ldrb	r3, [r3, #6]
 800c4f4:	7303      	strb	r3, [r0, #12]
 800c4f6:	e7e5      	b.n	800c4c4 <certif_rx+0x14c>
          mlmeReq.Type = MLME_DEVICE_TIME;
 800c4f8:	a804      	add	r0, sp, #16
 800c4fa:	2309      	movs	r3, #9
 800c4fc:	e7bf      	b.n	800c47e <certif_rx+0x106>
 800c4fe:	46c0      	nop			; (mov r8, r8)
 800c500:	20001066 	.word	0x20001066
 800c504:	20001048 	.word	0x20001048
 800c508:	0800c335 	.word	0x0800c335
 800c50c:	00001388 	.word	0x00001388

0800c510 <MlmeIndication>:
    MibRequestConfirm_t mibReq;
#endif /* LORAMAC_CLASSB_ENABLED */

    TVL2( PRINTNOW(); PRINTF("APP> MLMEInd STATUS: %s\r\n", EventInfoStatusStrings[MlmeIndication->Status] );    )

    switch( MlmeIndication->MlmeIndication )
 800c510:	7803      	ldrb	r3, [r0, #0]
{
 800c512:	b510      	push	{r4, lr}
    switch( MlmeIndication->MlmeIndication )
 800c514:	2b06      	cmp	r3, #6
 800c516:	d103      	bne.n	800c520 <MlmeIndication+0x10>
    {
        case MLME_SCHEDULE_UPLINK:
        {
            // The MAC signals that we shall provide an uplink as soon as possible
            LoRaMainCallbacks->LORA_TxNeeded( );			
 800c518:	4b02      	ldr	r3, [pc, #8]	; (800c524 <MlmeIndication+0x14>)
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	69db      	ldr	r3, [r3, #28]
 800c51e:	4798      	blx	r3
        }
#endif /* LORAMAC_CLASSB_ENABLED */
        default:
            break;
    }
}
 800c520:	bd10      	pop	{r4, pc}
 800c522:	46c0      	nop			; (mov r8, r8)
 800c524:	20001164 	.word	0x20001164

0800c528 <McpsIndication>:
{
 800c528:	b513      	push	{r0, r1, r4, lr}
    if( mcpsIndication->Status != LORAMAC_EVENT_INFO_STATUS_OK )
 800c52a:	7843      	ldrb	r3, [r0, #1]
{
 800c52c:	0004      	movs	r4, r0
    if( mcpsIndication->Status != LORAMAC_EVENT_INFO_STATUS_OK )
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d117      	bne.n	800c562 <McpsIndication+0x3a>
    if( mcpsIndication->FramePending == true )
 800c532:	7943      	ldrb	r3, [r0, #5]
 800c534:	2b01      	cmp	r3, #1
 800c536:	d103      	bne.n	800c540 <McpsIndication+0x18>
        LoRaMainCallbacks->LORA_TxNeeded( );
 800c538:	4b10      	ldr	r3, [pc, #64]	; (800c57c <McpsIndication+0x54>)
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	69db      	ldr	r3, [r3, #28]
 800c53e:	4798      	blx	r3
    if (certif_running() == true )
 800c540:	f7ff fefc 	bl	800c33c <certif_running>
 800c544:	2800      	cmp	r0, #0
 800c546:	d001      	beq.n	800c54c <McpsIndication+0x24>
      certif_DownLinkIncrement( );
 800c548:	f7ff fefe 	bl	800c348 <certif_DownLinkIncrement>
    if( mcpsIndication->RxData == true )
 800c54c:	7b63      	ldrb	r3, [r4, #13]
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d007      	beq.n	800c562 <McpsIndication+0x3a>
      switch( mcpsIndication->Port )
 800c552:	78e3      	ldrb	r3, [r4, #3]
 800c554:	4909      	ldr	r1, [pc, #36]	; (800c57c <McpsIndication+0x54>)
 800c556:	2be0      	cmp	r3, #224	; 0xe0
 800c558:	d104      	bne.n	800c564 <McpsIndication+0x3c>
          certif_rx( mcpsIndication, &JoinParameters );
 800c55a:	3104      	adds	r1, #4
 800c55c:	0020      	movs	r0, r4
 800c55e:	f7ff ff0b 	bl	800c378 <certif_rx>
}
 800c562:	bd13      	pop	{r0, r1, r4, pc}
          AppData.Port = mcpsIndication->Port;
 800c564:	466a      	mov	r2, sp
 800c566:	7153      	strb	r3, [r2, #5]
          AppData.BuffSize = mcpsIndication->BufferSize;
 800c568:	7b23      	ldrb	r3, [r4, #12]
          LoRaMainCallbacks->LORA_RxData( &AppData );
 800c56a:	4668      	mov	r0, sp
          AppData.BuffSize = mcpsIndication->BufferSize;
 800c56c:	7113      	strb	r3, [r2, #4]
          AppData.Buff = mcpsIndication->Buffer;
 800c56e:	68a3      	ldr	r3, [r4, #8]
 800c570:	9300      	str	r3, [sp, #0]
          LoRaMainCallbacks->LORA_RxData( &AppData );
 800c572:	680b      	ldr	r3, [r1, #0]
 800c574:	691b      	ldr	r3, [r3, #16]
 800c576:	4798      	blx	r3
 800c578:	e7f3      	b.n	800c562 <McpsIndication+0x3a>
 800c57a:	46c0      	nop			; (mov r8, r8)
 800c57c:	20001164 	.word	0x20001164

0800c580 <McpsConfirm>:
{

    MibRequestConfirm_t mibGet;
    MibRequestConfirm_t mibReq;

    mibReq.Type = MIB_DEVICE_CLASS;
 800c580:	2300      	movs	r3, #0
{
 800c582:	b500      	push	{lr}
 800c584:	b091      	sub	sp, #68	; 0x44
    mibReq.Type = MIB_DEVICE_CLASS;
 800c586:	a808      	add	r0, sp, #32
 800c588:	7003      	strb	r3, [r0, #0]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800c58a:	f7fd f9ff 	bl	800998c <LoRaMacMibGetRequestConfirm>
                             "ABC"[mibReq.Param.Class], \
                             AppData.Port, \
                             AppData.BuffSize, \
                             mcpsConfirm->TxPower );)

    mibGet.Type  = MIB_CHANNELS_MASK;
 800c58e:	2324      	movs	r3, #36	; 0x24
 800c590:	466a      	mov	r2, sp
    if( LoRaMacMibGetRequestConfirm( &mibGet ) == LORAMAC_STATUS_OK )
 800c592:	4668      	mov	r0, sp
    mibGet.Type  = MIB_CHANNELS_MASK;
 800c594:	7013      	strb	r3, [r2, #0]
    if( LoRaMacMibGetRequestConfirm( &mibGet ) == LORAMAC_STATUS_OK )
 800c596:	f7fd f9f9 	bl	800998c <LoRaMacMibGetRequestConfirm>
}
 800c59a:	b011      	add	sp, #68	; 0x44
 800c59c:	bd00      	pop	{pc}
	...

0800c5a0 <LORA_Init>:
{
 800c5a0:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t devEui[] = LORAWAN_DEVICE_EUI;
 800c5a2:	4e66      	ldr	r6, [pc, #408]	; (800c73c <LORA_Init+0x19c>)
{
 800c5a4:	b095      	sub	sp, #84	; 0x54
  uint8_t devEui[] = LORAWAN_DEVICE_EUI;
 800c5a6:	af10      	add	r7, sp, #64	; 0x40
{
 800c5a8:	0004      	movs	r4, r0
 800c5aa:	000d      	movs	r5, r1
  uint8_t devEui[] = LORAWAN_DEVICE_EUI;
 800c5ac:	2208      	movs	r2, #8
 800c5ae:	0031      	movs	r1, r6
 800c5b0:	0038      	movs	r0, r7
 800c5b2:	f002 fa3d 	bl	800ea30 <memcpy>
  uint8_t joinEui[] = LORAWAN_JOIN_EUI;
 800c5b6:	0031      	movs	r1, r6
 800c5b8:	2208      	movs	r2, #8
 800c5ba:	3108      	adds	r1, #8
 800c5bc:	a812      	add	r0, sp, #72	; 0x48
 800c5be:	f002 fa37 	bl	800ea30 <memcpy>
  LoRaParamInit = LoRaParam;
 800c5c2:	4e5f      	ldr	r6, [pc, #380]	; (800c740 <LORA_Init+0x1a0>)
 800c5c4:	60b5      	str	r5, [r6, #8]
  LoRaMainCallbacks = callbacks;
 800c5c6:	6034      	str	r4, [r6, #0]
  PPRINTF( "ABP\n\r"); 
 800c5c8:	485e      	ldr	r0, [pc, #376]	; (800c744 <LORA_Init+0x1a4>)
 800c5ca:	f000 fca9 	bl	800cf20 <TraceSend>
 800c5ce:	2800      	cmp	r0, #0
 800c5d0:	d1fa      	bne.n	800c5c8 <LORA_Init+0x28>
  PPRINTF( "DevEui= %02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X\n\r", HEX8(devEui));
 800c5d2:	79f8      	ldrb	r0, [r7, #7]
 800c5d4:	78bb      	ldrb	r3, [r7, #2]
 800c5d6:	787a      	ldrb	r2, [r7, #1]
 800c5d8:	7839      	ldrb	r1, [r7, #0]
 800c5da:	9004      	str	r0, [sp, #16]
 800c5dc:	79b8      	ldrb	r0, [r7, #6]
 800c5de:	9003      	str	r0, [sp, #12]
 800c5e0:	7978      	ldrb	r0, [r7, #5]
 800c5e2:	9002      	str	r0, [sp, #8]
 800c5e4:	7938      	ldrb	r0, [r7, #4]
 800c5e6:	9001      	str	r0, [sp, #4]
 800c5e8:	78f8      	ldrb	r0, [r7, #3]
 800c5ea:	9000      	str	r0, [sp, #0]
 800c5ec:	4856      	ldr	r0, [pc, #344]	; (800c748 <LORA_Init+0x1a8>)
 800c5ee:	f000 fc97 	bl	800cf20 <TraceSend>
 800c5f2:	2800      	cmp	r0, #0
 800c5f4:	d1ed      	bne.n	800c5d2 <LORA_Init+0x32>
  PPRINTF( "DevAdd=  %08X\n\r", DevAddr) ;
 800c5f6:	4955      	ldr	r1, [pc, #340]	; (800c74c <LORA_Init+0x1ac>)
 800c5f8:	4855      	ldr	r0, [pc, #340]	; (800c750 <LORA_Init+0x1b0>)
 800c5fa:	f000 fc91 	bl	800cf20 <TraceSend>
 800c5fe:	2800      	cmp	r0, #0
 800c600:	d1f9      	bne.n	800c5f6 <LORA_Init+0x56>
  PPRINTF( "NwkSKey= %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\n\r", HEX16(NwkSEncKey));
 800c602:	4854      	ldr	r0, [pc, #336]	; (800c754 <LORA_Init+0x1b4>)
 800c604:	7bc4      	ldrb	r4, [r0, #15]
 800c606:	7883      	ldrb	r3, [r0, #2]
 800c608:	7842      	ldrb	r2, [r0, #1]
 800c60a:	7801      	ldrb	r1, [r0, #0]
 800c60c:	940c      	str	r4, [sp, #48]	; 0x30
 800c60e:	7b84      	ldrb	r4, [r0, #14]
 800c610:	940b      	str	r4, [sp, #44]	; 0x2c
 800c612:	7b44      	ldrb	r4, [r0, #13]
 800c614:	940a      	str	r4, [sp, #40]	; 0x28
 800c616:	7b04      	ldrb	r4, [r0, #12]
 800c618:	9409      	str	r4, [sp, #36]	; 0x24
 800c61a:	7ac4      	ldrb	r4, [r0, #11]
 800c61c:	9408      	str	r4, [sp, #32]
 800c61e:	7a84      	ldrb	r4, [r0, #10]
 800c620:	9407      	str	r4, [sp, #28]
 800c622:	7a44      	ldrb	r4, [r0, #9]
 800c624:	9406      	str	r4, [sp, #24]
 800c626:	7a04      	ldrb	r4, [r0, #8]
 800c628:	9405      	str	r4, [sp, #20]
 800c62a:	79c4      	ldrb	r4, [r0, #7]
 800c62c:	9404      	str	r4, [sp, #16]
 800c62e:	7984      	ldrb	r4, [r0, #6]
 800c630:	9403      	str	r4, [sp, #12]
 800c632:	7944      	ldrb	r4, [r0, #5]
 800c634:	9402      	str	r4, [sp, #8]
 800c636:	7904      	ldrb	r4, [r0, #4]
 800c638:	9401      	str	r4, [sp, #4]
 800c63a:	78c0      	ldrb	r0, [r0, #3]
 800c63c:	9000      	str	r0, [sp, #0]
 800c63e:	4846      	ldr	r0, [pc, #280]	; (800c758 <LORA_Init+0x1b8>)
 800c640:	f000 fc6e 	bl	800cf20 <TraceSend>
 800c644:	2800      	cmp	r0, #0
 800c646:	d1dc      	bne.n	800c602 <LORA_Init+0x62>
  PPRINTF( "AppSKey= %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\n\r", HEX16(AppSKey));
 800c648:	4c42      	ldr	r4, [pc, #264]	; (800c754 <LORA_Init+0x1b4>)
 800c64a:	7fe0      	ldrb	r0, [r4, #31]
 800c64c:	7ca3      	ldrb	r3, [r4, #18]
 800c64e:	7c62      	ldrb	r2, [r4, #17]
 800c650:	7c21      	ldrb	r1, [r4, #16]
 800c652:	900c      	str	r0, [sp, #48]	; 0x30
 800c654:	7fa0      	ldrb	r0, [r4, #30]
 800c656:	900b      	str	r0, [sp, #44]	; 0x2c
 800c658:	7f60      	ldrb	r0, [r4, #29]
 800c65a:	900a      	str	r0, [sp, #40]	; 0x28
 800c65c:	7f20      	ldrb	r0, [r4, #28]
 800c65e:	9009      	str	r0, [sp, #36]	; 0x24
 800c660:	7ee0      	ldrb	r0, [r4, #27]
 800c662:	9008      	str	r0, [sp, #32]
 800c664:	7ea0      	ldrb	r0, [r4, #26]
 800c666:	9007      	str	r0, [sp, #28]
 800c668:	7e60      	ldrb	r0, [r4, #25]
 800c66a:	9006      	str	r0, [sp, #24]
 800c66c:	7e20      	ldrb	r0, [r4, #24]
 800c66e:	9005      	str	r0, [sp, #20]
 800c670:	7de0      	ldrb	r0, [r4, #23]
 800c672:	9004      	str	r0, [sp, #16]
 800c674:	7da0      	ldrb	r0, [r4, #22]
 800c676:	9003      	str	r0, [sp, #12]
 800c678:	7d60      	ldrb	r0, [r4, #21]
 800c67a:	9002      	str	r0, [sp, #8]
 800c67c:	7d20      	ldrb	r0, [r4, #20]
 800c67e:	9001      	str	r0, [sp, #4]
 800c680:	7ce0      	ldrb	r0, [r4, #19]
 800c682:	9000      	str	r0, [sp, #0]
 800c684:	4835      	ldr	r0, [pc, #212]	; (800c75c <LORA_Init+0x1bc>)
 800c686:	f000 fc4b 	bl	800cf20 <TraceSend>
 800c68a:	900f      	str	r0, [sp, #60]	; 0x3c
 800c68c:	2800      	cmp	r0, #0
 800c68e:	d1db      	bne.n	800c648 <LORA_Init+0xa8>
  LoRaMacInitialization( &LoRaMacPrimitives, &LoRaMacCallbacks, LORAMAC_REGION_AS923 );
 800c690:	0031      	movs	r1, r6
 800c692:	311c      	adds	r1, #28
 800c694:	0008      	movs	r0, r1
  LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800c696:	4b32      	ldr	r3, [pc, #200]	; (800c760 <LORA_Init+0x1c0>)
  mibReq.Type = MIB_DEV_EUI;
 800c698:	0035      	movs	r5, r6
  LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800c69a:	60f3      	str	r3, [r6, #12]
  LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800c69c:	4b31      	ldr	r3, [pc, #196]	; (800c764 <LORA_Init+0x1c4>)
  LoRaMacInitialization( &LoRaMacPrimitives, &LoRaMacCallbacks, LORAMAC_REGION_AS923 );
 800c69e:	3810      	subs	r0, #16
  LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800c6a0:	6133      	str	r3, [r6, #16]
  LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800c6a2:	4b31      	ldr	r3, [pc, #196]	; (800c768 <LORA_Init+0x1c8>)
  mibReq.Type = MIB_DEV_EUI;
 800c6a4:	352c      	adds	r5, #44	; 0x2c
  LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800c6a6:	6173      	str	r3, [r6, #20]
  LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800c6a8:	4b30      	ldr	r3, [pc, #192]	; (800c76c <LORA_Init+0x1cc>)
 800c6aa:	61b3      	str	r3, [r6, #24]
  LoRaMacCallbacks.GetBatteryLevel = LoRaMainCallbacks->BoardGetBatteryLevel;
 800c6ac:	6833      	ldr	r3, [r6, #0]
 800c6ae:	681a      	ldr	r2, [r3, #0]
 800c6b0:	61f2      	str	r2, [r6, #28]
  LoRaMacCallbacks.GetTemperatureLevel = LoRaMainCallbacks->BoardGetTemperatureLevel;
 800c6b2:	685a      	ldr	r2, [r3, #4]
  LoRaMacCallbacks.MacProcessNotify = LoRaMainCallbacks->MacProcessNotify;
 800c6b4:	6a1b      	ldr	r3, [r3, #32]
  LoRaMacCallbacks.GetTemperatureLevel = LoRaMainCallbacks->BoardGetTemperatureLevel;
 800c6b6:	6232      	str	r2, [r6, #32]
  LoRaMacInitialization( &LoRaMacPrimitives, &LoRaMacCallbacks, LORAMAC_REGION_AS923 );
 800c6b8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  LoRaMacCallbacks.MacProcessNotify = LoRaMainCallbacks->MacProcessNotify;
 800c6ba:	62b3      	str	r3, [r6, #40]	; 0x28
  LoRaMacInitialization( &LoRaMacPrimitives, &LoRaMacCallbacks, LORAMAC_REGION_AS923 );
 800c6bc:	f7fc ff0e 	bl	80094dc <LoRaMacInitialization>
  mibReq.Type = MIB_DEV_EUI;
 800c6c0:	2302      	movs	r3, #2
  LoRaMacMibSetRequestConfirm( &mibReq );
 800c6c2:	0028      	movs	r0, r5
  mibReq.Type = MIB_DEV_EUI;
 800c6c4:	702b      	strb	r3, [r5, #0]
  mibReq.Param.DevEui = devEui;
 800c6c6:	6337      	str	r7, [r6, #48]	; 0x30
  LoRaMacMibSetRequestConfirm( &mibReq );
 800c6c8:	f7fd fa3c 	bl	8009b44 <LoRaMacMibSetRequestConfirm>
  mibReq.Type = MIB_JOIN_EUI;
 800c6cc:	2303      	movs	r3, #3
  LoRaMacMibSetRequestConfirm( &mibReq );
 800c6ce:	0028      	movs	r0, r5
  mibReq.Type = MIB_JOIN_EUI;
 800c6d0:	702b      	strb	r3, [r5, #0]
  mibReq.Param.JoinEui = joinEui;
 800c6d2:	ab12      	add	r3, sp, #72	; 0x48
 800c6d4:	6333      	str	r3, [r6, #48]	; 0x30
  LoRaMacMibSetRequestConfirm( &mibReq );
 800c6d6:	f7fd fa35 	bl	8009b44 <LoRaMacMibSetRequestConfirm>
  mibReq.Type = MIB_ADR;
 800c6da:	2304      	movs	r3, #4
 800c6dc:	702b      	strb	r3, [r5, #0]
  mibReq.Param.AdrEnable = LoRaParamInit->AdrEnable;
 800c6de:	68b3      	ldr	r3, [r6, #8]
  LoRaMacMibSetRequestConfirm( &mibReq );
 800c6e0:	0028      	movs	r0, r5
  mibReq.Param.AdrEnable = LoRaParamInit->AdrEnable;
 800c6e2:	781b      	ldrb	r3, [r3, #0]
 800c6e4:	712b      	strb	r3, [r5, #4]
  LoRaMacMibSetRequestConfirm( &mibReq );
 800c6e6:	f7fd fa2d 	bl	8009b44 <LoRaMacMibSetRequestConfirm>
  mibReq.Type = MIB_PUBLIC_NETWORK;
 800c6ea:	231d      	movs	r3, #29
 800c6ec:	702b      	strb	r3, [r5, #0]
  mibReq.Param.EnablePublicNetwork = LoRaParamInit->EnablePublicNetwork;
 800c6ee:	68b3      	ldr	r3, [r6, #8]
  LoRaMacMibSetRequestConfirm( &mibReq );
 800c6f0:	0028      	movs	r0, r5
  mibReq.Param.EnablePublicNetwork = LoRaParamInit->EnablePublicNetwork;
 800c6f2:	789b      	ldrb	r3, [r3, #2]
 800c6f4:	712b      	strb	r3, [r5, #4]
  LoRaMacMibSetRequestConfirm( &mibReq );
 800c6f6:	f7fd fa25 	bl	8009b44 <LoRaMacMibSetRequestConfirm>
  mibReq.Type = MIB_APP_KEY;
 800c6fa:	2308      	movs	r3, #8
 800c6fc:	702b      	strb	r3, [r5, #0]
  mibReq.Param.AppKey = AppKey;
 800c6fe:	0023      	movs	r3, r4
  LoRaMacMibSetRequestConfirm( &mibReq );
 800c700:	0028      	movs	r0, r5
  mibReq.Param.AppKey = AppKey;
 800c702:	3320      	adds	r3, #32
 800c704:	6333      	str	r3, [r6, #48]	; 0x30
  LoRaMacMibSetRequestConfirm( &mibReq );
 800c706:	f7fd fa1d 	bl	8009b44 <LoRaMacMibSetRequestConfirm>
  mibReq.Type = MIB_NWK_KEY;
 800c70a:	2309      	movs	r3, #9
  mibReq.Param.NwkKey = NwkKey;
 800c70c:	3430      	adds	r4, #48	; 0x30
  LoRaMacMibSetRequestConfirm( &mibReq );
 800c70e:	0028      	movs	r0, r5
  mibReq.Type = MIB_NWK_KEY;
 800c710:	702b      	strb	r3, [r5, #0]
  mibReq.Param.NwkKey = NwkKey;
 800c712:	6334      	str	r4, [r6, #48]	; 0x30
  LoRaMacMibSetRequestConfirm( &mibReq );
 800c714:	f7fd fa16 	bl	8009b44 <LoRaMacMibSetRequestConfirm>
  mibReq.Type = MIB_DEVICE_CLASS;
 800c718:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  LoRaMacMibSetRequestConfirm( &mibReq );
 800c71a:	0028      	movs	r0, r5
  mibReq.Type = MIB_DEVICE_CLASS;
 800c71c:	702b      	strb	r3, [r5, #0]
  mibReq.Param.Class= CLASS_A;
 800c71e:	712b      	strb	r3, [r5, #4]
  LoRaMacMibSetRequestConfirm( &mibReq );
 800c720:	f7fd fa10 	bl	8009b44 <LoRaMacMibSetRequestConfirm>
  mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800c724:	2330      	movs	r3, #48	; 0x30
  LoRaMacMibSetRequestConfirm( &mibReq );
 800c726:	0028      	movs	r0, r5
  mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800c728:	702b      	strb	r3, [r5, #0]
  mibReq.Param.SystemMaxRxError = 20;
 800c72a:	3b1c      	subs	r3, #28
 800c72c:	6333      	str	r3, [r6, #48]	; 0x30
  LoRaMacMibSetRequestConfirm( &mibReq );
 800c72e:	f7fd fa09 	bl	8009b44 <LoRaMacMibSetRequestConfirm>
  LoRaMacStart( );
 800c732:	f7fd f8bf 	bl	80098b4 <LoRaMacStart>
}
 800c736:	b015      	add	sp, #84	; 0x54
 800c738:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c73a:	46c0      	nop			; (mov r8, r8)
 800c73c:	0800fab4 	.word	0x0800fab4
 800c740:	20001164 	.word	0x20001164
 800c744:	0800fba2 	.word	0x0800fba2
 800c748:	0800fba8 	.word	0x0800fba8
 800c74c:	14ef1417 	.word	0x14ef1417
 800c750:	0800fbda 	.word	0x0800fbda
 800c754:	2000005c 	.word	0x2000005c
 800c758:	0800fbea 	.word	0x0800fbea
 800c75c:	0800fc45 	.word	0x0800fc45
 800c760:	0800c581 	.word	0x0800c581
 800c764:	0800c529 	.word	0x0800c529
 800c768:	0800c809 	.word	0x0800c809
 800c76c:	0800c511 	.word	0x0800c511

0800c770 <LORA_Join>:
{
 800c770:	b570      	push	{r4, r5, r6, lr}
    JoinParameters = mlmeReq.Req.Join;
 800c772:	4d21      	ldr	r5, [pc, #132]	; (800c7f8 <LORA_Join+0x88>)
 800c774:	68ab      	ldr	r3, [r5, #8]
    mibReq.Type = MIB_NET_ID;
 800c776:	002c      	movs	r4, r5
    JoinParameters = mlmeReq.Req.Join;
 800c778:	785b      	ldrb	r3, [r3, #1]
    mibReq.Type = MIB_NET_ID;
 800c77a:	342c      	adds	r4, #44	; 0x2c
    JoinParameters = mlmeReq.Req.Join;
 800c77c:	712b      	strb	r3, [r5, #4]
    mibReq.Type = MIB_NET_ID;
 800c77e:	2305      	movs	r3, #5
 800c780:	7023      	strb	r3, [r4, #0]
    mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 800c782:	2300      	movs	r3, #0
    LoRaMacMibSetRequestConfirm( &mibReq );
 800c784:	0020      	movs	r0, r4
    mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 800c786:	632b      	str	r3, [r5, #48]	; 0x30
    LoRaMacMibSetRequestConfirm( &mibReq );
 800c788:	f7fd f9dc 	bl	8009b44 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_DEV_ADDR;
 800c78c:	2306      	movs	r3, #6
 800c78e:	7023      	strb	r3, [r4, #0]
    mibReq.Param.DevAddr = DevAddr;
 800c790:	4b1a      	ldr	r3, [pc, #104]	; (800c7fc <LORA_Join+0x8c>)
    LoRaMacMibSetRequestConfirm( &mibReq );
 800c792:	0020      	movs	r0, r4
    mibReq.Param.DevAddr = DevAddr;
 800c794:	632b      	str	r3, [r5, #48]	; 0x30
    LoRaMacMibSetRequestConfirm( &mibReq );
 800c796:	f7fd f9d5 	bl	8009b44 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_F_NWK_S_INT_KEY;
 800c79a:	230c      	movs	r3, #12
    mibReq.Param.FNwkSIntKey = FNwkSIntKey;
 800c79c:	4e18      	ldr	r6, [pc, #96]	; (800c800 <LORA_Join+0x90>)
    mibReq.Type = MIB_F_NWK_S_INT_KEY;
 800c79e:	7023      	strb	r3, [r4, #0]
    mibReq.Param.FNwkSIntKey = FNwkSIntKey;
 800c7a0:	0033      	movs	r3, r6
    LoRaMacMibSetRequestConfirm( &mibReq );
 800c7a2:	0020      	movs	r0, r4
    mibReq.Param.FNwkSIntKey = FNwkSIntKey;
 800c7a4:	3340      	adds	r3, #64	; 0x40
 800c7a6:	632b      	str	r3, [r5, #48]	; 0x30
    LoRaMacMibSetRequestConfirm( &mibReq );
 800c7a8:	f7fd f9cc 	bl	8009b44 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_S_NWK_S_INT_KEY;
 800c7ac:	230d      	movs	r3, #13
 800c7ae:	7023      	strb	r3, [r4, #0]
    mibReq.Param.SNwkSIntKey = SNwkSIntKey;
 800c7b0:	0033      	movs	r3, r6
    LoRaMacMibSetRequestConfirm( &mibReq );
 800c7b2:	0020      	movs	r0, r4
    mibReq.Param.SNwkSIntKey = SNwkSIntKey;
 800c7b4:	3350      	adds	r3, #80	; 0x50
 800c7b6:	632b      	str	r3, [r5, #48]	; 0x30
    LoRaMacMibSetRequestConfirm( &mibReq );
 800c7b8:	f7fd f9c4 	bl	8009b44 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_NWK_S_ENC_KEY;
 800c7bc:	230e      	movs	r3, #14
    LoRaMacMibSetRequestConfirm( &mibReq );
 800c7be:	0020      	movs	r0, r4
    mibReq.Param.NwkSEncKey = NwkSEncKey;
 800c7c0:	632e      	str	r6, [r5, #48]	; 0x30
    mibReq.Type = MIB_NWK_S_ENC_KEY;
 800c7c2:	7023      	strb	r3, [r4, #0]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800c7c4:	f7fd f9be 	bl	8009b44 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_APP_S_KEY;
 800c7c8:	230f      	movs	r3, #15
    mibReq.Param.AppSKey = AppSKey;
 800c7ca:	3610      	adds	r6, #16
    LoRaMacMibSetRequestConfirm( &mibReq );
 800c7cc:	0020      	movs	r0, r4
    mibReq.Param.AppSKey = AppSKey;
 800c7ce:	632e      	str	r6, [r5, #48]	; 0x30
    mibReq.Type = MIB_APP_S_KEY;
 800c7d0:	7023      	strb	r3, [r4, #0]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800c7d2:	f7fd f9b7 	bl	8009b44 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_NETWORK_ACTIVATION;
 800c7d6:	2301      	movs	r3, #1
    LoRaMacMibSetRequestConfirm( &mibReq );
 800c7d8:	0020      	movs	r0, r4
    mibReq.Type = MIB_NETWORK_ACTIVATION;
 800c7da:	7023      	strb	r3, [r4, #0]
    mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 800c7dc:	7123      	strb	r3, [r4, #4]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800c7de:	f7fd f9b1 	bl	8009b44 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 800c7e2:	2335      	movs	r3, #53	; 0x35
 800c7e4:	7023      	strb	r3, [r4, #0]
    mibReq.Param.AbpLrWanVersion = abpLrWanVersion;
 800c7e6:	4b07      	ldr	r3, [pc, #28]	; (800c804 <LORA_Join+0x94>)
    LoRaMacMibSetRequestConfirm( &mibReq );
 800c7e8:	0020      	movs	r0, r4
    mibReq.Param.AbpLrWanVersion = abpLrWanVersion;
 800c7ea:	632b      	str	r3, [r5, #48]	; 0x30
    LoRaMacMibSetRequestConfirm( &mibReq );
 800c7ec:	f7fd f9aa 	bl	8009b44 <LoRaMacMibSetRequestConfirm>
    LoRaMainCallbacks->LORA_HasJoined();
 800c7f0:	682b      	ldr	r3, [r5, #0]
 800c7f2:	695b      	ldr	r3, [r3, #20]
 800c7f4:	4798      	blx	r3
}
 800c7f6:	bd70      	pop	{r4, r5, r6, pc}
 800c7f8:	20001164 	.word	0x20001164
 800c7fc:	14ef1417 	.word	0x14ef1417
 800c800:	2000005c 	.word	0x2000005c
 800c804:	01000300 	.word	0x01000300

0800c808 <MlmeConfirm>:
    switch( mlmeConfirm->MlmeRequest )
 800c808:	7803      	ldrb	r3, [r0, #0]
{
 800c80a:	b510      	push	{r4, lr}
 800c80c:	0004      	movs	r4, r0
    switch( mlmeConfirm->MlmeRequest )
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d002      	beq.n	800c818 <MlmeConfirm+0x10>
 800c812:	2b03      	cmp	r3, #3
 800c814:	d00b      	beq.n	800c82e <MlmeConfirm+0x26>
}
 800c816:	bd10      	pop	{r4, pc}
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800c818:	7843      	ldrb	r3, [r0, #1]
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d104      	bne.n	800c828 <MlmeConfirm+0x20>
              LoRaMainCallbacks->LORA_HasJoined();
 800c81e:	4b09      	ldr	r3, [pc, #36]	; (800c844 <MlmeConfirm+0x3c>)
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	695b      	ldr	r3, [r3, #20]
 800c824:	4798      	blx	r3
 800c826:	e7f6      	b.n	800c816 <MlmeConfirm+0xe>
                LORA_Join();
 800c828:	f7ff ffa2 	bl	800c770 <LORA_Join>
 800c82c:	e7f3      	b.n	800c816 <MlmeConfirm+0xe>
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800c82e:	7843      	ldrb	r3, [r0, #1]
 800c830:	2b00      	cmp	r3, #0
 800c832:	d1f0      	bne.n	800c816 <MlmeConfirm+0xe>
                if (certif_running() == true )
 800c834:	f7ff fd82 	bl	800c33c <certif_running>
 800c838:	2800      	cmp	r0, #0
 800c83a:	d0ec      	beq.n	800c816 <MlmeConfirm+0xe>
                     certif_linkCheck( mlmeConfirm);
 800c83c:	0020      	movs	r0, r4
 800c83e:	f7ff fd8b 	bl	800c358 <certif_linkCheck>
}
 800c842:	e7e8      	b.n	800c816 <MlmeConfirm+0xe>
 800c844:	20001164 	.word	0x20001164

0800c848 <LORA_JoinStatus>:
{
 800c848:	b500      	push	{lr}
 800c84a:	b089      	sub	sp, #36	; 0x24
  mibReq.Type = MIB_NETWORK_ACTIVATION;
 800c84c:	2301      	movs	r3, #1
 800c84e:	466a      	mov	r2, sp
  LoRaMacMibGetRequestConfirm( &mibReq );
 800c850:	4668      	mov	r0, sp
  mibReq.Type = MIB_NETWORK_ACTIVATION;
 800c852:	7013      	strb	r3, [r2, #0]
  LoRaMacMibGetRequestConfirm( &mibReq );
 800c854:	f7fd f89a 	bl	800998c <LoRaMacMibGetRequestConfirm>
  if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 800c858:	466b      	mov	r3, sp
 800c85a:	7918      	ldrb	r0, [r3, #4]
 800c85c:	1e43      	subs	r3, r0, #1
 800c85e:	4198      	sbcs	r0, r3
    return LORA_RESET;
 800c860:	b2c0      	uxtb	r0, r0
}
 800c862:	b009      	add	sp, #36	; 0x24
 800c864:	bd00      	pop	{pc}
	...

0800c868 <LORA_send>:
{
 800c868:	b570      	push	{r4, r5, r6, lr}
 800c86a:	b086      	sub	sp, #24
 800c86c:	0004      	movs	r4, r0
 800c86e:	000e      	movs	r6, r1
    if (certif_running() == true)
 800c870:	f7ff fd64 	bl	800c33c <certif_running>
 800c874:	0005      	movs	r5, r0
      return false;
 800c876:	2000      	movs	r0, #0
    if (certif_running() == true)
 800c878:	4285      	cmp	r5, r0
 800c87a:	d113      	bne.n	800c8a4 <LORA_send+0x3c>
    if( LoRaMacQueryTxPossible( AppData->BuffSize, &txInfo ) != LORAMAC_STATUS_OK )
 800c87c:	7920      	ldrb	r0, [r4, #4]
 800c87e:	a901      	add	r1, sp, #4
 800c880:	f7fd f820 	bl	80098c4 <LoRaMacQueryTxPossible>
 800c884:	ab02      	add	r3, sp, #8
 800c886:	4a13      	ldr	r2, [pc, #76]	; (800c8d4 <LORA_send+0x6c>)
 800c888:	2800      	cmp	r0, #0
 800c88a:	d00d      	beq.n	800c8a8 <LORA_send+0x40>
        mcpsReq.Req.Unconfirmed.Datarate = LoRaParamInit->TxDatarate;
 800c88c:	6892      	ldr	r2, [r2, #8]
        mcpsReq.Type = MCPS_UNCONFIRMED;
 800c88e:	701d      	strb	r5, [r3, #0]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800c890:	609d      	str	r5, [r3, #8]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800c892:	819d      	strh	r5, [r3, #12]
        mcpsReq.Req.Unconfirmed.Datarate = LoRaParamInit->TxDatarate;
 800c894:	7852      	ldrb	r2, [r2, #1]
            mcpsReq.Req.Confirmed.Datarate = LoRaParamInit->TxDatarate;
 800c896:	739a      	strb	r2, [r3, #14]
    if( LoRaMacMcpsRequest( &mcpsReq ) == LORAMAC_STATUS_OK )
 800c898:	0018      	movs	r0, r3
 800c89a:	f7fd fc43 	bl	800a124 <LoRaMacMcpsRequest>
 800c89e:	1e43      	subs	r3, r0, #1
 800c8a0:	4198      	sbcs	r0, r3
 800c8a2:	b2c0      	uxtb	r0, r0
}  
 800c8a4:	b006      	add	sp, #24
 800c8a6:	bd70      	pop	{r4, r5, r6, pc}
 800c8a8:	6892      	ldr	r2, [r2, #8]
 800c8aa:	7965      	ldrb	r5, [r4, #5]
 800c8ac:	7852      	ldrb	r2, [r2, #1]
 800c8ae:	7920      	ldrb	r0, [r4, #4]
 800c8b0:	6821      	ldr	r1, [r4, #0]
 800c8b2:	b252      	sxtb	r2, r2
        if( IsTxConfirmed == LORAWAN_UNCONFIRMED_MSG )
 800c8b4:	2e00      	cmp	r6, #0
 800c8b6:	d104      	bne.n	800c8c2 <LORA_send+0x5a>
            mcpsReq.Type = MCPS_UNCONFIRMED;
 800c8b8:	701e      	strb	r6, [r3, #0]
            mcpsReq.Req.Unconfirmed.fPort = AppData->Port;
 800c8ba:	711d      	strb	r5, [r3, #4]
            mcpsReq.Req.Unconfirmed.fBufferSize = AppData->BuffSize;
 800c8bc:	8198      	strh	r0, [r3, #12]
            mcpsReq.Req.Unconfirmed.fBuffer = AppData->Buff;
 800c8be:	6099      	str	r1, [r3, #8]
 800c8c0:	e7e9      	b.n	800c896 <LORA_send+0x2e>
            mcpsReq.Type = MCPS_CONFIRMED;
 800c8c2:	2401      	movs	r4, #1
            mcpsReq.Req.Confirmed.fBuffer = AppData->Buff;
 800c8c4:	6099      	str	r1, [r3, #8]
            mcpsReq.Req.Confirmed.NbTrials = 8;
 800c8c6:	2108      	movs	r1, #8
            mcpsReq.Type = MCPS_CONFIRMED;
 800c8c8:	701c      	strb	r4, [r3, #0]
            mcpsReq.Req.Confirmed.fPort = AppData->Port;
 800c8ca:	711d      	strb	r5, [r3, #4]
            mcpsReq.Req.Confirmed.fBufferSize = AppData->BuffSize;
 800c8cc:	8198      	strh	r0, [r3, #12]
            mcpsReq.Req.Confirmed.NbTrials = 8;
 800c8ce:	73d9      	strb	r1, [r3, #15]
 800c8d0:	e7e1      	b.n	800c896 <LORA_send+0x2e>
 800c8d2:	46c0      	nop			; (mov r8, r8)
 800c8d4:	20001164 	.word	0x20001164

0800c8d8 <LORA_RequestClass>:
{
 800c8d8:	b570      	push	{r4, r5, r6, lr}
 800c8da:	b088      	sub	sp, #32
  mibReq.Type = MIB_DEVICE_CLASS;
 800c8dc:	466b      	mov	r3, sp
 800c8de:	2600      	movs	r6, #0
{
 800c8e0:	0005      	movs	r5, r0
  LoRaMacMibGetRequestConfirm( &mibReq );
 800c8e2:	4668      	mov	r0, sp
  mibReq.Type = MIB_DEVICE_CLASS;
 800c8e4:	701e      	strb	r6, [r3, #0]
  LoRaMacMibGetRequestConfirm( &mibReq );
 800c8e6:	f7fd f851 	bl	800998c <LoRaMacMibGetRequestConfirm>
  currentClass = mibReq.Param.Class;
 800c8ea:	466b      	mov	r3, sp
 800c8ec:	791b      	ldrb	r3, [r3, #4]
  LoraErrorStatus Errorstatus = LORA_SUCCESS;
 800c8ee:	0034      	movs	r4, r6
  if (currentClass != newClass)
 800c8f0:	42ab      	cmp	r3, r5
 800c8f2:	d010      	beq.n	800c916 <LORA_RequestClass+0x3e>
    switch (newClass)
 800c8f4:	2d01      	cmp	r5, #1
 800c8f6:	d016      	beq.n	800c926 <LORA_RequestClass+0x4e>
 800c8f8:	42b5      	cmp	r5, r6
 800c8fa:	d003      	beq.n	800c904 <LORA_RequestClass+0x2c>
 800c8fc:	2d02      	cmp	r5, #2
 800c8fe:	d016      	beq.n	800c92e <LORA_RequestClass+0x56>
  LoraErrorStatus Errorstatus = LORA_SUCCESS;
 800c900:	0034      	movs	r4, r6
 800c902:	e008      	b.n	800c916 <LORA_RequestClass+0x3e>
        mibReq.Param.Class = CLASS_A;
 800c904:	466b      	mov	r3, sp
        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800c906:	4668      	mov	r0, sp
        mibReq.Param.Class = CLASS_A;
 800c908:	711d      	strb	r5, [r3, #4]
        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800c90a:	f7fd f91b 	bl	8009b44 <LoRaMacMibSetRequestConfirm>
 800c90e:	1e04      	subs	r4, r0, #0
 800c910:	d004      	beq.n	800c91c <LORA_RequestClass+0x44>
          Errorstatus = LORA_ERROR;
 800c912:	2401      	movs	r4, #1
 800c914:	4264      	negs	r4, r4
}
 800c916:	0020      	movs	r0, r4
 800c918:	b008      	add	sp, #32
 800c91a:	bd70      	pop	{r4, r5, r6, pc}
          LoRaMainCallbacks->LORA_ConfirmClass(CLASS_A);
 800c91c:	4b0b      	ldr	r3, [pc, #44]	; (800c94c <LORA_RequestClass+0x74>)
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	699b      	ldr	r3, [r3, #24]
          LoRaMainCallbacks->LORA_ConfirmClass(CLASS_C);
 800c922:	4798      	blx	r3
 800c924:	e7f7      	b.n	800c916 <LORA_RequestClass+0x3e>
        PRINTF( "warning: LORAMAC_CLASSB_ENABLED has not been defined at compilation\n\r");
 800c926:	480a      	ldr	r0, [pc, #40]	; (800c950 <LORA_RequestClass+0x78>)
 800c928:	f000 fafa 	bl	800cf20 <TraceSend>
 800c92c:	e7e8      	b.n	800c900 <LORA_RequestClass+0x28>
        if (currentClass != CLASS_A)
 800c92e:	1e5c      	subs	r4, r3, #1
 800c930:	41a3      	sbcs	r3, r4
 800c932:	425c      	negs	r4, r3
        mibReq.Param.Class = CLASS_C;
 800c934:	466b      	mov	r3, sp
        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800c936:	4668      	mov	r0, sp
        mibReq.Param.Class = CLASS_C;
 800c938:	711d      	strb	r5, [r3, #4]
        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800c93a:	f7fd f903 	bl	8009b44 <LoRaMacMibSetRequestConfirm>
 800c93e:	2800      	cmp	r0, #0
 800c940:	d1e7      	bne.n	800c912 <LORA_RequestClass+0x3a>
          LoRaMainCallbacks->LORA_ConfirmClass(CLASS_C);
 800c942:	4b02      	ldr	r3, [pc, #8]	; (800c94c <LORA_RequestClass+0x74>)
 800c944:	0028      	movs	r0, r5
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	699b      	ldr	r3, [r3, #24]
 800c94a:	e7ea      	b.n	800c922 <LORA_RequestClass+0x4a>
 800c94c:	20001164 	.word	0x20001164
 800c950:	0800fca0 	.word	0x0800fca0

0800c954 <LPM_SetOffMode>:

/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/
void LPM_SetOffMode(LPM_Id_t id, LPM_SetMode_t mode)
{
 800c954:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c956:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800c95a:	b672      	cpsid	i
  BACKUP_PRIMASK();
  
  DISABLE_IRQ( );
  
  
  switch(mode)
 800c95c:	2900      	cmp	r1, #0
 800c95e:	d008      	beq.n	800c972 <LPM_SetOffMode+0x1e>
 800c960:	2901      	cmp	r1, #1
 800c962:	d103      	bne.n	800c96c <LPM_SetOffMode+0x18>
  {
    case LPM_Disable:
    {
      OffModeDisable |= (uint32_t)id;
 800c964:	4b05      	ldr	r3, [pc, #20]	; (800c97c <LPM_SetOffMode+0x28>)
 800c966:	681a      	ldr	r2, [r3, #0]
 800c968:	4310      	orrs	r0, r2
 800c96a:	6018      	str	r0, [r3, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c96c:	f384 8810 	msr	PRIMASK, r4
  }
  
  RESTORE_PRIMASK( );

  return;
}
 800c970:	bd10      	pop	{r4, pc}
      OffModeDisable &= ~(uint32_t)id;
 800c972:	4a02      	ldr	r2, [pc, #8]	; (800c97c <LPM_SetOffMode+0x28>)
 800c974:	6813      	ldr	r3, [r2, #0]
 800c976:	4383      	bics	r3, r0
 800c978:	6013      	str	r3, [r2, #0]
      break;
 800c97a:	e7f7      	b.n	800c96c <LPM_SetOffMode+0x18>
 800c97c:	200011b0 	.word	0x200011b0

0800c980 <LPM_SetStopMode>:

void LPM_SetStopMode(LPM_Id_t id, LPM_SetMode_t mode)
{
 800c980:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c982:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800c986:	b672      	cpsid	i
  BACKUP_PRIMASK();
  
  DISABLE_IRQ( );
  
  
  switch(mode)
 800c988:	2900      	cmp	r1, #0
 800c98a:	d008      	beq.n	800c99e <LPM_SetStopMode+0x1e>
 800c98c:	2901      	cmp	r1, #1
 800c98e:	d103      	bne.n	800c998 <LPM_SetStopMode+0x18>
  {
    case LPM_Disable:
    {
      StopModeDisable |= (uint32_t)id;
 800c990:	4b05      	ldr	r3, [pc, #20]	; (800c9a8 <LPM_SetStopMode+0x28>)
 800c992:	685a      	ldr	r2, [r3, #4]
 800c994:	4310      	orrs	r0, r2
 800c996:	6058      	str	r0, [r3, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c998:	f384 8810 	msr	PRIMASK, r4
      break;
  }
  RESTORE_PRIMASK( );

  return;
}
 800c99c:	bd10      	pop	{r4, pc}
      StopModeDisable &= ~(uint32_t)id;
 800c99e:	4a02      	ldr	r2, [pc, #8]	; (800c9a8 <LPM_SetStopMode+0x28>)
 800c9a0:	6853      	ldr	r3, [r2, #4]
 800c9a2:	4383      	bics	r3, r0
 800c9a4:	6053      	str	r3, [r2, #4]
      break;
 800c9a6:	e7f7      	b.n	800c998 <LPM_SetStopMode+0x18>
 800c9a8:	200011b0 	.word	0x200011b0

0800c9ac <LPM_GetMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c9ac:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800c9b0:	b672      	cpsid	i
  
  DISABLE_IRQ( );

  if(StopModeDisable )
  {
    mode_selected = LPM_SleepMode;
 800c9b2:	2000      	movs	r0, #0
  if(StopModeDisable )
 800c9b4:	4b05      	ldr	r3, [pc, #20]	; (800c9cc <LPM_GetMode+0x20>)
 800c9b6:	6859      	ldr	r1, [r3, #4]
 800c9b8:	4281      	cmp	r1, r0
 800c9ba:	d103      	bne.n	800c9c4 <LPM_GetMode+0x18>
  }
  else
  {
    if(OffModeDisable)
 800c9bc:	6818      	ldr	r0, [r3, #0]
    {
      mode_selected = LPM_StopMode;
    }
    else
    {
      mode_selected = LPM_OffMode;
 800c9be:	4243      	negs	r3, r0
 800c9c0:	4158      	adcs	r0, r3
 800c9c2:	3001      	adds	r0, #1
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c9c4:	f382 8810 	msr	PRIMASK, r2
  }

  RESTORE_PRIMASK( );

  return mode_selected;
}
 800c9c8:	4770      	bx	lr
 800c9ca:	46c0      	nop			; (mov r8, r8)
 800c9cc:	200011b0 	.word	0x200011b0

0800c9d0 <add_elementSize_and_inc_writeIdx>:
  }
}

static void add_elementSize_and_inc_writeIdx(queue_param_t* queue,uint16_t element_size)
{
  queue->queue_buff[queue->queue_write_idx++]=(uint8_t) (element_size>>8);
 800c9d0:	8843      	ldrh	r3, [r0, #2]
{
 800c9d2:	b510      	push	{r4, lr}
  queue->queue_buff[queue->queue_write_idx++]=(uint8_t) (element_size>>8);
 800c9d4:	1c5a      	adds	r2, r3, #1
 800c9d6:	6884      	ldr	r4, [r0, #8]
 800c9d8:	8042      	strh	r2, [r0, #2]
 800c9da:	0a0a      	lsrs	r2, r1, #8
 800c9dc:	54e2      	strb	r2, [r4, r3]
  /*wrap if needed*/
  if ( queue->queue_write_idx == queue->queue_size)
 800c9de:	8842      	ldrh	r2, [r0, #2]
 800c9e0:	88c3      	ldrh	r3, [r0, #6]
 800c9e2:	429a      	cmp	r2, r3
 800c9e4:	d101      	bne.n	800c9ea <add_elementSize_and_inc_writeIdx+0x1a>
  {
    queue->queue_write_idx=0;
 800c9e6:	2300      	movs	r3, #0
 800c9e8:	8043      	strh	r3, [r0, #2]
  }
  queue->queue_buff[queue->queue_write_idx++]=(uint8_t) (element_size);
 800c9ea:	8843      	ldrh	r3, [r0, #2]
 800c9ec:	1c5a      	adds	r2, r3, #1
 800c9ee:	8042      	strh	r2, [r0, #2]
 800c9f0:	6882      	ldr	r2, [r0, #8]
 800c9f2:	54d1      	strb	r1, [r2, r3]
  /*wrap if needed*/
  if ( queue->queue_write_idx == queue->queue_size)
 800c9f4:	8842      	ldrh	r2, [r0, #2]
 800c9f6:	88c3      	ldrh	r3, [r0, #6]
 800c9f8:	429a      	cmp	r2, r3
 800c9fa:	d101      	bne.n	800ca00 <add_elementSize_and_inc_writeIdx+0x30>
  {
    queue->queue_write_idx=0;
 800c9fc:	2300      	movs	r3, #0
 800c9fe:	8043      	strh	r3, [r0, #2]
  }
}
 800ca00:	bd10      	pop	{r4, pc}

0800ca02 <circular_queue_init>:
  queue->queue_read_idx=0;
 800ca02:	2300      	movs	r3, #0
  queue->queue_buff=queue_buff;
 800ca04:	6081      	str	r1, [r0, #8]
  queue->queue_read_idx=0;
 800ca06:	6003      	str	r3, [r0, #0]
  queue->queue_write_idx=0;
 800ca08:	8083      	strh	r3, [r0, #4]
  queue->queue_size=queue_size;
 800ca0a:	80c2      	strh	r2, [r0, #6]
  queue->queue_full=0;
 800ca0c:	7303      	strb	r3, [r0, #12]
}
 800ca0e:	4770      	bx	lr

0800ca10 <circular_queue_add>:
{
 800ca10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (queue->queue_write_idx>=queue->queue_read_idx)
 800ca12:	8803      	ldrh	r3, [r0, #0]
{
 800ca14:	0015      	movs	r5, r2
  if (queue->queue_write_idx>=queue->queue_read_idx)
 800ca16:	8842      	ldrh	r2, [r0, #2]
{
 800ca18:	0004      	movs	r4, r0
 800ca1a:	000f      	movs	r7, r1
  if (queue->queue_write_idx>=queue->queue_read_idx)
 800ca1c:	429a      	cmp	r2, r3
 800ca1e:	d301      	bcc.n	800ca24 <circular_queue_add+0x14>
    free_size=queue->queue_size-(queue->queue_write_idx-queue->queue_read_idx); 
 800ca20:	88c1      	ldrh	r1, [r0, #6]
 800ca22:	185b      	adds	r3, r3, r1
  if ( queue->queue_full==1)
 800ca24:	7b21      	ldrb	r1, [r4, #12]
    free_size=(queue->queue_read_idx-queue->queue_write_idx); 
 800ca26:	1a9b      	subs	r3, r3, r2
 800ca28:	b21b      	sxth	r3, r3
  if ( queue->queue_full==1)
 800ca2a:	2901      	cmp	r1, #1
 800ca2c:	d100      	bne.n	800ca30 <circular_queue_add+0x20>
    free_size=0;
 800ca2e:	2300      	movs	r3, #0
  if ((buff_size+ELEMENT_SIZE_LEN<=free_buff_len)&& 
 800ca30:	1c69      	adds	r1, r5, #1
 800ca32:	4299      	cmp	r1, r3
 800ca34:	da27      	bge.n	800ca86 <circular_queue_add+0x76>
      ((queue->queue_write_idx+buff_size+ELEMENT_SIZE_LEN<=queue->queue_size) 
 800ca36:	18a8      	adds	r0, r5, r2
 800ca38:	88e1      	ldrh	r1, [r4, #6]
 800ca3a:	3001      	adds	r0, #1
  if ((buff_size+ELEMENT_SIZE_LEN<=free_buff_len)&& 
 800ca3c:	4288      	cmp	r0, r1
 800ca3e:	db02      	blt.n	800ca46 <circular_queue_add+0x36>
        || (queue->queue_write_idx>=queue->queue_size-ELEMENT_SIZE_LEN))) /*elementSize cut in 2 or elementSize at Top*/
 800ca40:	3902      	subs	r1, #2
 800ca42:	428a      	cmp	r2, r1
 800ca44:	db1f      	blt.n	800ca86 <circular_queue_add+0x76>
    add_elementSize_and_inc_writeIdx(queue, buff_size);
 800ca46:	0029      	movs	r1, r5
 800ca48:	0020      	movs	r0, r4
 800ca4a:	f7ff ffc1 	bl	800c9d0 <add_elementSize_and_inc_writeIdx>
    queue_copy(queue->queue_buff+queue->queue_write_idx,buff,buff_size);
 800ca4e:	68a3      	ldr	r3, [r4, #8]
 800ca50:	8862      	ldrh	r2, [r4, #2]
 800ca52:	189a      	adds	r2, r3, r2
 800ca54:	2300      	movs	r3, #0
  while(size--)
 800ca56:	429d      	cmp	r5, r3
 800ca58:	d111      	bne.n	800ca7e <circular_queue_add+0x6e>
    queue->queue_write_idx+=buff_size;
 800ca5a:	8863      	ldrh	r3, [r4, #2]
 800ca5c:	18ed      	adds	r5, r5, r3
    if (queue->queue_write_idx==queue->queue_size)
 800ca5e:	88e3      	ldrh	r3, [r4, #6]
    queue->queue_write_idx+=buff_size;
 800ca60:	b2ad      	uxth	r5, r5
 800ca62:	8065      	strh	r5, [r4, #2]
    if (queue->queue_write_idx==queue->queue_size)
 800ca64:	42ab      	cmp	r3, r5
 800ca66:	d101      	bne.n	800ca6c <circular_queue_add+0x5c>
        queue->queue_write_idx=0;
 800ca68:	2300      	movs	r3, #0
 800ca6a:	8063      	strh	r3, [r4, #2]
    queue->queue_nb_element++; 
 800ca6c:	88a3      	ldrh	r3, [r4, #4]
    if (queue->queue_write_idx== queue->queue_read_idx)
 800ca6e:	8862      	ldrh	r2, [r4, #2]
    queue->queue_nb_element++; 
 800ca70:	3301      	adds	r3, #1
 800ca72:	80a3      	strh	r3, [r4, #4]
    if (queue->queue_write_idx== queue->queue_read_idx)
 800ca74:	8823      	ldrh	r3, [r4, #0]
 800ca76:	429a      	cmp	r2, r3
 800ca78:	d031      	beq.n	800cade <circular_queue_add+0xce>
    status=0;
 800ca7a:	2000      	movs	r0, #0
}
 800ca7c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    *out++= *in++;
 800ca7e:	5cf9      	ldrb	r1, [r7, r3]
 800ca80:	54d1      	strb	r1, [r2, r3]
 800ca82:	3301      	adds	r3, #1
 800ca84:	e7e7      	b.n	800ca56 <circular_queue_add+0x46>
  else if (buff_size+2*ELEMENT_SIZE_LEN<=free_buff_len)
 800ca86:	1ce9      	adds	r1, r5, #3
 800ca88:	428b      	cmp	r3, r1
 800ca8a:	dd33      	ble.n	800caf4 <circular_queue_add+0xe4>
    queue_copy(queue->queue_buff+queue->queue_write_idx,buff,top_size);
 800ca8c:	2600      	movs	r6, #0
    uint16_t top_size = queue->queue_size-(queue->queue_write_idx+ELEMENT_SIZE_LEN);
 800ca8e:	88e3      	ldrh	r3, [r4, #6]
    add_elementSize_and_inc_writeIdx(queue,top_size);
 800ca90:	0020      	movs	r0, r4
    uint16_t top_size = queue->queue_size-(queue->queue_write_idx+ELEMENT_SIZE_LEN);
 800ca92:	3b02      	subs	r3, #2
 800ca94:	1a9a      	subs	r2, r3, r2
 800ca96:	b293      	uxth	r3, r2
    add_elementSize_and_inc_writeIdx(queue,top_size);
 800ca98:	0019      	movs	r1, r3
    uint16_t top_size = queue->queue_size-(queue->queue_write_idx+ELEMENT_SIZE_LEN);
 800ca9a:	9301      	str	r3, [sp, #4]
    add_elementSize_and_inc_writeIdx(queue,top_size);
 800ca9c:	f7ff ff98 	bl	800c9d0 <add_elementSize_and_inc_writeIdx>
    queue_copy(queue->queue_buff+queue->queue_write_idx,buff,top_size);
 800caa0:	8863      	ldrh	r3, [r4, #2]
 800caa2:	68a2      	ldr	r2, [r4, #8]
 800caa4:	18d3      	adds	r3, r2, r3
  while(size--)
 800caa6:	9a01      	ldr	r2, [sp, #4]
 800caa8:	4296      	cmp	r6, r2
 800caaa:	d11b      	bne.n	800cae4 <circular_queue_add+0xd4>
    queue->queue_write_idx=0;
 800caac:	2300      	movs	r3, #0
    buff_size-=top_size;
 800caae:	1bad      	subs	r5, r5, r6
 800cab0:	b2ad      	uxth	r5, r5
    queue->queue_write_idx=0;
 800cab2:	8063      	strh	r3, [r4, #2]
    add_elementSize_and_inc_writeIdx(queue, buff_size);
 800cab4:	0029      	movs	r1, r5
 800cab6:	0020      	movs	r0, r4
 800cab8:	f7ff ff8a 	bl	800c9d0 <add_elementSize_and_inc_writeIdx>
    queue_copy(queue->queue_buff+queue->queue_write_idx,buff+top_size,buff_size);
 800cabc:	68a3      	ldr	r3, [r4, #8]
 800cabe:	8862      	ldrh	r2, [r4, #2]
 800cac0:	19be      	adds	r6, r7, r6
 800cac2:	189a      	adds	r2, r3, r2
 800cac4:	2300      	movs	r3, #0
  while(size--)
 800cac6:	429d      	cmp	r5, r3
 800cac8:	d110      	bne.n	800caec <circular_queue_add+0xdc>
    queue->queue_write_idx+=buff_size;
 800caca:	8863      	ldrh	r3, [r4, #2]
 800cacc:	18ed      	adds	r5, r5, r3
    queue->queue_nb_element+=2;
 800cace:	88a3      	ldrh	r3, [r4, #4]
    queue->queue_write_idx+=buff_size;
 800cad0:	b2ad      	uxth	r5, r5
    queue->queue_nb_element+=2;
 800cad2:	3302      	adds	r3, #2
 800cad4:	80a3      	strh	r3, [r4, #4]
    if (queue->queue_write_idx== queue->queue_read_idx)
 800cad6:	8823      	ldrh	r3, [r4, #0]
    queue->queue_write_idx+=buff_size;
 800cad8:	8065      	strh	r5, [r4, #2]
    if (queue->queue_write_idx== queue->queue_read_idx)
 800cada:	42ab      	cmp	r3, r5
 800cadc:	d1cd      	bne.n	800ca7a <circular_queue_add+0x6a>
      queue->queue_full=1;
 800cade:	2301      	movs	r3, #1
 800cae0:	7323      	strb	r3, [r4, #12]
 800cae2:	e7ca      	b.n	800ca7a <circular_queue_add+0x6a>
    *out++= *in++;
 800cae4:	5dba      	ldrb	r2, [r7, r6]
 800cae6:	559a      	strb	r2, [r3, r6]
 800cae8:	3601      	adds	r6, #1
 800caea:	e7dc      	b.n	800caa6 <circular_queue_add+0x96>
 800caec:	5cf1      	ldrb	r1, [r6, r3]
 800caee:	54d1      	strb	r1, [r2, r3]
 800caf0:	3301      	adds	r3, #1
 800caf2:	e7e8      	b.n	800cac6 <circular_queue_add+0xb6>
    status=-1;
 800caf4:	2001      	movs	r0, #1
 800caf6:	4240      	negs	r0, r0
  return status;
 800caf8:	e7c0      	b.n	800ca7c <circular_queue_add+0x6c>

0800cafa <circular_queue_get>:
{
 800cafa:	b570      	push	{r4, r5, r6, lr}
  if (queue->queue_nb_element==0)
 800cafc:	8883      	ldrh	r3, [r0, #4]
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d015      	beq.n	800cb2e <circular_queue_get+0x34>
    uint16_t read_idx=queue->queue_read_idx;
 800cb02:	8804      	ldrh	r4, [r0, #0]
    size=(uint16_t) queue->queue_buff[read_idx++]<<8;
 800cb04:	6885      	ldr	r5, [r0, #8]
 800cb06:	1c63      	adds	r3, r4, #1
    if (read_idx==queue->queue_size)
 800cb08:	88c6      	ldrh	r6, [r0, #6]
    size=(uint16_t) queue->queue_buff[read_idx++]<<8;
 800cb0a:	5d2c      	ldrb	r4, [r5, r4]
 800cb0c:	b29b      	uxth	r3, r3
 800cb0e:	0224      	lsls	r4, r4, #8
    if (read_idx==queue->queue_size)
 800cb10:	429e      	cmp	r6, r3
 800cb12:	d100      	bne.n	800cb16 <circular_queue_get+0x1c>
      read_idx=0;
 800cb14:	2300      	movs	r3, #0
    size|=(uint16_t) queue->queue_buff[read_idx++];
 800cb16:	1c58      	adds	r0, r3, #1
 800cb18:	5ceb      	ldrb	r3, [r5, r3]
 800cb1a:	b280      	uxth	r0, r0
 800cb1c:	431c      	orrs	r4, r3
    if (read_idx==queue->queue_size)
 800cb1e:	4286      	cmp	r6, r0
 800cb20:	d100      	bne.n	800cb24 <circular_queue_get+0x2a>
      read_idx=0;
 800cb22:	2000      	movs	r0, #0
    *buff= queue->queue_buff+read_idx;
 800cb24:	1828      	adds	r0, r5, r0
 800cb26:	6008      	str	r0, [r1, #0]
    status=0;
 800cb28:	2000      	movs	r0, #0
    * buff_size=size;
 800cb2a:	8014      	strh	r4, [r2, #0]
}
 800cb2c:	bd70      	pop	{r4, r5, r6, pc}
    status=-1;
 800cb2e:	2001      	movs	r0, #1
 800cb30:	4240      	negs	r0, r0
  return status;
 800cb32:	e7fb      	b.n	800cb2c <circular_queue_get+0x32>

0800cb34 <circular_queue_remove>:
{
 800cb34:	b570      	push	{r4, r5, r6, lr}
  if (queue->queue_nb_element==0)
 800cb36:	8882      	ldrh	r2, [r0, #4]
 800cb38:	2a00      	cmp	r2, #0
 800cb3a:	d023      	beq.n	800cb84 <circular_queue_remove+0x50>
    size=(uint16_t) queue->queue_buff[queue->queue_read_idx++]<<8;
 800cb3c:	8803      	ldrh	r3, [r0, #0]
 800cb3e:	6885      	ldr	r5, [r0, #8]
 800cb40:	1c59      	adds	r1, r3, #1
 800cb42:	b289      	uxth	r1, r1
 800cb44:	8001      	strh	r1, [r0, #0]
 800cb46:	5ceb      	ldrb	r3, [r5, r3]
    if (queue->queue_read_idx==queue->queue_size)
 800cb48:	88c4      	ldrh	r4, [r0, #6]
    size=(uint16_t) queue->queue_buff[queue->queue_read_idx++]<<8;
 800cb4a:	021b      	lsls	r3, r3, #8
    if (queue->queue_read_idx==queue->queue_size)
 800cb4c:	42a1      	cmp	r1, r4
 800cb4e:	d101      	bne.n	800cb54 <circular_queue_remove+0x20>
      queue->queue_read_idx=0;
 800cb50:	2100      	movs	r1, #0
 800cb52:	8001      	strh	r1, [r0, #0]
    size|=(uint16_t) queue->queue_buff[queue->queue_read_idx++];
 800cb54:	8806      	ldrh	r6, [r0, #0]
 800cb56:	1c71      	adds	r1, r6, #1
 800cb58:	b289      	uxth	r1, r1
 800cb5a:	8001      	strh	r1, [r0, #0]
 800cb5c:	5dad      	ldrb	r5, [r5, r6]
 800cb5e:	432b      	orrs	r3, r5
    if (queue->queue_read_idx==queue->queue_size)
 800cb60:	428c      	cmp	r4, r1
 800cb62:	d101      	bne.n	800cb68 <circular_queue_remove+0x34>
      queue->queue_read_idx=0;
 800cb64:	2100      	movs	r1, #0
 800cb66:	8001      	strh	r1, [r0, #0]
    queue->queue_read_idx+=size;
 800cb68:	8801      	ldrh	r1, [r0, #0]
 800cb6a:	185b      	adds	r3, r3, r1
 800cb6c:	b29b      	uxth	r3, r3
    if (queue->queue_read_idx==queue->queue_size)
 800cb6e:	429c      	cmp	r4, r3
 800cb70:	d006      	beq.n	800cb80 <circular_queue_remove+0x4c>
        queue->queue_read_idx=0;
 800cb72:	8003      	strh	r3, [r0, #0]
    queue->queue_full=0;
 800cb74:	2300      	movs	r3, #0
    queue->queue_nb_element--;
 800cb76:	3a01      	subs	r2, #1
 800cb78:	8082      	strh	r2, [r0, #4]
    queue->queue_full=0;
 800cb7a:	7303      	strb	r3, [r0, #12]
    status=0;
 800cb7c:	0018      	movs	r0, r3
}
 800cb7e:	bd70      	pop	{r4, r5, r6, pc}
        queue->queue_read_idx=0;
 800cb80:	2300      	movs	r3, #0
 800cb82:	e7f6      	b.n	800cb72 <circular_queue_remove+0x3e>
      status=-1;
 800cb84:	2001      	movs	r0, #1
 800cb86:	4240      	negs	r0, r0
  return status;
 800cb88:	e7f9      	b.n	800cb7e <circular_queue_remove+0x4a>

0800cb8a <circular_queue_sense>:
  if (queue->queue_nb_element==0)
 800cb8a:	8880      	ldrh	r0, [r0, #4]
 800cb8c:	4243      	negs	r3, r0
 800cb8e:	4158      	adcs	r0, r3
 800cb90:	4240      	negs	r0, r0
}
 800cb92:	4770      	bx	lr

0800cb94 <SysTimeAdd>:
static void CalendarDiv60( uint32_t in, uint32_t* out, uint32_t* remainder );

const char *WeekDayString[]={ "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" };

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 800cb94:	b082      	sub	sp, #8
 800cb96:	b513      	push	{r0, r1, r4, lr}
    SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };

    c.Seconds = a.Seconds + b.Seconds;
 800cb98:	18c9      	adds	r1, r1, r3
{
 800cb9a:	9305      	str	r3, [sp, #20]
    c.SubSeconds = a.SubSeconds + b.SubSeconds;
 800cb9c:	ab05      	add	r3, sp, #20
 800cb9e:	889c      	ldrh	r4, [r3, #4]
 800cba0:	18a2      	adds	r2, r4, r2
 800cba2:	b292      	uxth	r2, r2
    if( c.SubSeconds >= 1000 )
 800cba4:	4c06      	ldr	r4, [pc, #24]	; (800cbc0 <SysTimeAdd+0x2c>)
    c.SubSeconds = a.SubSeconds + b.SubSeconds;
 800cba6:	b213      	sxth	r3, r2
    if( c.SubSeconds >= 1000 )
 800cba8:	42a3      	cmp	r3, r4
 800cbaa:	dd03      	ble.n	800cbb4 <SysTimeAdd+0x20>
    {
        c.Seconds++;
        c.SubSeconds -= 1000;
 800cbac:	4b05      	ldr	r3, [pc, #20]	; (800cbc4 <SysTimeAdd+0x30>)
        c.Seconds++;
 800cbae:	3101      	adds	r1, #1
        c.SubSeconds -= 1000;
 800cbb0:	18d2      	adds	r2, r2, r3
 800cbb2:	b213      	sxth	r3, r2
    }
    return c;
 800cbb4:	6001      	str	r1, [r0, #0]
 800cbb6:	8083      	strh	r3, [r0, #4]
}
 800cbb8:	bc16      	pop	{r1, r2, r4}
 800cbba:	bc08      	pop	{r3}
 800cbbc:	b002      	add	sp, #8
 800cbbe:	4718      	bx	r3
 800cbc0:	000003e7 	.word	0x000003e7
 800cbc4:	fffffc18 	.word	0xfffffc18

0800cbc8 <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 800cbc8:	b082      	sub	sp, #8
 800cbca:	b513      	push	{r0, r1, r4, lr}
    SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };

    c.Seconds = a.Seconds - b.Seconds;
 800cbcc:	1ac9      	subs	r1, r1, r3
{
 800cbce:	9305      	str	r3, [sp, #20]
    c.SubSeconds = a.SubSeconds - b.SubSeconds;
 800cbd0:	ab05      	add	r3, sp, #20
 800cbd2:	889b      	ldrh	r3, [r3, #4]
 800cbd4:	1ad2      	subs	r2, r2, r3
 800cbd6:	b292      	uxth	r2, r2
 800cbd8:	b213      	sxth	r3, r2
    if( c.SubSeconds < 0 )
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	da04      	bge.n	800cbe8 <SysTimeSub+0x20>
    {
        c.Seconds--;
        c.SubSeconds += 1000;
 800cbde:	23fa      	movs	r3, #250	; 0xfa
 800cbe0:	009b      	lsls	r3, r3, #2
 800cbe2:	18d2      	adds	r2, r2, r3
        c.Seconds--;
 800cbe4:	3901      	subs	r1, #1
        c.SubSeconds += 1000;
 800cbe6:	b213      	sxth	r3, r2
    }
    return c;
 800cbe8:	6001      	str	r1, [r0, #0]
 800cbea:	8083      	strh	r3, [r0, #4]
}
 800cbec:	bc16      	pop	{r1, r2, r4}
 800cbee:	bc08      	pop	{r3}
 800cbf0:	b002      	add	sp, #8
 800cbf2:	4718      	bx	r3

0800cbf4 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 800cbf4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    SysTime_t DeltaTime;
  
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800cbf6:	2300      	movs	r3, #0
{
 800cbf8:	9000      	str	r0, [sp, #0]
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800cbfa:	ac02      	add	r4, sp, #8

    calendarTime.Seconds = HW_RTC_GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800cbfc:	a803      	add	r0, sp, #12
{
 800cbfe:	9101      	str	r1, [sp, #4]
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800cc00:	9302      	str	r3, [sp, #8]
 800cc02:	80a3      	strh	r3, [r4, #4]
    calendarTime.Seconds = HW_RTC_GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800cc04:	f000 fdf2 	bl	800d7ec <HW_RTC_GetCalendarTime>
    c.Seconds = a.Seconds - b.Seconds;
 800cc08:	9b00      	ldr	r3, [sp, #0]
    calendarTime.Seconds = HW_RTC_GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800cc0a:	9002      	str	r0, [sp, #8]
    c.Seconds = a.Seconds - b.Seconds;
 800cc0c:	1a18      	subs	r0, r3, r0
    c.SubSeconds = a.SubSeconds - b.SubSeconds;
 800cc0e:	466b      	mov	r3, sp
 800cc10:	88a1      	ldrh	r1, [r4, #4]
 800cc12:	889b      	ldrh	r3, [r3, #4]
 800cc14:	1a5b      	subs	r3, r3, r1
 800cc16:	b29b      	uxth	r3, r3
 800cc18:	b219      	sxth	r1, r3
    if( c.SubSeconds < 0 )
 800cc1a:	2900      	cmp	r1, #0
 800cc1c:	da04      	bge.n	800cc28 <SysTimeSet+0x34>
        c.SubSeconds += 1000;
 800cc1e:	22fa      	movs	r2, #250	; 0xfa
 800cc20:	0092      	lsls	r2, r2, #2
 800cc22:	189b      	adds	r3, r3, r2
        c.Seconds--;
 800cc24:	3801      	subs	r0, #1
        c.SubSeconds += 1000;
 800cc26:	b219      	sxth	r1, r3

    // sysTime is epoch
    DeltaTime = SysTimeSub( sysTime, calendarTime );

    HW_RTC_BKUPWrite( DeltaTime.Seconds, ( uint32_t )DeltaTime.SubSeconds );
 800cc28:	f000 fdf4 	bl	800d814 <HW_RTC_BKUPWrite>
}
 800cc2c:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
	...

0800cc30 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 800cc30:	b530      	push	{r4, r5, lr}
 800cc32:	b085      	sub	sp, #20
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800cc34:	2300      	movs	r3, #0
 800cc36:	466a      	mov	r2, sp
{
 800cc38:	0004      	movs	r4, r0
    SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
    SysTime_t DeltaTime;

    calendarTime.Seconds = HW_RTC_GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800cc3a:	a801      	add	r0, sp, #4
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800cc3c:	8093      	strh	r3, [r2, #4]
 800cc3e:	9300      	str	r3, [sp, #0]
    calendarTime.Seconds = HW_RTC_GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800cc40:	f000 fdd4 	bl	800d7ec <HW_RTC_GetCalendarTime>

    HW_RTC_BKUPRead( &DeltaTime.Seconds, ( uint32_t* )&DeltaTime.SubSeconds );
 800cc44:	ad02      	add	r5, sp, #8
    calendarTime.Seconds = HW_RTC_GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800cc46:	9000      	str	r0, [sp, #0]
    HW_RTC_BKUPRead( &DeltaTime.Seconds, ( uint32_t* )&DeltaTime.SubSeconds );
 800cc48:	a903      	add	r1, sp, #12
 800cc4a:	0028      	movs	r0, r5
 800cc4c:	f000 fdf2 	bl	800d834 <HW_RTC_BKUPRead>
    c.SubSeconds = a.SubSeconds + b.SubSeconds;
 800cc50:	4669      	mov	r1, sp
    c.Seconds = a.Seconds + b.Seconds;
 800cc52:	9b02      	ldr	r3, [sp, #8]
 800cc54:	9a00      	ldr	r2, [sp, #0]
    c.SubSeconds = a.SubSeconds + b.SubSeconds;
 800cc56:	8889      	ldrh	r1, [r1, #4]
    c.Seconds = a.Seconds + b.Seconds;
 800cc58:	189a      	adds	r2, r3, r2
    c.SubSeconds = a.SubSeconds + b.SubSeconds;
 800cc5a:	88ab      	ldrh	r3, [r5, #4]
    if( c.SubSeconds >= 1000 )
 800cc5c:	4807      	ldr	r0, [pc, #28]	; (800cc7c <SysTimeGet+0x4c>)
    c.SubSeconds = a.SubSeconds + b.SubSeconds;
 800cc5e:	185b      	adds	r3, r3, r1
 800cc60:	b29b      	uxth	r3, r3
 800cc62:	b219      	sxth	r1, r3
    if( c.SubSeconds >= 1000 )
 800cc64:	4281      	cmp	r1, r0
 800cc66:	dd03      	ble.n	800cc70 <SysTimeGet+0x40>
        c.SubSeconds -= 1000;
 800cc68:	4905      	ldr	r1, [pc, #20]	; (800cc80 <SysTimeGet+0x50>)
        c.Seconds++;
 800cc6a:	3201      	adds	r2, #1
        c.SubSeconds -= 1000;
 800cc6c:	185b      	adds	r3, r3, r1
 800cc6e:	b219      	sxth	r1, r3

    sysTime = SysTimeAdd( DeltaTime, calendarTime );

    return sysTime;
}
 800cc70:	0020      	movs	r0, r4
    return sysTime;
 800cc72:	6022      	str	r2, [r4, #0]
 800cc74:	80a1      	strh	r1, [r4, #4]
}
 800cc76:	b005      	add	sp, #20
 800cc78:	bd30      	pop	{r4, r5, pc}
 800cc7a:	46c0      	nop			; (mov r8, r8)
 800cc7c:	000003e7 	.word	0x000003e7
 800cc80:	fffffc18 	.word	0xfffffc18

0800cc84 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 800cc84:	b537      	push	{r0, r1, r2, r4, r5, lr}
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800cc86:	2300      	movs	r3, #0
 800cc88:	466c      	mov	r4, sp
{
 800cc8a:	0005      	movs	r5, r0

    calendarTime.Seconds = HW_RTC_GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800cc8c:	a801      	add	r0, sp, #4
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800cc8e:	9300      	str	r3, [sp, #0]
 800cc90:	80a3      	strh	r3, [r4, #4]
    calendarTime.Seconds = HW_RTC_GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800cc92:	f000 fdab 	bl	800d7ec <HW_RTC_GetCalendarTime>
    
    return calendarTime;
 800cc96:	002b      	movs	r3, r5
    calendarTime.Seconds = HW_RTC_GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800cc98:	9000      	str	r0, [sp, #0]
    return calendarTime;
 800cc9a:	cc06      	ldmia	r4!, {r1, r2}
 800cc9c:	c306      	stmia	r3!, {r1, r2}
}
 800cc9e:	0028      	movs	r0, r5
 800cca0:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0800cca2 <TimerSetTimeout>:
    cur = cur->Next;
  }
  return false;
}
static void TimerSetTimeout( TimerEvent_t *obj )
{
 800cca2:	b570      	push	{r4, r5, r6, lr}
 800cca4:	0004      	movs	r4, r0
  int32_t minTicks= HW_RTC_GetMinimumTimeout( );
 800cca6:	f000 fc37 	bl	800d518 <HW_RTC_GetMinimumTimeout>
  obj->IsNext2Expire = true; 
 800ccaa:	2301      	movs	r3, #1
 800ccac:	7263      	strb	r3, [r4, #9]
  int32_t minTicks= HW_RTC_GetMinimumTimeout( );
 800ccae:	0005      	movs	r5, r0

  // In case deadline too soon
  if(obj->Timestamp  < (HW_RTC_GetTimerElapsedTime(  ) + minTicks) )
 800ccb0:	6826      	ldr	r6, [r4, #0]
 800ccb2:	f000 fc45 	bl	800d540 <HW_RTC_GetTimerElapsedTime>
 800ccb6:	1828      	adds	r0, r5, r0
 800ccb8:	4286      	cmp	r6, r0
 800ccba:	d203      	bcs.n	800ccc4 <TimerSetTimeout+0x22>
  {
    obj->Timestamp = HW_RTC_GetTimerElapsedTime(  ) + minTicks;
 800ccbc:	f000 fc40 	bl	800d540 <HW_RTC_GetTimerElapsedTime>
 800ccc0:	182d      	adds	r5, r5, r0
 800ccc2:	6025      	str	r5, [r4, #0]
  }
  HW_RTC_SetAlarm( obj->Timestamp );
 800ccc4:	6820      	ldr	r0, [r4, #0]
 800ccc6:	f000 fc67 	bl	800d598 <HW_RTC_SetAlarm>
}
 800ccca:	bd70      	pop	{r4, r5, r6, pc}

0800cccc <TimerInsertNewHeadTimer>:
  obj->Next = NULL;
}

static void TimerInsertNewHeadTimer( TimerEvent_t *obj )
{
  TimerEvent_t* cur = TimerListHead;
 800cccc:	4a05      	ldr	r2, [pc, #20]	; (800cce4 <TimerInsertNewHeadTimer+0x18>)
{
 800ccce:	b510      	push	{r4, lr}
  TimerEvent_t* cur = TimerListHead;
 800ccd0:	6813      	ldr	r3, [r2, #0]

  if( cur != NULL )
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d001      	beq.n	800ccda <TimerInsertNewHeadTimer+0xe>
  {
    cur->IsNext2Expire = false;
 800ccd6:	2100      	movs	r1, #0
 800ccd8:	7259      	strb	r1, [r3, #9]
  }

  obj->Next = cur;
 800ccda:	6143      	str	r3, [r0, #20]
  TimerListHead = obj;
 800ccdc:	6010      	str	r0, [r2, #0]
  TimerSetTimeout( TimerListHead );
 800ccde:	f7ff ffe0 	bl	800cca2 <TimerSetTimeout>
}
 800cce2:	bd10      	pop	{r4, pc}
 800cce4:	200011b8 	.word	0x200011b8

0800cce8 <TimerInit>:
  obj->Timestamp = 0;
 800cce8:	2300      	movs	r3, #0
  obj->Callback = callback;
 800ccea:	60c1      	str	r1, [r0, #12]
  obj->Timestamp = 0;
 800ccec:	6003      	str	r3, [r0, #0]
  obj->ReloadValue = 0;
 800ccee:	6043      	str	r3, [r0, #4]
  obj->IsStarted = false;
 800ccf0:	7203      	strb	r3, [r0, #8]
  obj->IsNext2Expire = false;
 800ccf2:	7243      	strb	r3, [r0, #9]
  obj->Context = NULL;
 800ccf4:	6103      	str	r3, [r0, #16]
  obj->Next = NULL;
 800ccf6:	6143      	str	r3, [r0, #20]
}
 800ccf8:	4770      	bx	lr
	...

0800ccfc <TimerStart>:
{
 800ccfc:	b570      	push	{r4, r5, r6, lr}
 800ccfe:	0004      	movs	r4, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cd00:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800cd04:	b672      	cpsid	i
  if( ( obj == NULL ) || ( TimerExists( obj ) == true ) )
 800cd06:	2800      	cmp	r0, #0
 800cd08:	d010      	beq.n	800cd2c <TimerStart+0x30>
  TimerEvent_t* cur = TimerListHead;
 800cd0a:	4e18      	ldr	r6, [pc, #96]	; (800cd6c <TimerStart+0x70>)
 800cd0c:	6832      	ldr	r2, [r6, #0]
 800cd0e:	0013      	movs	r3, r2
  while( cur != NULL )
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d10e      	bne.n	800cd32 <TimerStart+0x36>
  obj->Timestamp = obj->ReloadValue;
 800cd14:	6861      	ldr	r1, [r4, #4]
  obj->IsNext2Expire = false;
 800cd16:	7263      	strb	r3, [r4, #9]
  obj->Timestamp = obj->ReloadValue;
 800cd18:	6021      	str	r1, [r4, #0]
  obj->IsStarted = true;
 800cd1a:	2101      	movs	r1, #1
 800cd1c:	7221      	strb	r1, [r4, #8]
  if( TimerListHead == NULL )
 800cd1e:	2a00      	cmp	r2, #0
 800cd20:	d10b      	bne.n	800cd3a <TimerStart+0x3e>
    HW_RTC_SetTimerContext( );
 800cd22:	f000 fd15 	bl	800d750 <HW_RTC_SetTimerContext>
      TimerInsertNewHeadTimer( obj);
 800cd26:	0020      	movs	r0, r4
 800cd28:	f7ff ffd0 	bl	800cccc <TimerInsertNewHeadTimer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cd2c:	f385 8810 	msr	PRIMASK, r5
}
 800cd30:	bd70      	pop	{r4, r5, r6, pc}
    if( cur == obj )
 800cd32:	429c      	cmp	r4, r3
 800cd34:	d0fa      	beq.n	800cd2c <TimerStart+0x30>
    cur = cur->Next;
 800cd36:	695b      	ldr	r3, [r3, #20]
 800cd38:	e7ea      	b.n	800cd10 <TimerStart+0x14>
    elapsedTime = HW_RTC_GetTimerElapsedTime( );
 800cd3a:	f000 fc01 	bl	800d540 <HW_RTC_GetTimerElapsedTime>
    obj->Timestamp += elapsedTime;
 800cd3e:	6823      	ldr	r3, [r4, #0]
 800cd40:	18c0      	adds	r0, r0, r3
    if( obj->Timestamp < TimerListHead->Timestamp )
 800cd42:	6833      	ldr	r3, [r6, #0]
    obj->Timestamp += elapsedTime;
 800cd44:	6020      	str	r0, [r4, #0]
    if( obj->Timestamp < TimerListHead->Timestamp )
 800cd46:	681a      	ldr	r2, [r3, #0]
 800cd48:	4290      	cmp	r0, r2
 800cd4a:	d3ec      	bcc.n	800cd26 <TimerStart+0x2a>
  TimerEvent_t* next = TimerListHead->Next;
 800cd4c:	695a      	ldr	r2, [r3, #20]
  while (cur->Next != NULL )
 800cd4e:	6959      	ldr	r1, [r3, #20]
 800cd50:	2900      	cmp	r1, #0
 800cd52:	d102      	bne.n	800cd5a <TimerStart+0x5e>
  cur->Next = obj;
 800cd54:	615c      	str	r4, [r3, #20]
  obj->Next = NULL;
 800cd56:	6161      	str	r1, [r4, #20]
 800cd58:	e7e8      	b.n	800cd2c <TimerStart+0x30>
    if( obj->Timestamp  > next->Timestamp )
 800cd5a:	6811      	ldr	r1, [r2, #0]
 800cd5c:	4288      	cmp	r0, r1
 800cd5e:	d902      	bls.n	800cd66 <TimerStart+0x6a>
        next = next->Next;
 800cd60:	0013      	movs	r3, r2
 800cd62:	6952      	ldr	r2, [r2, #20]
 800cd64:	e7f3      	b.n	800cd4e <TimerStart+0x52>
        cur->Next = obj;
 800cd66:	615c      	str	r4, [r3, #20]
        obj->Next = next;
 800cd68:	6162      	str	r2, [r4, #20]
 800cd6a:	e7df      	b.n	800cd2c <TimerStart+0x30>
 800cd6c:	200011b8 	.word	0x200011b8

0800cd70 <TimerIrqHandler>:
{
 800cd70:	b570      	push	{r4, r5, r6, lr}
  uint32_t old =  HW_RTC_GetTimerContext( );
 800cd72:	f000 fd35 	bl	800d7e0 <HW_RTC_GetTimerContext>
 800cd76:	0005      	movs	r5, r0
  uint32_t now =  HW_RTC_SetTimerContext( );
 800cd78:	f000 fcea 	bl	800d750 <HW_RTC_SetTimerContext>
  if ( TimerListHead != NULL )
 800cd7c:	4c1c      	ldr	r4, [pc, #112]	; (800cdf0 <TimerIrqHandler+0x80>)
 800cd7e:	6822      	ldr	r2, [r4, #0]
 800cd80:	2a00      	cmp	r2, #0
 800cd82:	d016      	beq.n	800cdb2 <TimerIrqHandler+0x42>
  uint32_t DeltaContext = now - old; //intentionnal wrap around
 800cd84:	1b40      	subs	r0, r0, r5
 800cd86:	0013      	movs	r3, r2
        next->Timestamp = 0 ;
 800cd88:	2500      	movs	r5, #0
    for (cur=TimerListHead; cur->Next != NULL; cur= cur->Next)
 800cd8a:	695b      	ldr	r3, [r3, #20]
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d106      	bne.n	800cd9e <TimerIrqHandler+0x2e>
    TimerListHead = TimerListHead->Next;
 800cd90:	6951      	ldr	r1, [r2, #20]
    cur->IsStarted = false;
 800cd92:	7213      	strb	r3, [r2, #8]
    exec_cb( cur->Callback, cur->Context );
 800cd94:	68d3      	ldr	r3, [r2, #12]
    TimerListHead = TimerListHead->Next;
 800cd96:	6021      	str	r1, [r4, #0]
    exec_cb( cur->Callback, cur->Context );
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d108      	bne.n	800cdae <TimerIrqHandler+0x3e>
 800cd9c:	e7fe      	b.n	800cd9c <TimerIrqHandler+0x2c>
      if (next->Timestamp > DeltaContext)
 800cd9e:	6819      	ldr	r1, [r3, #0]
 800cda0:	4281      	cmp	r1, r0
 800cda2:	d902      	bls.n	800cdaa <TimerIrqHandler+0x3a>
        next->Timestamp -= DeltaContext;
 800cda4:	1a09      	subs	r1, r1, r0
 800cda6:	6019      	str	r1, [r3, #0]
 800cda8:	e7ef      	b.n	800cd8a <TimerIrqHandler+0x1a>
        next->Timestamp = 0 ;
 800cdaa:	601d      	str	r5, [r3, #0]
 800cdac:	e7ed      	b.n	800cd8a <TimerIrqHandler+0x1a>
    exec_cb( cur->Callback, cur->Context );
 800cdae:	6910      	ldr	r0, [r2, #16]
 800cdb0:	4798      	blx	r3
  while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < HW_RTC_GetTimerElapsedTime(  )  ))
 800cdb2:	6823      	ldr	r3, [r4, #0]
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d106      	bne.n	800cdc6 <TimerIrqHandler+0x56>
  if( ( TimerListHead != NULL ) && ( TimerListHead->IsNext2Expire == false ) )
 800cdb8:	6820      	ldr	r0, [r4, #0]
 800cdba:	2800      	cmp	r0, #0
 800cdbc:	d111      	bne.n	800cde2 <TimerIrqHandler+0x72>
}
 800cdbe:	bd70      	pop	{r4, r5, r6, pc}
   exec_cb( cur->Callback, cur->Context );
 800cdc0:	6918      	ldr	r0, [r3, #16]
 800cdc2:	4790      	blx	r2
 800cdc4:	e7f5      	b.n	800cdb2 <TimerIrqHandler+0x42>
  while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < HW_RTC_GetTimerElapsedTime(  )  ))
 800cdc6:	681d      	ldr	r5, [r3, #0]
 800cdc8:	f000 fbba 	bl	800d540 <HW_RTC_GetTimerElapsedTime>
 800cdcc:	4285      	cmp	r5, r0
 800cdce:	d2f3      	bcs.n	800cdb8 <TimerIrqHandler+0x48>
   cur = TimerListHead;
 800cdd0:	6823      	ldr	r3, [r4, #0]
   TimerListHead = TimerListHead->Next;
 800cdd2:	695a      	ldr	r2, [r3, #20]
 800cdd4:	6022      	str	r2, [r4, #0]
   cur->IsStarted = false;
 800cdd6:	2200      	movs	r2, #0
 800cdd8:	721a      	strb	r2, [r3, #8]
   exec_cb( cur->Callback, cur->Context );
 800cdda:	68da      	ldr	r2, [r3, #12]
 800cddc:	2a00      	cmp	r2, #0
 800cdde:	d1ef      	bne.n	800cdc0 <TimerIrqHandler+0x50>
 800cde0:	e7fe      	b.n	800cde0 <TimerIrqHandler+0x70>
  if( ( TimerListHead != NULL ) && ( TimerListHead->IsNext2Expire == false ) )
 800cde2:	7a43      	ldrb	r3, [r0, #9]
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d1ea      	bne.n	800cdbe <TimerIrqHandler+0x4e>
    TimerSetTimeout( TimerListHead );
 800cde8:	f7ff ff5b 	bl	800cca2 <TimerSetTimeout>
}
 800cdec:	e7e7      	b.n	800cdbe <TimerIrqHandler+0x4e>
 800cdee:	46c0      	nop			; (mov r8, r8)
 800cdf0:	200011b8 	.word	0x200011b8

0800cdf4 <TimerStop>:
{
 800cdf4:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cdf6:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800cdfa:	b672      	cpsid	i
  TimerEvent_t* prev = TimerListHead;
 800cdfc:	4c12      	ldr	r4, [pc, #72]	; (800ce48 <TimerStop+0x54>)
 800cdfe:	6823      	ldr	r3, [r4, #0]
  if( ( TimerListHead == NULL ) || ( obj == NULL ) )
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d001      	beq.n	800ce08 <TimerStop+0x14>
 800ce04:	2800      	cmp	r0, #0
 800ce06:	d102      	bne.n	800ce0e <TimerStop+0x1a>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ce08:	f385 8810 	msr	PRIMASK, r5
}  
 800ce0c:	bd70      	pop	{r4, r5, r6, pc}
  obj->IsStarted = false;
 800ce0e:	2200      	movs	r2, #0
 800ce10:	7202      	strb	r2, [r0, #8]
  if( TimerListHead == obj ) // Stop the Head                  
 800ce12:	4283      	cmp	r3, r0
 800ce14:	d110      	bne.n	800ce38 <TimerStop+0x44>
    if( TimerListHead->IsNext2Expire == true ) // The head is already running 
 800ce16:	7a59      	ldrb	r1, [r3, #9]
 800ce18:	695e      	ldr	r6, [r3, #20]
 800ce1a:	4291      	cmp	r1, r2
 800ce1c:	d009      	beq.n	800ce32 <TimerStop+0x3e>
      TimerListHead->IsNext2Expire = false;
 800ce1e:	725a      	strb	r2, [r3, #9]
      if( TimerListHead->Next != NULL )
 800ce20:	4296      	cmp	r6, r2
 800ce22:	d004      	beq.n	800ce2e <TimerStop+0x3a>
        TimerSetTimeout( TimerListHead );
 800ce24:	0030      	movs	r0, r6
        TimerListHead = TimerListHead->Next;
 800ce26:	6026      	str	r6, [r4, #0]
        TimerSetTimeout( TimerListHead );
 800ce28:	f7ff ff3b 	bl	800cca2 <TimerSetTimeout>
 800ce2c:	e7ec      	b.n	800ce08 <TimerStop+0x14>
        HW_RTC_StopAlarm( );
 800ce2e:	f000 fb9b 	bl	800d568 <HW_RTC_StopAlarm>
        TimerListHead = NULL;
 800ce32:	6026      	str	r6, [r4, #0]
 800ce34:	e7e8      	b.n	800ce08 <TimerStop+0x14>
 800ce36:	0013      	movs	r3, r2
        cur = cur->Next;
 800ce38:	695a      	ldr	r2, [r3, #20]
    while( cur != NULL )
 800ce3a:	2a00      	cmp	r2, #0
 800ce3c:	d0e4      	beq.n	800ce08 <TimerStop+0x14>
      if( cur == obj )
 800ce3e:	4290      	cmp	r0, r2
 800ce40:	d1f9      	bne.n	800ce36 <TimerStop+0x42>
        if( cur->Next != NULL )
 800ce42:	6942      	ldr	r2, [r0, #20]
 800ce44:	615a      	str	r2, [r3, #20]
 800ce46:	e7df      	b.n	800ce08 <TimerStop+0x14>
 800ce48:	200011b8 	.word	0x200011b8

0800ce4c <TimerReset>:
{
 800ce4c:	b510      	push	{r4, lr}
 800ce4e:	0004      	movs	r4, r0
  TimerStop( obj );
 800ce50:	f7ff ffd0 	bl	800cdf4 <TimerStop>
  TimerStart( obj );
 800ce54:	0020      	movs	r0, r4
 800ce56:	f7ff ff51 	bl	800ccfc <TimerStart>
}
 800ce5a:	bd10      	pop	{r4, pc}

0800ce5c <TimerSetValue>:
{
 800ce5c:	b570      	push	{r4, r5, r6, lr}
 800ce5e:	0005      	movs	r5, r0
  uint32_t ticks = HW_RTC_ms2Tick( value );
 800ce60:	0008      	movs	r0, r1
 800ce62:	f000 fb5b 	bl	800d51c <HW_RTC_ms2Tick>
 800ce66:	0004      	movs	r4, r0
  TimerStop( obj );
 800ce68:	0028      	movs	r0, r5
 800ce6a:	f7ff ffc3 	bl	800cdf4 <TimerStop>
  minValue = HW_RTC_GetMinimumTimeout( );
 800ce6e:	f000 fb53 	bl	800d518 <HW_RTC_GetMinimumTimeout>
 800ce72:	4284      	cmp	r4, r0
 800ce74:	d200      	bcs.n	800ce78 <TimerSetValue+0x1c>
 800ce76:	0004      	movs	r4, r0
  obj->Timestamp = ticks;
 800ce78:	602c      	str	r4, [r5, #0]
  obj->ReloadValue = ticks;
 800ce7a:	606c      	str	r4, [r5, #4]
}
 800ce7c:	bd70      	pop	{r4, r5, r6, pc}

0800ce7e <TimerGetCurrentTime>:
{
 800ce7e:	b510      	push	{r4, lr}
  uint32_t now = HW_RTC_GetTimerValue( );
 800ce80:	f000 fb6a 	bl	800d558 <HW_RTC_GetTimerValue>
  return  HW_RTC_Tick2ms(now);
 800ce84:	f000 fb52 	bl	800d52c <HW_RTC_Tick2ms>
}
 800ce88:	bd10      	pop	{r4, pc}

0800ce8a <TimerGetElapsedTime>:
{
 800ce8a:	b570      	push	{r4, r5, r6, lr}
 800ce8c:	1e04      	subs	r4, r0, #0
  if ( past == 0 )
 800ce8e:	d009      	beq.n	800cea4 <TimerGetElapsedTime+0x1a>
  uint32_t nowInTicks = HW_RTC_GetTimerValue( );
 800ce90:	f000 fb62 	bl	800d558 <HW_RTC_GetTimerValue>
 800ce94:	0005      	movs	r5, r0
  uint32_t pastInTicks = HW_RTC_ms2Tick( past );
 800ce96:	0020      	movs	r0, r4
 800ce98:	f000 fb40 	bl	800d51c <HW_RTC_ms2Tick>
  return HW_RTC_Tick2ms( nowInTicks- pastInTicks );
 800ce9c:	1a28      	subs	r0, r5, r0
 800ce9e:	f000 fb45 	bl	800d52c <HW_RTC_Tick2ms>
 800cea2:	0004      	movs	r4, r0
}
 800cea4:	0020      	movs	r0, r4
 800cea6:	bd70      	pop	{r4, r5, r6, pc}

0800cea8 <Trace_TxCpltCallback>:
}

/* Private Functions Definition ------------------------------------------------------*/

static void Trace_TxCpltCallback(void)
{
 800cea8:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ceaa:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800ceae:	b672      	cpsid	i

  BACKUP_PRIMASK();

  DISABLE_IRQ(); /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  circular_queue_remove(&MsgTraceQueue);
 800ceb0:	4c10      	ldr	r4, [pc, #64]	; (800cef4 <Trace_TxCpltCallback+0x4c>)
 800ceb2:	0020      	movs	r0, r4
 800ceb4:	f7ff fe3e 	bl	800cb34 <circular_queue_remove>
  //DBG_GPIO_SET(GPIOB, GPIO_PIN_13);
  //DBG_GPIO_RST(GPIOB, GPIO_PIN_13);
  /* Sense if new data to be sent */
  status=circular_queue_sense(&MsgTraceQueue);
 800ceb8:	0020      	movs	r0, r4
 800ceba:	f7ff fe66 	bl	800cb8a <circular_queue_sense>

  if ( status == 0) 
 800cebe:	2800      	cmp	r0, #0
 800cec0:	d10d      	bne.n	800cede <Trace_TxCpltCallback+0x36>
  {
    circular_queue_get(&MsgTraceQueue,&buffer,&bufSize);
 800cec2:	466b      	mov	r3, sp
 800cec4:	1c9e      	adds	r6, r3, #2
 800cec6:	0032      	movs	r2, r6
 800cec8:	a901      	add	r1, sp, #4
 800ceca:	0020      	movs	r0, r4
 800cecc:	f7ff fe15 	bl	800cafa <circular_queue_get>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ced0:	f385 8810 	msr	PRIMASK, r5
    RESTORE_PRIMASK();
    //DBG_GPIO_SET(GPIOB, GPIO_PIN_14);
    //DBG_GPIO_RST(GPIOB, GPIO_PIN_14);
    OutputTrace(buffer, bufSize);
 800ced4:	8831      	ldrh	r1, [r6, #0]
 800ced6:	9801      	ldr	r0, [sp, #4]
 800ced8:	f001 fc80 	bl	800e7dc <vcom_Trace>

    LPM_SetStopMode(LPM_UART_TX_Id , LPM_Enable );
    TracePeripheralReady = SET;
    RESTORE_PRIMASK();
  }
}
 800cedc:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    LPM_SetStopMode(LPM_UART_TX_Id , LPM_Enable );
 800cede:	2100      	movs	r1, #0
 800cee0:	2020      	movs	r0, #32
 800cee2:	f7ff fd4d 	bl	800c980 <LPM_SetStopMode>
    TracePeripheralReady = SET;
 800cee6:	2201      	movs	r2, #1
 800cee8:	4b03      	ldr	r3, [pc, #12]	; (800cef8 <Trace_TxCpltCallback+0x50>)
 800ceea:	701a      	strb	r2, [r3, #0]
 800ceec:	f385 8810 	msr	PRIMASK, r5
}
 800cef0:	e7f4      	b.n	800cedc <Trace_TxCpltCallback+0x34>
 800cef2:	46c0      	nop			; (mov r8, r8)
 800cef4:	200011bc 	.word	0x200011bc
 800cef8:	20000194 	.word	0x20000194

0800cefc <TraceInit>:
{
 800cefc:	b510      	push	{r4, lr}
  OutputInit(Trace_TxCpltCallback);
 800cefe:	4805      	ldr	r0, [pc, #20]	; (800cf14 <TraceInit+0x18>)
 800cf00:	f001 fc4e 	bl	800e7a0 <vcom_Init>
  circular_queue_init(&MsgTraceQueue, MsgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE);
 800cf04:	2280      	movs	r2, #128	; 0x80
 800cf06:	4904      	ldr	r1, [pc, #16]	; (800cf18 <TraceInit+0x1c>)
 800cf08:	0052      	lsls	r2, r2, #1
 800cf0a:	4804      	ldr	r0, [pc, #16]	; (800cf1c <TraceInit+0x20>)
 800cf0c:	f7ff fd79 	bl	800ca02 <circular_queue_init>
}
 800cf10:	bd10      	pop	{r4, pc}
 800cf12:	46c0      	nop			; (mov r8, r8)
 800cf14:	0800cea9 	.word	0x0800cea9
 800cf18:	200011cc 	.word	0x200011cc
 800cf1c:	200011bc 	.word	0x200011bc

0800cf20 <TraceSend>:
{
 800cf20:	b40f      	push	{r0, r1, r2, r3}
  uint16_t bufSize=vsnprintf(buf,TEMPBUFSIZE,strFormat, vaArgs);
 800cf22:	2180      	movs	r1, #128	; 0x80
{
 800cf24:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cf26:	b0c5      	sub	sp, #276	; 0x114
 800cf28:	ab4a      	add	r3, sp, #296	; 0x128
 800cf2a:	cb04      	ldmia	r3!, {r2}
  uint16_t bufSize=vsnprintf(buf,TEMPBUFSIZE,strFormat, vaArgs);
 800cf2c:	0049      	lsls	r1, r1, #1
 800cf2e:	a804      	add	r0, sp, #16
  va_start( vaArgs, strFormat);
 800cf30:	9302      	str	r3, [sp, #8]
  uint16_t bufSize=vsnprintf(buf,TEMPBUFSIZE,strFormat, vaArgs);
 800cf32:	f001 fddb 	bl	800eaec <vsniprintf>
 800cf36:	466b      	mov	r3, sp
 800cf38:	1d9c      	adds	r4, r3, #6
 800cf3a:	8020      	strh	r0, [r4, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cf3c:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800cf40:	b672      	cpsid	i
  status =circular_queue_add(&MsgTraceQueue,(uint8_t*)buf, bufSize);
 800cf42:	4813      	ldr	r0, [pc, #76]	; (800cf90 <TraceSend+0x70>)
 800cf44:	8822      	ldrh	r2, [r4, #0]
 800cf46:	a904      	add	r1, sp, #16
 800cf48:	f7ff fd62 	bl	800ca10 <circular_queue_add>
 800cf4c:	1e06      	subs	r6, r0, #0
  if ((status==0 ) && (TracePeripheralReady==SET))
 800cf4e:	d11b      	bne.n	800cf88 <TraceSend+0x68>
 800cf50:	4b10      	ldr	r3, [pc, #64]	; (800cf94 <TraceSend+0x74>)
 800cf52:	781d      	ldrb	r5, [r3, #0]
 800cf54:	b2ed      	uxtb	r5, r5
 800cf56:	2d01      	cmp	r5, #1
 800cf58:	d116      	bne.n	800cf88 <TraceSend+0x68>
    circular_queue_get(&MsgTraceQueue,&buffer,&bufSize);
 800cf5a:	0022      	movs	r2, r4
 800cf5c:	a903      	add	r1, sp, #12
 800cf5e:	480c      	ldr	r0, [pc, #48]	; (800cf90 <TraceSend+0x70>)
 800cf60:	f7ff fdcb 	bl	800cafa <circular_queue_get>
    TracePeripheralReady = RESET;
 800cf64:	4b0b      	ldr	r3, [pc, #44]	; (800cf94 <TraceSend+0x74>)
    LPM_SetStopMode(LPM_UART_TX_Id , LPM_Disable );
 800cf66:	0029      	movs	r1, r5
 800cf68:	2020      	movs	r0, #32
    TracePeripheralReady = RESET;
 800cf6a:	701e      	strb	r6, [r3, #0]
    LPM_SetStopMode(LPM_UART_TX_Id , LPM_Disable );
 800cf6c:	f7ff fd08 	bl	800c980 <LPM_SetStopMode>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cf70:	f387 8810 	msr	PRIMASK, r7
    OutputTrace(buffer, bufSize);
 800cf74:	8821      	ldrh	r1, [r4, #0]
 800cf76:	9803      	ldr	r0, [sp, #12]
 800cf78:	f001 fc30 	bl	800e7dc <vcom_Trace>
}
 800cf7c:	0030      	movs	r0, r6
 800cf7e:	b045      	add	sp, #276	; 0x114
 800cf80:	bcf0      	pop	{r4, r5, r6, r7}
 800cf82:	bc08      	pop	{r3}
 800cf84:	b004      	add	sp, #16
 800cf86:	4718      	bx	r3
 800cf88:	f387 8810 	msr	PRIMASK, r7
  return status;
 800cf8c:	e7f6      	b.n	800cf7c <TraceSend+0x5c>
 800cf8e:	46c0      	nop			; (mov r8, r8)
 800cf90:	200011bc 	.word	0x200011bc
 800cf94:	20000194 	.word	0x20000194

0800cf98 <rand1>:

static uint32_t next = 1;

int32_t rand1( void )
{
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 800cf98:	4b06      	ldr	r3, [pc, #24]	; (800cfb4 <rand1+0x1c>)
 800cf9a:	4807      	ldr	r0, [pc, #28]	; (800cfb8 <rand1+0x20>)
 800cf9c:	681a      	ldr	r2, [r3, #0]
{
 800cf9e:	b510      	push	{r4, lr}
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 800cfa0:	4350      	muls	r0, r2
 800cfa2:	4a06      	ldr	r2, [pc, #24]	; (800cfbc <rand1+0x24>)
 800cfa4:	4906      	ldr	r1, [pc, #24]	; (800cfc0 <rand1+0x28>)
 800cfa6:	1880      	adds	r0, r0, r2
 800cfa8:	6018      	str	r0, [r3, #0]
 800cfaa:	f7f3 f963 	bl	8000274 <__aeabi_uidivmod>
}
 800cfae:	0008      	movs	r0, r1
 800cfb0:	bd10      	pop	{r4, pc}
 800cfb2:	46c0      	nop			; (mov r8, r8)
 800cfb4:	20000198 	.word	0x20000198
 800cfb8:	41c64e6d 	.word	0x41c64e6d
 800cfbc:	00003039 	.word	0x00003039
 800cfc0:	7fffffff 	.word	0x7fffffff

0800cfc4 <srand1>:

void srand1( uint32_t seed )
{
    next = seed;
 800cfc4:	4b01      	ldr	r3, [pc, #4]	; (800cfcc <srand1+0x8>)
 800cfc6:	6018      	str	r0, [r3, #0]
}
 800cfc8:	4770      	bx	lr
 800cfca:	46c0      	nop			; (mov r8, r8)
 800cfcc:	20000198 	.word	0x20000198

0800cfd0 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 800cfd0:	b570      	push	{r4, r5, r6, lr}
 800cfd2:	0005      	movs	r5, r0
 800cfd4:	000c      	movs	r4, r1
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 800cfd6:	f7ff ffdf 	bl	800cf98 <rand1>
 800cfda:	1b61      	subs	r1, r4, r5
 800cfdc:	3101      	adds	r1, #1
 800cfde:	f7f3 fa33 	bl	8000448 <__aeabi_idivmod>
 800cfe2:	1948      	adds	r0, r1, r5
}
 800cfe4:	bd70      	pop	{r4, r5, r6, pc}

0800cfe6 <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    while( size-- )
 800cfe6:	2300      	movs	r3, #0
{
 800cfe8:	b510      	push	{r4, lr}
    while( size-- )
 800cfea:	4293      	cmp	r3, r2
 800cfec:	d100      	bne.n	800cff0 <memcpy1+0xa>
    {
        *dst++ = *src++;
    }
}
 800cfee:	bd10      	pop	{r4, pc}
        *dst++ = *src++;
 800cff0:	5ccc      	ldrb	r4, [r1, r3]
 800cff2:	54c4      	strb	r4, [r0, r3]
 800cff4:	3301      	adds	r3, #1
 800cff6:	e7f8      	b.n	800cfea <memcpy1+0x4>

0800cff8 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    dst = dst + ( size - 1 );
 800cff8:	1e53      	subs	r3, r2, #1
 800cffa:	18c0      	adds	r0, r0, r3
    while( size-- )
 800cffc:	2300      	movs	r3, #0
{
 800cffe:	b530      	push	{r4, r5, lr}
    while( size-- )
 800d000:	429a      	cmp	r2, r3
 800d002:	d100      	bne.n	800d006 <memcpyr+0xe>
    {
        *dst-- = *src++;
    }
}
 800d004:	bd30      	pop	{r4, r5, pc}
        *dst-- = *src++;
 800d006:	5ccd      	ldrb	r5, [r1, r3]
 800d008:	425c      	negs	r4, r3
 800d00a:	5505      	strb	r5, [r0, r4]
 800d00c:	3301      	adds	r3, #1
 800d00e:	e7f7      	b.n	800d000 <memcpyr+0x8>

0800d010 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
    while( size-- )
 800d010:	4b04      	ldr	r3, [pc, #16]	; (800d024 <memset1+0x14>)
 800d012:	3a01      	subs	r2, #1
 800d014:	b292      	uxth	r2, r2
 800d016:	429a      	cmp	r2, r3
 800d018:	d100      	bne.n	800d01c <memset1+0xc>
    {
        *dst++ = value;
    }
}
 800d01a:	4770      	bx	lr
        *dst++ = value;
 800d01c:	7001      	strb	r1, [r0, #0]
 800d01e:	3001      	adds	r0, #1
 800d020:	e7f7      	b.n	800d012 <memset1+0x2>
 800d022:	46c0      	nop			; (mov r8, r8)
 800d024:	0000ffff 	.word	0x0000ffff

0800d028 <BSP_sensor_Init>:
  BSP_HUMIDITY_Sensor_Enable(HUMIDITY_handle);
  BSP_TEMPERATURE_Sensor_Enable(TEMPERATURE_handle);
  BSP_PRESSURE_Sensor_Enable(PRESSURE_handle);
#endif
  /* USER CODE END 6 */
}
 800d028:	4770      	bx	lr
	...

0800d02c <honey_start>:
        params
            *honey: pointer type of honey_t variable
        return
            command response
    */
    uint8_t resp[2] = {0};
 800d02c:	2300      	movs	r3, #0
honey_cmd_resp_t honey_start(honey_t* honey) {
 800d02e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    uint8_t resp[2] = {0};
 800d030:	ac01      	add	r4, sp, #4
 800d032:	8023      	strh	r3, [r4, #0]

	HAL_UART_Transmit(&honey->huart, (uint8_t*) CMD_STARTMEAS, 4, 500);
 800d034:	33f5      	adds	r3, #245	; 0xf5
 800d036:	33ff      	adds	r3, #255	; 0xff
 800d038:	2204      	movs	r2, #4
 800d03a:	490a      	ldr	r1, [pc, #40]	; (800d064 <honey_start+0x38>)
honey_cmd_resp_t honey_start(honey_t* honey) {
 800d03c:	0005      	movs	r5, r0
	HAL_UART_Transmit(&honey->huart, (uint8_t*) CMD_STARTMEAS, 4, 500);
 800d03e:	f7f9 fba9 	bl	8006794 <HAL_UART_Transmit>
    HAL_UART_Receive(&honey->huart, (uint8_t*) resp, 2, 500);
 800d042:	23fa      	movs	r3, #250	; 0xfa
 800d044:	2202      	movs	r2, #2
 800d046:	005b      	lsls	r3, r3, #1
 800d048:	0021      	movs	r1, r4
 800d04a:	0028      	movs	r0, r5
 800d04c:	f7f9 fc0c 	bl	8006868 <HAL_UART_Receive>

    if (resp[0] == 0xA5 && resp[1] == 0xA5) { // success is 0xA5A5
 800d050:	7823      	ldrb	r3, [r4, #0]
        return CMD_RESP_SUCCESS;
    }
    
    return CMD_RESP_ERR;
 800d052:	20ff      	movs	r0, #255	; 0xff
    if (resp[0] == 0xA5 && resp[1] == 0xA5) { // success is 0xA5A5
 800d054:	2ba5      	cmp	r3, #165	; 0xa5
 800d056:	d103      	bne.n	800d060 <honey_start+0x34>
 800d058:	7863      	ldrb	r3, [r4, #1]
 800d05a:	2ba5      	cmp	r3, #165	; 0xa5
 800d05c:	d100      	bne.n	800d060 <honey_start+0x34>
        return CMD_RESP_SUCCESS;
 800d05e:	38fe      	subs	r0, #254	; 0xfe
}
 800d060:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 800d062:	46c0      	nop			; (mov r8, r8)
 800d064:	2000019c 	.word	0x2000019c

0800d068 <honey_stop>:

honey_cmd_resp_t honey_stop(honey_t* honey) {
    /* 
        Stop the fan for stopping measuring
    */
    uint8_t resp[2] = {0};
 800d068:	2300      	movs	r3, #0
honey_cmd_resp_t honey_stop(honey_t* honey) {
 800d06a:	b537      	push	{r0, r1, r2, r4, r5, lr}

    HAL_UART_Transmit(&honey->huart, (uint8_t*) CMD_STOPMEAS, 4, 500);
 800d06c:	2204      	movs	r2, #4
    uint8_t resp[2] = {0};
 800d06e:	ac01      	add	r4, sp, #4
    HAL_UART_Transmit(&honey->huart, (uint8_t*) CMD_STOPMEAS, 4, 500);
 800d070:	490b      	ldr	r1, [pc, #44]	; (800d0a0 <honey_stop+0x38>)
    uint8_t resp[2] = {0};
 800d072:	8023      	strh	r3, [r4, #0]
    HAL_UART_Transmit(&honey->huart, (uint8_t*) CMD_STOPMEAS, 4, 500);
 800d074:	33f5      	adds	r3, #245	; 0xf5
 800d076:	1889      	adds	r1, r1, r2
 800d078:	33ff      	adds	r3, #255	; 0xff
honey_cmd_resp_t honey_stop(honey_t* honey) {
 800d07a:	0005      	movs	r5, r0
    HAL_UART_Transmit(&honey->huart, (uint8_t*) CMD_STOPMEAS, 4, 500);
 800d07c:	f7f9 fb8a 	bl	8006794 <HAL_UART_Transmit>
    HAL_UART_Receive(&honey->huart, (uint8_t*) resp, 2, 500);
 800d080:	23fa      	movs	r3, #250	; 0xfa
 800d082:	2202      	movs	r2, #2
 800d084:	005b      	lsls	r3, r3, #1
 800d086:	0021      	movs	r1, r4
 800d088:	0028      	movs	r0, r5
 800d08a:	f7f9 fbed 	bl	8006868 <HAL_UART_Receive>

    if (resp[0] == 0xA5 && resp[1] == 0xA5) {
 800d08e:	7823      	ldrb	r3, [r4, #0]
        return CMD_RESP_SUCCESS;
    }
    
    return CMD_RESP_ERR;
 800d090:	20ff      	movs	r0, #255	; 0xff
    if (resp[0] == 0xA5 && resp[1] == 0xA5) {
 800d092:	2ba5      	cmp	r3, #165	; 0xa5
 800d094:	d103      	bne.n	800d09e <honey_stop+0x36>
 800d096:	7863      	ldrb	r3, [r4, #1]
 800d098:	2ba5      	cmp	r3, #165	; 0xa5
 800d09a:	d100      	bne.n	800d09e <honey_stop+0x36>
        return CMD_RESP_SUCCESS;
 800d09c:	38fe      	subs	r0, #254	; 0xfe
}
 800d09e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 800d0a0:	2000019c 	.word	0x2000019c

0800d0a4 <honey_read>:

honey_cmd_resp_t honey_read(honey_t *honey) {
 800d0a4:	b513      	push	{r0, r1, r4, lr}
    /*
        Read measurement. Values are stored in the honey_t structure
    */
    uint8_t resp[8] = {0};
 800d0a6:	2208      	movs	r2, #8
honey_cmd_resp_t honey_read(honey_t *honey) {
 800d0a8:	0004      	movs	r4, r0
    uint8_t resp[8] = {0};
 800d0aa:	2100      	movs	r1, #0
 800d0ac:	4668      	mov	r0, sp
 800d0ae:	f001 fcc8 	bl	800ea42 <memset>

    HAL_UART_Transmit(&honey->huart, (uint8_t*) CMD_READMEAS, 4, 500);
 800d0b2:	23fa      	movs	r3, #250	; 0xfa
 800d0b4:	4915      	ldr	r1, [pc, #84]	; (800d10c <honey_read+0x68>)
 800d0b6:	005b      	lsls	r3, r3, #1
 800d0b8:	2204      	movs	r2, #4
 800d0ba:	3108      	adds	r1, #8
 800d0bc:	0020      	movs	r0, r4
 800d0be:	f7f9 fb69 	bl	8006794 <HAL_UART_Transmit>
    HAL_UART_Receive(&honey->huart, (uint8_t*) resp, 8, 500);
 800d0c2:	23fa      	movs	r3, #250	; 0xfa
 800d0c4:	2208      	movs	r2, #8
 800d0c6:	005b      	lsls	r3, r3, #1
 800d0c8:	4669      	mov	r1, sp
 800d0ca:	0020      	movs	r0, r4
 800d0cc:	f7f9 fbcc 	bl	8006868 <HAL_UART_Receive>

    if (resp[0] == 0x40 && resp[1] == 0x05 && resp[2] == 0x04) {
 800d0d0:	466b      	mov	r3, sp
 800d0d2:	781b      	ldrb	r3, [r3, #0]
        honey->pm10_0 = resp[5] * 256 + resp[6];

        return CMD_RESP_SUCCESS;
    }

    return CMD_RESP_ERR;
 800d0d4:	20ff      	movs	r0, #255	; 0xff
    if (resp[0] == 0x40 && resp[1] == 0x05 && resp[2] == 0x04) {
 800d0d6:	2b40      	cmp	r3, #64	; 0x40
 800d0d8:	d117      	bne.n	800d10a <honey_read+0x66>
 800d0da:	466b      	mov	r3, sp
 800d0dc:	785b      	ldrb	r3, [r3, #1]
 800d0de:	2b05      	cmp	r3, #5
 800d0e0:	d113      	bne.n	800d10a <honey_read+0x66>
 800d0e2:	466b      	mov	r3, sp
 800d0e4:	789b      	ldrb	r3, [r3, #2]
 800d0e6:	2b04      	cmp	r3, #4
 800d0e8:	d10f      	bne.n	800d10a <honey_read+0x66>
        honey->pm2_5 = resp[3] * 256 + resp[4];
 800d0ea:	466b      	mov	r3, sp
 800d0ec:	78da      	ldrb	r2, [r3, #3]
 800d0ee:	791b      	ldrb	r3, [r3, #4]
 800d0f0:	0212      	lsls	r2, r2, #8
 800d0f2:	189b      	adds	r3, r3, r2
 800d0f4:	0022      	movs	r2, r4
 800d0f6:	3280      	adds	r2, #128	; 0x80
 800d0f8:	8013      	strh	r3, [r2, #0]
        honey->pm10_0 = resp[5] * 256 + resp[6];
 800d0fa:	466b      	mov	r3, sp
 800d0fc:	795a      	ldrb	r2, [r3, #5]
 800d0fe:	799b      	ldrb	r3, [r3, #6]
 800d100:	0212      	lsls	r2, r2, #8
 800d102:	189b      	adds	r3, r3, r2
 800d104:	3482      	adds	r4, #130	; 0x82
 800d106:	8023      	strh	r3, [r4, #0]
        return CMD_RESP_SUCCESS;
 800d108:	38fe      	subs	r0, #254	; 0xfe
}
 800d10a:	bd16      	pop	{r1, r2, r4, pc}
 800d10c:	2000019c 	.word	0x2000019c

0800d110 <honey_autosend>:
            mode: can be either 0 or 1, 0 for disable, 1 for enable
        return
            command response
    */
    
    uint8_t resp[2] = {0};
 800d110:	2300      	movs	r3, #0
honey_cmd_resp_t honey_autosend(honey_t *honey, uint8_t mode) {
 800d112:	b537      	push	{r0, r1, r2, r4, r5, lr}
    uint8_t resp[2] = {0};
 800d114:	ac01      	add	r4, sp, #4
honey_cmd_resp_t honey_autosend(honey_t *honey, uint8_t mode) {
 800d116:	0005      	movs	r5, r0
    uint8_t resp[2] = {0};
 800d118:	8023      	strh	r3, [r4, #0]

    if (mode == 0) { // stop autosend
 800d11a:	4299      	cmp	r1, r3
 800d11c:	d117      	bne.n	800d14e <honey_autosend+0x3e>
        HAL_UART_Transmit(&honey->huart, (uint8_t*) CMD_AUTOSTOP, 4, 500);
 800d11e:	2204      	movs	r2, #4
 800d120:	490f      	ldr	r1, [pc, #60]	; (800d160 <honey_autosend+0x50>)
 800d122:	33f5      	adds	r3, #245	; 0xf5
 800d124:	33ff      	adds	r3, #255	; 0xff
 800d126:	310c      	adds	r1, #12
    } else if (mode == 1) { // enable autosend
        HAL_UART_Transmit(&honey->huart, (uint8_t*) CMD_AUTOEN, 4, 500);
 800d128:	0028      	movs	r0, r5
 800d12a:	f7f9 fb33 	bl	8006794 <HAL_UART_Transmit>
    } else {
        return CMD_RESP_BAD;
    }
    
    // receiving response
    HAL_UART_Receive(&honey->huart, (uint8_t*) resp, 2, 500);
 800d12e:	23fa      	movs	r3, #250	; 0xfa
 800d130:	2202      	movs	r2, #2
 800d132:	005b      	lsls	r3, r3, #1
 800d134:	0021      	movs	r1, r4
 800d136:	0028      	movs	r0, r5
 800d138:	f7f9 fb96 	bl	8006868 <HAL_UART_Receive>

    if (resp[0] == 0xA5 && resp[1] == 0xA5) {
 800d13c:	7823      	ldrb	r3, [r4, #0]
        return CMD_RESP_SUCCESS;
    }
    
    return CMD_RESP_ERR;
 800d13e:	20ff      	movs	r0, #255	; 0xff
    if (resp[0] == 0xA5 && resp[1] == 0xA5) {
 800d140:	2ba5      	cmp	r3, #165	; 0xa5
 800d142:	d103      	bne.n	800d14c <honey_autosend+0x3c>
 800d144:	7863      	ldrb	r3, [r4, #1]
 800d146:	2ba5      	cmp	r3, #165	; 0xa5
 800d148:	d100      	bne.n	800d14c <honey_autosend+0x3c>
        return CMD_RESP_SUCCESS;
 800d14a:	38fe      	subs	r0, #254	; 0xfe
}
 800d14c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
        return CMD_RESP_BAD;
 800d14e:	2003      	movs	r0, #3
    } else if (mode == 1) { // enable autosend
 800d150:	2901      	cmp	r1, #1
 800d152:	d1fb      	bne.n	800d14c <honey_autosend+0x3c>
        HAL_UART_Transmit(&honey->huart, (uint8_t*) CMD_AUTOEN, 4, 500);
 800d154:	23fa      	movs	r3, #250	; 0xfa
 800d156:	4902      	ldr	r1, [pc, #8]	; (800d160 <honey_autosend+0x50>)
 800d158:	005b      	lsls	r3, r3, #1
 800d15a:	2204      	movs	r2, #4
 800d15c:	3110      	adds	r1, #16
 800d15e:	e7e3      	b.n	800d128 <honey_autosend+0x18>
 800d160:	2000019c 	.word	0x2000019c

0800d164 <honey_read_coef>:
    }

    return CMD_RESP_ERR;
}

honey_cmd_resp_t honey_read_coef(honey_t* honey) {
 800d164:	b513      	push	{r0, r1, r4, lr}
    /*
        Read customer coefficient from the sensor and automatically set
        customer coefficient constructor to the value that's been read
    */
    uint8_t resp[5] = {0};
 800d166:	2205      	movs	r2, #5
honey_cmd_resp_t honey_read_coef(honey_t* honey) {
 800d168:	0004      	movs	r4, r0
    uint8_t resp[5] = {0};
 800d16a:	2100      	movs	r1, #0
 800d16c:	4668      	mov	r0, sp
 800d16e:	f001 fc68 	bl	800ea42 <memset>

    HAL_UART_Transmit(&honey->huart, (uint8_t*) CMD_READCOEF, 4, 500);
 800d172:	23fa      	movs	r3, #250	; 0xfa
 800d174:	490f      	ldr	r1, [pc, #60]	; (800d1b4 <honey_read_coef+0x50>)
 800d176:	005b      	lsls	r3, r3, #1
 800d178:	2204      	movs	r2, #4
 800d17a:	3114      	adds	r1, #20
 800d17c:	0020      	movs	r0, r4
 800d17e:	f7f9 fb09 	bl	8006794 <HAL_UART_Transmit>
    HAL_UART_Receive(&honey->huart, (uint8_t*) resp, 5, 100);
 800d182:	2364      	movs	r3, #100	; 0x64
 800d184:	2205      	movs	r2, #5
 800d186:	4669      	mov	r1, sp
 800d188:	0020      	movs	r0, r4
 800d18a:	f7f9 fb6d 	bl	8006868 <HAL_UART_Receive>

    if (resp[0] == 0x40 && resp[1] == 0x02 && resp[2] == 0x10) {
 800d18e:	466b      	mov	r3, sp
 800d190:	781b      	ldrb	r3, [r3, #0]
        honey->customer_coef = resp[3];

        return CMD_RESP_SUCCESS;
    }

    return CMD_RESP_ERR;
 800d192:	20ff      	movs	r0, #255	; 0xff
    if (resp[0] == 0x40 && resp[1] == 0x02 && resp[2] == 0x10) {
 800d194:	2b40      	cmp	r3, #64	; 0x40
 800d196:	d10c      	bne.n	800d1b2 <honey_read_coef+0x4e>
 800d198:	466b      	mov	r3, sp
 800d19a:	785b      	ldrb	r3, [r3, #1]
 800d19c:	2b02      	cmp	r3, #2
 800d19e:	d108      	bne.n	800d1b2 <honey_read_coef+0x4e>
 800d1a0:	466b      	mov	r3, sp
 800d1a2:	789b      	ldrb	r3, [r3, #2]
 800d1a4:	2b10      	cmp	r3, #16
 800d1a6:	d104      	bne.n	800d1b2 <honey_read_coef+0x4e>
        honey->customer_coef = resp[3];
 800d1a8:	466b      	mov	r3, sp
 800d1aa:	78db      	ldrb	r3, [r3, #3]
 800d1ac:	3484      	adds	r4, #132	; 0x84
 800d1ae:	7023      	strb	r3, [r4, #0]
        return CMD_RESP_SUCCESS;
 800d1b0:	38fe      	subs	r0, #254	; 0xfe
}
 800d1b2:	bd16      	pop	{r1, r2, r4, pc}
 800d1b4:	2000019c 	.word	0x2000019c

0800d1b8 <honey_init>:
honey_cmd_resp_t honey_init(UART_HandleTypeDef huart, honey_t* honey) {
 800d1b8:	b084      	sub	sp, #16
 800d1ba:	b570      	push	{r4, r5, r6, lr}
 800d1bc:	9c24      	ldr	r4, [sp, #144]	; 0x90
 800d1be:	9004      	str	r0, [sp, #16]
 800d1c0:	9105      	str	r1, [sp, #20]
 800d1c2:	9206      	str	r2, [sp, #24]
    honey->huart  = huart;
 800d1c4:	a904      	add	r1, sp, #16
 800d1c6:	2280      	movs	r2, #128	; 0x80
 800d1c8:	0020      	movs	r0, r4
    honey->pm2_5  = 0;
 800d1ca:	2500      	movs	r5, #0
honey_cmd_resp_t honey_init(UART_HandleTypeDef huart, honey_t* honey) {
 800d1cc:	9307      	str	r3, [sp, #28]
    honey->huart  = huart;
 800d1ce:	f001 fc2f 	bl	800ea30 <memcpy>
    honey->pm10_0 = 0;
 800d1d2:	2264      	movs	r2, #100	; 0x64
    honey->pm2_5  = 0;
 800d1d4:	1d23      	adds	r3, r4, #4
 800d1d6:	67dd      	str	r5, [r3, #124]	; 0x7c
    honey->pm10_0 = 0;
 800d1d8:	3380      	adds	r3, #128	; 0x80
 800d1da:	701a      	strb	r2, [r3, #0]
    if (honey_stop(honey) != CMD_RESP_SUCCESS) return CMD_RESP_ERR;
 800d1dc:	0020      	movs	r0, r4
 800d1de:	f7ff ff43 	bl	800d068 <honey_stop>
 800d1e2:	2801      	cmp	r0, #1
 800d1e4:	d004      	beq.n	800d1f0 <honey_init+0x38>
 800d1e6:	20ff      	movs	r0, #255	; 0xff
}
 800d1e8:	bc70      	pop	{r4, r5, r6}
 800d1ea:	bc08      	pop	{r3}
 800d1ec:	b004      	add	sp, #16
 800d1ee:	4718      	bx	r3
    if (honey_autosend(honey, 0) != CMD_RESP_SUCCESS) return CMD_RESP_ERR;
 800d1f0:	0029      	movs	r1, r5
 800d1f2:	0020      	movs	r0, r4
 800d1f4:	f7ff ff8c 	bl	800d110 <honey_autosend>
 800d1f8:	2801      	cmp	r0, #1
 800d1fa:	d1f4      	bne.n	800d1e6 <honey_init+0x2e>
    if (honey_read_coef(honey) != CMD_RESP_SUCCESS) return CMD_RESP_ERR;
 800d1fc:	0020      	movs	r0, r4
 800d1fe:	f7ff ffb1 	bl	800d164 <honey_read_coef>
 800d202:	2801      	cmp	r0, #1
 800d204:	d0f0      	beq.n	800d1e8 <honey_init+0x30>
 800d206:	e7ee      	b.n	800d1e6 <honey_init+0x2e>

0800d208 <calc_cs>:
    uint8_t cs   = 0;
    uint8_t temp = 0;
    uint8_t i    = 0;

    // sum of HEAD+LEN+CMD+DATA values
    for (i = 0; i < (cmd_len - 1); ++i) {
 800d208:	2300      	movs	r3, #0
    uint8_t temp = 0;
 800d20a:	001a      	movs	r2, r3
uint8_t calc_cs(uint8_t* CMD, uint8_t cmd_len) {
 800d20c:	b510      	push	{r4, lr}
    for (i = 0; i < (cmd_len - 1); ++i) {
 800d20e:	3901      	subs	r1, #1
 800d210:	428b      	cmp	r3, r1
 800d212:	db0b      	blt.n	800d22c <calc_cs+0x24>
        temp += *(CMD + i);
    }

    // calculate Check Sum
    cs = (65536 - temp) % 256;
 800d214:	2080      	movs	r0, #128	; 0x80
 800d216:	4b08      	ldr	r3, [pc, #32]	; (800d238 <calc_cs+0x30>)
 800d218:	0240      	lsls	r0, r0, #9
 800d21a:	1a80      	subs	r0, r0, r2
 800d21c:	4018      	ands	r0, r3
 800d21e:	d503      	bpl.n	800d228 <calc_cs+0x20>
 800d220:	4b06      	ldr	r3, [pc, #24]	; (800d23c <calc_cs+0x34>)
 800d222:	3801      	subs	r0, #1
 800d224:	4318      	orrs	r0, r3
 800d226:	3001      	adds	r0, #1
    return cs;
 800d228:	b2c0      	uxtb	r0, r0
}
 800d22a:	bd10      	pop	{r4, pc}
        temp += *(CMD + i);
 800d22c:	5cc4      	ldrb	r4, [r0, r3]
    for (i = 0; i < (cmd_len - 1); ++i) {
 800d22e:	3301      	adds	r3, #1
        temp += *(CMD + i);
 800d230:	1912      	adds	r2, r2, r4
 800d232:	b2d2      	uxtb	r2, r2
    for (i = 0; i < (cmd_len - 1); ++i) {
 800d234:	b2db      	uxtb	r3, r3
 800d236:	e7eb      	b.n	800d210 <calc_cs+0x8>
 800d238:	800000ff 	.word	0x800000ff
 800d23c:	ffffff00 	.word	0xffffff00

0800d240 <honey_set_coef>:
    uint8_t resp[2] = {0};
 800d240:	2300      	movs	r3, #0
honey_cmd_resp_t honey_set_coef(honey_t *honey, uint8_t coef) {
 800d242:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    CMD_SETCOEF[3] = honey->customer_coef = coef;
 800d244:	4e12      	ldr	r6, [pc, #72]	; (800d290 <honey_set_coef+0x50>)
    uint8_t resp[2] = {0};
 800d246:	ac01      	add	r4, sp, #4
 800d248:	8023      	strh	r3, [r4, #0]
    cs = calc_cs(CMD_SETCOEF, 5);
 800d24a:	0037      	movs	r7, r6
    CMD_SETCOEF[3] = honey->customer_coef = coef;
 800d24c:	0003      	movs	r3, r0
    cs = calc_cs(CMD_SETCOEF, 5);
 800d24e:	3718      	adds	r7, #24
    CMD_SETCOEF[3] = honey->customer_coef = coef;
 800d250:	3384      	adds	r3, #132	; 0x84
honey_cmd_resp_t honey_set_coef(honey_t *honey, uint8_t coef) {
 800d252:	0005      	movs	r5, r0
    CMD_SETCOEF[3] = honey->customer_coef = coef;
 800d254:	7019      	strb	r1, [r3, #0]
 800d256:	76f1      	strb	r1, [r6, #27]
    cs = calc_cs(CMD_SETCOEF, 5);
 800d258:	0038      	movs	r0, r7
 800d25a:	2105      	movs	r1, #5
 800d25c:	f7ff ffd4 	bl	800d208 <calc_cs>
    HAL_UART_Transmit(&honey->huart, (uint8_t*) CMD_SETCOEF, 5, 500);
 800d260:	23fa      	movs	r3, #250	; 0xfa
    CMD_SETCOEF[4] = cs;
 800d262:	7730      	strb	r0, [r6, #28]
    HAL_UART_Transmit(&honey->huart, (uint8_t*) CMD_SETCOEF, 5, 500);
 800d264:	005b      	lsls	r3, r3, #1
 800d266:	2205      	movs	r2, #5
 800d268:	0039      	movs	r1, r7
 800d26a:	0028      	movs	r0, r5
 800d26c:	f7f9 fa92 	bl	8006794 <HAL_UART_Transmit>
    HAL_UART_Receive(&honey->huart, (uint8_t*) resp, 2, 500);
 800d270:	23fa      	movs	r3, #250	; 0xfa
 800d272:	2202      	movs	r2, #2
 800d274:	005b      	lsls	r3, r3, #1
 800d276:	0021      	movs	r1, r4
 800d278:	0028      	movs	r0, r5
 800d27a:	f7f9 faf5 	bl	8006868 <HAL_UART_Receive>
    if (resp[0] == 0xA5 && resp[1] == 0xA5) {
 800d27e:	7823      	ldrb	r3, [r4, #0]
    return CMD_RESP_ERR;
 800d280:	20ff      	movs	r0, #255	; 0xff
    if (resp[0] == 0xA5 && resp[1] == 0xA5) {
 800d282:	2ba5      	cmp	r3, #165	; 0xa5
 800d284:	d103      	bne.n	800d28e <honey_set_coef+0x4e>
 800d286:	7863      	ldrb	r3, [r4, #1]
 800d288:	2ba5      	cmp	r3, #165	; 0xa5
 800d28a:	d100      	bne.n	800d28e <honey_set_coef+0x4e>
        return CMD_RESP_SUCCESS;
 800d28c:	38fe      	subs	r0, #254	; 0xfe
}
 800d28e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d290:	2000019c 	.word	0x2000019c

0800d294 <DBG_Init>:
/* Private variables ---------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Exported functions ------------------------------------------------------- */

void DBG_Init(void)
{
 800d294:	b570      	push	{r4, r5, r6, lr}
#ifdef DEBUG
  GPIO_InitTypeDef  gpioinitstruct = {0};
 800d296:	2600      	movs	r6, #0

  /* Enable the GPIO_B Clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800d298:	2102      	movs	r1, #2
{
 800d29a:	b086      	sub	sp, #24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800d29c:	4c1d      	ldr	r4, [pc, #116]	; (800d314 <DBG_Init+0x80>)
  GPIO_InitTypeDef  gpioinitstruct = {0};
 800d29e:	9605      	str	r6, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800d2a0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  gpioinitstruct.Mode   = GPIO_MODE_OUTPUT_PP;
  gpioinitstruct.Pull   = GPIO_PULLUP;
  gpioinitstruct.Speed  = GPIO_SPEED_HIGH;

  gpioinitstruct.Pin    = (GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15);
  HAL_GPIO_Init(GPIOB, &gpioinitstruct);
 800d2a2:	4d1d      	ldr	r5, [pc, #116]	; (800d318 <DBG_Init+0x84>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800d2a4:	430a      	orrs	r2, r1
 800d2a6:	62e2      	str	r2, [r4, #44]	; 0x2c
 800d2a8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &gpioinitstruct);
 800d2aa:	0028      	movs	r0, r5
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800d2ac:	400b      	ands	r3, r1
 800d2ae:	9300      	str	r3, [sp, #0]
 800d2b0:	9b00      	ldr	r3, [sp, #0]
  gpioinitstruct.Mode   = GPIO_MODE_OUTPUT_PP;
 800d2b2:	2301      	movs	r3, #1
 800d2b4:	9302      	str	r3, [sp, #8]
  gpioinitstruct.Pull   = GPIO_PULLUP;
 800d2b6:	9303      	str	r3, [sp, #12]
  gpioinitstruct.Speed  = GPIO_SPEED_HIGH;
 800d2b8:	185b      	adds	r3, r3, r1
 800d2ba:	9304      	str	r3, [sp, #16]
  gpioinitstruct.Pin    = (GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15);
 800d2bc:	23f0      	movs	r3, #240	; 0xf0
  HAL_GPIO_Init(GPIOB, &gpioinitstruct);
 800d2be:	a901      	add	r1, sp, #4
  gpioinitstruct.Pin    = (GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15);
 800d2c0:	021b      	lsls	r3, r3, #8
 800d2c2:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(GPIOB, &gpioinitstruct);
 800d2c4:	f7f7 fb20 	bl	8004908 <HAL_GPIO_Init>

  /* Reset debug Pins */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 800d2c8:	2180      	movs	r1, #128	; 0x80
 800d2ca:	0032      	movs	r2, r6
 800d2cc:	0028      	movs	r0, r5
 800d2ce:	0149      	lsls	r1, r1, #5
 800d2d0:	f7f7 fbda 	bl	8004a88 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 800d2d4:	2180      	movs	r1, #128	; 0x80
 800d2d6:	0032      	movs	r2, r6
 800d2d8:	0028      	movs	r0, r5
 800d2da:	0189      	lsls	r1, r1, #6
 800d2dc:	f7f7 fbd4 	bl	8004a88 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 800d2e0:	2180      	movs	r1, #128	; 0x80
 800d2e2:	0032      	movs	r2, r6
 800d2e4:	0028      	movs	r0, r5
 800d2e6:	01c9      	lsls	r1, r1, #7
 800d2e8:	f7f7 fbce 	bl	8004a88 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 800d2ec:	2180      	movs	r1, #128	; 0x80
 800d2ee:	0028      	movs	r0, r5
 800d2f0:	0209      	lsls	r1, r1, #8
 800d2f2:	0032      	movs	r2, r6
 800d2f4:	f7f7 fbc8 	bl	8004a88 <HAL_GPIO_WritePin>

  __HAL_RCC_DBGMCU_CLK_ENABLE();
 800d2f8:	2380      	movs	r3, #128	; 0x80
 800d2fa:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800d2fc:	03db      	lsls	r3, r3, #15
 800d2fe:	4313      	orrs	r3, r2
 800d300:	6363      	str	r3, [r4, #52]	; 0x34

  HAL_DBGMCU_EnableDBGSleepMode();
 800d302:	f7f6 ff43 	bl	800418c <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 800d306:	f7f6 ff49 	bl	800419c <HAL_DBGMCU_EnableDBGStopMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
 800d30a:	f7f6 ff4f 	bl	80041ac <HAL_DBGMCU_EnableDBGStandbyMode>
  HAL_DBGMCU_DisableDBGSleepMode();
  HAL_DBGMCU_DisableDBGStopMode();
  HAL_DBGMCU_DisableDBGStandbyMode();
  __HAL_RCC_DBGMCU_CLK_DISABLE();
#endif
}
 800d30e:	b006      	add	sp, #24
 800d310:	bd70      	pop	{r4, r5, r6, pc}
 800d312:	46c0      	nop			; (mov r8, r8)
 800d314:	40021000 	.word	0x40021000
 800d318:	50000400 	.word	0x50000400

0800d31c <Error_Handler>:

void Error_Handler(void)
{
 800d31c:	b510      	push	{r4, lr}
  PRINTF("Error_Handler\n\r");
 800d31e:	4802      	ldr	r0, [pc, #8]	; (800d328 <Error_Handler+0xc>)
 800d320:	f7ff fdfe 	bl	800cf20 <TraceSend>
 800d324:	e7fe      	b.n	800d324 <Error_Handler+0x8>
 800d326:	46c0      	nop			; (mov r8, r8)
 800d328:	08010052 	.word	0x08010052

0800d32c <HW_GPIO_GetBitPos>:
 */
static uint8_t HW_GPIO_GetBitPos(uint16_t GPIO_Pin)
{
  uint8_t PinPos = 0;

  if ((GPIO_Pin & 0xFF00) != 0)
 800d32c:	0001      	movs	r1, r0
 800d32e:	23ff      	movs	r3, #255	; 0xff
 800d330:	4399      	bics	r1, r3
 800d332:	000b      	movs	r3, r1
{
 800d334:	0002      	movs	r2, r0
  {
    PinPos |= 0x8;
 800d336:	1e58      	subs	r0, r3, #1
 800d338:	4183      	sbcs	r3, r0
 800d33a:	00d8      	lsls	r0, r3, #3
  }
  if ((GPIO_Pin & 0xF0F0) != 0)
 800d33c:	4b07      	ldr	r3, [pc, #28]	; (800d35c <HW_GPIO_GetBitPos+0x30>)
 800d33e:	421a      	tst	r2, r3
 800d340:	d001      	beq.n	800d346 <HW_GPIO_GetBitPos+0x1a>
  {
    PinPos |= 0x4;
 800d342:	2304      	movs	r3, #4
 800d344:	4318      	orrs	r0, r3
  }
  if ((GPIO_Pin & 0xCCCC) != 0)
 800d346:	4b06      	ldr	r3, [pc, #24]	; (800d360 <HW_GPIO_GetBitPos+0x34>)
 800d348:	421a      	tst	r2, r3
 800d34a:	d001      	beq.n	800d350 <HW_GPIO_GetBitPos+0x24>
  {
    PinPos |= 0x2;
 800d34c:	2302      	movs	r3, #2
 800d34e:	4318      	orrs	r0, r3
  }
  if ((GPIO_Pin & 0xAAAA) != 0)
 800d350:	4b04      	ldr	r3, [pc, #16]	; (800d364 <HW_GPIO_GetBitPos+0x38>)
 800d352:	421a      	tst	r2, r3
 800d354:	d001      	beq.n	800d35a <HW_GPIO_GetBitPos+0x2e>
  {
    PinPos |= 0x1;
 800d356:	2301      	movs	r3, #1
 800d358:	4318      	orrs	r0, r3
  }

  return PinPos;
}
 800d35a:	4770      	bx	lr
 800d35c:	fffff0f0 	.word	0xfffff0f0
 800d360:	ffffcccc 	.word	0xffffcccc
 800d364:	ffffaaaa 	.word	0xffffaaaa

0800d368 <HW_GPIO_Init>:
{
 800d368:	b530      	push	{r4, r5, lr}
  RCC_GPIO_CLK_ENABLE((uint32_t) port);
 800d36a:	4c21      	ldr	r4, [pc, #132]	; (800d3f0 <HW_GPIO_Init+0x88>)
{
 800d36c:	b087      	sub	sp, #28
 800d36e:	4b21      	ldr	r3, [pc, #132]	; (800d3f4 <HW_GPIO_Init+0x8c>)
  RCC_GPIO_CLK_ENABLE((uint32_t) port);
 800d370:	42a0      	cmp	r0, r4
 800d372:	d02a      	beq.n	800d3ca <HW_GPIO_Init+0x62>
 800d374:	d80c      	bhi.n	800d390 <HW_GPIO_Init+0x28>
 800d376:	24a0      	movs	r4, #160	; 0xa0
 800d378:	05e4      	lsls	r4, r4, #23
 800d37a:	42a0      	cmp	r0, r4
 800d37c:	d017      	beq.n	800d3ae <HW_GPIO_Init+0x46>
 800d37e:	2580      	movs	r5, #128	; 0x80
 800d380:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800d382:	432c      	orrs	r4, r5
 800d384:	62dc      	str	r4, [r3, #44]	; 0x2c
 800d386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d388:	402b      	ands	r3, r5
 800d38a:	9305      	str	r3, [sp, #20]
 800d38c:	9b05      	ldr	r3, [sp, #20]
 800d38e:	e016      	b.n	800d3be <HW_GPIO_Init+0x56>
 800d390:	4c19      	ldr	r4, [pc, #100]	; (800d3f8 <HW_GPIO_Init+0x90>)
 800d392:	42a0      	cmp	r0, r4
 800d394:	d022      	beq.n	800d3dc <HW_GPIO_Init+0x74>
 800d396:	4c19      	ldr	r4, [pc, #100]	; (800d3fc <HW_GPIO_Init+0x94>)
 800d398:	42a0      	cmp	r0, r4
 800d39a:	d1f0      	bne.n	800d37e <HW_GPIO_Init+0x16>
 800d39c:	2508      	movs	r5, #8
 800d39e:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800d3a0:	432c      	orrs	r4, r5
 800d3a2:	62dc      	str	r4, [r3, #44]	; 0x2c
 800d3a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3a6:	402b      	ands	r3, r5
 800d3a8:	9304      	str	r3, [sp, #16]
 800d3aa:	9b04      	ldr	r3, [sp, #16]
 800d3ac:	e007      	b.n	800d3be <HW_GPIO_Init+0x56>
 800d3ae:	2501      	movs	r5, #1
 800d3b0:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800d3b2:	432c      	orrs	r4, r5
 800d3b4:	62dc      	str	r4, [r3, #44]	; 0x2c
 800d3b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3b8:	402b      	ands	r3, r5
 800d3ba:	9301      	str	r3, [sp, #4]
 800d3bc:	9b01      	ldr	r3, [sp, #4]
  initStruct->Pin = GPIO_Pin ;
 800d3be:	6011      	str	r1, [r2, #0]
  HAL_GPIO_Init(port, initStruct);
 800d3c0:	0011      	movs	r1, r2
 800d3c2:	f7f7 faa1 	bl	8004908 <HAL_GPIO_Init>
}
 800d3c6:	b007      	add	sp, #28
 800d3c8:	bd30      	pop	{r4, r5, pc}
  RCC_GPIO_CLK_ENABLE((uint32_t) port);
 800d3ca:	2502      	movs	r5, #2
 800d3cc:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800d3ce:	432c      	orrs	r4, r5
 800d3d0:	62dc      	str	r4, [r3, #44]	; 0x2c
 800d3d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3d4:	402b      	ands	r3, r5
 800d3d6:	9302      	str	r3, [sp, #8]
 800d3d8:	9b02      	ldr	r3, [sp, #8]
 800d3da:	e7f0      	b.n	800d3be <HW_GPIO_Init+0x56>
 800d3dc:	2504      	movs	r5, #4
 800d3de:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800d3e0:	432c      	orrs	r4, r5
 800d3e2:	62dc      	str	r4, [r3, #44]	; 0x2c
 800d3e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3e6:	402b      	ands	r3, r5
 800d3e8:	9303      	str	r3, [sp, #12]
 800d3ea:	9b03      	ldr	r3, [sp, #12]
 800d3ec:	e7e7      	b.n	800d3be <HW_GPIO_Init+0x56>
 800d3ee:	46c0      	nop			; (mov r8, r8)
 800d3f0:	50000400 	.word	0x50000400
 800d3f4:	40021000 	.word	0x40021000
 800d3f8:	50000800 	.word	0x50000800
 800d3fc:	50000c00 	.word	0x50000c00

0800d400 <HW_GPIO_SetIrq>:
{
 800d400:	b570      	push	{r4, r5, r6, lr}
  uint32_t BitPos = HW_GPIO_GetBitPos(GPIO_Pin) ;
 800d402:	0008      	movs	r0, r1
{
 800d404:	001c      	movs	r4, r3
 800d406:	000d      	movs	r5, r1
 800d408:	0016      	movs	r6, r2
  uint32_t BitPos = HW_GPIO_GetBitPos(GPIO_Pin) ;
 800d40a:	f7ff ff8f 	bl	800d32c <HW_GPIO_GetBitPos>
 800d40e:	4b08      	ldr	r3, [pc, #32]	; (800d430 <HW_GPIO_SetIrq+0x30>)
 800d410:	0080      	lsls	r0, r0, #2
    GpioIrq[ BitPos ] = irqHandler;
 800d412:	501c      	str	r4, [r3, r0]
  if (irqHandler != NULL)
 800d414:	2c00      	cmp	r4, #0
 800d416:	d00a      	beq.n	800d42e <HW_GPIO_SetIrq+0x2e>
    IRQnb = MSP_GetIRQn(GPIO_Pin);
 800d418:	0028      	movs	r0, r5
 800d41a:	f000 ff8f 	bl	800e33c <MSP_GetIRQn>
 800d41e:	0004      	movs	r4, r0
    HAL_NVIC_SetPriority(IRQnb, prio, 0);
 800d420:	2200      	movs	r2, #0
 800d422:	0031      	movs	r1, r6
 800d424:	f7f7 f924 	bl	8004670 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IRQnb);
 800d428:	0020      	movs	r0, r4
 800d42a:	f7f7 f94b 	bl	80046c4 <HAL_NVIC_EnableIRQ>
}
 800d42e:	bd70      	pop	{r4, r5, r6, pc}
 800d430:	200012cc 	.word	0x200012cc

0800d434 <HW_GPIO_IrqHandler>:
{
 800d434:	b510      	push	{r4, lr}
  uint32_t BitPos = HW_GPIO_GetBitPos(GPIO_Pin);
 800d436:	f7ff ff79 	bl	800d32c <HW_GPIO_GetBitPos>
  if (GpioIrq[ BitPos ]  != NULL)
 800d43a:	4b04      	ldr	r3, [pc, #16]	; (800d44c <HW_GPIO_IrqHandler+0x18>)
 800d43c:	0080      	lsls	r0, r0, #2
 800d43e:	58c3      	ldr	r3, [r0, r3]
 800d440:	2b00      	cmp	r3, #0
 800d442:	d001      	beq.n	800d448 <HW_GPIO_IrqHandler+0x14>
    GpioIrq[ BitPos ](NULL);
 800d444:	2000      	movs	r0, #0
 800d446:	4798      	blx	r3
}
 800d448:	bd10      	pop	{r4, pc}
 800d44a:	46c0      	nop			; (mov r8, r8)
 800d44c:	200012cc 	.word	0x200012cc

0800d450 <HW_GPIO_Write>:
{
 800d450:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin(GPIOx, GPIO_Pin, (GPIO_PinState) value);
 800d452:	b2d2      	uxtb	r2, r2
 800d454:	f7f7 fb18 	bl	8004a88 <HAL_GPIO_WritePin>
}
 800d458:	bd10      	pop	{r4, pc}
	...

0800d45c <HW_RTC_GetCalendarValue>:
 * @param pointer to RTC_DateStruct
 * @param pointer to RTC_TimeStruct
 * @retval time in ticks
 */
static uint64_t HW_RTC_GetCalendarValue(RTC_DateTypeDef *RTC_DateStruct, RTC_TimeTypeDef *RTC_TimeStruct)
{
 800d45c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t first_read;
  uint32_t correction;
  uint32_t seconds;

  /* Get Time and Date*/
  HAL_RTC_GetTime(&RtcHandle, RTC_TimeStruct, RTC_FORMAT_BIN);
 800d45e:	4e27      	ldr	r6, [pc, #156]	; (800d4fc <HW_RTC_GetCalendarValue+0xa0>)
{
 800d460:	0005      	movs	r5, r0
  HAL_RTC_GetTime(&RtcHandle, RTC_TimeStruct, RTC_FORMAT_BIN);
 800d462:	2200      	movs	r2, #0
 800d464:	0030      	movs	r0, r6
{
 800d466:	000c      	movs	r4, r1
  HAL_RTC_GetTime(&RtcHandle, RTC_TimeStruct, RTC_FORMAT_BIN);
 800d468:	f7f8 fa76 	bl	8005958 <HAL_RTC_GetTime>
  * @param  RTCx RTC Instance
  * @retval Sub second value (number between 0 and 65535)
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 800d46c:	4f24      	ldr	r7, [pc, #144]	; (800d500 <HW_RTC_GetCalendarValue+0xa4>)

  /* make sure it is correct due to asynchronus nature of RTC*/
  do
  {
    first_read = LL_RTC_TIME_GetSubSecond(RTC);
    HAL_RTC_GetDate(&RtcHandle, RTC_DateStruct, RTC_FORMAT_BIN);
 800d46e:	2200      	movs	r2, #0
 800d470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d472:	0029      	movs	r1, r5
 800d474:	0030      	movs	r0, r6
 800d476:	9301      	str	r3, [sp, #4]
 800d478:	f7f8 fa98 	bl	80059ac <HAL_RTC_GetDate>
    HAL_RTC_GetTime(&RtcHandle, RTC_TimeStruct, RTC_FORMAT_BIN);
 800d47c:	2200      	movs	r2, #0
 800d47e:	0021      	movs	r1, r4
 800d480:	0030      	movs	r0, r6
 800d482:	f7f8 fa69 	bl	8005958 <HAL_RTC_GetTime>
 800d486:	466b      	mov	r3, sp
 800d488:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d48a:	889b      	ldrh	r3, [r3, #4]
 800d48c:	b292      	uxth	r2, r2

  }
  while (first_read != LL_RTC_TIME_GetSubSecond(RTC));
 800d48e:	429a      	cmp	r2, r3
 800d490:	d1ec      	bne.n	800d46c <HW_RTC_GetCalendarValue+0x10>

  /* calculte amount of elapsed days since 01/01/2000 */
  seconds = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);

  correction = ((RTC_DateStruct->Year % 4) == 0) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM ;
 800d492:	2103      	movs	r1, #3
  seconds = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 800d494:	78ea      	ldrb	r2, [r5, #3]
 800d496:	481b      	ldr	r0, [pc, #108]	; (800d504 <HW_RTC_GetCalendarValue+0xa8>)

  seconds += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31), 2) - (((correction >> ((RTC_DateStruct->Month - 1) * 2)) & 0x3)));
 800d498:	786e      	ldrb	r6, [r5, #1]
  seconds = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 800d49a:	4350      	muls	r0, r2
  correction = ((RTC_DateStruct->Year % 4) == 0) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM ;
 800d49c:	400a      	ands	r2, r1
 800d49e:	4253      	negs	r3, r2
 800d4a0:	4153      	adcs	r3, r2
 800d4a2:	4a19      	ldr	r2, [pc, #100]	; (800d508 <HW_RTC_GetCalendarValue+0xac>)
 800d4a4:	425b      	negs	r3, r3
 800d4a6:	4013      	ands	r3, r2
 800d4a8:	4a18      	ldr	r2, [pc, #96]	; (800d50c <HW_RTC_GetCalendarValue+0xb0>)
  seconds += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31), 2) - (((correction >> ((RTC_DateStruct->Month - 1) * 2)) & 0x3)));
 800d4aa:	3e01      	subs	r6, #1
  correction = ((RTC_DateStruct->Year % 4) == 0) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM ;
 800d4ac:	189b      	adds	r3, r3, r2
  seconds += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31), 2) - (((correction >> ((RTC_DateStruct->Month - 1) * 2)) & 0x3)));
 800d4ae:	223d      	movs	r2, #61	; 0x3d
 800d4b0:	4372      	muls	r2, r6
 800d4b2:	0076      	lsls	r6, r6, #1
 800d4b4:	40f3      	lsrs	r3, r6
 800d4b6:	3201      	adds	r2, #1

  seconds += (RTC_DateStruct->Date - 1);
 800d4b8:	78ad      	ldrb	r5, [r5, #2]
  seconds += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31), 2) - (((correction >> ((RTC_DateStruct->Month - 1) * 2)) & 0x3)));
 800d4ba:	0fd7      	lsrs	r7, r2, #31
  seconds = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 800d4bc:	3003      	adds	r0, #3
  seconds += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31), 2) - (((correction >> ((RTC_DateStruct->Month - 1) * 2)) & 0x3)));
 800d4be:	18ba      	adds	r2, r7, r2
 800d4c0:	3d01      	subs	r5, #1
  seconds = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 800d4c2:	0880      	lsrs	r0, r0, #2
  seconds += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31), 2) - (((correction >> ((RTC_DateStruct->Month - 1) * 2)) & 0x3)));
 800d4c4:	1052      	asrs	r2, r2, #1
 800d4c6:	1828      	adds	r0, r5, r0
 800d4c8:	1810      	adds	r0, r2, r0
 800d4ca:	400b      	ands	r3, r1
  seconds += (RTC_DateStruct->Date - 1);
 800d4cc:	1ac3      	subs	r3, r0, r3

  /* convert from days to seconds */
  seconds *= SECONDS_IN_1DAY;
 800d4ce:	4810      	ldr	r0, [pc, #64]	; (800d510 <HW_RTC_GetCalendarValue+0xb4>)

  seconds += ((uint32_t)RTC_TimeStruct->Seconds +
              ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
              ((uint32_t)RTC_TimeStruct->Hours * SECONDS_IN_1HOUR)) ;
 800d4d0:	7822      	ldrb	r2, [r4, #0]
  seconds *= SECONDS_IN_1DAY;
 800d4d2:	4358      	muls	r0, r3
              ((uint32_t)RTC_TimeStruct->Hours * SECONDS_IN_1HOUR)) ;
 800d4d4:	23e1      	movs	r3, #225	; 0xe1
 800d4d6:	011b      	lsls	r3, r3, #4
 800d4d8:	4353      	muls	r3, r2
              ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
 800d4da:	223c      	movs	r2, #60	; 0x3c
 800d4dc:	7861      	ldrb	r1, [r4, #1]



  calendarValue = (((uint64_t) seconds) << N_PREDIV_S) + (PREDIV_S - RTC_TimeStruct->SubSeconds);
 800d4de:	4d0d      	ldr	r5, [pc, #52]	; (800d514 <HW_RTC_GetCalendarValue+0xb8>)
              ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
 800d4e0:	434a      	muls	r2, r1
 800d4e2:	189b      	adds	r3, r3, r2
  seconds += ((uint32_t)RTC_TimeStruct->Seconds +
 800d4e4:	78a2      	ldrb	r2, [r4, #2]
  calendarValue = (((uint64_t) seconds) << N_PREDIV_S) + (PREDIV_S - RTC_TimeStruct->SubSeconds);
 800d4e6:	6864      	ldr	r4, [r4, #4]
              ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
 800d4e8:	189b      	adds	r3, r3, r2
  seconds += ((uint32_t)RTC_TimeStruct->Seconds +
 800d4ea:	181b      	adds	r3, r3, r0
  calendarValue = (((uint64_t) seconds) << N_PREDIV_S) + (PREDIV_S - RTC_TimeStruct->SubSeconds);
 800d4ec:	0d99      	lsrs	r1, r3, #22
 800d4ee:	0298      	lsls	r0, r3, #10
 800d4f0:	2300      	movs	r3, #0
 800d4f2:	1b2a      	subs	r2, r5, r4
 800d4f4:	1880      	adds	r0, r0, r2
 800d4f6:	4159      	adcs	r1, r3

  return (calendarValue);
}
 800d4f8:	b003      	add	sp, #12
 800d4fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d4fc:	2000130c 	.word	0x2000130c
 800d500:	40002800 	.word	0x40002800
 800d504:	000005b5 	.word	0x000005b5
 800d508:	ffaaaab0 	.word	0xffaaaab0
 800d50c:	0099aaa0 	.word	0x0099aaa0
 800d510:	00015180 	.word	0x00015180
 800d514:	000003ff 	.word	0x000003ff

0800d518 <HW_RTC_GetMinimumTimeout>:
}
 800d518:	2003      	movs	r0, #3
 800d51a:	4770      	bx	lr

0800d51c <HW_RTC_ms2Tick>:
{
 800d51c:	b510      	push	{r4, lr}
  return (uint32_t)((((uint64_t)timeMilliSec) * CONV_DENOM) / CONV_NUMER);
 800d51e:	0e41      	lsrs	r1, r0, #25
 800d520:	227d      	movs	r2, #125	; 0x7d
 800d522:	01c0      	lsls	r0, r0, #7
 800d524:	2300      	movs	r3, #0
 800d526:	f7f2 ffd3 	bl	80004d0 <__aeabi_uldivmod>
}
 800d52a:	bd10      	pop	{r4, pc}

0800d52c <HW_RTC_Tick2ms>:
  return ((seconds * 1000) + ((tick * 1000) >> N_PREDIV_S));
 800d52c:	22fa      	movs	r2, #250	; 0xfa
  tick = tick & PREDIV_S;
 800d52e:	0583      	lsls	r3, r0, #22
  return ((seconds * 1000) + ((tick * 1000) >> N_PREDIV_S));
 800d530:	0092      	lsls	r2, r2, #2
  tick = tick & PREDIV_S;
 800d532:	0d9b      	lsrs	r3, r3, #22
  return ((seconds * 1000) + ((tick * 1000) >> N_PREDIV_S));
 800d534:	4353      	muls	r3, r2
  uint32_t seconds = tick >> N_PREDIV_S;
 800d536:	0a80      	lsrs	r0, r0, #10
  return ((seconds * 1000) + ((tick * 1000) >> N_PREDIV_S));
 800d538:	4350      	muls	r0, r2
 800d53a:	0a9b      	lsrs	r3, r3, #10
 800d53c:	1818      	adds	r0, r3, r0
}
 800d53e:	4770      	bx	lr

0800d540 <HW_RTC_GetTimerElapsedTime>:
{
 800d540:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint32_t CalendarValue = (uint32_t) HW_RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 800d542:	a901      	add	r1, sp, #4
 800d544:	4668      	mov	r0, sp
 800d546:	f7ff ff89 	bl	800d45c <HW_RTC_GetCalendarValue>
  return ((uint32_t)(CalendarValue - RtcTimerContext.Rtc_Time));
 800d54a:	4b02      	ldr	r3, [pc, #8]	; (800d554 <HW_RTC_GetTimerElapsedTime+0x14>)
 800d54c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d54e:	1ac0      	subs	r0, r0, r3
}
 800d550:	b007      	add	sp, #28
 800d552:	bd00      	pop	{pc}
 800d554:	2000130c 	.word	0x2000130c

0800d558 <HW_RTC_GetTimerValue>:
{
 800d558:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint32_t CalendarValue = (uint32_t) HW_RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 800d55a:	a901      	add	r1, sp, #4
 800d55c:	4668      	mov	r0, sp
 800d55e:	f7ff ff7d 	bl	800d45c <HW_RTC_GetCalendarValue>
}
 800d562:	b007      	add	sp, #28
 800d564:	bd00      	pop	{pc}
	...

0800d568 <HW_RTC_StopAlarm>:
  HAL_RTC_DeactivateAlarm(&RtcHandle, RTC_ALARM_A);
 800d568:	2180      	movs	r1, #128	; 0x80
{
 800d56a:	b510      	push	{r4, lr}
  HAL_RTC_DeactivateAlarm(&RtcHandle, RTC_ALARM_A);
 800d56c:	4c07      	ldr	r4, [pc, #28]	; (800d58c <HW_RTC_StopAlarm+0x24>)
 800d56e:	0049      	lsls	r1, r1, #1
 800d570:	0020      	movs	r0, r4
 800d572:	f7f7 ff37 	bl	80053e4 <HAL_RTC_DeactivateAlarm>
  __HAL_RTC_ALARM_CLEAR_FLAG(&RtcHandle, RTC_FLAG_ALRAF);
 800d576:	6821      	ldr	r1, [r4, #0]
 800d578:	4b05      	ldr	r3, [pc, #20]	; (800d590 <HW_RTC_StopAlarm+0x28>)
 800d57a:	68ca      	ldr	r2, [r1, #12]
 800d57c:	b2d2      	uxtb	r2, r2
 800d57e:	4313      	orrs	r3, r2
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800d580:	2280      	movs	r2, #128	; 0x80
  __HAL_RTC_ALARM_CLEAR_FLAG(&RtcHandle, RTC_FLAG_ALRAF);
 800d582:	60cb      	str	r3, [r1, #12]
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800d584:	4b03      	ldr	r3, [pc, #12]	; (800d594 <HW_RTC_StopAlarm+0x2c>)
 800d586:	0292      	lsls	r2, r2, #10
 800d588:	615a      	str	r2, [r3, #20]
}
 800d58a:	bd10      	pop	{r4, pc}
 800d58c:	2000130c 	.word	0x2000130c
 800d590:	fffffe7f 	.word	0xfffffe7f
 800d594:	40010400 	.word	0x40010400

0800d598 <HW_RTC_SetAlarm>:
{
 800d598:	b5f0      	push	{r4, r5, r6, r7, lr}
  if ((MIN_ALARM_DELAY + McuWakeUpTimeCal) < ((timeout - HW_RTC_GetTimerElapsedTime())))
 800d59a:	4c4c      	ldr	r4, [pc, #304]	; (800d6cc <HW_RTC_SetAlarm+0x134>)
{
 800d59c:	b087      	sub	sp, #28
  if ((MIN_ALARM_DELAY + McuWakeUpTimeCal) < ((timeout - HW_RTC_GetTimerElapsedTime())))
 800d59e:	0023      	movs	r3, r4
 800d5a0:	3350      	adds	r3, #80	; 0x50
{
 800d5a2:	0006      	movs	r6, r0
  if ((MIN_ALARM_DELAY + McuWakeUpTimeCal) < ((timeout - HW_RTC_GetTimerElapsedTime())))
 800d5a4:	2500      	movs	r5, #0
 800d5a6:	5f5d      	ldrsh	r5, [r3, r5]
 800d5a8:	f7ff ffca 	bl	800d540 <HW_RTC_GetTimerElapsedTime>
 800d5ac:	3503      	adds	r5, #3
 800d5ae:	1a30      	subs	r0, r6, r0
    LPM_SetStopMode(LPM_RTC_Id, LPM_Enable);
 800d5b0:	2100      	movs	r1, #0
  if ((MIN_ALARM_DELAY + McuWakeUpTimeCal) < ((timeout - HW_RTC_GetTimerElapsedTime())))
 800d5b2:	4285      	cmp	r5, r0
 800d5b4:	d300      	bcc.n	800d5b8 <HW_RTC_SetAlarm+0x20>
    LPM_SetStopMode(LPM_RTC_Id, LPM_Disable);
 800d5b6:	2101      	movs	r1, #1
 800d5b8:	2004      	movs	r0, #4
 800d5ba:	f7ff f9e1 	bl	800c980 <LPM_SetStopMode>
  if (LPM_GetMode() == LPM_StopMode)
 800d5be:	f7ff f9f5 	bl	800c9ac <LPM_GetMode>
 800d5c2:	2801      	cmp	r0, #1
 800d5c4:	d104      	bne.n	800d5d0 <HW_RTC_SetAlarm+0x38>
    timeout = timeout -  McuWakeUpTimeCal;
 800d5c6:	0023      	movs	r3, r4
 800d5c8:	3350      	adds	r3, #80	; 0x50
 800d5ca:	2200      	movs	r2, #0
 800d5cc:	5e9b      	ldrsh	r3, [r3, r2]
 800d5ce:	1af6      	subs	r6, r6, r3
  RTC_TimeTypeDef RTC_TimeStruct = RtcTimerContext.RTC_Calndr_Time;
 800d5d0:	0023      	movs	r3, r4
 800d5d2:	3354      	adds	r3, #84	; 0x54
 800d5d4:	795a      	ldrb	r2, [r3, #5]
 800d5d6:	6de7      	ldr	r7, [r4, #92]	; 0x5c
 800d5d8:	9200      	str	r2, [sp, #0]
 800d5da:	799a      	ldrb	r2, [r3, #6]
  RTC_DateTypeDef RTC_DateStruct = RtcTimerContext.RTC_Calndr_Date;
 800d5dc:	7e9c      	ldrb	r4, [r3, #26]
  RTC_TimeTypeDef RTC_TimeStruct = RtcTimerContext.RTC_Calndr_Time;
 800d5de:	9201      	str	r2, [sp, #4]
 800d5e0:	79da      	ldrb	r2, [r3, #7]
 800d5e2:	791d      	ldrb	r5, [r3, #4]
 800d5e4:	9202      	str	r2, [sp, #8]
  RTC_DateTypeDef RTC_DateStruct = RtcTimerContext.RTC_Calndr_Date;
 800d5e6:	7e5a      	ldrb	r2, [r3, #25]
 800d5e8:	7edb      	ldrb	r3, [r3, #27]
 800d5ea:	9203      	str	r2, [sp, #12]
 800d5ec:	9304      	str	r3, [sp, #16]
  HW_RTC_StopAlarm();
 800d5ee:	f7ff ffbb 	bl	800d568 <HW_RTC_StopAlarm>
  rtcAlarmSubSeconds =  PREDIV_S - RTC_TimeStruct.SubSeconds;
 800d5f2:	4a37      	ldr	r2, [pc, #220]	; (800d6d0 <HW_RTC_SetAlarm+0x138>)
  rtcAlarmSubSeconds += (timeoutValue & PREDIV_S);
 800d5f4:	05b3      	lsls	r3, r6, #22
  rtcAlarmSubSeconds =  PREDIV_S - RTC_TimeStruct.SubSeconds;
 800d5f6:	1bd7      	subs	r7, r2, r7
  rtcAlarmSubSeconds += (timeoutValue & PREDIV_S);
 800d5f8:	0d9b      	lsrs	r3, r3, #22
 800d5fa:	18fb      	adds	r3, r7, r3
 800d5fc:	9205      	str	r2, [sp, #20]
  while (timeoutValue >= SECONDS_IN_1DAY)
 800d5fe:	4a35      	ldr	r2, [pc, #212]	; (800d6d4 <HW_RTC_SetAlarm+0x13c>)
  rtcAlarmSubSeconds += (timeoutValue & PREDIV_S);
 800d600:	b29b      	uxth	r3, r3
  timeoutValue >>= N_PREDIV_S;  /* convert timeout  in seconds */
 800d602:	0ab6      	lsrs	r6, r6, #10
  rtcAlarmDays =  RTC_DateStruct.Date;
 800d604:	b2a0      	uxth	r0, r4
  while (timeoutValue >= SECONDS_IN_1DAY)
 800d606:	4296      	cmp	r6, r2
 800d608:	d83f      	bhi.n	800d68a <HW_RTC_SetAlarm+0xf2>
  while (timeoutValue >= SECONDS_IN_1HOUR)
 800d60a:	4a33      	ldr	r2, [pc, #204]	; (800d6d8 <HW_RTC_SetAlarm+0x140>)
  rtcAlarmHours = RTC_TimeStruct.Hours;
 800d60c:	b2ad      	uxth	r5, r5
  while (timeoutValue >= SECONDS_IN_1HOUR)
 800d60e:	4296      	cmp	r6, r2
 800d610:	d840      	bhi.n	800d694 <HW_RTC_SetAlarm+0xfc>
  rtcAlarmMinutes = RTC_TimeStruct.Minutes;
 800d612:	466a      	mov	r2, sp
 800d614:	8817      	ldrh	r7, [r2, #0]
  while (timeoutValue >= SECONDS_IN_1MINUTE)
 800d616:	2e3b      	cmp	r6, #59	; 0x3b
 800d618:	d841      	bhi.n	800d69e <HW_RTC_SetAlarm+0x106>
 800d61a:	0a9a      	lsrs	r2, r3, #10
 800d61c:	0294      	lsls	r4, r2, #10
 800d61e:	1b1c      	subs	r4, r3, r4
 800d620:	9b01      	ldr	r3, [sp, #4]
 800d622:	b2a4      	uxth	r4, r4
 800d624:	18d2      	adds	r2, r2, r3
 800d626:	1996      	adds	r6, r2, r6
 800d628:	b2b6      	uxth	r6, r6
  while (rtcAlarmSeconds >= SECONDS_IN_1MINUTE)
 800d62a:	2e3b      	cmp	r6, #59	; 0x3b
 800d62c:	d83b      	bhi.n	800d6a6 <HW_RTC_SetAlarm+0x10e>
  while (rtcAlarmMinutes >= MINUTES_IN_1HOUR)
 800d62e:	2f3b      	cmp	r7, #59	; 0x3b
 800d630:	d83e      	bhi.n	800d6b0 <HW_RTC_SetAlarm+0x118>
  while (rtcAlarmHours >= HOURS_IN_1DAY)
 800d632:	2d17      	cmp	r5, #23
 800d634:	d841      	bhi.n	800d6ba <HW_RTC_SetAlarm+0x122>
 800d636:	9a03      	ldr	r2, [sp, #12]
  if (RTC_DateStruct.Year % 4 == 0)
 800d638:	9904      	ldr	r1, [sp, #16]
 800d63a:	3a01      	subs	r2, #1
 800d63c:	4b27      	ldr	r3, [pc, #156]	; (800d6dc <HW_RTC_SetAlarm+0x144>)
 800d63e:	0789      	lsls	r1, r1, #30
 800d640:	d140      	bne.n	800d6c4 <HW_RTC_SetAlarm+0x12c>
    if (rtcAlarmDays > DaysInMonthLeapYear[ RTC_DateStruct.Month - 1 ])
 800d642:	5c99      	ldrb	r1, [r3, r2]
    if (rtcAlarmDays > DaysInMonth[ RTC_DateStruct.Month - 1 ])
 800d644:	4288      	cmp	r0, r1
 800d646:	d902      	bls.n	800d64e <HW_RTC_SetAlarm+0xb6>
      rtcAlarmDays = rtcAlarmDays % DaysInMonth[ RTC_DateStruct.Month - 1 ];
 800d648:	f7f2 fefe 	bl	8000448 <__aeabi_idivmod>
 800d64c:	b288      	uxth	r0, r1
  RTC_AlarmStructure.AlarmTime.SubSeconds = PREDIV_S - rtcAlarmSubSeconds;
 800d64e:	9a05      	ldr	r2, [sp, #20]
 800d650:	4b1e      	ldr	r3, [pc, #120]	; (800d6cc <HW_RTC_SetAlarm+0x134>)
 800d652:	1b14      	subs	r4, r2, r4
  RTC_AlarmStructure.AlarmSubSecondMask  = HW_RTC_ALARMSUBSECONDMASK;
 800d654:	22a0      	movs	r2, #160	; 0xa0
 800d656:	0512      	lsls	r2, r2, #20
 800d658:	641a      	str	r2, [r3, #64]	; 0x40
  RTC_AlarmStructure.AlarmDateWeekDay    = (uint8_t)rtcAlarmDays;
 800d65a:	001a      	movs	r2, r3
  RTC_AlarmStructure.AlarmTime.Seconds = rtcAlarmSeconds;
 800d65c:	0019      	movs	r1, r3
  RTC_AlarmStructure.AlarmDateWeekDay    = (uint8_t)rtcAlarmDays;
 800d65e:	3229      	adds	r2, #41	; 0x29
 800d660:	77d0      	strb	r0, [r2, #31]
  RTC_AlarmStructure.AlarmTime.TimeFormat   = RTC_TimeStruct.TimeFormat;
 800d662:	9a02      	ldr	r2, [sp, #8]
  RTC_AlarmStructure.Alarm = RTC_ALARM_A;
 800d664:	2080      	movs	r0, #128	; 0x80
  RTC_AlarmStructure.AlarmTime.Seconds = rtcAlarmSeconds;
 800d666:	3128      	adds	r1, #40	; 0x28
  RTC_AlarmStructure.AlarmTime.TimeFormat   = RTC_TimeStruct.TimeFormat;
 800d668:	70ca      	strb	r2, [r1, #3]
  RTC_AlarmStructure.AlarmDateWeekDaySel   = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800d66a:	2200      	movs	r2, #0
  RTC_AlarmStructure.Alarm = RTC_ALARM_A;
 800d66c:	0040      	lsls	r0, r0, #1
 800d66e:	64d8      	str	r0, [r3, #76]	; 0x4c
  HAL_RTC_SetAlarm_IT(&RtcHandle, &RTC_AlarmStructure, RTC_FORMAT_BIN);
 800d670:	0018      	movs	r0, r3
  RTC_AlarmStructure.AlarmTime.SubSeconds = PREDIV_S - rtcAlarmSubSeconds;
 800d672:	62dc      	str	r4, [r3, #44]	; 0x2c
  RTC_AlarmStructure.AlarmTime.Seconds = rtcAlarmSeconds;
 800d674:	708e      	strb	r6, [r1, #2]
  RTC_AlarmStructure.AlarmTime.Minutes = rtcAlarmMinutes;
 800d676:	704f      	strb	r7, [r1, #1]
  RTC_AlarmStructure.AlarmTime.Hours   = rtcAlarmHours;
 800d678:	700d      	strb	r5, [r1, #0]
  RTC_AlarmStructure.AlarmDateWeekDaySel   = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800d67a:	645a      	str	r2, [r3, #68]	; 0x44
  RTC_AlarmStructure.AlarmMask       = RTC_ALARMMASK_NONE;
 800d67c:	63da      	str	r2, [r3, #60]	; 0x3c
  RTC_AlarmStructure.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800d67e:	635a      	str	r2, [r3, #52]	; 0x34
  RTC_AlarmStructure.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800d680:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_RTC_SetAlarm_IT(&RtcHandle, &RTC_AlarmStructure, RTC_FORMAT_BIN);
 800d682:	f7f8 f899 	bl	80057b8 <HAL_RTC_SetAlarm_IT>
}
 800d686:	b007      	add	sp, #28
 800d688:	bdf0      	pop	{r4, r5, r6, r7, pc}
    timeoutValue -= SECONDS_IN_1DAY;
 800d68a:	4915      	ldr	r1, [pc, #84]	; (800d6e0 <HW_RTC_SetAlarm+0x148>)
    rtcAlarmDays++;
 800d68c:	3001      	adds	r0, #1
    timeoutValue -= SECONDS_IN_1DAY;
 800d68e:	1876      	adds	r6, r6, r1
    rtcAlarmDays++;
 800d690:	b280      	uxth	r0, r0
 800d692:	e7b8      	b.n	800d606 <HW_RTC_SetAlarm+0x6e>
    timeoutValue -= SECONDS_IN_1HOUR;
 800d694:	4913      	ldr	r1, [pc, #76]	; (800d6e4 <HW_RTC_SetAlarm+0x14c>)
    rtcAlarmHours++;
 800d696:	3501      	adds	r5, #1
    timeoutValue -= SECONDS_IN_1HOUR;
 800d698:	1876      	adds	r6, r6, r1
    rtcAlarmHours++;
 800d69a:	b2ad      	uxth	r5, r5
 800d69c:	e7b7      	b.n	800d60e <HW_RTC_SetAlarm+0x76>
    rtcAlarmMinutes++;
 800d69e:	3701      	adds	r7, #1
    timeoutValue -= SECONDS_IN_1MINUTE;
 800d6a0:	3e3c      	subs	r6, #60	; 0x3c
    rtcAlarmMinutes++;
 800d6a2:	b2bf      	uxth	r7, r7
 800d6a4:	e7b7      	b.n	800d616 <HW_RTC_SetAlarm+0x7e>
    rtcAlarmSeconds -= SECONDS_IN_1MINUTE;
 800d6a6:	3e3c      	subs	r6, #60	; 0x3c
    rtcAlarmMinutes++;
 800d6a8:	3701      	adds	r7, #1
    rtcAlarmSeconds -= SECONDS_IN_1MINUTE;
 800d6aa:	b2b6      	uxth	r6, r6
    rtcAlarmMinutes++;
 800d6ac:	b2bf      	uxth	r7, r7
 800d6ae:	e7bc      	b.n	800d62a <HW_RTC_SetAlarm+0x92>
    rtcAlarmMinutes -= MINUTES_IN_1HOUR;
 800d6b0:	3f3c      	subs	r7, #60	; 0x3c
    rtcAlarmHours++;
 800d6b2:	3501      	adds	r5, #1
    rtcAlarmMinutes -= MINUTES_IN_1HOUR;
 800d6b4:	b2bf      	uxth	r7, r7
    rtcAlarmHours++;
 800d6b6:	b2ad      	uxth	r5, r5
 800d6b8:	e7b9      	b.n	800d62e <HW_RTC_SetAlarm+0x96>
    rtcAlarmHours -= HOURS_IN_1DAY;
 800d6ba:	3d18      	subs	r5, #24
    rtcAlarmDays++;
 800d6bc:	3001      	adds	r0, #1
    rtcAlarmHours -= HOURS_IN_1DAY;
 800d6be:	b2ad      	uxth	r5, r5
    rtcAlarmDays++;
 800d6c0:	b280      	uxth	r0, r0
 800d6c2:	e7b6      	b.n	800d632 <HW_RTC_SetAlarm+0x9a>
    if (rtcAlarmDays > DaysInMonth[ RTC_DateStruct.Month - 1 ])
 800d6c4:	189b      	adds	r3, r3, r2
 800d6c6:	7b19      	ldrb	r1, [r3, #12]
 800d6c8:	e7bc      	b.n	800d644 <HW_RTC_SetAlarm+0xac>
 800d6ca:	46c0      	nop			; (mov r8, r8)
 800d6cc:	2000130c 	.word	0x2000130c
 800d6d0:	000003ff 	.word	0x000003ff
 800d6d4:	0001517f 	.word	0x0001517f
 800d6d8:	00000e0f 	.word	0x00000e0f
 800d6dc:	0800fac4 	.word	0x0800fac4
 800d6e0:	fffeae80 	.word	0xfffeae80
 800d6e4:	fffff1f0 	.word	0xfffff1f0

0800d6e8 <HW_RTC_IrqHandler>:
  LPM_SetStopMode(LPM_RTC_Id, LPM_Enable);
 800d6e8:	2004      	movs	r0, #4
{
 800d6ea:	b510      	push	{r4, lr}
  LPM_SetStopMode(LPM_RTC_Id, LPM_Enable);
 800d6ec:	2100      	movs	r1, #0
 800d6ee:	f7ff f947 	bl	800c980 <LPM_SetStopMode>
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800d6f2:	2280      	movs	r2, #128	; 0x80
 800d6f4:	4b09      	ldr	r3, [pc, #36]	; (800d71c <HW_RTC_IrqHandler+0x34>)
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != RESET)
 800d6f6:	480a      	ldr	r0, [pc, #40]	; (800d720 <HW_RTC_IrqHandler+0x38>)
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800d6f8:	0292      	lsls	r2, r2, #10
 800d6fa:	615a      	str	r2, [r3, #20]
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != RESET)
 800d6fc:	6803      	ldr	r3, [r0, #0]
 800d6fe:	689a      	ldr	r2, [r3, #8]
 800d700:	04d2      	lsls	r2, r2, #19
 800d702:	d509      	bpl.n	800d718 <HW_RTC_IrqHandler+0x30>
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != RESET)
 800d704:	68da      	ldr	r2, [r3, #12]
 800d706:	05d2      	lsls	r2, r2, #23
 800d708:	d506      	bpl.n	800d718 <HW_RTC_IrqHandler+0x30>
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800d70a:	68d9      	ldr	r1, [r3, #12]
 800d70c:	4a05      	ldr	r2, [pc, #20]	; (800d724 <HW_RTC_IrqHandler+0x3c>)
 800d70e:	b2c9      	uxtb	r1, r1
 800d710:	430a      	orrs	r2, r1
 800d712:	60da      	str	r2, [r3, #12]
      HAL_RTC_AlarmAEventCallback(hrtc);
 800d714:	f000 fe0a 	bl	800e32c <HAL_RTC_AlarmAEventCallback>
}
 800d718:	bd10      	pop	{r4, pc}
 800d71a:	46c0      	nop			; (mov r8, r8)
 800d71c:	40010400 	.word	0x40010400
 800d720:	2000130c 	.word	0x2000130c
 800d724:	fffffe7f 	.word	0xfffffe7f

0800d728 <HW_RTC_DelayMs>:
{
 800d728:	b570      	push	{r4, r5, r6, lr}
  return (uint32_t)((((uint64_t)timeMilliSec) * CONV_DENOM) / CONV_NUMER);
 800d72a:	0e41      	lsrs	r1, r0, #25
 800d72c:	227d      	movs	r2, #125	; 0x7d
 800d72e:	2300      	movs	r3, #0
 800d730:	01c0      	lsls	r0, r0, #7
 800d732:	f7f2 fecd 	bl	80004d0 <__aeabi_uldivmod>
 800d736:	0004      	movs	r4, r0
  timeout = HW_RTC_GetTimerValue();
 800d738:	f7ff ff0e 	bl	800d558 <HW_RTC_GetTimerValue>
 800d73c:	0005      	movs	r5, r0
  while (((HW_RTC_GetTimerValue() - timeout)) < delayValue)
 800d73e:	f7ff ff0b 	bl	800d558 <HW_RTC_GetTimerValue>
 800d742:	1b40      	subs	r0, r0, r5
 800d744:	42a0      	cmp	r0, r4
 800d746:	d300      	bcc.n	800d74a <HW_RTC_DelayMs+0x22>
}
 800d748:	bd70      	pop	{r4, r5, r6, pc}
    __NOP();
 800d74a:	46c0      	nop			; (mov r8, r8)
 800d74c:	e7f7      	b.n	800d73e <HW_RTC_DelayMs+0x16>
	...

0800d750 <HW_RTC_SetTimerContext>:
{
 800d750:	b510      	push	{r4, lr}
  RtcTimerContext.Rtc_Time = (uint32_t) HW_RTC_GetCalendarValue(&RtcTimerContext.RTC_Calndr_Date, &RtcTimerContext.RTC_Calndr_Time);
 800d752:	4c04      	ldr	r4, [pc, #16]	; (800d764 <HW_RTC_SetTimerContext+0x14>)
 800d754:	0021      	movs	r1, r4
 800d756:	0020      	movs	r0, r4
 800d758:	3158      	adds	r1, #88	; 0x58
 800d75a:	306c      	adds	r0, #108	; 0x6c
 800d75c:	f7ff fe7e 	bl	800d45c <HW_RTC_GetCalendarValue>
 800d760:	6560      	str	r0, [r4, #84]	; 0x54
}
 800d762:	bd10      	pop	{r4, pc}
 800d764:	2000130c 	.word	0x2000130c

0800d768 <HW_RTC_Init>:
{
 800d768:	b570      	push	{r4, r5, r6, lr}
  if (HW_RTC_Initalized == false)
 800d76a:	4c19      	ldr	r4, [pc, #100]	; (800d7d0 <HW_RTC_Init+0x68>)
{
 800d76c:	b086      	sub	sp, #24
  if (HW_RTC_Initalized == false)
 800d76e:	0026      	movs	r6, r4
 800d770:	3670      	adds	r6, #112	; 0x70
 800d772:	7835      	ldrb	r5, [r6, #0]
 800d774:	2d00      	cmp	r5, #0
 800d776:	d128      	bne.n	800d7ca <HW_RTC_Init+0x62>
  RtcHandle.Instance = RTC;
 800d778:	4b16      	ldr	r3, [pc, #88]	; (800d7d4 <HW_RTC_Init+0x6c>)
  HAL_RTC_Init(&RtcHandle);
 800d77a:	0020      	movs	r0, r4
  RtcHandle.Instance = RTC;
 800d77c:	6023      	str	r3, [r4, #0]
  RtcHandle.Init.AsynchPrediv = PREDIV_A; /* RTC_ASYNCH_PREDIV; */
 800d77e:	231f      	movs	r3, #31
 800d780:	60a3      	str	r3, [r4, #8]
  RtcHandle.Init.SynchPrediv = PREDIV_S; /* RTC_SYNCH_PREDIV; */
 800d782:	4b15      	ldr	r3, [pc, #84]	; (800d7d8 <HW_RTC_Init+0x70>)
  RtcHandle.Init.HourFormat = RTC_HOURFORMAT_24;
 800d784:	6065      	str	r5, [r4, #4]
  RtcHandle.Init.SynchPrediv = PREDIV_S; /* RTC_SYNCH_PREDIV; */
 800d786:	60e3      	str	r3, [r4, #12]
  RtcHandle.Init.OutPut = RTC_OUTPUT;
 800d788:	6125      	str	r5, [r4, #16]
  RtcHandle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800d78a:	61a5      	str	r5, [r4, #24]
  RtcHandle.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800d78c:	61e5      	str	r5, [r4, #28]
  HAL_RTC_Init(&RtcHandle);
 800d78e:	f7f7 febf 	bl	8005510 <HAL_RTC_Init>
  RTC_DateStruct.WeekDay = RTC_WEEKDAY_MONDAY;
 800d792:	4b12      	ldr	r3, [pc, #72]	; (800d7dc <HW_RTC_Init+0x74>)
  HAL_RTC_SetDate(&RtcHandle, &RTC_DateStruct, RTC_FORMAT_BIN);
 800d794:	002a      	movs	r2, r5
 800d796:	4669      	mov	r1, sp
 800d798:	0020      	movs	r0, r4
  RTC_DateStruct.WeekDay = RTC_WEEKDAY_MONDAY;
 800d79a:	9300      	str	r3, [sp, #0]
  HAL_RTC_SetDate(&RtcHandle, &RTC_DateStruct, RTC_FORMAT_BIN);
 800d79c:	f7f7 ffa0 	bl	80056e0 <HAL_RTC_SetDate>
  HAL_RTC_SetTime(&RtcHandle, &RTC_TimeStruct, RTC_FORMAT_BIN);
 800d7a0:	002a      	movs	r2, r5
 800d7a2:	a901      	add	r1, sp, #4
 800d7a4:	0020      	movs	r0, r4
  RTC_TimeStruct.Hours = 0;
 800d7a6:	9501      	str	r5, [sp, #4]
  RTC_TimeStruct.TimeFormat = 0;
 800d7a8:	9502      	str	r5, [sp, #8]
  RTC_TimeStruct.StoreOperation = RTC_DAYLIGHTSAVING_NONE;
 800d7aa:	9505      	str	r5, [sp, #20]
  RTC_TimeStruct.DayLightSaving = RTC_STOREOPERATION_RESET;
 800d7ac:	9504      	str	r5, [sp, #16]
  HAL_RTC_SetTime(&RtcHandle, &RTC_TimeStruct, RTC_FORMAT_BIN);
 800d7ae:	f7f7 ff17 	bl	80055e0 <HAL_RTC_SetTime>
  HAL_RTCEx_EnableBypassShadow(&RtcHandle);
 800d7b2:	0020      	movs	r0, r4
 800d7b4:	f7f8 f928 	bl	8005a08 <HAL_RTCEx_EnableBypassShadow>
  HAL_RTC_DeactivateAlarm(&RtcHandle, RTC_ALARM_A);
 800d7b8:	2180      	movs	r1, #128	; 0x80
 800d7ba:	0020      	movs	r0, r4
 800d7bc:	0049      	lsls	r1, r1, #1
 800d7be:	f7f7 fe11 	bl	80053e4 <HAL_RTC_DeactivateAlarm>
    HW_RTC_SetTimerContext();
 800d7c2:	f7ff ffc5 	bl	800d750 <HW_RTC_SetTimerContext>
    HW_RTC_Initalized = true;
 800d7c6:	2301      	movs	r3, #1
 800d7c8:	7033      	strb	r3, [r6, #0]
}
 800d7ca:	b006      	add	sp, #24
 800d7cc:	bd70      	pop	{r4, r5, r6, pc}
 800d7ce:	46c0      	nop			; (mov r8, r8)
 800d7d0:	2000130c 	.word	0x2000130c
 800d7d4:	40002800 	.word	0x40002800
 800d7d8:	000003ff 	.word	0x000003ff
 800d7dc:	03091201 	.word	0x03091201

0800d7e0 <HW_RTC_GetTimerContext>:
  return RtcTimerContext.Rtc_Time;
 800d7e0:	4b01      	ldr	r3, [pc, #4]	; (800d7e8 <HW_RTC_GetTimerContext+0x8>)
 800d7e2:	6d58      	ldr	r0, [r3, #84]	; 0x54
}
 800d7e4:	4770      	bx	lr
 800d7e6:	46c0      	nop			; (mov r8, r8)
 800d7e8:	2000130c 	.word	0x2000130c

0800d7ec <HW_RTC_GetCalendarTime>:
 * \param [IN]   pointer to ms
 *
 * \return uint32_t seconds
 */
uint32_t HW_RTC_GetCalendarTime(uint16_t *mSeconds)
{
 800d7ec:	b570      	push	{r4, r5, r6, lr}
 800d7ee:	b086      	sub	sp, #24
 800d7f0:	0006      	movs	r6, r0
  RTC_TimeTypeDef RTC_TimeStruct ;
  RTC_DateTypeDef RTC_DateStruct;
  uint32_t ticks;

  uint64_t calendarValue = HW_RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 800d7f2:	a901      	add	r1, sp, #4
 800d7f4:	4668      	mov	r0, sp
 800d7f6:	f7ff fe31 	bl	800d45c <HW_RTC_GetCalendarValue>
 800d7fa:	0004      	movs	r4, r0

  uint32_t seconds = (uint32_t)(calendarValue >> N_PREDIV_S);

  ticks = (uint32_t) calendarValue & PREDIV_S;
 800d7fc:	0580      	lsls	r0, r0, #22
 800d7fe:	0d80      	lsrs	r0, r0, #22
  uint64_t calendarValue = HW_RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 800d800:	000d      	movs	r5, r1

  *mSeconds = HW_RTC_Tick2ms(ticks);
 800d802:	f7ff fe93 	bl	800d52c <HW_RTC_Tick2ms>
  uint32_t seconds = (uint32_t)(calendarValue >> N_PREDIV_S);
 800d806:	05ad      	lsls	r5, r5, #22
  *mSeconds = HW_RTC_Tick2ms(ticks);
 800d808:	8030      	strh	r0, [r6, #0]
  uint32_t seconds = (uint32_t)(calendarValue >> N_PREDIV_S);
 800d80a:	0aa0      	lsrs	r0, r4, #10
 800d80c:	4328      	orrs	r0, r5

  return seconds;
}
 800d80e:	b006      	add	sp, #24
 800d810:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d814 <HW_RTC_BKUPWrite>:

void HW_RTC_BKUPWrite(uint32_t Data0, uint32_t Data1)
{
 800d814:	b570      	push	{r4, r5, r6, lr}
 800d816:	000d      	movs	r5, r1
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR0, Data0);
 800d818:	4c05      	ldr	r4, [pc, #20]	; (800d830 <HW_RTC_BKUPWrite+0x1c>)
{
 800d81a:	0002      	movs	r2, r0
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR0, Data0);
 800d81c:	2100      	movs	r1, #0
 800d81e:	0020      	movs	r0, r4
 800d820:	f7f8 f8e6 	bl	80059f0 <HAL_RTCEx_BKUPWrite>
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR1, Data1);
 800d824:	002a      	movs	r2, r5
 800d826:	2101      	movs	r1, #1
 800d828:	0020      	movs	r0, r4
 800d82a:	f7f8 f8e1 	bl	80059f0 <HAL_RTCEx_BKUPWrite>
}
 800d82e:	bd70      	pop	{r4, r5, r6, pc}
 800d830:	2000130c 	.word	0x2000130c

0800d834 <HW_RTC_BKUPRead>:

void HW_RTC_BKUPRead(uint32_t *Data0, uint32_t *Data1)
{
 800d834:	b570      	push	{r4, r5, r6, lr}
  *Data0 = HAL_RTCEx_BKUPRead(&RtcHandle, RTC_BKP_DR0);
 800d836:	4c07      	ldr	r4, [pc, #28]	; (800d854 <HW_RTC_BKUPRead+0x20>)
{
 800d838:	0006      	movs	r6, r0
 800d83a:	000d      	movs	r5, r1
  *Data0 = HAL_RTCEx_BKUPRead(&RtcHandle, RTC_BKP_DR0);
 800d83c:	0020      	movs	r0, r4
 800d83e:	2100      	movs	r1, #0
 800d840:	f7f8 f8dc 	bl	80059fc <HAL_RTCEx_BKUPRead>
  *Data1 = HAL_RTCEx_BKUPRead(&RtcHandle, RTC_BKP_DR1);
 800d844:	2101      	movs	r1, #1
  *Data0 = HAL_RTCEx_BKUPRead(&RtcHandle, RTC_BKP_DR0);
 800d846:	6030      	str	r0, [r6, #0]
  *Data1 = HAL_RTCEx_BKUPRead(&RtcHandle, RTC_BKP_DR1);
 800d848:	0020      	movs	r0, r4
 800d84a:	f7f8 f8d7 	bl	80059fc <HAL_RTCEx_BKUPRead>
 800d84e:	6028      	str	r0, [r5, #0]
}
 800d850:	bd70      	pop	{r4, r5, r6, pc}
 800d852:	46c0      	nop			; (mov r8, r8)
 800d854:	2000130c 	.word	0x2000130c

0800d858 <HW_SPI_IoInit>:
  /*##-2- Configure the SPI GPIOs */
  HW_SPI_IoDeInit();
}

void HW_SPI_IoInit(void)
{
 800d858:	b570      	push	{r4, r5, r6, lr}
 800d85a:	b086      	sub	sp, #24
  GPIO_InitTypeDef initStruct = {0};
 800d85c:	2214      	movs	r2, #20
 800d85e:	2100      	movs	r1, #0
 800d860:	a801      	add	r0, sp, #4
 800d862:	f001 f8ee 	bl	800ea42 <memset>
  initStruct.Pull = GPIO_NOPULL  ;
  initStruct.Speed = GPIO_SPEED_HIGH;
  initStruct.Alternate = SPI1_AF ;

  HW_GPIO_Init(RADIO_SCLK_PORT, RADIO_SCLK_PIN, &initStruct);
  HW_GPIO_Init(RADIO_MISO_PORT, RADIO_MISO_PIN, &initStruct);
 800d866:	24a0      	movs	r4, #160	; 0xa0
  initStruct.Mode = GPIO_MODE_AF_PP;
 800d868:	2302      	movs	r3, #2
  HW_GPIO_Init(RADIO_MISO_PORT, RADIO_MISO_PIN, &initStruct);
 800d86a:	05e4      	lsls	r4, r4, #23
  initStruct.Mode = GPIO_MODE_AF_PP;
 800d86c:	9302      	str	r3, [sp, #8]
  HW_GPIO_Init(RADIO_SCLK_PORT, RADIO_SCLK_PIN, &initStruct);
 800d86e:	aa01      	add	r2, sp, #4
  initStruct.Speed = GPIO_SPEED_HIGH;
 800d870:	3301      	adds	r3, #1
  HW_GPIO_Init(RADIO_SCLK_PORT, RADIO_SCLK_PIN, &initStruct);
 800d872:	2108      	movs	r1, #8
 800d874:	480f      	ldr	r0, [pc, #60]	; (800d8b4 <HW_SPI_IoInit+0x5c>)
  initStruct.Speed = GPIO_SPEED_HIGH;
 800d876:	9304      	str	r3, [sp, #16]
  HW_GPIO_Init(RADIO_MOSI_PORT, RADIO_MOSI_PIN, &initStruct);

  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
  initStruct.Pull = GPIO_NOPULL;

  HW_GPIO_Init(RADIO_NSS_PORT, RADIO_NSS_PIN, &initStruct);
 800d878:	2580      	movs	r5, #128	; 0x80
  HW_GPIO_Init(RADIO_SCLK_PORT, RADIO_SCLK_PIN, &initStruct);
 800d87a:	f7ff fd75 	bl	800d368 <HW_GPIO_Init>
  HW_GPIO_Init(RADIO_MISO_PORT, RADIO_MISO_PIN, &initStruct);
 800d87e:	aa01      	add	r2, sp, #4
 800d880:	0020      	movs	r0, r4
 800d882:	2140      	movs	r1, #64	; 0x40
 800d884:	f7ff fd70 	bl	800d368 <HW_GPIO_Init>
  HW_GPIO_Init(RADIO_MOSI_PORT, RADIO_MOSI_PIN, &initStruct);
 800d888:	aa01      	add	r2, sp, #4
 800d88a:	0020      	movs	r0, r4
 800d88c:	2180      	movs	r1, #128	; 0x80
 800d88e:	f7ff fd6b 	bl	800d368 <HW_GPIO_Init>
  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d892:	2601      	movs	r6, #1
  initStruct.Pull = GPIO_NOPULL;
 800d894:	2300      	movs	r3, #0
  HW_GPIO_Init(RADIO_NSS_PORT, RADIO_NSS_PIN, &initStruct);
 800d896:	022d      	lsls	r5, r5, #8
 800d898:	aa01      	add	r2, sp, #4
 800d89a:	0029      	movs	r1, r5
 800d89c:	0020      	movs	r0, r4
  initStruct.Pull = GPIO_NOPULL;
 800d89e:	9303      	str	r3, [sp, #12]
  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d8a0:	9602      	str	r6, [sp, #8]
  HW_GPIO_Init(RADIO_NSS_PORT, RADIO_NSS_PIN, &initStruct);
 800d8a2:	f7ff fd61 	bl	800d368 <HW_GPIO_Init>

  HW_GPIO_Write(RADIO_NSS_PORT, RADIO_NSS_PIN, 1);
 800d8a6:	0032      	movs	r2, r6
 800d8a8:	0029      	movs	r1, r5
 800d8aa:	0020      	movs	r0, r4
 800d8ac:	f7ff fdd0 	bl	800d450 <HW_GPIO_Write>
}
 800d8b0:	b006      	add	sp, #24
 800d8b2:	bd70      	pop	{r4, r5, r6, pc}
 800d8b4:	50000400 	.word	0x50000400

0800d8b8 <HW_SPI_Init>:
  hspi.Instance = SPI1;
 800d8b8:	4b1c      	ldr	r3, [pc, #112]	; (800d92c <HW_SPI_Init+0x74>)
 800d8ba:	481d      	ldr	r0, [pc, #116]	; (800d930 <HW_SPI_Init+0x78>)
{
 800d8bc:	b510      	push	{r4, lr}
  hspi.Instance = SPI1;
 800d8be:	6003      	str	r3, [r0, #0]
/* Private functions ---------------------------------------------------------*/

static uint32_t SpiFrequency(uint32_t hz)
{
  uint32_t divisor = 0;
  uint32_t SysClkTmp = SystemCoreClock;
 800d8c0:	4b1c      	ldr	r3, [pc, #112]	; (800d934 <HW_SPI_Init+0x7c>)
  uint32_t baudRate;

  while (SysClkTmp > hz)
 800d8c2:	491d      	ldr	r1, [pc, #116]	; (800d938 <HW_SPI_Init+0x80>)
  uint32_t SysClkTmp = SystemCoreClock;
 800d8c4:	681a      	ldr	r2, [r3, #0]
  uint32_t divisor = 0;
 800d8c6:	2300      	movs	r3, #0
  while (SysClkTmp > hz)
 800d8c8:	428a      	cmp	r2, r1
 800d8ca:	d903      	bls.n	800d8d4 <HW_SPI_Init+0x1c>
  {
    divisor++;
 800d8cc:	3301      	adds	r3, #1
    SysClkTmp = (SysClkTmp >> 1);
 800d8ce:	0852      	lsrs	r2, r2, #1

    if (divisor >= 7)
 800d8d0:	2b07      	cmp	r3, #7
 800d8d2:	d1f9      	bne.n	800d8c8 <HW_SPI_Init+0x10>
    {
      break;
    }
  }

  baudRate = (((divisor & 0x4) == 0) ? 0x0 : SPI_CR1_BR_2) |
 800d8d4:	2204      	movs	r2, #4
 800d8d6:	401a      	ands	r2, r3
 800d8d8:	d000      	beq.n	800d8dc <HW_SPI_Init+0x24>
 800d8da:	2220      	movs	r2, #32
             (((divisor & 0x2) == 0) ? 0x0 : SPI_CR1_BR_1) |
 800d8dc:	2102      	movs	r1, #2
 800d8de:	4019      	ands	r1, r3
 800d8e0:	d000      	beq.n	800d8e4 <HW_SPI_Init+0x2c>
 800d8e2:	2110      	movs	r1, #16
  baudRate = (((divisor & 0x4) == 0) ? 0x0 : SPI_CR1_BR_2) |
 800d8e4:	430a      	orrs	r2, r1
             (((divisor & 0x1) == 0) ? 0x0 : SPI_CR1_BR_0);
 800d8e6:	2101      	movs	r1, #1
 800d8e8:	400b      	ands	r3, r1
 800d8ea:	d000      	beq.n	800d8ee <HW_SPI_Init+0x36>
 800d8ec:	2308      	movs	r3, #8
  baudRate = (((divisor & 0x4) == 0) ? 0x0 : SPI_CR1_BR_2) |
 800d8ee:	4313      	orrs	r3, r2
  hspi.Init.BaudRatePrescaler = SpiFrequency(10000000);
 800d8f0:	61c3      	str	r3, [r0, #28]
  hspi.Init.Direction      = SPI_DIRECTION_2LINES;
 800d8f2:	2300      	movs	r3, #0
  hspi.Init.Mode           = SPI_MODE_MASTER;
 800d8f4:	2282      	movs	r2, #130	; 0x82
  hspi.Init.Direction      = SPI_DIRECTION_2LINES;
 800d8f6:	6083      	str	r3, [r0, #8]
  hspi.Init.CLKPolarity    = SPI_POLARITY_LOW;
 800d8f8:	6103      	str	r3, [r0, #16]
  hspi.Init.CLKPhase       = SPI_PHASE_1EDGE;
 800d8fa:	6143      	str	r3, [r0, #20]
  hspi.Init.DataSize       = SPI_DATASIZE_8BIT;
 800d8fc:	60c3      	str	r3, [r0, #12]
  hspi.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d8fe:	6283      	str	r3, [r0, #40]	; 0x28
  hspi.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 800d900:	6203      	str	r3, [r0, #32]
  hspi.Init.TIMode         = SPI_TIMODE_DISABLE;
 800d902:	6243      	str	r3, [r0, #36]	; 0x24
  SPI_CLK_ENABLE();
 800d904:	2380      	movs	r3, #128	; 0x80
  hspi.Init.Mode           = SPI_MODE_MASTER;
 800d906:	0052      	lsls	r2, r2, #1
 800d908:	6042      	str	r2, [r0, #4]
  hspi.Init.NSS            = SPI_NSS_SOFT;
 800d90a:	32fc      	adds	r2, #252	; 0xfc
 800d90c:	6182      	str	r2, [r0, #24]
  SPI_CLK_ENABLE();
 800d90e:	4a0b      	ldr	r2, [pc, #44]	; (800d93c <HW_SPI_Init+0x84>)
 800d910:	015b      	lsls	r3, r3, #5
 800d912:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800d914:	430b      	orrs	r3, r1
 800d916:	6353      	str	r3, [r2, #52]	; 0x34
  if (HAL_SPI_Init(&hspi) != HAL_OK)
 800d918:	f7f8 f8f2 	bl	8005b00 <HAL_SPI_Init>
 800d91c:	2800      	cmp	r0, #0
 800d91e:	d001      	beq.n	800d924 <HW_SPI_Init+0x6c>
    Error_Handler();
 800d920:	f7ff fcfc 	bl	800d31c <Error_Handler>
  HW_SPI_IoInit();
 800d924:	f7ff ff98 	bl	800d858 <HW_SPI_IoInit>
}
 800d928:	bd10      	pop	{r4, pc}
 800d92a:	46c0      	nop			; (mov r8, r8)
 800d92c:	40013000 	.word	0x40013000
 800d930:	20001380 	.word	0x20001380
 800d934:	20000044 	.word	0x20000044
 800d938:	00989680 	.word	0x00989680
 800d93c:	40021000 	.word	0x40021000

0800d940 <HW_SPI_InOut>:
{
 800d940:	b510      	push	{r4, lr}
 800d942:	210e      	movs	r1, #14
  HAL_SPI_TransmitReceive(&hspi, (uint8_t *) &txData, (uint8_t *) &rxData, 1, HAL_MAX_DELAY);
 800d944:	2416      	movs	r4, #22
 800d946:	2301      	movs	r3, #1
{
 800d948:	b086      	sub	sp, #24
 800d94a:	4469      	add	r1, sp
  HAL_SPI_TransmitReceive(&hspi, (uint8_t *) &txData, (uint8_t *) &rxData, 1, HAL_MAX_DELAY);
 800d94c:	446c      	add	r4, sp
 800d94e:	425b      	negs	r3, r3
{
 800d950:	8008      	strh	r0, [r1, #0]
  HAL_SPI_TransmitReceive(&hspi, (uint8_t *) &txData, (uint8_t *) &rxData, 1, HAL_MAX_DELAY);
 800d952:	0022      	movs	r2, r4
 800d954:	9300      	str	r3, [sp, #0]
 800d956:	4803      	ldr	r0, [pc, #12]	; (800d964 <HW_SPI_InOut+0x24>)
 800d958:	3302      	adds	r3, #2
 800d95a:	f7f8 f911 	bl	8005b80 <HAL_SPI_TransmitReceive>
  return rxData;
 800d95e:	8820      	ldrh	r0, [r4, #0]
}
 800d960:	b006      	add	sp, #24
 800d962:	bd10      	pop	{r4, pc}
 800d964:	20001380 	.word	0x20001380

0800d968 <LoraMacProcessNotify>:
}


void LoraMacProcessNotify(void)
{
  LoraMacProcessRequest = LORA_SET;
 800d968:	2201      	movs	r2, #1
 800d96a:	4b01      	ldr	r3, [pc, #4]	; (800d970 <LoraMacProcessNotify+0x8>)
 800d96c:	701a      	strb	r2, [r3, #0]
}
 800d96e:	4770      	bx	lr
 800d970:	200013d8 	.word	0x200013d8

0800d974 <LORA_TxNeeded>:
  LORA_send(&AppData, LORAWAN_UNCONFIRMED_MSG);
}

static void LORA_TxNeeded(void)
{
  AppData.BuffSize = 0;
 800d974:	2380      	movs	r3, #128	; 0x80
{
 800d976:	b510      	push	{r4, lr}
  AppData.BuffSize = 0;
 800d978:	4803      	ldr	r0, [pc, #12]	; (800d988 <LORA_TxNeeded+0x14>)
 800d97a:	009b      	lsls	r3, r3, #2
 800d97c:	8083      	strh	r3, [r0, #4]
  AppData.Port = LORAWAN_APP_PORT;

  LORA_send(&AppData, LORAWAN_UNCONFIRMED_MSG);
 800d97e:	2100      	movs	r1, #0
 800d980:	f7fe ff72 	bl	800c868 <LORA_send>
}
 800d984:	bd10      	pop	{r4, pc}
 800d986:	46c0      	nop			; (mov r8, r8)
 800d988:	200001bc 	.word	0x200001bc

0800d98c <LORA_ConfirmClass>:
  PRINTF("switch to class %c done\n\r", "ABC"[Class]);
 800d98c:	4b06      	ldr	r3, [pc, #24]	; (800d9a8 <LORA_ConfirmClass+0x1c>)
{
 800d98e:	b510      	push	{r4, lr}
  PRINTF("switch to class %c done\n\r", "ABC"[Class]);
 800d990:	5c19      	ldrb	r1, [r3, r0]
 800d992:	4806      	ldr	r0, [pc, #24]	; (800d9ac <LORA_ConfirmClass+0x20>)
 800d994:	f7ff fac4 	bl	800cf20 <TraceSend>
  AppData.BuffSize = 0;
 800d998:	2380      	movs	r3, #128	; 0x80
 800d99a:	4805      	ldr	r0, [pc, #20]	; (800d9b0 <LORA_ConfirmClass+0x24>)
 800d99c:	009b      	lsls	r3, r3, #2
 800d99e:	8083      	strh	r3, [r0, #4]
  LORA_send(&AppData, LORAWAN_UNCONFIRMED_MSG);
 800d9a0:	2100      	movs	r1, #0
 800d9a2:	f7fe ff61 	bl	800c868 <LORA_send>
}
 800d9a6:	bd10      	pop	{r4, pc}
 800d9a8:	0801007c 	.word	0x0801007c
 800d9ac:	08010062 	.word	0x08010062
 800d9b0:	200001bc 	.word	0x200001bc

0800d9b4 <LORA_HasJoined>:
{
 800d9b4:	b510      	push	{r4, lr}
  LORA_RequestClass(LORAWAN_DEFAULT_CLASS);
 800d9b6:	2000      	movs	r0, #0
 800d9b8:	f7fe ff8e 	bl	800c8d8 <LORA_RequestClass>
}
 800d9bc:	bd10      	pop	{r4, pc}

0800d9be <OnTimerLedEvent>:
  return batteryLevel;
}

#ifdef USE_B_L072Z_LRWAN1
static void OnTimerLedEvent(void *context)
{
 800d9be:	b510      	push	{r4, lr}
  LED_Off(LED_RED1) ;
 800d9c0:	2001      	movs	r0, #1
 800d9c2:	f7f4 ff03 	bl	80027cc <BSP_LED_Off>
}
 800d9c6:	bd10      	pop	{r4, pc}

0800d9c8 <LORA_RxData>:
{
 800d9c8:	b510      	push	{r4, lr}
 800d9ca:	0004      	movs	r4, r0
  PRINTF("PACKET RECEIVED ON PORT %d\n\r", AppData->Port);
 800d9cc:	7941      	ldrb	r1, [r0, #5]
 800d9ce:	4819      	ldr	r0, [pc, #100]	; (800da34 <LORA_RxData+0x6c>)
 800d9d0:	f7ff faa6 	bl	800cf20 <TraceSend>
  switch (AppData->Port)
 800d9d4:	7963      	ldrb	r3, [r4, #5]
 800d9d6:	2b03      	cmp	r3, #3
 800d9d8:	d011      	beq.n	800d9fe <LORA_RxData+0x36>
 800d9da:	2b63      	cmp	r3, #99	; 0x63
 800d9dc:	d01e      	beq.n	800da1c <LORA_RxData+0x54>
 800d9de:	2b02      	cmp	r3, #2
 800d9e0:	d118      	bne.n	800da14 <LORA_RxData+0x4c>
      if (AppData->BuffSize == 1)
 800d9e2:	7923      	ldrb	r3, [r4, #4]
 800d9e4:	2b01      	cmp	r3, #1
 800d9e6:	d115      	bne.n	800da14 <LORA_RxData+0x4c>
        AppLedStateOn = AppData->Buff[0] & 0x01;
 800d9e8:	6822      	ldr	r2, [r4, #0]
 800d9ea:	7812      	ldrb	r2, [r2, #0]
        if (AppLedStateOn == RESET)
 800d9ec:	421a      	tst	r2, r3
 800d9ee:	d119      	bne.n	800da24 <LORA_RxData+0x5c>
          PRINTF("LED OFF\n\r");
 800d9f0:	4811      	ldr	r0, [pc, #68]	; (800da38 <LORA_RxData+0x70>)
 800d9f2:	f7ff fa95 	bl	800cf20 <TraceSend>
          LED_Off(LED_BLUE) ;
 800d9f6:	2002      	movs	r0, #2
 800d9f8:	f7f4 fee8 	bl	80027cc <BSP_LED_Off>
 800d9fc:	e00a      	b.n	800da14 <LORA_RxData+0x4c>
      if (AppData->BuffSize == 1)
 800d9fe:	7923      	ldrb	r3, [r4, #4]
 800da00:	2b01      	cmp	r3, #1
 800da02:	d107      	bne.n	800da14 <LORA_RxData+0x4c>
        switch (AppData->Buff[0])
 800da04:	6823      	ldr	r3, [r4, #0]
 800da06:	7818      	ldrb	r0, [r3, #0]
 800da08:	2801      	cmp	r0, #1
 800da0a:	d004      	beq.n	800da16 <LORA_RxData+0x4e>
 800da0c:	2800      	cmp	r0, #0
 800da0e:	d002      	beq.n	800da16 <LORA_RxData+0x4e>
 800da10:	2802      	cmp	r0, #2
 800da12:	d000      	beq.n	800da16 <LORA_RxData+0x4e>
}
 800da14:	bd10      	pop	{r4, pc}
            LORA_RequestClass(CLASS_C);
 800da16:	f7fe ff5f 	bl	800c8d8 <LORA_RequestClass>
            break;
 800da1a:	e7fb      	b.n	800da14 <LORA_RxData+0x4c>
      AppLedStateOn = (AppData->Buff[2] == 100) ?  0x01 : 0x00;
 800da1c:	6823      	ldr	r3, [r4, #0]
      if (AppLedStateOn == RESET)
 800da1e:	789b      	ldrb	r3, [r3, #2]
 800da20:	2b64      	cmp	r3, #100	; 0x64
 800da22:	d1e5      	bne.n	800d9f0 <LORA_RxData+0x28>
          PRINTF("LED ON\n\r");
 800da24:	4805      	ldr	r0, [pc, #20]	; (800da3c <LORA_RxData+0x74>)
 800da26:	f7ff fa7b 	bl	800cf20 <TraceSend>
          LED_On(LED_BLUE) ;
 800da2a:	2002      	movs	r0, #2
 800da2c:	f7f4 febe 	bl	80027ac <BSP_LED_On>
 800da30:	e7f0      	b.n	800da14 <LORA_RxData+0x4c>
 800da32:	46c0      	nop			; (mov r8, r8)
 800da34:	08010080 	.word	0x08010080
 800da38:	0801009d 	.word	0x0801009d
 800da3c:	080100a7 	.word	0x080100a7

0800da40 <LORA_GetBatteryLevel>:
{
 800da40:	b510      	push	{r4, lr}
  batteryLevelmV = HW_GetBatteryLevel();
 800da42:	f000 fe43 	bl	800e6cc <HW_GetBatteryLevel>
  if (batteryLevelmV > VDD_BAT)
 800da46:	4a09      	ldr	r2, [pc, #36]	; (800da6c <LORA_GetBatteryLevel+0x2c>)
    batteryLevel = LORAWAN_MAX_BAT;
 800da48:	23fe      	movs	r3, #254	; 0xfe
  if (batteryLevelmV > VDD_BAT)
 800da4a:	4290      	cmp	r0, r2
 800da4c:	d80c      	bhi.n	800da68 <LORA_GetBatteryLevel+0x28>
  else if (batteryLevelmV < VDD_MIN)
 800da4e:	4a08      	ldr	r2, [pc, #32]	; (800da70 <LORA_GetBatteryLevel+0x30>)
    batteryLevel = 0;
 800da50:	2300      	movs	r3, #0
  else if (batteryLevelmV < VDD_MIN)
 800da52:	4290      	cmp	r0, r2
 800da54:	d908      	bls.n	800da68 <LORA_GetBatteryLevel+0x28>
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 800da56:	4b07      	ldr	r3, [pc, #28]	; (800da74 <LORA_GetBatteryLevel+0x34>)
 800da58:	2196      	movs	r1, #150	; 0x96
 800da5a:	18c0      	adds	r0, r0, r3
 800da5c:	23fe      	movs	r3, #254	; 0xfe
 800da5e:	00c9      	lsls	r1, r1, #3
 800da60:	4358      	muls	r0, r3
 800da62:	f7f2 fb81 	bl	8000168 <__udivsi3>
 800da66:	b2c3      	uxtb	r3, r0
}
 800da68:	0018      	movs	r0, r3
 800da6a:	bd10      	pop	{r4, pc}
 800da6c:	00000bb8 	.word	0x00000bb8
 800da70:	00000707 	.word	0x00000707
 800da74:	fffff8f8 	.word	0xfffff8f8

0800da78 <OnSettingModeElapsed>:
{
 800da78:	b510      	push	{r4, lr}
	TimerStart(&SettingTimer);
 800da7a:	4c04      	ldr	r4, [pc, #16]	; (800da8c <OnSettingModeElapsed+0x14>)
 800da7c:	1d20      	adds	r0, r4, #4
 800da7e:	f7ff f93d 	bl	800ccfc <TimerStart>
	setting_mode_timeout_count++; // increment timeout counter
 800da82:	7f23      	ldrb	r3, [r4, #28]
 800da84:	3301      	adds	r3, #1
 800da86:	b2db      	uxtb	r3, r3
 800da88:	7723      	strb	r3, [r4, #28]
}
 800da8a:	bd10      	pop	{r4, pc}
 800da8c:	200013d8 	.word	0x200013d8

0800da90 <OnTxTimerEvent>:
{
 800da90:	b510      	push	{r4, lr}
  TimerStart(&TxTimer);
 800da92:	4c04      	ldr	r4, [pc, #16]	; (800daa4 <OnTxTimerEvent+0x14>)
 800da94:	0020      	movs	r0, r4
 800da96:	3020      	adds	r0, #32
 800da98:	f7ff f930 	bl	800ccfc <TimerStart>
  AppProcessRequest = LORA_SET;
 800da9c:	2301      	movs	r3, #1
 800da9e:	3438      	adds	r4, #56	; 0x38
 800daa0:	7023      	strb	r3, [r4, #0]
}
 800daa2:	bd10      	pop	{r4, pc}
 800daa4:	200013d8 	.word	0x200013d8

0800daa8 <LoraStartTx.part.0>:
static void LoraStartTx(TxEventType_t EventType)
 800daa8:	b510      	push	{r4, lr}
    TimerInit(&TxTimer, OnTxTimerEvent);
 800daaa:	4c07      	ldr	r4, [pc, #28]	; (800dac8 <LoraStartTx.part.0+0x20>)
 800daac:	4907      	ldr	r1, [pc, #28]	; (800dacc <LoraStartTx.part.0+0x24>)
 800daae:	3420      	adds	r4, #32
 800dab0:	0020      	movs	r0, r4
 800dab2:	f7ff f919 	bl	800cce8 <TimerInit>
    TimerSetValue(&TxTimer,  APP_TX_DUTYCYCLE);
 800dab6:	4906      	ldr	r1, [pc, #24]	; (800dad0 <LoraStartTx.part.0+0x28>)
 800dab8:	0020      	movs	r0, r4
 800daba:	f7ff f9cf 	bl	800ce5c <TimerSetValue>
    OnTxTimerEvent(NULL);
 800dabe:	2000      	movs	r0, #0
 800dac0:	f7ff ffe6 	bl	800da90 <OnTxTimerEvent>
}
 800dac4:	bd10      	pop	{r4, pc}
 800dac6:	46c0      	nop			; (mov r8, r8)
 800dac8:	200013d8 	.word	0x200013d8
 800dacc:	0800da91 	.word	0x0800da91
 800dad0:	0000ea60 	.word	0x0000ea60

0800dad4 <HAL_TIM_Base_MspInit>:
  }
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM6)
 800dad4:	4b09      	ldr	r3, [pc, #36]	; (800dafc <HAL_TIM_Base_MspInit+0x28>)
 800dad6:	6802      	ldr	r2, [r0, #0]
{
 800dad8:	b510      	push	{r4, lr}
  if(htim_base->Instance==TIM6)
 800dada:	429a      	cmp	r2, r3
 800dadc:	d10c      	bne.n	800daf8 <HAL_TIM_Base_MspInit+0x24>
  {
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800dade:	2310      	movs	r3, #16
 800dae0:	4a07      	ldr	r2, [pc, #28]	; (800db00 <HAL_TIM_Base_MspInit+0x2c>)
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 800dae2:	2011      	movs	r0, #17
    __HAL_RCC_TIM6_CLK_ENABLE();
 800dae4:	6b91      	ldr	r1, [r2, #56]	; 0x38
 800dae6:	430b      	orrs	r3, r1
 800dae8:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 800daea:	2101      	movs	r1, #1
 800daec:	2200      	movs	r2, #0
 800daee:	f7f6 fdbf 	bl	8004670 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800daf2:	2011      	movs	r0, #17
 800daf4:	f7f6 fde6 	bl	80046c4 <HAL_NVIC_EnableIRQ>
  }
}
 800daf8:	bd10      	pop	{r4, pc}
 800dafa:	46c0      	nop			; (mov r8, r8)
 800dafc:	40001000 	.word	0x40001000
 800db00:	40021000 	.word	0x40021000

0800db04 <USART1_IRQHandler>:
    Error_Handler();
  }
}

void USART1_IRQHandler(void)
{
 800db04:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800db06:	4802      	ldr	r0, [pc, #8]	; (800db10 <USART1_IRQHandler+0xc>)
 800db08:	f7f8 fbd4 	bl	80062b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800db0c:	bd10      	pop	{r4, pc}
 800db0e:	46c0      	nop			; (mov r8, r8)
 800db10:	20001884 	.word	0x20001884

0800db14 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800db14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	HAL_StatusTypeDef status = HAL_OK;

	  if (huart == &huart1) {
 800db16:	4e1d      	ldr	r6, [pc, #116]	; (800db8c <HAL_UART_RxCpltCallback+0x78>)
 800db18:	42b0      	cmp	r0, r6
 800db1a:	d127      	bne.n	800db6c <HAL_UART_RxCpltCallback+0x58>

		// reset timeout
		  setting_mode_timeout_count = 0;
 800db1c:	2300      	movs	r3, #0
 800db1e:	4a1c      	ldr	r2, [pc, #112]	; (800db90 <HAL_UART_RxCpltCallback+0x7c>)

	    if (cmdBuff.fullFlag != 1 && cmdBuff.count < RX_BUFF_SIZE) {
 800db20:	4c1c      	ldr	r4, [pc, #112]	; (800db94 <HAL_UART_RxCpltCallback+0x80>)
		  setting_mode_timeout_count = 0;
 800db22:	7713      	strb	r3, [r2, #28]
	    if (cmdBuff.fullFlag != 1 && cmdBuff.count < RX_BUFF_SIZE) {
 800db24:	7823      	ldrb	r3, [r4, #0]
 800db26:	4d1c      	ldr	r5, [pc, #112]	; (800db98 <HAL_UART_RxCpltCallback+0x84>)
 800db28:	2b01      	cmp	r3, #1
 800db2a:	d029      	beq.n	800db80 <HAL_UART_RxCpltCallback+0x6c>
 800db2c:	78a3      	ldrb	r3, [r4, #2]
 800db2e:	2b4f      	cmp	r3, #79	; 0x4f
 800db30:	d826      	bhi.n	800db80 <HAL_UART_RxCpltCallback+0x6c>
	      // reception
	      if (cmdBuff.buff[cmdBuff.count] == '\r') {
 800db32:	18e1      	adds	r1, r4, r3
 800db34:	78cf      	ldrb	r7, [r1, #3]
 800db36:	2f0d      	cmp	r7, #13
 800db38:	d106      	bne.n	800db48 <HAL_UART_RxCpltCallback+0x34>
	        // disable all interrupts
	        status = HAL_UART_Abort(huart);
 800db3a:	f7f8 fac7 	bl	80060cc <HAL_UART_Abort>
	        assert_param(status == HAL_OK);

	        // set command ready and reset pointer
	        cmdBuff.cmdReady = 1;
 800db3e:	2301      	movs	r3, #1
 800db40:	7063      	strb	r3, [r4, #1]
	      // buffer is full abort and restart buffer
	      status = HAL_UART_Abort(huart);
	      assert_param(status == HAL_OK);

	      cmdBuff.fullFlag = 1;
	      ptrBuff = &cmdBuff.buff[0];
 800db42:	4b16      	ldr	r3, [pc, #88]	; (800db9c <HAL_UART_RxCpltCallback+0x88>)
 800db44:	60ab      	str	r3, [r5, #8]
	    }
	  }
}
 800db46:	e011      	b.n	800db6c <HAL_UART_RxCpltCallback+0x58>
 800db48:	68a9      	ldr	r1, [r5, #8]
	      else if (cmdBuff.buff[cmdBuff.count] == '\177') { // backspace
 800db4a:	2f7f      	cmp	r7, #127	; 0x7f
 800db4c:	d10f      	bne.n	800db6e <HAL_UART_RxCpltCallback+0x5a>
	        if (cmdBuff.count != 0) { // check if pointer is not at zero index
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d007      	beq.n	800db62 <HAL_UART_RxCpltCallback+0x4e>
	        	cmdBuff.count--;
 800db52:	3b01      	subs	r3, #1
 800db54:	70a3      	strb	r3, [r4, #2]
	          backspace_ch = 1;
 800db56:	0013      	movs	r3, r2
 800db58:	2201      	movs	r2, #1
	          ptrBuff--;
 800db5a:	3901      	subs	r1, #1
	          backspace_ch = 1;
 800db5c:	3339      	adds	r3, #57	; 0x39
	          ptrBuff--;
 800db5e:	60a9      	str	r1, [r5, #8]
	          backspace_ch = 1;
 800db60:	701a      	strb	r2, [r3, #0]
	        status = HAL_UART_Receive_IT(&huart1, ptrBuff, sizeof(uint8_t));
 800db62:	2201      	movs	r2, #1
 800db64:	0030      	movs	r0, r6
 800db66:	68a9      	ldr	r1, [r5, #8]
	        status = HAL_UART_Receive_IT(&huart1, ptrBuff, sizeof(uint8_t));
 800db68:	f7f8 f9fc 	bl	8005f64 <HAL_UART_Receive_IT>
}
 800db6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	        cmdBuff.count++;
 800db6e:	3301      	adds	r3, #1
 800db70:	70a3      	strb	r3, [r4, #2]
	        reflect_ch = 1;
 800db72:	0013      	movs	r3, r2
 800db74:	2201      	movs	r2, #1
	        ptrBuff++;
 800db76:	3101      	adds	r1, #1
	        reflect_ch = 1;
 800db78:	333a      	adds	r3, #58	; 0x3a
	        ptrBuff++;
 800db7a:	60a9      	str	r1, [r5, #8]
	        reflect_ch = 1;
 800db7c:	701a      	strb	r2, [r3, #0]
 800db7e:	e7f3      	b.n	800db68 <HAL_UART_RxCpltCallback+0x54>
	      status = HAL_UART_Abort(huart);
 800db80:	0030      	movs	r0, r6
 800db82:	f7f8 faa3 	bl	80060cc <HAL_UART_Abort>
	      cmdBuff.fullFlag = 1;
 800db86:	2301      	movs	r3, #1
 800db88:	7023      	strb	r3, [r4, #0]
 800db8a:	e7da      	b.n	800db42 <HAL_UART_RxCpltCallback+0x2e>
 800db8c:	20001884 	.word	0x20001884
 800db90:	200013d8 	.word	0x200013d8
 800db94:	200017a8 	.word	0x200017a8
 800db98:	200001bc 	.word	0x200001bc
 800db9c:	200017ab 	.word	0x200017ab

0800dba0 <extractCmd>:

void extractCmd(uint8_t cmd[], uint8_t* cmdtype, uint8_t* cmdarg)
{
 800dba0:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t cmdtype_len = 0;
    uint8_t i = 0;
 800dba2:	2300      	movs	r3, #0

    // read command type until spacebar
    while (cmdBuff.buff[i] != ' ' && cmdBuff.buff[i] != '\0') {
 800dba4:	2720      	movs	r7, #32
 800dba6:	4e0d      	ldr	r6, [pc, #52]	; (800dbdc <extractCmd+0x3c>)
 800dba8:	18f0      	adds	r0, r6, r3
 800dbaa:	78c5      	ldrb	r5, [r0, #3]
 800dbac:	18c8      	adds	r0, r1, r3
 800dbae:	002c      	movs	r4, r5
 800dbb0:	3301      	adds	r3, #1
 800dbb2:	b2db      	uxtb	r3, r3
 800dbb4:	43bc      	bics	r4, r7
 800dbb6:	d10b      	bne.n	800dbd0 <extractCmd+0x30>
    cmdtype_len = i + 1; // the length of the command type
    cmdtype[i] = '\0';
    i++;

    // read arguments
    while (cmdBuff.buff[i] != ' ' && cmdBuff.buff[i] != '\0') {
 800dbb8:	0019      	movs	r1, r3
 800dbba:	2720      	movs	r7, #32
    cmdtype[i] = '\0';
 800dbbc:	7004      	strb	r4, [r0, #0]
    while (cmdBuff.buff[i] != ' ' && cmdBuff.buff[i] != '\0') {
 800dbbe:	1870      	adds	r0, r6, r1
 800dbc0:	78c5      	ldrb	r5, [r0, #3]
 800dbc2:	1ac8      	subs	r0, r1, r3
 800dbc4:	002c      	movs	r4, r5
 800dbc6:	1810      	adds	r0, r2, r0
 800dbc8:	43bc      	bics	r4, r7
 800dbca:	d103      	bne.n	800dbd4 <extractCmd+0x34>
      cmdarg[i - cmdtype_len] = cmdBuff.buff[i];
      i++;
    }
    cmdarg[i - cmdtype_len] = '\0';
 800dbcc:	7004      	strb	r4, [r0, #0]
}
 800dbce:	bdf0      	pop	{r4, r5, r6, r7, pc}
      cmdtype[i] = cmdBuff.buff[i];
 800dbd0:	7005      	strb	r5, [r0, #0]
 800dbd2:	e7e9      	b.n	800dba8 <extractCmd+0x8>
      i++;
 800dbd4:	3101      	adds	r1, #1
      cmdarg[i - cmdtype_len] = cmdBuff.buff[i];
 800dbd6:	7005      	strb	r5, [r0, #0]
      i++;
 800dbd8:	b2c9      	uxtb	r1, r1
 800dbda:	e7f0      	b.n	800dbbe <extractCmd+0x1e>
 800dbdc:	200017a8 	.word	0x200017a8

0800dbe0 <ascii2hex_num>:

int32_t ascii2hex_num(uint8_t src[])
{
 800dbe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbe2:	0007      	movs	r7, r0
 800dbe4:	f7f2 fa9a 	bl	800011c <strlen>
  uint8_t  isNeg      = 0;
  // uint8_t  digits[10] = "0123456789";
  int32_t  result     = 0;

  // check for negative
  if (src[i] == '-') {
 800dbe8:	783a      	ldrb	r2, [r7, #0]
 800dbea:	b2c3      	uxtb	r3, r0
 800dbec:	2a2d      	cmp	r2, #45	; 0x2d
 800dbee:	d111      	bne.n	800dc14 <ascii2hex_num+0x34>
    isNeg = 1;
    i++;
 800dbf0:	2601      	movs	r6, #1
    data_len = strlen(src) - 2;
 800dbf2:	3b02      	subs	r3, #2
 800dbf4:	b2db      	uxtb	r3, r3
  else {
    data_len = strlen(src) - 1;
  }

  // get magnitude
  for (int j = 0; j < data_len; j++) {
 800dbf6:	2200      	movs	r2, #0
  uint32_t magnitude  = 1;
 800dbf8:	2001      	movs	r0, #1
    magnitude *= 10;
 800dbfa:	210a      	movs	r1, #10
  for (int j = 0; j < data_len; j++) {
 800dbfc:	4293      	cmp	r3, r2
 800dbfe:	dc0d      	bgt.n	800dc1c <ascii2hex_num+0x3c>
 800dc00:	0035      	movs	r5, r6
  int32_t  result     = 0;
 800dc02:	2400      	movs	r4, #0
  }

  while (src[i] != '\0') {
 800dc04:	5d7b      	ldrb	r3, [r7, r5]
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d10b      	bne.n	800dc22 <ascii2hex_num+0x42>
	  result += magnitude * (int) (src[i] - '0');
	  magnitude /= 10;
	  i++;
  }

  if (isNeg) result = -result;
 800dc0a:	2e00      	cmp	r6, #0
 800dc0c:	d000      	beq.n	800dc10 <ascii2hex_num+0x30>
 800dc0e:	4264      	negs	r4, r4

  return result;

}
 800dc10:	0020      	movs	r0, r4
 800dc12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    data_len = strlen(src) - 1;
 800dc14:	3b01      	subs	r3, #1
 800dc16:	b2db      	uxtb	r3, r3
  uint8_t  i          = 0;
 800dc18:	2600      	movs	r6, #0
 800dc1a:	e7ec      	b.n	800dbf6 <ascii2hex_num+0x16>
    magnitude *= 10;
 800dc1c:	4348      	muls	r0, r1
  for (int j = 0; j < data_len; j++) {
 800dc1e:	3201      	adds	r2, #1
 800dc20:	e7ec      	b.n	800dbfc <ascii2hex_num+0x1c>
	  result += magnitude * (int) (src[i] - '0');
 800dc22:	3b30      	subs	r3, #48	; 0x30
 800dc24:	4343      	muls	r3, r0
	  magnitude /= 10;
 800dc26:	210a      	movs	r1, #10
	  i++;
 800dc28:	3501      	adds	r5, #1
	  result += magnitude * (int) (src[i] - '0');
 800dc2a:	191c      	adds	r4, r3, r4
	  i++;
 800dc2c:	b2ed      	uxtb	r5, r5
	  magnitude /= 10;
 800dc2e:	f7f2 fa9b 	bl	8000168 <__udivsi3>
 800dc32:	e7e7      	b.n	800dc04 <ascii2hex_num+0x24>

0800dc34 <main>:
{
 800dc34:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dc36:	b0b7      	sub	sp, #220	; 0xdc
  HAL_Init();
 800dc38:	f7f6 fa86 	bl	8004148 <HAL_Init>
  SystemClock_Config();
 800dc3c:	f000 fbe8 	bl	800e410 <SystemClock_Config>
  DBG_Init();
 800dc40:	f7ff fb28 	bl	800d294 <DBG_Init>
  HW_Init();
 800dc44:	f000 fc98 	bl	800e578 <HW_Init>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800dc48:	2208      	movs	r2, #8
 800dc4a:	2100      	movs	r1, #0
 800dc4c:	a829      	add	r0, sp, #164	; 0xa4
 800dc4e:	f000 fef8 	bl	800ea42 <memset>
  htim6.Instance = TIM6;
 800dc52:	4cad      	ldr	r4, [pc, #692]	; (800df08 <main+0x2d4>)
 800dc54:	4bad      	ldr	r3, [pc, #692]	; (800df0c <main+0x2d8>)
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800dc56:	2500      	movs	r5, #0
  htim6.Instance = TIM6;
 800dc58:	6023      	str	r3, [r4, #0]
  htim6.Init.Prescaler = 47999;
 800dc5a:	4bad      	ldr	r3, [pc, #692]	; (800df10 <main+0x2dc>)
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800dc5c:	0020      	movs	r0, r4
  htim6.Init.Prescaler = 47999;
 800dc5e:	6063      	str	r3, [r4, #4]
  htim6.Init.Period = 999;
 800dc60:	4bac      	ldr	r3, [pc, #688]	; (800df14 <main+0x2e0>)
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800dc62:	60a5      	str	r5, [r4, #8]
  htim6.Init.Period = 999;
 800dc64:	60e3      	str	r3, [r4, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800dc66:	2380      	movs	r3, #128	; 0x80
 800dc68:	6163      	str	r3, [r4, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800dc6a:	f7f8 f8b5 	bl	8005dd8 <HAL_TIM_Base_Init>
 800dc6e:	42a8      	cmp	r0, r5
 800dc70:	d001      	beq.n	800dc76 <main+0x42>
    Error_Handler();
 800dc72:	f7ff fb53 	bl	800d31c <Error_Handler>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800dc76:	a929      	add	r1, sp, #164	; 0xa4
 800dc78:	0020      	movs	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800dc7a:	9529      	str	r5, [sp, #164]	; 0xa4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800dc7c:	952a      	str	r5, [sp, #168]	; 0xa8
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800dc7e:	f7f8 f8c6 	bl	8005e0e <HAL_TIMEx_MasterConfigSynchronization>
 800dc82:	2800      	cmp	r0, #0
 800dc84:	d001      	beq.n	800dc8a <main+0x56>
    Error_Handler();
 800dc86:	f7ff fb49 	bl	800d31c <Error_Handler>
	huart1.Instance = USART1;
 800dc8a:	4ca3      	ldr	r4, [pc, #652]	; (800df18 <main+0x2e4>)
 800dc8c:	4ba3      	ldr	r3, [pc, #652]	; (800df1c <main+0x2e8>)
	huart1.Init.BaudRate = 9600;
 800dc8e:	2696      	movs	r6, #150	; 0x96
	huart1.Instance = USART1;
 800dc90:	6023      	str	r3, [r4, #0]
	huart1.Init.Mode = UART_MODE_TX_RX;
 800dc92:	220c      	movs	r2, #12
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800dc94:	2300      	movs	r3, #0
	huart1.Init.BaudRate = 9600;
 800dc96:	01b6      	lsls	r6, r6, #6
	if (HAL_UART_Init(&huart1) != HAL_OK)
 800dc98:	0020      	movs	r0, r4
	huart1.Init.BaudRate = 9600;
 800dc9a:	6066      	str	r6, [r4, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800dc9c:	60a3      	str	r3, [r4, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 800dc9e:	60e3      	str	r3, [r4, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800dca0:	6123      	str	r3, [r4, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 800dca2:	6162      	str	r2, [r4, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800dca4:	61a3      	str	r3, [r4, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800dca6:	61e3      	str	r3, [r4, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800dca8:	6223      	str	r3, [r4, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800dcaa:	6263      	str	r3, [r4, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK)
 800dcac:	f7f8 fe90 	bl	80069d0 <HAL_UART_Init>
 800dcb0:	2800      	cmp	r0, #0
 800dcb2:	d001      	beq.n	800dcb8 <main+0x84>
		Error_Handler();
 800dcb4:	f7ff fb32 	bl	800d31c <Error_Handler>
  hlpuart1.Instance = LPUART1;
 800dcb8:	4d99      	ldr	r5, [pc, #612]	; (800df20 <main+0x2ec>)
 800dcba:	4b9a      	ldr	r3, [pc, #616]	; (800df24 <main+0x2f0>)
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800dcbc:	220c      	movs	r2, #12
  hlpuart1.Instance = LPUART1;
 800dcbe:	602b      	str	r3, [r5, #0]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800dcc0:	2300      	movs	r3, #0
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800dcc2:	0028      	movs	r0, r5
  hlpuart1.Init.BaudRate = 9600;
 800dcc4:	606e      	str	r6, [r5, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800dcc6:	60ab      	str	r3, [r5, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800dcc8:	60eb      	str	r3, [r5, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800dcca:	612b      	str	r3, [r5, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800dccc:	616a      	str	r2, [r5, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800dcce:	61ab      	str	r3, [r5, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800dcd0:	622b      	str	r3, [r5, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800dcd2:	626b      	str	r3, [r5, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800dcd4:	f7f8 fe7c 	bl	80069d0 <HAL_UART_Init>
 800dcd8:	2800      	cmp	r0, #0
 800dcda:	d001      	beq.n	800dce0 <main+0xac>
    Error_Handler();
 800dcdc:	f7ff fb1e 	bl	800d31c <Error_Handler>
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800dce0:	2702      	movs	r7, #2
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800dce2:	2210      	movs	r2, #16
 800dce4:	2100      	movs	r1, #0
 800dce6:	a82a      	add	r0, sp, #168	; 0xa8
 800dce8:	f000 feab 	bl	800ea42 <memset>
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800dcec:	4b8e      	ldr	r3, [pc, #568]	; (800df28 <main+0x2f4>)
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800dcee:	a929      	add	r1, sp, #164	; 0xa4
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800dcf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800dcf2:	488e      	ldr	r0, [pc, #568]	; (800df2c <main+0x2f8>)
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800dcf4:	433a      	orrs	r2, r7
 800dcf6:	62da      	str	r2, [r3, #44]	; 0x2c
 800dcf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  volatile uint32_t time = 0;
 800dcfa:	2600      	movs	r6, #0
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800dcfc:	403b      	ands	r3, r7
 800dcfe:	9323      	str	r3, [sp, #140]	; 0x8c
 800dd00:	9b23      	ldr	r3, [sp, #140]	; 0x8c
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 800dd02:	2304      	movs	r3, #4
 800dd04:	9329      	str	r3, [sp, #164]	; 0xa4
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800dd06:	f7f6 fdff 	bl	8004908 <HAL_GPIO_Init>
  honey_init(hlpuart1, &honey);
 800dd0a:	0029      	movs	r1, r5
 800dd0c:	4b88      	ldr	r3, [pc, #544]	; (800df30 <main+0x2fc>)
 800dd0e:	3110      	adds	r1, #16
 800dd10:	2270      	movs	r2, #112	; 0x70
 800dd12:	4668      	mov	r0, sp
  volatile uint32_t time = 0;
 800dd14:	9620      	str	r6, [sp, #128]	; 0x80
  honey_init(hlpuart1, &honey);
 800dd16:	931c      	str	r3, [sp, #112]	; 0x70
  volatile uint32_t time_tick = 0;
 800dd18:	9621      	str	r6, [sp, #132]	; 0x84
  volatile uint32_t time_ms = 0;
 800dd1a:	9622      	str	r6, [sp, #136]	; 0x88
  honey_init(hlpuart1, &honey);
 800dd1c:	f000 fe88 	bl	800ea30 <memcpy>
 800dd20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dd22:	f7ff fa49 	bl	800d1b8 <honey_init>
  LPM_SetOffMode(LPM_APPLI_Id, LPM_Disable);
 800dd26:	2101      	movs	r1, #1
 800dd28:	0008      	movs	r0, r1
 800dd2a:	f7fe fe13 	bl	800c954 <LPM_SetOffMode>
  PRINTF("APP_VERSION= %02X.%02X.%02X.%02X\r\n", (uint8_t)(__APP_VERSION >> 24), (uint8_t)(__APP_VERSION >> 16), (uint8_t)(__APP_VERSION >> 8), (uint8_t)__APP_VERSION);
 800dd2e:	0033      	movs	r3, r6
 800dd30:	2203      	movs	r2, #3
 800dd32:	2101      	movs	r1, #1
 800dd34:	9600      	str	r6, [sp, #0]
 800dd36:	487f      	ldr	r0, [pc, #508]	; (800df34 <main+0x300>)
 800dd38:	f7ff f8f2 	bl	800cf20 <TraceSend>
  PRINTF("MAC_VERSION= %02X.%02X.%02X.%02X\r\n", (uint8_t)(__LORA_MAC_VERSION >> 24), (uint8_t)(__LORA_MAC_VERSION >> 16), (uint8_t)(__LORA_MAC_VERSION >> 8), (uint8_t)__LORA_MAC_VERSION);
 800dd3c:	2204      	movs	r2, #4
 800dd3e:	003b      	movs	r3, r7
 800dd40:	0011      	movs	r1, r2
 800dd42:	9600      	str	r6, [sp, #0]
 800dd44:	487c      	ldr	r0, [pc, #496]	; (800df38 <main+0x304>)
 800dd46:	f7ff f8eb 	bl	800cf20 <TraceSend>
  LORA_Init(&LoRaMainCallbacks, &LoRaParamInit);
 800dd4a:	487c      	ldr	r0, [pc, #496]	; (800df3c <main+0x308>)
 800dd4c:	0001      	movs	r1, r0
 800dd4e:	3010      	adds	r0, #16
 800dd50:	310c      	adds	r1, #12
 800dd52:	f7fe fc25 	bl	800c5a0 <LORA_Init>
  LORA_Join();
 800dd56:	f7fe fd0b 	bl	800c770 <LORA_Join>
 800dd5a:	f7ff fea5 	bl	800daa8 <LoraStartTx.part.0>
	if (!setting_mode) {
 800dd5e:	4b78      	ldr	r3, [pc, #480]	; (800df40 <main+0x30c>)
 800dd60:	4e78      	ldr	r6, [pc, #480]	; (800df44 <main+0x310>)
 800dd62:	781b      	ldrb	r3, [r3, #0]
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d000      	beq.n	800dd6a <main+0x136>
 800dd68:	e10a      	b.n	800df80 <main+0x34c>
		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == 0) {
 800dd6a:	2104      	movs	r1, #4
 800dd6c:	486f      	ldr	r0, [pc, #444]	; (800df2c <main+0x2f8>)
 800dd6e:	f7f6 fe85 	bl	8004a7c <HAL_GPIO_ReadPin>
 800dd72:	1e05      	subs	r5, r0, #0
 800dd74:	d132      	bne.n	800dddc <main+0x1a8>
			HAL_Delay(1000); // debouncing prevention
 800dd76:	20fa      	movs	r0, #250	; 0xfa
 800dd78:	0080      	lsls	r0, r0, #2
 800dd7a:	f000 fa7f 	bl	800e27c <HAL_Delay>
			PRINTF("\r\n[i] Entering Setting Mode...\r\n\r\n");
 800dd7e:	4872      	ldr	r0, [pc, #456]	; (800df48 <main+0x314>)
 800dd80:	f7ff f8ce 	bl	800cf20 <TraceSend>
			TimerStop(&TxTimer);
 800dd84:	0030      	movs	r0, r6
	TimerInit(&SettingTimer, OnSettingModeElapsed);
 800dd86:	1d37      	adds	r7, r6, #4
			TimerStop(&TxTimer);
 800dd88:	3020      	adds	r0, #32
 800dd8a:	f7ff f833 	bl	800cdf4 <TimerStop>
	TimerInit(&SettingTimer, OnSettingModeElapsed);
 800dd8e:	0038      	movs	r0, r7
 800dd90:	496e      	ldr	r1, [pc, #440]	; (800df4c <main+0x318>)
 800dd92:	f7fe ffa9 	bl	800cce8 <TimerInit>
	TimerSetValue(&SettingTimer,  SETTING_MODE_DUTYCYCLE);
 800dd96:	0038      	movs	r0, r7
			setting_mode = 1; // change mode
 800dd98:	2701      	movs	r7, #1
	TimerSetValue(&SettingTimer,  SETTING_MODE_DUTYCYCLE);
 800dd9a:	496d      	ldr	r1, [pc, #436]	; (800df50 <main+0x31c>)
 800dd9c:	f7ff f85e 	bl	800ce5c <TimerSetValue>
	OnSettingModeElapsed(NULL);
 800dda0:	0028      	movs	r0, r5
 800dda2:	f7ff fe69 	bl	800da78 <OnSettingModeElapsed>
			setting_mode = 1; // change mode
 800dda6:	4b66      	ldr	r3, [pc, #408]	; (800df40 <main+0x30c>)
			status = HAL_OK;
 800dda8:	363c      	adds	r6, #60	; 0x3c
			setting_mode = 1; // change mode
 800ddaa:	701f      	strb	r7, [r3, #0]
			cmdBuff.fullFlag = 0;
 800ddac:	4b69      	ldr	r3, [pc, #420]	; (800df54 <main+0x320>)
			memset(&cmdBuff.buff, 0x00, sizeof(cmdBuff.buff));
 800ddae:	2250      	movs	r2, #80	; 0x50
 800ddb0:	0029      	movs	r1, r5
 800ddb2:	4869      	ldr	r0, [pc, #420]	; (800df58 <main+0x324>)
			cmdBuff.fullFlag = 0;
 800ddb4:	701d      	strb	r5, [r3, #0]
			cmdBuff.cmdReady = 0;
 800ddb6:	705d      	strb	r5, [r3, #1]
			cmdBuff.count    = 0;
 800ddb8:	709d      	strb	r5, [r3, #2]
			status = HAL_OK;
 800ddba:	7035      	strb	r5, [r6, #0]
			memset(&cmdBuff.buff, 0x00, sizeof(cmdBuff.buff));
 800ddbc:	f000 fe41 	bl	800ea42 <memset>
			status = HAL_UART_Receive_IT(&huart1, &cmdBuff.buff[0], sizeof(uint8_t));
 800ddc0:	003a      	movs	r2, r7
 800ddc2:	4965      	ldr	r1, [pc, #404]	; (800df58 <main+0x324>)
 800ddc4:	0020      	movs	r0, r4
 800ddc6:	f7f8 f8cd 	bl	8005f64 <HAL_UART_Receive_IT>
			status = HAL_UART_Transmit(&huart1, &prompt[0], sizeof(prompt), 100);
 800ddca:	495c      	ldr	r1, [pc, #368]	; (800df3c <main+0x308>)
			status = HAL_UART_Receive_IT(&huart1, &cmdBuff.buff[0], sizeof(uint8_t));
 800ddcc:	7030      	strb	r0, [r6, #0]
			status = HAL_UART_Transmit(&huart1, &prompt[0], sizeof(prompt), 100);
 800ddce:	2364      	movs	r3, #100	; 0x64
 800ddd0:	2210      	movs	r2, #16
 800ddd2:	3134      	adds	r1, #52	; 0x34
 800ddd4:	0020      	movs	r0, r4
 800ddd6:	f7f8 fcdd 	bl	8006794 <HAL_UART_Transmit>
 800ddda:	7030      	strb	r0, [r6, #0]
		if (AppProcessRequest == LORA_SET)
 800dddc:	4b59      	ldr	r3, [pc, #356]	; (800df44 <main+0x310>)
 800ddde:	3338      	adds	r3, #56	; 0x38
 800dde0:	781a      	ldrb	r2, [r3, #0]
 800dde2:	2a01      	cmp	r2, #1
 800dde4:	d11b      	bne.n	800de1e <main+0x1ea>
		  AppProcessRequest = LORA_RESET;
 800dde6:	2200      	movs	r2, #0
		  PRINTF("STARTING UP PM2.5 MEASUREMENT...\r\n");
 800dde8:	485c      	ldr	r0, [pc, #368]	; (800df5c <main+0x328>)
		  AppProcessRequest = LORA_RESET;
 800ddea:	701a      	strb	r2, [r3, #0]
		  PRINTF("STARTING UP PM2.5 MEASUREMENT...\r\n");
 800ddec:	f7ff f898 	bl	800cf20 <TraceSend>
		  honey_start(&honey);
 800ddf0:	4f4f      	ldr	r7, [pc, #316]	; (800df30 <main+0x2fc>)
 800ddf2:	0038      	movs	r0, r7
 800ddf4:	f7ff f91a 	bl	800d02c <honey_start>
		  HAL_Delay(HONEY_WARMUP_DURATION);
 800ddf8:	4859      	ldr	r0, [pc, #356]	; (800df60 <main+0x32c>)
 800ddfa:	f000 fa3f 	bl	800e27c <HAL_Delay>
		  PRINTF("Transmitting PM2.5 Concentration...\r\n");
 800ddfe:	4859      	ldr	r0, [pc, #356]	; (800df64 <main+0x330>)
 800de00:	f7ff f88e 	bl	800cf20 <TraceSend>
  if (LORA_JoinStatus() != LORA_SET)
 800de04:	f7fe fd20 	bl	800c848 <LORA_JoinStatus>
 800de08:	0006      	movs	r6, r0
 800de0a:	2801      	cmp	r0, #1
 800de0c:	d013      	beq.n	800de36 <main+0x202>
    LORA_Join();
 800de0e:	f7fe fcaf 	bl	800c770 <LORA_Join>
		  honey_stop(&honey);
 800de12:	4847      	ldr	r0, [pc, #284]	; (800df30 <main+0x2fc>)
 800de14:	f7ff f928 	bl	800d068 <honey_stop>
		  PRINTF("TRANSMISSION COMPLETED.\r\n");
 800de18:	4853      	ldr	r0, [pc, #332]	; (800df68 <main+0x334>)
 800de1a:	f7ff f881 	bl	800cf20 <TraceSend>
		if (LoraMacProcessRequest == LORA_SET)
 800de1e:	4b49      	ldr	r3, [pc, #292]	; (800df44 <main+0x310>)
 800de20:	781b      	ldrb	r3, [r3, #0]
 800de22:	2b01      	cmp	r3, #1
 800de24:	d104      	bne.n	800de30 <main+0x1fc>
		  LoraMacProcessRequest = LORA_RESET;
 800de26:	2300      	movs	r3, #0
 800de28:	4a46      	ldr	r2, [pc, #280]	; (800df44 <main+0x310>)
 800de2a:	7013      	strb	r3, [r2, #0]
		  LoRaMacProcess();
 800de2c:	f7fa fe6e 	bl	8008b0c <LoRaMacProcess>
  __ASM volatile ("cpsid i" : : : "memory");
 800de30:	b672      	cpsid	i
  __ASM volatile ("cpsie i" : : : "memory");
 800de32:	b662      	cpsie	i
 800de34:	e793      	b.n	800dd5e <main+0x12a>
  TimerInit(&TxLedTimer, OnTimerLedEvent);
 800de36:	4d43      	ldr	r5, [pc, #268]	; (800df44 <main+0x310>)
 800de38:	494c      	ldr	r1, [pc, #304]	; (800df6c <main+0x338>)
 800de3a:	3540      	adds	r5, #64	; 0x40
 800de3c:	0028      	movs	r0, r5
 800de3e:	f7fe ff53 	bl	800cce8 <TimerInit>
  TimerSetValue(&TxLedTimer, 200);
 800de42:	21c8      	movs	r1, #200	; 0xc8
 800de44:	0028      	movs	r0, r5
 800de46:	f7ff f809 	bl	800ce5c <TimerSetValue>
  LED_On(LED_RED1) ;
 800de4a:	0030      	movs	r0, r6
 800de4c:	f7f4 fcae 	bl	80027ac <BSP_LED_On>
  TimerStart(&TxLedTimer);
 800de50:	0028      	movs	r0, r5
 800de52:	f7fe ff53 	bl	800ccfc <TimerStart>
  if (honey_read(&honey) == CMD_RESP_SUCCESS) {
 800de56:	0038      	movs	r0, r7
 800de58:	f7ff f924 	bl	800d0a4 <honey_read>
 800de5c:	2801      	cmp	r0, #1
 800de5e:	d121      	bne.n	800dea4 <main+0x270>
	  PRINTF("[s] Read PM2.5 Success!\r\n");
 800de60:	4843      	ldr	r0, [pc, #268]	; (800df70 <main+0x33c>)
	  pm2_5 = honey.pm2_5;
 800de62:	3780      	adds	r7, #128	; 0x80
	  PRINTF("[s] Read PM2.5 Success!\r\n");
 800de64:	f7ff f85c 	bl	800cf20 <TraceSend>
	  pm2_5 = honey.pm2_5;
 800de68:	883b      	ldrh	r3, [r7, #0]
  uint8_t  sensor_err = 0;  // if sensor has error
 800de6a:	2600      	movs	r6, #0
	  pm2_5 = honey.pm2_5;
 800de6c:	931f      	str	r3, [sp, #124]	; 0x7c
	  if (pm2_5 == 191) {
 800de6e:	2bbf      	cmp	r3, #191	; 0xbf
 800de70:	d101      	bne.n	800de76 <main+0x242>
		  pm2_5 = 190;
 800de72:	3b01      	subs	r3, #1
 800de74:	931f      	str	r3, [sp, #124]	; 0x7c
  batteryLevel = LORA_GetBatteryLevel();                      /* 1 (very low) to 254 (fully charged) */
 800de76:	f7ff fde3 	bl	800da40 <LORA_GetBatteryLevel>
  if (batteryLevel < 5) {
 800de7a:	2300      	movs	r3, #0
 800de7c:	2204      	movs	r2, #4
  AppData.Port = LORAWAN_APP_PORT;
 800de7e:	2702      	movs	r7, #2
  if (batteryLevel < 5) {
 800de80:	4282      	cmp	r2, r0
 800de82:	415b      	adcs	r3, r3
  AppData.Port = LORAWAN_APP_PORT;
 800de84:	4d2d      	ldr	r5, [pc, #180]	; (800df3c <main+0x308>)
  if (lowBatt || sensor_err) {
 800de86:	431e      	orrs	r6, r3
  AppData.Port = LORAWAN_APP_PORT;
 800de88:	716f      	strb	r7, [r5, #5]
  if (lowBatt || sensor_err) {
 800de8a:	d00f      	beq.n	800deac <main+0x278>
	AppData.Buff[i++] = 17;
 800de8c:	2311      	movs	r3, #17
 800de8e:	682a      	ldr	r2, [r5, #0]
 800de90:	7013      	strb	r3, [r2, #0]
	AppData.Buff[i++] = 191;
 800de92:	682a      	ldr	r2, [r5, #0]
 800de94:	33ae      	adds	r3, #174	; 0xae
 800de96:	7053      	strb	r3, [r2, #1]
  LORA_send(&AppData, LORAWAN_DEFAULT_CONFIRM_MSG_STATE);
 800de98:	2100      	movs	r1, #0
 800de9a:	0028      	movs	r0, r5
  AppData.BuffSize = i;
 800de9c:	712f      	strb	r7, [r5, #4]
  LORA_send(&AppData, LORAWAN_DEFAULT_CONFIRM_MSG_STATE);
 800de9e:	f7fe fce3 	bl	800c868 <LORA_send>
 800dea2:	e7b6      	b.n	800de12 <main+0x1de>
	  PRINTF("[e] Read PM2.5 Error!\r\n");
 800dea4:	4833      	ldr	r0, [pc, #204]	; (800df74 <main+0x340>)
 800dea6:	f7ff f83b 	bl	800cf20 <TraceSend>
 800deaa:	e7e4      	b.n	800de76 <main+0x242>
	if (send_pm_toggler) {
 800deac:	002b      	movs	r3, r5
 800deae:	3344      	adds	r3, #68	; 0x44
 800deb0:	781b      	ldrb	r3, [r3, #0]
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d00f      	beq.n	800ded6 <main+0x2a2>
		PRINTF("[i] sending pm2.5 data...\r\n");
 800deb6:	4830      	ldr	r0, [pc, #192]	; (800df78 <main+0x344>)
 800deb8:	f7ff f832 	bl	800cf20 <TraceSend>
		AppData.Buff[i++] = 17;
 800debc:	2311      	movs	r3, #17
 800debe:	682a      	ldr	r2, [r5, #0]
 800dec0:	7013      	strb	r3, [r2, #0]
		AppData.Buff[i++] = pm2_5;
 800dec2:	682b      	ldr	r3, [r5, #0]
 800dec4:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800dec6:	705a      	strb	r2, [r3, #1]
	send_pm_toggler = !send_pm_toggler;
 800dec8:	002a      	movs	r2, r5
 800deca:	3244      	adds	r2, #68	; 0x44
 800decc:	7813      	ldrb	r3, [r2, #0]
 800dece:	4259      	negs	r1, r3
 800ded0:	414b      	adcs	r3, r1
 800ded2:	7013      	strb	r3, [r2, #0]
 800ded4:	e7e0      	b.n	800de98 <main+0x264>
		PRINTF("[i] sending geolocation data...\r\n");
 800ded6:	4829      	ldr	r0, [pc, #164]	; (800df7c <main+0x348>)
 800ded8:	f7ff f822 	bl	800cf20 <TraceSend>
		AppData.Buff[i++] = 17;
 800dedc:	2311      	movs	r3, #17
 800dede:	682a      	ldr	r2, [r5, #0]
		AppData.Buff[i++] = longitude & 0xFF;
 800dee0:	2707      	movs	r7, #7
		AppData.Buff[i++] = 17;
 800dee2:	7013      	strb	r3, [r2, #0]
		AppData.Buff[i++] = (latitude >> 16) & 0xFF;
 800dee4:	682a      	ldr	r2, [r5, #0]
 800dee6:	3303      	adds	r3, #3
 800dee8:	7053      	strb	r3, [r2, #1]
		AppData.Buff[i++] = (latitude >> 8) & 0xFF;
 800deea:	682a      	ldr	r2, [r5, #0]
 800deec:	33e1      	adds	r3, #225	; 0xe1
 800deee:	7093      	strb	r3, [r2, #2]
		AppData.Buff[i++] = latitude & 0xFF;
 800def0:	682a      	ldr	r2, [r5, #0]
 800def2:	3b1f      	subs	r3, #31
 800def4:	70d3      	strb	r3, [r2, #3]
		AppData.Buff[i++] = (longitude >> 16) & 0xFF;
 800def6:	2299      	movs	r2, #153	; 0x99
 800def8:	682b      	ldr	r3, [r5, #0]
 800defa:	711a      	strb	r2, [r3, #4]
		AppData.Buff[i++] = (longitude >> 8) & 0xFF;
 800defc:	3a34      	subs	r2, #52	; 0x34
 800defe:	715a      	strb	r2, [r3, #5]
		AppData.Buff[i++] = longitude & 0xFF;
 800df00:	3a58      	subs	r2, #88	; 0x58
 800df02:	719a      	strb	r2, [r3, #6]
 800df04:	e7e0      	b.n	800dec8 <main+0x294>
 800df06:	46c0      	nop			; (mov r8, r8)
 800df08:	20001904 	.word	0x20001904
 800df0c:	40001000 	.word	0x40001000
 800df10:	0000bb7f 	.word	0x0000bb7f
 800df14:	000003e7 	.word	0x000003e7
 800df18:	20001884 	.word	0x20001884
 800df1c:	40013800 	.word	0x40013800
 800df20:	20001728 	.word	0x20001728
 800df24:	40004800 	.word	0x40004800
 800df28:	40021000 	.word	0x40021000
 800df2c:	50000400 	.word	0x50000400
 800df30:	200017fc 	.word	0x200017fc
 800df34:	080100b0 	.word	0x080100b0
 800df38:	080100d3 	.word	0x080100d3
 800df3c:	200001bc 	.word	0x200001bc
 800df40:	20001413 	.word	0x20001413
 800df44:	200013d8 	.word	0x200013d8
 800df48:	080100f6 	.word	0x080100f6
 800df4c:	0800da79 	.word	0x0800da79
 800df50:	00001388 	.word	0x00001388
 800df54:	200017a8 	.word	0x200017a8
 800df58:	200017ab 	.word	0x200017ab
 800df5c:	08010119 	.word	0x08010119
 800df60:	00002710 	.word	0x00002710
 800df64:	0801013c 	.word	0x0801013c
 800df68:	080101d2 	.word	0x080101d2
 800df6c:	0800d9bf 	.word	0x0800d9bf
 800df70:	08010162 	.word	0x08010162
 800df74:	0801017c 	.word	0x0801017c
 800df78:	08010194 	.word	0x08010194
 800df7c:	080101b0 	.word	0x080101b0
		if (setting_mode_timeout_count == SETTING_MODE_TIMEOUT_COUNT_MAX) {
 800df80:	7f33      	ldrb	r3, [r6, #28]
 800df82:	2b19      	cmp	r3, #25
 800df84:	d10e      	bne.n	800dfa4 <main+0x370>
			TimerStop(&SettingTimer); // stop setting mode timer
 800df86:	3604      	adds	r6, #4
			PRINTF("\r\n[i] SETTING MODE TIMEOUT, entering normal mode...\r\n");
 800df88:	489d      	ldr	r0, [pc, #628]	; (800e200 <main+0x5cc>)
 800df8a:	f7fe ffc9 	bl	800cf20 <TraceSend>
			TimerStop(&SettingTimer); // stop setting mode timer
 800df8e:	0030      	movs	r0, r6
 800df90:	f7fe ff30 	bl	800cdf4 <TimerStop>
			TimerReset(&SettingTimer);
 800df94:	0030      	movs	r0, r6
 800df96:	f7fe ff59 	bl	800ce4c <TimerReset>
			setting_mode = 0; // change mode to normal
 800df9a:	2300      	movs	r3, #0
 800df9c:	4a99      	ldr	r2, [pc, #612]	; (800e204 <main+0x5d0>)
 800df9e:	7013      	strb	r3, [r2, #0]
 800dfa0:	f7ff fd82 	bl	800daa8 <LoraStartTx.part.0>
		if (cmdBuff.fullFlag) {
 800dfa4:	4e98      	ldr	r6, [pc, #608]	; (800e208 <main+0x5d4>)
 800dfa6:	7833      	ldrb	r3, [r6, #0]
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d016      	beq.n	800dfda <main+0x3a6>
			status = HAL_UART_Transmit_IT(&huart1, &cmd_overflow[0], sizeof(cmd_overflow));
 800dfac:	4997      	ldr	r1, [pc, #604]	; (800e20c <main+0x5d8>)
 800dfae:	222f      	movs	r2, #47	; 0x2f
 800dfb0:	3145      	adds	r1, #69	; 0x45
 800dfb2:	0020      	movs	r0, r4
 800dfb4:	f7f7 ff98 	bl	8005ee8 <HAL_UART_Transmit_IT>
			cmdBuff.count = 0;
 800dfb8:	2100      	movs	r1, #0
			status = HAL_UART_Transmit_IT(&huart1, &cmd_overflow[0], sizeof(cmd_overflow));
 800dfba:	4d95      	ldr	r5, [pc, #596]	; (800e210 <main+0x5dc>)
			cmdBuff.count = 0;
 800dfbc:	70b1      	strb	r1, [r6, #2]
			cmdBuff.fullFlag = 0;
 800dfbe:	7031      	strb	r1, [r6, #0]
			memset(&cmdBuff.buff, 0x00, sizeof(cmdBuff.buff));
 800dfc0:	4e94      	ldr	r6, [pc, #592]	; (800e214 <main+0x5e0>)
			status = HAL_UART_Transmit_IT(&huart1, &cmd_overflow[0], sizeof(cmd_overflow));
 800dfc2:	353c      	adds	r5, #60	; 0x3c
 800dfc4:	7028      	strb	r0, [r5, #0]
			memset(&cmdBuff.buff, 0x00, sizeof(cmdBuff.buff));
 800dfc6:	2250      	movs	r2, #80	; 0x50
 800dfc8:	0030      	movs	r0, r6
 800dfca:	f000 fd3a 	bl	800ea42 <memset>
			status = HAL_UART_Receive_IT(&huart1, &cmdBuff.buff[0], sizeof(uint8_t));
 800dfce:	2201      	movs	r2, #1
 800dfd0:	0031      	movs	r1, r6
 800dfd2:	0020      	movs	r0, r4
 800dfd4:	f7f7 ffc6 	bl	8005f64 <HAL_UART_Receive_IT>
 800dfd8:	7028      	strb	r0, [r5, #0]
		if (backspace_ch) {
 800dfda:	4d8d      	ldr	r5, [pc, #564]	; (800e210 <main+0x5dc>)
 800dfdc:	002e      	movs	r6, r5
 800dfde:	3639      	adds	r6, #57	; 0x39
 800dfe0:	7833      	ldrb	r3, [r6, #0]
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d009      	beq.n	800dffa <main+0x3c6>
			status = HAL_UART_Transmit_IT(&huart1, (uint8_t *) "\177", sizeof(uint8_t));
 800dfe6:	2201      	movs	r2, #1
 800dfe8:	498b      	ldr	r1, [pc, #556]	; (800e218 <main+0x5e4>)
 800dfea:	0020      	movs	r0, r4
 800dfec:	f7f7 ff7c 	bl	8005ee8 <HAL_UART_Transmit_IT>
 800dff0:	002b      	movs	r3, r5
 800dff2:	333c      	adds	r3, #60	; 0x3c
 800dff4:	7018      	strb	r0, [r3, #0]
			backspace_ch = 0;
 800dff6:	2300      	movs	r3, #0
 800dff8:	7033      	strb	r3, [r6, #0]
		if (cmdBuff.cmdReady) {
 800dffa:	4983      	ldr	r1, [pc, #524]	; (800e208 <main+0x5d4>)
 800dffc:	784f      	ldrb	r7, [r1, #1]
 800dffe:	2f00      	cmp	r7, #0
 800e000:	d100      	bne.n	800e004 <main+0x3d0>
 800e002:	e0ec      	b.n	800e1de <main+0x5aa>
			cmdBuff.buff[cmdBuff.count] = '\0';
 800e004:	2600      	movs	r6, #0
 800e006:	788b      	ldrb	r3, [r1, #2]
 800e008:	18c9      	adds	r1, r1, r3
 800e00a:	70ce      	strb	r6, [r1, #3]
			if (cmdBuff.count > 0) {
 800e00c:	42b3      	cmp	r3, r6
 800e00e:	d100      	bne.n	800e012 <main+0x3de>
 800e010:	e0dd      	b.n	800e1ce <main+0x59a>
				uint8_t cmd_type[10] = {0};
 800e012:	0031      	movs	r1, r6
 800e014:	220a      	movs	r2, #10
 800e016:	a826      	add	r0, sp, #152	; 0x98
 800e018:	f000 fd13 	bl	800ea42 <memset>
				uint8_t cmd_arg[5] = {0};
 800e01c:	0031      	movs	r1, r6
 800e01e:	2205      	movs	r2, #5
 800e020:	a824      	add	r0, sp, #144	; 0x90
 800e022:	f000 fd0e 	bl	800ea42 <memset>
				extractCmd(cmdBuff.buff, cmd_type, cmd_arg);
 800e026:	a926      	add	r1, sp, #152	; 0x98
 800e028:	aa24      	add	r2, sp, #144	; 0x90
 800e02a:	487a      	ldr	r0, [pc, #488]	; (800e214 <main+0x5e0>)
 800e02c:	f7ff fdb8 	bl	800dba0 <extractCmd>
				cmd_argval = ascii2hex_num(cmd_arg);
 800e030:	a824      	add	r0, sp, #144	; 0x90
 800e032:	f7ff fdd5 	bl	800dbe0 <ascii2hex_num>
				if(strcmp("setcoef", (const char*)cmd_type) == 0) {
 800e036:	a926      	add	r1, sp, #152	; 0x98
				cmd_argval = ascii2hex_num(cmd_arg);
 800e038:	0006      	movs	r6, r0
				if(strcmp("setcoef", (const char*)cmd_type) == 0) {
 800e03a:	4878      	ldr	r0, [pc, #480]	; (800e21c <main+0x5e8>)
 800e03c:	f7f2 f864 	bl	8000108 <strcmp>
 800e040:	2800      	cmp	r0, #0
 800e042:	d121      	bne.n	800e088 <main+0x454>
					if (cmd_argval >= 30 && cmd_argval <= 200) {
 800e044:	0033      	movs	r3, r6
 800e046:	3b1e      	subs	r3, #30
 800e048:	2baa      	cmp	r3, #170	; 0xaa
 800e04a:	d81a      	bhi.n	800e082 <main+0x44e>
						if ((FLASH->PECR & FLASH_PECR_PELOCK) != 0)
 800e04c:	4b74      	ldr	r3, [pc, #464]	; (800e220 <main+0x5ec>)
 800e04e:	685a      	ldr	r2, [r3, #4]
 800e050:	07d2      	lsls	r2, r2, #31
 800e052:	d503      	bpl.n	800e05c <main+0x428>
							FLASH->PEKEYR = FLASH_PEKEY1;
 800e054:	4a73      	ldr	r2, [pc, #460]	; (800e224 <main+0x5f0>)
 800e056:	60da      	str	r2, [r3, #12]
							FLASH->PEKEYR = FLASH_PEKEY2;
 800e058:	4a73      	ldr	r2, [pc, #460]	; (800e228 <main+0x5f4>)
 800e05a:	60da      	str	r2, [r3, #12]
						*(uint8_t *)(DATA_EEPROM_BASE) = cmd_argval;
 800e05c:	4a73      	ldr	r2, [pc, #460]	; (800e22c <main+0x5f8>)
 800e05e:	b2f1      	uxtb	r1, r6
 800e060:	7011      	strb	r1, [r2, #0]
						FLASH->PECR |= FLASH_PECR_PELOCK;
 800e062:	2201      	movs	r2, #1
 800e064:	6858      	ldr	r0, [r3, #4]
 800e066:	4302      	orrs	r2, r0
 800e068:	605a      	str	r2, [r3, #4]
						honey_set_coef(&honey, cmd_argval);
 800e06a:	4871      	ldr	r0, [pc, #452]	; (800e230 <main+0x5fc>)
 800e06c:	f7ff f8e8 	bl	800d240 <honey_set_coef>
						status = HAL_UART_Transmit_IT(&huart1, (uint8_t*) "\r\nSet Coef Success!\r\n", \
 800e070:	2215      	movs	r2, #21
 800e072:	4970      	ldr	r1, [pc, #448]	; (800e234 <main+0x600>)
		          status = HAL_UART_Transmit_IT(&huart1, (uint8_t*) "\r\nCommand Error, Please retry.\r\n", \
 800e074:	0020      	movs	r0, r4
 800e076:	f7f7 ff37 	bl	8005ee8 <HAL_UART_Transmit_IT>
		        status = HAL_UART_Transmit(&huart1, &prompt[0], sizeof(prompt), 100);
 800e07a:	002b      	movs	r3, r5
 800e07c:	333c      	adds	r3, #60	; 0x3c
 800e07e:	7018      	strb	r0, [r3, #0]
 800e080:	e05b      	b.n	800e13a <main+0x506>
						status = HAL_UART_Transmit_IT(&huart1, (uint8_t*) "\r\nSet Coef Argument Error!\r\n", \
 800e082:	221c      	movs	r2, #28
 800e084:	496c      	ldr	r1, [pc, #432]	; (800e238 <main+0x604>)
 800e086:	e7f5      	b.n	800e074 <main+0x440>
				else if (strcmp("readcoef", (const char*)cmd_type) == 0) {
 800e088:	a926      	add	r1, sp, #152	; 0x98
 800e08a:	486c      	ldr	r0, [pc, #432]	; (800e23c <main+0x608>)
 800e08c:	f7f2 f83c 	bl	8000108 <strcmp>
 800e090:	1e01      	subs	r1, r0, #0
 800e092:	d10f      	bne.n	800e0b4 <main+0x480>
					uint8_t temp_resp[50] = {0};
 800e094:	2232      	movs	r2, #50	; 0x32
 800e096:	a829      	add	r0, sp, #164	; 0xa4
 800e098:	f000 fcd3 	bl	800ea42 <memset>
					sprintf(temp_resp, "\r\nCustomer Coefficient is %i\r\n", eepromread);
 800e09c:	4b63      	ldr	r3, [pc, #396]	; (800e22c <main+0x5f8>)
 800e09e:	4968      	ldr	r1, [pc, #416]	; (800e240 <main+0x60c>)
 800e0a0:	681a      	ldr	r2, [r3, #0]
					sprintf(temp_resp, "\r\nPM2.5 concentration is %i ug\r\n", honey.pm2_5);
 800e0a2:	a829      	add	r0, sp, #164	; 0xa4
 800e0a4:	f000 fcd6 	bl	800ea54 <siprintf>
						strlen(temp_resp));
 800e0a8:	a829      	add	r0, sp, #164	; 0xa4
 800e0aa:	f7f2 f837 	bl	800011c <strlen>
					status = HAL_UART_Transmit_IT(&huart1, (uint8_t*) temp_resp, \
 800e0ae:	a929      	add	r1, sp, #164	; 0xa4
 800e0b0:	b282      	uxth	r2, r0
 800e0b2:	e7df      	b.n	800e074 <main+0x440>
				else if (strcmp("watchpm", (const char*)cmd_type) == 0) {
 800e0b4:	a926      	add	r1, sp, #152	; 0x98
 800e0b6:	4863      	ldr	r0, [pc, #396]	; (800e244 <main+0x610>)
 800e0b8:	f7f2 f826 	bl	8000108 <strcmp>
 800e0bc:	1e01      	subs	r1, r0, #0
 800e0be:	d108      	bne.n	800e0d2 <main+0x49e>
					uint8_t temp_resp[50] = {0};
 800e0c0:	2232      	movs	r2, #50	; 0x32
 800e0c2:	a829      	add	r0, sp, #164	; 0xa4
 800e0c4:	f000 fcbd 	bl	800ea42 <memset>
					sprintf(temp_resp, "\r\nPM2.5 concentration is %i ug\r\n", honey.pm2_5);
 800e0c8:	4b59      	ldr	r3, [pc, #356]	; (800e230 <main+0x5fc>)
 800e0ca:	495f      	ldr	r1, [pc, #380]	; (800e248 <main+0x614>)
 800e0cc:	3380      	adds	r3, #128	; 0x80
 800e0ce:	881a      	ldrh	r2, [r3, #0]
 800e0d0:	e7e7      	b.n	800e0a2 <main+0x46e>
				else if (strcmp("measure", (const char*)cmd_type) == 0) {
 800e0d2:	a926      	add	r1, sp, #152	; 0x98
 800e0d4:	485d      	ldr	r0, [pc, #372]	; (800e24c <main+0x618>)
 800e0d6:	f7f2 f817 	bl	8000108 <strcmp>
 800e0da:	1e07      	subs	r7, r0, #0
 800e0dc:	d141      	bne.n	800e162 <main+0x52e>
					HAL_UART_Transmit_IT(&huart1, (uint8_t*) "\r\nStarting sensor..., measuring...\r\n",
 800e0de:	2224      	movs	r2, #36	; 0x24
 800e0e0:	495b      	ldr	r1, [pc, #364]	; (800e250 <main+0x61c>)
 800e0e2:	0020      	movs	r0, r4
 800e0e4:	f7f7 ff00 	bl	8005ee8 <HAL_UART_Transmit_IT>
					honey_start(&honey);
 800e0e8:	4e51      	ldr	r6, [pc, #324]	; (800e230 <main+0x5fc>)
 800e0ea:	0030      	movs	r0, r6
 800e0ec:	f7fe ff9e 	bl	800d02c <honey_start>
					HAL_Delay(HONEY_WARMUP_DURATION);
 800e0f0:	4858      	ldr	r0, [pc, #352]	; (800e254 <main+0x620>)
 800e0f2:	f000 f8c3 	bl	800e27c <HAL_Delay>
					HAL_UART_Abort(&huart1); // stop any interrupt on uart1
 800e0f6:	0020      	movs	r0, r4
 800e0f8:	f7f7 ffe8 	bl	80060cc <HAL_UART_Abort>
					if (honey_read(&honey) == CMD_RESP_SUCCESS) {
 800e0fc:	0030      	movs	r0, r6
 800e0fe:	f7fe ffd1 	bl	800d0a4 <honey_read>
 800e102:	2801      	cmp	r0, #1
 800e104:	d12a      	bne.n	800e15c <main+0x528>
						uint8_t temp_resp[50] = {0};
 800e106:	2232      	movs	r2, #50	; 0x32
 800e108:	0039      	movs	r1, r7
 800e10a:	a829      	add	r0, sp, #164	; 0xa4
 800e10c:	f000 fc99 	bl	800ea42 <memset>
						pm2_5 = honey.pm2_5;
 800e110:	0033      	movs	r3, r6
 800e112:	3380      	adds	r3, #128	; 0x80
 800e114:	781a      	ldrb	r2, [r3, #0]
						if (pm2_5 == 191) {
 800e116:	2abf      	cmp	r2, #191	; 0xbf
 800e118:	d100      	bne.n	800e11c <main+0x4e8>
							pm2_5 = 190;
 800e11a:	3a01      	subs	r2, #1
						sprintf(temp_resp, "\r\nMeauring completed. PM2.5 is %i ug\r\n", pm2_5);
 800e11c:	494e      	ldr	r1, [pc, #312]	; (800e258 <main+0x624>)
 800e11e:	a829      	add	r0, sp, #164	; 0xa4
 800e120:	f000 fc98 	bl	800ea54 <siprintf>
						HAL_UART_Transmit_IT(&huart1, (uint8_t*) temp_resp,	strlen(temp_resp));
 800e124:	a829      	add	r0, sp, #164	; 0xa4
 800e126:	f7f1 fff9 	bl	800011c <strlen>
 800e12a:	a929      	add	r1, sp, #164	; 0xa4
 800e12c:	b282      	uxth	r2, r0
						HAL_UART_Transmit_IT(&huart1, (uint8_t*) "Sensor Error!\r\n", \
 800e12e:	0020      	movs	r0, r4
 800e130:	f7f7 feda 	bl	8005ee8 <HAL_UART_Transmit_IT>
					honey_stop(&honey);
 800e134:	0030      	movs	r0, r6
 800e136:	f7fe ff97 	bl	800d068 <honey_stop>
		      cmdBuff.count = 0;
 800e13a:	2100      	movs	r1, #0
		      memset(&cmdBuff.buff, 0x00, sizeof(cmdBuff.buff));
 800e13c:	4e35      	ldr	r6, [pc, #212]	; (800e214 <main+0x5e0>)
		      cmdBuff.count = 0;
 800e13e:	4b32      	ldr	r3, [pc, #200]	; (800e208 <main+0x5d4>)
		      memset(&cmdBuff.buff, 0x00, sizeof(cmdBuff.buff));
 800e140:	2250      	movs	r2, #80	; 0x50
 800e142:	0030      	movs	r0, r6
		      cmdBuff.count = 0;
 800e144:	7099      	strb	r1, [r3, #2]
		      cmdBuff.cmdReady = 0;
 800e146:	7059      	strb	r1, [r3, #1]
		      memset(&cmdBuff.buff, 0x00, sizeof(cmdBuff.buff));
 800e148:	f000 fc7b 	bl	800ea42 <memset>
		      status = HAL_UART_Receive_IT(&huart1, &cmdBuff.buff[0], sizeof(uint8_t));
 800e14c:	2201      	movs	r2, #1
 800e14e:	0031      	movs	r1, r6
 800e150:	0020      	movs	r0, r4
 800e152:	f7f7 ff07 	bl	8005f64 <HAL_UART_Receive_IT>
 800e156:	353c      	adds	r5, #60	; 0x3c
 800e158:	7028      	strb	r0, [r5, #0]
 800e15a:	e600      	b.n	800dd5e <main+0x12a>
						HAL_UART_Transmit_IT(&huart1, (uint8_t*) "Sensor Error!\r\n", \
 800e15c:	220f      	movs	r2, #15
 800e15e:	493f      	ldr	r1, [pc, #252]	; (800e25c <main+0x628>)
 800e160:	e7e5      	b.n	800e12e <main+0x4fa>
				else if (strcmp("check", (const char*)cmd_type) == 0) {
 800e162:	a926      	add	r1, sp, #152	; 0x98
 800e164:	483e      	ldr	r0, [pc, #248]	; (800e260 <main+0x62c>)
 800e166:	f7f1 ffcf 	bl	8000108 <strcmp>
 800e16a:	2800      	cmp	r0, #0
 800e16c:	d10d      	bne.n	800e18a <main+0x556>
					if (honey_stop(&honey) == CMD_RESP_SUCCESS) {
 800e16e:	4830      	ldr	r0, [pc, #192]	; (800e230 <main+0x5fc>)
 800e170:	f7fe ff7a 	bl	800d068 <honey_stop>
 800e174:	2801      	cmp	r0, #1
 800e176:	d105      	bne.n	800e184 <main+0x550>
						HAL_UART_Transmit_IT(&huart1, (uint8_t*) "\r\nSensor OK.\r\n",	strlen("\r\nSensor OK.\r\n"));
 800e178:	220e      	movs	r2, #14
 800e17a:	493a      	ldr	r1, [pc, #232]	; (800e264 <main+0x630>)
						HAL_UART_Transmit_IT(&huart1, (uint8_t*) "\r\nSensor Error! Please Check Connection.\r\n",	strlen("\r\nSensor Error! Please Check Connection.\r\n"));
 800e17c:	0020      	movs	r0, r4
 800e17e:	f7f7 feb3 	bl	8005ee8 <HAL_UART_Transmit_IT>
 800e182:	e7da      	b.n	800e13a <main+0x506>
 800e184:	222a      	movs	r2, #42	; 0x2a
 800e186:	4938      	ldr	r1, [pc, #224]	; (800e268 <main+0x634>)
 800e188:	e7f8      	b.n	800e17c <main+0x548>
				else if (strcmp("exit", (const char*)cmd_type) == 0) {
 800e18a:	a926      	add	r1, sp, #152	; 0x98
 800e18c:	4837      	ldr	r0, [pc, #220]	; (800e26c <main+0x638>)
 800e18e:	f7f1 ffbb 	bl	8000108 <strcmp>
 800e192:	1e06      	subs	r6, r0, #0
 800e194:	d118      	bne.n	800e1c8 <main+0x594>
					HAL_UART_Abort(&huart1); // stop interrupts
 800e196:	0020      	movs	r0, r4
 800e198:	f7f7 ff98 	bl	80060cc <HAL_UART_Abort>
					status = HAL_UART_Transmit(&huart1, (uint8_t*) "\r\nSetting Mode Exited.\r\n", \
 800e19c:	2218      	movs	r2, #24
 800e19e:	4934      	ldr	r1, [pc, #208]	; (800e270 <main+0x63c>)
 800e1a0:	2364      	movs	r3, #100	; 0x64
 800e1a2:	0020      	movs	r0, r4
 800e1a4:	f7f8 faf6 	bl	8006794 <HAL_UART_Transmit>
 800e1a8:	002b      	movs	r3, r5
					TimerStop(&SettingTimer); // stop setting mode timer
 800e1aa:	1d2f      	adds	r7, r5, #4
					status = HAL_UART_Transmit(&huart1, (uint8_t*) "\r\nSetting Mode Exited.\r\n", \
 800e1ac:	333c      	adds	r3, #60	; 0x3c
 800e1ae:	7018      	strb	r0, [r3, #0]
					TimerStop(&SettingTimer); // stop setting mode timer
 800e1b0:	0038      	movs	r0, r7
 800e1b2:	f7fe fe1f 	bl	800cdf4 <TimerStop>
					TimerReset(&SettingTimer);
 800e1b6:	0038      	movs	r0, r7
 800e1b8:	f7fe fe48 	bl	800ce4c <TimerReset>
					setting_mode = 0; // change mode to normal
 800e1bc:	002b      	movs	r3, r5
 800e1be:	333b      	adds	r3, #59	; 0x3b
 800e1c0:	701e      	strb	r6, [r3, #0]
 800e1c2:	f7ff fc71 	bl	800daa8 <LoraStartTx.part.0>
 800e1c6:	e7b8      	b.n	800e13a <main+0x506>
		          status = HAL_UART_Transmit_IT(&huart1, (uint8_t*) "\r\nCommand Error, Please retry.\r\n", \
 800e1c8:	2220      	movs	r2, #32
 800e1ca:	492a      	ldr	r1, [pc, #168]	; (800e274 <main+0x640>)
 800e1cc:	e752      	b.n	800e074 <main+0x440>
		        status = HAL_UART_Transmit(&huart1, &prompt[0], sizeof(prompt), 100);
 800e1ce:	490f      	ldr	r1, [pc, #60]	; (800e20c <main+0x5d8>)
 800e1d0:	2364      	movs	r3, #100	; 0x64
 800e1d2:	2210      	movs	r2, #16
 800e1d4:	3134      	adds	r1, #52	; 0x34
 800e1d6:	0020      	movs	r0, r4
 800e1d8:	f7f8 fadc 	bl	8006794 <HAL_UART_Transmit>
 800e1dc:	e74d      	b.n	800e07a <main+0x446>
		      if (reflect_ch) {
 800e1de:	002e      	movs	r6, r5
 800e1e0:	363a      	adds	r6, #58	; 0x3a
 800e1e2:	7833      	ldrb	r3, [r6, #0]
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d100      	bne.n	800e1ea <main+0x5b6>
 800e1e8:	e5b9      	b.n	800dd5e <main+0x12a>
		        status = HAL_UART_Transmit_IT(&huart1, &cmdBuff.buff[cmdBuff.count - 1], sizeof(uint8_t));
 800e1ea:	788b      	ldrb	r3, [r1, #2]
 800e1ec:	2201      	movs	r2, #1
 800e1ee:	3302      	adds	r3, #2
 800e1f0:	1859      	adds	r1, r3, r1
 800e1f2:	0020      	movs	r0, r4
 800e1f4:	f7f7 fe78 	bl	8005ee8 <HAL_UART_Transmit_IT>
 800e1f8:	353c      	adds	r5, #60	; 0x3c
 800e1fa:	7028      	strb	r0, [r5, #0]
		        reflect_ch = 0;
 800e1fc:	7037      	strb	r7, [r6, #0]
 800e1fe:	e5ae      	b.n	800dd5e <main+0x12a>
 800e200:	080101ec 	.word	0x080101ec
 800e204:	20001413 	.word	0x20001413
 800e208:	200017a8 	.word	0x200017a8
 800e20c:	200001bc 	.word	0x200001bc
 800e210:	200013d8 	.word	0x200013d8
 800e214:	200017ab 	.word	0x200017ab
 800e218:	08010222 	.word	0x08010222
 800e21c:	08010224 	.word	0x08010224
 800e220:	40022000 	.word	0x40022000
 800e224:	89abcdef 	.word	0x89abcdef
 800e228:	02030405 	.word	0x02030405
 800e22c:	08080000 	.word	0x08080000
 800e230:	200017fc 	.word	0x200017fc
 800e234:	0801022c 	.word	0x0801022c
 800e238:	08010242 	.word	0x08010242
 800e23c:	0801025f 	.word	0x0801025f
 800e240:	08010268 	.word	0x08010268
 800e244:	08010287 	.word	0x08010287
 800e248:	0801028f 	.word	0x0801028f
 800e24c:	080102b0 	.word	0x080102b0
 800e250:	080102b8 	.word	0x080102b8
 800e254:	00002710 	.word	0x00002710
 800e258:	080102dd 	.word	0x080102dd
 800e25c:	08010304 	.word	0x08010304
 800e260:	08010314 	.word	0x08010314
 800e264:	0801031a 	.word	0x0801031a
 800e268:	08010329 	.word	0x08010329
 800e26c:	08010354 	.word	0x08010354
 800e270:	08010359 	.word	0x08010359
 800e274:	08010372 	.word	0x08010372

0800e278 <HAL_InitTick>:
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Return function status */
  return HAL_OK;
}
 800e278:	2000      	movs	r0, #0
 800e27a:	4770      	bx	lr

0800e27c <HAL_Delay>:
  * @brief This function provides delay (in ms)
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
void HAL_Delay(__IO uint32_t Delay)
{
 800e27c:	b507      	push	{r0, r1, r2, lr}
 800e27e:	9001      	str	r0, [sp, #4]
  HW_RTC_DelayMs(Delay);   /* based on RTC */
 800e280:	9801      	ldr	r0, [sp, #4]
 800e282:	f7ff fa51 	bl	800d728 <HW_RTC_DelayMs>
}
 800e286:	bd07      	pop	{r0, r1, r2, pc}

0800e288 <HAL_MspInit>:
  * @brief  Initializes the MSP.
  * @retval None
  */
void HAL_MspInit(void)
{
  __HAL_RCC_PWR_CLK_ENABLE();
 800e288:	2380      	movs	r3, #128	; 0x80
 800e28a:	4a0b      	ldr	r2, [pc, #44]	; (800e2b8 <HAL_MspInit+0x30>)
 800e28c:	055b      	lsls	r3, r3, #21
 800e28e:	6b91      	ldr	r1, [r2, #56]	; 0x38
{
 800e290:	b510      	push	{r4, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 800e292:	430b      	orrs	r3, r1
 800e294:	6393      	str	r3, [r2, #56]	; 0x38

  /* Disable the Power Voltage Detector */
  HAL_PWR_DisablePVD();
 800e296:	f7f6 fc09 	bl	8004aac <HAL_PWR_DisablePVD>

  /* Enables the Ultra Low Power mode */
  HAL_PWREx_EnableUltraLowPower();
 800e29a:	f7f6 fc19 	bl	8004ad0 <HAL_PWREx_EnableUltraLowPower>

  __HAL_FLASH_SLEEP_POWERDOWN_ENABLE();
 800e29e:	2108      	movs	r1, #8
 800e2a0:	4b06      	ldr	r3, [pc, #24]	; (800e2bc <HAL_MspInit+0x34>)
 800e2a2:	681a      	ldr	r2, [r3, #0]
 800e2a4:	430a      	orrs	r2, r1
 800e2a6:	601a      	str	r2, [r3, #0]

  /*In debug mode, e.g. when DBGMCU is activated, Arm core has always clocks
   * And will not wait that the FLACH is ready to be read. It can miss in this
   * case the first instruction. To overcome this issue, the flash remain clcoked during sleep mode
   */
  DBG(__HAL_FLASH_SLEEP_POWERDOWN_DISABLE(););
 800e2a8:	681a      	ldr	r2, [r3, #0]
 800e2aa:	438a      	bics	r2, r1
 800e2ac:	601a      	str	r2, [r3, #0]

#ifdef ENABLE_FAST_WAKEUP
  /*Enable fast wakeUp*/
  HAL_PWREx_EnableFastWakeUp();
 800e2ae:	f7f6 fc05 	bl	8004abc <HAL_PWREx_EnableFastWakeUp>
#else
  HAL_PWREx_DisableFastWakeUp();
#endif

  HW_GpioInit();
 800e2b2:	f000 f853 	bl	800e35c <HW_GpioInit>
}
 800e2b6:	bd10      	pop	{r4, pc}
 800e2b8:	40021000 	.word	0x40021000
 800e2bc:	40022000 	.word	0x40022000

0800e2c0 <HAL_RTC_MspInit>:
  *        order to modify the RTC Clock source, as consequence RTC registers (including
  *        the backup registers) and RCC_CSR register are set to their reset values.
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef *hrtc)
{
 800e2c0:	b500      	push	{lr}
 800e2c2:	b099      	sub	sp, #100	; 0x64
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800e2c4:	2234      	movs	r2, #52	; 0x34
 800e2c6:	2100      	movs	r1, #0
 800e2c8:	a80b      	add	r0, sp, #44	; 0x2c
 800e2ca:	f000 fbba 	bl	800ea42 <memset>
  RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct = {0};
 800e2ce:	2224      	movs	r2, #36	; 0x24
 800e2d0:	2100      	movs	r1, #0
 800e2d2:	a801      	add	r0, sp, #4
 800e2d4:	f000 fbb5 	bl	800ea42 <memset>

  /*##-1- Configue the RTC clock soucre ######################################*/
  /* -a- Enable LSE Oscillator */
  RCC_OscInitStruct.OscillatorType =  RCC_OSCILLATORTYPE_LSE;
 800e2d8:	2304      	movs	r3, #4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800e2da:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.OscillatorType =  RCC_OSCILLATORTYPE_LSE;
 800e2dc:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800e2de:	33fc      	adds	r3, #252	; 0xfc
 800e2e0:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800e2e2:	f7f6 fc3f 	bl	8004b64 <HAL_RCC_OscConfig>
 800e2e6:	2800      	cmp	r0, #0
 800e2e8:	d001      	beq.n	800e2ee <HAL_RTC_MspInit+0x2e>
  {
    Error_Handler();
 800e2ea:	f7ff f817 	bl	800d31c <Error_Handler>
  }

  /* -b- Select LSI as RTC clock source */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800e2ee:	2320      	movs	r3, #32
 800e2f0:	9301      	str	r3, [sp, #4]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800e2f2:	2380      	movs	r3, #128	; 0x80
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800e2f4:	a801      	add	r0, sp, #4
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800e2f6:	025b      	lsls	r3, r3, #9
 800e2f8:	9302      	str	r3, [sp, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800e2fa:	f7f6 ff97 	bl	800522c <HAL_RCCEx_PeriphCLKConfig>
 800e2fe:	2800      	cmp	r0, #0
 800e300:	d001      	beq.n	800e306 <HAL_RTC_MspInit+0x46>
  {
    Error_Handler();
 800e302:	f7ff f80b 	bl	800d31c <Error_Handler>
  }

  /*##-2- Enable the RTC peripheral Clock ####################################*/
  /* Enable RTC Clock */
  __HAL_RCC_RTC_ENABLE();
 800e306:	2380      	movs	r3, #128	; 0x80
 800e308:	4a07      	ldr	r2, [pc, #28]	; (800e328 <HAL_RTC_MspInit+0x68>)
 800e30a:	02db      	lsls	r3, r3, #11
 800e30c:	6d11      	ldr	r1, [r2, #80]	; 0x50

  /*##-3- Configure the NVIC for RTC Alarm ###################################*/
  HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0x0, 0);
 800e30e:	2002      	movs	r0, #2
  __HAL_RCC_RTC_ENABLE();
 800e310:	430b      	orrs	r3, r1
 800e312:	6513      	str	r3, [r2, #80]	; 0x50
  HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0x0, 0);
 800e314:	2200      	movs	r2, #0
 800e316:	0011      	movs	r1, r2
 800e318:	f7f6 f9aa 	bl	8004670 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 800e31c:	2002      	movs	r0, #2
 800e31e:	f7f6 f9d1 	bl	80046c4 <HAL_NVIC_EnableIRQ>
}
 800e322:	b019      	add	sp, #100	; 0x64
 800e324:	bd00      	pop	{pc}
 800e326:	46c0      	nop			; (mov r8, r8)
 800e328:	40021000 	.word	0x40021000

0800e32c <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  hrtc: RTC handle
  * @retval None
  */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 800e32c:	b510      	push	{r4, lr}
  TimerIrqHandler();
 800e32e:	f7fe fd1f 	bl	800cd70 <TimerIrqHandler>
}
 800e332:	bd10      	pop	{r4, pc}

0800e334 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800e334:	b510      	push	{r4, lr}
	HW_GPIO_IrqHandler(GPIO_Pin);
 800e336:	f7ff f87d 	bl	800d434 <HW_GPIO_IrqHandler>
}
 800e33a:	bd10      	pop	{r4, pc}

0800e33c <MSP_GetIRQn>:
  * @param  GPIO_Pin: Specifies the pins connected to the EXTI line.
  * @retval IRQ number
  */
IRQn_Type MSP_GetIRQn(uint16_t GPIO_Pin)
{
  switch (GPIO_Pin)
 800e33c:	3801      	subs	r0, #1
{
 800e33e:	b500      	push	{lr}
  switch (GPIO_Pin)
 800e340:	2807      	cmp	r0, #7
 800e342:	d807      	bhi.n	800e354 <MSP_GetIRQn+0x18>
 800e344:	f7f1 fef2 	bl	800012c <__gnu_thumb1_case_uqi>
 800e348:	04060808 	.word	0x04060808
 800e34c:	04060606 	.word	0x04060606
    case GPIO_PIN_0:
    case GPIO_PIN_1:
      return EXTI0_1_IRQn;
    case GPIO_PIN_2:
    case GPIO_PIN_3:
      return EXTI2_3_IRQn;
 800e350:	2006      	movs	r0, #6
    case GPIO_PIN_14:
    case GPIO_PIN_15:
    default:
      return EXTI4_15_IRQn;
  }
}
 800e352:	bd00      	pop	{pc}
      return EXTI4_15_IRQn;
 800e354:	2007      	movs	r0, #7
 800e356:	e7fc      	b.n	800e352 <MSP_GetIRQn+0x16>
      return EXTI0_1_IRQn;
 800e358:	2005      	movs	r0, #5
 800e35a:	e7fa      	b.n	800e352 <MSP_GetIRQn+0x16>

0800e35c <HW_GpioInit>:
  vcom_IoDeInit();
}


void HW_GpioInit(void)
{
 800e35c:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* Configure all GPIO as analog to reduce current consumption on non used IOs */
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800e35e:	2701      	movs	r7, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800e360:	2602      	movs	r6, #2
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800e362:	2504      	movs	r5, #4
{
 800e364:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e366:	220c      	movs	r2, #12
 800e368:	2100      	movs	r1, #0
 800e36a:	a807      	add	r0, sp, #28
 800e36c:	f000 fb69 	bl	800ea42 <memset>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800e370:	2280      	movs	r2, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800e372:	4c21      	ldr	r4, [pc, #132]	; (800e3f8 <HW_GpioInit+0x9c>)

  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  /* All GPIOs except debug pins (SWCLK and SWD) */
  GPIO_InitStruct.Pin = GPIO_PIN_All & (~(GPIO_PIN_13 | GPIO_PIN_14));
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e374:	20a0      	movs	r0, #160	; 0xa0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800e376:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e378:	a905      	add	r1, sp, #20
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800e37a:	433b      	orrs	r3, r7
 800e37c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e37e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e380:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800e382:	403b      	ands	r3, r7
 800e384:	9301      	str	r3, [sp, #4]
 800e386:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800e388:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e38a:	4333      	orrs	r3, r6
 800e38c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e38e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e390:	4033      	ands	r3, r6
 800e392:	9302      	str	r3, [sp, #8]
 800e394:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800e396:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e398:	432b      	orrs	r3, r5
 800e39a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e39c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e39e:	402b      	ands	r3, r5
 800e3a0:	9303      	str	r3, [sp, #12]
 800e3a2:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800e3a4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e3a6:	4313      	orrs	r3, r2
 800e3a8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e3aa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e3ac:	4013      	ands	r3, r2
 800e3ae:	9304      	str	r3, [sp, #16]
 800e3b0:	9b04      	ldr	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800e3b2:	2303      	movs	r3, #3
 800e3b4:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_All & (~(GPIO_PIN_13 | GPIO_PIN_14));
 800e3b6:	4b11      	ldr	r3, [pc, #68]	; (800e3fc <HW_GpioInit+0xa0>)
 800e3b8:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e3ba:	f7f6 faa5 	bl	8004908 <HAL_GPIO_Init>

  /* All GPIOs */
  GPIO_InitStruct.Pin = GPIO_PIN_All;
 800e3be:	4b10      	ldr	r3, [pc, #64]	; (800e400 <HW_GpioInit+0xa4>)
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e3c0:	a905      	add	r1, sp, #20
 800e3c2:	4810      	ldr	r0, [pc, #64]	; (800e404 <HW_GpioInit+0xa8>)
  GPIO_InitStruct.Pin = GPIO_PIN_All;
 800e3c4:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e3c6:	f7f6 fa9f 	bl	8004908 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e3ca:	a905      	add	r1, sp, #20
 800e3cc:	480e      	ldr	r0, [pc, #56]	; (800e408 <HW_GpioInit+0xac>)
 800e3ce:	f7f6 fa9b 	bl	8004908 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800e3d2:	a905      	add	r1, sp, #20
 800e3d4:	480d      	ldr	r0, [pc, #52]	; (800e40c <HW_GpioInit+0xb0>)
 800e3d6:	f7f6 fa97 	bl	8004908 <HAL_GPIO_Init>

  /* Disable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_DISABLE();
  __HAL_RCC_GPIOB_CLK_DISABLE();
  __HAL_RCC_GPIOC_CLK_DISABLE();
  __HAL_RCC_GPIOH_CLK_DISABLE();
 800e3da:	2280      	movs	r2, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_DISABLE();
 800e3dc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e3de:	43bb      	bics	r3, r7
 800e3e0:	62e3      	str	r3, [r4, #44]	; 0x2c
  __HAL_RCC_GPIOB_CLK_DISABLE();
 800e3e2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e3e4:	43b3      	bics	r3, r6
 800e3e6:	62e3      	str	r3, [r4, #44]	; 0x2c
  __HAL_RCC_GPIOC_CLK_DISABLE();
 800e3e8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e3ea:	43ab      	bics	r3, r5
 800e3ec:	62e3      	str	r3, [r4, #44]	; 0x2c
  __HAL_RCC_GPIOH_CLK_DISABLE();
 800e3ee:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e3f0:	4393      	bics	r3, r2
 800e3f2:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 800e3f4:	b00b      	add	sp, #44	; 0x2c
 800e3f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e3f8:	40021000 	.word	0x40021000
 800e3fc:	00009fff 	.word	0x00009fff
 800e400:	0000ffff 	.word	0x0000ffff
 800e404:	50000400 	.word	0x50000400
 800e408:	50000800 	.word	0x50000800
 800e40c:	50001c00 	.word	0x50001c00

0800e410 <SystemClock_Config>:
  *            Flash Latency(WS)              = 1
  * @retval None
  */

void SystemClock_Config(void)
{
 800e410:	b500      	push	{lr}
 800e412:	b095      	sub	sp, #84	; 0x54
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800e414:	2214      	movs	r2, #20
 800e416:	2100      	movs	r1, #0
 800e418:	a801      	add	r0, sp, #4
 800e41a:	f000 fb12 	bl	800ea42 <memset>
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800e41e:	222c      	movs	r2, #44	; 0x2c
 800e420:	2100      	movs	r1, #0
 800e422:	a807      	add	r0, sp, #28
 800e424:	f000 fb0d 	bl	800ea42 <memset>

  /* Enable HSE Oscillator and Activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_HSI;
 800e428:	2302      	movs	r3, #2
 800e42a:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSEState            = RCC_HSE_OFF;
  RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_ON;
 800e42c:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource       = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL          = RCC_PLLMUL_6;
 800e42e:	2380      	movs	r3, #128	; 0x80
 800e430:	031b      	lsls	r3, r3, #12
  RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
 800e432:	2201      	movs	r2, #1
  RCC_OscInitStruct.PLL.PLLMUL          = RCC_PLLMUL_6;
 800e434:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLDIV          = RCC_PLLDIV_3;
 800e436:	2380      	movs	r3, #128	; 0x80
  RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
 800e438:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLDIV          = RCC_PLLDIV_3;
 800e43a:	041b      	lsls	r3, r3, #16
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800e43c:	320f      	adds	r2, #15

  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800e43e:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800e440:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLDIV          = RCC_PLLDIV_3;
 800e442:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800e444:	f7f6 fb8e 	bl	8004b64 <HAL_RCC_OscConfig>
 800e448:	2800      	cmp	r0, #0
 800e44a:	d001      	beq.n	800e450 <SystemClock_Config+0x40>
  {
    Error_Handler();
 800e44c:	f7fe ff66 	bl	800d31c <Error_Handler>
  }

  /* Set Voltage scale1 as MCU will run at 32MHz */
  __HAL_RCC_PWR_CLK_ENABLE();
 800e450:	2380      	movs	r3, #128	; 0x80
 800e452:	4a11      	ldr	r2, [pc, #68]	; (800e498 <SystemClock_Config+0x88>)
 800e454:	055b      	lsls	r3, r3, #21
 800e456:	6b91      	ldr	r1, [r2, #56]	; 0x38
 800e458:	430b      	orrs	r3, r1
 800e45a:	6393      	str	r3, [r2, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800e45c:	4b0f      	ldr	r3, [pc, #60]	; (800e49c <SystemClock_Config+0x8c>)
 800e45e:	4910      	ldr	r1, [pc, #64]	; (800e4a0 <SystemClock_Config+0x90>)
 800e460:	681a      	ldr	r2, [r3, #0]
 800e462:	4011      	ands	r1, r2
 800e464:	2280      	movs	r2, #128	; 0x80
 800e466:	0112      	lsls	r2, r2, #4
 800e468:	430a      	orrs	r2, r1
 800e46a:	601a      	str	r2, [r3, #0]

  /* Poll VOSF bit of in PWR_CSR. Wait until it is reset to 0 */
  while (__HAL_PWR_GET_FLAG(PWR_FLAG_VOS) != RESET) {};
 800e46c:	2110      	movs	r1, #16
 800e46e:	001a      	movs	r2, r3
 800e470:	6853      	ldr	r3, [r2, #4]
 800e472:	400b      	ands	r3, r1
 800e474:	d1fc      	bne.n	800e470 <SystemClock_Config+0x60>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
  clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 800e476:	220f      	movs	r2, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800e478:	2101      	movs	r1, #1
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 800e47a:	9201      	str	r2, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800e47c:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800e47e:	3a0c      	subs	r2, #12
 800e480:	9202      	str	r2, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800e482:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800e484:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800e486:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800e488:	f7f6 fdf8 	bl	800507c <HAL_RCC_ClockConfig>
 800e48c:	2800      	cmp	r0, #0
 800e48e:	d001      	beq.n	800e494 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800e490:	f7fe ff44 	bl	800d31c <Error_Handler>
  }
}
 800e494:	b015      	add	sp, #84	; 0x54
 800e496:	bd00      	pop	{pc}
 800e498:	40021000 	.word	0x40021000
 800e49c:	40007000 	.word	0x40007000
 800e4a0:	ffffe7ff 	.word	0xffffe7ff

0800e4a4 <HW_GetRandomSeed>:
  * @param None
  * @retval see
  */
uint32_t HW_GetRandomSeed(void)
{
  return ((*(uint32_t *)ID1) ^ (*(uint32_t *)ID2) ^ (*(uint32_t *)ID3));
 800e4a4:	4b04      	ldr	r3, [pc, #16]	; (800e4b8 <HW_GetRandomSeed+0x14>)
 800e4a6:	6818      	ldr	r0, [r3, #0]
 800e4a8:	4b04      	ldr	r3, [pc, #16]	; (800e4bc <HW_GetRandomSeed+0x18>)
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	4058      	eors	r0, r3
 800e4ae:	4b04      	ldr	r3, [pc, #16]	; (800e4c0 <HW_GetRandomSeed+0x1c>)
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	4058      	eors	r0, r3
}
 800e4b4:	4770      	bx	lr
 800e4b6:	46c0      	nop			; (mov r8, r8)
 800e4b8:	1ff80050 	.word	0x1ff80050
 800e4bc:	1ff80054 	.word	0x1ff80054
 800e4c0:	1ff80064 	.word	0x1ff80064

0800e4c4 <HW_GetUniqueId>:
  * @param unique ID
  * @retval none
  */
void HW_GetUniqueId(uint8_t *id)
{
  id[7] = ((*(uint32_t *)ID1) + (*(uint32_t *)ID3)) >> 24;
 800e4c4:	4911      	ldr	r1, [pc, #68]	; (800e50c <HW_GetUniqueId+0x48>)
 800e4c6:	4a12      	ldr	r2, [pc, #72]	; (800e510 <HW_GetUniqueId+0x4c>)
 800e4c8:	680b      	ldr	r3, [r1, #0]
{
 800e4ca:	b510      	push	{r4, lr}
  id[7] = ((*(uint32_t *)ID1) + (*(uint32_t *)ID3)) >> 24;
 800e4cc:	6814      	ldr	r4, [r2, #0]
 800e4ce:	191b      	adds	r3, r3, r4
 800e4d0:	0e1b      	lsrs	r3, r3, #24
 800e4d2:	71c3      	strb	r3, [r0, #7]
  id[6] = ((*(uint32_t *)ID1) + (*(uint32_t *)ID3)) >> 16;
 800e4d4:	6814      	ldr	r4, [r2, #0]
 800e4d6:	680b      	ldr	r3, [r1, #0]
 800e4d8:	191b      	adds	r3, r3, r4
 800e4da:	0c1b      	lsrs	r3, r3, #16
 800e4dc:	7183      	strb	r3, [r0, #6]
  id[5] = ((*(uint32_t *)ID1) + (*(uint32_t *)ID3)) >> 8;
 800e4de:	6814      	ldr	r4, [r2, #0]
 800e4e0:	680b      	ldr	r3, [r1, #0]
 800e4e2:	191b      	adds	r3, r3, r4
 800e4e4:	0a1b      	lsrs	r3, r3, #8
 800e4e6:	7143      	strb	r3, [r0, #5]
  id[4] = ((*(uint32_t *)ID1) + (*(uint32_t *)ID3));
 800e4e8:	6812      	ldr	r2, [r2, #0]
 800e4ea:	680b      	ldr	r3, [r1, #0]
 800e4ec:	189b      	adds	r3, r3, r2
 800e4ee:	7103      	strb	r3, [r0, #4]
  id[3] = ((*(uint32_t *)ID2)) >> 24;
 800e4f0:	4b08      	ldr	r3, [pc, #32]	; (800e514 <HW_GetUniqueId+0x50>)
 800e4f2:	681a      	ldr	r2, [r3, #0]
 800e4f4:	0e12      	lsrs	r2, r2, #24
 800e4f6:	70c2      	strb	r2, [r0, #3]
  id[2] = ((*(uint32_t *)ID2)) >> 16;
 800e4f8:	681a      	ldr	r2, [r3, #0]
 800e4fa:	0c12      	lsrs	r2, r2, #16
 800e4fc:	7082      	strb	r2, [r0, #2]
  id[1] = ((*(uint32_t *)ID2)) >> 8;
 800e4fe:	681a      	ldr	r2, [r3, #0]
 800e500:	0a12      	lsrs	r2, r2, #8
 800e502:	7042      	strb	r2, [r0, #1]
  id[0] = ((*(uint32_t *)ID2));
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	7003      	strb	r3, [r0, #0]
}
 800e508:	bd10      	pop	{r4, pc}
 800e50a:	46c0      	nop			; (mov r8, r8)
 800e50c:	1ff80050 	.word	0x1ff80050
 800e510:	1ff80064 	.word	0x1ff80064
 800e514:	1ff80054 	.word	0x1ff80054

0800e518 <HW_AdcInit>:
  * @param none
  * @retval none
  */
void HW_AdcInit(void)
{
  if (AdcInitialized == false)
 800e518:	4814      	ldr	r0, [pc, #80]	; (800e56c <HW_AdcInit+0x54>)
{
 800e51a:	b510      	push	{r4, lr}
  if (AdcInitialized == false)
 800e51c:	7843      	ldrb	r3, [r0, #1]
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d122      	bne.n	800e568 <HW_AdcInit+0x50>
  {
    AdcInitialized = true;
 800e522:	2201      	movs	r2, #1

    hadc.Init.OversamplingMode      = DISABLE;

    hadc.Init.ClockPrescaler        = ADC_CLOCK_SYNC_PCLK_DIV4;
    hadc.Init.LowPowerAutoPowerOff  = DISABLE;
    hadc.Init.LowPowerFrequencyMode = ENABLE;
 800e524:	6382      	str	r2, [r0, #56]	; 0x38
    hadc.Init.LowPowerAutoWait      = DISABLE;

    hadc.Init.Resolution            = ADC_RESOLUTION_12B;
    hadc.Init.SamplingTime          = ADC_SAMPLETIME_160CYCLES_5;
    hadc.Init.ScanConvMode          = ADC_SCAN_DIRECTION_FORWARD;
 800e526:	6142      	str	r2, [r0, #20]
    AdcInitialized = true;
 800e528:	7042      	strb	r2, [r0, #1]
    hadc.Init.DataAlign             = ADC_DATAALIGN_RIGHT;
    hadc.Init.ContinuousConvMode    = DISABLE;
 800e52a:	1d42      	adds	r2, r0, #5
 800e52c:	77d3      	strb	r3, [r2, #31]
    hadc.Init.DiscontinuousConvMode = DISABLE;
 800e52e:	1d82      	adds	r2, r0, #6
 800e530:	77d3      	strb	r3, [r2, #31]
    hadc.Init.ExternalTrigConvEdge  = ADC_EXTERNALTRIGCONVEDGE_NONE;
    hadc.Init.EOCSelection          = ADC_EOC_SINGLE_CONV;
 800e532:	2204      	movs	r2, #4
    hadc.Instance  = ADC1;
 800e534:	490e      	ldr	r1, [pc, #56]	; (800e570 <HW_AdcInit+0x58>)
    hadc.Init.EOCSelection          = ADC_EOC_SINGLE_CONV;
 800e536:	6182      	str	r2, [r0, #24]
    hadc.Instance  = ADC1;
 800e538:	6041      	str	r1, [r0, #4]
    hadc.Init.ClockPrescaler        = ADC_CLOCK_SYNC_PCLK_DIV4;
 800e53a:	2180      	movs	r1, #128	; 0x80
    hadc.Init.DMAContinuousRequests = DISABLE;
 800e53c:	0002      	movs	r2, r0
    hadc.Init.ClockPrescaler        = ADC_CLOCK_SYNC_PCLK_DIV4;
 800e53e:	0609      	lsls	r1, r1, #24
 800e540:	6081      	str	r1, [r0, #8]
    hadc.Init.SamplingTime          = ADC_SAMPLETIME_160CYCLES_5;
 800e542:	2107      	movs	r1, #7
    hadc.Init.DMAContinuousRequests = DISABLE;
 800e544:	3230      	adds	r2, #48	; 0x30
    hadc.Init.OversamplingMode      = DISABLE;
 800e546:	6403      	str	r3, [r0, #64]	; 0x40
    hadc.Init.LowPowerAutoPowerOff  = DISABLE;
 800e548:	6203      	str	r3, [r0, #32]
    hadc.Init.LowPowerAutoWait      = DISABLE;
 800e54a:	61c3      	str	r3, [r0, #28]
    hadc.Init.Resolution            = ADC_RESOLUTION_12B;
 800e54c:	60c3      	str	r3, [r0, #12]
    hadc.Init.DataAlign             = ADC_DATAALIGN_RIGHT;
 800e54e:	6103      	str	r3, [r0, #16]
    hadc.Init.ExternalTrigConvEdge  = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800e550:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc.Init.DMAContinuousRequests = DISABLE;
 800e552:	7013      	strb	r3, [r2, #0]

    ADCCLK_ENABLE();
 800e554:	2380      	movs	r3, #128	; 0x80
 800e556:	4a07      	ldr	r2, [pc, #28]	; (800e574 <HW_AdcInit+0x5c>)
    hadc.Init.SamplingTime          = ADC_SAMPLETIME_160CYCLES_5;
 800e558:	63c1      	str	r1, [r0, #60]	; 0x3c
    ADCCLK_ENABLE();
 800e55a:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800e55c:	009b      	lsls	r3, r3, #2
 800e55e:	430b      	orrs	r3, r1
 800e560:	6353      	str	r3, [r2, #52]	; 0x34


    HAL_ADC_Init(&hadc);
 800e562:	3004      	adds	r0, #4
 800e564:	f7f5 fe7a 	bl	800425c <HAL_ADC_Init>

  }
}
 800e568:	bd10      	pop	{r4, pc}
 800e56a:	46c0      	nop			; (mov r8, r8)
 800e56c:	20001470 	.word	0x20001470
 800e570:	40012400 	.word	0x40012400
 800e574:	40021000 	.word	0x40021000

0800e578 <HW_Init>:
{
 800e578:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (McuInitialized == false)
 800e57a:	4c10      	ldr	r4, [pc, #64]	; (800e5bc <HW_Init+0x44>)
 800e57c:	7825      	ldrb	r5, [r4, #0]
 800e57e:	2d00      	cmp	r5, #0
 800e580:	d11b      	bne.n	800e5ba <HW_Init+0x42>
    HW_AdcInit();
 800e582:	f7ff ffc9 	bl	800e518 <HW_AdcInit>
    Radio.IoInit();
 800e586:	4b0e      	ldr	r3, [pc, #56]	; (800e5c0 <HW_Init+0x48>)
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	9301      	str	r3, [sp, #4]
 800e58c:	4798      	blx	r3
    HW_SPI_Init();
 800e58e:	f7ff f993 	bl	800d8b8 <HW_SPI_Init>
    HW_RTC_Init();
 800e592:	f7ff f8e9 	bl	800d768 <HW_RTC_Init>
    TraceInit();
 800e596:	f7fe fcb1 	bl	800cefc <TraceInit>
    BSP_sensor_Init();
 800e59a:	f7fe fd45 	bl	800d028 <BSP_sensor_Init>
    BSP_LED_Init(LED1);
 800e59e:	0028      	movs	r0, r5
 800e5a0:	f7f4 f8c2 	bl	8002728 <BSP_LED_Init>
    BSP_LED_Init(LED2);
 800e5a4:	2001      	movs	r0, #1
 800e5a6:	f7f4 f8bf 	bl	8002728 <BSP_LED_Init>
    BSP_LED_Init(LED3);
 800e5aa:	2002      	movs	r0, #2
 800e5ac:	f7f4 f8bc 	bl	8002728 <BSP_LED_Init>
    BSP_LED_Init(LED4);
 800e5b0:	2003      	movs	r0, #3
 800e5b2:	f7f4 f8b9 	bl	8002728 <BSP_LED_Init>
    McuInitialized = true;
 800e5b6:	2301      	movs	r3, #1
 800e5b8:	7023      	strb	r3, [r4, #0]
}
 800e5ba:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 800e5bc:	20001470 	.word	0x20001470
 800e5c0:	0800f5a4 	.word	0x0800f5a4

0800e5c4 <HW_AdcReadChannel>:
  * @brief This function De-initializes the ADC
  * @param Channel
  * @retval Value
  */
uint16_t HW_AdcReadChannel(uint32_t Channel)
{
 800e5c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

  ADC_ChannelConfTypeDef adcConf = {0};
 800e5c6:	2208      	movs	r2, #8
 800e5c8:	2100      	movs	r1, #0
{
 800e5ca:	0007      	movs	r7, r0
  ADC_ChannelConfTypeDef adcConf = {0};
 800e5cc:	4668      	mov	r0, sp
 800e5ce:	f000 fa38 	bl	800ea42 <memset>

  uint16_t adcData = 0;

  HW_AdcInit();
 800e5d2:	f7ff ffa1 	bl	800e518 <HW_AdcInit>
  uint16_t adcData = 0;
 800e5d6:	2000      	movs	r0, #0

  if (AdcInitialized == true)
 800e5d8:	4e1d      	ldr	r6, [pc, #116]	; (800e650 <HW_AdcReadChannel+0x8c>)
 800e5da:	7873      	ldrb	r3, [r6, #1]
 800e5dc:	4283      	cmp	r3, r0
 800e5de:	d036      	beq.n	800e64e <HW_AdcReadChannel+0x8a>
  {
    /* wait the the Vrefint used by adc is set */
    while (__HAL_PWR_GET_FLAG(PWR_FLAG_VREFINTRDY) == RESET) {};
 800e5e0:	2308      	movs	r3, #8
 800e5e2:	491c      	ldr	r1, [pc, #112]	; (800e654 <HW_AdcReadChannel+0x90>)
 800e5e4:	684a      	ldr	r2, [r1, #4]
 800e5e6:	421a      	tst	r2, r3
 800e5e8:	d0fc      	beq.n	800e5e4 <HW_AdcReadChannel+0x20>

    ADCCLK_ENABLE();
 800e5ea:	2380      	movs	r3, #128	; 0x80
 800e5ec:	4d1a      	ldr	r5, [pc, #104]	; (800e658 <HW_AdcReadChannel+0x94>)
 800e5ee:	009b      	lsls	r3, r3, #2
 800e5f0:	6b6a      	ldr	r2, [r5, #52]	; 0x34

    /*calibrate ADC if any calibraiton hardware*/
    HAL_ADCEx_Calibration_Start(&hadc, ADC_SINGLE_ENDED);
 800e5f2:	1d34      	adds	r4, r6, #4
    ADCCLK_ENABLE();
 800e5f4:	4313      	orrs	r3, r2
 800e5f6:	636b      	str	r3, [r5, #52]	; 0x34
    HAL_ADCEx_Calibration_Start(&hadc, ADC_SINGLE_ENDED);
 800e5f8:	2100      	movs	r1, #0
 800e5fa:	0020      	movs	r0, r4
 800e5fc:	f7f5 ffe8 	bl	80045d0 <HAL_ADCEx_Calibration_Start>

    /* Deselects all channels*/
    adcConf.Channel = ADC_CHANNEL_MASK;
 800e600:	4b16      	ldr	r3, [pc, #88]	; (800e65c <HW_AdcReadChannel+0x98>)
    adcConf.Rank = ADC_RANK_NONE;
    HAL_ADC_ConfigChannel(&hadc, &adcConf);
 800e602:	4669      	mov	r1, sp
    adcConf.Channel = ADC_CHANNEL_MASK;
 800e604:	9300      	str	r3, [sp, #0]
    adcConf.Rank = ADC_RANK_NONE;
 800e606:	4b16      	ldr	r3, [pc, #88]	; (800e660 <HW_AdcReadChannel+0x9c>)
    HAL_ADC_ConfigChannel(&hadc, &adcConf);
 800e608:	0020      	movs	r0, r4
    adcConf.Rank = ADC_RANK_NONE;
 800e60a:	9301      	str	r3, [sp, #4]
    HAL_ADC_ConfigChannel(&hadc, &adcConf);
 800e60c:	f7f5 ff8c 	bl	8004528 <HAL_ADC_ConfigChannel>

    /* configure adc channel */
    adcConf.Channel = Channel;
    adcConf.Rank = ADC_RANK_CHANNEL_NUMBER;
 800e610:	2380      	movs	r3, #128	; 0x80
    HAL_ADC_ConfigChannel(&hadc, &adcConf);
 800e612:	4669      	mov	r1, sp
    adcConf.Rank = ADC_RANK_CHANNEL_NUMBER;
 800e614:	015b      	lsls	r3, r3, #5
    HAL_ADC_ConfigChannel(&hadc, &adcConf);
 800e616:	0020      	movs	r0, r4
    adcConf.Rank = ADC_RANK_CHANNEL_NUMBER;
 800e618:	9301      	str	r3, [sp, #4]
    adcConf.Channel = Channel;
 800e61a:	9700      	str	r7, [sp, #0]
    HAL_ADC_ConfigChannel(&hadc, &adcConf);
 800e61c:	f7f5 ff84 	bl	8004528 <HAL_ADC_ConfigChannel>

    /* Start the conversion process */
    HAL_ADC_Start(&hadc);
 800e620:	0020      	movs	r0, r4
 800e622:	f7f5 fef3 	bl	800440c <HAL_ADC_Start>

    /* Wait for the end of conversion */
    HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 800e626:	2101      	movs	r1, #1
 800e628:	0020      	movs	r0, r4
 800e62a:	4249      	negs	r1, r1
 800e62c:	f7f5 ff1a 	bl	8004464 <HAL_ADC_PollForConversion>

    /* Get the converted value of regular channel */
    adcData = HAL_ADC_GetValue(&hadc);
 800e630:	0020      	movs	r0, r4
 800e632:	f7f5 ff75 	bl	8004520 <HAL_ADC_GetValue>

    __HAL_ADC_DISABLE(&hadc) ;
 800e636:	2202      	movs	r2, #2
 800e638:	6873      	ldr	r3, [r6, #4]
    adcData = HAL_ADC_GetValue(&hadc);
 800e63a:	b280      	uxth	r0, r0
    __HAL_ADC_DISABLE(&hadc) ;
 800e63c:	6899      	ldr	r1, [r3, #8]
 800e63e:	430a      	orrs	r2, r1
 800e640:	609a      	str	r2, [r3, #8]
 800e642:	2203      	movs	r2, #3
 800e644:	601a      	str	r2, [r3, #0]

    ADCCLK_DISABLE();
 800e646:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800e648:	4a06      	ldr	r2, [pc, #24]	; (800e664 <HW_AdcReadChannel+0xa0>)
 800e64a:	4013      	ands	r3, r2
 800e64c:	636b      	str	r3, [r5, #52]	; 0x34
  }
  return adcData;
}
 800e64e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e650:	20001470 	.word	0x20001470
 800e654:	40007000 	.word	0x40007000
 800e658:	40021000 	.word	0x40021000
 800e65c:	0007ffff 	.word	0x0007ffff
 800e660:	00001001 	.word	0x00001001
 800e664:	fffffdff 	.word	0xfffffdff

0800e668 <HW_GetTemperatureLevel>:
{
 800e668:	b570      	push	{r4, r5, r6, lr}
  measuredLevel = HW_AdcReadChannel(ADC_CHANNEL_VREFINT);
 800e66a:	4812      	ldr	r0, [pc, #72]	; (800e6b4 <HW_GetTemperatureLevel+0x4c>)
 800e66c:	f7ff ffaa 	bl	800e5c4 <HW_AdcReadChannel>
    batteryLevelmV = 0;
 800e670:	2500      	movs	r5, #0
  measuredLevel = HW_AdcReadChannel(ADC_CHANNEL_VREFINT);
 800e672:	0001      	movs	r1, r0
  if (measuredLevel == 0)
 800e674:	42a8      	cmp	r0, r5
 800e676:	d006      	beq.n	800e686 <HW_GetTemperatureLevel+0x1e>
    batteryLevelmV = (((uint32_t) VDDA_VREFINT_CAL * (*VREFINT_CAL)) / measuredLevel);
 800e678:	4b0f      	ldr	r3, [pc, #60]	; (800e6b8 <HW_GetTemperatureLevel+0x50>)
 800e67a:	8818      	ldrh	r0, [r3, #0]
 800e67c:	4b0f      	ldr	r3, [pc, #60]	; (800e6bc <HW_GetTemperatureLevel+0x54>)
 800e67e:	4358      	muls	r0, r3
 800e680:	f7f1 fd72 	bl	8000168 <__udivsi3>
 800e684:	0005      	movs	r5, r0
  measuredLevel = HW_AdcReadChannel(ADC_CHANNEL_TEMPSENSOR);
 800e686:	480e      	ldr	r0, [pc, #56]	; (800e6c0 <HW_GetTemperatureLevel+0x58>)
 800e688:	f7ff ff9c 	bl	800e5c4 <HW_AdcReadChannel>
  temperatureDegreeC = COMPUTE_TEMPERATURE(measuredLevel, batteryLevelmV);
 800e68c:	4b0d      	ldr	r3, [pc, #52]	; (800e6c4 <HW_GetTemperatureLevel+0x5c>)
 800e68e:	4368      	muls	r0, r5
 800e690:	490a      	ldr	r1, [pc, #40]	; (800e6bc <HW_GetTemperatureLevel+0x54>)
 800e692:	881c      	ldrh	r4, [r3, #0]
 800e694:	f7f1 fd68 	bl	8000168 <__udivsi3>
 800e698:	1b03      	subs	r3, r0, r4
 800e69a:	2050      	movs	r0, #80	; 0x50
 800e69c:	4358      	muls	r0, r3
 800e69e:	4b0a      	ldr	r3, [pc, #40]	; (800e6c8 <HW_GetTemperatureLevel+0x60>)
 800e6a0:	0200      	lsls	r0, r0, #8
 800e6a2:	8819      	ldrh	r1, [r3, #0]
 800e6a4:	1b09      	subs	r1, r1, r4
 800e6a6:	f7f1 fde9 	bl	800027c <__divsi3>
 800e6aa:	23f0      	movs	r3, #240	; 0xf0
 800e6ac:	015b      	lsls	r3, r3, #5
 800e6ae:	18c0      	adds	r0, r0, r3
  return (uint16_t) temperatureDegreeC;
 800e6b0:	b280      	uxth	r0, r0
}
 800e6b2:	bd70      	pop	{r4, r5, r6, pc}
 800e6b4:	44020000 	.word	0x44020000
 800e6b8:	1ff80078 	.word	0x1ff80078
 800e6bc:	00000bb8 	.word	0x00000bb8
 800e6c0:	48040000 	.word	0x48040000
 800e6c4:	1ff8007a 	.word	0x1ff8007a
 800e6c8:	1ff8007e 	.word	0x1ff8007e

0800e6cc <HW_GetBatteryLevel>:
{
 800e6cc:	b510      	push	{r4, lr}
  measuredLevel = HW_AdcReadChannel(ADC_CHANNEL_VREFINT);
 800e6ce:	4807      	ldr	r0, [pc, #28]	; (800e6ec <HW_GetBatteryLevel+0x20>)
 800e6d0:	f7ff ff78 	bl	800e5c4 <HW_AdcReadChannel>
 800e6d4:	0001      	movs	r1, r0
    batteryLevelmV = 0;
 800e6d6:	2000      	movs	r0, #0
  if (measuredLevel == 0)
 800e6d8:	4281      	cmp	r1, r0
 800e6da:	d005      	beq.n	800e6e8 <HW_GetBatteryLevel+0x1c>
    batteryLevelmV = (((uint32_t) VDDA_VREFINT_CAL * (*VREFINT_CAL)) / measuredLevel);
 800e6dc:	4b04      	ldr	r3, [pc, #16]	; (800e6f0 <HW_GetBatteryLevel+0x24>)
 800e6de:	8818      	ldrh	r0, [r3, #0]
 800e6e0:	4b04      	ldr	r3, [pc, #16]	; (800e6f4 <HW_GetBatteryLevel+0x28>)
 800e6e2:	4358      	muls	r0, r3
 800e6e4:	f7f1 fd40 	bl	8000168 <__udivsi3>
  return batteryLevelmV;
 800e6e8:	b280      	uxth	r0, r0
}
 800e6ea:	bd10      	pop	{r4, pc}
 800e6ec:	44020000 	.word	0x44020000
 800e6f0:	1ff80078 	.word	0x1ff80078
 800e6f4:	00000bb8 	.word	0x00000bb8

0800e6f8 <NMI_Handler>:
  * @retval None
  */

void NMI_Handler(void)
{
}
 800e6f8:	4770      	bx	lr

0800e6fa <HardFault_Handler>:

void HardFault_Handler(void)
{
  while (1)
  {
    __NOP();
 800e6fa:	46c0      	nop			; (mov r8, r8)
 800e6fc:	e7fd      	b.n	800e6fa <HardFault_Handler>

0800e6fe <SVC_Handler>:
 800e6fe:	4770      	bx	lr

0800e700 <PendSV_Handler>:
 800e700:	4770      	bx	lr

0800e702 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800e702:	b510      	push	{r4, lr}
  HAL_IncTick();
 800e704:	f7f5 fd34 	bl	8004170 <HAL_IncTick>
}
 800e708:	bd10      	pop	{r4, pc}

0800e70a <USART2_IRQHandler>:
  */
/*void PPP_IRQHandler(void)
{
}*/
void USARTx_IRQHandler(void)
{
 800e70a:	b510      	push	{r4, lr}
  vcom_IRQHandler();
 800e70c:	f000 f880 	bl	800e810 <vcom_IRQHandler>
}
 800e710:	bd10      	pop	{r4, pc}

0800e712 <DMA1_Channel4_5_6_7_IRQHandler>:

void USARTx_DMA_TX_IRQHandler(void)
{
 800e712:	b510      	push	{r4, lr}
  vcom_DMA_TX_IRQHandler();
 800e714:	f000 f874 	bl	800e800 <vcom_DMA_TX_IRQHandler>
}
 800e718:	bd10      	pop	{r4, pc}

0800e71a <RTC_IRQHandler>:

void RTC_IRQHandler(void)
{
 800e71a:	b510      	push	{r4, lr}
  HW_RTC_IrqHandler();
 800e71c:	f7fe ffe4 	bl	800d6e8 <HW_RTC_IrqHandler>
}
 800e720:	bd10      	pop	{r4, pc}

0800e722 <EXTI0_1_IRQHandler>:

void EXTI0_1_IRQHandler(void)
{
 800e722:	b510      	push	{r4, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800e724:	2001      	movs	r0, #1
 800e726:	f7f6 f9b5 	bl	8004a94 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800e72a:	2002      	movs	r0, #2
 800e72c:	f7f6 f9b2 	bl	8004a94 <HAL_GPIO_EXTI_IRQHandler>
}
 800e730:	bd10      	pop	{r4, pc}

0800e732 <EXTI2_3_IRQHandler>:

void EXTI2_3_IRQHandler(void)
{
 800e732:	b510      	push	{r4, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 800e734:	2004      	movs	r0, #4
 800e736:	f7f6 f9ad 	bl	8004a94 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 800e73a:	2008      	movs	r0, #8
 800e73c:	f7f6 f9aa 	bl	8004a94 <HAL_GPIO_EXTI_IRQHandler>
}
 800e740:	bd10      	pop	{r4, pc}

0800e742 <EXTI4_15_IRQHandler>:


void EXTI4_15_IRQHandler(void)
{
 800e742:	b510      	push	{r4, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800e744:	2010      	movs	r0, #16
 800e746:	f7f6 f9a5 	bl	8004a94 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 800e74a:	2020      	movs	r0, #32
 800e74c:	f7f6 f9a2 	bl	8004a94 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800e750:	2040      	movs	r0, #64	; 0x40
 800e752:	f7f6 f99f 	bl	8004a94 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 800e756:	2080      	movs	r0, #128	; 0x80
 800e758:	f7f6 f99c 	bl	8004a94 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800e75c:	2080      	movs	r0, #128	; 0x80
 800e75e:	0040      	lsls	r0, r0, #1
 800e760:	f7f6 f998 	bl	8004a94 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 800e764:	2080      	movs	r0, #128	; 0x80
 800e766:	0080      	lsls	r0, r0, #2
 800e768:	f7f6 f994 	bl	8004a94 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 800e76c:	2080      	movs	r0, #128	; 0x80
 800e76e:	00c0      	lsls	r0, r0, #3
 800e770:	f7f6 f990 	bl	8004a94 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 800e774:	2080      	movs	r0, #128	; 0x80
 800e776:	0100      	lsls	r0, r0, #4
 800e778:	f7f6 f98c 	bl	8004a94 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 800e77c:	2080      	movs	r0, #128	; 0x80
 800e77e:	0140      	lsls	r0, r0, #5
 800e780:	f7f6 f988 	bl	8004a94 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800e784:	2080      	movs	r0, #128	; 0x80
 800e786:	0180      	lsls	r0, r0, #6
 800e788:	f7f6 f984 	bl	8004a94 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 800e78c:	2080      	movs	r0, #128	; 0x80
 800e78e:	01c0      	lsls	r0, r0, #7
 800e790:	f7f6 f980 	bl	8004a94 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800e794:	2080      	movs	r0, #128	; 0x80
 800e796:	0200      	lsls	r0, r0, #8
 800e798:	f7f6 f97c 	bl	8004a94 <HAL_GPIO_EXTI_IRQHandler>
}
 800e79c:	bd10      	pop	{r4, pc}
	...

0800e7a0 <vcom_Init>:
/* Functions Definition ------------------------------------------------------*/
void vcom_Init(void (*TxCb)(void))
{

  /*Record Tx complete for DMA*/
  TxCpltCallback = TxCb;
 800e7a0:	4b0b      	ldr	r3, [pc, #44]	; (800e7d0 <vcom_Init+0x30>)
{
 800e7a2:	b510      	push	{r4, lr}
  TxCpltCallback = TxCb;
 800e7a4:	6018      	str	r0, [r3, #0]
      - Word Length = 8 Bits
      - Stop Bit = One Stop bit
      - Parity = ODD parity
      - BaudRate = 921600 baud
      - Hardware flow control disabled (RTS and CTS signals) */
  UartHandle.Instance        = USARTx;
 800e7a6:	480b      	ldr	r0, [pc, #44]	; (800e7d4 <vcom_Init+0x34>)
 800e7a8:	4b0b      	ldr	r3, [pc, #44]	; (800e7d8 <vcom_Init+0x38>)
 800e7aa:	6003      	str	r3, [r0, #0]

  UartHandle.Init.BaudRate   = 115200;
 800e7ac:	23e1      	movs	r3, #225	; 0xe1
 800e7ae:	025b      	lsls	r3, r3, #9
 800e7b0:	6043      	str	r3, [r0, #4]
  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 800e7b2:	2300      	movs	r3, #0
 800e7b4:	6083      	str	r3, [r0, #8]
  UartHandle.Init.StopBits   = UART_STOPBITS_1;
 800e7b6:	60c3      	str	r3, [r0, #12]
  UartHandle.Init.Parity     = UART_PARITY_NONE;
 800e7b8:	6103      	str	r3, [r0, #16]
  UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 800e7ba:	6183      	str	r3, [r0, #24]
  UartHandle.Init.Mode       = UART_MODE_TX;
 800e7bc:	3308      	adds	r3, #8
 800e7be:	6143      	str	r3, [r0, #20]

  if (HAL_UART_Init(&UartHandle) != HAL_OK)
 800e7c0:	f7f8 f906 	bl	80069d0 <HAL_UART_Init>
 800e7c4:	2800      	cmp	r0, #0
 800e7c6:	d001      	beq.n	800e7cc <vcom_Init+0x2c>
  {
    /* Initialization Error */
    Error_Handler();
 800e7c8:	f7fe fda8 	bl	800d31c <Error_Handler>
  }
}
 800e7cc:	bd10      	pop	{r4, pc}
 800e7ce:	46c0      	nop			; (mov r8, r8)
 800e7d0:	200014d0 	.word	0x200014d0
 800e7d4:	2000151c 	.word	0x2000151c
 800e7d8:	40004400 	.word	0x40004400

0800e7dc <vcom_Trace>:

void vcom_Trace(uint8_t *p_data, uint16_t size)
{
 800e7dc:	b510      	push	{r4, lr}
 800e7de:	000a      	movs	r2, r1
  HAL_UART_Transmit_DMA(&UartHandle, p_data, size);
 800e7e0:	0001      	movs	r1, r0
 800e7e2:	4802      	ldr	r0, [pc, #8]	; (800e7ec <vcom_Trace+0x10>)
 800e7e4:	f7f7 fc22 	bl	800602c <HAL_UART_Transmit_DMA>
}
 800e7e8:	bd10      	pop	{r4, pc}
 800e7ea:	46c0      	nop			; (mov r8, r8)
 800e7ec:	2000151c 	.word	0x2000151c

0800e7f0 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 800e7f0:	b510      	push	{r4, lr}
  /* buffer transmission complete*/
  TxCpltCallback();
 800e7f2:	4b02      	ldr	r3, [pc, #8]	; (800e7fc <HAL_UART_TxCpltCallback+0xc>)
 800e7f4:	681b      	ldr	r3, [r3, #0]
 800e7f6:	4798      	blx	r3
}
 800e7f8:	bd10      	pop	{r4, pc}
 800e7fa:	46c0      	nop			; (mov r8, r8)
 800e7fc:	200014d0 	.word	0x200014d0

0800e800 <vcom_DMA_TX_IRQHandler>:

void vcom_DMA_TX_IRQHandler(void)
{
 800e800:	b510      	push	{r4, lr}
  HAL_DMA_IRQHandler(UartHandle.hdmatx);
 800e802:	4b02      	ldr	r3, [pc, #8]	; (800e80c <vcom_DMA_TX_IRQHandler+0xc>)
 800e804:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800e806:	f7f6 f832 	bl	800486e <HAL_DMA_IRQHandler>
}
 800e80a:	bd10      	pop	{r4, pc}
 800e80c:	2000151c 	.word	0x2000151c

0800e810 <vcom_IRQHandler>:

void vcom_IRQHandler(void)
{
 800e810:	b510      	push	{r4, lr}
  HAL_UART_IRQHandler(&UartHandle);
 800e812:	4802      	ldr	r0, [pc, #8]	; (800e81c <vcom_IRQHandler+0xc>)
 800e814:	f7f7 fd4e 	bl	80062b4 <HAL_UART_IRQHandler>
}
 800e818:	bd10      	pop	{r4, pc}
 800e81a:	46c0      	nop			; (mov r8, r8)
 800e81c:	2000151c 	.word	0x2000151c

0800e820 <vcom_IoInit>:
  // }
}

void vcom_IoInit(void)
{
  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 800e820:	2300      	movs	r3, #0
  /* Enable GPIO TX/RX clock */
  USARTx_TX_GPIO_CLK_ENABLE();
 800e822:	2201      	movs	r2, #1
{
 800e824:	b530      	push	{r4, r5, lr}
 800e826:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 800e828:	9305      	str	r3, [sp, #20]
  USARTx_TX_GPIO_CLK_ENABLE();
 800e82a:	4b12      	ldr	r3, [pc, #72]	; (800e874 <vcom_IoInit+0x54>)
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
  GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
  GPIO_InitStruct.Alternate = USARTx_TX_AF;

  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 800e82c:	25a0      	movs	r5, #160	; 0xa0
  USARTx_TX_GPIO_CLK_ENABLE();
 800e82e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 800e830:	2404      	movs	r4, #4
  USARTx_TX_GPIO_CLK_ENABLE();
 800e832:	4311      	orrs	r1, r2
 800e834:	62d9      	str	r1, [r3, #44]	; 0x2c
 800e836:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 800e838:	05ed      	lsls	r5, r5, #23
  USARTx_TX_GPIO_CLK_ENABLE();
 800e83a:	4011      	ands	r1, r2
 800e83c:	9101      	str	r1, [sp, #4]
 800e83e:	9901      	ldr	r1, [sp, #4]
  USARTx_RX_GPIO_CLK_ENABLE();
 800e840:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 800e842:	0028      	movs	r0, r5
  USARTx_RX_GPIO_CLK_ENABLE();
 800e844:	4311      	orrs	r1, r2
 800e846:	62d9      	str	r1, [r3, #44]	; 0x2c
 800e848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 800e84a:	a903      	add	r1, sp, #12
  USARTx_RX_GPIO_CLK_ENABLE();
 800e84c:	401a      	ands	r2, r3
 800e84e:	9202      	str	r2, [sp, #8]
 800e850:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 800e852:	2302      	movs	r3, #2
 800e854:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 800e856:	3301      	adds	r3, #1
 800e858:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 800e85a:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 800e85c:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 800e85e:	f7f6 f853 	bl	8004908 <HAL_GPIO_Init>

  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 800e862:	2308      	movs	r3, #8
  GPIO_InitStruct.Alternate = USARTx_RX_AF;

  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 800e864:	a903      	add	r1, sp, #12
 800e866:	0028      	movs	r0, r5
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 800e868:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
 800e86a:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 800e86c:	f7f6 f84c 	bl	8004908 <HAL_GPIO_Init>
}
 800e870:	b009      	add	sp, #36	; 0x24
 800e872:	bd30      	pop	{r4, r5, pc}
 800e874:	40021000 	.word	0x40021000

0800e878 <HAL_UART_MspInit>:
{
 800e878:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e87a:	0007      	movs	r7, r0
 800e87c:	b08d      	sub	sp, #52	; 0x34
 GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e87e:	2214      	movs	r2, #20
 800e880:	2100      	movs	r1, #0
 800e882:	a807      	add	r0, sp, #28
 800e884:	f000 f8dd 	bl	800ea42 <memset>
  if (huart->Instance == USARTx)
 800e888:	683b      	ldr	r3, [r7, #0]
 800e88a:	4a4f      	ldr	r2, [pc, #316]	; (800e9c8 <HAL_UART_MspInit+0x150>)
 800e88c:	4293      	cmp	r3, r2
 800e88e:	d144      	bne.n	800e91a <HAL_UART_MspInit+0xa2>
    USARTx_TX_GPIO_CLK_ENABLE();
 800e890:	2501      	movs	r5, #1
 800e892:	4b4e      	ldr	r3, [pc, #312]	; (800e9cc <HAL_UART_MspInit+0x154>)
    hdma_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 800e894:	2600      	movs	r6, #0
    USARTx_TX_GPIO_CLK_ENABLE();
 800e896:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e898:	432a      	orrs	r2, r5
 800e89a:	62da      	str	r2, [r3, #44]	; 0x2c
 800e89c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e89e:	402a      	ands	r2, r5
 800e8a0:	9201      	str	r2, [sp, #4]
 800e8a2:	9a01      	ldr	r2, [sp, #4]
    USARTx_RX_GPIO_CLK_ENABLE();
 800e8a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e8a6:	432a      	orrs	r2, r5
 800e8a8:	62da      	str	r2, [r3, #44]	; 0x2c
 800e8aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e8ac:	402a      	ands	r2, r5
 800e8ae:	9202      	str	r2, [sp, #8]
 800e8b0:	9a02      	ldr	r2, [sp, #8]
    USARTx_CLK_ENABLE();
 800e8b2:	2280      	movs	r2, #128	; 0x80
 800e8b4:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800e8b6:	0292      	lsls	r2, r2, #10
 800e8b8:	430a      	orrs	r2, r1
 800e8ba:	639a      	str	r2, [r3, #56]	; 0x38
    DMAx_CLK_ENABLE();
 800e8bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e8be:	432a      	orrs	r2, r5
 800e8c0:	631a      	str	r2, [r3, #48]	; 0x30
 800e8c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8c4:	402b      	ands	r3, r5
 800e8c6:	9303      	str	r3, [sp, #12]
 800e8c8:	9b03      	ldr	r3, [sp, #12]
    vcom_IoInit();
 800e8ca:	f7ff ffa9 	bl	800e820 <vcom_IoInit>
    hdma_tx.Instance                 = USARTx_TX_DMA_CHANNEL;
 800e8ce:	4c40      	ldr	r4, [pc, #256]	; (800e9d0 <HAL_UART_MspInit+0x158>)
 800e8d0:	4b40      	ldr	r3, [pc, #256]	; (800e9d4 <HAL_UART_MspInit+0x15c>)
    HAL_DMA_Init(&hdma_tx);
 800e8d2:	4841      	ldr	r0, [pc, #260]	; (800e9d8 <HAL_UART_MspInit+0x160>)
    hdma_tx.Instance                 = USARTx_TX_DMA_CHANNEL;
 800e8d4:	6063      	str	r3, [r4, #4]
    hdma_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 800e8d6:	2310      	movs	r3, #16
 800e8d8:	60e3      	str	r3, [r4, #12]
    hdma_tx.Init.MemInc              = DMA_MINC_ENABLE;
 800e8da:	3370      	adds	r3, #112	; 0x70
 800e8dc:	6163      	str	r3, [r4, #20]
    hdma_tx.Init.Request             = USARTx_TX_DMA_REQUEST;
 800e8de:	3b7c      	subs	r3, #124	; 0x7c
 800e8e0:	60a3      	str	r3, [r4, #8]
    hdma_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 800e8e2:	6126      	str	r6, [r4, #16]
    hdma_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800e8e4:	61a6      	str	r6, [r4, #24]
    hdma_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
 800e8e6:	61e6      	str	r6, [r4, #28]
    hdma_tx.Init.Mode                = DMA_NORMAL;
 800e8e8:	6226      	str	r6, [r4, #32]
    hdma_tx.Init.Priority            = DMA_PRIORITY_LOW;
 800e8ea:	6266      	str	r6, [r4, #36]	; 0x24
    HAL_DMA_Init(&hdma_tx);
 800e8ec:	f7f5 fef6 	bl	80046dc <HAL_DMA_Init>
    __HAL_LINKDMA(huart, hdmatx, hdma_tx);
 800e8f0:	4b39      	ldr	r3, [pc, #228]	; (800e9d8 <HAL_UART_MspInit+0x160>)
    HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, USARTx_Priority, 1);
 800e8f2:	002a      	movs	r2, r5
    __HAL_LINKDMA(huart, hdmatx, hdma_tx);
 800e8f4:	66bb      	str	r3, [r7, #104]	; 0x68
    HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, USARTx_Priority, 1);
 800e8f6:	0031      	movs	r1, r6
 800e8f8:	200b      	movs	r0, #11
    __HAL_LINKDMA(huart, hdmatx, hdma_tx);
 800e8fa:	62e7      	str	r7, [r4, #44]	; 0x2c
    HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, USARTx_Priority, 1);
 800e8fc:	f7f5 feb8 	bl	8004670 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USARTx_DMA_TX_IRQn);
 800e900:	200b      	movs	r0, #11
 800e902:	f7f5 fedf 	bl	80046c4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USARTx_IRQn, USARTx_DMA_Priority, 1);
 800e906:	201c      	movs	r0, #28
 800e908:	002a      	movs	r2, r5
 800e90a:	0031      	movs	r1, r6
 800e90c:	f7f5 feb0 	bl	8004670 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USARTx_IRQn);
 800e910:	201c      	movs	r0, #28
	      HAL_NVIC_EnableIRQ(USART1_IRQn);
 800e912:	f7f5 fed7 	bl	80046c4 <HAL_NVIC_EnableIRQ>
}
 800e916:	b00d      	add	sp, #52	; 0x34
 800e918:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if (huart->Instance == USART1)
 800e91a:	4a30      	ldr	r2, [pc, #192]	; (800e9dc <HAL_UART_MspInit+0x164>)
 800e91c:	4293      	cmp	r3, r2
 800e91e:	d133      	bne.n	800e988 <HAL_UART_MspInit+0x110>
	      __HAL_RCC_USART1_CLK_ENABLE();
 800e920:	2280      	movs	r2, #128	; 0x80
	      __HAL_RCC_GPIOB_CLK_ENABLE();
 800e922:	2402      	movs	r4, #2
	      __HAL_RCC_USART1_CLK_ENABLE();
 800e924:	4b29      	ldr	r3, [pc, #164]	; (800e9cc <HAL_UART_MspInit+0x154>)
 800e926:	01d2      	lsls	r2, r2, #7
 800e928:	6b59      	ldr	r1, [r3, #52]	; 0x34
	      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e92a:	2503      	movs	r5, #3
	      __HAL_RCC_USART1_CLK_ENABLE();
 800e92c:	430a      	orrs	r2, r1
	      __HAL_RCC_GPIOA_CLK_ENABLE();
 800e92e:	2101      	movs	r1, #1
	      __HAL_RCC_USART1_CLK_ENABLE();
 800e930:	635a      	str	r2, [r3, #52]	; 0x34
	      __HAL_RCC_GPIOB_CLK_ENABLE();
 800e932:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	      HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e934:	482a      	ldr	r0, [pc, #168]	; (800e9e0 <HAL_UART_MspInit+0x168>)
	      __HAL_RCC_GPIOB_CLK_ENABLE();
 800e936:	4322      	orrs	r2, r4
 800e938:	62da      	str	r2, [r3, #44]	; 0x2c
 800e93a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e93c:	4022      	ands	r2, r4
 800e93e:	9204      	str	r2, [sp, #16]
 800e940:	9a04      	ldr	r2, [sp, #16]
	      __HAL_RCC_GPIOA_CLK_ENABLE();
 800e942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e944:	430a      	orrs	r2, r1
 800e946:	62da      	str	r2, [r3, #44]	; 0x2c
 800e948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e94a:	9408      	str	r4, [sp, #32]
	      __HAL_RCC_GPIOA_CLK_ENABLE();
 800e94c:	400b      	ands	r3, r1
 800e94e:	9305      	str	r3, [sp, #20]
 800e950:	9b05      	ldr	r3, [sp, #20]
	      GPIO_InitStruct.Pin = GPIO_PIN_6;
 800e952:	2340      	movs	r3, #64	; 0x40
	      HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e954:	a907      	add	r1, sp, #28
	      GPIO_InitStruct.Pin = GPIO_PIN_6;
 800e956:	9307      	str	r3, [sp, #28]
	      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e958:	950a      	str	r5, [sp, #40]	; 0x28
	      HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e95a:	f7f5 ffd5 	bl	8004908 <HAL_GPIO_Init>
	      GPIO_InitStruct.Pin = GPIO_PIN_10;
 800e95e:	2380      	movs	r3, #128	; 0x80
	      HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e960:	20a0      	movs	r0, #160	; 0xa0
	      GPIO_InitStruct.Pin = GPIO_PIN_10;
 800e962:	00db      	lsls	r3, r3, #3
 800e964:	9307      	str	r3, [sp, #28]
	      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e966:	9408      	str	r4, [sp, #32]
	      GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800e968:	2304      	movs	r3, #4
	      GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e96a:	2400      	movs	r4, #0
	      HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e96c:	a907      	add	r1, sp, #28
 800e96e:	05c0      	lsls	r0, r0, #23
	      GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800e970:	930b      	str	r3, [sp, #44]	; 0x2c
	      GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e972:	9409      	str	r4, [sp, #36]	; 0x24
	      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e974:	950a      	str	r5, [sp, #40]	; 0x28
	      HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e976:	f7f5 ffc7 	bl	8004908 <HAL_GPIO_Init>
	      HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800e97a:	201b      	movs	r0, #27
 800e97c:	0022      	movs	r2, r4
 800e97e:	0021      	movs	r1, r4
 800e980:	f7f5 fe76 	bl	8004670 <HAL_NVIC_SetPriority>
	      HAL_NVIC_EnableIRQ(USART1_IRQn);
 800e984:	201b      	movs	r0, #27
 800e986:	e7c4      	b.n	800e912 <HAL_UART_MspInit+0x9a>
  else if(huart->Instance==LPUART1)
 800e988:	4a16      	ldr	r2, [pc, #88]	; (800e9e4 <HAL_UART_MspInit+0x16c>)
 800e98a:	4293      	cmp	r3, r2
 800e98c:	d1c3      	bne.n	800e916 <HAL_UART_MspInit+0x9e>
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800e98e:	2280      	movs	r2, #128	; 0x80
 800e990:	4b0e      	ldr	r3, [pc, #56]	; (800e9cc <HAL_UART_MspInit+0x154>)
 800e992:	02d2      	lsls	r2, r2, #11
 800e994:	6b99      	ldr	r1, [r3, #56]	; 0x38
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e996:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800e998:	430a      	orrs	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e99a:	2101      	movs	r1, #1
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800e99c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e99e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e9a0:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e9a2:	430a      	orrs	r2, r1
 800e9a4:	62da      	str	r2, [r3, #44]	; 0x2c
 800e9a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e9a8:	400b      	ands	r3, r1
 800e9aa:	9306      	str	r3, [sp, #24]
 800e9ac:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13;
 800e9ae:	23c0      	movs	r3, #192	; 0xc0
 800e9b0:	01db      	lsls	r3, r3, #7
 800e9b2:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e9b4:	2302      	movs	r3, #2
 800e9b6:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e9b8:	185b      	adds	r3, r3, r1
 800e9ba:	930a      	str	r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e9bc:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 800e9be:	3303      	adds	r3, #3
 800e9c0:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e9c2:	f7f5 ffa1 	bl	8004908 <HAL_GPIO_Init>
}
 800e9c6:	e7a6      	b.n	800e916 <HAL_UART_MspInit+0x9e>
 800e9c8:	40004400 	.word	0x40004400
 800e9cc:	40021000 	.word	0x40021000
 800e9d0:	200014d0 	.word	0x200014d0
 800e9d4:	40020080 	.word	0x40020080
 800e9d8:	200014d4 	.word	0x200014d4
 800e9dc:	40013800 	.word	0x40013800
 800e9e0:	50000400 	.word	0x50000400
 800e9e4:	40004800 	.word	0x40004800

0800e9e8 <__libc_init_array>:
 800e9e8:	b570      	push	{r4, r5, r6, lr}
 800e9ea:	2600      	movs	r6, #0
 800e9ec:	4d0c      	ldr	r5, [pc, #48]	; (800ea20 <__libc_init_array+0x38>)
 800e9ee:	4c0d      	ldr	r4, [pc, #52]	; (800ea24 <__libc_init_array+0x3c>)
 800e9f0:	1b64      	subs	r4, r4, r5
 800e9f2:	10a4      	asrs	r4, r4, #2
 800e9f4:	42a6      	cmp	r6, r4
 800e9f6:	d109      	bne.n	800ea0c <__libc_init_array+0x24>
 800e9f8:	2600      	movs	r6, #0
 800e9fa:	f000 fdbf 	bl	800f57c <_init>
 800e9fe:	4d0a      	ldr	r5, [pc, #40]	; (800ea28 <__libc_init_array+0x40>)
 800ea00:	4c0a      	ldr	r4, [pc, #40]	; (800ea2c <__libc_init_array+0x44>)
 800ea02:	1b64      	subs	r4, r4, r5
 800ea04:	10a4      	asrs	r4, r4, #2
 800ea06:	42a6      	cmp	r6, r4
 800ea08:	d105      	bne.n	800ea16 <__libc_init_array+0x2e>
 800ea0a:	bd70      	pop	{r4, r5, r6, pc}
 800ea0c:	00b3      	lsls	r3, r6, #2
 800ea0e:	58eb      	ldr	r3, [r5, r3]
 800ea10:	4798      	blx	r3
 800ea12:	3601      	adds	r6, #1
 800ea14:	e7ee      	b.n	800e9f4 <__libc_init_array+0xc>
 800ea16:	00b3      	lsls	r3, r6, #2
 800ea18:	58eb      	ldr	r3, [r5, r3]
 800ea1a:	4798      	blx	r3
 800ea1c:	3601      	adds	r6, #1
 800ea1e:	e7f2      	b.n	800ea06 <__libc_init_array+0x1e>
 800ea20:	08010430 	.word	0x08010430
 800ea24:	08010430 	.word	0x08010430
 800ea28:	08010430 	.word	0x08010430
 800ea2c:	08010434 	.word	0x08010434

0800ea30 <memcpy>:
 800ea30:	2300      	movs	r3, #0
 800ea32:	b510      	push	{r4, lr}
 800ea34:	429a      	cmp	r2, r3
 800ea36:	d100      	bne.n	800ea3a <memcpy+0xa>
 800ea38:	bd10      	pop	{r4, pc}
 800ea3a:	5ccc      	ldrb	r4, [r1, r3]
 800ea3c:	54c4      	strb	r4, [r0, r3]
 800ea3e:	3301      	adds	r3, #1
 800ea40:	e7f8      	b.n	800ea34 <memcpy+0x4>

0800ea42 <memset>:
 800ea42:	0003      	movs	r3, r0
 800ea44:	1812      	adds	r2, r2, r0
 800ea46:	4293      	cmp	r3, r2
 800ea48:	d100      	bne.n	800ea4c <memset+0xa>
 800ea4a:	4770      	bx	lr
 800ea4c:	7019      	strb	r1, [r3, #0]
 800ea4e:	3301      	adds	r3, #1
 800ea50:	e7f9      	b.n	800ea46 <memset+0x4>
	...

0800ea54 <siprintf>:
 800ea54:	b40e      	push	{r1, r2, r3}
 800ea56:	b500      	push	{lr}
 800ea58:	490b      	ldr	r1, [pc, #44]	; (800ea88 <siprintf+0x34>)
 800ea5a:	b09c      	sub	sp, #112	; 0x70
 800ea5c:	ab1d      	add	r3, sp, #116	; 0x74
 800ea5e:	9002      	str	r0, [sp, #8]
 800ea60:	9006      	str	r0, [sp, #24]
 800ea62:	9107      	str	r1, [sp, #28]
 800ea64:	9104      	str	r1, [sp, #16]
 800ea66:	4809      	ldr	r0, [pc, #36]	; (800ea8c <siprintf+0x38>)
 800ea68:	4909      	ldr	r1, [pc, #36]	; (800ea90 <siprintf+0x3c>)
 800ea6a:	cb04      	ldmia	r3!, {r2}
 800ea6c:	9105      	str	r1, [sp, #20]
 800ea6e:	6800      	ldr	r0, [r0, #0]
 800ea70:	a902      	add	r1, sp, #8
 800ea72:	9301      	str	r3, [sp, #4]
 800ea74:	f000 f906 	bl	800ec84 <_svfiprintf_r>
 800ea78:	2300      	movs	r3, #0
 800ea7a:	9a02      	ldr	r2, [sp, #8]
 800ea7c:	7013      	strb	r3, [r2, #0]
 800ea7e:	b01c      	add	sp, #112	; 0x70
 800ea80:	bc08      	pop	{r3}
 800ea82:	b003      	add	sp, #12
 800ea84:	4718      	bx	r3
 800ea86:	46c0      	nop			; (mov r8, r8)
 800ea88:	7fffffff 	.word	0x7fffffff
 800ea8c:	20000250 	.word	0x20000250
 800ea90:	ffff0208 	.word	0xffff0208

0800ea94 <_vsniprintf_r>:
 800ea94:	b530      	push	{r4, r5, lr}
 800ea96:	0014      	movs	r4, r2
 800ea98:	b09b      	sub	sp, #108	; 0x6c
 800ea9a:	0005      	movs	r5, r0
 800ea9c:	001a      	movs	r2, r3
 800ea9e:	2c00      	cmp	r4, #0
 800eaa0:	da05      	bge.n	800eaae <_vsniprintf_r+0x1a>
 800eaa2:	238b      	movs	r3, #139	; 0x8b
 800eaa4:	6003      	str	r3, [r0, #0]
 800eaa6:	2001      	movs	r0, #1
 800eaa8:	4240      	negs	r0, r0
 800eaaa:	b01b      	add	sp, #108	; 0x6c
 800eaac:	bd30      	pop	{r4, r5, pc}
 800eaae:	2382      	movs	r3, #130	; 0x82
 800eab0:	4668      	mov	r0, sp
 800eab2:	009b      	lsls	r3, r3, #2
 800eab4:	8183      	strh	r3, [r0, #12]
 800eab6:	2300      	movs	r3, #0
 800eab8:	9100      	str	r1, [sp, #0]
 800eaba:	9104      	str	r1, [sp, #16]
 800eabc:	429c      	cmp	r4, r3
 800eabe:	d000      	beq.n	800eac2 <_vsniprintf_r+0x2e>
 800eac0:	1e63      	subs	r3, r4, #1
 800eac2:	9302      	str	r3, [sp, #8]
 800eac4:	9305      	str	r3, [sp, #20]
 800eac6:	2301      	movs	r3, #1
 800eac8:	4669      	mov	r1, sp
 800eaca:	425b      	negs	r3, r3
 800eacc:	81cb      	strh	r3, [r1, #14]
 800eace:	0028      	movs	r0, r5
 800ead0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800ead2:	f000 f8d7 	bl	800ec84 <_svfiprintf_r>
 800ead6:	1c43      	adds	r3, r0, #1
 800ead8:	da01      	bge.n	800eade <_vsniprintf_r+0x4a>
 800eada:	238b      	movs	r3, #139	; 0x8b
 800eadc:	602b      	str	r3, [r5, #0]
 800eade:	2c00      	cmp	r4, #0
 800eae0:	d0e3      	beq.n	800eaaa <_vsniprintf_r+0x16>
 800eae2:	2300      	movs	r3, #0
 800eae4:	9a00      	ldr	r2, [sp, #0]
 800eae6:	7013      	strb	r3, [r2, #0]
 800eae8:	e7df      	b.n	800eaaa <_vsniprintf_r+0x16>
	...

0800eaec <vsniprintf>:
 800eaec:	b507      	push	{r0, r1, r2, lr}
 800eaee:	9300      	str	r3, [sp, #0]
 800eaf0:	0013      	movs	r3, r2
 800eaf2:	000a      	movs	r2, r1
 800eaf4:	0001      	movs	r1, r0
 800eaf6:	4802      	ldr	r0, [pc, #8]	; (800eb00 <vsniprintf+0x14>)
 800eaf8:	6800      	ldr	r0, [r0, #0]
 800eafa:	f7ff ffcb 	bl	800ea94 <_vsniprintf_r>
 800eafe:	bd0e      	pop	{r1, r2, r3, pc}
 800eb00:	20000250 	.word	0x20000250

0800eb04 <_malloc_r>:
 800eb04:	2303      	movs	r3, #3
 800eb06:	b570      	push	{r4, r5, r6, lr}
 800eb08:	1ccd      	adds	r5, r1, #3
 800eb0a:	439d      	bics	r5, r3
 800eb0c:	3508      	adds	r5, #8
 800eb0e:	0006      	movs	r6, r0
 800eb10:	2d0c      	cmp	r5, #12
 800eb12:	d21e      	bcs.n	800eb52 <_malloc_r+0x4e>
 800eb14:	250c      	movs	r5, #12
 800eb16:	42a9      	cmp	r1, r5
 800eb18:	d81d      	bhi.n	800eb56 <_malloc_r+0x52>
 800eb1a:	0030      	movs	r0, r6
 800eb1c:	f000 fb56 	bl	800f1cc <__malloc_lock>
 800eb20:	4a25      	ldr	r2, [pc, #148]	; (800ebb8 <_malloc_r+0xb4>)
 800eb22:	6814      	ldr	r4, [r2, #0]
 800eb24:	0021      	movs	r1, r4
 800eb26:	2900      	cmp	r1, #0
 800eb28:	d119      	bne.n	800eb5e <_malloc_r+0x5a>
 800eb2a:	4c24      	ldr	r4, [pc, #144]	; (800ebbc <_malloc_r+0xb8>)
 800eb2c:	6823      	ldr	r3, [r4, #0]
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	d103      	bne.n	800eb3a <_malloc_r+0x36>
 800eb32:	0030      	movs	r0, r6
 800eb34:	f000 fb1a 	bl	800f16c <_sbrk_r>
 800eb38:	6020      	str	r0, [r4, #0]
 800eb3a:	0029      	movs	r1, r5
 800eb3c:	0030      	movs	r0, r6
 800eb3e:	f000 fb15 	bl	800f16c <_sbrk_r>
 800eb42:	1c43      	adds	r3, r0, #1
 800eb44:	d12b      	bne.n	800eb9e <_malloc_r+0x9a>
 800eb46:	230c      	movs	r3, #12
 800eb48:	0030      	movs	r0, r6
 800eb4a:	6033      	str	r3, [r6, #0]
 800eb4c:	f000 fb3f 	bl	800f1ce <__malloc_unlock>
 800eb50:	e003      	b.n	800eb5a <_malloc_r+0x56>
 800eb52:	2d00      	cmp	r5, #0
 800eb54:	dadf      	bge.n	800eb16 <_malloc_r+0x12>
 800eb56:	230c      	movs	r3, #12
 800eb58:	6033      	str	r3, [r6, #0]
 800eb5a:	2000      	movs	r0, #0
 800eb5c:	bd70      	pop	{r4, r5, r6, pc}
 800eb5e:	680b      	ldr	r3, [r1, #0]
 800eb60:	1b5b      	subs	r3, r3, r5
 800eb62:	d419      	bmi.n	800eb98 <_malloc_r+0x94>
 800eb64:	2b0b      	cmp	r3, #11
 800eb66:	d903      	bls.n	800eb70 <_malloc_r+0x6c>
 800eb68:	600b      	str	r3, [r1, #0]
 800eb6a:	18cc      	adds	r4, r1, r3
 800eb6c:	6025      	str	r5, [r4, #0]
 800eb6e:	e003      	b.n	800eb78 <_malloc_r+0x74>
 800eb70:	684b      	ldr	r3, [r1, #4]
 800eb72:	428c      	cmp	r4, r1
 800eb74:	d10d      	bne.n	800eb92 <_malloc_r+0x8e>
 800eb76:	6013      	str	r3, [r2, #0]
 800eb78:	0030      	movs	r0, r6
 800eb7a:	f000 fb28 	bl	800f1ce <__malloc_unlock>
 800eb7e:	0020      	movs	r0, r4
 800eb80:	2207      	movs	r2, #7
 800eb82:	300b      	adds	r0, #11
 800eb84:	1d23      	adds	r3, r4, #4
 800eb86:	4390      	bics	r0, r2
 800eb88:	1ac3      	subs	r3, r0, r3
 800eb8a:	d0e7      	beq.n	800eb5c <_malloc_r+0x58>
 800eb8c:	425a      	negs	r2, r3
 800eb8e:	50e2      	str	r2, [r4, r3]
 800eb90:	e7e4      	b.n	800eb5c <_malloc_r+0x58>
 800eb92:	6063      	str	r3, [r4, #4]
 800eb94:	000c      	movs	r4, r1
 800eb96:	e7ef      	b.n	800eb78 <_malloc_r+0x74>
 800eb98:	000c      	movs	r4, r1
 800eb9a:	6849      	ldr	r1, [r1, #4]
 800eb9c:	e7c3      	b.n	800eb26 <_malloc_r+0x22>
 800eb9e:	2303      	movs	r3, #3
 800eba0:	1cc4      	adds	r4, r0, #3
 800eba2:	439c      	bics	r4, r3
 800eba4:	42a0      	cmp	r0, r4
 800eba6:	d0e1      	beq.n	800eb6c <_malloc_r+0x68>
 800eba8:	1a21      	subs	r1, r4, r0
 800ebaa:	0030      	movs	r0, r6
 800ebac:	f000 fade 	bl	800f16c <_sbrk_r>
 800ebb0:	1c43      	adds	r3, r0, #1
 800ebb2:	d1db      	bne.n	800eb6c <_malloc_r+0x68>
 800ebb4:	e7c7      	b.n	800eb46 <_malloc_r+0x42>
 800ebb6:	46c0      	nop			; (mov r8, r8)
 800ebb8:	2000159c 	.word	0x2000159c
 800ebbc:	200015a0 	.word	0x200015a0

0800ebc0 <__ssputs_r>:
 800ebc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ebc2:	688e      	ldr	r6, [r1, #8]
 800ebc4:	b085      	sub	sp, #20
 800ebc6:	0007      	movs	r7, r0
 800ebc8:	000c      	movs	r4, r1
 800ebca:	9203      	str	r2, [sp, #12]
 800ebcc:	9301      	str	r3, [sp, #4]
 800ebce:	429e      	cmp	r6, r3
 800ebd0:	d83c      	bhi.n	800ec4c <__ssputs_r+0x8c>
 800ebd2:	2390      	movs	r3, #144	; 0x90
 800ebd4:	898a      	ldrh	r2, [r1, #12]
 800ebd6:	00db      	lsls	r3, r3, #3
 800ebd8:	421a      	tst	r2, r3
 800ebda:	d034      	beq.n	800ec46 <__ssputs_r+0x86>
 800ebdc:	2503      	movs	r5, #3
 800ebde:	6909      	ldr	r1, [r1, #16]
 800ebe0:	6823      	ldr	r3, [r4, #0]
 800ebe2:	1a5b      	subs	r3, r3, r1
 800ebe4:	9302      	str	r3, [sp, #8]
 800ebe6:	6963      	ldr	r3, [r4, #20]
 800ebe8:	9802      	ldr	r0, [sp, #8]
 800ebea:	435d      	muls	r5, r3
 800ebec:	0feb      	lsrs	r3, r5, #31
 800ebee:	195d      	adds	r5, r3, r5
 800ebf0:	9b01      	ldr	r3, [sp, #4]
 800ebf2:	106d      	asrs	r5, r5, #1
 800ebf4:	3301      	adds	r3, #1
 800ebf6:	181b      	adds	r3, r3, r0
 800ebf8:	42ab      	cmp	r3, r5
 800ebfa:	d900      	bls.n	800ebfe <__ssputs_r+0x3e>
 800ebfc:	001d      	movs	r5, r3
 800ebfe:	0553      	lsls	r3, r2, #21
 800ec00:	d532      	bpl.n	800ec68 <__ssputs_r+0xa8>
 800ec02:	0029      	movs	r1, r5
 800ec04:	0038      	movs	r0, r7
 800ec06:	f7ff ff7d 	bl	800eb04 <_malloc_r>
 800ec0a:	1e06      	subs	r6, r0, #0
 800ec0c:	d109      	bne.n	800ec22 <__ssputs_r+0x62>
 800ec0e:	230c      	movs	r3, #12
 800ec10:	603b      	str	r3, [r7, #0]
 800ec12:	2340      	movs	r3, #64	; 0x40
 800ec14:	2001      	movs	r0, #1
 800ec16:	89a2      	ldrh	r2, [r4, #12]
 800ec18:	4240      	negs	r0, r0
 800ec1a:	4313      	orrs	r3, r2
 800ec1c:	81a3      	strh	r3, [r4, #12]
 800ec1e:	b005      	add	sp, #20
 800ec20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ec22:	9a02      	ldr	r2, [sp, #8]
 800ec24:	6921      	ldr	r1, [r4, #16]
 800ec26:	f7ff ff03 	bl	800ea30 <memcpy>
 800ec2a:	89a3      	ldrh	r3, [r4, #12]
 800ec2c:	4a14      	ldr	r2, [pc, #80]	; (800ec80 <__ssputs_r+0xc0>)
 800ec2e:	401a      	ands	r2, r3
 800ec30:	2380      	movs	r3, #128	; 0x80
 800ec32:	4313      	orrs	r3, r2
 800ec34:	81a3      	strh	r3, [r4, #12]
 800ec36:	9b02      	ldr	r3, [sp, #8]
 800ec38:	6126      	str	r6, [r4, #16]
 800ec3a:	18f6      	adds	r6, r6, r3
 800ec3c:	6026      	str	r6, [r4, #0]
 800ec3e:	6165      	str	r5, [r4, #20]
 800ec40:	9e01      	ldr	r6, [sp, #4]
 800ec42:	1aed      	subs	r5, r5, r3
 800ec44:	60a5      	str	r5, [r4, #8]
 800ec46:	9b01      	ldr	r3, [sp, #4]
 800ec48:	429e      	cmp	r6, r3
 800ec4a:	d900      	bls.n	800ec4e <__ssputs_r+0x8e>
 800ec4c:	9e01      	ldr	r6, [sp, #4]
 800ec4e:	0032      	movs	r2, r6
 800ec50:	9903      	ldr	r1, [sp, #12]
 800ec52:	6820      	ldr	r0, [r4, #0]
 800ec54:	f000 faa7 	bl	800f1a6 <memmove>
 800ec58:	68a3      	ldr	r3, [r4, #8]
 800ec5a:	2000      	movs	r0, #0
 800ec5c:	1b9b      	subs	r3, r3, r6
 800ec5e:	60a3      	str	r3, [r4, #8]
 800ec60:	6823      	ldr	r3, [r4, #0]
 800ec62:	199e      	adds	r6, r3, r6
 800ec64:	6026      	str	r6, [r4, #0]
 800ec66:	e7da      	b.n	800ec1e <__ssputs_r+0x5e>
 800ec68:	002a      	movs	r2, r5
 800ec6a:	0038      	movs	r0, r7
 800ec6c:	f000 fafa 	bl	800f264 <_realloc_r>
 800ec70:	1e06      	subs	r6, r0, #0
 800ec72:	d1e0      	bne.n	800ec36 <__ssputs_r+0x76>
 800ec74:	6921      	ldr	r1, [r4, #16]
 800ec76:	0038      	movs	r0, r7
 800ec78:	f000 faaa 	bl	800f1d0 <_free_r>
 800ec7c:	e7c7      	b.n	800ec0e <__ssputs_r+0x4e>
 800ec7e:	46c0      	nop			; (mov r8, r8)
 800ec80:	fffffb7f 	.word	0xfffffb7f

0800ec84 <_svfiprintf_r>:
 800ec84:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ec86:	b0a1      	sub	sp, #132	; 0x84
 800ec88:	9003      	str	r0, [sp, #12]
 800ec8a:	001d      	movs	r5, r3
 800ec8c:	898b      	ldrh	r3, [r1, #12]
 800ec8e:	000f      	movs	r7, r1
 800ec90:	0016      	movs	r6, r2
 800ec92:	061b      	lsls	r3, r3, #24
 800ec94:	d511      	bpl.n	800ecba <_svfiprintf_r+0x36>
 800ec96:	690b      	ldr	r3, [r1, #16]
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	d10e      	bne.n	800ecba <_svfiprintf_r+0x36>
 800ec9c:	2140      	movs	r1, #64	; 0x40
 800ec9e:	f7ff ff31 	bl	800eb04 <_malloc_r>
 800eca2:	6038      	str	r0, [r7, #0]
 800eca4:	6138      	str	r0, [r7, #16]
 800eca6:	2800      	cmp	r0, #0
 800eca8:	d105      	bne.n	800ecb6 <_svfiprintf_r+0x32>
 800ecaa:	230c      	movs	r3, #12
 800ecac:	9a03      	ldr	r2, [sp, #12]
 800ecae:	3801      	subs	r0, #1
 800ecb0:	6013      	str	r3, [r2, #0]
 800ecb2:	b021      	add	sp, #132	; 0x84
 800ecb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ecb6:	2340      	movs	r3, #64	; 0x40
 800ecb8:	617b      	str	r3, [r7, #20]
 800ecba:	2300      	movs	r3, #0
 800ecbc:	ac08      	add	r4, sp, #32
 800ecbe:	6163      	str	r3, [r4, #20]
 800ecc0:	3320      	adds	r3, #32
 800ecc2:	7663      	strb	r3, [r4, #25]
 800ecc4:	3310      	adds	r3, #16
 800ecc6:	76a3      	strb	r3, [r4, #26]
 800ecc8:	9507      	str	r5, [sp, #28]
 800ecca:	0035      	movs	r5, r6
 800eccc:	782b      	ldrb	r3, [r5, #0]
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	d001      	beq.n	800ecd6 <_svfiprintf_r+0x52>
 800ecd2:	2b25      	cmp	r3, #37	; 0x25
 800ecd4:	d146      	bne.n	800ed64 <_svfiprintf_r+0xe0>
 800ecd6:	1bab      	subs	r3, r5, r6
 800ecd8:	9305      	str	r3, [sp, #20]
 800ecda:	d00c      	beq.n	800ecf6 <_svfiprintf_r+0x72>
 800ecdc:	0032      	movs	r2, r6
 800ecde:	0039      	movs	r1, r7
 800ece0:	9803      	ldr	r0, [sp, #12]
 800ece2:	f7ff ff6d 	bl	800ebc0 <__ssputs_r>
 800ece6:	1c43      	adds	r3, r0, #1
 800ece8:	d100      	bne.n	800ecec <_svfiprintf_r+0x68>
 800ecea:	e0ae      	b.n	800ee4a <_svfiprintf_r+0x1c6>
 800ecec:	6962      	ldr	r2, [r4, #20]
 800ecee:	9b05      	ldr	r3, [sp, #20]
 800ecf0:	4694      	mov	ip, r2
 800ecf2:	4463      	add	r3, ip
 800ecf4:	6163      	str	r3, [r4, #20]
 800ecf6:	782b      	ldrb	r3, [r5, #0]
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d100      	bne.n	800ecfe <_svfiprintf_r+0x7a>
 800ecfc:	e0a5      	b.n	800ee4a <_svfiprintf_r+0x1c6>
 800ecfe:	2201      	movs	r2, #1
 800ed00:	2300      	movs	r3, #0
 800ed02:	4252      	negs	r2, r2
 800ed04:	6062      	str	r2, [r4, #4]
 800ed06:	a904      	add	r1, sp, #16
 800ed08:	3254      	adds	r2, #84	; 0x54
 800ed0a:	1852      	adds	r2, r2, r1
 800ed0c:	1c6e      	adds	r6, r5, #1
 800ed0e:	6023      	str	r3, [r4, #0]
 800ed10:	60e3      	str	r3, [r4, #12]
 800ed12:	60a3      	str	r3, [r4, #8]
 800ed14:	7013      	strb	r3, [r2, #0]
 800ed16:	65a3      	str	r3, [r4, #88]	; 0x58
 800ed18:	7831      	ldrb	r1, [r6, #0]
 800ed1a:	2205      	movs	r2, #5
 800ed1c:	4853      	ldr	r0, [pc, #332]	; (800ee6c <_svfiprintf_r+0x1e8>)
 800ed1e:	f000 fa37 	bl	800f190 <memchr>
 800ed22:	1c75      	adds	r5, r6, #1
 800ed24:	2800      	cmp	r0, #0
 800ed26:	d11f      	bne.n	800ed68 <_svfiprintf_r+0xe4>
 800ed28:	6822      	ldr	r2, [r4, #0]
 800ed2a:	06d3      	lsls	r3, r2, #27
 800ed2c:	d504      	bpl.n	800ed38 <_svfiprintf_r+0xb4>
 800ed2e:	2353      	movs	r3, #83	; 0x53
 800ed30:	a904      	add	r1, sp, #16
 800ed32:	185b      	adds	r3, r3, r1
 800ed34:	2120      	movs	r1, #32
 800ed36:	7019      	strb	r1, [r3, #0]
 800ed38:	0713      	lsls	r3, r2, #28
 800ed3a:	d504      	bpl.n	800ed46 <_svfiprintf_r+0xc2>
 800ed3c:	2353      	movs	r3, #83	; 0x53
 800ed3e:	a904      	add	r1, sp, #16
 800ed40:	185b      	adds	r3, r3, r1
 800ed42:	212b      	movs	r1, #43	; 0x2b
 800ed44:	7019      	strb	r1, [r3, #0]
 800ed46:	7833      	ldrb	r3, [r6, #0]
 800ed48:	2b2a      	cmp	r3, #42	; 0x2a
 800ed4a:	d016      	beq.n	800ed7a <_svfiprintf_r+0xf6>
 800ed4c:	0035      	movs	r5, r6
 800ed4e:	2100      	movs	r1, #0
 800ed50:	200a      	movs	r0, #10
 800ed52:	68e3      	ldr	r3, [r4, #12]
 800ed54:	782a      	ldrb	r2, [r5, #0]
 800ed56:	1c6e      	adds	r6, r5, #1
 800ed58:	3a30      	subs	r2, #48	; 0x30
 800ed5a:	2a09      	cmp	r2, #9
 800ed5c:	d94e      	bls.n	800edfc <_svfiprintf_r+0x178>
 800ed5e:	2900      	cmp	r1, #0
 800ed60:	d018      	beq.n	800ed94 <_svfiprintf_r+0x110>
 800ed62:	e010      	b.n	800ed86 <_svfiprintf_r+0x102>
 800ed64:	3501      	adds	r5, #1
 800ed66:	e7b1      	b.n	800eccc <_svfiprintf_r+0x48>
 800ed68:	4b40      	ldr	r3, [pc, #256]	; (800ee6c <_svfiprintf_r+0x1e8>)
 800ed6a:	6822      	ldr	r2, [r4, #0]
 800ed6c:	1ac0      	subs	r0, r0, r3
 800ed6e:	2301      	movs	r3, #1
 800ed70:	4083      	lsls	r3, r0
 800ed72:	4313      	orrs	r3, r2
 800ed74:	6023      	str	r3, [r4, #0]
 800ed76:	002e      	movs	r6, r5
 800ed78:	e7ce      	b.n	800ed18 <_svfiprintf_r+0x94>
 800ed7a:	9b07      	ldr	r3, [sp, #28]
 800ed7c:	1d19      	adds	r1, r3, #4
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	9107      	str	r1, [sp, #28]
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	db01      	blt.n	800ed8a <_svfiprintf_r+0x106>
 800ed86:	930b      	str	r3, [sp, #44]	; 0x2c
 800ed88:	e004      	b.n	800ed94 <_svfiprintf_r+0x110>
 800ed8a:	425b      	negs	r3, r3
 800ed8c:	60e3      	str	r3, [r4, #12]
 800ed8e:	2302      	movs	r3, #2
 800ed90:	4313      	orrs	r3, r2
 800ed92:	6023      	str	r3, [r4, #0]
 800ed94:	782b      	ldrb	r3, [r5, #0]
 800ed96:	2b2e      	cmp	r3, #46	; 0x2e
 800ed98:	d10a      	bne.n	800edb0 <_svfiprintf_r+0x12c>
 800ed9a:	786b      	ldrb	r3, [r5, #1]
 800ed9c:	2b2a      	cmp	r3, #42	; 0x2a
 800ed9e:	d135      	bne.n	800ee0c <_svfiprintf_r+0x188>
 800eda0:	9b07      	ldr	r3, [sp, #28]
 800eda2:	3502      	adds	r5, #2
 800eda4:	1d1a      	adds	r2, r3, #4
 800eda6:	681b      	ldr	r3, [r3, #0]
 800eda8:	9207      	str	r2, [sp, #28]
 800edaa:	2b00      	cmp	r3, #0
 800edac:	db2b      	blt.n	800ee06 <_svfiprintf_r+0x182>
 800edae:	9309      	str	r3, [sp, #36]	; 0x24
 800edb0:	4e2f      	ldr	r6, [pc, #188]	; (800ee70 <_svfiprintf_r+0x1ec>)
 800edb2:	7829      	ldrb	r1, [r5, #0]
 800edb4:	2203      	movs	r2, #3
 800edb6:	0030      	movs	r0, r6
 800edb8:	f000 f9ea 	bl	800f190 <memchr>
 800edbc:	2800      	cmp	r0, #0
 800edbe:	d006      	beq.n	800edce <_svfiprintf_r+0x14a>
 800edc0:	2340      	movs	r3, #64	; 0x40
 800edc2:	1b80      	subs	r0, r0, r6
 800edc4:	4083      	lsls	r3, r0
 800edc6:	6822      	ldr	r2, [r4, #0]
 800edc8:	3501      	adds	r5, #1
 800edca:	4313      	orrs	r3, r2
 800edcc:	6023      	str	r3, [r4, #0]
 800edce:	7829      	ldrb	r1, [r5, #0]
 800edd0:	2206      	movs	r2, #6
 800edd2:	4828      	ldr	r0, [pc, #160]	; (800ee74 <_svfiprintf_r+0x1f0>)
 800edd4:	1c6e      	adds	r6, r5, #1
 800edd6:	7621      	strb	r1, [r4, #24]
 800edd8:	f000 f9da 	bl	800f190 <memchr>
 800eddc:	2800      	cmp	r0, #0
 800edde:	d03c      	beq.n	800ee5a <_svfiprintf_r+0x1d6>
 800ede0:	4b25      	ldr	r3, [pc, #148]	; (800ee78 <_svfiprintf_r+0x1f4>)
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d125      	bne.n	800ee32 <_svfiprintf_r+0x1ae>
 800ede6:	2207      	movs	r2, #7
 800ede8:	9b07      	ldr	r3, [sp, #28]
 800edea:	3307      	adds	r3, #7
 800edec:	4393      	bics	r3, r2
 800edee:	3308      	adds	r3, #8
 800edf0:	9307      	str	r3, [sp, #28]
 800edf2:	6963      	ldr	r3, [r4, #20]
 800edf4:	9a04      	ldr	r2, [sp, #16]
 800edf6:	189b      	adds	r3, r3, r2
 800edf8:	6163      	str	r3, [r4, #20]
 800edfa:	e766      	b.n	800ecca <_svfiprintf_r+0x46>
 800edfc:	4343      	muls	r3, r0
 800edfe:	2101      	movs	r1, #1
 800ee00:	189b      	adds	r3, r3, r2
 800ee02:	0035      	movs	r5, r6
 800ee04:	e7a6      	b.n	800ed54 <_svfiprintf_r+0xd0>
 800ee06:	2301      	movs	r3, #1
 800ee08:	425b      	negs	r3, r3
 800ee0a:	e7d0      	b.n	800edae <_svfiprintf_r+0x12a>
 800ee0c:	2300      	movs	r3, #0
 800ee0e:	200a      	movs	r0, #10
 800ee10:	001a      	movs	r2, r3
 800ee12:	3501      	adds	r5, #1
 800ee14:	6063      	str	r3, [r4, #4]
 800ee16:	7829      	ldrb	r1, [r5, #0]
 800ee18:	1c6e      	adds	r6, r5, #1
 800ee1a:	3930      	subs	r1, #48	; 0x30
 800ee1c:	2909      	cmp	r1, #9
 800ee1e:	d903      	bls.n	800ee28 <_svfiprintf_r+0x1a4>
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d0c5      	beq.n	800edb0 <_svfiprintf_r+0x12c>
 800ee24:	9209      	str	r2, [sp, #36]	; 0x24
 800ee26:	e7c3      	b.n	800edb0 <_svfiprintf_r+0x12c>
 800ee28:	4342      	muls	r2, r0
 800ee2a:	2301      	movs	r3, #1
 800ee2c:	1852      	adds	r2, r2, r1
 800ee2e:	0035      	movs	r5, r6
 800ee30:	e7f1      	b.n	800ee16 <_svfiprintf_r+0x192>
 800ee32:	ab07      	add	r3, sp, #28
 800ee34:	9300      	str	r3, [sp, #0]
 800ee36:	003a      	movs	r2, r7
 800ee38:	4b10      	ldr	r3, [pc, #64]	; (800ee7c <_svfiprintf_r+0x1f8>)
 800ee3a:	0021      	movs	r1, r4
 800ee3c:	9803      	ldr	r0, [sp, #12]
 800ee3e:	e000      	b.n	800ee42 <_svfiprintf_r+0x1be>
 800ee40:	bf00      	nop
 800ee42:	9004      	str	r0, [sp, #16]
 800ee44:	9b04      	ldr	r3, [sp, #16]
 800ee46:	3301      	adds	r3, #1
 800ee48:	d1d3      	bne.n	800edf2 <_svfiprintf_r+0x16e>
 800ee4a:	89bb      	ldrh	r3, [r7, #12]
 800ee4c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800ee4e:	065b      	lsls	r3, r3, #25
 800ee50:	d400      	bmi.n	800ee54 <_svfiprintf_r+0x1d0>
 800ee52:	e72e      	b.n	800ecb2 <_svfiprintf_r+0x2e>
 800ee54:	2001      	movs	r0, #1
 800ee56:	4240      	negs	r0, r0
 800ee58:	e72b      	b.n	800ecb2 <_svfiprintf_r+0x2e>
 800ee5a:	ab07      	add	r3, sp, #28
 800ee5c:	9300      	str	r3, [sp, #0]
 800ee5e:	003a      	movs	r2, r7
 800ee60:	4b06      	ldr	r3, [pc, #24]	; (800ee7c <_svfiprintf_r+0x1f8>)
 800ee62:	0021      	movs	r1, r4
 800ee64:	9803      	ldr	r0, [sp, #12]
 800ee66:	f000 f879 	bl	800ef5c <_printf_i>
 800ee6a:	e7ea      	b.n	800ee42 <_svfiprintf_r+0x1be>
 800ee6c:	080103f4 	.word	0x080103f4
 800ee70:	080103fa 	.word	0x080103fa
 800ee74:	080103fe 	.word	0x080103fe
 800ee78:	00000000 	.word	0x00000000
 800ee7c:	0800ebc1 	.word	0x0800ebc1

0800ee80 <_printf_common>:
 800ee80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ee82:	0015      	movs	r5, r2
 800ee84:	9301      	str	r3, [sp, #4]
 800ee86:	688a      	ldr	r2, [r1, #8]
 800ee88:	690b      	ldr	r3, [r1, #16]
 800ee8a:	9000      	str	r0, [sp, #0]
 800ee8c:	000c      	movs	r4, r1
 800ee8e:	4293      	cmp	r3, r2
 800ee90:	da00      	bge.n	800ee94 <_printf_common+0x14>
 800ee92:	0013      	movs	r3, r2
 800ee94:	0022      	movs	r2, r4
 800ee96:	602b      	str	r3, [r5, #0]
 800ee98:	3243      	adds	r2, #67	; 0x43
 800ee9a:	7812      	ldrb	r2, [r2, #0]
 800ee9c:	2a00      	cmp	r2, #0
 800ee9e:	d001      	beq.n	800eea4 <_printf_common+0x24>
 800eea0:	3301      	adds	r3, #1
 800eea2:	602b      	str	r3, [r5, #0]
 800eea4:	6823      	ldr	r3, [r4, #0]
 800eea6:	069b      	lsls	r3, r3, #26
 800eea8:	d502      	bpl.n	800eeb0 <_printf_common+0x30>
 800eeaa:	682b      	ldr	r3, [r5, #0]
 800eeac:	3302      	adds	r3, #2
 800eeae:	602b      	str	r3, [r5, #0]
 800eeb0:	2706      	movs	r7, #6
 800eeb2:	6823      	ldr	r3, [r4, #0]
 800eeb4:	401f      	ands	r7, r3
 800eeb6:	d027      	beq.n	800ef08 <_printf_common+0x88>
 800eeb8:	0023      	movs	r3, r4
 800eeba:	3343      	adds	r3, #67	; 0x43
 800eebc:	781b      	ldrb	r3, [r3, #0]
 800eebe:	1e5a      	subs	r2, r3, #1
 800eec0:	4193      	sbcs	r3, r2
 800eec2:	6822      	ldr	r2, [r4, #0]
 800eec4:	0692      	lsls	r2, r2, #26
 800eec6:	d430      	bmi.n	800ef2a <_printf_common+0xaa>
 800eec8:	0022      	movs	r2, r4
 800eeca:	9901      	ldr	r1, [sp, #4]
 800eecc:	3243      	adds	r2, #67	; 0x43
 800eece:	9800      	ldr	r0, [sp, #0]
 800eed0:	9e08      	ldr	r6, [sp, #32]
 800eed2:	47b0      	blx	r6
 800eed4:	1c43      	adds	r3, r0, #1
 800eed6:	d025      	beq.n	800ef24 <_printf_common+0xa4>
 800eed8:	2306      	movs	r3, #6
 800eeda:	6820      	ldr	r0, [r4, #0]
 800eedc:	682a      	ldr	r2, [r5, #0]
 800eede:	68e1      	ldr	r1, [r4, #12]
 800eee0:	4003      	ands	r3, r0
 800eee2:	2500      	movs	r5, #0
 800eee4:	2b04      	cmp	r3, #4
 800eee6:	d103      	bne.n	800eef0 <_printf_common+0x70>
 800eee8:	1a8d      	subs	r5, r1, r2
 800eeea:	43eb      	mvns	r3, r5
 800eeec:	17db      	asrs	r3, r3, #31
 800eeee:	401d      	ands	r5, r3
 800eef0:	68a3      	ldr	r3, [r4, #8]
 800eef2:	6922      	ldr	r2, [r4, #16]
 800eef4:	4293      	cmp	r3, r2
 800eef6:	dd01      	ble.n	800eefc <_printf_common+0x7c>
 800eef8:	1a9b      	subs	r3, r3, r2
 800eefa:	18ed      	adds	r5, r5, r3
 800eefc:	2700      	movs	r7, #0
 800eefe:	42bd      	cmp	r5, r7
 800ef00:	d120      	bne.n	800ef44 <_printf_common+0xc4>
 800ef02:	2000      	movs	r0, #0
 800ef04:	e010      	b.n	800ef28 <_printf_common+0xa8>
 800ef06:	3701      	adds	r7, #1
 800ef08:	68e3      	ldr	r3, [r4, #12]
 800ef0a:	682a      	ldr	r2, [r5, #0]
 800ef0c:	1a9b      	subs	r3, r3, r2
 800ef0e:	42bb      	cmp	r3, r7
 800ef10:	ddd2      	ble.n	800eeb8 <_printf_common+0x38>
 800ef12:	0022      	movs	r2, r4
 800ef14:	2301      	movs	r3, #1
 800ef16:	3219      	adds	r2, #25
 800ef18:	9901      	ldr	r1, [sp, #4]
 800ef1a:	9800      	ldr	r0, [sp, #0]
 800ef1c:	9e08      	ldr	r6, [sp, #32]
 800ef1e:	47b0      	blx	r6
 800ef20:	1c43      	adds	r3, r0, #1
 800ef22:	d1f0      	bne.n	800ef06 <_printf_common+0x86>
 800ef24:	2001      	movs	r0, #1
 800ef26:	4240      	negs	r0, r0
 800ef28:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ef2a:	2030      	movs	r0, #48	; 0x30
 800ef2c:	18e1      	adds	r1, r4, r3
 800ef2e:	3143      	adds	r1, #67	; 0x43
 800ef30:	7008      	strb	r0, [r1, #0]
 800ef32:	0021      	movs	r1, r4
 800ef34:	1c5a      	adds	r2, r3, #1
 800ef36:	3145      	adds	r1, #69	; 0x45
 800ef38:	7809      	ldrb	r1, [r1, #0]
 800ef3a:	18a2      	adds	r2, r4, r2
 800ef3c:	3243      	adds	r2, #67	; 0x43
 800ef3e:	3302      	adds	r3, #2
 800ef40:	7011      	strb	r1, [r2, #0]
 800ef42:	e7c1      	b.n	800eec8 <_printf_common+0x48>
 800ef44:	0022      	movs	r2, r4
 800ef46:	2301      	movs	r3, #1
 800ef48:	321a      	adds	r2, #26
 800ef4a:	9901      	ldr	r1, [sp, #4]
 800ef4c:	9800      	ldr	r0, [sp, #0]
 800ef4e:	9e08      	ldr	r6, [sp, #32]
 800ef50:	47b0      	blx	r6
 800ef52:	1c43      	adds	r3, r0, #1
 800ef54:	d0e6      	beq.n	800ef24 <_printf_common+0xa4>
 800ef56:	3701      	adds	r7, #1
 800ef58:	e7d1      	b.n	800eefe <_printf_common+0x7e>
	...

0800ef5c <_printf_i>:
 800ef5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ef5e:	b089      	sub	sp, #36	; 0x24
 800ef60:	9204      	str	r2, [sp, #16]
 800ef62:	000a      	movs	r2, r1
 800ef64:	3243      	adds	r2, #67	; 0x43
 800ef66:	9305      	str	r3, [sp, #20]
 800ef68:	9003      	str	r0, [sp, #12]
 800ef6a:	9202      	str	r2, [sp, #8]
 800ef6c:	7e0a      	ldrb	r2, [r1, #24]
 800ef6e:	000c      	movs	r4, r1
 800ef70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ef72:	2a6e      	cmp	r2, #110	; 0x6e
 800ef74:	d100      	bne.n	800ef78 <_printf_i+0x1c>
 800ef76:	e086      	b.n	800f086 <_printf_i+0x12a>
 800ef78:	d81f      	bhi.n	800efba <_printf_i+0x5e>
 800ef7a:	2a63      	cmp	r2, #99	; 0x63
 800ef7c:	d033      	beq.n	800efe6 <_printf_i+0x8a>
 800ef7e:	d808      	bhi.n	800ef92 <_printf_i+0x36>
 800ef80:	2a00      	cmp	r2, #0
 800ef82:	d100      	bne.n	800ef86 <_printf_i+0x2a>
 800ef84:	e08c      	b.n	800f0a0 <_printf_i+0x144>
 800ef86:	2a58      	cmp	r2, #88	; 0x58
 800ef88:	d04d      	beq.n	800f026 <_printf_i+0xca>
 800ef8a:	0025      	movs	r5, r4
 800ef8c:	3542      	adds	r5, #66	; 0x42
 800ef8e:	702a      	strb	r2, [r5, #0]
 800ef90:	e030      	b.n	800eff4 <_printf_i+0x98>
 800ef92:	2a64      	cmp	r2, #100	; 0x64
 800ef94:	d001      	beq.n	800ef9a <_printf_i+0x3e>
 800ef96:	2a69      	cmp	r2, #105	; 0x69
 800ef98:	d1f7      	bne.n	800ef8a <_printf_i+0x2e>
 800ef9a:	6819      	ldr	r1, [r3, #0]
 800ef9c:	6825      	ldr	r5, [r4, #0]
 800ef9e:	1d0a      	adds	r2, r1, #4
 800efa0:	0628      	lsls	r0, r5, #24
 800efa2:	d529      	bpl.n	800eff8 <_printf_i+0x9c>
 800efa4:	6808      	ldr	r0, [r1, #0]
 800efa6:	601a      	str	r2, [r3, #0]
 800efa8:	2800      	cmp	r0, #0
 800efaa:	da03      	bge.n	800efb4 <_printf_i+0x58>
 800efac:	232d      	movs	r3, #45	; 0x2d
 800efae:	9a02      	ldr	r2, [sp, #8]
 800efb0:	4240      	negs	r0, r0
 800efb2:	7013      	strb	r3, [r2, #0]
 800efb4:	4e6b      	ldr	r6, [pc, #428]	; (800f164 <_printf_i+0x208>)
 800efb6:	270a      	movs	r7, #10
 800efb8:	e04f      	b.n	800f05a <_printf_i+0xfe>
 800efba:	2a73      	cmp	r2, #115	; 0x73
 800efbc:	d074      	beq.n	800f0a8 <_printf_i+0x14c>
 800efbe:	d808      	bhi.n	800efd2 <_printf_i+0x76>
 800efc0:	2a6f      	cmp	r2, #111	; 0x6f
 800efc2:	d01f      	beq.n	800f004 <_printf_i+0xa8>
 800efc4:	2a70      	cmp	r2, #112	; 0x70
 800efc6:	d1e0      	bne.n	800ef8a <_printf_i+0x2e>
 800efc8:	2220      	movs	r2, #32
 800efca:	6809      	ldr	r1, [r1, #0]
 800efcc:	430a      	orrs	r2, r1
 800efce:	6022      	str	r2, [r4, #0]
 800efd0:	e003      	b.n	800efda <_printf_i+0x7e>
 800efd2:	2a75      	cmp	r2, #117	; 0x75
 800efd4:	d016      	beq.n	800f004 <_printf_i+0xa8>
 800efd6:	2a78      	cmp	r2, #120	; 0x78
 800efd8:	d1d7      	bne.n	800ef8a <_printf_i+0x2e>
 800efda:	0022      	movs	r2, r4
 800efdc:	2178      	movs	r1, #120	; 0x78
 800efde:	3245      	adds	r2, #69	; 0x45
 800efe0:	7011      	strb	r1, [r2, #0]
 800efe2:	4e61      	ldr	r6, [pc, #388]	; (800f168 <_printf_i+0x20c>)
 800efe4:	e022      	b.n	800f02c <_printf_i+0xd0>
 800efe6:	0025      	movs	r5, r4
 800efe8:	681a      	ldr	r2, [r3, #0]
 800efea:	3542      	adds	r5, #66	; 0x42
 800efec:	1d11      	adds	r1, r2, #4
 800efee:	6019      	str	r1, [r3, #0]
 800eff0:	6813      	ldr	r3, [r2, #0]
 800eff2:	702b      	strb	r3, [r5, #0]
 800eff4:	2301      	movs	r3, #1
 800eff6:	e065      	b.n	800f0c4 <_printf_i+0x168>
 800eff8:	6808      	ldr	r0, [r1, #0]
 800effa:	601a      	str	r2, [r3, #0]
 800effc:	0669      	lsls	r1, r5, #25
 800effe:	d5d3      	bpl.n	800efa8 <_printf_i+0x4c>
 800f000:	b200      	sxth	r0, r0
 800f002:	e7d1      	b.n	800efa8 <_printf_i+0x4c>
 800f004:	6819      	ldr	r1, [r3, #0]
 800f006:	6825      	ldr	r5, [r4, #0]
 800f008:	1d08      	adds	r0, r1, #4
 800f00a:	6018      	str	r0, [r3, #0]
 800f00c:	6808      	ldr	r0, [r1, #0]
 800f00e:	062e      	lsls	r6, r5, #24
 800f010:	d505      	bpl.n	800f01e <_printf_i+0xc2>
 800f012:	4e54      	ldr	r6, [pc, #336]	; (800f164 <_printf_i+0x208>)
 800f014:	2708      	movs	r7, #8
 800f016:	2a6f      	cmp	r2, #111	; 0x6f
 800f018:	d01b      	beq.n	800f052 <_printf_i+0xf6>
 800f01a:	270a      	movs	r7, #10
 800f01c:	e019      	b.n	800f052 <_printf_i+0xf6>
 800f01e:	066d      	lsls	r5, r5, #25
 800f020:	d5f7      	bpl.n	800f012 <_printf_i+0xb6>
 800f022:	b280      	uxth	r0, r0
 800f024:	e7f5      	b.n	800f012 <_printf_i+0xb6>
 800f026:	3145      	adds	r1, #69	; 0x45
 800f028:	4e4e      	ldr	r6, [pc, #312]	; (800f164 <_printf_i+0x208>)
 800f02a:	700a      	strb	r2, [r1, #0]
 800f02c:	6818      	ldr	r0, [r3, #0]
 800f02e:	6822      	ldr	r2, [r4, #0]
 800f030:	1d01      	adds	r1, r0, #4
 800f032:	6800      	ldr	r0, [r0, #0]
 800f034:	6019      	str	r1, [r3, #0]
 800f036:	0615      	lsls	r5, r2, #24
 800f038:	d521      	bpl.n	800f07e <_printf_i+0x122>
 800f03a:	07d3      	lsls	r3, r2, #31
 800f03c:	d502      	bpl.n	800f044 <_printf_i+0xe8>
 800f03e:	2320      	movs	r3, #32
 800f040:	431a      	orrs	r2, r3
 800f042:	6022      	str	r2, [r4, #0]
 800f044:	2710      	movs	r7, #16
 800f046:	2800      	cmp	r0, #0
 800f048:	d103      	bne.n	800f052 <_printf_i+0xf6>
 800f04a:	2320      	movs	r3, #32
 800f04c:	6822      	ldr	r2, [r4, #0]
 800f04e:	439a      	bics	r2, r3
 800f050:	6022      	str	r2, [r4, #0]
 800f052:	0023      	movs	r3, r4
 800f054:	2200      	movs	r2, #0
 800f056:	3343      	adds	r3, #67	; 0x43
 800f058:	701a      	strb	r2, [r3, #0]
 800f05a:	6863      	ldr	r3, [r4, #4]
 800f05c:	60a3      	str	r3, [r4, #8]
 800f05e:	2b00      	cmp	r3, #0
 800f060:	db58      	blt.n	800f114 <_printf_i+0x1b8>
 800f062:	2204      	movs	r2, #4
 800f064:	6821      	ldr	r1, [r4, #0]
 800f066:	4391      	bics	r1, r2
 800f068:	6021      	str	r1, [r4, #0]
 800f06a:	2800      	cmp	r0, #0
 800f06c:	d154      	bne.n	800f118 <_printf_i+0x1bc>
 800f06e:	9d02      	ldr	r5, [sp, #8]
 800f070:	2b00      	cmp	r3, #0
 800f072:	d05a      	beq.n	800f12a <_printf_i+0x1ce>
 800f074:	0025      	movs	r5, r4
 800f076:	7833      	ldrb	r3, [r6, #0]
 800f078:	3542      	adds	r5, #66	; 0x42
 800f07a:	702b      	strb	r3, [r5, #0]
 800f07c:	e055      	b.n	800f12a <_printf_i+0x1ce>
 800f07e:	0655      	lsls	r5, r2, #25
 800f080:	d5db      	bpl.n	800f03a <_printf_i+0xde>
 800f082:	b280      	uxth	r0, r0
 800f084:	e7d9      	b.n	800f03a <_printf_i+0xde>
 800f086:	681a      	ldr	r2, [r3, #0]
 800f088:	680d      	ldr	r5, [r1, #0]
 800f08a:	1d10      	adds	r0, r2, #4
 800f08c:	6949      	ldr	r1, [r1, #20]
 800f08e:	6018      	str	r0, [r3, #0]
 800f090:	6813      	ldr	r3, [r2, #0]
 800f092:	062e      	lsls	r6, r5, #24
 800f094:	d501      	bpl.n	800f09a <_printf_i+0x13e>
 800f096:	6019      	str	r1, [r3, #0]
 800f098:	e002      	b.n	800f0a0 <_printf_i+0x144>
 800f09a:	066d      	lsls	r5, r5, #25
 800f09c:	d5fb      	bpl.n	800f096 <_printf_i+0x13a>
 800f09e:	8019      	strh	r1, [r3, #0]
 800f0a0:	2300      	movs	r3, #0
 800f0a2:	9d02      	ldr	r5, [sp, #8]
 800f0a4:	6123      	str	r3, [r4, #16]
 800f0a6:	e04f      	b.n	800f148 <_printf_i+0x1ec>
 800f0a8:	681a      	ldr	r2, [r3, #0]
 800f0aa:	1d11      	adds	r1, r2, #4
 800f0ac:	6019      	str	r1, [r3, #0]
 800f0ae:	6815      	ldr	r5, [r2, #0]
 800f0b0:	2100      	movs	r1, #0
 800f0b2:	6862      	ldr	r2, [r4, #4]
 800f0b4:	0028      	movs	r0, r5
 800f0b6:	f000 f86b 	bl	800f190 <memchr>
 800f0ba:	2800      	cmp	r0, #0
 800f0bc:	d001      	beq.n	800f0c2 <_printf_i+0x166>
 800f0be:	1b40      	subs	r0, r0, r5
 800f0c0:	6060      	str	r0, [r4, #4]
 800f0c2:	6863      	ldr	r3, [r4, #4]
 800f0c4:	6123      	str	r3, [r4, #16]
 800f0c6:	2300      	movs	r3, #0
 800f0c8:	9a02      	ldr	r2, [sp, #8]
 800f0ca:	7013      	strb	r3, [r2, #0]
 800f0cc:	e03c      	b.n	800f148 <_printf_i+0x1ec>
 800f0ce:	6923      	ldr	r3, [r4, #16]
 800f0d0:	002a      	movs	r2, r5
 800f0d2:	9904      	ldr	r1, [sp, #16]
 800f0d4:	9803      	ldr	r0, [sp, #12]
 800f0d6:	9d05      	ldr	r5, [sp, #20]
 800f0d8:	47a8      	blx	r5
 800f0da:	1c43      	adds	r3, r0, #1
 800f0dc:	d03e      	beq.n	800f15c <_printf_i+0x200>
 800f0de:	6823      	ldr	r3, [r4, #0]
 800f0e0:	079b      	lsls	r3, r3, #30
 800f0e2:	d415      	bmi.n	800f110 <_printf_i+0x1b4>
 800f0e4:	9b07      	ldr	r3, [sp, #28]
 800f0e6:	68e0      	ldr	r0, [r4, #12]
 800f0e8:	4298      	cmp	r0, r3
 800f0ea:	da39      	bge.n	800f160 <_printf_i+0x204>
 800f0ec:	0018      	movs	r0, r3
 800f0ee:	e037      	b.n	800f160 <_printf_i+0x204>
 800f0f0:	0022      	movs	r2, r4
 800f0f2:	2301      	movs	r3, #1
 800f0f4:	3219      	adds	r2, #25
 800f0f6:	9904      	ldr	r1, [sp, #16]
 800f0f8:	9803      	ldr	r0, [sp, #12]
 800f0fa:	9e05      	ldr	r6, [sp, #20]
 800f0fc:	47b0      	blx	r6
 800f0fe:	1c43      	adds	r3, r0, #1
 800f100:	d02c      	beq.n	800f15c <_printf_i+0x200>
 800f102:	3501      	adds	r5, #1
 800f104:	68e3      	ldr	r3, [r4, #12]
 800f106:	9a07      	ldr	r2, [sp, #28]
 800f108:	1a9b      	subs	r3, r3, r2
 800f10a:	42ab      	cmp	r3, r5
 800f10c:	dcf0      	bgt.n	800f0f0 <_printf_i+0x194>
 800f10e:	e7e9      	b.n	800f0e4 <_printf_i+0x188>
 800f110:	2500      	movs	r5, #0
 800f112:	e7f7      	b.n	800f104 <_printf_i+0x1a8>
 800f114:	2800      	cmp	r0, #0
 800f116:	d0ad      	beq.n	800f074 <_printf_i+0x118>
 800f118:	9d02      	ldr	r5, [sp, #8]
 800f11a:	0039      	movs	r1, r7
 800f11c:	f7f1 f8aa 	bl	8000274 <__aeabi_uidivmod>
 800f120:	5c73      	ldrb	r3, [r6, r1]
 800f122:	3d01      	subs	r5, #1
 800f124:	702b      	strb	r3, [r5, #0]
 800f126:	2800      	cmp	r0, #0
 800f128:	d1f7      	bne.n	800f11a <_printf_i+0x1be>
 800f12a:	2f08      	cmp	r7, #8
 800f12c:	d109      	bne.n	800f142 <_printf_i+0x1e6>
 800f12e:	6823      	ldr	r3, [r4, #0]
 800f130:	07db      	lsls	r3, r3, #31
 800f132:	d506      	bpl.n	800f142 <_printf_i+0x1e6>
 800f134:	6863      	ldr	r3, [r4, #4]
 800f136:	6922      	ldr	r2, [r4, #16]
 800f138:	4293      	cmp	r3, r2
 800f13a:	dc02      	bgt.n	800f142 <_printf_i+0x1e6>
 800f13c:	2330      	movs	r3, #48	; 0x30
 800f13e:	3d01      	subs	r5, #1
 800f140:	702b      	strb	r3, [r5, #0]
 800f142:	9b02      	ldr	r3, [sp, #8]
 800f144:	1b5b      	subs	r3, r3, r5
 800f146:	6123      	str	r3, [r4, #16]
 800f148:	9b05      	ldr	r3, [sp, #20]
 800f14a:	aa07      	add	r2, sp, #28
 800f14c:	9300      	str	r3, [sp, #0]
 800f14e:	0021      	movs	r1, r4
 800f150:	9b04      	ldr	r3, [sp, #16]
 800f152:	9803      	ldr	r0, [sp, #12]
 800f154:	f7ff fe94 	bl	800ee80 <_printf_common>
 800f158:	1c43      	adds	r3, r0, #1
 800f15a:	d1b8      	bne.n	800f0ce <_printf_i+0x172>
 800f15c:	2001      	movs	r0, #1
 800f15e:	4240      	negs	r0, r0
 800f160:	b009      	add	sp, #36	; 0x24
 800f162:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f164:	08010405 	.word	0x08010405
 800f168:	08010416 	.word	0x08010416

0800f16c <_sbrk_r>:
 800f16c:	2300      	movs	r3, #0
 800f16e:	b570      	push	{r4, r5, r6, lr}
 800f170:	4c06      	ldr	r4, [pc, #24]	; (800f18c <_sbrk_r+0x20>)
 800f172:	0005      	movs	r5, r0
 800f174:	0008      	movs	r0, r1
 800f176:	6023      	str	r3, [r4, #0]
 800f178:	f000 f9f0 	bl	800f55c <_sbrk>
 800f17c:	1c43      	adds	r3, r0, #1
 800f17e:	d103      	bne.n	800f188 <_sbrk_r+0x1c>
 800f180:	6823      	ldr	r3, [r4, #0]
 800f182:	2b00      	cmp	r3, #0
 800f184:	d000      	beq.n	800f188 <_sbrk_r+0x1c>
 800f186:	602b      	str	r3, [r5, #0]
 800f188:	bd70      	pop	{r4, r5, r6, pc}
 800f18a:	46c0      	nop			; (mov r8, r8)
 800f18c:	20001940 	.word	0x20001940

0800f190 <memchr>:
 800f190:	b2c9      	uxtb	r1, r1
 800f192:	1882      	adds	r2, r0, r2
 800f194:	4290      	cmp	r0, r2
 800f196:	d101      	bne.n	800f19c <memchr+0xc>
 800f198:	2000      	movs	r0, #0
 800f19a:	4770      	bx	lr
 800f19c:	7803      	ldrb	r3, [r0, #0]
 800f19e:	428b      	cmp	r3, r1
 800f1a0:	d0fb      	beq.n	800f19a <memchr+0xa>
 800f1a2:	3001      	adds	r0, #1
 800f1a4:	e7f6      	b.n	800f194 <memchr+0x4>

0800f1a6 <memmove>:
 800f1a6:	b510      	push	{r4, lr}
 800f1a8:	4288      	cmp	r0, r1
 800f1aa:	d902      	bls.n	800f1b2 <memmove+0xc>
 800f1ac:	188b      	adds	r3, r1, r2
 800f1ae:	4298      	cmp	r0, r3
 800f1b0:	d303      	bcc.n	800f1ba <memmove+0x14>
 800f1b2:	2300      	movs	r3, #0
 800f1b4:	e007      	b.n	800f1c6 <memmove+0x20>
 800f1b6:	5c8b      	ldrb	r3, [r1, r2]
 800f1b8:	5483      	strb	r3, [r0, r2]
 800f1ba:	3a01      	subs	r2, #1
 800f1bc:	d2fb      	bcs.n	800f1b6 <memmove+0x10>
 800f1be:	bd10      	pop	{r4, pc}
 800f1c0:	5ccc      	ldrb	r4, [r1, r3]
 800f1c2:	54c4      	strb	r4, [r0, r3]
 800f1c4:	3301      	adds	r3, #1
 800f1c6:	429a      	cmp	r2, r3
 800f1c8:	d1fa      	bne.n	800f1c0 <memmove+0x1a>
 800f1ca:	e7f8      	b.n	800f1be <memmove+0x18>

0800f1cc <__malloc_lock>:
 800f1cc:	4770      	bx	lr

0800f1ce <__malloc_unlock>:
 800f1ce:	4770      	bx	lr

0800f1d0 <_free_r>:
 800f1d0:	b570      	push	{r4, r5, r6, lr}
 800f1d2:	0005      	movs	r5, r0
 800f1d4:	2900      	cmp	r1, #0
 800f1d6:	d010      	beq.n	800f1fa <_free_r+0x2a>
 800f1d8:	1f0c      	subs	r4, r1, #4
 800f1da:	6823      	ldr	r3, [r4, #0]
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	da00      	bge.n	800f1e2 <_free_r+0x12>
 800f1e0:	18e4      	adds	r4, r4, r3
 800f1e2:	0028      	movs	r0, r5
 800f1e4:	f7ff fff2 	bl	800f1cc <__malloc_lock>
 800f1e8:	4a1d      	ldr	r2, [pc, #116]	; (800f260 <_free_r+0x90>)
 800f1ea:	6813      	ldr	r3, [r2, #0]
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	d105      	bne.n	800f1fc <_free_r+0x2c>
 800f1f0:	6063      	str	r3, [r4, #4]
 800f1f2:	6014      	str	r4, [r2, #0]
 800f1f4:	0028      	movs	r0, r5
 800f1f6:	f7ff ffea 	bl	800f1ce <__malloc_unlock>
 800f1fa:	bd70      	pop	{r4, r5, r6, pc}
 800f1fc:	42a3      	cmp	r3, r4
 800f1fe:	d909      	bls.n	800f214 <_free_r+0x44>
 800f200:	6821      	ldr	r1, [r4, #0]
 800f202:	1860      	adds	r0, r4, r1
 800f204:	4283      	cmp	r3, r0
 800f206:	d1f3      	bne.n	800f1f0 <_free_r+0x20>
 800f208:	6818      	ldr	r0, [r3, #0]
 800f20a:	685b      	ldr	r3, [r3, #4]
 800f20c:	1841      	adds	r1, r0, r1
 800f20e:	6021      	str	r1, [r4, #0]
 800f210:	e7ee      	b.n	800f1f0 <_free_r+0x20>
 800f212:	0013      	movs	r3, r2
 800f214:	685a      	ldr	r2, [r3, #4]
 800f216:	2a00      	cmp	r2, #0
 800f218:	d001      	beq.n	800f21e <_free_r+0x4e>
 800f21a:	42a2      	cmp	r2, r4
 800f21c:	d9f9      	bls.n	800f212 <_free_r+0x42>
 800f21e:	6819      	ldr	r1, [r3, #0]
 800f220:	1858      	adds	r0, r3, r1
 800f222:	42a0      	cmp	r0, r4
 800f224:	d10b      	bne.n	800f23e <_free_r+0x6e>
 800f226:	6820      	ldr	r0, [r4, #0]
 800f228:	1809      	adds	r1, r1, r0
 800f22a:	1858      	adds	r0, r3, r1
 800f22c:	6019      	str	r1, [r3, #0]
 800f22e:	4282      	cmp	r2, r0
 800f230:	d1e0      	bne.n	800f1f4 <_free_r+0x24>
 800f232:	6810      	ldr	r0, [r2, #0]
 800f234:	6852      	ldr	r2, [r2, #4]
 800f236:	1841      	adds	r1, r0, r1
 800f238:	6019      	str	r1, [r3, #0]
 800f23a:	605a      	str	r2, [r3, #4]
 800f23c:	e7da      	b.n	800f1f4 <_free_r+0x24>
 800f23e:	42a0      	cmp	r0, r4
 800f240:	d902      	bls.n	800f248 <_free_r+0x78>
 800f242:	230c      	movs	r3, #12
 800f244:	602b      	str	r3, [r5, #0]
 800f246:	e7d5      	b.n	800f1f4 <_free_r+0x24>
 800f248:	6821      	ldr	r1, [r4, #0]
 800f24a:	1860      	adds	r0, r4, r1
 800f24c:	4282      	cmp	r2, r0
 800f24e:	d103      	bne.n	800f258 <_free_r+0x88>
 800f250:	6810      	ldr	r0, [r2, #0]
 800f252:	6852      	ldr	r2, [r2, #4]
 800f254:	1841      	adds	r1, r0, r1
 800f256:	6021      	str	r1, [r4, #0]
 800f258:	6062      	str	r2, [r4, #4]
 800f25a:	605c      	str	r4, [r3, #4]
 800f25c:	e7ca      	b.n	800f1f4 <_free_r+0x24>
 800f25e:	46c0      	nop			; (mov r8, r8)
 800f260:	2000159c 	.word	0x2000159c

0800f264 <_realloc_r>:
 800f264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f266:	0007      	movs	r7, r0
 800f268:	000d      	movs	r5, r1
 800f26a:	0016      	movs	r6, r2
 800f26c:	2900      	cmp	r1, #0
 800f26e:	d105      	bne.n	800f27c <_realloc_r+0x18>
 800f270:	0011      	movs	r1, r2
 800f272:	f7ff fc47 	bl	800eb04 <_malloc_r>
 800f276:	0004      	movs	r4, r0
 800f278:	0020      	movs	r0, r4
 800f27a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f27c:	2a00      	cmp	r2, #0
 800f27e:	d103      	bne.n	800f288 <_realloc_r+0x24>
 800f280:	f7ff ffa6 	bl	800f1d0 <_free_r>
 800f284:	0034      	movs	r4, r6
 800f286:	e7f7      	b.n	800f278 <_realloc_r+0x14>
 800f288:	f000 f812 	bl	800f2b0 <_malloc_usable_size_r>
 800f28c:	002c      	movs	r4, r5
 800f28e:	42b0      	cmp	r0, r6
 800f290:	d2f2      	bcs.n	800f278 <_realloc_r+0x14>
 800f292:	0031      	movs	r1, r6
 800f294:	0038      	movs	r0, r7
 800f296:	f7ff fc35 	bl	800eb04 <_malloc_r>
 800f29a:	1e04      	subs	r4, r0, #0
 800f29c:	d0ec      	beq.n	800f278 <_realloc_r+0x14>
 800f29e:	0029      	movs	r1, r5
 800f2a0:	0032      	movs	r2, r6
 800f2a2:	f7ff fbc5 	bl	800ea30 <memcpy>
 800f2a6:	0029      	movs	r1, r5
 800f2a8:	0038      	movs	r0, r7
 800f2aa:	f7ff ff91 	bl	800f1d0 <_free_r>
 800f2ae:	e7e3      	b.n	800f278 <_realloc_r+0x14>

0800f2b0 <_malloc_usable_size_r>:
 800f2b0:	1f0b      	subs	r3, r1, #4
 800f2b2:	681b      	ldr	r3, [r3, #0]
 800f2b4:	1f18      	subs	r0, r3, #4
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	da01      	bge.n	800f2be <_malloc_usable_size_r+0xe>
 800f2ba:	580b      	ldr	r3, [r1, r0]
 800f2bc:	18c0      	adds	r0, r0, r3
 800f2be:	4770      	bx	lr

0800f2c0 <ceil>:
 800f2c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f2c2:	004b      	lsls	r3, r1, #1
 800f2c4:	4a39      	ldr	r2, [pc, #228]	; (800f3ac <ceil+0xec>)
 800f2c6:	0d5b      	lsrs	r3, r3, #21
 800f2c8:	b085      	sub	sp, #20
 800f2ca:	189e      	adds	r6, r3, r2
 800f2cc:	000c      	movs	r4, r1
 800f2ce:	0005      	movs	r5, r0
 800f2d0:	9003      	str	r0, [sp, #12]
 800f2d2:	2e13      	cmp	r6, #19
 800f2d4:	dc32      	bgt.n	800f33c <ceil+0x7c>
 800f2d6:	2e00      	cmp	r6, #0
 800f2d8:	da13      	bge.n	800f302 <ceil+0x42>
 800f2da:	4a35      	ldr	r2, [pc, #212]	; (800f3b0 <ceil+0xf0>)
 800f2dc:	4b35      	ldr	r3, [pc, #212]	; (800f3b4 <ceil+0xf4>)
 800f2de:	f7f1 fbfb 	bl	8000ad8 <__aeabi_dadd>
 800f2e2:	2200      	movs	r2, #0
 800f2e4:	2300      	movs	r3, #0
 800f2e6:	f7f1 f8df 	bl	80004a8 <__aeabi_dcmpgt>
 800f2ea:	2800      	cmp	r0, #0
 800f2ec:	d006      	beq.n	800f2fc <ceil+0x3c>
 800f2ee:	2c00      	cmp	r4, #0
 800f2f0:	db57      	blt.n	800f3a2 <ceil+0xe2>
 800f2f2:	432c      	orrs	r4, r5
 800f2f4:	2500      	movs	r5, #0
 800f2f6:	42ac      	cmp	r4, r5
 800f2f8:	d000      	beq.n	800f2fc <ceil+0x3c>
 800f2fa:	4c2f      	ldr	r4, [pc, #188]	; (800f3b8 <ceil+0xf8>)
 800f2fc:	0028      	movs	r0, r5
 800f2fe:	0021      	movs	r1, r4
 800f300:	e026      	b.n	800f350 <ceil+0x90>
 800f302:	4f2e      	ldr	r7, [pc, #184]	; (800f3bc <ceil+0xfc>)
 800f304:	4137      	asrs	r7, r6
 800f306:	003b      	movs	r3, r7
 800f308:	400b      	ands	r3, r1
 800f30a:	4303      	orrs	r3, r0
 800f30c:	d020      	beq.n	800f350 <ceil+0x90>
 800f30e:	9000      	str	r0, [sp, #0]
 800f310:	9101      	str	r1, [sp, #4]
 800f312:	4a27      	ldr	r2, [pc, #156]	; (800f3b0 <ceil+0xf0>)
 800f314:	4b27      	ldr	r3, [pc, #156]	; (800f3b4 <ceil+0xf4>)
 800f316:	9800      	ldr	r0, [sp, #0]
 800f318:	9901      	ldr	r1, [sp, #4]
 800f31a:	f7f1 fbdd 	bl	8000ad8 <__aeabi_dadd>
 800f31e:	2200      	movs	r2, #0
 800f320:	2300      	movs	r3, #0
 800f322:	f7f1 f8c1 	bl	80004a8 <__aeabi_dcmpgt>
 800f326:	2800      	cmp	r0, #0
 800f328:	d0e8      	beq.n	800f2fc <ceil+0x3c>
 800f32a:	2c00      	cmp	r4, #0
 800f32c:	dd03      	ble.n	800f336 <ceil+0x76>
 800f32e:	2380      	movs	r3, #128	; 0x80
 800f330:	035b      	lsls	r3, r3, #13
 800f332:	4133      	asrs	r3, r6
 800f334:	18e4      	adds	r4, r4, r3
 800f336:	43bc      	bics	r4, r7
 800f338:	2500      	movs	r5, #0
 800f33a:	e7df      	b.n	800f2fc <ceil+0x3c>
 800f33c:	2e33      	cmp	r6, #51	; 0x33
 800f33e:	dd09      	ble.n	800f354 <ceil+0x94>
 800f340:	2380      	movs	r3, #128	; 0x80
 800f342:	00db      	lsls	r3, r3, #3
 800f344:	429e      	cmp	r6, r3
 800f346:	d103      	bne.n	800f350 <ceil+0x90>
 800f348:	0002      	movs	r2, r0
 800f34a:	000b      	movs	r3, r1
 800f34c:	f7f1 fbc4 	bl	8000ad8 <__aeabi_dadd>
 800f350:	b005      	add	sp, #20
 800f352:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f354:	2701      	movs	r7, #1
 800f356:	4a1a      	ldr	r2, [pc, #104]	; (800f3c0 <ceil+0x100>)
 800f358:	427f      	negs	r7, r7
 800f35a:	189b      	adds	r3, r3, r2
 800f35c:	40df      	lsrs	r7, r3
 800f35e:	4238      	tst	r0, r7
 800f360:	d0f6      	beq.n	800f350 <ceil+0x90>
 800f362:	9000      	str	r0, [sp, #0]
 800f364:	9101      	str	r1, [sp, #4]
 800f366:	4a12      	ldr	r2, [pc, #72]	; (800f3b0 <ceil+0xf0>)
 800f368:	4b12      	ldr	r3, [pc, #72]	; (800f3b4 <ceil+0xf4>)
 800f36a:	9800      	ldr	r0, [sp, #0]
 800f36c:	9901      	ldr	r1, [sp, #4]
 800f36e:	f7f1 fbb3 	bl	8000ad8 <__aeabi_dadd>
 800f372:	2200      	movs	r2, #0
 800f374:	2300      	movs	r3, #0
 800f376:	f7f1 f897 	bl	80004a8 <__aeabi_dcmpgt>
 800f37a:	2800      	cmp	r0, #0
 800f37c:	d0be      	beq.n	800f2fc <ceil+0x3c>
 800f37e:	2c00      	cmp	r4, #0
 800f380:	dd02      	ble.n	800f388 <ceil+0xc8>
 800f382:	2e14      	cmp	r6, #20
 800f384:	d102      	bne.n	800f38c <ceil+0xcc>
 800f386:	3401      	adds	r4, #1
 800f388:	43bd      	bics	r5, r7
 800f38a:	e7b7      	b.n	800f2fc <ceil+0x3c>
 800f38c:	2334      	movs	r3, #52	; 0x34
 800f38e:	1b9e      	subs	r6, r3, r6
 800f390:	3b33      	subs	r3, #51	; 0x33
 800f392:	40b3      	lsls	r3, r6
 800f394:	18ed      	adds	r5, r5, r3
 800f396:	9b03      	ldr	r3, [sp, #12]
 800f398:	429d      	cmp	r5, r3
 800f39a:	419b      	sbcs	r3, r3
 800f39c:	425b      	negs	r3, r3
 800f39e:	18e4      	adds	r4, r4, r3
 800f3a0:	e7f2      	b.n	800f388 <ceil+0xc8>
 800f3a2:	2480      	movs	r4, #128	; 0x80
 800f3a4:	2500      	movs	r5, #0
 800f3a6:	0624      	lsls	r4, r4, #24
 800f3a8:	e7a8      	b.n	800f2fc <ceil+0x3c>
 800f3aa:	46c0      	nop			; (mov r8, r8)
 800f3ac:	fffffc01 	.word	0xfffffc01
 800f3b0:	8800759c 	.word	0x8800759c
 800f3b4:	7e37e43c 	.word	0x7e37e43c
 800f3b8:	3ff00000 	.word	0x3ff00000
 800f3bc:	000fffff 	.word	0x000fffff
 800f3c0:	fffffbed 	.word	0xfffffbed

0800f3c4 <floor>:
 800f3c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f3c6:	004b      	lsls	r3, r1, #1
 800f3c8:	4a39      	ldr	r2, [pc, #228]	; (800f4b0 <floor+0xec>)
 800f3ca:	0d5b      	lsrs	r3, r3, #21
 800f3cc:	b085      	sub	sp, #20
 800f3ce:	189e      	adds	r6, r3, r2
 800f3d0:	000c      	movs	r4, r1
 800f3d2:	0005      	movs	r5, r0
 800f3d4:	9003      	str	r0, [sp, #12]
 800f3d6:	2e13      	cmp	r6, #19
 800f3d8:	dc34      	bgt.n	800f444 <floor+0x80>
 800f3da:	2e00      	cmp	r6, #0
 800f3dc:	da15      	bge.n	800f40a <floor+0x46>
 800f3de:	4a35      	ldr	r2, [pc, #212]	; (800f4b4 <floor+0xf0>)
 800f3e0:	4b35      	ldr	r3, [pc, #212]	; (800f4b8 <floor+0xf4>)
 800f3e2:	f7f1 fb79 	bl	8000ad8 <__aeabi_dadd>
 800f3e6:	2200      	movs	r2, #0
 800f3e8:	2300      	movs	r3, #0
 800f3ea:	f7f1 f85d 	bl	80004a8 <__aeabi_dcmpgt>
 800f3ee:	2800      	cmp	r0, #0
 800f3f0:	d008      	beq.n	800f404 <floor+0x40>
 800f3f2:	2c00      	cmp	r4, #0
 800f3f4:	da59      	bge.n	800f4aa <floor+0xe6>
 800f3f6:	0063      	lsls	r3, r4, #1
 800f3f8:	085b      	lsrs	r3, r3, #1
 800f3fa:	432b      	orrs	r3, r5
 800f3fc:	2500      	movs	r5, #0
 800f3fe:	42ab      	cmp	r3, r5
 800f400:	d000      	beq.n	800f404 <floor+0x40>
 800f402:	4c2e      	ldr	r4, [pc, #184]	; (800f4bc <floor+0xf8>)
 800f404:	0028      	movs	r0, r5
 800f406:	0021      	movs	r1, r4
 800f408:	e026      	b.n	800f458 <floor+0x94>
 800f40a:	4f2d      	ldr	r7, [pc, #180]	; (800f4c0 <floor+0xfc>)
 800f40c:	4137      	asrs	r7, r6
 800f40e:	003b      	movs	r3, r7
 800f410:	400b      	ands	r3, r1
 800f412:	4303      	orrs	r3, r0
 800f414:	d020      	beq.n	800f458 <floor+0x94>
 800f416:	9000      	str	r0, [sp, #0]
 800f418:	9101      	str	r1, [sp, #4]
 800f41a:	4a26      	ldr	r2, [pc, #152]	; (800f4b4 <floor+0xf0>)
 800f41c:	4b26      	ldr	r3, [pc, #152]	; (800f4b8 <floor+0xf4>)
 800f41e:	9800      	ldr	r0, [sp, #0]
 800f420:	9901      	ldr	r1, [sp, #4]
 800f422:	f7f1 fb59 	bl	8000ad8 <__aeabi_dadd>
 800f426:	2200      	movs	r2, #0
 800f428:	2300      	movs	r3, #0
 800f42a:	f7f1 f83d 	bl	80004a8 <__aeabi_dcmpgt>
 800f42e:	2800      	cmp	r0, #0
 800f430:	d0e8      	beq.n	800f404 <floor+0x40>
 800f432:	2c00      	cmp	r4, #0
 800f434:	da03      	bge.n	800f43e <floor+0x7a>
 800f436:	2380      	movs	r3, #128	; 0x80
 800f438:	035b      	lsls	r3, r3, #13
 800f43a:	4133      	asrs	r3, r6
 800f43c:	18e4      	adds	r4, r4, r3
 800f43e:	43bc      	bics	r4, r7
 800f440:	2500      	movs	r5, #0
 800f442:	e7df      	b.n	800f404 <floor+0x40>
 800f444:	2e33      	cmp	r6, #51	; 0x33
 800f446:	dd09      	ble.n	800f45c <floor+0x98>
 800f448:	2380      	movs	r3, #128	; 0x80
 800f44a:	00db      	lsls	r3, r3, #3
 800f44c:	429e      	cmp	r6, r3
 800f44e:	d103      	bne.n	800f458 <floor+0x94>
 800f450:	0002      	movs	r2, r0
 800f452:	000b      	movs	r3, r1
 800f454:	f7f1 fb40 	bl	8000ad8 <__aeabi_dadd>
 800f458:	b005      	add	sp, #20
 800f45a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f45c:	2701      	movs	r7, #1
 800f45e:	4a19      	ldr	r2, [pc, #100]	; (800f4c4 <floor+0x100>)
 800f460:	427f      	negs	r7, r7
 800f462:	189b      	adds	r3, r3, r2
 800f464:	40df      	lsrs	r7, r3
 800f466:	4238      	tst	r0, r7
 800f468:	d0f6      	beq.n	800f458 <floor+0x94>
 800f46a:	9000      	str	r0, [sp, #0]
 800f46c:	9101      	str	r1, [sp, #4]
 800f46e:	4a11      	ldr	r2, [pc, #68]	; (800f4b4 <floor+0xf0>)
 800f470:	4b11      	ldr	r3, [pc, #68]	; (800f4b8 <floor+0xf4>)
 800f472:	9800      	ldr	r0, [sp, #0]
 800f474:	9901      	ldr	r1, [sp, #4]
 800f476:	f7f1 fb2f 	bl	8000ad8 <__aeabi_dadd>
 800f47a:	2200      	movs	r2, #0
 800f47c:	2300      	movs	r3, #0
 800f47e:	f7f1 f813 	bl	80004a8 <__aeabi_dcmpgt>
 800f482:	2800      	cmp	r0, #0
 800f484:	d0be      	beq.n	800f404 <floor+0x40>
 800f486:	2c00      	cmp	r4, #0
 800f488:	da02      	bge.n	800f490 <floor+0xcc>
 800f48a:	2e14      	cmp	r6, #20
 800f48c:	d102      	bne.n	800f494 <floor+0xd0>
 800f48e:	3401      	adds	r4, #1
 800f490:	43bd      	bics	r5, r7
 800f492:	e7b7      	b.n	800f404 <floor+0x40>
 800f494:	2334      	movs	r3, #52	; 0x34
 800f496:	1b9e      	subs	r6, r3, r6
 800f498:	3b33      	subs	r3, #51	; 0x33
 800f49a:	40b3      	lsls	r3, r6
 800f49c:	18ed      	adds	r5, r5, r3
 800f49e:	9b03      	ldr	r3, [sp, #12]
 800f4a0:	429d      	cmp	r5, r3
 800f4a2:	419b      	sbcs	r3, r3
 800f4a4:	425b      	negs	r3, r3
 800f4a6:	18e4      	adds	r4, r4, r3
 800f4a8:	e7f2      	b.n	800f490 <floor+0xcc>
 800f4aa:	2500      	movs	r5, #0
 800f4ac:	002c      	movs	r4, r5
 800f4ae:	e7a9      	b.n	800f404 <floor+0x40>
 800f4b0:	fffffc01 	.word	0xfffffc01
 800f4b4:	8800759c 	.word	0x8800759c
 800f4b8:	7e37e43c 	.word	0x7e37e43c
 800f4bc:	bff00000 	.word	0xbff00000
 800f4c0:	000fffff 	.word	0x000fffff
 800f4c4:	fffffbed 	.word	0xfffffbed

0800f4c8 <round>:
 800f4c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4ca:	004a      	lsls	r2, r1, #1
 800f4cc:	0007      	movs	r7, r0
 800f4ce:	481f      	ldr	r0, [pc, #124]	; (800f54c <round+0x84>)
 800f4d0:	0d52      	lsrs	r2, r2, #21
 800f4d2:	1815      	adds	r5, r2, r0
 800f4d4:	000e      	movs	r6, r1
 800f4d6:	2d13      	cmp	r5, #19
 800f4d8:	dc18      	bgt.n	800f50c <round+0x44>
 800f4da:	2d00      	cmp	r5, #0
 800f4dc:	da09      	bge.n	800f4f2 <round+0x2a>
 800f4de:	0fcb      	lsrs	r3, r1, #31
 800f4e0:	07db      	lsls	r3, r3, #31
 800f4e2:	2200      	movs	r2, #0
 800f4e4:	1c69      	adds	r1, r5, #1
 800f4e6:	d101      	bne.n	800f4ec <round+0x24>
 800f4e8:	4919      	ldr	r1, [pc, #100]	; (800f550 <round+0x88>)
 800f4ea:	430b      	orrs	r3, r1
 800f4ec:	0019      	movs	r1, r3
 800f4ee:	0010      	movs	r0, r2
 800f4f0:	e017      	b.n	800f522 <round+0x5a>
 800f4f2:	4a18      	ldr	r2, [pc, #96]	; (800f554 <round+0x8c>)
 800f4f4:	412a      	asrs	r2, r5
 800f4f6:	420a      	tst	r2, r1
 800f4f8:	d101      	bne.n	800f4fe <round+0x36>
 800f4fa:	2f00      	cmp	r7, #0
 800f4fc:	d012      	beq.n	800f524 <round+0x5c>
 800f4fe:	2380      	movs	r3, #128	; 0x80
 800f500:	031b      	lsls	r3, r3, #12
 800f502:	412b      	asrs	r3, r5
 800f504:	199b      	adds	r3, r3, r6
 800f506:	4393      	bics	r3, r2
 800f508:	2200      	movs	r2, #0
 800f50a:	e7ef      	b.n	800f4ec <round+0x24>
 800f50c:	2d33      	cmp	r5, #51	; 0x33
 800f50e:	dd0b      	ble.n	800f528 <round+0x60>
 800f510:	2380      	movs	r3, #128	; 0x80
 800f512:	00db      	lsls	r3, r3, #3
 800f514:	429d      	cmp	r5, r3
 800f516:	d105      	bne.n	800f524 <round+0x5c>
 800f518:	003a      	movs	r2, r7
 800f51a:	000b      	movs	r3, r1
 800f51c:	0038      	movs	r0, r7
 800f51e:	f7f1 fadb 	bl	8000ad8 <__aeabi_dadd>
 800f522:	0007      	movs	r7, r0
 800f524:	0038      	movs	r0, r7
 800f526:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f528:	2601      	movs	r6, #1
 800f52a:	480b      	ldr	r0, [pc, #44]	; (800f558 <round+0x90>)
 800f52c:	4276      	negs	r6, r6
 800f52e:	1812      	adds	r2, r2, r0
 800f530:	40d6      	lsrs	r6, r2
 800f532:	423e      	tst	r6, r7
 800f534:	d0f6      	beq.n	800f524 <round+0x5c>
 800f536:	2233      	movs	r2, #51	; 0x33
 800f538:	1b55      	subs	r5, r2, r5
 800f53a:	3a32      	subs	r2, #50	; 0x32
 800f53c:	40aa      	lsls	r2, r5
 800f53e:	19d2      	adds	r2, r2, r7
 800f540:	42ba      	cmp	r2, r7
 800f542:	41a4      	sbcs	r4, r4
 800f544:	4264      	negs	r4, r4
 800f546:	190b      	adds	r3, r1, r4
 800f548:	43b2      	bics	r2, r6
 800f54a:	e7cf      	b.n	800f4ec <round+0x24>
 800f54c:	fffffc01 	.word	0xfffffc01
 800f550:	3ff00000 	.word	0x3ff00000
 800f554:	000fffff 	.word	0x000fffff
 800f558:	fffffbed 	.word	0xfffffbed

0800f55c <_sbrk>:
 800f55c:	4b05      	ldr	r3, [pc, #20]	; (800f574 <_sbrk+0x18>)
 800f55e:	0002      	movs	r2, r0
 800f560:	6819      	ldr	r1, [r3, #0]
 800f562:	2900      	cmp	r1, #0
 800f564:	d101      	bne.n	800f56a <_sbrk+0xe>
 800f566:	4904      	ldr	r1, [pc, #16]	; (800f578 <_sbrk+0x1c>)
 800f568:	6019      	str	r1, [r3, #0]
 800f56a:	6818      	ldr	r0, [r3, #0]
 800f56c:	1882      	adds	r2, r0, r2
 800f56e:	601a      	str	r2, [r3, #0]
 800f570:	4770      	bx	lr
 800f572:	46c0      	nop			; (mov r8, r8)
 800f574:	200015a4 	.word	0x200015a4
 800f578:	20001948 	.word	0x20001948

0800f57c <_init>:
 800f57c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f57e:	46c0      	nop			; (mov r8, r8)
 800f580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f582:	bc08      	pop	{r3}
 800f584:	469e      	mov	lr, r3
 800f586:	4770      	bx	lr

0800f588 <_fini>:
 800f588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f58a:	46c0      	nop			; (mov r8, r8)
 800f58c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f58e:	bc08      	pop	{r3}
 800f590:	469e      	mov	lr, r3
 800f592:	4770      	bx	lr
