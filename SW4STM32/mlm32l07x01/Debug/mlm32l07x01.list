
mlm32l07x01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e9d4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000cd4  0800ea98  0800ea98  0001ea98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800f76c  0800f76c  0001f76c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800f774  0800f774  0001f774  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800f778  0800f778  0001f778  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000250  20000000  0800f77c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000014e4  20000250  0800f9cc  00020250  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20001734  0800f9cc  00021734  2**0
                  ALLOC
  9 .ARM.attributes 00000028  00000000  00000000  00020250  2**0
                  CONTENTS, READONLY
 10 .debug_line   0002a9b2  00000000  00000000  00020278  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   00046635  00000000  00000000  0004ac2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000096e1  00000000  00000000  0009125f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001bc0  00000000  00000000  0009a940  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000a9276  00000000  00000000  0009c500  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002830  00000000  00000000  00145778  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    00013cfb  00000000  00000000  00147fa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00023653  00000000  00000000  0015bca3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  0017f2f6  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00005630  00000000  00000000  0017f374  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stabstr      0000014d  00000000  00000000  001849a4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000250 	.word	0x20000250
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800ea7c 	.word	0x0800ea7c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000254 	.word	0x20000254
 8000104:	0800ea7c 	.word	0x0800ea7c

08000108 <__gnu_thumb1_case_uqi>:
 8000108:	b402      	push	{r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	5c09      	ldrb	r1, [r1, r0]
 8000112:	0049      	lsls	r1, r1, #1
 8000114:	448e      	add	lr, r1
 8000116:	bc02      	pop	{r1}
 8000118:	4770      	bx	lr
 800011a:	46c0      	nop			; (mov r8, r8)

0800011c <__gnu_thumb1_case_shi>:
 800011c:	b403      	push	{r0, r1}
 800011e:	4671      	mov	r1, lr
 8000120:	0849      	lsrs	r1, r1, #1
 8000122:	0040      	lsls	r0, r0, #1
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	5e09      	ldrsh	r1, [r1, r0]
 8000128:	0049      	lsls	r1, r1, #1
 800012a:	448e      	add	lr, r1
 800012c:	bc03      	pop	{r0, r1}
 800012e:	4770      	bx	lr

08000130 <__gnu_thumb1_case_uhi>:
 8000130:	b403      	push	{r0, r1}
 8000132:	4671      	mov	r1, lr
 8000134:	0849      	lsrs	r1, r1, #1
 8000136:	0040      	lsls	r0, r0, #1
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	5a09      	ldrh	r1, [r1, r0]
 800013c:	0049      	lsls	r1, r1, #1
 800013e:	448e      	add	lr, r1
 8000140:	bc03      	pop	{r0, r1}
 8000142:	4770      	bx	lr

08000144 <__udivsi3>:
 8000144:	2200      	movs	r2, #0
 8000146:	0843      	lsrs	r3, r0, #1
 8000148:	428b      	cmp	r3, r1
 800014a:	d374      	bcc.n	8000236 <__udivsi3+0xf2>
 800014c:	0903      	lsrs	r3, r0, #4
 800014e:	428b      	cmp	r3, r1
 8000150:	d35f      	bcc.n	8000212 <__udivsi3+0xce>
 8000152:	0a03      	lsrs	r3, r0, #8
 8000154:	428b      	cmp	r3, r1
 8000156:	d344      	bcc.n	80001e2 <__udivsi3+0x9e>
 8000158:	0b03      	lsrs	r3, r0, #12
 800015a:	428b      	cmp	r3, r1
 800015c:	d328      	bcc.n	80001b0 <__udivsi3+0x6c>
 800015e:	0c03      	lsrs	r3, r0, #16
 8000160:	428b      	cmp	r3, r1
 8000162:	d30d      	bcc.n	8000180 <__udivsi3+0x3c>
 8000164:	22ff      	movs	r2, #255	; 0xff
 8000166:	0209      	lsls	r1, r1, #8
 8000168:	ba12      	rev	r2, r2
 800016a:	0c03      	lsrs	r3, r0, #16
 800016c:	428b      	cmp	r3, r1
 800016e:	d302      	bcc.n	8000176 <__udivsi3+0x32>
 8000170:	1212      	asrs	r2, r2, #8
 8000172:	0209      	lsls	r1, r1, #8
 8000174:	d065      	beq.n	8000242 <__udivsi3+0xfe>
 8000176:	0b03      	lsrs	r3, r0, #12
 8000178:	428b      	cmp	r3, r1
 800017a:	d319      	bcc.n	80001b0 <__udivsi3+0x6c>
 800017c:	e000      	b.n	8000180 <__udivsi3+0x3c>
 800017e:	0a09      	lsrs	r1, r1, #8
 8000180:	0bc3      	lsrs	r3, r0, #15
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x46>
 8000186:	03cb      	lsls	r3, r1, #15
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b83      	lsrs	r3, r0, #14
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x52>
 8000192:	038b      	lsls	r3, r1, #14
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b43      	lsrs	r3, r0, #13
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x5e>
 800019e:	034b      	lsls	r3, r1, #13
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0b03      	lsrs	r3, r0, #12
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x6a>
 80001aa:	030b      	lsls	r3, r1, #12
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0ac3      	lsrs	r3, r0, #11
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x76>
 80001b6:	02cb      	lsls	r3, r1, #11
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a83      	lsrs	r3, r0, #10
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x82>
 80001c2:	028b      	lsls	r3, r1, #10
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a43      	lsrs	r3, r0, #9
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x8e>
 80001ce:	024b      	lsls	r3, r1, #9
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	0a03      	lsrs	r3, r0, #8
 80001d6:	428b      	cmp	r3, r1
 80001d8:	d301      	bcc.n	80001de <__udivsi3+0x9a>
 80001da:	020b      	lsls	r3, r1, #8
 80001dc:	1ac0      	subs	r0, r0, r3
 80001de:	4152      	adcs	r2, r2
 80001e0:	d2cd      	bcs.n	800017e <__udivsi3+0x3a>
 80001e2:	09c3      	lsrs	r3, r0, #7
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xa8>
 80001e8:	01cb      	lsls	r3, r1, #7
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0983      	lsrs	r3, r0, #6
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xb4>
 80001f4:	018b      	lsls	r3, r1, #6
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0943      	lsrs	r3, r0, #5
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xc0>
 8000200:	014b      	lsls	r3, r1, #5
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0903      	lsrs	r3, r0, #4
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xcc>
 800020c:	010b      	lsls	r3, r1, #4
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	08c3      	lsrs	r3, r0, #3
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xd8>
 8000218:	00cb      	lsls	r3, r1, #3
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	0883      	lsrs	r3, r0, #2
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xe4>
 8000224:	008b      	lsls	r3, r1, #2
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	0843      	lsrs	r3, r0, #1
 800022c:	428b      	cmp	r3, r1
 800022e:	d301      	bcc.n	8000234 <__udivsi3+0xf0>
 8000230:	004b      	lsls	r3, r1, #1
 8000232:	1ac0      	subs	r0, r0, r3
 8000234:	4152      	adcs	r2, r2
 8000236:	1a41      	subs	r1, r0, r1
 8000238:	d200      	bcs.n	800023c <__udivsi3+0xf8>
 800023a:	4601      	mov	r1, r0
 800023c:	4152      	adcs	r2, r2
 800023e:	4610      	mov	r0, r2
 8000240:	4770      	bx	lr
 8000242:	e7ff      	b.n	8000244 <__udivsi3+0x100>
 8000244:	b501      	push	{r0, lr}
 8000246:	2000      	movs	r0, #0
 8000248:	f000 f8f0 	bl	800042c <__aeabi_idiv0>
 800024c:	bd02      	pop	{r1, pc}
 800024e:	46c0      	nop			; (mov r8, r8)

08000250 <__aeabi_uidivmod>:
 8000250:	2900      	cmp	r1, #0
 8000252:	d0f7      	beq.n	8000244 <__udivsi3+0x100>
 8000254:	e776      	b.n	8000144 <__udivsi3>
 8000256:	4770      	bx	lr

08000258 <__divsi3>:
 8000258:	4603      	mov	r3, r0
 800025a:	430b      	orrs	r3, r1
 800025c:	d47f      	bmi.n	800035e <__divsi3+0x106>
 800025e:	2200      	movs	r2, #0
 8000260:	0843      	lsrs	r3, r0, #1
 8000262:	428b      	cmp	r3, r1
 8000264:	d374      	bcc.n	8000350 <__divsi3+0xf8>
 8000266:	0903      	lsrs	r3, r0, #4
 8000268:	428b      	cmp	r3, r1
 800026a:	d35f      	bcc.n	800032c <__divsi3+0xd4>
 800026c:	0a03      	lsrs	r3, r0, #8
 800026e:	428b      	cmp	r3, r1
 8000270:	d344      	bcc.n	80002fc <__divsi3+0xa4>
 8000272:	0b03      	lsrs	r3, r0, #12
 8000274:	428b      	cmp	r3, r1
 8000276:	d328      	bcc.n	80002ca <__divsi3+0x72>
 8000278:	0c03      	lsrs	r3, r0, #16
 800027a:	428b      	cmp	r3, r1
 800027c:	d30d      	bcc.n	800029a <__divsi3+0x42>
 800027e:	22ff      	movs	r2, #255	; 0xff
 8000280:	0209      	lsls	r1, r1, #8
 8000282:	ba12      	rev	r2, r2
 8000284:	0c03      	lsrs	r3, r0, #16
 8000286:	428b      	cmp	r3, r1
 8000288:	d302      	bcc.n	8000290 <__divsi3+0x38>
 800028a:	1212      	asrs	r2, r2, #8
 800028c:	0209      	lsls	r1, r1, #8
 800028e:	d065      	beq.n	800035c <__divsi3+0x104>
 8000290:	0b03      	lsrs	r3, r0, #12
 8000292:	428b      	cmp	r3, r1
 8000294:	d319      	bcc.n	80002ca <__divsi3+0x72>
 8000296:	e000      	b.n	800029a <__divsi3+0x42>
 8000298:	0a09      	lsrs	r1, r1, #8
 800029a:	0bc3      	lsrs	r3, r0, #15
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x4c>
 80002a0:	03cb      	lsls	r3, r1, #15
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b83      	lsrs	r3, r0, #14
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x58>
 80002ac:	038b      	lsls	r3, r1, #14
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0b43      	lsrs	r3, r0, #13
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x64>
 80002b8:	034b      	lsls	r3, r1, #13
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0b03      	lsrs	r3, r0, #12
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x70>
 80002c4:	030b      	lsls	r3, r1, #12
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0ac3      	lsrs	r3, r0, #11
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x7c>
 80002d0:	02cb      	lsls	r3, r1, #11
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a83      	lsrs	r3, r0, #10
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x88>
 80002dc:	028b      	lsls	r3, r1, #10
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0a43      	lsrs	r3, r0, #9
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0x94>
 80002e8:	024b      	lsls	r3, r1, #9
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	0a03      	lsrs	r3, r0, #8
 80002f0:	428b      	cmp	r3, r1
 80002f2:	d301      	bcc.n	80002f8 <__divsi3+0xa0>
 80002f4:	020b      	lsls	r3, r1, #8
 80002f6:	1ac0      	subs	r0, r0, r3
 80002f8:	4152      	adcs	r2, r2
 80002fa:	d2cd      	bcs.n	8000298 <__divsi3+0x40>
 80002fc:	09c3      	lsrs	r3, r0, #7
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xae>
 8000302:	01cb      	lsls	r3, r1, #7
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0983      	lsrs	r3, r0, #6
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xba>
 800030e:	018b      	lsls	r3, r1, #6
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0943      	lsrs	r3, r0, #5
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xc6>
 800031a:	014b      	lsls	r3, r1, #5
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0903      	lsrs	r3, r0, #4
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xd2>
 8000326:	010b      	lsls	r3, r1, #4
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	08c3      	lsrs	r3, r0, #3
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xde>
 8000332:	00cb      	lsls	r3, r1, #3
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	0883      	lsrs	r3, r0, #2
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xea>
 800033e:	008b      	lsls	r3, r1, #2
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	0843      	lsrs	r3, r0, #1
 8000346:	428b      	cmp	r3, r1
 8000348:	d301      	bcc.n	800034e <__divsi3+0xf6>
 800034a:	004b      	lsls	r3, r1, #1
 800034c:	1ac0      	subs	r0, r0, r3
 800034e:	4152      	adcs	r2, r2
 8000350:	1a41      	subs	r1, r0, r1
 8000352:	d200      	bcs.n	8000356 <__divsi3+0xfe>
 8000354:	4601      	mov	r1, r0
 8000356:	4152      	adcs	r2, r2
 8000358:	4610      	mov	r0, r2
 800035a:	4770      	bx	lr
 800035c:	e05d      	b.n	800041a <__divsi3+0x1c2>
 800035e:	0fca      	lsrs	r2, r1, #31
 8000360:	d000      	beq.n	8000364 <__divsi3+0x10c>
 8000362:	4249      	negs	r1, r1
 8000364:	1003      	asrs	r3, r0, #32
 8000366:	d300      	bcc.n	800036a <__divsi3+0x112>
 8000368:	4240      	negs	r0, r0
 800036a:	4053      	eors	r3, r2
 800036c:	2200      	movs	r2, #0
 800036e:	469c      	mov	ip, r3
 8000370:	0903      	lsrs	r3, r0, #4
 8000372:	428b      	cmp	r3, r1
 8000374:	d32d      	bcc.n	80003d2 <__divsi3+0x17a>
 8000376:	0a03      	lsrs	r3, r0, #8
 8000378:	428b      	cmp	r3, r1
 800037a:	d312      	bcc.n	80003a2 <__divsi3+0x14a>
 800037c:	22fc      	movs	r2, #252	; 0xfc
 800037e:	0189      	lsls	r1, r1, #6
 8000380:	ba12      	rev	r2, r2
 8000382:	0a03      	lsrs	r3, r0, #8
 8000384:	428b      	cmp	r3, r1
 8000386:	d30c      	bcc.n	80003a2 <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d308      	bcc.n	80003a2 <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	1192      	asrs	r2, r2, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d304      	bcc.n	80003a2 <__divsi3+0x14a>
 8000398:	0189      	lsls	r1, r1, #6
 800039a:	d03a      	beq.n	8000412 <__divsi3+0x1ba>
 800039c:	1192      	asrs	r2, r2, #6
 800039e:	e000      	b.n	80003a2 <__divsi3+0x14a>
 80003a0:	0989      	lsrs	r1, r1, #6
 80003a2:	09c3      	lsrs	r3, r0, #7
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x154>
 80003a8:	01cb      	lsls	r3, r1, #7
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0983      	lsrs	r3, r0, #6
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x160>
 80003b4:	018b      	lsls	r3, r1, #6
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	0943      	lsrs	r3, r0, #5
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x16c>
 80003c0:	014b      	lsls	r3, r1, #5
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0903      	lsrs	r3, r0, #4
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x178>
 80003cc:	010b      	lsls	r3, r1, #4
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	08c3      	lsrs	r3, r0, #3
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x184>
 80003d8:	00cb      	lsls	r3, r1, #3
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	0883      	lsrs	r3, r0, #2
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d301      	bcc.n	80003e8 <__divsi3+0x190>
 80003e4:	008b      	lsls	r3, r1, #2
 80003e6:	1ac0      	subs	r0, r0, r3
 80003e8:	4152      	adcs	r2, r2
 80003ea:	d2d9      	bcs.n	80003a0 <__divsi3+0x148>
 80003ec:	0843      	lsrs	r3, r0, #1
 80003ee:	428b      	cmp	r3, r1
 80003f0:	d301      	bcc.n	80003f6 <__divsi3+0x19e>
 80003f2:	004b      	lsls	r3, r1, #1
 80003f4:	1ac0      	subs	r0, r0, r3
 80003f6:	4152      	adcs	r2, r2
 80003f8:	1a41      	subs	r1, r0, r1
 80003fa:	d200      	bcs.n	80003fe <__divsi3+0x1a6>
 80003fc:	4601      	mov	r1, r0
 80003fe:	4663      	mov	r3, ip
 8000400:	4152      	adcs	r2, r2
 8000402:	105b      	asrs	r3, r3, #1
 8000404:	4610      	mov	r0, r2
 8000406:	d301      	bcc.n	800040c <__divsi3+0x1b4>
 8000408:	4240      	negs	r0, r0
 800040a:	2b00      	cmp	r3, #0
 800040c:	d500      	bpl.n	8000410 <__divsi3+0x1b8>
 800040e:	4249      	negs	r1, r1
 8000410:	4770      	bx	lr
 8000412:	4663      	mov	r3, ip
 8000414:	105b      	asrs	r3, r3, #1
 8000416:	d300      	bcc.n	800041a <__divsi3+0x1c2>
 8000418:	4240      	negs	r0, r0
 800041a:	b501      	push	{r0, lr}
 800041c:	2000      	movs	r0, #0
 800041e:	f000 f805 	bl	800042c <__aeabi_idiv0>
 8000422:	bd02      	pop	{r1, pc}

08000424 <__aeabi_idivmod>:
 8000424:	2900      	cmp	r1, #0
 8000426:	d0f8      	beq.n	800041a <__divsi3+0x1c2>
 8000428:	e716      	b.n	8000258 <__divsi3>
 800042a:	4770      	bx	lr

0800042c <__aeabi_idiv0>:
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__aeabi_cdrcmple>:
 8000430:	4684      	mov	ip, r0
 8000432:	1c10      	adds	r0, r2, #0
 8000434:	4662      	mov	r2, ip
 8000436:	468c      	mov	ip, r1
 8000438:	1c19      	adds	r1, r3, #0
 800043a:	4663      	mov	r3, ip
 800043c:	e000      	b.n	8000440 <__aeabi_cdcmpeq>
 800043e:	46c0      	nop			; (mov r8, r8)

08000440 <__aeabi_cdcmpeq>:
 8000440:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000442:	f001 f9f5 	bl	8001830 <__ledf2>
 8000446:	2800      	cmp	r0, #0
 8000448:	d401      	bmi.n	800044e <__aeabi_cdcmpeq+0xe>
 800044a:	2100      	movs	r1, #0
 800044c:	42c8      	cmn	r0, r1
 800044e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000450 <__aeabi_dcmpeq>:
 8000450:	b510      	push	{r4, lr}
 8000452:	f001 f94d 	bl	80016f0 <__eqdf2>
 8000456:	4240      	negs	r0, r0
 8000458:	3001      	adds	r0, #1
 800045a:	bd10      	pop	{r4, pc}

0800045c <__aeabi_dcmplt>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f001 f9e7 	bl	8001830 <__ledf2>
 8000462:	2800      	cmp	r0, #0
 8000464:	db01      	blt.n	800046a <__aeabi_dcmplt+0xe>
 8000466:	2000      	movs	r0, #0
 8000468:	bd10      	pop	{r4, pc}
 800046a:	2001      	movs	r0, #1
 800046c:	bd10      	pop	{r4, pc}
 800046e:	46c0      	nop			; (mov r8, r8)

08000470 <__aeabi_dcmple>:
 8000470:	b510      	push	{r4, lr}
 8000472:	f001 f9dd 	bl	8001830 <__ledf2>
 8000476:	2800      	cmp	r0, #0
 8000478:	dd01      	ble.n	800047e <__aeabi_dcmple+0xe>
 800047a:	2000      	movs	r0, #0
 800047c:	bd10      	pop	{r4, pc}
 800047e:	2001      	movs	r0, #1
 8000480:	bd10      	pop	{r4, pc}
 8000482:	46c0      	nop			; (mov r8, r8)

08000484 <__aeabi_dcmpgt>:
 8000484:	b510      	push	{r4, lr}
 8000486:	f001 f96f 	bl	8001768 <__gedf2>
 800048a:	2800      	cmp	r0, #0
 800048c:	dc01      	bgt.n	8000492 <__aeabi_dcmpgt+0xe>
 800048e:	2000      	movs	r0, #0
 8000490:	bd10      	pop	{r4, pc}
 8000492:	2001      	movs	r0, #1
 8000494:	bd10      	pop	{r4, pc}
 8000496:	46c0      	nop			; (mov r8, r8)

08000498 <__aeabi_dcmpge>:
 8000498:	b510      	push	{r4, lr}
 800049a:	f001 f965 	bl	8001768 <__gedf2>
 800049e:	2800      	cmp	r0, #0
 80004a0:	da01      	bge.n	80004a6 <__aeabi_dcmpge+0xe>
 80004a2:	2000      	movs	r0, #0
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	2001      	movs	r0, #1
 80004a8:	bd10      	pop	{r4, pc}
 80004aa:	46c0      	nop			; (mov r8, r8)

080004ac <__aeabi_uldivmod>:
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d111      	bne.n	80004d4 <__aeabi_uldivmod+0x28>
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	d10f      	bne.n	80004d4 <__aeabi_uldivmod+0x28>
 80004b4:	2900      	cmp	r1, #0
 80004b6:	d100      	bne.n	80004ba <__aeabi_uldivmod+0xe>
 80004b8:	2800      	cmp	r0, #0
 80004ba:	d002      	beq.n	80004c2 <__aeabi_uldivmod+0x16>
 80004bc:	2100      	movs	r1, #0
 80004be:	43c9      	mvns	r1, r1
 80004c0:	1c08      	adds	r0, r1, #0
 80004c2:	b407      	push	{r0, r1, r2}
 80004c4:	4802      	ldr	r0, [pc, #8]	; (80004d0 <__aeabi_uldivmod+0x24>)
 80004c6:	a102      	add	r1, pc, #8	; (adr r1, 80004d0 <__aeabi_uldivmod+0x24>)
 80004c8:	1840      	adds	r0, r0, r1
 80004ca:	9002      	str	r0, [sp, #8]
 80004cc:	bd03      	pop	{r0, r1, pc}
 80004ce:	46c0      	nop			; (mov r8, r8)
 80004d0:	ffffff5d 	.word	0xffffff5d
 80004d4:	b403      	push	{r0, r1}
 80004d6:	4668      	mov	r0, sp
 80004d8:	b501      	push	{r0, lr}
 80004da:	9802      	ldr	r0, [sp, #8]
 80004dc:	f000 f824 	bl	8000528 <__udivmoddi4>
 80004e0:	9b01      	ldr	r3, [sp, #4]
 80004e2:	469e      	mov	lr, r3
 80004e4:	b002      	add	sp, #8
 80004e6:	bc0c      	pop	{r2, r3}
 80004e8:	4770      	bx	lr
 80004ea:	46c0      	nop			; (mov r8, r8)

080004ec <__aeabi_d2uiz>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	2200      	movs	r2, #0
 80004f0:	4b0c      	ldr	r3, [pc, #48]	; (8000524 <__aeabi_d2uiz+0x38>)
 80004f2:	0004      	movs	r4, r0
 80004f4:	000d      	movs	r5, r1
 80004f6:	f7ff ffcf 	bl	8000498 <__aeabi_dcmpge>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	d104      	bne.n	8000508 <__aeabi_d2uiz+0x1c>
 80004fe:	0020      	movs	r0, r4
 8000500:	0029      	movs	r1, r5
 8000502:	f001 ffb7 	bl	8002474 <__aeabi_d2iz>
 8000506:	bd70      	pop	{r4, r5, r6, pc}
 8000508:	4b06      	ldr	r3, [pc, #24]	; (8000524 <__aeabi_d2uiz+0x38>)
 800050a:	2200      	movs	r2, #0
 800050c:	0020      	movs	r0, r4
 800050e:	0029      	movs	r1, r5
 8000510:	f001 fc68 	bl	8001de4 <__aeabi_dsub>
 8000514:	f001 ffae 	bl	8002474 <__aeabi_d2iz>
 8000518:	2380      	movs	r3, #128	; 0x80
 800051a:	061b      	lsls	r3, r3, #24
 800051c:	469c      	mov	ip, r3
 800051e:	4460      	add	r0, ip
 8000520:	e7f1      	b.n	8000506 <__aeabi_d2uiz+0x1a>
 8000522:	46c0      	nop			; (mov r8, r8)
 8000524:	41e00000 	.word	0x41e00000

08000528 <__udivmoddi4>:
 8000528:	b5f0      	push	{r4, r5, r6, r7, lr}
 800052a:	464f      	mov	r7, r9
 800052c:	4646      	mov	r6, r8
 800052e:	46d6      	mov	lr, sl
 8000530:	b5c0      	push	{r6, r7, lr}
 8000532:	0004      	movs	r4, r0
 8000534:	b082      	sub	sp, #8
 8000536:	000d      	movs	r5, r1
 8000538:	4691      	mov	r9, r2
 800053a:	4698      	mov	r8, r3
 800053c:	428b      	cmp	r3, r1
 800053e:	d82f      	bhi.n	80005a0 <__udivmoddi4+0x78>
 8000540:	d02c      	beq.n	800059c <__udivmoddi4+0x74>
 8000542:	4641      	mov	r1, r8
 8000544:	4648      	mov	r0, r9
 8000546:	f002 f8a7 	bl	8002698 <__clzdi2>
 800054a:	0029      	movs	r1, r5
 800054c:	0006      	movs	r6, r0
 800054e:	0020      	movs	r0, r4
 8000550:	f002 f8a2 	bl	8002698 <__clzdi2>
 8000554:	1a33      	subs	r3, r6, r0
 8000556:	469c      	mov	ip, r3
 8000558:	3b20      	subs	r3, #32
 800055a:	469a      	mov	sl, r3
 800055c:	d500      	bpl.n	8000560 <__udivmoddi4+0x38>
 800055e:	e076      	b.n	800064e <__udivmoddi4+0x126>
 8000560:	464b      	mov	r3, r9
 8000562:	4652      	mov	r2, sl
 8000564:	4093      	lsls	r3, r2
 8000566:	001f      	movs	r7, r3
 8000568:	464b      	mov	r3, r9
 800056a:	4662      	mov	r2, ip
 800056c:	4093      	lsls	r3, r2
 800056e:	001e      	movs	r6, r3
 8000570:	42af      	cmp	r7, r5
 8000572:	d828      	bhi.n	80005c6 <__udivmoddi4+0x9e>
 8000574:	d025      	beq.n	80005c2 <__udivmoddi4+0x9a>
 8000576:	4653      	mov	r3, sl
 8000578:	1ba4      	subs	r4, r4, r6
 800057a:	41bd      	sbcs	r5, r7
 800057c:	2b00      	cmp	r3, #0
 800057e:	da00      	bge.n	8000582 <__udivmoddi4+0x5a>
 8000580:	e07b      	b.n	800067a <__udivmoddi4+0x152>
 8000582:	2200      	movs	r2, #0
 8000584:	2300      	movs	r3, #0
 8000586:	9200      	str	r2, [sp, #0]
 8000588:	9301      	str	r3, [sp, #4]
 800058a:	2301      	movs	r3, #1
 800058c:	4652      	mov	r2, sl
 800058e:	4093      	lsls	r3, r2
 8000590:	9301      	str	r3, [sp, #4]
 8000592:	2301      	movs	r3, #1
 8000594:	4662      	mov	r2, ip
 8000596:	4093      	lsls	r3, r2
 8000598:	9300      	str	r3, [sp, #0]
 800059a:	e018      	b.n	80005ce <__udivmoddi4+0xa6>
 800059c:	4282      	cmp	r2, r0
 800059e:	d9d0      	bls.n	8000542 <__udivmoddi4+0x1a>
 80005a0:	2200      	movs	r2, #0
 80005a2:	2300      	movs	r3, #0
 80005a4:	9200      	str	r2, [sp, #0]
 80005a6:	9301      	str	r3, [sp, #4]
 80005a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <__udivmoddi4+0x8a>
 80005ae:	601c      	str	r4, [r3, #0]
 80005b0:	605d      	str	r5, [r3, #4]
 80005b2:	9800      	ldr	r0, [sp, #0]
 80005b4:	9901      	ldr	r1, [sp, #4]
 80005b6:	b002      	add	sp, #8
 80005b8:	bc1c      	pop	{r2, r3, r4}
 80005ba:	4690      	mov	r8, r2
 80005bc:	4699      	mov	r9, r3
 80005be:	46a2      	mov	sl, r4
 80005c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005c2:	42a3      	cmp	r3, r4
 80005c4:	d9d7      	bls.n	8000576 <__udivmoddi4+0x4e>
 80005c6:	2200      	movs	r2, #0
 80005c8:	2300      	movs	r3, #0
 80005ca:	9200      	str	r2, [sp, #0]
 80005cc:	9301      	str	r3, [sp, #4]
 80005ce:	4663      	mov	r3, ip
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d0e9      	beq.n	80005a8 <__udivmoddi4+0x80>
 80005d4:	07fb      	lsls	r3, r7, #31
 80005d6:	4698      	mov	r8, r3
 80005d8:	4641      	mov	r1, r8
 80005da:	0872      	lsrs	r2, r6, #1
 80005dc:	430a      	orrs	r2, r1
 80005de:	087b      	lsrs	r3, r7, #1
 80005e0:	4666      	mov	r6, ip
 80005e2:	e00e      	b.n	8000602 <__udivmoddi4+0xda>
 80005e4:	42ab      	cmp	r3, r5
 80005e6:	d101      	bne.n	80005ec <__udivmoddi4+0xc4>
 80005e8:	42a2      	cmp	r2, r4
 80005ea:	d80c      	bhi.n	8000606 <__udivmoddi4+0xde>
 80005ec:	1aa4      	subs	r4, r4, r2
 80005ee:	419d      	sbcs	r5, r3
 80005f0:	2001      	movs	r0, #1
 80005f2:	1924      	adds	r4, r4, r4
 80005f4:	416d      	adcs	r5, r5
 80005f6:	2100      	movs	r1, #0
 80005f8:	3e01      	subs	r6, #1
 80005fa:	1824      	adds	r4, r4, r0
 80005fc:	414d      	adcs	r5, r1
 80005fe:	2e00      	cmp	r6, #0
 8000600:	d006      	beq.n	8000610 <__udivmoddi4+0xe8>
 8000602:	42ab      	cmp	r3, r5
 8000604:	d9ee      	bls.n	80005e4 <__udivmoddi4+0xbc>
 8000606:	3e01      	subs	r6, #1
 8000608:	1924      	adds	r4, r4, r4
 800060a:	416d      	adcs	r5, r5
 800060c:	2e00      	cmp	r6, #0
 800060e:	d1f8      	bne.n	8000602 <__udivmoddi4+0xda>
 8000610:	9800      	ldr	r0, [sp, #0]
 8000612:	9901      	ldr	r1, [sp, #4]
 8000614:	4653      	mov	r3, sl
 8000616:	1900      	adds	r0, r0, r4
 8000618:	4169      	adcs	r1, r5
 800061a:	2b00      	cmp	r3, #0
 800061c:	db23      	blt.n	8000666 <__udivmoddi4+0x13e>
 800061e:	002b      	movs	r3, r5
 8000620:	4652      	mov	r2, sl
 8000622:	40d3      	lsrs	r3, r2
 8000624:	002a      	movs	r2, r5
 8000626:	4664      	mov	r4, ip
 8000628:	40e2      	lsrs	r2, r4
 800062a:	001c      	movs	r4, r3
 800062c:	4653      	mov	r3, sl
 800062e:	0015      	movs	r5, r2
 8000630:	2b00      	cmp	r3, #0
 8000632:	db2d      	blt.n	8000690 <__udivmoddi4+0x168>
 8000634:	0026      	movs	r6, r4
 8000636:	4657      	mov	r7, sl
 8000638:	40be      	lsls	r6, r7
 800063a:	0033      	movs	r3, r6
 800063c:	0026      	movs	r6, r4
 800063e:	4667      	mov	r7, ip
 8000640:	40be      	lsls	r6, r7
 8000642:	0032      	movs	r2, r6
 8000644:	1a80      	subs	r0, r0, r2
 8000646:	4199      	sbcs	r1, r3
 8000648:	9000      	str	r0, [sp, #0]
 800064a:	9101      	str	r1, [sp, #4]
 800064c:	e7ac      	b.n	80005a8 <__udivmoddi4+0x80>
 800064e:	4662      	mov	r2, ip
 8000650:	2320      	movs	r3, #32
 8000652:	1a9b      	subs	r3, r3, r2
 8000654:	464a      	mov	r2, r9
 8000656:	40da      	lsrs	r2, r3
 8000658:	4661      	mov	r1, ip
 800065a:	0013      	movs	r3, r2
 800065c:	4642      	mov	r2, r8
 800065e:	408a      	lsls	r2, r1
 8000660:	0017      	movs	r7, r2
 8000662:	431f      	orrs	r7, r3
 8000664:	e780      	b.n	8000568 <__udivmoddi4+0x40>
 8000666:	4662      	mov	r2, ip
 8000668:	2320      	movs	r3, #32
 800066a:	1a9b      	subs	r3, r3, r2
 800066c:	002a      	movs	r2, r5
 800066e:	4666      	mov	r6, ip
 8000670:	409a      	lsls	r2, r3
 8000672:	0023      	movs	r3, r4
 8000674:	40f3      	lsrs	r3, r6
 8000676:	4313      	orrs	r3, r2
 8000678:	e7d4      	b.n	8000624 <__udivmoddi4+0xfc>
 800067a:	4662      	mov	r2, ip
 800067c:	2320      	movs	r3, #32
 800067e:	2100      	movs	r1, #0
 8000680:	1a9b      	subs	r3, r3, r2
 8000682:	2200      	movs	r2, #0
 8000684:	9100      	str	r1, [sp, #0]
 8000686:	9201      	str	r2, [sp, #4]
 8000688:	2201      	movs	r2, #1
 800068a:	40da      	lsrs	r2, r3
 800068c:	9201      	str	r2, [sp, #4]
 800068e:	e780      	b.n	8000592 <__udivmoddi4+0x6a>
 8000690:	2320      	movs	r3, #32
 8000692:	4662      	mov	r2, ip
 8000694:	0026      	movs	r6, r4
 8000696:	1a9b      	subs	r3, r3, r2
 8000698:	40de      	lsrs	r6, r3
 800069a:	002f      	movs	r7, r5
 800069c:	46b0      	mov	r8, r6
 800069e:	4666      	mov	r6, ip
 80006a0:	40b7      	lsls	r7, r6
 80006a2:	4646      	mov	r6, r8
 80006a4:	003b      	movs	r3, r7
 80006a6:	4333      	orrs	r3, r6
 80006a8:	e7c8      	b.n	800063c <__udivmoddi4+0x114>
 80006aa:	46c0      	nop			; (mov r8, r8)

080006ac <__aeabi_fsub>:
 80006ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006ae:	4647      	mov	r7, r8
 80006b0:	46ce      	mov	lr, r9
 80006b2:	0044      	lsls	r4, r0, #1
 80006b4:	0fc2      	lsrs	r2, r0, #31
 80006b6:	b580      	push	{r7, lr}
 80006b8:	0247      	lsls	r7, r0, #9
 80006ba:	0248      	lsls	r0, r1, #9
 80006bc:	0a40      	lsrs	r0, r0, #9
 80006be:	4684      	mov	ip, r0
 80006c0:	4666      	mov	r6, ip
 80006c2:	0048      	lsls	r0, r1, #1
 80006c4:	0a7f      	lsrs	r7, r7, #9
 80006c6:	0e24      	lsrs	r4, r4, #24
 80006c8:	00f6      	lsls	r6, r6, #3
 80006ca:	0025      	movs	r5, r4
 80006cc:	4690      	mov	r8, r2
 80006ce:	00fb      	lsls	r3, r7, #3
 80006d0:	0e00      	lsrs	r0, r0, #24
 80006d2:	0fc9      	lsrs	r1, r1, #31
 80006d4:	46b1      	mov	r9, r6
 80006d6:	28ff      	cmp	r0, #255	; 0xff
 80006d8:	d100      	bne.n	80006dc <__aeabi_fsub+0x30>
 80006da:	e085      	b.n	80007e8 <__aeabi_fsub+0x13c>
 80006dc:	2601      	movs	r6, #1
 80006de:	4071      	eors	r1, r6
 80006e0:	1a26      	subs	r6, r4, r0
 80006e2:	4291      	cmp	r1, r2
 80006e4:	d057      	beq.n	8000796 <__aeabi_fsub+0xea>
 80006e6:	2e00      	cmp	r6, #0
 80006e8:	dd43      	ble.n	8000772 <__aeabi_fsub+0xc6>
 80006ea:	2800      	cmp	r0, #0
 80006ec:	d000      	beq.n	80006f0 <__aeabi_fsub+0x44>
 80006ee:	e07f      	b.n	80007f0 <__aeabi_fsub+0x144>
 80006f0:	4649      	mov	r1, r9
 80006f2:	2900      	cmp	r1, #0
 80006f4:	d100      	bne.n	80006f8 <__aeabi_fsub+0x4c>
 80006f6:	e0aa      	b.n	800084e <__aeabi_fsub+0x1a2>
 80006f8:	3e01      	subs	r6, #1
 80006fa:	2e00      	cmp	r6, #0
 80006fc:	d000      	beq.n	8000700 <__aeabi_fsub+0x54>
 80006fe:	e0f7      	b.n	80008f0 <__aeabi_fsub+0x244>
 8000700:	1a5b      	subs	r3, r3, r1
 8000702:	015a      	lsls	r2, r3, #5
 8000704:	d400      	bmi.n	8000708 <__aeabi_fsub+0x5c>
 8000706:	e08b      	b.n	8000820 <__aeabi_fsub+0x174>
 8000708:	019b      	lsls	r3, r3, #6
 800070a:	099c      	lsrs	r4, r3, #6
 800070c:	0020      	movs	r0, r4
 800070e:	f001 ffa5 	bl	800265c <__clzsi2>
 8000712:	3805      	subs	r0, #5
 8000714:	4084      	lsls	r4, r0
 8000716:	4285      	cmp	r5, r0
 8000718:	dd00      	ble.n	800071c <__aeabi_fsub+0x70>
 800071a:	e0d3      	b.n	80008c4 <__aeabi_fsub+0x218>
 800071c:	1b45      	subs	r5, r0, r5
 800071e:	0023      	movs	r3, r4
 8000720:	2020      	movs	r0, #32
 8000722:	3501      	adds	r5, #1
 8000724:	40eb      	lsrs	r3, r5
 8000726:	1b45      	subs	r5, r0, r5
 8000728:	40ac      	lsls	r4, r5
 800072a:	1e62      	subs	r2, r4, #1
 800072c:	4194      	sbcs	r4, r2
 800072e:	4323      	orrs	r3, r4
 8000730:	2407      	movs	r4, #7
 8000732:	2500      	movs	r5, #0
 8000734:	401c      	ands	r4, r3
 8000736:	2201      	movs	r2, #1
 8000738:	4641      	mov	r1, r8
 800073a:	400a      	ands	r2, r1
 800073c:	2c00      	cmp	r4, #0
 800073e:	d004      	beq.n	800074a <__aeabi_fsub+0x9e>
 8000740:	210f      	movs	r1, #15
 8000742:	4019      	ands	r1, r3
 8000744:	2904      	cmp	r1, #4
 8000746:	d000      	beq.n	800074a <__aeabi_fsub+0x9e>
 8000748:	3304      	adds	r3, #4
 800074a:	0159      	lsls	r1, r3, #5
 800074c:	d400      	bmi.n	8000750 <__aeabi_fsub+0xa4>
 800074e:	e080      	b.n	8000852 <__aeabi_fsub+0x1a6>
 8000750:	3501      	adds	r5, #1
 8000752:	b2ec      	uxtb	r4, r5
 8000754:	2dff      	cmp	r5, #255	; 0xff
 8000756:	d000      	beq.n	800075a <__aeabi_fsub+0xae>
 8000758:	e0a3      	b.n	80008a2 <__aeabi_fsub+0x1f6>
 800075a:	24ff      	movs	r4, #255	; 0xff
 800075c:	2300      	movs	r3, #0
 800075e:	025b      	lsls	r3, r3, #9
 8000760:	05e4      	lsls	r4, r4, #23
 8000762:	0a58      	lsrs	r0, r3, #9
 8000764:	07d2      	lsls	r2, r2, #31
 8000766:	4320      	orrs	r0, r4
 8000768:	4310      	orrs	r0, r2
 800076a:	bc0c      	pop	{r2, r3}
 800076c:	4690      	mov	r8, r2
 800076e:	4699      	mov	r9, r3
 8000770:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000772:	2e00      	cmp	r6, #0
 8000774:	d174      	bne.n	8000860 <__aeabi_fsub+0x1b4>
 8000776:	1c60      	adds	r0, r4, #1
 8000778:	b2c0      	uxtb	r0, r0
 800077a:	2801      	cmp	r0, #1
 800077c:	dc00      	bgt.n	8000780 <__aeabi_fsub+0xd4>
 800077e:	e0a7      	b.n	80008d0 <__aeabi_fsub+0x224>
 8000780:	464a      	mov	r2, r9
 8000782:	1a9c      	subs	r4, r3, r2
 8000784:	0162      	lsls	r2, r4, #5
 8000786:	d500      	bpl.n	800078a <__aeabi_fsub+0xde>
 8000788:	e0b6      	b.n	80008f8 <__aeabi_fsub+0x24c>
 800078a:	2c00      	cmp	r4, #0
 800078c:	d1be      	bne.n	800070c <__aeabi_fsub+0x60>
 800078e:	2200      	movs	r2, #0
 8000790:	2400      	movs	r4, #0
 8000792:	2300      	movs	r3, #0
 8000794:	e7e3      	b.n	800075e <__aeabi_fsub+0xb2>
 8000796:	2e00      	cmp	r6, #0
 8000798:	dc00      	bgt.n	800079c <__aeabi_fsub+0xf0>
 800079a:	e085      	b.n	80008a8 <__aeabi_fsub+0x1fc>
 800079c:	2800      	cmp	r0, #0
 800079e:	d046      	beq.n	800082e <__aeabi_fsub+0x182>
 80007a0:	2cff      	cmp	r4, #255	; 0xff
 80007a2:	d049      	beq.n	8000838 <__aeabi_fsub+0x18c>
 80007a4:	2280      	movs	r2, #128	; 0x80
 80007a6:	4648      	mov	r0, r9
 80007a8:	04d2      	lsls	r2, r2, #19
 80007aa:	4310      	orrs	r0, r2
 80007ac:	4681      	mov	r9, r0
 80007ae:	2201      	movs	r2, #1
 80007b0:	2e1b      	cmp	r6, #27
 80007b2:	dc09      	bgt.n	80007c8 <__aeabi_fsub+0x11c>
 80007b4:	2020      	movs	r0, #32
 80007b6:	464c      	mov	r4, r9
 80007b8:	1b80      	subs	r0, r0, r6
 80007ba:	4084      	lsls	r4, r0
 80007bc:	464a      	mov	r2, r9
 80007be:	0020      	movs	r0, r4
 80007c0:	40f2      	lsrs	r2, r6
 80007c2:	1e44      	subs	r4, r0, #1
 80007c4:	41a0      	sbcs	r0, r4
 80007c6:	4302      	orrs	r2, r0
 80007c8:	189b      	adds	r3, r3, r2
 80007ca:	015a      	lsls	r2, r3, #5
 80007cc:	d528      	bpl.n	8000820 <__aeabi_fsub+0x174>
 80007ce:	3501      	adds	r5, #1
 80007d0:	2dff      	cmp	r5, #255	; 0xff
 80007d2:	d100      	bne.n	80007d6 <__aeabi_fsub+0x12a>
 80007d4:	e0a8      	b.n	8000928 <__aeabi_fsub+0x27c>
 80007d6:	2201      	movs	r2, #1
 80007d8:	2407      	movs	r4, #7
 80007da:	4994      	ldr	r1, [pc, #592]	; (8000a2c <__aeabi_fsub+0x380>)
 80007dc:	401a      	ands	r2, r3
 80007de:	085b      	lsrs	r3, r3, #1
 80007e0:	400b      	ands	r3, r1
 80007e2:	4313      	orrs	r3, r2
 80007e4:	401c      	ands	r4, r3
 80007e6:	e7a6      	b.n	8000736 <__aeabi_fsub+0x8a>
 80007e8:	2e00      	cmp	r6, #0
 80007ea:	d000      	beq.n	80007ee <__aeabi_fsub+0x142>
 80007ec:	e778      	b.n	80006e0 <__aeabi_fsub+0x34>
 80007ee:	e775      	b.n	80006dc <__aeabi_fsub+0x30>
 80007f0:	2cff      	cmp	r4, #255	; 0xff
 80007f2:	d054      	beq.n	800089e <__aeabi_fsub+0x1f2>
 80007f4:	2280      	movs	r2, #128	; 0x80
 80007f6:	4649      	mov	r1, r9
 80007f8:	04d2      	lsls	r2, r2, #19
 80007fa:	4311      	orrs	r1, r2
 80007fc:	4689      	mov	r9, r1
 80007fe:	2201      	movs	r2, #1
 8000800:	2e1b      	cmp	r6, #27
 8000802:	dc09      	bgt.n	8000818 <__aeabi_fsub+0x16c>
 8000804:	2120      	movs	r1, #32
 8000806:	4648      	mov	r0, r9
 8000808:	1b89      	subs	r1, r1, r6
 800080a:	4088      	lsls	r0, r1
 800080c:	464a      	mov	r2, r9
 800080e:	0001      	movs	r1, r0
 8000810:	40f2      	lsrs	r2, r6
 8000812:	1e48      	subs	r0, r1, #1
 8000814:	4181      	sbcs	r1, r0
 8000816:	430a      	orrs	r2, r1
 8000818:	1a9b      	subs	r3, r3, r2
 800081a:	015a      	lsls	r2, r3, #5
 800081c:	d500      	bpl.n	8000820 <__aeabi_fsub+0x174>
 800081e:	e773      	b.n	8000708 <__aeabi_fsub+0x5c>
 8000820:	2201      	movs	r2, #1
 8000822:	4641      	mov	r1, r8
 8000824:	400a      	ands	r2, r1
 8000826:	0759      	lsls	r1, r3, #29
 8000828:	d000      	beq.n	800082c <__aeabi_fsub+0x180>
 800082a:	e789      	b.n	8000740 <__aeabi_fsub+0x94>
 800082c:	e011      	b.n	8000852 <__aeabi_fsub+0x1a6>
 800082e:	4648      	mov	r0, r9
 8000830:	2800      	cmp	r0, #0
 8000832:	d158      	bne.n	80008e6 <__aeabi_fsub+0x23a>
 8000834:	2cff      	cmp	r4, #255	; 0xff
 8000836:	d10c      	bne.n	8000852 <__aeabi_fsub+0x1a6>
 8000838:	08db      	lsrs	r3, r3, #3
 800083a:	2b00      	cmp	r3, #0
 800083c:	d100      	bne.n	8000840 <__aeabi_fsub+0x194>
 800083e:	e78c      	b.n	800075a <__aeabi_fsub+0xae>
 8000840:	2080      	movs	r0, #128	; 0x80
 8000842:	03c0      	lsls	r0, r0, #15
 8000844:	4303      	orrs	r3, r0
 8000846:	025b      	lsls	r3, r3, #9
 8000848:	0a5b      	lsrs	r3, r3, #9
 800084a:	24ff      	movs	r4, #255	; 0xff
 800084c:	e787      	b.n	800075e <__aeabi_fsub+0xb2>
 800084e:	2cff      	cmp	r4, #255	; 0xff
 8000850:	d025      	beq.n	800089e <__aeabi_fsub+0x1f2>
 8000852:	08db      	lsrs	r3, r3, #3
 8000854:	2dff      	cmp	r5, #255	; 0xff
 8000856:	d0f0      	beq.n	800083a <__aeabi_fsub+0x18e>
 8000858:	025b      	lsls	r3, r3, #9
 800085a:	0a5b      	lsrs	r3, r3, #9
 800085c:	b2ec      	uxtb	r4, r5
 800085e:	e77e      	b.n	800075e <__aeabi_fsub+0xb2>
 8000860:	2c00      	cmp	r4, #0
 8000862:	d04d      	beq.n	8000900 <__aeabi_fsub+0x254>
 8000864:	28ff      	cmp	r0, #255	; 0xff
 8000866:	d018      	beq.n	800089a <__aeabi_fsub+0x1ee>
 8000868:	2480      	movs	r4, #128	; 0x80
 800086a:	04e4      	lsls	r4, r4, #19
 800086c:	4272      	negs	r2, r6
 800086e:	4323      	orrs	r3, r4
 8000870:	2a1b      	cmp	r2, #27
 8000872:	dd00      	ble.n	8000876 <__aeabi_fsub+0x1ca>
 8000874:	e0c4      	b.n	8000a00 <__aeabi_fsub+0x354>
 8000876:	001c      	movs	r4, r3
 8000878:	2520      	movs	r5, #32
 800087a:	40d4      	lsrs	r4, r2
 800087c:	1aaa      	subs	r2, r5, r2
 800087e:	4093      	lsls	r3, r2
 8000880:	1e5a      	subs	r2, r3, #1
 8000882:	4193      	sbcs	r3, r2
 8000884:	4323      	orrs	r3, r4
 8000886:	464a      	mov	r2, r9
 8000888:	0005      	movs	r5, r0
 800088a:	1ad3      	subs	r3, r2, r3
 800088c:	4688      	mov	r8, r1
 800088e:	e738      	b.n	8000702 <__aeabi_fsub+0x56>
 8000890:	1c72      	adds	r2, r6, #1
 8000892:	d0f8      	beq.n	8000886 <__aeabi_fsub+0x1da>
 8000894:	43f2      	mvns	r2, r6
 8000896:	28ff      	cmp	r0, #255	; 0xff
 8000898:	d1ea      	bne.n	8000870 <__aeabi_fsub+0x1c4>
 800089a:	000a      	movs	r2, r1
 800089c:	464b      	mov	r3, r9
 800089e:	25ff      	movs	r5, #255	; 0xff
 80008a0:	e7d7      	b.n	8000852 <__aeabi_fsub+0x1a6>
 80008a2:	019b      	lsls	r3, r3, #6
 80008a4:	0a5b      	lsrs	r3, r3, #9
 80008a6:	e75a      	b.n	800075e <__aeabi_fsub+0xb2>
 80008a8:	2e00      	cmp	r6, #0
 80008aa:	d141      	bne.n	8000930 <__aeabi_fsub+0x284>
 80008ac:	1c65      	adds	r5, r4, #1
 80008ae:	b2e9      	uxtb	r1, r5
 80008b0:	2901      	cmp	r1, #1
 80008b2:	dd45      	ble.n	8000940 <__aeabi_fsub+0x294>
 80008b4:	2dff      	cmp	r5, #255	; 0xff
 80008b6:	d100      	bne.n	80008ba <__aeabi_fsub+0x20e>
 80008b8:	e74f      	b.n	800075a <__aeabi_fsub+0xae>
 80008ba:	2407      	movs	r4, #7
 80008bc:	444b      	add	r3, r9
 80008be:	085b      	lsrs	r3, r3, #1
 80008c0:	401c      	ands	r4, r3
 80008c2:	e738      	b.n	8000736 <__aeabi_fsub+0x8a>
 80008c4:	2207      	movs	r2, #7
 80008c6:	4b5a      	ldr	r3, [pc, #360]	; (8000a30 <__aeabi_fsub+0x384>)
 80008c8:	1a2d      	subs	r5, r5, r0
 80008ca:	4023      	ands	r3, r4
 80008cc:	4014      	ands	r4, r2
 80008ce:	e732      	b.n	8000736 <__aeabi_fsub+0x8a>
 80008d0:	2c00      	cmp	r4, #0
 80008d2:	d11d      	bne.n	8000910 <__aeabi_fsub+0x264>
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d17a      	bne.n	80009ce <__aeabi_fsub+0x322>
 80008d8:	464b      	mov	r3, r9
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d100      	bne.n	80008e0 <__aeabi_fsub+0x234>
 80008de:	e091      	b.n	8000a04 <__aeabi_fsub+0x358>
 80008e0:	000a      	movs	r2, r1
 80008e2:	2500      	movs	r5, #0
 80008e4:	e7b5      	b.n	8000852 <__aeabi_fsub+0x1a6>
 80008e6:	3e01      	subs	r6, #1
 80008e8:	2e00      	cmp	r6, #0
 80008ea:	d119      	bne.n	8000920 <__aeabi_fsub+0x274>
 80008ec:	444b      	add	r3, r9
 80008ee:	e76c      	b.n	80007ca <__aeabi_fsub+0x11e>
 80008f0:	2cff      	cmp	r4, #255	; 0xff
 80008f2:	d184      	bne.n	80007fe <__aeabi_fsub+0x152>
 80008f4:	25ff      	movs	r5, #255	; 0xff
 80008f6:	e7ac      	b.n	8000852 <__aeabi_fsub+0x1a6>
 80008f8:	464a      	mov	r2, r9
 80008fa:	4688      	mov	r8, r1
 80008fc:	1ad4      	subs	r4, r2, r3
 80008fe:	e705      	b.n	800070c <__aeabi_fsub+0x60>
 8000900:	2b00      	cmp	r3, #0
 8000902:	d1c5      	bne.n	8000890 <__aeabi_fsub+0x1e4>
 8000904:	000a      	movs	r2, r1
 8000906:	28ff      	cmp	r0, #255	; 0xff
 8000908:	d0c8      	beq.n	800089c <__aeabi_fsub+0x1f0>
 800090a:	0005      	movs	r5, r0
 800090c:	464b      	mov	r3, r9
 800090e:	e7a0      	b.n	8000852 <__aeabi_fsub+0x1a6>
 8000910:	2b00      	cmp	r3, #0
 8000912:	d149      	bne.n	80009a8 <__aeabi_fsub+0x2fc>
 8000914:	464b      	mov	r3, r9
 8000916:	2b00      	cmp	r3, #0
 8000918:	d077      	beq.n	8000a0a <__aeabi_fsub+0x35e>
 800091a:	000a      	movs	r2, r1
 800091c:	25ff      	movs	r5, #255	; 0xff
 800091e:	e798      	b.n	8000852 <__aeabi_fsub+0x1a6>
 8000920:	2cff      	cmp	r4, #255	; 0xff
 8000922:	d000      	beq.n	8000926 <__aeabi_fsub+0x27a>
 8000924:	e743      	b.n	80007ae <__aeabi_fsub+0x102>
 8000926:	e787      	b.n	8000838 <__aeabi_fsub+0x18c>
 8000928:	000a      	movs	r2, r1
 800092a:	24ff      	movs	r4, #255	; 0xff
 800092c:	2300      	movs	r3, #0
 800092e:	e716      	b.n	800075e <__aeabi_fsub+0xb2>
 8000930:	2c00      	cmp	r4, #0
 8000932:	d115      	bne.n	8000960 <__aeabi_fsub+0x2b4>
 8000934:	2b00      	cmp	r3, #0
 8000936:	d157      	bne.n	80009e8 <__aeabi_fsub+0x33c>
 8000938:	28ff      	cmp	r0, #255	; 0xff
 800093a:	d1e6      	bne.n	800090a <__aeabi_fsub+0x25e>
 800093c:	464b      	mov	r3, r9
 800093e:	e77b      	b.n	8000838 <__aeabi_fsub+0x18c>
 8000940:	2c00      	cmp	r4, #0
 8000942:	d120      	bne.n	8000986 <__aeabi_fsub+0x2da>
 8000944:	2b00      	cmp	r3, #0
 8000946:	d057      	beq.n	80009f8 <__aeabi_fsub+0x34c>
 8000948:	4649      	mov	r1, r9
 800094a:	2900      	cmp	r1, #0
 800094c:	d053      	beq.n	80009f6 <__aeabi_fsub+0x34a>
 800094e:	444b      	add	r3, r9
 8000950:	015a      	lsls	r2, r3, #5
 8000952:	d568      	bpl.n	8000a26 <__aeabi_fsub+0x37a>
 8000954:	2407      	movs	r4, #7
 8000956:	4a36      	ldr	r2, [pc, #216]	; (8000a30 <__aeabi_fsub+0x384>)
 8000958:	401c      	ands	r4, r3
 800095a:	2501      	movs	r5, #1
 800095c:	4013      	ands	r3, r2
 800095e:	e6ea      	b.n	8000736 <__aeabi_fsub+0x8a>
 8000960:	28ff      	cmp	r0, #255	; 0xff
 8000962:	d0eb      	beq.n	800093c <__aeabi_fsub+0x290>
 8000964:	2280      	movs	r2, #128	; 0x80
 8000966:	04d2      	lsls	r2, r2, #19
 8000968:	4276      	negs	r6, r6
 800096a:	4313      	orrs	r3, r2
 800096c:	2e1b      	cmp	r6, #27
 800096e:	dc53      	bgt.n	8000a18 <__aeabi_fsub+0x36c>
 8000970:	2520      	movs	r5, #32
 8000972:	1bad      	subs	r5, r5, r6
 8000974:	001a      	movs	r2, r3
 8000976:	40ab      	lsls	r3, r5
 8000978:	40f2      	lsrs	r2, r6
 800097a:	1e5c      	subs	r4, r3, #1
 800097c:	41a3      	sbcs	r3, r4
 800097e:	4313      	orrs	r3, r2
 8000980:	444b      	add	r3, r9
 8000982:	0005      	movs	r5, r0
 8000984:	e721      	b.n	80007ca <__aeabi_fsub+0x11e>
 8000986:	2b00      	cmp	r3, #0
 8000988:	d0d8      	beq.n	800093c <__aeabi_fsub+0x290>
 800098a:	4649      	mov	r1, r9
 800098c:	2900      	cmp	r1, #0
 800098e:	d100      	bne.n	8000992 <__aeabi_fsub+0x2e6>
 8000990:	e752      	b.n	8000838 <__aeabi_fsub+0x18c>
 8000992:	2180      	movs	r1, #128	; 0x80
 8000994:	03c9      	lsls	r1, r1, #15
 8000996:	420f      	tst	r7, r1
 8000998:	d100      	bne.n	800099c <__aeabi_fsub+0x2f0>
 800099a:	e74d      	b.n	8000838 <__aeabi_fsub+0x18c>
 800099c:	4660      	mov	r0, ip
 800099e:	4208      	tst	r0, r1
 80009a0:	d000      	beq.n	80009a4 <__aeabi_fsub+0x2f8>
 80009a2:	e749      	b.n	8000838 <__aeabi_fsub+0x18c>
 80009a4:	464b      	mov	r3, r9
 80009a6:	e747      	b.n	8000838 <__aeabi_fsub+0x18c>
 80009a8:	4648      	mov	r0, r9
 80009aa:	25ff      	movs	r5, #255	; 0xff
 80009ac:	2800      	cmp	r0, #0
 80009ae:	d100      	bne.n	80009b2 <__aeabi_fsub+0x306>
 80009b0:	e74f      	b.n	8000852 <__aeabi_fsub+0x1a6>
 80009b2:	2280      	movs	r2, #128	; 0x80
 80009b4:	03d2      	lsls	r2, r2, #15
 80009b6:	4217      	tst	r7, r2
 80009b8:	d004      	beq.n	80009c4 <__aeabi_fsub+0x318>
 80009ba:	4660      	mov	r0, ip
 80009bc:	4210      	tst	r0, r2
 80009be:	d101      	bne.n	80009c4 <__aeabi_fsub+0x318>
 80009c0:	464b      	mov	r3, r9
 80009c2:	4688      	mov	r8, r1
 80009c4:	2201      	movs	r2, #1
 80009c6:	4641      	mov	r1, r8
 80009c8:	25ff      	movs	r5, #255	; 0xff
 80009ca:	400a      	ands	r2, r1
 80009cc:	e741      	b.n	8000852 <__aeabi_fsub+0x1a6>
 80009ce:	4648      	mov	r0, r9
 80009d0:	2800      	cmp	r0, #0
 80009d2:	d01f      	beq.n	8000a14 <__aeabi_fsub+0x368>
 80009d4:	1a1a      	subs	r2, r3, r0
 80009d6:	0150      	lsls	r0, r2, #5
 80009d8:	d520      	bpl.n	8000a1c <__aeabi_fsub+0x370>
 80009da:	464a      	mov	r2, r9
 80009dc:	2407      	movs	r4, #7
 80009de:	1ad3      	subs	r3, r2, r3
 80009e0:	401c      	ands	r4, r3
 80009e2:	4688      	mov	r8, r1
 80009e4:	2500      	movs	r5, #0
 80009e6:	e6a6      	b.n	8000736 <__aeabi_fsub+0x8a>
 80009e8:	1c74      	adds	r4, r6, #1
 80009ea:	d0c9      	beq.n	8000980 <__aeabi_fsub+0x2d4>
 80009ec:	43f6      	mvns	r6, r6
 80009ee:	28ff      	cmp	r0, #255	; 0xff
 80009f0:	d1bc      	bne.n	800096c <__aeabi_fsub+0x2c0>
 80009f2:	464b      	mov	r3, r9
 80009f4:	e720      	b.n	8000838 <__aeabi_fsub+0x18c>
 80009f6:	4699      	mov	r9, r3
 80009f8:	464b      	mov	r3, r9
 80009fa:	2500      	movs	r5, #0
 80009fc:	08db      	lsrs	r3, r3, #3
 80009fe:	e72b      	b.n	8000858 <__aeabi_fsub+0x1ac>
 8000a00:	2301      	movs	r3, #1
 8000a02:	e740      	b.n	8000886 <__aeabi_fsub+0x1da>
 8000a04:	2200      	movs	r2, #0
 8000a06:	2300      	movs	r3, #0
 8000a08:	e6a9      	b.n	800075e <__aeabi_fsub+0xb2>
 8000a0a:	2380      	movs	r3, #128	; 0x80
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	03db      	lsls	r3, r3, #15
 8000a10:	24ff      	movs	r4, #255	; 0xff
 8000a12:	e6a4      	b.n	800075e <__aeabi_fsub+0xb2>
 8000a14:	2500      	movs	r5, #0
 8000a16:	e71c      	b.n	8000852 <__aeabi_fsub+0x1a6>
 8000a18:	2301      	movs	r3, #1
 8000a1a:	e7b1      	b.n	8000980 <__aeabi_fsub+0x2d4>
 8000a1c:	2a00      	cmp	r2, #0
 8000a1e:	d0f1      	beq.n	8000a04 <__aeabi_fsub+0x358>
 8000a20:	0013      	movs	r3, r2
 8000a22:	2500      	movs	r5, #0
 8000a24:	e6fc      	b.n	8000820 <__aeabi_fsub+0x174>
 8000a26:	2500      	movs	r5, #0
 8000a28:	e6fa      	b.n	8000820 <__aeabi_fsub+0x174>
 8000a2a:	46c0      	nop			; (mov r8, r8)
 8000a2c:	7dffffff 	.word	0x7dffffff
 8000a30:	fbffffff 	.word	0xfbffffff

08000a34 <__aeabi_ui2f>:
 8000a34:	b570      	push	{r4, r5, r6, lr}
 8000a36:	1e04      	subs	r4, r0, #0
 8000a38:	d034      	beq.n	8000aa4 <__aeabi_ui2f+0x70>
 8000a3a:	f001 fe0f 	bl	800265c <__clzsi2>
 8000a3e:	229e      	movs	r2, #158	; 0x9e
 8000a40:	1a12      	subs	r2, r2, r0
 8000a42:	2a96      	cmp	r2, #150	; 0x96
 8000a44:	dc07      	bgt.n	8000a56 <__aeabi_ui2f+0x22>
 8000a46:	b2d2      	uxtb	r2, r2
 8000a48:	2808      	cmp	r0, #8
 8000a4a:	dd2e      	ble.n	8000aaa <__aeabi_ui2f+0x76>
 8000a4c:	3808      	subs	r0, #8
 8000a4e:	4084      	lsls	r4, r0
 8000a50:	0260      	lsls	r0, r4, #9
 8000a52:	0a40      	lsrs	r0, r0, #9
 8000a54:	e021      	b.n	8000a9a <__aeabi_ui2f+0x66>
 8000a56:	2a99      	cmp	r2, #153	; 0x99
 8000a58:	dd09      	ble.n	8000a6e <__aeabi_ui2f+0x3a>
 8000a5a:	0003      	movs	r3, r0
 8000a5c:	0021      	movs	r1, r4
 8000a5e:	331b      	adds	r3, #27
 8000a60:	4099      	lsls	r1, r3
 8000a62:	1e4b      	subs	r3, r1, #1
 8000a64:	4199      	sbcs	r1, r3
 8000a66:	2305      	movs	r3, #5
 8000a68:	1a1b      	subs	r3, r3, r0
 8000a6a:	40dc      	lsrs	r4, r3
 8000a6c:	430c      	orrs	r4, r1
 8000a6e:	2805      	cmp	r0, #5
 8000a70:	dd01      	ble.n	8000a76 <__aeabi_ui2f+0x42>
 8000a72:	1f43      	subs	r3, r0, #5
 8000a74:	409c      	lsls	r4, r3
 8000a76:	0023      	movs	r3, r4
 8000a78:	490d      	ldr	r1, [pc, #52]	; (8000ab0 <__aeabi_ui2f+0x7c>)
 8000a7a:	400b      	ands	r3, r1
 8000a7c:	0765      	lsls	r5, r4, #29
 8000a7e:	d009      	beq.n	8000a94 <__aeabi_ui2f+0x60>
 8000a80:	250f      	movs	r5, #15
 8000a82:	402c      	ands	r4, r5
 8000a84:	2c04      	cmp	r4, #4
 8000a86:	d005      	beq.n	8000a94 <__aeabi_ui2f+0x60>
 8000a88:	3304      	adds	r3, #4
 8000a8a:	015c      	lsls	r4, r3, #5
 8000a8c:	d502      	bpl.n	8000a94 <__aeabi_ui2f+0x60>
 8000a8e:	229f      	movs	r2, #159	; 0x9f
 8000a90:	400b      	ands	r3, r1
 8000a92:	1a12      	subs	r2, r2, r0
 8000a94:	019b      	lsls	r3, r3, #6
 8000a96:	0a58      	lsrs	r0, r3, #9
 8000a98:	b2d2      	uxtb	r2, r2
 8000a9a:	0240      	lsls	r0, r0, #9
 8000a9c:	05d2      	lsls	r2, r2, #23
 8000a9e:	0a40      	lsrs	r0, r0, #9
 8000aa0:	4310      	orrs	r0, r2
 8000aa2:	bd70      	pop	{r4, r5, r6, pc}
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	2000      	movs	r0, #0
 8000aa8:	e7f7      	b.n	8000a9a <__aeabi_ui2f+0x66>
 8000aaa:	0260      	lsls	r0, r4, #9
 8000aac:	0a40      	lsrs	r0, r0, #9
 8000aae:	e7f4      	b.n	8000a9a <__aeabi_ui2f+0x66>
 8000ab0:	fbffffff 	.word	0xfbffffff

08000ab4 <__aeabi_dadd>:
 8000ab4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ab6:	464f      	mov	r7, r9
 8000ab8:	4646      	mov	r6, r8
 8000aba:	46d6      	mov	lr, sl
 8000abc:	000c      	movs	r4, r1
 8000abe:	0309      	lsls	r1, r1, #12
 8000ac0:	b5c0      	push	{r6, r7, lr}
 8000ac2:	0a49      	lsrs	r1, r1, #9
 8000ac4:	0f47      	lsrs	r7, r0, #29
 8000ac6:	005e      	lsls	r6, r3, #1
 8000ac8:	4339      	orrs	r1, r7
 8000aca:	031f      	lsls	r7, r3, #12
 8000acc:	0fdb      	lsrs	r3, r3, #31
 8000ace:	469c      	mov	ip, r3
 8000ad0:	0065      	lsls	r5, r4, #1
 8000ad2:	0a7b      	lsrs	r3, r7, #9
 8000ad4:	0f57      	lsrs	r7, r2, #29
 8000ad6:	431f      	orrs	r7, r3
 8000ad8:	0d6d      	lsrs	r5, r5, #21
 8000ada:	0fe4      	lsrs	r4, r4, #31
 8000adc:	0d76      	lsrs	r6, r6, #21
 8000ade:	46a1      	mov	r9, r4
 8000ae0:	00c0      	lsls	r0, r0, #3
 8000ae2:	46b8      	mov	r8, r7
 8000ae4:	00d2      	lsls	r2, r2, #3
 8000ae6:	1bab      	subs	r3, r5, r6
 8000ae8:	4564      	cmp	r4, ip
 8000aea:	d07b      	beq.n	8000be4 <__aeabi_dadd+0x130>
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	dd5f      	ble.n	8000bb0 <__aeabi_dadd+0xfc>
 8000af0:	2e00      	cmp	r6, #0
 8000af2:	d000      	beq.n	8000af6 <__aeabi_dadd+0x42>
 8000af4:	e0a4      	b.n	8000c40 <__aeabi_dadd+0x18c>
 8000af6:	003e      	movs	r6, r7
 8000af8:	4316      	orrs	r6, r2
 8000afa:	d100      	bne.n	8000afe <__aeabi_dadd+0x4a>
 8000afc:	e112      	b.n	8000d24 <__aeabi_dadd+0x270>
 8000afe:	1e5e      	subs	r6, r3, #1
 8000b00:	2e00      	cmp	r6, #0
 8000b02:	d000      	beq.n	8000b06 <__aeabi_dadd+0x52>
 8000b04:	e19e      	b.n	8000e44 <__aeabi_dadd+0x390>
 8000b06:	1a87      	subs	r7, r0, r2
 8000b08:	4643      	mov	r3, r8
 8000b0a:	42b8      	cmp	r0, r7
 8000b0c:	4180      	sbcs	r0, r0
 8000b0e:	2501      	movs	r5, #1
 8000b10:	1ac9      	subs	r1, r1, r3
 8000b12:	4240      	negs	r0, r0
 8000b14:	1a09      	subs	r1, r1, r0
 8000b16:	020b      	lsls	r3, r1, #8
 8000b18:	d400      	bmi.n	8000b1c <__aeabi_dadd+0x68>
 8000b1a:	e131      	b.n	8000d80 <__aeabi_dadd+0x2cc>
 8000b1c:	0249      	lsls	r1, r1, #9
 8000b1e:	0a4e      	lsrs	r6, r1, #9
 8000b20:	2e00      	cmp	r6, #0
 8000b22:	d100      	bne.n	8000b26 <__aeabi_dadd+0x72>
 8000b24:	e16e      	b.n	8000e04 <__aeabi_dadd+0x350>
 8000b26:	0030      	movs	r0, r6
 8000b28:	f001 fd98 	bl	800265c <__clzsi2>
 8000b2c:	0003      	movs	r3, r0
 8000b2e:	3b08      	subs	r3, #8
 8000b30:	2b1f      	cmp	r3, #31
 8000b32:	dd00      	ble.n	8000b36 <__aeabi_dadd+0x82>
 8000b34:	e161      	b.n	8000dfa <__aeabi_dadd+0x346>
 8000b36:	2220      	movs	r2, #32
 8000b38:	0039      	movs	r1, r7
 8000b3a:	1ad2      	subs	r2, r2, r3
 8000b3c:	409e      	lsls	r6, r3
 8000b3e:	40d1      	lsrs	r1, r2
 8000b40:	409f      	lsls	r7, r3
 8000b42:	430e      	orrs	r6, r1
 8000b44:	429d      	cmp	r5, r3
 8000b46:	dd00      	ble.n	8000b4a <__aeabi_dadd+0x96>
 8000b48:	e151      	b.n	8000dee <__aeabi_dadd+0x33a>
 8000b4a:	1b5d      	subs	r5, r3, r5
 8000b4c:	1c6b      	adds	r3, r5, #1
 8000b4e:	2b1f      	cmp	r3, #31
 8000b50:	dd00      	ble.n	8000b54 <__aeabi_dadd+0xa0>
 8000b52:	e17c      	b.n	8000e4e <__aeabi_dadd+0x39a>
 8000b54:	2120      	movs	r1, #32
 8000b56:	1ac9      	subs	r1, r1, r3
 8000b58:	003d      	movs	r5, r7
 8000b5a:	0030      	movs	r0, r6
 8000b5c:	408f      	lsls	r7, r1
 8000b5e:	4088      	lsls	r0, r1
 8000b60:	40dd      	lsrs	r5, r3
 8000b62:	1e79      	subs	r1, r7, #1
 8000b64:	418f      	sbcs	r7, r1
 8000b66:	0031      	movs	r1, r6
 8000b68:	2207      	movs	r2, #7
 8000b6a:	4328      	orrs	r0, r5
 8000b6c:	40d9      	lsrs	r1, r3
 8000b6e:	2500      	movs	r5, #0
 8000b70:	4307      	orrs	r7, r0
 8000b72:	403a      	ands	r2, r7
 8000b74:	2a00      	cmp	r2, #0
 8000b76:	d009      	beq.n	8000b8c <__aeabi_dadd+0xd8>
 8000b78:	230f      	movs	r3, #15
 8000b7a:	403b      	ands	r3, r7
 8000b7c:	2b04      	cmp	r3, #4
 8000b7e:	d005      	beq.n	8000b8c <__aeabi_dadd+0xd8>
 8000b80:	1d3b      	adds	r3, r7, #4
 8000b82:	42bb      	cmp	r3, r7
 8000b84:	41bf      	sbcs	r7, r7
 8000b86:	427f      	negs	r7, r7
 8000b88:	19c9      	adds	r1, r1, r7
 8000b8a:	001f      	movs	r7, r3
 8000b8c:	020b      	lsls	r3, r1, #8
 8000b8e:	d400      	bmi.n	8000b92 <__aeabi_dadd+0xde>
 8000b90:	e226      	b.n	8000fe0 <__aeabi_dadd+0x52c>
 8000b92:	1c6a      	adds	r2, r5, #1
 8000b94:	4bc6      	ldr	r3, [pc, #792]	; (8000eb0 <__aeabi_dadd+0x3fc>)
 8000b96:	0555      	lsls	r5, r2, #21
 8000b98:	0d6d      	lsrs	r5, r5, #21
 8000b9a:	429a      	cmp	r2, r3
 8000b9c:	d100      	bne.n	8000ba0 <__aeabi_dadd+0xec>
 8000b9e:	e106      	b.n	8000dae <__aeabi_dadd+0x2fa>
 8000ba0:	4ac4      	ldr	r2, [pc, #784]	; (8000eb4 <__aeabi_dadd+0x400>)
 8000ba2:	08ff      	lsrs	r7, r7, #3
 8000ba4:	400a      	ands	r2, r1
 8000ba6:	0753      	lsls	r3, r2, #29
 8000ba8:	0252      	lsls	r2, r2, #9
 8000baa:	433b      	orrs	r3, r7
 8000bac:	0b12      	lsrs	r2, r2, #12
 8000bae:	e08e      	b.n	8000cce <__aeabi_dadd+0x21a>
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d000      	beq.n	8000bb6 <__aeabi_dadd+0x102>
 8000bb4:	e0b8      	b.n	8000d28 <__aeabi_dadd+0x274>
 8000bb6:	1c6b      	adds	r3, r5, #1
 8000bb8:	055b      	lsls	r3, r3, #21
 8000bba:	0d5b      	lsrs	r3, r3, #21
 8000bbc:	2b01      	cmp	r3, #1
 8000bbe:	dc00      	bgt.n	8000bc2 <__aeabi_dadd+0x10e>
 8000bc0:	e130      	b.n	8000e24 <__aeabi_dadd+0x370>
 8000bc2:	1a87      	subs	r7, r0, r2
 8000bc4:	4643      	mov	r3, r8
 8000bc6:	42b8      	cmp	r0, r7
 8000bc8:	41b6      	sbcs	r6, r6
 8000bca:	1acb      	subs	r3, r1, r3
 8000bcc:	4276      	negs	r6, r6
 8000bce:	1b9e      	subs	r6, r3, r6
 8000bd0:	0233      	lsls	r3, r6, #8
 8000bd2:	d500      	bpl.n	8000bd6 <__aeabi_dadd+0x122>
 8000bd4:	e14c      	b.n	8000e70 <__aeabi_dadd+0x3bc>
 8000bd6:	003b      	movs	r3, r7
 8000bd8:	4333      	orrs	r3, r6
 8000bda:	d1a1      	bne.n	8000b20 <__aeabi_dadd+0x6c>
 8000bdc:	2200      	movs	r2, #0
 8000bde:	2400      	movs	r4, #0
 8000be0:	2500      	movs	r5, #0
 8000be2:	e070      	b.n	8000cc6 <__aeabi_dadd+0x212>
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	dc00      	bgt.n	8000bea <__aeabi_dadd+0x136>
 8000be8:	e0e5      	b.n	8000db6 <__aeabi_dadd+0x302>
 8000bea:	2e00      	cmp	r6, #0
 8000bec:	d100      	bne.n	8000bf0 <__aeabi_dadd+0x13c>
 8000bee:	e083      	b.n	8000cf8 <__aeabi_dadd+0x244>
 8000bf0:	4eaf      	ldr	r6, [pc, #700]	; (8000eb0 <__aeabi_dadd+0x3fc>)
 8000bf2:	42b5      	cmp	r5, r6
 8000bf4:	d060      	beq.n	8000cb8 <__aeabi_dadd+0x204>
 8000bf6:	2680      	movs	r6, #128	; 0x80
 8000bf8:	0436      	lsls	r6, r6, #16
 8000bfa:	4337      	orrs	r7, r6
 8000bfc:	46b8      	mov	r8, r7
 8000bfe:	2b38      	cmp	r3, #56	; 0x38
 8000c00:	dc00      	bgt.n	8000c04 <__aeabi_dadd+0x150>
 8000c02:	e13e      	b.n	8000e82 <__aeabi_dadd+0x3ce>
 8000c04:	4643      	mov	r3, r8
 8000c06:	4313      	orrs	r3, r2
 8000c08:	001f      	movs	r7, r3
 8000c0a:	1e7a      	subs	r2, r7, #1
 8000c0c:	4197      	sbcs	r7, r2
 8000c0e:	183f      	adds	r7, r7, r0
 8000c10:	4287      	cmp	r7, r0
 8000c12:	4180      	sbcs	r0, r0
 8000c14:	4240      	negs	r0, r0
 8000c16:	1809      	adds	r1, r1, r0
 8000c18:	020b      	lsls	r3, r1, #8
 8000c1a:	d400      	bmi.n	8000c1e <__aeabi_dadd+0x16a>
 8000c1c:	e0b0      	b.n	8000d80 <__aeabi_dadd+0x2cc>
 8000c1e:	4ba4      	ldr	r3, [pc, #656]	; (8000eb0 <__aeabi_dadd+0x3fc>)
 8000c20:	3501      	adds	r5, #1
 8000c22:	429d      	cmp	r5, r3
 8000c24:	d100      	bne.n	8000c28 <__aeabi_dadd+0x174>
 8000c26:	e0c3      	b.n	8000db0 <__aeabi_dadd+0x2fc>
 8000c28:	4aa2      	ldr	r2, [pc, #648]	; (8000eb4 <__aeabi_dadd+0x400>)
 8000c2a:	087b      	lsrs	r3, r7, #1
 8000c2c:	400a      	ands	r2, r1
 8000c2e:	2101      	movs	r1, #1
 8000c30:	400f      	ands	r7, r1
 8000c32:	431f      	orrs	r7, r3
 8000c34:	0851      	lsrs	r1, r2, #1
 8000c36:	07d3      	lsls	r3, r2, #31
 8000c38:	2207      	movs	r2, #7
 8000c3a:	431f      	orrs	r7, r3
 8000c3c:	403a      	ands	r2, r7
 8000c3e:	e799      	b.n	8000b74 <__aeabi_dadd+0xc0>
 8000c40:	4e9b      	ldr	r6, [pc, #620]	; (8000eb0 <__aeabi_dadd+0x3fc>)
 8000c42:	42b5      	cmp	r5, r6
 8000c44:	d038      	beq.n	8000cb8 <__aeabi_dadd+0x204>
 8000c46:	2680      	movs	r6, #128	; 0x80
 8000c48:	0436      	lsls	r6, r6, #16
 8000c4a:	4337      	orrs	r7, r6
 8000c4c:	46b8      	mov	r8, r7
 8000c4e:	2b38      	cmp	r3, #56	; 0x38
 8000c50:	dd00      	ble.n	8000c54 <__aeabi_dadd+0x1a0>
 8000c52:	e0dc      	b.n	8000e0e <__aeabi_dadd+0x35a>
 8000c54:	2b1f      	cmp	r3, #31
 8000c56:	dc00      	bgt.n	8000c5a <__aeabi_dadd+0x1a6>
 8000c58:	e130      	b.n	8000ebc <__aeabi_dadd+0x408>
 8000c5a:	001e      	movs	r6, r3
 8000c5c:	4647      	mov	r7, r8
 8000c5e:	3e20      	subs	r6, #32
 8000c60:	40f7      	lsrs	r7, r6
 8000c62:	46bc      	mov	ip, r7
 8000c64:	2b20      	cmp	r3, #32
 8000c66:	d004      	beq.n	8000c72 <__aeabi_dadd+0x1be>
 8000c68:	2640      	movs	r6, #64	; 0x40
 8000c6a:	1af3      	subs	r3, r6, r3
 8000c6c:	4646      	mov	r6, r8
 8000c6e:	409e      	lsls	r6, r3
 8000c70:	4332      	orrs	r2, r6
 8000c72:	0017      	movs	r7, r2
 8000c74:	4663      	mov	r3, ip
 8000c76:	1e7a      	subs	r2, r7, #1
 8000c78:	4197      	sbcs	r7, r2
 8000c7a:	431f      	orrs	r7, r3
 8000c7c:	e0cc      	b.n	8000e18 <__aeabi_dadd+0x364>
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d100      	bne.n	8000c84 <__aeabi_dadd+0x1d0>
 8000c82:	e204      	b.n	800108e <__aeabi_dadd+0x5da>
 8000c84:	4643      	mov	r3, r8
 8000c86:	4313      	orrs	r3, r2
 8000c88:	d100      	bne.n	8000c8c <__aeabi_dadd+0x1d8>
 8000c8a:	e159      	b.n	8000f40 <__aeabi_dadd+0x48c>
 8000c8c:	074b      	lsls	r3, r1, #29
 8000c8e:	08c0      	lsrs	r0, r0, #3
 8000c90:	4318      	orrs	r0, r3
 8000c92:	2380      	movs	r3, #128	; 0x80
 8000c94:	08c9      	lsrs	r1, r1, #3
 8000c96:	031b      	lsls	r3, r3, #12
 8000c98:	4219      	tst	r1, r3
 8000c9a:	d008      	beq.n	8000cae <__aeabi_dadd+0x1fa>
 8000c9c:	4645      	mov	r5, r8
 8000c9e:	08ed      	lsrs	r5, r5, #3
 8000ca0:	421d      	tst	r5, r3
 8000ca2:	d104      	bne.n	8000cae <__aeabi_dadd+0x1fa>
 8000ca4:	4643      	mov	r3, r8
 8000ca6:	08d0      	lsrs	r0, r2, #3
 8000ca8:	0759      	lsls	r1, r3, #29
 8000caa:	4308      	orrs	r0, r1
 8000cac:	0029      	movs	r1, r5
 8000cae:	0f42      	lsrs	r2, r0, #29
 8000cb0:	00c9      	lsls	r1, r1, #3
 8000cb2:	4d7f      	ldr	r5, [pc, #508]	; (8000eb0 <__aeabi_dadd+0x3fc>)
 8000cb4:	4311      	orrs	r1, r2
 8000cb6:	00c0      	lsls	r0, r0, #3
 8000cb8:	074b      	lsls	r3, r1, #29
 8000cba:	08ca      	lsrs	r2, r1, #3
 8000cbc:	497c      	ldr	r1, [pc, #496]	; (8000eb0 <__aeabi_dadd+0x3fc>)
 8000cbe:	08c0      	lsrs	r0, r0, #3
 8000cc0:	4303      	orrs	r3, r0
 8000cc2:	428d      	cmp	r5, r1
 8000cc4:	d068      	beq.n	8000d98 <__aeabi_dadd+0x2e4>
 8000cc6:	0312      	lsls	r2, r2, #12
 8000cc8:	056d      	lsls	r5, r5, #21
 8000cca:	0b12      	lsrs	r2, r2, #12
 8000ccc:	0d6d      	lsrs	r5, r5, #21
 8000cce:	2100      	movs	r1, #0
 8000cd0:	0312      	lsls	r2, r2, #12
 8000cd2:	0018      	movs	r0, r3
 8000cd4:	0b13      	lsrs	r3, r2, #12
 8000cd6:	0d0a      	lsrs	r2, r1, #20
 8000cd8:	0512      	lsls	r2, r2, #20
 8000cda:	431a      	orrs	r2, r3
 8000cdc:	4b76      	ldr	r3, [pc, #472]	; (8000eb8 <__aeabi_dadd+0x404>)
 8000cde:	052d      	lsls	r5, r5, #20
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	432b      	orrs	r3, r5
 8000ce4:	005b      	lsls	r3, r3, #1
 8000ce6:	07e4      	lsls	r4, r4, #31
 8000ce8:	085b      	lsrs	r3, r3, #1
 8000cea:	4323      	orrs	r3, r4
 8000cec:	0019      	movs	r1, r3
 8000cee:	bc1c      	pop	{r2, r3, r4}
 8000cf0:	4690      	mov	r8, r2
 8000cf2:	4699      	mov	r9, r3
 8000cf4:	46a2      	mov	sl, r4
 8000cf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cf8:	003e      	movs	r6, r7
 8000cfa:	4316      	orrs	r6, r2
 8000cfc:	d012      	beq.n	8000d24 <__aeabi_dadd+0x270>
 8000cfe:	1e5e      	subs	r6, r3, #1
 8000d00:	2e00      	cmp	r6, #0
 8000d02:	d000      	beq.n	8000d06 <__aeabi_dadd+0x252>
 8000d04:	e100      	b.n	8000f08 <__aeabi_dadd+0x454>
 8000d06:	1887      	adds	r7, r0, r2
 8000d08:	4287      	cmp	r7, r0
 8000d0a:	4180      	sbcs	r0, r0
 8000d0c:	4441      	add	r1, r8
 8000d0e:	4240      	negs	r0, r0
 8000d10:	1809      	adds	r1, r1, r0
 8000d12:	2501      	movs	r5, #1
 8000d14:	020b      	lsls	r3, r1, #8
 8000d16:	d533      	bpl.n	8000d80 <__aeabi_dadd+0x2cc>
 8000d18:	2502      	movs	r5, #2
 8000d1a:	e785      	b.n	8000c28 <__aeabi_dadd+0x174>
 8000d1c:	4664      	mov	r4, ip
 8000d1e:	0033      	movs	r3, r6
 8000d20:	4641      	mov	r1, r8
 8000d22:	0010      	movs	r0, r2
 8000d24:	001d      	movs	r5, r3
 8000d26:	e7c7      	b.n	8000cb8 <__aeabi_dadd+0x204>
 8000d28:	2d00      	cmp	r5, #0
 8000d2a:	d000      	beq.n	8000d2e <__aeabi_dadd+0x27a>
 8000d2c:	e0da      	b.n	8000ee4 <__aeabi_dadd+0x430>
 8000d2e:	000c      	movs	r4, r1
 8000d30:	4304      	orrs	r4, r0
 8000d32:	d0f3      	beq.n	8000d1c <__aeabi_dadd+0x268>
 8000d34:	1c5c      	adds	r4, r3, #1
 8000d36:	d100      	bne.n	8000d3a <__aeabi_dadd+0x286>
 8000d38:	e19f      	b.n	800107a <__aeabi_dadd+0x5c6>
 8000d3a:	4c5d      	ldr	r4, [pc, #372]	; (8000eb0 <__aeabi_dadd+0x3fc>)
 8000d3c:	42a6      	cmp	r6, r4
 8000d3e:	d100      	bne.n	8000d42 <__aeabi_dadd+0x28e>
 8000d40:	e12f      	b.n	8000fa2 <__aeabi_dadd+0x4ee>
 8000d42:	43db      	mvns	r3, r3
 8000d44:	2b38      	cmp	r3, #56	; 0x38
 8000d46:	dd00      	ble.n	8000d4a <__aeabi_dadd+0x296>
 8000d48:	e166      	b.n	8001018 <__aeabi_dadd+0x564>
 8000d4a:	2b1f      	cmp	r3, #31
 8000d4c:	dd00      	ble.n	8000d50 <__aeabi_dadd+0x29c>
 8000d4e:	e183      	b.n	8001058 <__aeabi_dadd+0x5a4>
 8000d50:	2420      	movs	r4, #32
 8000d52:	0005      	movs	r5, r0
 8000d54:	1ae4      	subs	r4, r4, r3
 8000d56:	000f      	movs	r7, r1
 8000d58:	40dd      	lsrs	r5, r3
 8000d5a:	40d9      	lsrs	r1, r3
 8000d5c:	40a0      	lsls	r0, r4
 8000d5e:	4643      	mov	r3, r8
 8000d60:	40a7      	lsls	r7, r4
 8000d62:	1a5b      	subs	r3, r3, r1
 8000d64:	1e44      	subs	r4, r0, #1
 8000d66:	41a0      	sbcs	r0, r4
 8000d68:	4698      	mov	r8, r3
 8000d6a:	432f      	orrs	r7, r5
 8000d6c:	4338      	orrs	r0, r7
 8000d6e:	1a17      	subs	r7, r2, r0
 8000d70:	42ba      	cmp	r2, r7
 8000d72:	4192      	sbcs	r2, r2
 8000d74:	4643      	mov	r3, r8
 8000d76:	4252      	negs	r2, r2
 8000d78:	1a99      	subs	r1, r3, r2
 8000d7a:	4664      	mov	r4, ip
 8000d7c:	0035      	movs	r5, r6
 8000d7e:	e6ca      	b.n	8000b16 <__aeabi_dadd+0x62>
 8000d80:	2207      	movs	r2, #7
 8000d82:	403a      	ands	r2, r7
 8000d84:	2a00      	cmp	r2, #0
 8000d86:	d000      	beq.n	8000d8a <__aeabi_dadd+0x2d6>
 8000d88:	e6f6      	b.n	8000b78 <__aeabi_dadd+0xc4>
 8000d8a:	074b      	lsls	r3, r1, #29
 8000d8c:	08ca      	lsrs	r2, r1, #3
 8000d8e:	4948      	ldr	r1, [pc, #288]	; (8000eb0 <__aeabi_dadd+0x3fc>)
 8000d90:	08ff      	lsrs	r7, r7, #3
 8000d92:	433b      	orrs	r3, r7
 8000d94:	428d      	cmp	r5, r1
 8000d96:	d196      	bne.n	8000cc6 <__aeabi_dadd+0x212>
 8000d98:	0019      	movs	r1, r3
 8000d9a:	4311      	orrs	r1, r2
 8000d9c:	d100      	bne.n	8000da0 <__aeabi_dadd+0x2ec>
 8000d9e:	e19e      	b.n	80010de <__aeabi_dadd+0x62a>
 8000da0:	2180      	movs	r1, #128	; 0x80
 8000da2:	0309      	lsls	r1, r1, #12
 8000da4:	430a      	orrs	r2, r1
 8000da6:	0312      	lsls	r2, r2, #12
 8000da8:	0b12      	lsrs	r2, r2, #12
 8000daa:	4d41      	ldr	r5, [pc, #260]	; (8000eb0 <__aeabi_dadd+0x3fc>)
 8000dac:	e78f      	b.n	8000cce <__aeabi_dadd+0x21a>
 8000dae:	0015      	movs	r5, r2
 8000db0:	2200      	movs	r2, #0
 8000db2:	2300      	movs	r3, #0
 8000db4:	e78b      	b.n	8000cce <__aeabi_dadd+0x21a>
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d000      	beq.n	8000dbc <__aeabi_dadd+0x308>
 8000dba:	e0c7      	b.n	8000f4c <__aeabi_dadd+0x498>
 8000dbc:	1c6b      	adds	r3, r5, #1
 8000dbe:	055f      	lsls	r7, r3, #21
 8000dc0:	0d7f      	lsrs	r7, r7, #21
 8000dc2:	2f01      	cmp	r7, #1
 8000dc4:	dc00      	bgt.n	8000dc8 <__aeabi_dadd+0x314>
 8000dc6:	e0f1      	b.n	8000fac <__aeabi_dadd+0x4f8>
 8000dc8:	4d39      	ldr	r5, [pc, #228]	; (8000eb0 <__aeabi_dadd+0x3fc>)
 8000dca:	42ab      	cmp	r3, r5
 8000dcc:	d100      	bne.n	8000dd0 <__aeabi_dadd+0x31c>
 8000dce:	e0b9      	b.n	8000f44 <__aeabi_dadd+0x490>
 8000dd0:	1885      	adds	r5, r0, r2
 8000dd2:	000a      	movs	r2, r1
 8000dd4:	4285      	cmp	r5, r0
 8000dd6:	4189      	sbcs	r1, r1
 8000dd8:	4442      	add	r2, r8
 8000dda:	4249      	negs	r1, r1
 8000ddc:	1851      	adds	r1, r2, r1
 8000dde:	2207      	movs	r2, #7
 8000de0:	07cf      	lsls	r7, r1, #31
 8000de2:	086d      	lsrs	r5, r5, #1
 8000de4:	432f      	orrs	r7, r5
 8000de6:	0849      	lsrs	r1, r1, #1
 8000de8:	403a      	ands	r2, r7
 8000dea:	001d      	movs	r5, r3
 8000dec:	e6c2      	b.n	8000b74 <__aeabi_dadd+0xc0>
 8000dee:	2207      	movs	r2, #7
 8000df0:	4930      	ldr	r1, [pc, #192]	; (8000eb4 <__aeabi_dadd+0x400>)
 8000df2:	1aed      	subs	r5, r5, r3
 8000df4:	4031      	ands	r1, r6
 8000df6:	403a      	ands	r2, r7
 8000df8:	e6bc      	b.n	8000b74 <__aeabi_dadd+0xc0>
 8000dfa:	003e      	movs	r6, r7
 8000dfc:	3828      	subs	r0, #40	; 0x28
 8000dfe:	4086      	lsls	r6, r0
 8000e00:	2700      	movs	r7, #0
 8000e02:	e69f      	b.n	8000b44 <__aeabi_dadd+0x90>
 8000e04:	0038      	movs	r0, r7
 8000e06:	f001 fc29 	bl	800265c <__clzsi2>
 8000e0a:	3020      	adds	r0, #32
 8000e0c:	e68e      	b.n	8000b2c <__aeabi_dadd+0x78>
 8000e0e:	4643      	mov	r3, r8
 8000e10:	4313      	orrs	r3, r2
 8000e12:	001f      	movs	r7, r3
 8000e14:	1e7a      	subs	r2, r7, #1
 8000e16:	4197      	sbcs	r7, r2
 8000e18:	1bc7      	subs	r7, r0, r7
 8000e1a:	42b8      	cmp	r0, r7
 8000e1c:	4180      	sbcs	r0, r0
 8000e1e:	4240      	negs	r0, r0
 8000e20:	1a09      	subs	r1, r1, r0
 8000e22:	e678      	b.n	8000b16 <__aeabi_dadd+0x62>
 8000e24:	000e      	movs	r6, r1
 8000e26:	003b      	movs	r3, r7
 8000e28:	4306      	orrs	r6, r0
 8000e2a:	4313      	orrs	r3, r2
 8000e2c:	2d00      	cmp	r5, #0
 8000e2e:	d161      	bne.n	8000ef4 <__aeabi_dadd+0x440>
 8000e30:	2e00      	cmp	r6, #0
 8000e32:	d000      	beq.n	8000e36 <__aeabi_dadd+0x382>
 8000e34:	e0f4      	b.n	8001020 <__aeabi_dadd+0x56c>
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d100      	bne.n	8000e3c <__aeabi_dadd+0x388>
 8000e3a:	e11b      	b.n	8001074 <__aeabi_dadd+0x5c0>
 8000e3c:	4664      	mov	r4, ip
 8000e3e:	0039      	movs	r1, r7
 8000e40:	0010      	movs	r0, r2
 8000e42:	e739      	b.n	8000cb8 <__aeabi_dadd+0x204>
 8000e44:	4f1a      	ldr	r7, [pc, #104]	; (8000eb0 <__aeabi_dadd+0x3fc>)
 8000e46:	42bb      	cmp	r3, r7
 8000e48:	d07a      	beq.n	8000f40 <__aeabi_dadd+0x48c>
 8000e4a:	0033      	movs	r3, r6
 8000e4c:	e6ff      	b.n	8000c4e <__aeabi_dadd+0x19a>
 8000e4e:	0030      	movs	r0, r6
 8000e50:	3d1f      	subs	r5, #31
 8000e52:	40e8      	lsrs	r0, r5
 8000e54:	2b20      	cmp	r3, #32
 8000e56:	d003      	beq.n	8000e60 <__aeabi_dadd+0x3ac>
 8000e58:	2140      	movs	r1, #64	; 0x40
 8000e5a:	1acb      	subs	r3, r1, r3
 8000e5c:	409e      	lsls	r6, r3
 8000e5e:	4337      	orrs	r7, r6
 8000e60:	1e7b      	subs	r3, r7, #1
 8000e62:	419f      	sbcs	r7, r3
 8000e64:	2207      	movs	r2, #7
 8000e66:	4307      	orrs	r7, r0
 8000e68:	403a      	ands	r2, r7
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	2500      	movs	r5, #0
 8000e6e:	e789      	b.n	8000d84 <__aeabi_dadd+0x2d0>
 8000e70:	1a17      	subs	r7, r2, r0
 8000e72:	4643      	mov	r3, r8
 8000e74:	42ba      	cmp	r2, r7
 8000e76:	41b6      	sbcs	r6, r6
 8000e78:	1a59      	subs	r1, r3, r1
 8000e7a:	4276      	negs	r6, r6
 8000e7c:	1b8e      	subs	r6, r1, r6
 8000e7e:	4664      	mov	r4, ip
 8000e80:	e64e      	b.n	8000b20 <__aeabi_dadd+0x6c>
 8000e82:	2b1f      	cmp	r3, #31
 8000e84:	dd00      	ble.n	8000e88 <__aeabi_dadd+0x3d4>
 8000e86:	e0ad      	b.n	8000fe4 <__aeabi_dadd+0x530>
 8000e88:	2620      	movs	r6, #32
 8000e8a:	4647      	mov	r7, r8
 8000e8c:	1af6      	subs	r6, r6, r3
 8000e8e:	40b7      	lsls	r7, r6
 8000e90:	46b9      	mov	r9, r7
 8000e92:	0017      	movs	r7, r2
 8000e94:	46b2      	mov	sl, r6
 8000e96:	40df      	lsrs	r7, r3
 8000e98:	464e      	mov	r6, r9
 8000e9a:	433e      	orrs	r6, r7
 8000e9c:	0037      	movs	r7, r6
 8000e9e:	4656      	mov	r6, sl
 8000ea0:	40b2      	lsls	r2, r6
 8000ea2:	1e56      	subs	r6, r2, #1
 8000ea4:	41b2      	sbcs	r2, r6
 8000ea6:	4317      	orrs	r7, r2
 8000ea8:	4642      	mov	r2, r8
 8000eaa:	40da      	lsrs	r2, r3
 8000eac:	1889      	adds	r1, r1, r2
 8000eae:	e6ae      	b.n	8000c0e <__aeabi_dadd+0x15a>
 8000eb0:	000007ff 	.word	0x000007ff
 8000eb4:	ff7fffff 	.word	0xff7fffff
 8000eb8:	800fffff 	.word	0x800fffff
 8000ebc:	2620      	movs	r6, #32
 8000ebe:	4647      	mov	r7, r8
 8000ec0:	1af6      	subs	r6, r6, r3
 8000ec2:	40b7      	lsls	r7, r6
 8000ec4:	46b9      	mov	r9, r7
 8000ec6:	0017      	movs	r7, r2
 8000ec8:	46b2      	mov	sl, r6
 8000eca:	40df      	lsrs	r7, r3
 8000ecc:	464e      	mov	r6, r9
 8000ece:	433e      	orrs	r6, r7
 8000ed0:	0037      	movs	r7, r6
 8000ed2:	4656      	mov	r6, sl
 8000ed4:	40b2      	lsls	r2, r6
 8000ed6:	1e56      	subs	r6, r2, #1
 8000ed8:	41b2      	sbcs	r2, r6
 8000eda:	4317      	orrs	r7, r2
 8000edc:	4642      	mov	r2, r8
 8000ede:	40da      	lsrs	r2, r3
 8000ee0:	1a89      	subs	r1, r1, r2
 8000ee2:	e799      	b.n	8000e18 <__aeabi_dadd+0x364>
 8000ee4:	4c7f      	ldr	r4, [pc, #508]	; (80010e4 <__aeabi_dadd+0x630>)
 8000ee6:	42a6      	cmp	r6, r4
 8000ee8:	d05b      	beq.n	8000fa2 <__aeabi_dadd+0x4ee>
 8000eea:	2480      	movs	r4, #128	; 0x80
 8000eec:	0424      	lsls	r4, r4, #16
 8000eee:	425b      	negs	r3, r3
 8000ef0:	4321      	orrs	r1, r4
 8000ef2:	e727      	b.n	8000d44 <__aeabi_dadd+0x290>
 8000ef4:	2e00      	cmp	r6, #0
 8000ef6:	d10c      	bne.n	8000f12 <__aeabi_dadd+0x45e>
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d100      	bne.n	8000efe <__aeabi_dadd+0x44a>
 8000efc:	e0cb      	b.n	8001096 <__aeabi_dadd+0x5e2>
 8000efe:	4664      	mov	r4, ip
 8000f00:	0039      	movs	r1, r7
 8000f02:	0010      	movs	r0, r2
 8000f04:	4d77      	ldr	r5, [pc, #476]	; (80010e4 <__aeabi_dadd+0x630>)
 8000f06:	e6d7      	b.n	8000cb8 <__aeabi_dadd+0x204>
 8000f08:	4f76      	ldr	r7, [pc, #472]	; (80010e4 <__aeabi_dadd+0x630>)
 8000f0a:	42bb      	cmp	r3, r7
 8000f0c:	d018      	beq.n	8000f40 <__aeabi_dadd+0x48c>
 8000f0e:	0033      	movs	r3, r6
 8000f10:	e675      	b.n	8000bfe <__aeabi_dadd+0x14a>
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d014      	beq.n	8000f40 <__aeabi_dadd+0x48c>
 8000f16:	074b      	lsls	r3, r1, #29
 8000f18:	08c0      	lsrs	r0, r0, #3
 8000f1a:	4318      	orrs	r0, r3
 8000f1c:	2380      	movs	r3, #128	; 0x80
 8000f1e:	08c9      	lsrs	r1, r1, #3
 8000f20:	031b      	lsls	r3, r3, #12
 8000f22:	4219      	tst	r1, r3
 8000f24:	d007      	beq.n	8000f36 <__aeabi_dadd+0x482>
 8000f26:	08fc      	lsrs	r4, r7, #3
 8000f28:	421c      	tst	r4, r3
 8000f2a:	d104      	bne.n	8000f36 <__aeabi_dadd+0x482>
 8000f2c:	0779      	lsls	r1, r7, #29
 8000f2e:	08d0      	lsrs	r0, r2, #3
 8000f30:	4308      	orrs	r0, r1
 8000f32:	46e1      	mov	r9, ip
 8000f34:	0021      	movs	r1, r4
 8000f36:	464c      	mov	r4, r9
 8000f38:	0f42      	lsrs	r2, r0, #29
 8000f3a:	00c9      	lsls	r1, r1, #3
 8000f3c:	4311      	orrs	r1, r2
 8000f3e:	00c0      	lsls	r0, r0, #3
 8000f40:	4d68      	ldr	r5, [pc, #416]	; (80010e4 <__aeabi_dadd+0x630>)
 8000f42:	e6b9      	b.n	8000cb8 <__aeabi_dadd+0x204>
 8000f44:	001d      	movs	r5, r3
 8000f46:	2200      	movs	r2, #0
 8000f48:	2300      	movs	r3, #0
 8000f4a:	e6c0      	b.n	8000cce <__aeabi_dadd+0x21a>
 8000f4c:	2d00      	cmp	r5, #0
 8000f4e:	d15b      	bne.n	8001008 <__aeabi_dadd+0x554>
 8000f50:	000d      	movs	r5, r1
 8000f52:	4305      	orrs	r5, r0
 8000f54:	d100      	bne.n	8000f58 <__aeabi_dadd+0x4a4>
 8000f56:	e6e2      	b.n	8000d1e <__aeabi_dadd+0x26a>
 8000f58:	1c5d      	adds	r5, r3, #1
 8000f5a:	d100      	bne.n	8000f5e <__aeabi_dadd+0x4aa>
 8000f5c:	e0b0      	b.n	80010c0 <__aeabi_dadd+0x60c>
 8000f5e:	4d61      	ldr	r5, [pc, #388]	; (80010e4 <__aeabi_dadd+0x630>)
 8000f60:	42ae      	cmp	r6, r5
 8000f62:	d01f      	beq.n	8000fa4 <__aeabi_dadd+0x4f0>
 8000f64:	43db      	mvns	r3, r3
 8000f66:	2b38      	cmp	r3, #56	; 0x38
 8000f68:	dc71      	bgt.n	800104e <__aeabi_dadd+0x59a>
 8000f6a:	2b1f      	cmp	r3, #31
 8000f6c:	dd00      	ble.n	8000f70 <__aeabi_dadd+0x4bc>
 8000f6e:	e096      	b.n	800109e <__aeabi_dadd+0x5ea>
 8000f70:	2520      	movs	r5, #32
 8000f72:	000f      	movs	r7, r1
 8000f74:	1aed      	subs	r5, r5, r3
 8000f76:	40af      	lsls	r7, r5
 8000f78:	46b9      	mov	r9, r7
 8000f7a:	0007      	movs	r7, r0
 8000f7c:	46aa      	mov	sl, r5
 8000f7e:	40df      	lsrs	r7, r3
 8000f80:	464d      	mov	r5, r9
 8000f82:	433d      	orrs	r5, r7
 8000f84:	002f      	movs	r7, r5
 8000f86:	4655      	mov	r5, sl
 8000f88:	40a8      	lsls	r0, r5
 8000f8a:	40d9      	lsrs	r1, r3
 8000f8c:	1e45      	subs	r5, r0, #1
 8000f8e:	41a8      	sbcs	r0, r5
 8000f90:	4488      	add	r8, r1
 8000f92:	4307      	orrs	r7, r0
 8000f94:	18bf      	adds	r7, r7, r2
 8000f96:	4297      	cmp	r7, r2
 8000f98:	4192      	sbcs	r2, r2
 8000f9a:	4251      	negs	r1, r2
 8000f9c:	4441      	add	r1, r8
 8000f9e:	0035      	movs	r5, r6
 8000fa0:	e63a      	b.n	8000c18 <__aeabi_dadd+0x164>
 8000fa2:	4664      	mov	r4, ip
 8000fa4:	0035      	movs	r5, r6
 8000fa6:	4641      	mov	r1, r8
 8000fa8:	0010      	movs	r0, r2
 8000faa:	e685      	b.n	8000cb8 <__aeabi_dadd+0x204>
 8000fac:	000b      	movs	r3, r1
 8000fae:	4303      	orrs	r3, r0
 8000fb0:	2d00      	cmp	r5, #0
 8000fb2:	d000      	beq.n	8000fb6 <__aeabi_dadd+0x502>
 8000fb4:	e663      	b.n	8000c7e <__aeabi_dadd+0x1ca>
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d0f5      	beq.n	8000fa6 <__aeabi_dadd+0x4f2>
 8000fba:	4643      	mov	r3, r8
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	d100      	bne.n	8000fc2 <__aeabi_dadd+0x50e>
 8000fc0:	e67a      	b.n	8000cb8 <__aeabi_dadd+0x204>
 8000fc2:	1887      	adds	r7, r0, r2
 8000fc4:	4287      	cmp	r7, r0
 8000fc6:	4180      	sbcs	r0, r0
 8000fc8:	2207      	movs	r2, #7
 8000fca:	4441      	add	r1, r8
 8000fcc:	4240      	negs	r0, r0
 8000fce:	1809      	adds	r1, r1, r0
 8000fd0:	403a      	ands	r2, r7
 8000fd2:	020b      	lsls	r3, r1, #8
 8000fd4:	d400      	bmi.n	8000fd8 <__aeabi_dadd+0x524>
 8000fd6:	e6d5      	b.n	8000d84 <__aeabi_dadd+0x2d0>
 8000fd8:	4b43      	ldr	r3, [pc, #268]	; (80010e8 <__aeabi_dadd+0x634>)
 8000fda:	3501      	adds	r5, #1
 8000fdc:	4019      	ands	r1, r3
 8000fde:	e5c9      	b.n	8000b74 <__aeabi_dadd+0xc0>
 8000fe0:	0038      	movs	r0, r7
 8000fe2:	e669      	b.n	8000cb8 <__aeabi_dadd+0x204>
 8000fe4:	001e      	movs	r6, r3
 8000fe6:	4647      	mov	r7, r8
 8000fe8:	3e20      	subs	r6, #32
 8000fea:	40f7      	lsrs	r7, r6
 8000fec:	46bc      	mov	ip, r7
 8000fee:	2b20      	cmp	r3, #32
 8000ff0:	d004      	beq.n	8000ffc <__aeabi_dadd+0x548>
 8000ff2:	2640      	movs	r6, #64	; 0x40
 8000ff4:	1af3      	subs	r3, r6, r3
 8000ff6:	4646      	mov	r6, r8
 8000ff8:	409e      	lsls	r6, r3
 8000ffa:	4332      	orrs	r2, r6
 8000ffc:	0017      	movs	r7, r2
 8000ffe:	4663      	mov	r3, ip
 8001000:	1e7a      	subs	r2, r7, #1
 8001002:	4197      	sbcs	r7, r2
 8001004:	431f      	orrs	r7, r3
 8001006:	e602      	b.n	8000c0e <__aeabi_dadd+0x15a>
 8001008:	4d36      	ldr	r5, [pc, #216]	; (80010e4 <__aeabi_dadd+0x630>)
 800100a:	42ae      	cmp	r6, r5
 800100c:	d0ca      	beq.n	8000fa4 <__aeabi_dadd+0x4f0>
 800100e:	2580      	movs	r5, #128	; 0x80
 8001010:	042d      	lsls	r5, r5, #16
 8001012:	425b      	negs	r3, r3
 8001014:	4329      	orrs	r1, r5
 8001016:	e7a6      	b.n	8000f66 <__aeabi_dadd+0x4b2>
 8001018:	4308      	orrs	r0, r1
 800101a:	1e41      	subs	r1, r0, #1
 800101c:	4188      	sbcs	r0, r1
 800101e:	e6a6      	b.n	8000d6e <__aeabi_dadd+0x2ba>
 8001020:	2b00      	cmp	r3, #0
 8001022:	d100      	bne.n	8001026 <__aeabi_dadd+0x572>
 8001024:	e648      	b.n	8000cb8 <__aeabi_dadd+0x204>
 8001026:	1a87      	subs	r7, r0, r2
 8001028:	4643      	mov	r3, r8
 800102a:	42b8      	cmp	r0, r7
 800102c:	41b6      	sbcs	r6, r6
 800102e:	1acb      	subs	r3, r1, r3
 8001030:	4276      	negs	r6, r6
 8001032:	1b9e      	subs	r6, r3, r6
 8001034:	0233      	lsls	r3, r6, #8
 8001036:	d54b      	bpl.n	80010d0 <__aeabi_dadd+0x61c>
 8001038:	1a17      	subs	r7, r2, r0
 800103a:	4643      	mov	r3, r8
 800103c:	42ba      	cmp	r2, r7
 800103e:	4192      	sbcs	r2, r2
 8001040:	1a59      	subs	r1, r3, r1
 8001042:	4252      	negs	r2, r2
 8001044:	1a89      	subs	r1, r1, r2
 8001046:	2207      	movs	r2, #7
 8001048:	4664      	mov	r4, ip
 800104a:	403a      	ands	r2, r7
 800104c:	e592      	b.n	8000b74 <__aeabi_dadd+0xc0>
 800104e:	4301      	orrs	r1, r0
 8001050:	000f      	movs	r7, r1
 8001052:	1e79      	subs	r1, r7, #1
 8001054:	418f      	sbcs	r7, r1
 8001056:	e79d      	b.n	8000f94 <__aeabi_dadd+0x4e0>
 8001058:	001c      	movs	r4, r3
 800105a:	000f      	movs	r7, r1
 800105c:	3c20      	subs	r4, #32
 800105e:	40e7      	lsrs	r7, r4
 8001060:	2b20      	cmp	r3, #32
 8001062:	d003      	beq.n	800106c <__aeabi_dadd+0x5b8>
 8001064:	2440      	movs	r4, #64	; 0x40
 8001066:	1ae3      	subs	r3, r4, r3
 8001068:	4099      	lsls	r1, r3
 800106a:	4308      	orrs	r0, r1
 800106c:	1e41      	subs	r1, r0, #1
 800106e:	4188      	sbcs	r0, r1
 8001070:	4338      	orrs	r0, r7
 8001072:	e67c      	b.n	8000d6e <__aeabi_dadd+0x2ba>
 8001074:	2200      	movs	r2, #0
 8001076:	2400      	movs	r4, #0
 8001078:	e625      	b.n	8000cc6 <__aeabi_dadd+0x212>
 800107a:	1a17      	subs	r7, r2, r0
 800107c:	4643      	mov	r3, r8
 800107e:	42ba      	cmp	r2, r7
 8001080:	4192      	sbcs	r2, r2
 8001082:	1a59      	subs	r1, r3, r1
 8001084:	4252      	negs	r2, r2
 8001086:	1a89      	subs	r1, r1, r2
 8001088:	4664      	mov	r4, ip
 800108a:	0035      	movs	r5, r6
 800108c:	e543      	b.n	8000b16 <__aeabi_dadd+0x62>
 800108e:	4641      	mov	r1, r8
 8001090:	0010      	movs	r0, r2
 8001092:	4d14      	ldr	r5, [pc, #80]	; (80010e4 <__aeabi_dadd+0x630>)
 8001094:	e610      	b.n	8000cb8 <__aeabi_dadd+0x204>
 8001096:	2280      	movs	r2, #128	; 0x80
 8001098:	2400      	movs	r4, #0
 800109a:	0312      	lsls	r2, r2, #12
 800109c:	e680      	b.n	8000da0 <__aeabi_dadd+0x2ec>
 800109e:	001d      	movs	r5, r3
 80010a0:	000f      	movs	r7, r1
 80010a2:	3d20      	subs	r5, #32
 80010a4:	40ef      	lsrs	r7, r5
 80010a6:	46bc      	mov	ip, r7
 80010a8:	2b20      	cmp	r3, #32
 80010aa:	d003      	beq.n	80010b4 <__aeabi_dadd+0x600>
 80010ac:	2540      	movs	r5, #64	; 0x40
 80010ae:	1aeb      	subs	r3, r5, r3
 80010b0:	4099      	lsls	r1, r3
 80010b2:	4308      	orrs	r0, r1
 80010b4:	0007      	movs	r7, r0
 80010b6:	4663      	mov	r3, ip
 80010b8:	1e78      	subs	r0, r7, #1
 80010ba:	4187      	sbcs	r7, r0
 80010bc:	431f      	orrs	r7, r3
 80010be:	e769      	b.n	8000f94 <__aeabi_dadd+0x4e0>
 80010c0:	1887      	adds	r7, r0, r2
 80010c2:	4297      	cmp	r7, r2
 80010c4:	419b      	sbcs	r3, r3
 80010c6:	4441      	add	r1, r8
 80010c8:	425b      	negs	r3, r3
 80010ca:	18c9      	adds	r1, r1, r3
 80010cc:	0035      	movs	r5, r6
 80010ce:	e5a3      	b.n	8000c18 <__aeabi_dadd+0x164>
 80010d0:	003b      	movs	r3, r7
 80010d2:	4333      	orrs	r3, r6
 80010d4:	d0ce      	beq.n	8001074 <__aeabi_dadd+0x5c0>
 80010d6:	2207      	movs	r2, #7
 80010d8:	0031      	movs	r1, r6
 80010da:	403a      	ands	r2, r7
 80010dc:	e652      	b.n	8000d84 <__aeabi_dadd+0x2d0>
 80010de:	2300      	movs	r3, #0
 80010e0:	001a      	movs	r2, r3
 80010e2:	e5f4      	b.n	8000cce <__aeabi_dadd+0x21a>
 80010e4:	000007ff 	.word	0x000007ff
 80010e8:	ff7fffff 	.word	0xff7fffff

080010ec <__aeabi_ddiv>:
 80010ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010ee:	4657      	mov	r7, sl
 80010f0:	46de      	mov	lr, fp
 80010f2:	464e      	mov	r6, r9
 80010f4:	4645      	mov	r5, r8
 80010f6:	b5e0      	push	{r5, r6, r7, lr}
 80010f8:	4683      	mov	fp, r0
 80010fa:	0007      	movs	r7, r0
 80010fc:	030e      	lsls	r6, r1, #12
 80010fe:	0048      	lsls	r0, r1, #1
 8001100:	b085      	sub	sp, #20
 8001102:	4692      	mov	sl, r2
 8001104:	001c      	movs	r4, r3
 8001106:	0b36      	lsrs	r6, r6, #12
 8001108:	0d40      	lsrs	r0, r0, #21
 800110a:	0fcd      	lsrs	r5, r1, #31
 800110c:	2800      	cmp	r0, #0
 800110e:	d100      	bne.n	8001112 <__aeabi_ddiv+0x26>
 8001110:	e09d      	b.n	800124e <__aeabi_ddiv+0x162>
 8001112:	4b95      	ldr	r3, [pc, #596]	; (8001368 <__aeabi_ddiv+0x27c>)
 8001114:	4298      	cmp	r0, r3
 8001116:	d039      	beq.n	800118c <__aeabi_ddiv+0xa0>
 8001118:	2380      	movs	r3, #128	; 0x80
 800111a:	00f6      	lsls	r6, r6, #3
 800111c:	041b      	lsls	r3, r3, #16
 800111e:	431e      	orrs	r6, r3
 8001120:	4a92      	ldr	r2, [pc, #584]	; (800136c <__aeabi_ddiv+0x280>)
 8001122:	0f7b      	lsrs	r3, r7, #29
 8001124:	4333      	orrs	r3, r6
 8001126:	4699      	mov	r9, r3
 8001128:	4694      	mov	ip, r2
 800112a:	0003      	movs	r3, r0
 800112c:	4463      	add	r3, ip
 800112e:	9300      	str	r3, [sp, #0]
 8001130:	2300      	movs	r3, #0
 8001132:	2600      	movs	r6, #0
 8001134:	00ff      	lsls	r7, r7, #3
 8001136:	9302      	str	r3, [sp, #8]
 8001138:	0323      	lsls	r3, r4, #12
 800113a:	0b1b      	lsrs	r3, r3, #12
 800113c:	4698      	mov	r8, r3
 800113e:	0063      	lsls	r3, r4, #1
 8001140:	0fe4      	lsrs	r4, r4, #31
 8001142:	4652      	mov	r2, sl
 8001144:	0d5b      	lsrs	r3, r3, #21
 8001146:	9401      	str	r4, [sp, #4]
 8001148:	d100      	bne.n	800114c <__aeabi_ddiv+0x60>
 800114a:	e0b3      	b.n	80012b4 <__aeabi_ddiv+0x1c8>
 800114c:	4986      	ldr	r1, [pc, #536]	; (8001368 <__aeabi_ddiv+0x27c>)
 800114e:	428b      	cmp	r3, r1
 8001150:	d100      	bne.n	8001154 <__aeabi_ddiv+0x68>
 8001152:	e09e      	b.n	8001292 <__aeabi_ddiv+0x1a6>
 8001154:	4642      	mov	r2, r8
 8001156:	00d1      	lsls	r1, r2, #3
 8001158:	2280      	movs	r2, #128	; 0x80
 800115a:	0412      	lsls	r2, r2, #16
 800115c:	430a      	orrs	r2, r1
 800115e:	4651      	mov	r1, sl
 8001160:	0f49      	lsrs	r1, r1, #29
 8001162:	4311      	orrs	r1, r2
 8001164:	468b      	mov	fp, r1
 8001166:	4981      	ldr	r1, [pc, #516]	; (800136c <__aeabi_ddiv+0x280>)
 8001168:	4652      	mov	r2, sl
 800116a:	468c      	mov	ip, r1
 800116c:	9900      	ldr	r1, [sp, #0]
 800116e:	4463      	add	r3, ip
 8001170:	1acb      	subs	r3, r1, r3
 8001172:	2100      	movs	r1, #0
 8001174:	00d2      	lsls	r2, r2, #3
 8001176:	9300      	str	r3, [sp, #0]
 8001178:	002b      	movs	r3, r5
 800117a:	4063      	eors	r3, r4
 800117c:	469a      	mov	sl, r3
 800117e:	2e0f      	cmp	r6, #15
 8001180:	d900      	bls.n	8001184 <__aeabi_ddiv+0x98>
 8001182:	e105      	b.n	8001390 <__aeabi_ddiv+0x2a4>
 8001184:	4b7a      	ldr	r3, [pc, #488]	; (8001370 <__aeabi_ddiv+0x284>)
 8001186:	00b6      	lsls	r6, r6, #2
 8001188:	599b      	ldr	r3, [r3, r6]
 800118a:	469f      	mov	pc, r3
 800118c:	465b      	mov	r3, fp
 800118e:	4333      	orrs	r3, r6
 8001190:	4699      	mov	r9, r3
 8001192:	d000      	beq.n	8001196 <__aeabi_ddiv+0xaa>
 8001194:	e0b8      	b.n	8001308 <__aeabi_ddiv+0x21c>
 8001196:	2302      	movs	r3, #2
 8001198:	2608      	movs	r6, #8
 800119a:	2700      	movs	r7, #0
 800119c:	9000      	str	r0, [sp, #0]
 800119e:	9302      	str	r3, [sp, #8]
 80011a0:	e7ca      	b.n	8001138 <__aeabi_ddiv+0x4c>
 80011a2:	46cb      	mov	fp, r9
 80011a4:	003a      	movs	r2, r7
 80011a6:	9902      	ldr	r1, [sp, #8]
 80011a8:	9501      	str	r5, [sp, #4]
 80011aa:	9b01      	ldr	r3, [sp, #4]
 80011ac:	469a      	mov	sl, r3
 80011ae:	2902      	cmp	r1, #2
 80011b0:	d027      	beq.n	8001202 <__aeabi_ddiv+0x116>
 80011b2:	2903      	cmp	r1, #3
 80011b4:	d100      	bne.n	80011b8 <__aeabi_ddiv+0xcc>
 80011b6:	e280      	b.n	80016ba <__aeabi_ddiv+0x5ce>
 80011b8:	2901      	cmp	r1, #1
 80011ba:	d044      	beq.n	8001246 <__aeabi_ddiv+0x15a>
 80011bc:	496d      	ldr	r1, [pc, #436]	; (8001374 <__aeabi_ddiv+0x288>)
 80011be:	9b00      	ldr	r3, [sp, #0]
 80011c0:	468c      	mov	ip, r1
 80011c2:	4463      	add	r3, ip
 80011c4:	001c      	movs	r4, r3
 80011c6:	2c00      	cmp	r4, #0
 80011c8:	dd38      	ble.n	800123c <__aeabi_ddiv+0x150>
 80011ca:	0753      	lsls	r3, r2, #29
 80011cc:	d000      	beq.n	80011d0 <__aeabi_ddiv+0xe4>
 80011ce:	e213      	b.n	80015f8 <__aeabi_ddiv+0x50c>
 80011d0:	08d2      	lsrs	r2, r2, #3
 80011d2:	465b      	mov	r3, fp
 80011d4:	01db      	lsls	r3, r3, #7
 80011d6:	d509      	bpl.n	80011ec <__aeabi_ddiv+0x100>
 80011d8:	4659      	mov	r1, fp
 80011da:	4b67      	ldr	r3, [pc, #412]	; (8001378 <__aeabi_ddiv+0x28c>)
 80011dc:	4019      	ands	r1, r3
 80011de:	468b      	mov	fp, r1
 80011e0:	2180      	movs	r1, #128	; 0x80
 80011e2:	00c9      	lsls	r1, r1, #3
 80011e4:	468c      	mov	ip, r1
 80011e6:	9b00      	ldr	r3, [sp, #0]
 80011e8:	4463      	add	r3, ip
 80011ea:	001c      	movs	r4, r3
 80011ec:	4b63      	ldr	r3, [pc, #396]	; (800137c <__aeabi_ddiv+0x290>)
 80011ee:	429c      	cmp	r4, r3
 80011f0:	dc07      	bgt.n	8001202 <__aeabi_ddiv+0x116>
 80011f2:	465b      	mov	r3, fp
 80011f4:	0564      	lsls	r4, r4, #21
 80011f6:	075f      	lsls	r7, r3, #29
 80011f8:	025b      	lsls	r3, r3, #9
 80011fa:	4317      	orrs	r7, r2
 80011fc:	0b1b      	lsrs	r3, r3, #12
 80011fe:	0d62      	lsrs	r2, r4, #21
 8001200:	e002      	b.n	8001208 <__aeabi_ddiv+0x11c>
 8001202:	2300      	movs	r3, #0
 8001204:	2700      	movs	r7, #0
 8001206:	4a58      	ldr	r2, [pc, #352]	; (8001368 <__aeabi_ddiv+0x27c>)
 8001208:	2100      	movs	r1, #0
 800120a:	031b      	lsls	r3, r3, #12
 800120c:	0b1c      	lsrs	r4, r3, #12
 800120e:	0d0b      	lsrs	r3, r1, #20
 8001210:	051b      	lsls	r3, r3, #20
 8001212:	4323      	orrs	r3, r4
 8001214:	0514      	lsls	r4, r2, #20
 8001216:	4a5a      	ldr	r2, [pc, #360]	; (8001380 <__aeabi_ddiv+0x294>)
 8001218:	0038      	movs	r0, r7
 800121a:	4013      	ands	r3, r2
 800121c:	431c      	orrs	r4, r3
 800121e:	4653      	mov	r3, sl
 8001220:	0064      	lsls	r4, r4, #1
 8001222:	07db      	lsls	r3, r3, #31
 8001224:	0864      	lsrs	r4, r4, #1
 8001226:	431c      	orrs	r4, r3
 8001228:	0021      	movs	r1, r4
 800122a:	b005      	add	sp, #20
 800122c:	bc3c      	pop	{r2, r3, r4, r5}
 800122e:	4690      	mov	r8, r2
 8001230:	4699      	mov	r9, r3
 8001232:	46a2      	mov	sl, r4
 8001234:	46ab      	mov	fp, r5
 8001236:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001238:	2201      	movs	r2, #1
 800123a:	4252      	negs	r2, r2
 800123c:	2301      	movs	r3, #1
 800123e:	1b1b      	subs	r3, r3, r4
 8001240:	2b38      	cmp	r3, #56	; 0x38
 8001242:	dc00      	bgt.n	8001246 <__aeabi_ddiv+0x15a>
 8001244:	e1ad      	b.n	80015a2 <__aeabi_ddiv+0x4b6>
 8001246:	2200      	movs	r2, #0
 8001248:	2300      	movs	r3, #0
 800124a:	2700      	movs	r7, #0
 800124c:	e7dc      	b.n	8001208 <__aeabi_ddiv+0x11c>
 800124e:	465b      	mov	r3, fp
 8001250:	4333      	orrs	r3, r6
 8001252:	4699      	mov	r9, r3
 8001254:	d05e      	beq.n	8001314 <__aeabi_ddiv+0x228>
 8001256:	2e00      	cmp	r6, #0
 8001258:	d100      	bne.n	800125c <__aeabi_ddiv+0x170>
 800125a:	e18a      	b.n	8001572 <__aeabi_ddiv+0x486>
 800125c:	0030      	movs	r0, r6
 800125e:	f001 f9fd 	bl	800265c <__clzsi2>
 8001262:	0003      	movs	r3, r0
 8001264:	3b0b      	subs	r3, #11
 8001266:	2b1c      	cmp	r3, #28
 8001268:	dd00      	ble.n	800126c <__aeabi_ddiv+0x180>
 800126a:	e17b      	b.n	8001564 <__aeabi_ddiv+0x478>
 800126c:	221d      	movs	r2, #29
 800126e:	1ad3      	subs	r3, r2, r3
 8001270:	465a      	mov	r2, fp
 8001272:	0001      	movs	r1, r0
 8001274:	40da      	lsrs	r2, r3
 8001276:	3908      	subs	r1, #8
 8001278:	408e      	lsls	r6, r1
 800127a:	0013      	movs	r3, r2
 800127c:	465f      	mov	r7, fp
 800127e:	4333      	orrs	r3, r6
 8001280:	4699      	mov	r9, r3
 8001282:	408f      	lsls	r7, r1
 8001284:	4b3f      	ldr	r3, [pc, #252]	; (8001384 <__aeabi_ddiv+0x298>)
 8001286:	2600      	movs	r6, #0
 8001288:	1a1b      	subs	r3, r3, r0
 800128a:	9300      	str	r3, [sp, #0]
 800128c:	2300      	movs	r3, #0
 800128e:	9302      	str	r3, [sp, #8]
 8001290:	e752      	b.n	8001138 <__aeabi_ddiv+0x4c>
 8001292:	4641      	mov	r1, r8
 8001294:	4653      	mov	r3, sl
 8001296:	430b      	orrs	r3, r1
 8001298:	493b      	ldr	r1, [pc, #236]	; (8001388 <__aeabi_ddiv+0x29c>)
 800129a:	469b      	mov	fp, r3
 800129c:	468c      	mov	ip, r1
 800129e:	9b00      	ldr	r3, [sp, #0]
 80012a0:	4463      	add	r3, ip
 80012a2:	9300      	str	r3, [sp, #0]
 80012a4:	465b      	mov	r3, fp
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d13b      	bne.n	8001322 <__aeabi_ddiv+0x236>
 80012aa:	2302      	movs	r3, #2
 80012ac:	2200      	movs	r2, #0
 80012ae:	431e      	orrs	r6, r3
 80012b0:	2102      	movs	r1, #2
 80012b2:	e761      	b.n	8001178 <__aeabi_ddiv+0x8c>
 80012b4:	4643      	mov	r3, r8
 80012b6:	4313      	orrs	r3, r2
 80012b8:	469b      	mov	fp, r3
 80012ba:	d037      	beq.n	800132c <__aeabi_ddiv+0x240>
 80012bc:	4643      	mov	r3, r8
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d100      	bne.n	80012c4 <__aeabi_ddiv+0x1d8>
 80012c2:	e162      	b.n	800158a <__aeabi_ddiv+0x49e>
 80012c4:	4640      	mov	r0, r8
 80012c6:	f001 f9c9 	bl	800265c <__clzsi2>
 80012ca:	0003      	movs	r3, r0
 80012cc:	3b0b      	subs	r3, #11
 80012ce:	2b1c      	cmp	r3, #28
 80012d0:	dd00      	ble.n	80012d4 <__aeabi_ddiv+0x1e8>
 80012d2:	e153      	b.n	800157c <__aeabi_ddiv+0x490>
 80012d4:	0002      	movs	r2, r0
 80012d6:	4641      	mov	r1, r8
 80012d8:	3a08      	subs	r2, #8
 80012da:	4091      	lsls	r1, r2
 80012dc:	4688      	mov	r8, r1
 80012de:	211d      	movs	r1, #29
 80012e0:	1acb      	subs	r3, r1, r3
 80012e2:	4651      	mov	r1, sl
 80012e4:	40d9      	lsrs	r1, r3
 80012e6:	000b      	movs	r3, r1
 80012e8:	4641      	mov	r1, r8
 80012ea:	430b      	orrs	r3, r1
 80012ec:	469b      	mov	fp, r3
 80012ee:	4653      	mov	r3, sl
 80012f0:	4093      	lsls	r3, r2
 80012f2:	001a      	movs	r2, r3
 80012f4:	9b00      	ldr	r3, [sp, #0]
 80012f6:	4925      	ldr	r1, [pc, #148]	; (800138c <__aeabi_ddiv+0x2a0>)
 80012f8:	469c      	mov	ip, r3
 80012fa:	4460      	add	r0, ip
 80012fc:	0003      	movs	r3, r0
 80012fe:	468c      	mov	ip, r1
 8001300:	4463      	add	r3, ip
 8001302:	9300      	str	r3, [sp, #0]
 8001304:	2100      	movs	r1, #0
 8001306:	e737      	b.n	8001178 <__aeabi_ddiv+0x8c>
 8001308:	2303      	movs	r3, #3
 800130a:	46b1      	mov	r9, r6
 800130c:	9000      	str	r0, [sp, #0]
 800130e:	260c      	movs	r6, #12
 8001310:	9302      	str	r3, [sp, #8]
 8001312:	e711      	b.n	8001138 <__aeabi_ddiv+0x4c>
 8001314:	2300      	movs	r3, #0
 8001316:	9300      	str	r3, [sp, #0]
 8001318:	3301      	adds	r3, #1
 800131a:	2604      	movs	r6, #4
 800131c:	2700      	movs	r7, #0
 800131e:	9302      	str	r3, [sp, #8]
 8001320:	e70a      	b.n	8001138 <__aeabi_ddiv+0x4c>
 8001322:	2303      	movs	r3, #3
 8001324:	46c3      	mov	fp, r8
 8001326:	431e      	orrs	r6, r3
 8001328:	2103      	movs	r1, #3
 800132a:	e725      	b.n	8001178 <__aeabi_ddiv+0x8c>
 800132c:	3301      	adds	r3, #1
 800132e:	431e      	orrs	r6, r3
 8001330:	2200      	movs	r2, #0
 8001332:	2101      	movs	r1, #1
 8001334:	e720      	b.n	8001178 <__aeabi_ddiv+0x8c>
 8001336:	2300      	movs	r3, #0
 8001338:	469a      	mov	sl, r3
 800133a:	2380      	movs	r3, #128	; 0x80
 800133c:	2700      	movs	r7, #0
 800133e:	031b      	lsls	r3, r3, #12
 8001340:	4a09      	ldr	r2, [pc, #36]	; (8001368 <__aeabi_ddiv+0x27c>)
 8001342:	e761      	b.n	8001208 <__aeabi_ddiv+0x11c>
 8001344:	2380      	movs	r3, #128	; 0x80
 8001346:	4649      	mov	r1, r9
 8001348:	031b      	lsls	r3, r3, #12
 800134a:	4219      	tst	r1, r3
 800134c:	d100      	bne.n	8001350 <__aeabi_ddiv+0x264>
 800134e:	e0e2      	b.n	8001516 <__aeabi_ddiv+0x42a>
 8001350:	4659      	mov	r1, fp
 8001352:	4219      	tst	r1, r3
 8001354:	d000      	beq.n	8001358 <__aeabi_ddiv+0x26c>
 8001356:	e0de      	b.n	8001516 <__aeabi_ddiv+0x42a>
 8001358:	430b      	orrs	r3, r1
 800135a:	031b      	lsls	r3, r3, #12
 800135c:	0017      	movs	r7, r2
 800135e:	0b1b      	lsrs	r3, r3, #12
 8001360:	46a2      	mov	sl, r4
 8001362:	4a01      	ldr	r2, [pc, #4]	; (8001368 <__aeabi_ddiv+0x27c>)
 8001364:	e750      	b.n	8001208 <__aeabi_ddiv+0x11c>
 8001366:	46c0      	nop			; (mov r8, r8)
 8001368:	000007ff 	.word	0x000007ff
 800136c:	fffffc01 	.word	0xfffffc01
 8001370:	0800efdc 	.word	0x0800efdc
 8001374:	000003ff 	.word	0x000003ff
 8001378:	feffffff 	.word	0xfeffffff
 800137c:	000007fe 	.word	0x000007fe
 8001380:	800fffff 	.word	0x800fffff
 8001384:	fffffc0d 	.word	0xfffffc0d
 8001388:	fffff801 	.word	0xfffff801
 800138c:	000003f3 	.word	0x000003f3
 8001390:	45d9      	cmp	r9, fp
 8001392:	d900      	bls.n	8001396 <__aeabi_ddiv+0x2aa>
 8001394:	e0cb      	b.n	800152e <__aeabi_ddiv+0x442>
 8001396:	d100      	bne.n	800139a <__aeabi_ddiv+0x2ae>
 8001398:	e0c6      	b.n	8001528 <__aeabi_ddiv+0x43c>
 800139a:	003c      	movs	r4, r7
 800139c:	4648      	mov	r0, r9
 800139e:	2700      	movs	r7, #0
 80013a0:	9b00      	ldr	r3, [sp, #0]
 80013a2:	3b01      	subs	r3, #1
 80013a4:	9300      	str	r3, [sp, #0]
 80013a6:	465b      	mov	r3, fp
 80013a8:	0e16      	lsrs	r6, r2, #24
 80013aa:	021b      	lsls	r3, r3, #8
 80013ac:	431e      	orrs	r6, r3
 80013ae:	0213      	lsls	r3, r2, #8
 80013b0:	4698      	mov	r8, r3
 80013b2:	0433      	lsls	r3, r6, #16
 80013b4:	0c1b      	lsrs	r3, r3, #16
 80013b6:	4699      	mov	r9, r3
 80013b8:	0c31      	lsrs	r1, r6, #16
 80013ba:	9101      	str	r1, [sp, #4]
 80013bc:	f7fe ff48 	bl	8000250 <__aeabi_uidivmod>
 80013c0:	464a      	mov	r2, r9
 80013c2:	4342      	muls	r2, r0
 80013c4:	040b      	lsls	r3, r1, #16
 80013c6:	0c21      	lsrs	r1, r4, #16
 80013c8:	0005      	movs	r5, r0
 80013ca:	4319      	orrs	r1, r3
 80013cc:	428a      	cmp	r2, r1
 80013ce:	d907      	bls.n	80013e0 <__aeabi_ddiv+0x2f4>
 80013d0:	1989      	adds	r1, r1, r6
 80013d2:	3d01      	subs	r5, #1
 80013d4:	428e      	cmp	r6, r1
 80013d6:	d803      	bhi.n	80013e0 <__aeabi_ddiv+0x2f4>
 80013d8:	428a      	cmp	r2, r1
 80013da:	d901      	bls.n	80013e0 <__aeabi_ddiv+0x2f4>
 80013dc:	1e85      	subs	r5, r0, #2
 80013de:	1989      	adds	r1, r1, r6
 80013e0:	1a88      	subs	r0, r1, r2
 80013e2:	9901      	ldr	r1, [sp, #4]
 80013e4:	f7fe ff34 	bl	8000250 <__aeabi_uidivmod>
 80013e8:	0409      	lsls	r1, r1, #16
 80013ea:	468c      	mov	ip, r1
 80013ec:	464a      	mov	r2, r9
 80013ee:	0421      	lsls	r1, r4, #16
 80013f0:	4664      	mov	r4, ip
 80013f2:	4342      	muls	r2, r0
 80013f4:	0c09      	lsrs	r1, r1, #16
 80013f6:	0003      	movs	r3, r0
 80013f8:	4321      	orrs	r1, r4
 80013fa:	428a      	cmp	r2, r1
 80013fc:	d904      	bls.n	8001408 <__aeabi_ddiv+0x31c>
 80013fe:	1989      	adds	r1, r1, r6
 8001400:	3b01      	subs	r3, #1
 8001402:	428e      	cmp	r6, r1
 8001404:	d800      	bhi.n	8001408 <__aeabi_ddiv+0x31c>
 8001406:	e0f1      	b.n	80015ec <__aeabi_ddiv+0x500>
 8001408:	042d      	lsls	r5, r5, #16
 800140a:	431d      	orrs	r5, r3
 800140c:	46ab      	mov	fp, r5
 800140e:	4643      	mov	r3, r8
 8001410:	1a89      	subs	r1, r1, r2
 8001412:	4642      	mov	r2, r8
 8001414:	0c28      	lsrs	r0, r5, #16
 8001416:	0412      	lsls	r2, r2, #16
 8001418:	0c1d      	lsrs	r5, r3, #16
 800141a:	465b      	mov	r3, fp
 800141c:	0c14      	lsrs	r4, r2, #16
 800141e:	0022      	movs	r2, r4
 8001420:	041b      	lsls	r3, r3, #16
 8001422:	0c1b      	lsrs	r3, r3, #16
 8001424:	435a      	muls	r2, r3
 8001426:	9403      	str	r4, [sp, #12]
 8001428:	436b      	muls	r3, r5
 800142a:	4344      	muls	r4, r0
 800142c:	9502      	str	r5, [sp, #8]
 800142e:	4368      	muls	r0, r5
 8001430:	191b      	adds	r3, r3, r4
 8001432:	0c15      	lsrs	r5, r2, #16
 8001434:	18eb      	adds	r3, r5, r3
 8001436:	429c      	cmp	r4, r3
 8001438:	d903      	bls.n	8001442 <__aeabi_ddiv+0x356>
 800143a:	2480      	movs	r4, #128	; 0x80
 800143c:	0264      	lsls	r4, r4, #9
 800143e:	46a4      	mov	ip, r4
 8001440:	4460      	add	r0, ip
 8001442:	0c1c      	lsrs	r4, r3, #16
 8001444:	0415      	lsls	r5, r2, #16
 8001446:	041b      	lsls	r3, r3, #16
 8001448:	0c2d      	lsrs	r5, r5, #16
 800144a:	1820      	adds	r0, r4, r0
 800144c:	195d      	adds	r5, r3, r5
 800144e:	4281      	cmp	r1, r0
 8001450:	d377      	bcc.n	8001542 <__aeabi_ddiv+0x456>
 8001452:	d073      	beq.n	800153c <__aeabi_ddiv+0x450>
 8001454:	1a0c      	subs	r4, r1, r0
 8001456:	4aa2      	ldr	r2, [pc, #648]	; (80016e0 <__aeabi_ddiv+0x5f4>)
 8001458:	1b7d      	subs	r5, r7, r5
 800145a:	42af      	cmp	r7, r5
 800145c:	41bf      	sbcs	r7, r7
 800145e:	4694      	mov	ip, r2
 8001460:	9b00      	ldr	r3, [sp, #0]
 8001462:	427f      	negs	r7, r7
 8001464:	4463      	add	r3, ip
 8001466:	1be0      	subs	r0, r4, r7
 8001468:	001c      	movs	r4, r3
 800146a:	4286      	cmp	r6, r0
 800146c:	d100      	bne.n	8001470 <__aeabi_ddiv+0x384>
 800146e:	e0db      	b.n	8001628 <__aeabi_ddiv+0x53c>
 8001470:	9901      	ldr	r1, [sp, #4]
 8001472:	f7fe feed 	bl	8000250 <__aeabi_uidivmod>
 8001476:	464a      	mov	r2, r9
 8001478:	4342      	muls	r2, r0
 800147a:	040b      	lsls	r3, r1, #16
 800147c:	0c29      	lsrs	r1, r5, #16
 800147e:	0007      	movs	r7, r0
 8001480:	4319      	orrs	r1, r3
 8001482:	428a      	cmp	r2, r1
 8001484:	d907      	bls.n	8001496 <__aeabi_ddiv+0x3aa>
 8001486:	1989      	adds	r1, r1, r6
 8001488:	3f01      	subs	r7, #1
 800148a:	428e      	cmp	r6, r1
 800148c:	d803      	bhi.n	8001496 <__aeabi_ddiv+0x3aa>
 800148e:	428a      	cmp	r2, r1
 8001490:	d901      	bls.n	8001496 <__aeabi_ddiv+0x3aa>
 8001492:	1e87      	subs	r7, r0, #2
 8001494:	1989      	adds	r1, r1, r6
 8001496:	1a88      	subs	r0, r1, r2
 8001498:	9901      	ldr	r1, [sp, #4]
 800149a:	f7fe fed9 	bl	8000250 <__aeabi_uidivmod>
 800149e:	0409      	lsls	r1, r1, #16
 80014a0:	464a      	mov	r2, r9
 80014a2:	4689      	mov	r9, r1
 80014a4:	0429      	lsls	r1, r5, #16
 80014a6:	464d      	mov	r5, r9
 80014a8:	4342      	muls	r2, r0
 80014aa:	0c09      	lsrs	r1, r1, #16
 80014ac:	0003      	movs	r3, r0
 80014ae:	4329      	orrs	r1, r5
 80014b0:	428a      	cmp	r2, r1
 80014b2:	d907      	bls.n	80014c4 <__aeabi_ddiv+0x3d8>
 80014b4:	1989      	adds	r1, r1, r6
 80014b6:	3b01      	subs	r3, #1
 80014b8:	428e      	cmp	r6, r1
 80014ba:	d803      	bhi.n	80014c4 <__aeabi_ddiv+0x3d8>
 80014bc:	428a      	cmp	r2, r1
 80014be:	d901      	bls.n	80014c4 <__aeabi_ddiv+0x3d8>
 80014c0:	1e83      	subs	r3, r0, #2
 80014c2:	1989      	adds	r1, r1, r6
 80014c4:	043f      	lsls	r7, r7, #16
 80014c6:	1a89      	subs	r1, r1, r2
 80014c8:	003a      	movs	r2, r7
 80014ca:	9f03      	ldr	r7, [sp, #12]
 80014cc:	431a      	orrs	r2, r3
 80014ce:	0038      	movs	r0, r7
 80014d0:	0413      	lsls	r3, r2, #16
 80014d2:	0c1b      	lsrs	r3, r3, #16
 80014d4:	4358      	muls	r0, r3
 80014d6:	4681      	mov	r9, r0
 80014d8:	9802      	ldr	r0, [sp, #8]
 80014da:	0c15      	lsrs	r5, r2, #16
 80014dc:	436f      	muls	r7, r5
 80014de:	4343      	muls	r3, r0
 80014e0:	4345      	muls	r5, r0
 80014e2:	4648      	mov	r0, r9
 80014e4:	0c00      	lsrs	r0, r0, #16
 80014e6:	4684      	mov	ip, r0
 80014e8:	19db      	adds	r3, r3, r7
 80014ea:	4463      	add	r3, ip
 80014ec:	429f      	cmp	r7, r3
 80014ee:	d903      	bls.n	80014f8 <__aeabi_ddiv+0x40c>
 80014f0:	2080      	movs	r0, #128	; 0x80
 80014f2:	0240      	lsls	r0, r0, #9
 80014f4:	4684      	mov	ip, r0
 80014f6:	4465      	add	r5, ip
 80014f8:	4648      	mov	r0, r9
 80014fa:	0c1f      	lsrs	r7, r3, #16
 80014fc:	0400      	lsls	r0, r0, #16
 80014fe:	041b      	lsls	r3, r3, #16
 8001500:	0c00      	lsrs	r0, r0, #16
 8001502:	197d      	adds	r5, r7, r5
 8001504:	1818      	adds	r0, r3, r0
 8001506:	42a9      	cmp	r1, r5
 8001508:	d200      	bcs.n	800150c <__aeabi_ddiv+0x420>
 800150a:	e084      	b.n	8001616 <__aeabi_ddiv+0x52a>
 800150c:	d100      	bne.n	8001510 <__aeabi_ddiv+0x424>
 800150e:	e07f      	b.n	8001610 <__aeabi_ddiv+0x524>
 8001510:	2301      	movs	r3, #1
 8001512:	431a      	orrs	r2, r3
 8001514:	e657      	b.n	80011c6 <__aeabi_ddiv+0xda>
 8001516:	2380      	movs	r3, #128	; 0x80
 8001518:	464a      	mov	r2, r9
 800151a:	031b      	lsls	r3, r3, #12
 800151c:	4313      	orrs	r3, r2
 800151e:	031b      	lsls	r3, r3, #12
 8001520:	0b1b      	lsrs	r3, r3, #12
 8001522:	46aa      	mov	sl, r5
 8001524:	4a6f      	ldr	r2, [pc, #444]	; (80016e4 <__aeabi_ddiv+0x5f8>)
 8001526:	e66f      	b.n	8001208 <__aeabi_ddiv+0x11c>
 8001528:	42ba      	cmp	r2, r7
 800152a:	d900      	bls.n	800152e <__aeabi_ddiv+0x442>
 800152c:	e735      	b.n	800139a <__aeabi_ddiv+0x2ae>
 800152e:	464b      	mov	r3, r9
 8001530:	07dc      	lsls	r4, r3, #31
 8001532:	0858      	lsrs	r0, r3, #1
 8001534:	087b      	lsrs	r3, r7, #1
 8001536:	431c      	orrs	r4, r3
 8001538:	07ff      	lsls	r7, r7, #31
 800153a:	e734      	b.n	80013a6 <__aeabi_ddiv+0x2ba>
 800153c:	2400      	movs	r4, #0
 800153e:	42af      	cmp	r7, r5
 8001540:	d289      	bcs.n	8001456 <__aeabi_ddiv+0x36a>
 8001542:	4447      	add	r7, r8
 8001544:	4547      	cmp	r7, r8
 8001546:	41a4      	sbcs	r4, r4
 8001548:	465b      	mov	r3, fp
 800154a:	4264      	negs	r4, r4
 800154c:	19a4      	adds	r4, r4, r6
 800154e:	1864      	adds	r4, r4, r1
 8001550:	3b01      	subs	r3, #1
 8001552:	42a6      	cmp	r6, r4
 8001554:	d21e      	bcs.n	8001594 <__aeabi_ddiv+0x4a8>
 8001556:	42a0      	cmp	r0, r4
 8001558:	d86d      	bhi.n	8001636 <__aeabi_ddiv+0x54a>
 800155a:	d100      	bne.n	800155e <__aeabi_ddiv+0x472>
 800155c:	e0b6      	b.n	80016cc <__aeabi_ddiv+0x5e0>
 800155e:	1a24      	subs	r4, r4, r0
 8001560:	469b      	mov	fp, r3
 8001562:	e778      	b.n	8001456 <__aeabi_ddiv+0x36a>
 8001564:	0003      	movs	r3, r0
 8001566:	465a      	mov	r2, fp
 8001568:	3b28      	subs	r3, #40	; 0x28
 800156a:	409a      	lsls	r2, r3
 800156c:	2700      	movs	r7, #0
 800156e:	4691      	mov	r9, r2
 8001570:	e688      	b.n	8001284 <__aeabi_ddiv+0x198>
 8001572:	4658      	mov	r0, fp
 8001574:	f001 f872 	bl	800265c <__clzsi2>
 8001578:	3020      	adds	r0, #32
 800157a:	e672      	b.n	8001262 <__aeabi_ddiv+0x176>
 800157c:	0003      	movs	r3, r0
 800157e:	4652      	mov	r2, sl
 8001580:	3b28      	subs	r3, #40	; 0x28
 8001582:	409a      	lsls	r2, r3
 8001584:	4693      	mov	fp, r2
 8001586:	2200      	movs	r2, #0
 8001588:	e6b4      	b.n	80012f4 <__aeabi_ddiv+0x208>
 800158a:	4650      	mov	r0, sl
 800158c:	f001 f866 	bl	800265c <__clzsi2>
 8001590:	3020      	adds	r0, #32
 8001592:	e69a      	b.n	80012ca <__aeabi_ddiv+0x1de>
 8001594:	42a6      	cmp	r6, r4
 8001596:	d1e2      	bne.n	800155e <__aeabi_ddiv+0x472>
 8001598:	45b8      	cmp	r8, r7
 800159a:	d9dc      	bls.n	8001556 <__aeabi_ddiv+0x46a>
 800159c:	1a34      	subs	r4, r6, r0
 800159e:	469b      	mov	fp, r3
 80015a0:	e759      	b.n	8001456 <__aeabi_ddiv+0x36a>
 80015a2:	2b1f      	cmp	r3, #31
 80015a4:	dc65      	bgt.n	8001672 <__aeabi_ddiv+0x586>
 80015a6:	4c50      	ldr	r4, [pc, #320]	; (80016e8 <__aeabi_ddiv+0x5fc>)
 80015a8:	9900      	ldr	r1, [sp, #0]
 80015aa:	46a4      	mov	ip, r4
 80015ac:	465c      	mov	r4, fp
 80015ae:	4461      	add	r1, ip
 80015b0:	0008      	movs	r0, r1
 80015b2:	408c      	lsls	r4, r1
 80015b4:	0011      	movs	r1, r2
 80015b6:	4082      	lsls	r2, r0
 80015b8:	40d9      	lsrs	r1, r3
 80015ba:	1e50      	subs	r0, r2, #1
 80015bc:	4182      	sbcs	r2, r0
 80015be:	430c      	orrs	r4, r1
 80015c0:	4314      	orrs	r4, r2
 80015c2:	465a      	mov	r2, fp
 80015c4:	40da      	lsrs	r2, r3
 80015c6:	0013      	movs	r3, r2
 80015c8:	0762      	lsls	r2, r4, #29
 80015ca:	d009      	beq.n	80015e0 <__aeabi_ddiv+0x4f4>
 80015cc:	220f      	movs	r2, #15
 80015ce:	4022      	ands	r2, r4
 80015d0:	2a04      	cmp	r2, #4
 80015d2:	d005      	beq.n	80015e0 <__aeabi_ddiv+0x4f4>
 80015d4:	0022      	movs	r2, r4
 80015d6:	1d14      	adds	r4, r2, #4
 80015d8:	4294      	cmp	r4, r2
 80015da:	4189      	sbcs	r1, r1
 80015dc:	4249      	negs	r1, r1
 80015de:	185b      	adds	r3, r3, r1
 80015e0:	021a      	lsls	r2, r3, #8
 80015e2:	d562      	bpl.n	80016aa <__aeabi_ddiv+0x5be>
 80015e4:	2201      	movs	r2, #1
 80015e6:	2300      	movs	r3, #0
 80015e8:	2700      	movs	r7, #0
 80015ea:	e60d      	b.n	8001208 <__aeabi_ddiv+0x11c>
 80015ec:	428a      	cmp	r2, r1
 80015ee:	d800      	bhi.n	80015f2 <__aeabi_ddiv+0x506>
 80015f0:	e70a      	b.n	8001408 <__aeabi_ddiv+0x31c>
 80015f2:	1e83      	subs	r3, r0, #2
 80015f4:	1989      	adds	r1, r1, r6
 80015f6:	e707      	b.n	8001408 <__aeabi_ddiv+0x31c>
 80015f8:	230f      	movs	r3, #15
 80015fa:	4013      	ands	r3, r2
 80015fc:	2b04      	cmp	r3, #4
 80015fe:	d100      	bne.n	8001602 <__aeabi_ddiv+0x516>
 8001600:	e5e6      	b.n	80011d0 <__aeabi_ddiv+0xe4>
 8001602:	1d17      	adds	r7, r2, #4
 8001604:	4297      	cmp	r7, r2
 8001606:	4192      	sbcs	r2, r2
 8001608:	4253      	negs	r3, r2
 800160a:	449b      	add	fp, r3
 800160c:	08fa      	lsrs	r2, r7, #3
 800160e:	e5e0      	b.n	80011d2 <__aeabi_ddiv+0xe6>
 8001610:	2800      	cmp	r0, #0
 8001612:	d100      	bne.n	8001616 <__aeabi_ddiv+0x52a>
 8001614:	e5d7      	b.n	80011c6 <__aeabi_ddiv+0xda>
 8001616:	1871      	adds	r1, r6, r1
 8001618:	1e53      	subs	r3, r2, #1
 800161a:	42b1      	cmp	r1, r6
 800161c:	d327      	bcc.n	800166e <__aeabi_ddiv+0x582>
 800161e:	42a9      	cmp	r1, r5
 8001620:	d315      	bcc.n	800164e <__aeabi_ddiv+0x562>
 8001622:	d058      	beq.n	80016d6 <__aeabi_ddiv+0x5ea>
 8001624:	001a      	movs	r2, r3
 8001626:	e773      	b.n	8001510 <__aeabi_ddiv+0x424>
 8001628:	2b00      	cmp	r3, #0
 800162a:	dc00      	bgt.n	800162e <__aeabi_ddiv+0x542>
 800162c:	e604      	b.n	8001238 <__aeabi_ddiv+0x14c>
 800162e:	2301      	movs	r3, #1
 8001630:	2200      	movs	r2, #0
 8001632:	449b      	add	fp, r3
 8001634:	e5cd      	b.n	80011d2 <__aeabi_ddiv+0xe6>
 8001636:	2302      	movs	r3, #2
 8001638:	4447      	add	r7, r8
 800163a:	4547      	cmp	r7, r8
 800163c:	4189      	sbcs	r1, r1
 800163e:	425b      	negs	r3, r3
 8001640:	469c      	mov	ip, r3
 8001642:	4249      	negs	r1, r1
 8001644:	1989      	adds	r1, r1, r6
 8001646:	190c      	adds	r4, r1, r4
 8001648:	44e3      	add	fp, ip
 800164a:	1a24      	subs	r4, r4, r0
 800164c:	e703      	b.n	8001456 <__aeabi_ddiv+0x36a>
 800164e:	4643      	mov	r3, r8
 8001650:	005f      	lsls	r7, r3, #1
 8001652:	4547      	cmp	r7, r8
 8001654:	419b      	sbcs	r3, r3
 8001656:	46b8      	mov	r8, r7
 8001658:	425b      	negs	r3, r3
 800165a:	199e      	adds	r6, r3, r6
 800165c:	3a02      	subs	r2, #2
 800165e:	1989      	adds	r1, r1, r6
 8001660:	42a9      	cmp	r1, r5
 8001662:	d000      	beq.n	8001666 <__aeabi_ddiv+0x57a>
 8001664:	e754      	b.n	8001510 <__aeabi_ddiv+0x424>
 8001666:	4540      	cmp	r0, r8
 8001668:	d000      	beq.n	800166c <__aeabi_ddiv+0x580>
 800166a:	e751      	b.n	8001510 <__aeabi_ddiv+0x424>
 800166c:	e5ab      	b.n	80011c6 <__aeabi_ddiv+0xda>
 800166e:	001a      	movs	r2, r3
 8001670:	e7f6      	b.n	8001660 <__aeabi_ddiv+0x574>
 8001672:	211f      	movs	r1, #31
 8001674:	465f      	mov	r7, fp
 8001676:	4249      	negs	r1, r1
 8001678:	1b0c      	subs	r4, r1, r4
 800167a:	40e7      	lsrs	r7, r4
 800167c:	2b20      	cmp	r3, #32
 800167e:	d007      	beq.n	8001690 <__aeabi_ddiv+0x5a4>
 8001680:	491a      	ldr	r1, [pc, #104]	; (80016ec <__aeabi_ddiv+0x600>)
 8001682:	9b00      	ldr	r3, [sp, #0]
 8001684:	468c      	mov	ip, r1
 8001686:	4463      	add	r3, ip
 8001688:	0018      	movs	r0, r3
 800168a:	465b      	mov	r3, fp
 800168c:	4083      	lsls	r3, r0
 800168e:	431a      	orrs	r2, r3
 8001690:	1e50      	subs	r0, r2, #1
 8001692:	4182      	sbcs	r2, r0
 8001694:	433a      	orrs	r2, r7
 8001696:	2707      	movs	r7, #7
 8001698:	2300      	movs	r3, #0
 800169a:	4017      	ands	r7, r2
 800169c:	d009      	beq.n	80016b2 <__aeabi_ddiv+0x5c6>
 800169e:	210f      	movs	r1, #15
 80016a0:	2300      	movs	r3, #0
 80016a2:	4011      	ands	r1, r2
 80016a4:	0014      	movs	r4, r2
 80016a6:	2904      	cmp	r1, #4
 80016a8:	d195      	bne.n	80015d6 <__aeabi_ddiv+0x4ea>
 80016aa:	0022      	movs	r2, r4
 80016ac:	075f      	lsls	r7, r3, #29
 80016ae:	025b      	lsls	r3, r3, #9
 80016b0:	0b1b      	lsrs	r3, r3, #12
 80016b2:	08d2      	lsrs	r2, r2, #3
 80016b4:	4317      	orrs	r7, r2
 80016b6:	2200      	movs	r2, #0
 80016b8:	e5a6      	b.n	8001208 <__aeabi_ddiv+0x11c>
 80016ba:	2380      	movs	r3, #128	; 0x80
 80016bc:	4659      	mov	r1, fp
 80016be:	031b      	lsls	r3, r3, #12
 80016c0:	430b      	orrs	r3, r1
 80016c2:	031b      	lsls	r3, r3, #12
 80016c4:	0017      	movs	r7, r2
 80016c6:	0b1b      	lsrs	r3, r3, #12
 80016c8:	4a06      	ldr	r2, [pc, #24]	; (80016e4 <__aeabi_ddiv+0x5f8>)
 80016ca:	e59d      	b.n	8001208 <__aeabi_ddiv+0x11c>
 80016cc:	42bd      	cmp	r5, r7
 80016ce:	d8b2      	bhi.n	8001636 <__aeabi_ddiv+0x54a>
 80016d0:	469b      	mov	fp, r3
 80016d2:	2400      	movs	r4, #0
 80016d4:	e6bf      	b.n	8001456 <__aeabi_ddiv+0x36a>
 80016d6:	4580      	cmp	r8, r0
 80016d8:	d3b9      	bcc.n	800164e <__aeabi_ddiv+0x562>
 80016da:	001a      	movs	r2, r3
 80016dc:	e7c3      	b.n	8001666 <__aeabi_ddiv+0x57a>
 80016de:	46c0      	nop			; (mov r8, r8)
 80016e0:	000003ff 	.word	0x000003ff
 80016e4:	000007ff 	.word	0x000007ff
 80016e8:	0000041e 	.word	0x0000041e
 80016ec:	0000043e 	.word	0x0000043e

080016f0 <__eqdf2>:
 80016f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016f2:	464f      	mov	r7, r9
 80016f4:	4646      	mov	r6, r8
 80016f6:	46d6      	mov	lr, sl
 80016f8:	4684      	mov	ip, r0
 80016fa:	b5c0      	push	{r6, r7, lr}
 80016fc:	4680      	mov	r8, r0
 80016fe:	4e19      	ldr	r6, [pc, #100]	; (8001764 <__eqdf2+0x74>)
 8001700:	0318      	lsls	r0, r3, #12
 8001702:	030f      	lsls	r7, r1, #12
 8001704:	004d      	lsls	r5, r1, #1
 8001706:	0b00      	lsrs	r0, r0, #12
 8001708:	005c      	lsls	r4, r3, #1
 800170a:	4682      	mov	sl, r0
 800170c:	0b3f      	lsrs	r7, r7, #12
 800170e:	0d6d      	lsrs	r5, r5, #21
 8001710:	0fc9      	lsrs	r1, r1, #31
 8001712:	4691      	mov	r9, r2
 8001714:	0d64      	lsrs	r4, r4, #21
 8001716:	0fdb      	lsrs	r3, r3, #31
 8001718:	2001      	movs	r0, #1
 800171a:	42b5      	cmp	r5, r6
 800171c:	d00a      	beq.n	8001734 <__eqdf2+0x44>
 800171e:	42b4      	cmp	r4, r6
 8001720:	d003      	beq.n	800172a <__eqdf2+0x3a>
 8001722:	42a5      	cmp	r5, r4
 8001724:	d101      	bne.n	800172a <__eqdf2+0x3a>
 8001726:	4557      	cmp	r7, sl
 8001728:	d00c      	beq.n	8001744 <__eqdf2+0x54>
 800172a:	bc1c      	pop	{r2, r3, r4}
 800172c:	4690      	mov	r8, r2
 800172e:	4699      	mov	r9, r3
 8001730:	46a2      	mov	sl, r4
 8001732:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001734:	4666      	mov	r6, ip
 8001736:	433e      	orrs	r6, r7
 8001738:	d1f7      	bne.n	800172a <__eqdf2+0x3a>
 800173a:	42ac      	cmp	r4, r5
 800173c:	d1f5      	bne.n	800172a <__eqdf2+0x3a>
 800173e:	4654      	mov	r4, sl
 8001740:	4314      	orrs	r4, r2
 8001742:	d1f2      	bne.n	800172a <__eqdf2+0x3a>
 8001744:	2001      	movs	r0, #1
 8001746:	45c8      	cmp	r8, r9
 8001748:	d1ef      	bne.n	800172a <__eqdf2+0x3a>
 800174a:	4299      	cmp	r1, r3
 800174c:	d007      	beq.n	800175e <__eqdf2+0x6e>
 800174e:	2d00      	cmp	r5, #0
 8001750:	d1eb      	bne.n	800172a <__eqdf2+0x3a>
 8001752:	4663      	mov	r3, ip
 8001754:	431f      	orrs	r7, r3
 8001756:	0038      	movs	r0, r7
 8001758:	1e47      	subs	r7, r0, #1
 800175a:	41b8      	sbcs	r0, r7
 800175c:	e7e5      	b.n	800172a <__eqdf2+0x3a>
 800175e:	2000      	movs	r0, #0
 8001760:	e7e3      	b.n	800172a <__eqdf2+0x3a>
 8001762:	46c0      	nop			; (mov r8, r8)
 8001764:	000007ff 	.word	0x000007ff

08001768 <__gedf2>:
 8001768:	b5f0      	push	{r4, r5, r6, r7, lr}
 800176a:	464f      	mov	r7, r9
 800176c:	4646      	mov	r6, r8
 800176e:	46d6      	mov	lr, sl
 8001770:	004d      	lsls	r5, r1, #1
 8001772:	b5c0      	push	{r6, r7, lr}
 8001774:	030e      	lsls	r6, r1, #12
 8001776:	0fc9      	lsrs	r1, r1, #31
 8001778:	468a      	mov	sl, r1
 800177a:	492c      	ldr	r1, [pc, #176]	; (800182c <__gedf2+0xc4>)
 800177c:	031f      	lsls	r7, r3, #12
 800177e:	005c      	lsls	r4, r3, #1
 8001780:	4680      	mov	r8, r0
 8001782:	0b36      	lsrs	r6, r6, #12
 8001784:	0d6d      	lsrs	r5, r5, #21
 8001786:	4691      	mov	r9, r2
 8001788:	0b3f      	lsrs	r7, r7, #12
 800178a:	0d64      	lsrs	r4, r4, #21
 800178c:	0fdb      	lsrs	r3, r3, #31
 800178e:	428d      	cmp	r5, r1
 8001790:	d01e      	beq.n	80017d0 <__gedf2+0x68>
 8001792:	428c      	cmp	r4, r1
 8001794:	d016      	beq.n	80017c4 <__gedf2+0x5c>
 8001796:	2d00      	cmp	r5, #0
 8001798:	d11e      	bne.n	80017d8 <__gedf2+0x70>
 800179a:	4330      	orrs	r0, r6
 800179c:	4684      	mov	ip, r0
 800179e:	2c00      	cmp	r4, #0
 80017a0:	d101      	bne.n	80017a6 <__gedf2+0x3e>
 80017a2:	433a      	orrs	r2, r7
 80017a4:	d023      	beq.n	80017ee <__gedf2+0x86>
 80017a6:	4662      	mov	r2, ip
 80017a8:	2a00      	cmp	r2, #0
 80017aa:	d01a      	beq.n	80017e2 <__gedf2+0x7a>
 80017ac:	459a      	cmp	sl, r3
 80017ae:	d029      	beq.n	8001804 <__gedf2+0x9c>
 80017b0:	4651      	mov	r1, sl
 80017b2:	2002      	movs	r0, #2
 80017b4:	3901      	subs	r1, #1
 80017b6:	4008      	ands	r0, r1
 80017b8:	3801      	subs	r0, #1
 80017ba:	bc1c      	pop	{r2, r3, r4}
 80017bc:	4690      	mov	r8, r2
 80017be:	4699      	mov	r9, r3
 80017c0:	46a2      	mov	sl, r4
 80017c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017c4:	0039      	movs	r1, r7
 80017c6:	4311      	orrs	r1, r2
 80017c8:	d0e5      	beq.n	8001796 <__gedf2+0x2e>
 80017ca:	2002      	movs	r0, #2
 80017cc:	4240      	negs	r0, r0
 80017ce:	e7f4      	b.n	80017ba <__gedf2+0x52>
 80017d0:	4330      	orrs	r0, r6
 80017d2:	d1fa      	bne.n	80017ca <__gedf2+0x62>
 80017d4:	42ac      	cmp	r4, r5
 80017d6:	d00f      	beq.n	80017f8 <__gedf2+0x90>
 80017d8:	2c00      	cmp	r4, #0
 80017da:	d10f      	bne.n	80017fc <__gedf2+0x94>
 80017dc:	433a      	orrs	r2, r7
 80017de:	d0e7      	beq.n	80017b0 <__gedf2+0x48>
 80017e0:	e00c      	b.n	80017fc <__gedf2+0x94>
 80017e2:	2201      	movs	r2, #1
 80017e4:	3b01      	subs	r3, #1
 80017e6:	4393      	bics	r3, r2
 80017e8:	0018      	movs	r0, r3
 80017ea:	3001      	adds	r0, #1
 80017ec:	e7e5      	b.n	80017ba <__gedf2+0x52>
 80017ee:	4663      	mov	r3, ip
 80017f0:	2000      	movs	r0, #0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d0e1      	beq.n	80017ba <__gedf2+0x52>
 80017f6:	e7db      	b.n	80017b0 <__gedf2+0x48>
 80017f8:	433a      	orrs	r2, r7
 80017fa:	d1e6      	bne.n	80017ca <__gedf2+0x62>
 80017fc:	459a      	cmp	sl, r3
 80017fe:	d1d7      	bne.n	80017b0 <__gedf2+0x48>
 8001800:	42a5      	cmp	r5, r4
 8001802:	dcd5      	bgt.n	80017b0 <__gedf2+0x48>
 8001804:	42a5      	cmp	r5, r4
 8001806:	db05      	blt.n	8001814 <__gedf2+0xac>
 8001808:	42be      	cmp	r6, r7
 800180a:	d8d1      	bhi.n	80017b0 <__gedf2+0x48>
 800180c:	d008      	beq.n	8001820 <__gedf2+0xb8>
 800180e:	2000      	movs	r0, #0
 8001810:	42be      	cmp	r6, r7
 8001812:	d2d2      	bcs.n	80017ba <__gedf2+0x52>
 8001814:	4650      	mov	r0, sl
 8001816:	2301      	movs	r3, #1
 8001818:	3801      	subs	r0, #1
 800181a:	4398      	bics	r0, r3
 800181c:	3001      	adds	r0, #1
 800181e:	e7cc      	b.n	80017ba <__gedf2+0x52>
 8001820:	45c8      	cmp	r8, r9
 8001822:	d8c5      	bhi.n	80017b0 <__gedf2+0x48>
 8001824:	2000      	movs	r0, #0
 8001826:	45c8      	cmp	r8, r9
 8001828:	d3f4      	bcc.n	8001814 <__gedf2+0xac>
 800182a:	e7c6      	b.n	80017ba <__gedf2+0x52>
 800182c:	000007ff 	.word	0x000007ff

08001830 <__ledf2>:
 8001830:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001832:	464f      	mov	r7, r9
 8001834:	4646      	mov	r6, r8
 8001836:	46d6      	mov	lr, sl
 8001838:	004d      	lsls	r5, r1, #1
 800183a:	b5c0      	push	{r6, r7, lr}
 800183c:	030e      	lsls	r6, r1, #12
 800183e:	0fc9      	lsrs	r1, r1, #31
 8001840:	468a      	mov	sl, r1
 8001842:	492e      	ldr	r1, [pc, #184]	; (80018fc <__ledf2+0xcc>)
 8001844:	031f      	lsls	r7, r3, #12
 8001846:	005c      	lsls	r4, r3, #1
 8001848:	4680      	mov	r8, r0
 800184a:	0b36      	lsrs	r6, r6, #12
 800184c:	0d6d      	lsrs	r5, r5, #21
 800184e:	4691      	mov	r9, r2
 8001850:	0b3f      	lsrs	r7, r7, #12
 8001852:	0d64      	lsrs	r4, r4, #21
 8001854:	0fdb      	lsrs	r3, r3, #31
 8001856:	428d      	cmp	r5, r1
 8001858:	d018      	beq.n	800188c <__ledf2+0x5c>
 800185a:	428c      	cmp	r4, r1
 800185c:	d011      	beq.n	8001882 <__ledf2+0x52>
 800185e:	2d00      	cmp	r5, #0
 8001860:	d118      	bne.n	8001894 <__ledf2+0x64>
 8001862:	4330      	orrs	r0, r6
 8001864:	4684      	mov	ip, r0
 8001866:	2c00      	cmp	r4, #0
 8001868:	d11e      	bne.n	80018a8 <__ledf2+0x78>
 800186a:	433a      	orrs	r2, r7
 800186c:	d11c      	bne.n	80018a8 <__ledf2+0x78>
 800186e:	4663      	mov	r3, ip
 8001870:	2000      	movs	r0, #0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d030      	beq.n	80018d8 <__ledf2+0xa8>
 8001876:	4651      	mov	r1, sl
 8001878:	2002      	movs	r0, #2
 800187a:	3901      	subs	r1, #1
 800187c:	4008      	ands	r0, r1
 800187e:	3801      	subs	r0, #1
 8001880:	e02a      	b.n	80018d8 <__ledf2+0xa8>
 8001882:	0039      	movs	r1, r7
 8001884:	4311      	orrs	r1, r2
 8001886:	d0ea      	beq.n	800185e <__ledf2+0x2e>
 8001888:	2002      	movs	r0, #2
 800188a:	e025      	b.n	80018d8 <__ledf2+0xa8>
 800188c:	4330      	orrs	r0, r6
 800188e:	d1fb      	bne.n	8001888 <__ledf2+0x58>
 8001890:	42ac      	cmp	r4, r5
 8001892:	d026      	beq.n	80018e2 <__ledf2+0xb2>
 8001894:	2c00      	cmp	r4, #0
 8001896:	d126      	bne.n	80018e6 <__ledf2+0xb6>
 8001898:	433a      	orrs	r2, r7
 800189a:	d124      	bne.n	80018e6 <__ledf2+0xb6>
 800189c:	4651      	mov	r1, sl
 800189e:	2002      	movs	r0, #2
 80018a0:	3901      	subs	r1, #1
 80018a2:	4008      	ands	r0, r1
 80018a4:	3801      	subs	r0, #1
 80018a6:	e017      	b.n	80018d8 <__ledf2+0xa8>
 80018a8:	4662      	mov	r2, ip
 80018aa:	2a00      	cmp	r2, #0
 80018ac:	d00f      	beq.n	80018ce <__ledf2+0x9e>
 80018ae:	459a      	cmp	sl, r3
 80018b0:	d1e1      	bne.n	8001876 <__ledf2+0x46>
 80018b2:	42a5      	cmp	r5, r4
 80018b4:	db05      	blt.n	80018c2 <__ledf2+0x92>
 80018b6:	42be      	cmp	r6, r7
 80018b8:	d8dd      	bhi.n	8001876 <__ledf2+0x46>
 80018ba:	d019      	beq.n	80018f0 <__ledf2+0xc0>
 80018bc:	2000      	movs	r0, #0
 80018be:	42be      	cmp	r6, r7
 80018c0:	d20a      	bcs.n	80018d8 <__ledf2+0xa8>
 80018c2:	4650      	mov	r0, sl
 80018c4:	2301      	movs	r3, #1
 80018c6:	3801      	subs	r0, #1
 80018c8:	4398      	bics	r0, r3
 80018ca:	3001      	adds	r0, #1
 80018cc:	e004      	b.n	80018d8 <__ledf2+0xa8>
 80018ce:	2201      	movs	r2, #1
 80018d0:	3b01      	subs	r3, #1
 80018d2:	4393      	bics	r3, r2
 80018d4:	0018      	movs	r0, r3
 80018d6:	3001      	adds	r0, #1
 80018d8:	bc1c      	pop	{r2, r3, r4}
 80018da:	4690      	mov	r8, r2
 80018dc:	4699      	mov	r9, r3
 80018de:	46a2      	mov	sl, r4
 80018e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018e2:	433a      	orrs	r2, r7
 80018e4:	d1d0      	bne.n	8001888 <__ledf2+0x58>
 80018e6:	459a      	cmp	sl, r3
 80018e8:	d1c5      	bne.n	8001876 <__ledf2+0x46>
 80018ea:	42a5      	cmp	r5, r4
 80018ec:	dcc3      	bgt.n	8001876 <__ledf2+0x46>
 80018ee:	e7e0      	b.n	80018b2 <__ledf2+0x82>
 80018f0:	45c8      	cmp	r8, r9
 80018f2:	d8c0      	bhi.n	8001876 <__ledf2+0x46>
 80018f4:	2000      	movs	r0, #0
 80018f6:	45c8      	cmp	r8, r9
 80018f8:	d3e3      	bcc.n	80018c2 <__ledf2+0x92>
 80018fa:	e7ed      	b.n	80018d8 <__ledf2+0xa8>
 80018fc:	000007ff 	.word	0x000007ff

08001900 <__aeabi_dmul>:
 8001900:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001902:	4657      	mov	r7, sl
 8001904:	46de      	mov	lr, fp
 8001906:	464e      	mov	r6, r9
 8001908:	4645      	mov	r5, r8
 800190a:	b5e0      	push	{r5, r6, r7, lr}
 800190c:	4683      	mov	fp, r0
 800190e:	0006      	movs	r6, r0
 8001910:	030f      	lsls	r7, r1, #12
 8001912:	0048      	lsls	r0, r1, #1
 8001914:	b087      	sub	sp, #28
 8001916:	4692      	mov	sl, r2
 8001918:	001d      	movs	r5, r3
 800191a:	0b3f      	lsrs	r7, r7, #12
 800191c:	0d40      	lsrs	r0, r0, #21
 800191e:	0fcc      	lsrs	r4, r1, #31
 8001920:	2800      	cmp	r0, #0
 8001922:	d100      	bne.n	8001926 <__aeabi_dmul+0x26>
 8001924:	e06f      	b.n	8001a06 <__aeabi_dmul+0x106>
 8001926:	4bde      	ldr	r3, [pc, #888]	; (8001ca0 <__aeabi_dmul+0x3a0>)
 8001928:	4298      	cmp	r0, r3
 800192a:	d038      	beq.n	800199e <__aeabi_dmul+0x9e>
 800192c:	2380      	movs	r3, #128	; 0x80
 800192e:	00ff      	lsls	r7, r7, #3
 8001930:	041b      	lsls	r3, r3, #16
 8001932:	431f      	orrs	r7, r3
 8001934:	0f73      	lsrs	r3, r6, #29
 8001936:	433b      	orrs	r3, r7
 8001938:	9301      	str	r3, [sp, #4]
 800193a:	4bda      	ldr	r3, [pc, #872]	; (8001ca4 <__aeabi_dmul+0x3a4>)
 800193c:	2700      	movs	r7, #0
 800193e:	4699      	mov	r9, r3
 8001940:	2300      	movs	r3, #0
 8001942:	469b      	mov	fp, r3
 8001944:	00f6      	lsls	r6, r6, #3
 8001946:	4481      	add	r9, r0
 8001948:	032b      	lsls	r3, r5, #12
 800194a:	0069      	lsls	r1, r5, #1
 800194c:	0b1b      	lsrs	r3, r3, #12
 800194e:	4652      	mov	r2, sl
 8001950:	4698      	mov	r8, r3
 8001952:	0d49      	lsrs	r1, r1, #21
 8001954:	0fed      	lsrs	r5, r5, #31
 8001956:	2900      	cmp	r1, #0
 8001958:	d100      	bne.n	800195c <__aeabi_dmul+0x5c>
 800195a:	e085      	b.n	8001a68 <__aeabi_dmul+0x168>
 800195c:	4bd0      	ldr	r3, [pc, #832]	; (8001ca0 <__aeabi_dmul+0x3a0>)
 800195e:	4299      	cmp	r1, r3
 8001960:	d100      	bne.n	8001964 <__aeabi_dmul+0x64>
 8001962:	e073      	b.n	8001a4c <__aeabi_dmul+0x14c>
 8001964:	4643      	mov	r3, r8
 8001966:	00da      	lsls	r2, r3, #3
 8001968:	2380      	movs	r3, #128	; 0x80
 800196a:	041b      	lsls	r3, r3, #16
 800196c:	4313      	orrs	r3, r2
 800196e:	4652      	mov	r2, sl
 8001970:	48cc      	ldr	r0, [pc, #816]	; (8001ca4 <__aeabi_dmul+0x3a4>)
 8001972:	0f52      	lsrs	r2, r2, #29
 8001974:	4684      	mov	ip, r0
 8001976:	4313      	orrs	r3, r2
 8001978:	4652      	mov	r2, sl
 800197a:	2000      	movs	r0, #0
 800197c:	4461      	add	r1, ip
 800197e:	00d2      	lsls	r2, r2, #3
 8001980:	4489      	add	r9, r1
 8001982:	0021      	movs	r1, r4
 8001984:	4069      	eors	r1, r5
 8001986:	9100      	str	r1, [sp, #0]
 8001988:	468c      	mov	ip, r1
 800198a:	2101      	movs	r1, #1
 800198c:	4449      	add	r1, r9
 800198e:	468a      	mov	sl, r1
 8001990:	2f0f      	cmp	r7, #15
 8001992:	d900      	bls.n	8001996 <__aeabi_dmul+0x96>
 8001994:	e090      	b.n	8001ab8 <__aeabi_dmul+0x1b8>
 8001996:	49c4      	ldr	r1, [pc, #784]	; (8001ca8 <__aeabi_dmul+0x3a8>)
 8001998:	00bf      	lsls	r7, r7, #2
 800199a:	59cf      	ldr	r7, [r1, r7]
 800199c:	46bf      	mov	pc, r7
 800199e:	465b      	mov	r3, fp
 80019a0:	433b      	orrs	r3, r7
 80019a2:	9301      	str	r3, [sp, #4]
 80019a4:	d000      	beq.n	80019a8 <__aeabi_dmul+0xa8>
 80019a6:	e16a      	b.n	8001c7e <__aeabi_dmul+0x37e>
 80019a8:	2302      	movs	r3, #2
 80019aa:	2708      	movs	r7, #8
 80019ac:	2600      	movs	r6, #0
 80019ae:	4681      	mov	r9, r0
 80019b0:	469b      	mov	fp, r3
 80019b2:	e7c9      	b.n	8001948 <__aeabi_dmul+0x48>
 80019b4:	0032      	movs	r2, r6
 80019b6:	4658      	mov	r0, fp
 80019b8:	9b01      	ldr	r3, [sp, #4]
 80019ba:	4661      	mov	r1, ip
 80019bc:	9100      	str	r1, [sp, #0]
 80019be:	2802      	cmp	r0, #2
 80019c0:	d100      	bne.n	80019c4 <__aeabi_dmul+0xc4>
 80019c2:	e075      	b.n	8001ab0 <__aeabi_dmul+0x1b0>
 80019c4:	2803      	cmp	r0, #3
 80019c6:	d100      	bne.n	80019ca <__aeabi_dmul+0xca>
 80019c8:	e1fe      	b.n	8001dc8 <__aeabi_dmul+0x4c8>
 80019ca:	2801      	cmp	r0, #1
 80019cc:	d000      	beq.n	80019d0 <__aeabi_dmul+0xd0>
 80019ce:	e12c      	b.n	8001c2a <__aeabi_dmul+0x32a>
 80019d0:	2300      	movs	r3, #0
 80019d2:	2700      	movs	r7, #0
 80019d4:	2600      	movs	r6, #0
 80019d6:	2500      	movs	r5, #0
 80019d8:	033f      	lsls	r7, r7, #12
 80019da:	0d2a      	lsrs	r2, r5, #20
 80019dc:	0b3f      	lsrs	r7, r7, #12
 80019de:	48b3      	ldr	r0, [pc, #716]	; (8001cac <__aeabi_dmul+0x3ac>)
 80019e0:	0512      	lsls	r2, r2, #20
 80019e2:	433a      	orrs	r2, r7
 80019e4:	4002      	ands	r2, r0
 80019e6:	051b      	lsls	r3, r3, #20
 80019e8:	4313      	orrs	r3, r2
 80019ea:	9a00      	ldr	r2, [sp, #0]
 80019ec:	005b      	lsls	r3, r3, #1
 80019ee:	07d1      	lsls	r1, r2, #31
 80019f0:	085b      	lsrs	r3, r3, #1
 80019f2:	430b      	orrs	r3, r1
 80019f4:	0030      	movs	r0, r6
 80019f6:	0019      	movs	r1, r3
 80019f8:	b007      	add	sp, #28
 80019fa:	bc3c      	pop	{r2, r3, r4, r5}
 80019fc:	4690      	mov	r8, r2
 80019fe:	4699      	mov	r9, r3
 8001a00:	46a2      	mov	sl, r4
 8001a02:	46ab      	mov	fp, r5
 8001a04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a06:	465b      	mov	r3, fp
 8001a08:	433b      	orrs	r3, r7
 8001a0a:	9301      	str	r3, [sp, #4]
 8001a0c:	d100      	bne.n	8001a10 <__aeabi_dmul+0x110>
 8001a0e:	e12f      	b.n	8001c70 <__aeabi_dmul+0x370>
 8001a10:	2f00      	cmp	r7, #0
 8001a12:	d100      	bne.n	8001a16 <__aeabi_dmul+0x116>
 8001a14:	e1a5      	b.n	8001d62 <__aeabi_dmul+0x462>
 8001a16:	0038      	movs	r0, r7
 8001a18:	f000 fe20 	bl	800265c <__clzsi2>
 8001a1c:	0003      	movs	r3, r0
 8001a1e:	3b0b      	subs	r3, #11
 8001a20:	2b1c      	cmp	r3, #28
 8001a22:	dd00      	ble.n	8001a26 <__aeabi_dmul+0x126>
 8001a24:	e196      	b.n	8001d54 <__aeabi_dmul+0x454>
 8001a26:	221d      	movs	r2, #29
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	465a      	mov	r2, fp
 8001a2c:	0001      	movs	r1, r0
 8001a2e:	40da      	lsrs	r2, r3
 8001a30:	465e      	mov	r6, fp
 8001a32:	3908      	subs	r1, #8
 8001a34:	408f      	lsls	r7, r1
 8001a36:	0013      	movs	r3, r2
 8001a38:	408e      	lsls	r6, r1
 8001a3a:	433b      	orrs	r3, r7
 8001a3c:	9301      	str	r3, [sp, #4]
 8001a3e:	4b9c      	ldr	r3, [pc, #624]	; (8001cb0 <__aeabi_dmul+0x3b0>)
 8001a40:	2700      	movs	r7, #0
 8001a42:	1a1b      	subs	r3, r3, r0
 8001a44:	4699      	mov	r9, r3
 8001a46:	2300      	movs	r3, #0
 8001a48:	469b      	mov	fp, r3
 8001a4a:	e77d      	b.n	8001948 <__aeabi_dmul+0x48>
 8001a4c:	4641      	mov	r1, r8
 8001a4e:	4653      	mov	r3, sl
 8001a50:	430b      	orrs	r3, r1
 8001a52:	4993      	ldr	r1, [pc, #588]	; (8001ca0 <__aeabi_dmul+0x3a0>)
 8001a54:	468c      	mov	ip, r1
 8001a56:	44e1      	add	r9, ip
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d000      	beq.n	8001a5e <__aeabi_dmul+0x15e>
 8001a5c:	e11a      	b.n	8001c94 <__aeabi_dmul+0x394>
 8001a5e:	2202      	movs	r2, #2
 8001a60:	2002      	movs	r0, #2
 8001a62:	4317      	orrs	r7, r2
 8001a64:	2200      	movs	r2, #0
 8001a66:	e78c      	b.n	8001982 <__aeabi_dmul+0x82>
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	d100      	bne.n	8001a6e <__aeabi_dmul+0x16e>
 8001a6c:	e10d      	b.n	8001c8a <__aeabi_dmul+0x38a>
 8001a6e:	4643      	mov	r3, r8
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d100      	bne.n	8001a76 <__aeabi_dmul+0x176>
 8001a74:	e181      	b.n	8001d7a <__aeabi_dmul+0x47a>
 8001a76:	4640      	mov	r0, r8
 8001a78:	f000 fdf0 	bl	800265c <__clzsi2>
 8001a7c:	0002      	movs	r2, r0
 8001a7e:	3a0b      	subs	r2, #11
 8001a80:	2a1c      	cmp	r2, #28
 8001a82:	dd00      	ble.n	8001a86 <__aeabi_dmul+0x186>
 8001a84:	e172      	b.n	8001d6c <__aeabi_dmul+0x46c>
 8001a86:	0001      	movs	r1, r0
 8001a88:	4643      	mov	r3, r8
 8001a8a:	3908      	subs	r1, #8
 8001a8c:	408b      	lsls	r3, r1
 8001a8e:	4698      	mov	r8, r3
 8001a90:	231d      	movs	r3, #29
 8001a92:	1a9a      	subs	r2, r3, r2
 8001a94:	4653      	mov	r3, sl
 8001a96:	40d3      	lsrs	r3, r2
 8001a98:	001a      	movs	r2, r3
 8001a9a:	4643      	mov	r3, r8
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	4652      	mov	r2, sl
 8001aa0:	408a      	lsls	r2, r1
 8001aa2:	4649      	mov	r1, r9
 8001aa4:	1a08      	subs	r0, r1, r0
 8001aa6:	4982      	ldr	r1, [pc, #520]	; (8001cb0 <__aeabi_dmul+0x3b0>)
 8001aa8:	4689      	mov	r9, r1
 8001aaa:	4481      	add	r9, r0
 8001aac:	2000      	movs	r0, #0
 8001aae:	e768      	b.n	8001982 <__aeabi_dmul+0x82>
 8001ab0:	4b7b      	ldr	r3, [pc, #492]	; (8001ca0 <__aeabi_dmul+0x3a0>)
 8001ab2:	2700      	movs	r7, #0
 8001ab4:	2600      	movs	r6, #0
 8001ab6:	e78e      	b.n	80019d6 <__aeabi_dmul+0xd6>
 8001ab8:	0c14      	lsrs	r4, r2, #16
 8001aba:	0412      	lsls	r2, r2, #16
 8001abc:	0c12      	lsrs	r2, r2, #16
 8001abe:	0011      	movs	r1, r2
 8001ac0:	0c37      	lsrs	r7, r6, #16
 8001ac2:	0436      	lsls	r6, r6, #16
 8001ac4:	0c35      	lsrs	r5, r6, #16
 8001ac6:	4379      	muls	r1, r7
 8001ac8:	0028      	movs	r0, r5
 8001aca:	468c      	mov	ip, r1
 8001acc:	002e      	movs	r6, r5
 8001ace:	4360      	muls	r0, r4
 8001ad0:	4460      	add	r0, ip
 8001ad2:	4683      	mov	fp, r0
 8001ad4:	4356      	muls	r6, r2
 8001ad6:	0021      	movs	r1, r4
 8001ad8:	0c30      	lsrs	r0, r6, #16
 8001ada:	4680      	mov	r8, r0
 8001adc:	4658      	mov	r0, fp
 8001ade:	4379      	muls	r1, r7
 8001ae0:	4440      	add	r0, r8
 8001ae2:	9102      	str	r1, [sp, #8]
 8001ae4:	4584      	cmp	ip, r0
 8001ae6:	d906      	bls.n	8001af6 <__aeabi_dmul+0x1f6>
 8001ae8:	4688      	mov	r8, r1
 8001aea:	2180      	movs	r1, #128	; 0x80
 8001aec:	0249      	lsls	r1, r1, #9
 8001aee:	468c      	mov	ip, r1
 8001af0:	44e0      	add	r8, ip
 8001af2:	4641      	mov	r1, r8
 8001af4:	9102      	str	r1, [sp, #8]
 8001af6:	0436      	lsls	r6, r6, #16
 8001af8:	0c01      	lsrs	r1, r0, #16
 8001afa:	0c36      	lsrs	r6, r6, #16
 8001afc:	0400      	lsls	r0, r0, #16
 8001afe:	468b      	mov	fp, r1
 8001b00:	1981      	adds	r1, r0, r6
 8001b02:	0c1e      	lsrs	r6, r3, #16
 8001b04:	041b      	lsls	r3, r3, #16
 8001b06:	0c1b      	lsrs	r3, r3, #16
 8001b08:	9103      	str	r1, [sp, #12]
 8001b0a:	0019      	movs	r1, r3
 8001b0c:	4379      	muls	r1, r7
 8001b0e:	468c      	mov	ip, r1
 8001b10:	0028      	movs	r0, r5
 8001b12:	4375      	muls	r5, r6
 8001b14:	4465      	add	r5, ip
 8001b16:	46a8      	mov	r8, r5
 8001b18:	4358      	muls	r0, r3
 8001b1a:	0c05      	lsrs	r5, r0, #16
 8001b1c:	4445      	add	r5, r8
 8001b1e:	4377      	muls	r7, r6
 8001b20:	42a9      	cmp	r1, r5
 8001b22:	d903      	bls.n	8001b2c <__aeabi_dmul+0x22c>
 8001b24:	2180      	movs	r1, #128	; 0x80
 8001b26:	0249      	lsls	r1, r1, #9
 8001b28:	468c      	mov	ip, r1
 8001b2a:	4467      	add	r7, ip
 8001b2c:	0c29      	lsrs	r1, r5, #16
 8001b2e:	468c      	mov	ip, r1
 8001b30:	0039      	movs	r1, r7
 8001b32:	0400      	lsls	r0, r0, #16
 8001b34:	0c00      	lsrs	r0, r0, #16
 8001b36:	042d      	lsls	r5, r5, #16
 8001b38:	182d      	adds	r5, r5, r0
 8001b3a:	4461      	add	r1, ip
 8001b3c:	44ab      	add	fp, r5
 8001b3e:	9105      	str	r1, [sp, #20]
 8001b40:	4659      	mov	r1, fp
 8001b42:	9104      	str	r1, [sp, #16]
 8001b44:	9901      	ldr	r1, [sp, #4]
 8001b46:	040f      	lsls	r7, r1, #16
 8001b48:	0c3f      	lsrs	r7, r7, #16
 8001b4a:	0c08      	lsrs	r0, r1, #16
 8001b4c:	0039      	movs	r1, r7
 8001b4e:	4351      	muls	r1, r2
 8001b50:	4342      	muls	r2, r0
 8001b52:	4690      	mov	r8, r2
 8001b54:	0002      	movs	r2, r0
 8001b56:	468c      	mov	ip, r1
 8001b58:	0c09      	lsrs	r1, r1, #16
 8001b5a:	468b      	mov	fp, r1
 8001b5c:	4362      	muls	r2, r4
 8001b5e:	437c      	muls	r4, r7
 8001b60:	4444      	add	r4, r8
 8001b62:	445c      	add	r4, fp
 8001b64:	45a0      	cmp	r8, r4
 8001b66:	d903      	bls.n	8001b70 <__aeabi_dmul+0x270>
 8001b68:	2180      	movs	r1, #128	; 0x80
 8001b6a:	0249      	lsls	r1, r1, #9
 8001b6c:	4688      	mov	r8, r1
 8001b6e:	4442      	add	r2, r8
 8001b70:	0c21      	lsrs	r1, r4, #16
 8001b72:	4688      	mov	r8, r1
 8001b74:	4661      	mov	r1, ip
 8001b76:	0409      	lsls	r1, r1, #16
 8001b78:	0c09      	lsrs	r1, r1, #16
 8001b7a:	468c      	mov	ip, r1
 8001b7c:	0039      	movs	r1, r7
 8001b7e:	4359      	muls	r1, r3
 8001b80:	4343      	muls	r3, r0
 8001b82:	4370      	muls	r0, r6
 8001b84:	437e      	muls	r6, r7
 8001b86:	0c0f      	lsrs	r7, r1, #16
 8001b88:	18f6      	adds	r6, r6, r3
 8001b8a:	0424      	lsls	r4, r4, #16
 8001b8c:	19be      	adds	r6, r7, r6
 8001b8e:	4464      	add	r4, ip
 8001b90:	4442      	add	r2, r8
 8001b92:	468c      	mov	ip, r1
 8001b94:	42b3      	cmp	r3, r6
 8001b96:	d903      	bls.n	8001ba0 <__aeabi_dmul+0x2a0>
 8001b98:	2380      	movs	r3, #128	; 0x80
 8001b9a:	025b      	lsls	r3, r3, #9
 8001b9c:	4698      	mov	r8, r3
 8001b9e:	4440      	add	r0, r8
 8001ba0:	9b02      	ldr	r3, [sp, #8]
 8001ba2:	4661      	mov	r1, ip
 8001ba4:	4698      	mov	r8, r3
 8001ba6:	9b04      	ldr	r3, [sp, #16]
 8001ba8:	0437      	lsls	r7, r6, #16
 8001baa:	4443      	add	r3, r8
 8001bac:	469b      	mov	fp, r3
 8001bae:	45ab      	cmp	fp, r5
 8001bb0:	41ad      	sbcs	r5, r5
 8001bb2:	426b      	negs	r3, r5
 8001bb4:	040d      	lsls	r5, r1, #16
 8001bb6:	9905      	ldr	r1, [sp, #20]
 8001bb8:	0c2d      	lsrs	r5, r5, #16
 8001bba:	468c      	mov	ip, r1
 8001bbc:	197f      	adds	r7, r7, r5
 8001bbe:	4467      	add	r7, ip
 8001bc0:	18fd      	adds	r5, r7, r3
 8001bc2:	46a8      	mov	r8, r5
 8001bc4:	465d      	mov	r5, fp
 8001bc6:	192d      	adds	r5, r5, r4
 8001bc8:	42a5      	cmp	r5, r4
 8001bca:	41a4      	sbcs	r4, r4
 8001bcc:	4693      	mov	fp, r2
 8001bce:	4264      	negs	r4, r4
 8001bd0:	46a4      	mov	ip, r4
 8001bd2:	44c3      	add	fp, r8
 8001bd4:	44dc      	add	ip, fp
 8001bd6:	428f      	cmp	r7, r1
 8001bd8:	41bf      	sbcs	r7, r7
 8001bda:	4598      	cmp	r8, r3
 8001bdc:	419b      	sbcs	r3, r3
 8001bde:	4593      	cmp	fp, r2
 8001be0:	4192      	sbcs	r2, r2
 8001be2:	45a4      	cmp	ip, r4
 8001be4:	41a4      	sbcs	r4, r4
 8001be6:	425b      	negs	r3, r3
 8001be8:	427f      	negs	r7, r7
 8001bea:	431f      	orrs	r7, r3
 8001bec:	0c36      	lsrs	r6, r6, #16
 8001bee:	4252      	negs	r2, r2
 8001bf0:	4264      	negs	r4, r4
 8001bf2:	19bf      	adds	r7, r7, r6
 8001bf4:	4322      	orrs	r2, r4
 8001bf6:	18bf      	adds	r7, r7, r2
 8001bf8:	4662      	mov	r2, ip
 8001bfa:	1838      	adds	r0, r7, r0
 8001bfc:	0243      	lsls	r3, r0, #9
 8001bfe:	0dd2      	lsrs	r2, r2, #23
 8001c00:	9903      	ldr	r1, [sp, #12]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	026a      	lsls	r2, r5, #9
 8001c06:	430a      	orrs	r2, r1
 8001c08:	1e50      	subs	r0, r2, #1
 8001c0a:	4182      	sbcs	r2, r0
 8001c0c:	4661      	mov	r1, ip
 8001c0e:	0ded      	lsrs	r5, r5, #23
 8001c10:	432a      	orrs	r2, r5
 8001c12:	024e      	lsls	r6, r1, #9
 8001c14:	4332      	orrs	r2, r6
 8001c16:	01d9      	lsls	r1, r3, #7
 8001c18:	d400      	bmi.n	8001c1c <__aeabi_dmul+0x31c>
 8001c1a:	e0b3      	b.n	8001d84 <__aeabi_dmul+0x484>
 8001c1c:	2601      	movs	r6, #1
 8001c1e:	0850      	lsrs	r0, r2, #1
 8001c20:	4032      	ands	r2, r6
 8001c22:	4302      	orrs	r2, r0
 8001c24:	07de      	lsls	r6, r3, #31
 8001c26:	4332      	orrs	r2, r6
 8001c28:	085b      	lsrs	r3, r3, #1
 8001c2a:	4c22      	ldr	r4, [pc, #136]	; (8001cb4 <__aeabi_dmul+0x3b4>)
 8001c2c:	4454      	add	r4, sl
 8001c2e:	2c00      	cmp	r4, #0
 8001c30:	dd62      	ble.n	8001cf8 <__aeabi_dmul+0x3f8>
 8001c32:	0751      	lsls	r1, r2, #29
 8001c34:	d009      	beq.n	8001c4a <__aeabi_dmul+0x34a>
 8001c36:	200f      	movs	r0, #15
 8001c38:	4010      	ands	r0, r2
 8001c3a:	2804      	cmp	r0, #4
 8001c3c:	d005      	beq.n	8001c4a <__aeabi_dmul+0x34a>
 8001c3e:	1d10      	adds	r0, r2, #4
 8001c40:	4290      	cmp	r0, r2
 8001c42:	4192      	sbcs	r2, r2
 8001c44:	4252      	negs	r2, r2
 8001c46:	189b      	adds	r3, r3, r2
 8001c48:	0002      	movs	r2, r0
 8001c4a:	01d9      	lsls	r1, r3, #7
 8001c4c:	d504      	bpl.n	8001c58 <__aeabi_dmul+0x358>
 8001c4e:	2480      	movs	r4, #128	; 0x80
 8001c50:	4819      	ldr	r0, [pc, #100]	; (8001cb8 <__aeabi_dmul+0x3b8>)
 8001c52:	00e4      	lsls	r4, r4, #3
 8001c54:	4003      	ands	r3, r0
 8001c56:	4454      	add	r4, sl
 8001c58:	4818      	ldr	r0, [pc, #96]	; (8001cbc <__aeabi_dmul+0x3bc>)
 8001c5a:	4284      	cmp	r4, r0
 8001c5c:	dd00      	ble.n	8001c60 <__aeabi_dmul+0x360>
 8001c5e:	e727      	b.n	8001ab0 <__aeabi_dmul+0x1b0>
 8001c60:	075e      	lsls	r6, r3, #29
 8001c62:	025b      	lsls	r3, r3, #9
 8001c64:	08d2      	lsrs	r2, r2, #3
 8001c66:	0b1f      	lsrs	r7, r3, #12
 8001c68:	0563      	lsls	r3, r4, #21
 8001c6a:	4316      	orrs	r6, r2
 8001c6c:	0d5b      	lsrs	r3, r3, #21
 8001c6e:	e6b2      	b.n	80019d6 <__aeabi_dmul+0xd6>
 8001c70:	2300      	movs	r3, #0
 8001c72:	4699      	mov	r9, r3
 8001c74:	3301      	adds	r3, #1
 8001c76:	2704      	movs	r7, #4
 8001c78:	2600      	movs	r6, #0
 8001c7a:	469b      	mov	fp, r3
 8001c7c:	e664      	b.n	8001948 <__aeabi_dmul+0x48>
 8001c7e:	2303      	movs	r3, #3
 8001c80:	9701      	str	r7, [sp, #4]
 8001c82:	4681      	mov	r9, r0
 8001c84:	270c      	movs	r7, #12
 8001c86:	469b      	mov	fp, r3
 8001c88:	e65e      	b.n	8001948 <__aeabi_dmul+0x48>
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	2001      	movs	r0, #1
 8001c8e:	4317      	orrs	r7, r2
 8001c90:	2200      	movs	r2, #0
 8001c92:	e676      	b.n	8001982 <__aeabi_dmul+0x82>
 8001c94:	2303      	movs	r3, #3
 8001c96:	2003      	movs	r0, #3
 8001c98:	431f      	orrs	r7, r3
 8001c9a:	4643      	mov	r3, r8
 8001c9c:	e671      	b.n	8001982 <__aeabi_dmul+0x82>
 8001c9e:	46c0      	nop			; (mov r8, r8)
 8001ca0:	000007ff 	.word	0x000007ff
 8001ca4:	fffffc01 	.word	0xfffffc01
 8001ca8:	0800f01c 	.word	0x0800f01c
 8001cac:	800fffff 	.word	0x800fffff
 8001cb0:	fffffc0d 	.word	0xfffffc0d
 8001cb4:	000003ff 	.word	0x000003ff
 8001cb8:	feffffff 	.word	0xfeffffff
 8001cbc:	000007fe 	.word	0x000007fe
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	2780      	movs	r7, #128	; 0x80
 8001cc4:	9300      	str	r3, [sp, #0]
 8001cc6:	033f      	lsls	r7, r7, #12
 8001cc8:	2600      	movs	r6, #0
 8001cca:	4b43      	ldr	r3, [pc, #268]	; (8001dd8 <__aeabi_dmul+0x4d8>)
 8001ccc:	e683      	b.n	80019d6 <__aeabi_dmul+0xd6>
 8001cce:	9b01      	ldr	r3, [sp, #4]
 8001cd0:	0032      	movs	r2, r6
 8001cd2:	46a4      	mov	ip, r4
 8001cd4:	4658      	mov	r0, fp
 8001cd6:	e670      	b.n	80019ba <__aeabi_dmul+0xba>
 8001cd8:	46ac      	mov	ip, r5
 8001cda:	e66e      	b.n	80019ba <__aeabi_dmul+0xba>
 8001cdc:	2780      	movs	r7, #128	; 0x80
 8001cde:	9901      	ldr	r1, [sp, #4]
 8001ce0:	033f      	lsls	r7, r7, #12
 8001ce2:	4239      	tst	r1, r7
 8001ce4:	d02d      	beq.n	8001d42 <__aeabi_dmul+0x442>
 8001ce6:	423b      	tst	r3, r7
 8001ce8:	d12b      	bne.n	8001d42 <__aeabi_dmul+0x442>
 8001cea:	431f      	orrs	r7, r3
 8001cec:	033f      	lsls	r7, r7, #12
 8001cee:	0b3f      	lsrs	r7, r7, #12
 8001cf0:	9500      	str	r5, [sp, #0]
 8001cf2:	0016      	movs	r6, r2
 8001cf4:	4b38      	ldr	r3, [pc, #224]	; (8001dd8 <__aeabi_dmul+0x4d8>)
 8001cf6:	e66e      	b.n	80019d6 <__aeabi_dmul+0xd6>
 8001cf8:	2501      	movs	r5, #1
 8001cfa:	1b2d      	subs	r5, r5, r4
 8001cfc:	2d38      	cmp	r5, #56	; 0x38
 8001cfe:	dd00      	ble.n	8001d02 <__aeabi_dmul+0x402>
 8001d00:	e666      	b.n	80019d0 <__aeabi_dmul+0xd0>
 8001d02:	2d1f      	cmp	r5, #31
 8001d04:	dc40      	bgt.n	8001d88 <__aeabi_dmul+0x488>
 8001d06:	4835      	ldr	r0, [pc, #212]	; (8001ddc <__aeabi_dmul+0x4dc>)
 8001d08:	001c      	movs	r4, r3
 8001d0a:	4450      	add	r0, sl
 8001d0c:	0016      	movs	r6, r2
 8001d0e:	4082      	lsls	r2, r0
 8001d10:	4084      	lsls	r4, r0
 8001d12:	40ee      	lsrs	r6, r5
 8001d14:	1e50      	subs	r0, r2, #1
 8001d16:	4182      	sbcs	r2, r0
 8001d18:	4334      	orrs	r4, r6
 8001d1a:	4314      	orrs	r4, r2
 8001d1c:	40eb      	lsrs	r3, r5
 8001d1e:	0762      	lsls	r2, r4, #29
 8001d20:	d009      	beq.n	8001d36 <__aeabi_dmul+0x436>
 8001d22:	220f      	movs	r2, #15
 8001d24:	4022      	ands	r2, r4
 8001d26:	2a04      	cmp	r2, #4
 8001d28:	d005      	beq.n	8001d36 <__aeabi_dmul+0x436>
 8001d2a:	0022      	movs	r2, r4
 8001d2c:	1d14      	adds	r4, r2, #4
 8001d2e:	4294      	cmp	r4, r2
 8001d30:	4180      	sbcs	r0, r0
 8001d32:	4240      	negs	r0, r0
 8001d34:	181b      	adds	r3, r3, r0
 8001d36:	021a      	lsls	r2, r3, #8
 8001d38:	d53e      	bpl.n	8001db8 <__aeabi_dmul+0x4b8>
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	2700      	movs	r7, #0
 8001d3e:	2600      	movs	r6, #0
 8001d40:	e649      	b.n	80019d6 <__aeabi_dmul+0xd6>
 8001d42:	2780      	movs	r7, #128	; 0x80
 8001d44:	9b01      	ldr	r3, [sp, #4]
 8001d46:	033f      	lsls	r7, r7, #12
 8001d48:	431f      	orrs	r7, r3
 8001d4a:	033f      	lsls	r7, r7, #12
 8001d4c:	0b3f      	lsrs	r7, r7, #12
 8001d4e:	9400      	str	r4, [sp, #0]
 8001d50:	4b21      	ldr	r3, [pc, #132]	; (8001dd8 <__aeabi_dmul+0x4d8>)
 8001d52:	e640      	b.n	80019d6 <__aeabi_dmul+0xd6>
 8001d54:	0003      	movs	r3, r0
 8001d56:	465a      	mov	r2, fp
 8001d58:	3b28      	subs	r3, #40	; 0x28
 8001d5a:	409a      	lsls	r2, r3
 8001d5c:	2600      	movs	r6, #0
 8001d5e:	9201      	str	r2, [sp, #4]
 8001d60:	e66d      	b.n	8001a3e <__aeabi_dmul+0x13e>
 8001d62:	4658      	mov	r0, fp
 8001d64:	f000 fc7a 	bl	800265c <__clzsi2>
 8001d68:	3020      	adds	r0, #32
 8001d6a:	e657      	b.n	8001a1c <__aeabi_dmul+0x11c>
 8001d6c:	0003      	movs	r3, r0
 8001d6e:	4652      	mov	r2, sl
 8001d70:	3b28      	subs	r3, #40	; 0x28
 8001d72:	409a      	lsls	r2, r3
 8001d74:	0013      	movs	r3, r2
 8001d76:	2200      	movs	r2, #0
 8001d78:	e693      	b.n	8001aa2 <__aeabi_dmul+0x1a2>
 8001d7a:	4650      	mov	r0, sl
 8001d7c:	f000 fc6e 	bl	800265c <__clzsi2>
 8001d80:	3020      	adds	r0, #32
 8001d82:	e67b      	b.n	8001a7c <__aeabi_dmul+0x17c>
 8001d84:	46ca      	mov	sl, r9
 8001d86:	e750      	b.n	8001c2a <__aeabi_dmul+0x32a>
 8001d88:	201f      	movs	r0, #31
 8001d8a:	001e      	movs	r6, r3
 8001d8c:	4240      	negs	r0, r0
 8001d8e:	1b04      	subs	r4, r0, r4
 8001d90:	40e6      	lsrs	r6, r4
 8001d92:	2d20      	cmp	r5, #32
 8001d94:	d003      	beq.n	8001d9e <__aeabi_dmul+0x49e>
 8001d96:	4c12      	ldr	r4, [pc, #72]	; (8001de0 <__aeabi_dmul+0x4e0>)
 8001d98:	4454      	add	r4, sl
 8001d9a:	40a3      	lsls	r3, r4
 8001d9c:	431a      	orrs	r2, r3
 8001d9e:	1e50      	subs	r0, r2, #1
 8001da0:	4182      	sbcs	r2, r0
 8001da2:	4332      	orrs	r2, r6
 8001da4:	2607      	movs	r6, #7
 8001da6:	2700      	movs	r7, #0
 8001da8:	4016      	ands	r6, r2
 8001daa:	d009      	beq.n	8001dc0 <__aeabi_dmul+0x4c0>
 8001dac:	200f      	movs	r0, #15
 8001dae:	2300      	movs	r3, #0
 8001db0:	4010      	ands	r0, r2
 8001db2:	0014      	movs	r4, r2
 8001db4:	2804      	cmp	r0, #4
 8001db6:	d1b9      	bne.n	8001d2c <__aeabi_dmul+0x42c>
 8001db8:	0022      	movs	r2, r4
 8001dba:	075e      	lsls	r6, r3, #29
 8001dbc:	025b      	lsls	r3, r3, #9
 8001dbe:	0b1f      	lsrs	r7, r3, #12
 8001dc0:	08d2      	lsrs	r2, r2, #3
 8001dc2:	4316      	orrs	r6, r2
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	e606      	b.n	80019d6 <__aeabi_dmul+0xd6>
 8001dc8:	2780      	movs	r7, #128	; 0x80
 8001dca:	033f      	lsls	r7, r7, #12
 8001dcc:	431f      	orrs	r7, r3
 8001dce:	033f      	lsls	r7, r7, #12
 8001dd0:	0b3f      	lsrs	r7, r7, #12
 8001dd2:	0016      	movs	r6, r2
 8001dd4:	4b00      	ldr	r3, [pc, #0]	; (8001dd8 <__aeabi_dmul+0x4d8>)
 8001dd6:	e5fe      	b.n	80019d6 <__aeabi_dmul+0xd6>
 8001dd8:	000007ff 	.word	0x000007ff
 8001ddc:	0000041e 	.word	0x0000041e
 8001de0:	0000043e 	.word	0x0000043e

08001de4 <__aeabi_dsub>:
 8001de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001de6:	4657      	mov	r7, sl
 8001de8:	464e      	mov	r6, r9
 8001dea:	4645      	mov	r5, r8
 8001dec:	46de      	mov	lr, fp
 8001dee:	000c      	movs	r4, r1
 8001df0:	0309      	lsls	r1, r1, #12
 8001df2:	b5e0      	push	{r5, r6, r7, lr}
 8001df4:	0a49      	lsrs	r1, r1, #9
 8001df6:	0f46      	lsrs	r6, r0, #29
 8001df8:	005f      	lsls	r7, r3, #1
 8001dfa:	4331      	orrs	r1, r6
 8001dfc:	031e      	lsls	r6, r3, #12
 8001dfe:	0fdb      	lsrs	r3, r3, #31
 8001e00:	0a76      	lsrs	r6, r6, #9
 8001e02:	469b      	mov	fp, r3
 8001e04:	0f53      	lsrs	r3, r2, #29
 8001e06:	4333      	orrs	r3, r6
 8001e08:	4ec8      	ldr	r6, [pc, #800]	; (800212c <__aeabi_dsub+0x348>)
 8001e0a:	0065      	lsls	r5, r4, #1
 8001e0c:	00c0      	lsls	r0, r0, #3
 8001e0e:	0fe4      	lsrs	r4, r4, #31
 8001e10:	00d2      	lsls	r2, r2, #3
 8001e12:	0d6d      	lsrs	r5, r5, #21
 8001e14:	46a2      	mov	sl, r4
 8001e16:	4681      	mov	r9, r0
 8001e18:	0d7f      	lsrs	r7, r7, #21
 8001e1a:	469c      	mov	ip, r3
 8001e1c:	4690      	mov	r8, r2
 8001e1e:	42b7      	cmp	r7, r6
 8001e20:	d100      	bne.n	8001e24 <__aeabi_dsub+0x40>
 8001e22:	e0b9      	b.n	8001f98 <__aeabi_dsub+0x1b4>
 8001e24:	465b      	mov	r3, fp
 8001e26:	2601      	movs	r6, #1
 8001e28:	4073      	eors	r3, r6
 8001e2a:	469b      	mov	fp, r3
 8001e2c:	1bee      	subs	r6, r5, r7
 8001e2e:	45a3      	cmp	fp, r4
 8001e30:	d100      	bne.n	8001e34 <__aeabi_dsub+0x50>
 8001e32:	e083      	b.n	8001f3c <__aeabi_dsub+0x158>
 8001e34:	2e00      	cmp	r6, #0
 8001e36:	dd63      	ble.n	8001f00 <__aeabi_dsub+0x11c>
 8001e38:	2f00      	cmp	r7, #0
 8001e3a:	d000      	beq.n	8001e3e <__aeabi_dsub+0x5a>
 8001e3c:	e0b1      	b.n	8001fa2 <__aeabi_dsub+0x1be>
 8001e3e:	4663      	mov	r3, ip
 8001e40:	4313      	orrs	r3, r2
 8001e42:	d100      	bne.n	8001e46 <__aeabi_dsub+0x62>
 8001e44:	e123      	b.n	800208e <__aeabi_dsub+0x2aa>
 8001e46:	1e73      	subs	r3, r6, #1
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d000      	beq.n	8001e4e <__aeabi_dsub+0x6a>
 8001e4c:	e1ba      	b.n	80021c4 <__aeabi_dsub+0x3e0>
 8001e4e:	1a86      	subs	r6, r0, r2
 8001e50:	4663      	mov	r3, ip
 8001e52:	42b0      	cmp	r0, r6
 8001e54:	4180      	sbcs	r0, r0
 8001e56:	2501      	movs	r5, #1
 8001e58:	1ac9      	subs	r1, r1, r3
 8001e5a:	4240      	negs	r0, r0
 8001e5c:	1a09      	subs	r1, r1, r0
 8001e5e:	020b      	lsls	r3, r1, #8
 8001e60:	d400      	bmi.n	8001e64 <__aeabi_dsub+0x80>
 8001e62:	e147      	b.n	80020f4 <__aeabi_dsub+0x310>
 8001e64:	0249      	lsls	r1, r1, #9
 8001e66:	0a4b      	lsrs	r3, r1, #9
 8001e68:	4698      	mov	r8, r3
 8001e6a:	4643      	mov	r3, r8
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d100      	bne.n	8001e72 <__aeabi_dsub+0x8e>
 8001e70:	e189      	b.n	8002186 <__aeabi_dsub+0x3a2>
 8001e72:	4640      	mov	r0, r8
 8001e74:	f000 fbf2 	bl	800265c <__clzsi2>
 8001e78:	0003      	movs	r3, r0
 8001e7a:	3b08      	subs	r3, #8
 8001e7c:	2b1f      	cmp	r3, #31
 8001e7e:	dd00      	ble.n	8001e82 <__aeabi_dsub+0x9e>
 8001e80:	e17c      	b.n	800217c <__aeabi_dsub+0x398>
 8001e82:	2220      	movs	r2, #32
 8001e84:	0030      	movs	r0, r6
 8001e86:	1ad2      	subs	r2, r2, r3
 8001e88:	4641      	mov	r1, r8
 8001e8a:	40d0      	lsrs	r0, r2
 8001e8c:	4099      	lsls	r1, r3
 8001e8e:	0002      	movs	r2, r0
 8001e90:	409e      	lsls	r6, r3
 8001e92:	430a      	orrs	r2, r1
 8001e94:	429d      	cmp	r5, r3
 8001e96:	dd00      	ble.n	8001e9a <__aeabi_dsub+0xb6>
 8001e98:	e16a      	b.n	8002170 <__aeabi_dsub+0x38c>
 8001e9a:	1b5d      	subs	r5, r3, r5
 8001e9c:	1c6b      	adds	r3, r5, #1
 8001e9e:	2b1f      	cmp	r3, #31
 8001ea0:	dd00      	ble.n	8001ea4 <__aeabi_dsub+0xc0>
 8001ea2:	e194      	b.n	80021ce <__aeabi_dsub+0x3ea>
 8001ea4:	2120      	movs	r1, #32
 8001ea6:	0010      	movs	r0, r2
 8001ea8:	0035      	movs	r5, r6
 8001eaa:	1ac9      	subs	r1, r1, r3
 8001eac:	408e      	lsls	r6, r1
 8001eae:	40da      	lsrs	r2, r3
 8001eb0:	4088      	lsls	r0, r1
 8001eb2:	40dd      	lsrs	r5, r3
 8001eb4:	1e71      	subs	r1, r6, #1
 8001eb6:	418e      	sbcs	r6, r1
 8001eb8:	0011      	movs	r1, r2
 8001eba:	2207      	movs	r2, #7
 8001ebc:	4328      	orrs	r0, r5
 8001ebe:	2500      	movs	r5, #0
 8001ec0:	4306      	orrs	r6, r0
 8001ec2:	4032      	ands	r2, r6
 8001ec4:	2a00      	cmp	r2, #0
 8001ec6:	d009      	beq.n	8001edc <__aeabi_dsub+0xf8>
 8001ec8:	230f      	movs	r3, #15
 8001eca:	4033      	ands	r3, r6
 8001ecc:	2b04      	cmp	r3, #4
 8001ece:	d005      	beq.n	8001edc <__aeabi_dsub+0xf8>
 8001ed0:	1d33      	adds	r3, r6, #4
 8001ed2:	42b3      	cmp	r3, r6
 8001ed4:	41b6      	sbcs	r6, r6
 8001ed6:	4276      	negs	r6, r6
 8001ed8:	1989      	adds	r1, r1, r6
 8001eda:	001e      	movs	r6, r3
 8001edc:	020b      	lsls	r3, r1, #8
 8001ede:	d400      	bmi.n	8001ee2 <__aeabi_dsub+0xfe>
 8001ee0:	e23d      	b.n	800235e <__aeabi_dsub+0x57a>
 8001ee2:	1c6a      	adds	r2, r5, #1
 8001ee4:	4b91      	ldr	r3, [pc, #580]	; (800212c <__aeabi_dsub+0x348>)
 8001ee6:	0555      	lsls	r5, r2, #21
 8001ee8:	0d6d      	lsrs	r5, r5, #21
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d100      	bne.n	8001ef0 <__aeabi_dsub+0x10c>
 8001eee:	e119      	b.n	8002124 <__aeabi_dsub+0x340>
 8001ef0:	4a8f      	ldr	r2, [pc, #572]	; (8002130 <__aeabi_dsub+0x34c>)
 8001ef2:	08f6      	lsrs	r6, r6, #3
 8001ef4:	400a      	ands	r2, r1
 8001ef6:	0757      	lsls	r7, r2, #29
 8001ef8:	0252      	lsls	r2, r2, #9
 8001efa:	4337      	orrs	r7, r6
 8001efc:	0b12      	lsrs	r2, r2, #12
 8001efe:	e09b      	b.n	8002038 <__aeabi_dsub+0x254>
 8001f00:	2e00      	cmp	r6, #0
 8001f02:	d000      	beq.n	8001f06 <__aeabi_dsub+0x122>
 8001f04:	e0c5      	b.n	8002092 <__aeabi_dsub+0x2ae>
 8001f06:	1c6e      	adds	r6, r5, #1
 8001f08:	0576      	lsls	r6, r6, #21
 8001f0a:	0d76      	lsrs	r6, r6, #21
 8001f0c:	2e01      	cmp	r6, #1
 8001f0e:	dc00      	bgt.n	8001f12 <__aeabi_dsub+0x12e>
 8001f10:	e148      	b.n	80021a4 <__aeabi_dsub+0x3c0>
 8001f12:	4667      	mov	r7, ip
 8001f14:	1a86      	subs	r6, r0, r2
 8001f16:	1bcb      	subs	r3, r1, r7
 8001f18:	42b0      	cmp	r0, r6
 8001f1a:	41bf      	sbcs	r7, r7
 8001f1c:	427f      	negs	r7, r7
 8001f1e:	46b8      	mov	r8, r7
 8001f20:	001f      	movs	r7, r3
 8001f22:	4643      	mov	r3, r8
 8001f24:	1aff      	subs	r7, r7, r3
 8001f26:	003b      	movs	r3, r7
 8001f28:	46b8      	mov	r8, r7
 8001f2a:	021b      	lsls	r3, r3, #8
 8001f2c:	d500      	bpl.n	8001f30 <__aeabi_dsub+0x14c>
 8001f2e:	e15f      	b.n	80021f0 <__aeabi_dsub+0x40c>
 8001f30:	4337      	orrs	r7, r6
 8001f32:	d19a      	bne.n	8001e6a <__aeabi_dsub+0x86>
 8001f34:	2200      	movs	r2, #0
 8001f36:	2400      	movs	r4, #0
 8001f38:	2500      	movs	r5, #0
 8001f3a:	e079      	b.n	8002030 <__aeabi_dsub+0x24c>
 8001f3c:	2e00      	cmp	r6, #0
 8001f3e:	dc00      	bgt.n	8001f42 <__aeabi_dsub+0x15e>
 8001f40:	e0fa      	b.n	8002138 <__aeabi_dsub+0x354>
 8001f42:	2f00      	cmp	r7, #0
 8001f44:	d100      	bne.n	8001f48 <__aeabi_dsub+0x164>
 8001f46:	e08d      	b.n	8002064 <__aeabi_dsub+0x280>
 8001f48:	4b78      	ldr	r3, [pc, #480]	; (800212c <__aeabi_dsub+0x348>)
 8001f4a:	429d      	cmp	r5, r3
 8001f4c:	d067      	beq.n	800201e <__aeabi_dsub+0x23a>
 8001f4e:	2380      	movs	r3, #128	; 0x80
 8001f50:	4667      	mov	r7, ip
 8001f52:	041b      	lsls	r3, r3, #16
 8001f54:	431f      	orrs	r7, r3
 8001f56:	46bc      	mov	ip, r7
 8001f58:	2e38      	cmp	r6, #56	; 0x38
 8001f5a:	dc00      	bgt.n	8001f5e <__aeabi_dsub+0x17a>
 8001f5c:	e152      	b.n	8002204 <__aeabi_dsub+0x420>
 8001f5e:	4663      	mov	r3, ip
 8001f60:	4313      	orrs	r3, r2
 8001f62:	1e5a      	subs	r2, r3, #1
 8001f64:	4193      	sbcs	r3, r2
 8001f66:	181e      	adds	r6, r3, r0
 8001f68:	4286      	cmp	r6, r0
 8001f6a:	4180      	sbcs	r0, r0
 8001f6c:	4240      	negs	r0, r0
 8001f6e:	1809      	adds	r1, r1, r0
 8001f70:	020b      	lsls	r3, r1, #8
 8001f72:	d400      	bmi.n	8001f76 <__aeabi_dsub+0x192>
 8001f74:	e0be      	b.n	80020f4 <__aeabi_dsub+0x310>
 8001f76:	4b6d      	ldr	r3, [pc, #436]	; (800212c <__aeabi_dsub+0x348>)
 8001f78:	3501      	adds	r5, #1
 8001f7a:	429d      	cmp	r5, r3
 8001f7c:	d100      	bne.n	8001f80 <__aeabi_dsub+0x19c>
 8001f7e:	e0d2      	b.n	8002126 <__aeabi_dsub+0x342>
 8001f80:	4a6b      	ldr	r2, [pc, #428]	; (8002130 <__aeabi_dsub+0x34c>)
 8001f82:	0873      	lsrs	r3, r6, #1
 8001f84:	400a      	ands	r2, r1
 8001f86:	2101      	movs	r1, #1
 8001f88:	400e      	ands	r6, r1
 8001f8a:	431e      	orrs	r6, r3
 8001f8c:	0851      	lsrs	r1, r2, #1
 8001f8e:	07d3      	lsls	r3, r2, #31
 8001f90:	2207      	movs	r2, #7
 8001f92:	431e      	orrs	r6, r3
 8001f94:	4032      	ands	r2, r6
 8001f96:	e795      	b.n	8001ec4 <__aeabi_dsub+0xe0>
 8001f98:	001e      	movs	r6, r3
 8001f9a:	4316      	orrs	r6, r2
 8001f9c:	d000      	beq.n	8001fa0 <__aeabi_dsub+0x1bc>
 8001f9e:	e745      	b.n	8001e2c <__aeabi_dsub+0x48>
 8001fa0:	e740      	b.n	8001e24 <__aeabi_dsub+0x40>
 8001fa2:	4b62      	ldr	r3, [pc, #392]	; (800212c <__aeabi_dsub+0x348>)
 8001fa4:	429d      	cmp	r5, r3
 8001fa6:	d03a      	beq.n	800201e <__aeabi_dsub+0x23a>
 8001fa8:	2380      	movs	r3, #128	; 0x80
 8001faa:	4667      	mov	r7, ip
 8001fac:	041b      	lsls	r3, r3, #16
 8001fae:	431f      	orrs	r7, r3
 8001fb0:	46bc      	mov	ip, r7
 8001fb2:	2e38      	cmp	r6, #56	; 0x38
 8001fb4:	dd00      	ble.n	8001fb8 <__aeabi_dsub+0x1d4>
 8001fb6:	e0eb      	b.n	8002190 <__aeabi_dsub+0x3ac>
 8001fb8:	2e1f      	cmp	r6, #31
 8001fba:	dc00      	bgt.n	8001fbe <__aeabi_dsub+0x1da>
 8001fbc:	e13a      	b.n	8002234 <__aeabi_dsub+0x450>
 8001fbe:	0033      	movs	r3, r6
 8001fc0:	4667      	mov	r7, ip
 8001fc2:	3b20      	subs	r3, #32
 8001fc4:	40df      	lsrs	r7, r3
 8001fc6:	003b      	movs	r3, r7
 8001fc8:	2e20      	cmp	r6, #32
 8001fca:	d005      	beq.n	8001fd8 <__aeabi_dsub+0x1f4>
 8001fcc:	2740      	movs	r7, #64	; 0x40
 8001fce:	1bbf      	subs	r7, r7, r6
 8001fd0:	4666      	mov	r6, ip
 8001fd2:	40be      	lsls	r6, r7
 8001fd4:	4332      	orrs	r2, r6
 8001fd6:	4690      	mov	r8, r2
 8001fd8:	4646      	mov	r6, r8
 8001fda:	1e72      	subs	r2, r6, #1
 8001fdc:	4196      	sbcs	r6, r2
 8001fde:	4333      	orrs	r3, r6
 8001fe0:	e0da      	b.n	8002198 <__aeabi_dsub+0x3b4>
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d100      	bne.n	8001fe8 <__aeabi_dsub+0x204>
 8001fe6:	e214      	b.n	8002412 <__aeabi_dsub+0x62e>
 8001fe8:	4663      	mov	r3, ip
 8001fea:	4313      	orrs	r3, r2
 8001fec:	d100      	bne.n	8001ff0 <__aeabi_dsub+0x20c>
 8001fee:	e168      	b.n	80022c2 <__aeabi_dsub+0x4de>
 8001ff0:	2380      	movs	r3, #128	; 0x80
 8001ff2:	074e      	lsls	r6, r1, #29
 8001ff4:	08c0      	lsrs	r0, r0, #3
 8001ff6:	08c9      	lsrs	r1, r1, #3
 8001ff8:	031b      	lsls	r3, r3, #12
 8001ffa:	4306      	orrs	r6, r0
 8001ffc:	4219      	tst	r1, r3
 8001ffe:	d008      	beq.n	8002012 <__aeabi_dsub+0x22e>
 8002000:	4660      	mov	r0, ip
 8002002:	08c0      	lsrs	r0, r0, #3
 8002004:	4218      	tst	r0, r3
 8002006:	d104      	bne.n	8002012 <__aeabi_dsub+0x22e>
 8002008:	4663      	mov	r3, ip
 800200a:	0001      	movs	r1, r0
 800200c:	08d2      	lsrs	r2, r2, #3
 800200e:	075e      	lsls	r6, r3, #29
 8002010:	4316      	orrs	r6, r2
 8002012:	00f3      	lsls	r3, r6, #3
 8002014:	4699      	mov	r9, r3
 8002016:	00c9      	lsls	r1, r1, #3
 8002018:	0f72      	lsrs	r2, r6, #29
 800201a:	4d44      	ldr	r5, [pc, #272]	; (800212c <__aeabi_dsub+0x348>)
 800201c:	4311      	orrs	r1, r2
 800201e:	464b      	mov	r3, r9
 8002020:	08de      	lsrs	r6, r3, #3
 8002022:	4b42      	ldr	r3, [pc, #264]	; (800212c <__aeabi_dsub+0x348>)
 8002024:	074f      	lsls	r7, r1, #29
 8002026:	4337      	orrs	r7, r6
 8002028:	08ca      	lsrs	r2, r1, #3
 800202a:	429d      	cmp	r5, r3
 800202c:	d100      	bne.n	8002030 <__aeabi_dsub+0x24c>
 800202e:	e06e      	b.n	800210e <__aeabi_dsub+0x32a>
 8002030:	0312      	lsls	r2, r2, #12
 8002032:	056d      	lsls	r5, r5, #21
 8002034:	0b12      	lsrs	r2, r2, #12
 8002036:	0d6d      	lsrs	r5, r5, #21
 8002038:	2100      	movs	r1, #0
 800203a:	0312      	lsls	r2, r2, #12
 800203c:	0b13      	lsrs	r3, r2, #12
 800203e:	0d0a      	lsrs	r2, r1, #20
 8002040:	0512      	lsls	r2, r2, #20
 8002042:	431a      	orrs	r2, r3
 8002044:	4b3b      	ldr	r3, [pc, #236]	; (8002134 <__aeabi_dsub+0x350>)
 8002046:	052d      	lsls	r5, r5, #20
 8002048:	4013      	ands	r3, r2
 800204a:	432b      	orrs	r3, r5
 800204c:	005b      	lsls	r3, r3, #1
 800204e:	07e4      	lsls	r4, r4, #31
 8002050:	085b      	lsrs	r3, r3, #1
 8002052:	4323      	orrs	r3, r4
 8002054:	0038      	movs	r0, r7
 8002056:	0019      	movs	r1, r3
 8002058:	bc3c      	pop	{r2, r3, r4, r5}
 800205a:	4690      	mov	r8, r2
 800205c:	4699      	mov	r9, r3
 800205e:	46a2      	mov	sl, r4
 8002060:	46ab      	mov	fp, r5
 8002062:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002064:	4663      	mov	r3, ip
 8002066:	4313      	orrs	r3, r2
 8002068:	d011      	beq.n	800208e <__aeabi_dsub+0x2aa>
 800206a:	1e73      	subs	r3, r6, #1
 800206c:	2b00      	cmp	r3, #0
 800206e:	d000      	beq.n	8002072 <__aeabi_dsub+0x28e>
 8002070:	e107      	b.n	8002282 <__aeabi_dsub+0x49e>
 8002072:	1886      	adds	r6, r0, r2
 8002074:	4286      	cmp	r6, r0
 8002076:	4180      	sbcs	r0, r0
 8002078:	4461      	add	r1, ip
 800207a:	4240      	negs	r0, r0
 800207c:	1809      	adds	r1, r1, r0
 800207e:	2501      	movs	r5, #1
 8002080:	020b      	lsls	r3, r1, #8
 8002082:	d537      	bpl.n	80020f4 <__aeabi_dsub+0x310>
 8002084:	2502      	movs	r5, #2
 8002086:	e77b      	b.n	8001f80 <__aeabi_dsub+0x19c>
 8002088:	003e      	movs	r6, r7
 800208a:	4661      	mov	r1, ip
 800208c:	4691      	mov	r9, r2
 800208e:	0035      	movs	r5, r6
 8002090:	e7c5      	b.n	800201e <__aeabi_dsub+0x23a>
 8002092:	465c      	mov	r4, fp
 8002094:	2d00      	cmp	r5, #0
 8002096:	d000      	beq.n	800209a <__aeabi_dsub+0x2b6>
 8002098:	e0e1      	b.n	800225e <__aeabi_dsub+0x47a>
 800209a:	000b      	movs	r3, r1
 800209c:	4303      	orrs	r3, r0
 800209e:	d0f3      	beq.n	8002088 <__aeabi_dsub+0x2a4>
 80020a0:	1c73      	adds	r3, r6, #1
 80020a2:	d100      	bne.n	80020a6 <__aeabi_dsub+0x2c2>
 80020a4:	e1ac      	b.n	8002400 <__aeabi_dsub+0x61c>
 80020a6:	4b21      	ldr	r3, [pc, #132]	; (800212c <__aeabi_dsub+0x348>)
 80020a8:	429f      	cmp	r7, r3
 80020aa:	d100      	bne.n	80020ae <__aeabi_dsub+0x2ca>
 80020ac:	e13a      	b.n	8002324 <__aeabi_dsub+0x540>
 80020ae:	43f3      	mvns	r3, r6
 80020b0:	2b38      	cmp	r3, #56	; 0x38
 80020b2:	dd00      	ble.n	80020b6 <__aeabi_dsub+0x2d2>
 80020b4:	e16f      	b.n	8002396 <__aeabi_dsub+0x5b2>
 80020b6:	2b1f      	cmp	r3, #31
 80020b8:	dd00      	ble.n	80020bc <__aeabi_dsub+0x2d8>
 80020ba:	e18c      	b.n	80023d6 <__aeabi_dsub+0x5f2>
 80020bc:	2520      	movs	r5, #32
 80020be:	000e      	movs	r6, r1
 80020c0:	1aed      	subs	r5, r5, r3
 80020c2:	40ae      	lsls	r6, r5
 80020c4:	46b0      	mov	r8, r6
 80020c6:	0006      	movs	r6, r0
 80020c8:	46aa      	mov	sl, r5
 80020ca:	40de      	lsrs	r6, r3
 80020cc:	4645      	mov	r5, r8
 80020ce:	4335      	orrs	r5, r6
 80020d0:	002e      	movs	r6, r5
 80020d2:	4655      	mov	r5, sl
 80020d4:	40d9      	lsrs	r1, r3
 80020d6:	40a8      	lsls	r0, r5
 80020d8:	4663      	mov	r3, ip
 80020da:	1e45      	subs	r5, r0, #1
 80020dc:	41a8      	sbcs	r0, r5
 80020de:	1a5b      	subs	r3, r3, r1
 80020e0:	469c      	mov	ip, r3
 80020e2:	4330      	orrs	r0, r6
 80020e4:	1a16      	subs	r6, r2, r0
 80020e6:	42b2      	cmp	r2, r6
 80020e8:	4192      	sbcs	r2, r2
 80020ea:	4663      	mov	r3, ip
 80020ec:	4252      	negs	r2, r2
 80020ee:	1a99      	subs	r1, r3, r2
 80020f0:	003d      	movs	r5, r7
 80020f2:	e6b4      	b.n	8001e5e <__aeabi_dsub+0x7a>
 80020f4:	2207      	movs	r2, #7
 80020f6:	4032      	ands	r2, r6
 80020f8:	2a00      	cmp	r2, #0
 80020fa:	d000      	beq.n	80020fe <__aeabi_dsub+0x31a>
 80020fc:	e6e4      	b.n	8001ec8 <__aeabi_dsub+0xe4>
 80020fe:	4b0b      	ldr	r3, [pc, #44]	; (800212c <__aeabi_dsub+0x348>)
 8002100:	08f6      	lsrs	r6, r6, #3
 8002102:	074f      	lsls	r7, r1, #29
 8002104:	4337      	orrs	r7, r6
 8002106:	08ca      	lsrs	r2, r1, #3
 8002108:	429d      	cmp	r5, r3
 800210a:	d000      	beq.n	800210e <__aeabi_dsub+0x32a>
 800210c:	e790      	b.n	8002030 <__aeabi_dsub+0x24c>
 800210e:	003b      	movs	r3, r7
 8002110:	4313      	orrs	r3, r2
 8002112:	d100      	bne.n	8002116 <__aeabi_dsub+0x332>
 8002114:	e1a6      	b.n	8002464 <__aeabi_dsub+0x680>
 8002116:	2380      	movs	r3, #128	; 0x80
 8002118:	031b      	lsls	r3, r3, #12
 800211a:	431a      	orrs	r2, r3
 800211c:	0312      	lsls	r2, r2, #12
 800211e:	0b12      	lsrs	r2, r2, #12
 8002120:	4d02      	ldr	r5, [pc, #8]	; (800212c <__aeabi_dsub+0x348>)
 8002122:	e789      	b.n	8002038 <__aeabi_dsub+0x254>
 8002124:	0015      	movs	r5, r2
 8002126:	2200      	movs	r2, #0
 8002128:	2700      	movs	r7, #0
 800212a:	e785      	b.n	8002038 <__aeabi_dsub+0x254>
 800212c:	000007ff 	.word	0x000007ff
 8002130:	ff7fffff 	.word	0xff7fffff
 8002134:	800fffff 	.word	0x800fffff
 8002138:	2e00      	cmp	r6, #0
 800213a:	d000      	beq.n	800213e <__aeabi_dsub+0x35a>
 800213c:	e0c7      	b.n	80022ce <__aeabi_dsub+0x4ea>
 800213e:	1c6b      	adds	r3, r5, #1
 8002140:	055e      	lsls	r6, r3, #21
 8002142:	0d76      	lsrs	r6, r6, #21
 8002144:	2e01      	cmp	r6, #1
 8002146:	dc00      	bgt.n	800214a <__aeabi_dsub+0x366>
 8002148:	e0f0      	b.n	800232c <__aeabi_dsub+0x548>
 800214a:	4dc8      	ldr	r5, [pc, #800]	; (800246c <__aeabi_dsub+0x688>)
 800214c:	42ab      	cmp	r3, r5
 800214e:	d100      	bne.n	8002152 <__aeabi_dsub+0x36e>
 8002150:	e0b9      	b.n	80022c6 <__aeabi_dsub+0x4e2>
 8002152:	1885      	adds	r5, r0, r2
 8002154:	000a      	movs	r2, r1
 8002156:	4285      	cmp	r5, r0
 8002158:	4189      	sbcs	r1, r1
 800215a:	4462      	add	r2, ip
 800215c:	4249      	negs	r1, r1
 800215e:	1851      	adds	r1, r2, r1
 8002160:	2207      	movs	r2, #7
 8002162:	07ce      	lsls	r6, r1, #31
 8002164:	086d      	lsrs	r5, r5, #1
 8002166:	432e      	orrs	r6, r5
 8002168:	0849      	lsrs	r1, r1, #1
 800216a:	4032      	ands	r2, r6
 800216c:	001d      	movs	r5, r3
 800216e:	e6a9      	b.n	8001ec4 <__aeabi_dsub+0xe0>
 8002170:	49bf      	ldr	r1, [pc, #764]	; (8002470 <__aeabi_dsub+0x68c>)
 8002172:	1aed      	subs	r5, r5, r3
 8002174:	4011      	ands	r1, r2
 8002176:	2207      	movs	r2, #7
 8002178:	4032      	ands	r2, r6
 800217a:	e6a3      	b.n	8001ec4 <__aeabi_dsub+0xe0>
 800217c:	0032      	movs	r2, r6
 800217e:	3828      	subs	r0, #40	; 0x28
 8002180:	4082      	lsls	r2, r0
 8002182:	2600      	movs	r6, #0
 8002184:	e686      	b.n	8001e94 <__aeabi_dsub+0xb0>
 8002186:	0030      	movs	r0, r6
 8002188:	f000 fa68 	bl	800265c <__clzsi2>
 800218c:	3020      	adds	r0, #32
 800218e:	e673      	b.n	8001e78 <__aeabi_dsub+0x94>
 8002190:	4663      	mov	r3, ip
 8002192:	4313      	orrs	r3, r2
 8002194:	1e5a      	subs	r2, r3, #1
 8002196:	4193      	sbcs	r3, r2
 8002198:	1ac6      	subs	r6, r0, r3
 800219a:	42b0      	cmp	r0, r6
 800219c:	4180      	sbcs	r0, r0
 800219e:	4240      	negs	r0, r0
 80021a0:	1a09      	subs	r1, r1, r0
 80021a2:	e65c      	b.n	8001e5e <__aeabi_dsub+0x7a>
 80021a4:	000e      	movs	r6, r1
 80021a6:	4667      	mov	r7, ip
 80021a8:	4306      	orrs	r6, r0
 80021aa:	4317      	orrs	r7, r2
 80021ac:	2d00      	cmp	r5, #0
 80021ae:	d15e      	bne.n	800226e <__aeabi_dsub+0x48a>
 80021b0:	2e00      	cmp	r6, #0
 80021b2:	d000      	beq.n	80021b6 <__aeabi_dsub+0x3d2>
 80021b4:	e0f3      	b.n	800239e <__aeabi_dsub+0x5ba>
 80021b6:	2f00      	cmp	r7, #0
 80021b8:	d100      	bne.n	80021bc <__aeabi_dsub+0x3d8>
 80021ba:	e11e      	b.n	80023fa <__aeabi_dsub+0x616>
 80021bc:	465c      	mov	r4, fp
 80021be:	4661      	mov	r1, ip
 80021c0:	4691      	mov	r9, r2
 80021c2:	e72c      	b.n	800201e <__aeabi_dsub+0x23a>
 80021c4:	4fa9      	ldr	r7, [pc, #676]	; (800246c <__aeabi_dsub+0x688>)
 80021c6:	42be      	cmp	r6, r7
 80021c8:	d07b      	beq.n	80022c2 <__aeabi_dsub+0x4de>
 80021ca:	001e      	movs	r6, r3
 80021cc:	e6f1      	b.n	8001fb2 <__aeabi_dsub+0x1ce>
 80021ce:	0010      	movs	r0, r2
 80021d0:	3d1f      	subs	r5, #31
 80021d2:	40e8      	lsrs	r0, r5
 80021d4:	2b20      	cmp	r3, #32
 80021d6:	d003      	beq.n	80021e0 <__aeabi_dsub+0x3fc>
 80021d8:	2140      	movs	r1, #64	; 0x40
 80021da:	1acb      	subs	r3, r1, r3
 80021dc:	409a      	lsls	r2, r3
 80021de:	4316      	orrs	r6, r2
 80021e0:	1e73      	subs	r3, r6, #1
 80021e2:	419e      	sbcs	r6, r3
 80021e4:	2207      	movs	r2, #7
 80021e6:	4306      	orrs	r6, r0
 80021e8:	4032      	ands	r2, r6
 80021ea:	2100      	movs	r1, #0
 80021ec:	2500      	movs	r5, #0
 80021ee:	e783      	b.n	80020f8 <__aeabi_dsub+0x314>
 80021f0:	1a16      	subs	r6, r2, r0
 80021f2:	4663      	mov	r3, ip
 80021f4:	42b2      	cmp	r2, r6
 80021f6:	4180      	sbcs	r0, r0
 80021f8:	1a59      	subs	r1, r3, r1
 80021fa:	4240      	negs	r0, r0
 80021fc:	1a0b      	subs	r3, r1, r0
 80021fe:	4698      	mov	r8, r3
 8002200:	465c      	mov	r4, fp
 8002202:	e632      	b.n	8001e6a <__aeabi_dsub+0x86>
 8002204:	2e1f      	cmp	r6, #31
 8002206:	dd00      	ble.n	800220a <__aeabi_dsub+0x426>
 8002208:	e0ab      	b.n	8002362 <__aeabi_dsub+0x57e>
 800220a:	2720      	movs	r7, #32
 800220c:	1bbb      	subs	r3, r7, r6
 800220e:	469a      	mov	sl, r3
 8002210:	4663      	mov	r3, ip
 8002212:	4657      	mov	r7, sl
 8002214:	40bb      	lsls	r3, r7
 8002216:	4699      	mov	r9, r3
 8002218:	0013      	movs	r3, r2
 800221a:	464f      	mov	r7, r9
 800221c:	40f3      	lsrs	r3, r6
 800221e:	431f      	orrs	r7, r3
 8002220:	003b      	movs	r3, r7
 8002222:	4657      	mov	r7, sl
 8002224:	40ba      	lsls	r2, r7
 8002226:	1e57      	subs	r7, r2, #1
 8002228:	41ba      	sbcs	r2, r7
 800222a:	4313      	orrs	r3, r2
 800222c:	4662      	mov	r2, ip
 800222e:	40f2      	lsrs	r2, r6
 8002230:	1889      	adds	r1, r1, r2
 8002232:	e698      	b.n	8001f66 <__aeabi_dsub+0x182>
 8002234:	2720      	movs	r7, #32
 8002236:	1bbb      	subs	r3, r7, r6
 8002238:	469a      	mov	sl, r3
 800223a:	4663      	mov	r3, ip
 800223c:	4657      	mov	r7, sl
 800223e:	40bb      	lsls	r3, r7
 8002240:	4699      	mov	r9, r3
 8002242:	0013      	movs	r3, r2
 8002244:	464f      	mov	r7, r9
 8002246:	40f3      	lsrs	r3, r6
 8002248:	431f      	orrs	r7, r3
 800224a:	003b      	movs	r3, r7
 800224c:	4657      	mov	r7, sl
 800224e:	40ba      	lsls	r2, r7
 8002250:	1e57      	subs	r7, r2, #1
 8002252:	41ba      	sbcs	r2, r7
 8002254:	4313      	orrs	r3, r2
 8002256:	4662      	mov	r2, ip
 8002258:	40f2      	lsrs	r2, r6
 800225a:	1a89      	subs	r1, r1, r2
 800225c:	e79c      	b.n	8002198 <__aeabi_dsub+0x3b4>
 800225e:	4b83      	ldr	r3, [pc, #524]	; (800246c <__aeabi_dsub+0x688>)
 8002260:	429f      	cmp	r7, r3
 8002262:	d05f      	beq.n	8002324 <__aeabi_dsub+0x540>
 8002264:	2580      	movs	r5, #128	; 0x80
 8002266:	042d      	lsls	r5, r5, #16
 8002268:	4273      	negs	r3, r6
 800226a:	4329      	orrs	r1, r5
 800226c:	e720      	b.n	80020b0 <__aeabi_dsub+0x2cc>
 800226e:	2e00      	cmp	r6, #0
 8002270:	d10c      	bne.n	800228c <__aeabi_dsub+0x4a8>
 8002272:	2f00      	cmp	r7, #0
 8002274:	d100      	bne.n	8002278 <__aeabi_dsub+0x494>
 8002276:	e0d0      	b.n	800241a <__aeabi_dsub+0x636>
 8002278:	465c      	mov	r4, fp
 800227a:	4661      	mov	r1, ip
 800227c:	4691      	mov	r9, r2
 800227e:	4d7b      	ldr	r5, [pc, #492]	; (800246c <__aeabi_dsub+0x688>)
 8002280:	e6cd      	b.n	800201e <__aeabi_dsub+0x23a>
 8002282:	4f7a      	ldr	r7, [pc, #488]	; (800246c <__aeabi_dsub+0x688>)
 8002284:	42be      	cmp	r6, r7
 8002286:	d01c      	beq.n	80022c2 <__aeabi_dsub+0x4de>
 8002288:	001e      	movs	r6, r3
 800228a:	e665      	b.n	8001f58 <__aeabi_dsub+0x174>
 800228c:	2f00      	cmp	r7, #0
 800228e:	d018      	beq.n	80022c2 <__aeabi_dsub+0x4de>
 8002290:	08c0      	lsrs	r0, r0, #3
 8002292:	074e      	lsls	r6, r1, #29
 8002294:	4306      	orrs	r6, r0
 8002296:	2080      	movs	r0, #128	; 0x80
 8002298:	08c9      	lsrs	r1, r1, #3
 800229a:	0300      	lsls	r0, r0, #12
 800229c:	4201      	tst	r1, r0
 800229e:	d008      	beq.n	80022b2 <__aeabi_dsub+0x4ce>
 80022a0:	4663      	mov	r3, ip
 80022a2:	08dc      	lsrs	r4, r3, #3
 80022a4:	4204      	tst	r4, r0
 80022a6:	d104      	bne.n	80022b2 <__aeabi_dsub+0x4ce>
 80022a8:	0021      	movs	r1, r4
 80022aa:	46da      	mov	sl, fp
 80022ac:	08d2      	lsrs	r2, r2, #3
 80022ae:	075e      	lsls	r6, r3, #29
 80022b0:	4316      	orrs	r6, r2
 80022b2:	00f3      	lsls	r3, r6, #3
 80022b4:	4699      	mov	r9, r3
 80022b6:	2401      	movs	r4, #1
 80022b8:	4653      	mov	r3, sl
 80022ba:	00c9      	lsls	r1, r1, #3
 80022bc:	0f72      	lsrs	r2, r6, #29
 80022be:	4311      	orrs	r1, r2
 80022c0:	401c      	ands	r4, r3
 80022c2:	4d6a      	ldr	r5, [pc, #424]	; (800246c <__aeabi_dsub+0x688>)
 80022c4:	e6ab      	b.n	800201e <__aeabi_dsub+0x23a>
 80022c6:	001d      	movs	r5, r3
 80022c8:	2200      	movs	r2, #0
 80022ca:	2700      	movs	r7, #0
 80022cc:	e6b4      	b.n	8002038 <__aeabi_dsub+0x254>
 80022ce:	2d00      	cmp	r5, #0
 80022d0:	d159      	bne.n	8002386 <__aeabi_dsub+0x5a2>
 80022d2:	000b      	movs	r3, r1
 80022d4:	4303      	orrs	r3, r0
 80022d6:	d100      	bne.n	80022da <__aeabi_dsub+0x4f6>
 80022d8:	e6d6      	b.n	8002088 <__aeabi_dsub+0x2a4>
 80022da:	1c73      	adds	r3, r6, #1
 80022dc:	d100      	bne.n	80022e0 <__aeabi_dsub+0x4fc>
 80022de:	e0b2      	b.n	8002446 <__aeabi_dsub+0x662>
 80022e0:	4b62      	ldr	r3, [pc, #392]	; (800246c <__aeabi_dsub+0x688>)
 80022e2:	429f      	cmp	r7, r3
 80022e4:	d01e      	beq.n	8002324 <__aeabi_dsub+0x540>
 80022e6:	43f3      	mvns	r3, r6
 80022e8:	2b38      	cmp	r3, #56	; 0x38
 80022ea:	dc6f      	bgt.n	80023cc <__aeabi_dsub+0x5e8>
 80022ec:	2b1f      	cmp	r3, #31
 80022ee:	dd00      	ble.n	80022f2 <__aeabi_dsub+0x50e>
 80022f0:	e097      	b.n	8002422 <__aeabi_dsub+0x63e>
 80022f2:	2520      	movs	r5, #32
 80022f4:	000e      	movs	r6, r1
 80022f6:	1aed      	subs	r5, r5, r3
 80022f8:	40ae      	lsls	r6, r5
 80022fa:	46b0      	mov	r8, r6
 80022fc:	0006      	movs	r6, r0
 80022fe:	46aa      	mov	sl, r5
 8002300:	40de      	lsrs	r6, r3
 8002302:	4645      	mov	r5, r8
 8002304:	4335      	orrs	r5, r6
 8002306:	002e      	movs	r6, r5
 8002308:	4655      	mov	r5, sl
 800230a:	40a8      	lsls	r0, r5
 800230c:	40d9      	lsrs	r1, r3
 800230e:	1e45      	subs	r5, r0, #1
 8002310:	41a8      	sbcs	r0, r5
 8002312:	448c      	add	ip, r1
 8002314:	4306      	orrs	r6, r0
 8002316:	18b6      	adds	r6, r6, r2
 8002318:	4296      	cmp	r6, r2
 800231a:	4192      	sbcs	r2, r2
 800231c:	4251      	negs	r1, r2
 800231e:	4461      	add	r1, ip
 8002320:	003d      	movs	r5, r7
 8002322:	e625      	b.n	8001f70 <__aeabi_dsub+0x18c>
 8002324:	003d      	movs	r5, r7
 8002326:	4661      	mov	r1, ip
 8002328:	4691      	mov	r9, r2
 800232a:	e678      	b.n	800201e <__aeabi_dsub+0x23a>
 800232c:	000b      	movs	r3, r1
 800232e:	4303      	orrs	r3, r0
 8002330:	2d00      	cmp	r5, #0
 8002332:	d000      	beq.n	8002336 <__aeabi_dsub+0x552>
 8002334:	e655      	b.n	8001fe2 <__aeabi_dsub+0x1fe>
 8002336:	2b00      	cmp	r3, #0
 8002338:	d0f5      	beq.n	8002326 <__aeabi_dsub+0x542>
 800233a:	4663      	mov	r3, ip
 800233c:	4313      	orrs	r3, r2
 800233e:	d100      	bne.n	8002342 <__aeabi_dsub+0x55e>
 8002340:	e66d      	b.n	800201e <__aeabi_dsub+0x23a>
 8002342:	1886      	adds	r6, r0, r2
 8002344:	4286      	cmp	r6, r0
 8002346:	4180      	sbcs	r0, r0
 8002348:	4461      	add	r1, ip
 800234a:	4240      	negs	r0, r0
 800234c:	1809      	adds	r1, r1, r0
 800234e:	2200      	movs	r2, #0
 8002350:	020b      	lsls	r3, r1, #8
 8002352:	d400      	bmi.n	8002356 <__aeabi_dsub+0x572>
 8002354:	e6d0      	b.n	80020f8 <__aeabi_dsub+0x314>
 8002356:	4b46      	ldr	r3, [pc, #280]	; (8002470 <__aeabi_dsub+0x68c>)
 8002358:	3501      	adds	r5, #1
 800235a:	4019      	ands	r1, r3
 800235c:	e5b2      	b.n	8001ec4 <__aeabi_dsub+0xe0>
 800235e:	46b1      	mov	r9, r6
 8002360:	e65d      	b.n	800201e <__aeabi_dsub+0x23a>
 8002362:	0033      	movs	r3, r6
 8002364:	4667      	mov	r7, ip
 8002366:	3b20      	subs	r3, #32
 8002368:	40df      	lsrs	r7, r3
 800236a:	003b      	movs	r3, r7
 800236c:	2e20      	cmp	r6, #32
 800236e:	d005      	beq.n	800237c <__aeabi_dsub+0x598>
 8002370:	2740      	movs	r7, #64	; 0x40
 8002372:	1bbf      	subs	r7, r7, r6
 8002374:	4666      	mov	r6, ip
 8002376:	40be      	lsls	r6, r7
 8002378:	4332      	orrs	r2, r6
 800237a:	4690      	mov	r8, r2
 800237c:	4646      	mov	r6, r8
 800237e:	1e72      	subs	r2, r6, #1
 8002380:	4196      	sbcs	r6, r2
 8002382:	4333      	orrs	r3, r6
 8002384:	e5ef      	b.n	8001f66 <__aeabi_dsub+0x182>
 8002386:	4b39      	ldr	r3, [pc, #228]	; (800246c <__aeabi_dsub+0x688>)
 8002388:	429f      	cmp	r7, r3
 800238a:	d0cb      	beq.n	8002324 <__aeabi_dsub+0x540>
 800238c:	2580      	movs	r5, #128	; 0x80
 800238e:	042d      	lsls	r5, r5, #16
 8002390:	4273      	negs	r3, r6
 8002392:	4329      	orrs	r1, r5
 8002394:	e7a8      	b.n	80022e8 <__aeabi_dsub+0x504>
 8002396:	4308      	orrs	r0, r1
 8002398:	1e41      	subs	r1, r0, #1
 800239a:	4188      	sbcs	r0, r1
 800239c:	e6a2      	b.n	80020e4 <__aeabi_dsub+0x300>
 800239e:	2f00      	cmp	r7, #0
 80023a0:	d100      	bne.n	80023a4 <__aeabi_dsub+0x5c0>
 80023a2:	e63c      	b.n	800201e <__aeabi_dsub+0x23a>
 80023a4:	4663      	mov	r3, ip
 80023a6:	1a86      	subs	r6, r0, r2
 80023a8:	1acf      	subs	r7, r1, r3
 80023aa:	42b0      	cmp	r0, r6
 80023ac:	419b      	sbcs	r3, r3
 80023ae:	425b      	negs	r3, r3
 80023b0:	1afb      	subs	r3, r7, r3
 80023b2:	4698      	mov	r8, r3
 80023b4:	021b      	lsls	r3, r3, #8
 80023b6:	d54e      	bpl.n	8002456 <__aeabi_dsub+0x672>
 80023b8:	1a16      	subs	r6, r2, r0
 80023ba:	4663      	mov	r3, ip
 80023bc:	42b2      	cmp	r2, r6
 80023be:	4192      	sbcs	r2, r2
 80023c0:	1a59      	subs	r1, r3, r1
 80023c2:	4252      	negs	r2, r2
 80023c4:	1a89      	subs	r1, r1, r2
 80023c6:	465c      	mov	r4, fp
 80023c8:	2200      	movs	r2, #0
 80023ca:	e57b      	b.n	8001ec4 <__aeabi_dsub+0xe0>
 80023cc:	4301      	orrs	r1, r0
 80023ce:	000e      	movs	r6, r1
 80023d0:	1e71      	subs	r1, r6, #1
 80023d2:	418e      	sbcs	r6, r1
 80023d4:	e79f      	b.n	8002316 <__aeabi_dsub+0x532>
 80023d6:	001d      	movs	r5, r3
 80023d8:	000e      	movs	r6, r1
 80023da:	3d20      	subs	r5, #32
 80023dc:	40ee      	lsrs	r6, r5
 80023de:	46b0      	mov	r8, r6
 80023e0:	2b20      	cmp	r3, #32
 80023e2:	d004      	beq.n	80023ee <__aeabi_dsub+0x60a>
 80023e4:	2540      	movs	r5, #64	; 0x40
 80023e6:	1aeb      	subs	r3, r5, r3
 80023e8:	4099      	lsls	r1, r3
 80023ea:	4308      	orrs	r0, r1
 80023ec:	4681      	mov	r9, r0
 80023ee:	4648      	mov	r0, r9
 80023f0:	4643      	mov	r3, r8
 80023f2:	1e41      	subs	r1, r0, #1
 80023f4:	4188      	sbcs	r0, r1
 80023f6:	4318      	orrs	r0, r3
 80023f8:	e674      	b.n	80020e4 <__aeabi_dsub+0x300>
 80023fa:	2200      	movs	r2, #0
 80023fc:	2400      	movs	r4, #0
 80023fe:	e617      	b.n	8002030 <__aeabi_dsub+0x24c>
 8002400:	1a16      	subs	r6, r2, r0
 8002402:	4663      	mov	r3, ip
 8002404:	42b2      	cmp	r2, r6
 8002406:	4192      	sbcs	r2, r2
 8002408:	1a59      	subs	r1, r3, r1
 800240a:	4252      	negs	r2, r2
 800240c:	1a89      	subs	r1, r1, r2
 800240e:	003d      	movs	r5, r7
 8002410:	e525      	b.n	8001e5e <__aeabi_dsub+0x7a>
 8002412:	4661      	mov	r1, ip
 8002414:	4691      	mov	r9, r2
 8002416:	4d15      	ldr	r5, [pc, #84]	; (800246c <__aeabi_dsub+0x688>)
 8002418:	e601      	b.n	800201e <__aeabi_dsub+0x23a>
 800241a:	2280      	movs	r2, #128	; 0x80
 800241c:	2400      	movs	r4, #0
 800241e:	0312      	lsls	r2, r2, #12
 8002420:	e679      	b.n	8002116 <__aeabi_dsub+0x332>
 8002422:	001d      	movs	r5, r3
 8002424:	000e      	movs	r6, r1
 8002426:	3d20      	subs	r5, #32
 8002428:	40ee      	lsrs	r6, r5
 800242a:	46b0      	mov	r8, r6
 800242c:	2b20      	cmp	r3, #32
 800242e:	d004      	beq.n	800243a <__aeabi_dsub+0x656>
 8002430:	2540      	movs	r5, #64	; 0x40
 8002432:	1aeb      	subs	r3, r5, r3
 8002434:	4099      	lsls	r1, r3
 8002436:	4308      	orrs	r0, r1
 8002438:	4681      	mov	r9, r0
 800243a:	464e      	mov	r6, r9
 800243c:	4643      	mov	r3, r8
 800243e:	1e71      	subs	r1, r6, #1
 8002440:	418e      	sbcs	r6, r1
 8002442:	431e      	orrs	r6, r3
 8002444:	e767      	b.n	8002316 <__aeabi_dsub+0x532>
 8002446:	1886      	adds	r6, r0, r2
 8002448:	4296      	cmp	r6, r2
 800244a:	419b      	sbcs	r3, r3
 800244c:	4461      	add	r1, ip
 800244e:	425b      	negs	r3, r3
 8002450:	18c9      	adds	r1, r1, r3
 8002452:	003d      	movs	r5, r7
 8002454:	e58c      	b.n	8001f70 <__aeabi_dsub+0x18c>
 8002456:	4647      	mov	r7, r8
 8002458:	4337      	orrs	r7, r6
 800245a:	d0ce      	beq.n	80023fa <__aeabi_dsub+0x616>
 800245c:	2207      	movs	r2, #7
 800245e:	4641      	mov	r1, r8
 8002460:	4032      	ands	r2, r6
 8002462:	e649      	b.n	80020f8 <__aeabi_dsub+0x314>
 8002464:	2700      	movs	r7, #0
 8002466:	003a      	movs	r2, r7
 8002468:	e5e6      	b.n	8002038 <__aeabi_dsub+0x254>
 800246a:	46c0      	nop			; (mov r8, r8)
 800246c:	000007ff 	.word	0x000007ff
 8002470:	ff7fffff 	.word	0xff7fffff

08002474 <__aeabi_d2iz>:
 8002474:	b530      	push	{r4, r5, lr}
 8002476:	4d14      	ldr	r5, [pc, #80]	; (80024c8 <__aeabi_d2iz+0x54>)
 8002478:	030a      	lsls	r2, r1, #12
 800247a:	004b      	lsls	r3, r1, #1
 800247c:	0b12      	lsrs	r2, r2, #12
 800247e:	0d5b      	lsrs	r3, r3, #21
 8002480:	0fc9      	lsrs	r1, r1, #31
 8002482:	2400      	movs	r4, #0
 8002484:	42ab      	cmp	r3, r5
 8002486:	dd11      	ble.n	80024ac <__aeabi_d2iz+0x38>
 8002488:	4c10      	ldr	r4, [pc, #64]	; (80024cc <__aeabi_d2iz+0x58>)
 800248a:	42a3      	cmp	r3, r4
 800248c:	dc10      	bgt.n	80024b0 <__aeabi_d2iz+0x3c>
 800248e:	2480      	movs	r4, #128	; 0x80
 8002490:	0364      	lsls	r4, r4, #13
 8002492:	4322      	orrs	r2, r4
 8002494:	4c0e      	ldr	r4, [pc, #56]	; (80024d0 <__aeabi_d2iz+0x5c>)
 8002496:	1ae4      	subs	r4, r4, r3
 8002498:	2c1f      	cmp	r4, #31
 800249a:	dd0c      	ble.n	80024b6 <__aeabi_d2iz+0x42>
 800249c:	480d      	ldr	r0, [pc, #52]	; (80024d4 <__aeabi_d2iz+0x60>)
 800249e:	1ac3      	subs	r3, r0, r3
 80024a0:	40da      	lsrs	r2, r3
 80024a2:	0013      	movs	r3, r2
 80024a4:	425c      	negs	r4, r3
 80024a6:	2900      	cmp	r1, #0
 80024a8:	d100      	bne.n	80024ac <__aeabi_d2iz+0x38>
 80024aa:	001c      	movs	r4, r3
 80024ac:	0020      	movs	r0, r4
 80024ae:	bd30      	pop	{r4, r5, pc}
 80024b0:	4b09      	ldr	r3, [pc, #36]	; (80024d8 <__aeabi_d2iz+0x64>)
 80024b2:	18cc      	adds	r4, r1, r3
 80024b4:	e7fa      	b.n	80024ac <__aeabi_d2iz+0x38>
 80024b6:	4d09      	ldr	r5, [pc, #36]	; (80024dc <__aeabi_d2iz+0x68>)
 80024b8:	40e0      	lsrs	r0, r4
 80024ba:	46ac      	mov	ip, r5
 80024bc:	4463      	add	r3, ip
 80024be:	409a      	lsls	r2, r3
 80024c0:	0013      	movs	r3, r2
 80024c2:	4303      	orrs	r3, r0
 80024c4:	e7ee      	b.n	80024a4 <__aeabi_d2iz+0x30>
 80024c6:	46c0      	nop			; (mov r8, r8)
 80024c8:	000003fe 	.word	0x000003fe
 80024cc:	0000041d 	.word	0x0000041d
 80024d0:	00000433 	.word	0x00000433
 80024d4:	00000413 	.word	0x00000413
 80024d8:	7fffffff 	.word	0x7fffffff
 80024dc:	fffffbed 	.word	0xfffffbed

080024e0 <__aeabi_i2d>:
 80024e0:	b570      	push	{r4, r5, r6, lr}
 80024e2:	2800      	cmp	r0, #0
 80024e4:	d02d      	beq.n	8002542 <__aeabi_i2d+0x62>
 80024e6:	17c3      	asrs	r3, r0, #31
 80024e8:	18c5      	adds	r5, r0, r3
 80024ea:	405d      	eors	r5, r3
 80024ec:	0fc4      	lsrs	r4, r0, #31
 80024ee:	0028      	movs	r0, r5
 80024f0:	f000 f8b4 	bl	800265c <__clzsi2>
 80024f4:	4b15      	ldr	r3, [pc, #84]	; (800254c <__aeabi_i2d+0x6c>)
 80024f6:	1a1b      	subs	r3, r3, r0
 80024f8:	055b      	lsls	r3, r3, #21
 80024fa:	0d5b      	lsrs	r3, r3, #21
 80024fc:	280a      	cmp	r0, #10
 80024fe:	dd15      	ble.n	800252c <__aeabi_i2d+0x4c>
 8002500:	380b      	subs	r0, #11
 8002502:	4085      	lsls	r5, r0
 8002504:	2200      	movs	r2, #0
 8002506:	032d      	lsls	r5, r5, #12
 8002508:	0b2d      	lsrs	r5, r5, #12
 800250a:	2100      	movs	r1, #0
 800250c:	0010      	movs	r0, r2
 800250e:	032d      	lsls	r5, r5, #12
 8002510:	0d0a      	lsrs	r2, r1, #20
 8002512:	0b2d      	lsrs	r5, r5, #12
 8002514:	0512      	lsls	r2, r2, #20
 8002516:	432a      	orrs	r2, r5
 8002518:	4d0d      	ldr	r5, [pc, #52]	; (8002550 <__aeabi_i2d+0x70>)
 800251a:	051b      	lsls	r3, r3, #20
 800251c:	402a      	ands	r2, r5
 800251e:	4313      	orrs	r3, r2
 8002520:	005b      	lsls	r3, r3, #1
 8002522:	07e4      	lsls	r4, r4, #31
 8002524:	085b      	lsrs	r3, r3, #1
 8002526:	4323      	orrs	r3, r4
 8002528:	0019      	movs	r1, r3
 800252a:	bd70      	pop	{r4, r5, r6, pc}
 800252c:	0002      	movs	r2, r0
 800252e:	0029      	movs	r1, r5
 8002530:	3215      	adds	r2, #21
 8002532:	4091      	lsls	r1, r2
 8002534:	000a      	movs	r2, r1
 8002536:	210b      	movs	r1, #11
 8002538:	1a08      	subs	r0, r1, r0
 800253a:	40c5      	lsrs	r5, r0
 800253c:	032d      	lsls	r5, r5, #12
 800253e:	0b2d      	lsrs	r5, r5, #12
 8002540:	e7e3      	b.n	800250a <__aeabi_i2d+0x2a>
 8002542:	2400      	movs	r4, #0
 8002544:	2300      	movs	r3, #0
 8002546:	2500      	movs	r5, #0
 8002548:	2200      	movs	r2, #0
 800254a:	e7de      	b.n	800250a <__aeabi_i2d+0x2a>
 800254c:	0000041e 	.word	0x0000041e
 8002550:	800fffff 	.word	0x800fffff

08002554 <__aeabi_ui2d>:
 8002554:	b510      	push	{r4, lr}
 8002556:	1e04      	subs	r4, r0, #0
 8002558:	d025      	beq.n	80025a6 <__aeabi_ui2d+0x52>
 800255a:	f000 f87f 	bl	800265c <__clzsi2>
 800255e:	4b14      	ldr	r3, [pc, #80]	; (80025b0 <__aeabi_ui2d+0x5c>)
 8002560:	1a1b      	subs	r3, r3, r0
 8002562:	055b      	lsls	r3, r3, #21
 8002564:	0d5b      	lsrs	r3, r3, #21
 8002566:	280a      	cmp	r0, #10
 8002568:	dd12      	ble.n	8002590 <__aeabi_ui2d+0x3c>
 800256a:	380b      	subs	r0, #11
 800256c:	4084      	lsls	r4, r0
 800256e:	2200      	movs	r2, #0
 8002570:	0324      	lsls	r4, r4, #12
 8002572:	0b24      	lsrs	r4, r4, #12
 8002574:	2100      	movs	r1, #0
 8002576:	0010      	movs	r0, r2
 8002578:	0324      	lsls	r4, r4, #12
 800257a:	0d0a      	lsrs	r2, r1, #20
 800257c:	0b24      	lsrs	r4, r4, #12
 800257e:	0512      	lsls	r2, r2, #20
 8002580:	4322      	orrs	r2, r4
 8002582:	4c0c      	ldr	r4, [pc, #48]	; (80025b4 <__aeabi_ui2d+0x60>)
 8002584:	051b      	lsls	r3, r3, #20
 8002586:	4022      	ands	r2, r4
 8002588:	4313      	orrs	r3, r2
 800258a:	005b      	lsls	r3, r3, #1
 800258c:	0859      	lsrs	r1, r3, #1
 800258e:	bd10      	pop	{r4, pc}
 8002590:	0002      	movs	r2, r0
 8002592:	0021      	movs	r1, r4
 8002594:	3215      	adds	r2, #21
 8002596:	4091      	lsls	r1, r2
 8002598:	000a      	movs	r2, r1
 800259a:	210b      	movs	r1, #11
 800259c:	1a08      	subs	r0, r1, r0
 800259e:	40c4      	lsrs	r4, r0
 80025a0:	0324      	lsls	r4, r4, #12
 80025a2:	0b24      	lsrs	r4, r4, #12
 80025a4:	e7e6      	b.n	8002574 <__aeabi_ui2d+0x20>
 80025a6:	2300      	movs	r3, #0
 80025a8:	2400      	movs	r4, #0
 80025aa:	2200      	movs	r2, #0
 80025ac:	e7e2      	b.n	8002574 <__aeabi_ui2d+0x20>
 80025ae:	46c0      	nop			; (mov r8, r8)
 80025b0:	0000041e 	.word	0x0000041e
 80025b4:	800fffff 	.word	0x800fffff

080025b8 <__aeabi_f2d>:
 80025b8:	0041      	lsls	r1, r0, #1
 80025ba:	0e09      	lsrs	r1, r1, #24
 80025bc:	1c4b      	adds	r3, r1, #1
 80025be:	b570      	push	{r4, r5, r6, lr}
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	0246      	lsls	r6, r0, #9
 80025c4:	0a75      	lsrs	r5, r6, #9
 80025c6:	0fc4      	lsrs	r4, r0, #31
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	dd14      	ble.n	80025f6 <__aeabi_f2d+0x3e>
 80025cc:	23e0      	movs	r3, #224	; 0xe0
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	076d      	lsls	r5, r5, #29
 80025d2:	0b36      	lsrs	r6, r6, #12
 80025d4:	18cb      	adds	r3, r1, r3
 80025d6:	2100      	movs	r1, #0
 80025d8:	0d0a      	lsrs	r2, r1, #20
 80025da:	0028      	movs	r0, r5
 80025dc:	0512      	lsls	r2, r2, #20
 80025de:	4d1c      	ldr	r5, [pc, #112]	; (8002650 <__aeabi_f2d+0x98>)
 80025e0:	4332      	orrs	r2, r6
 80025e2:	055b      	lsls	r3, r3, #21
 80025e4:	402a      	ands	r2, r5
 80025e6:	085b      	lsrs	r3, r3, #1
 80025e8:	4313      	orrs	r3, r2
 80025ea:	005b      	lsls	r3, r3, #1
 80025ec:	07e4      	lsls	r4, r4, #31
 80025ee:	085b      	lsrs	r3, r3, #1
 80025f0:	4323      	orrs	r3, r4
 80025f2:	0019      	movs	r1, r3
 80025f4:	bd70      	pop	{r4, r5, r6, pc}
 80025f6:	2900      	cmp	r1, #0
 80025f8:	d114      	bne.n	8002624 <__aeabi_f2d+0x6c>
 80025fa:	2d00      	cmp	r5, #0
 80025fc:	d01e      	beq.n	800263c <__aeabi_f2d+0x84>
 80025fe:	0028      	movs	r0, r5
 8002600:	f000 f82c 	bl	800265c <__clzsi2>
 8002604:	280a      	cmp	r0, #10
 8002606:	dc1c      	bgt.n	8002642 <__aeabi_f2d+0x8a>
 8002608:	230b      	movs	r3, #11
 800260a:	002a      	movs	r2, r5
 800260c:	1a1b      	subs	r3, r3, r0
 800260e:	40da      	lsrs	r2, r3
 8002610:	0003      	movs	r3, r0
 8002612:	3315      	adds	r3, #21
 8002614:	409d      	lsls	r5, r3
 8002616:	4b0f      	ldr	r3, [pc, #60]	; (8002654 <__aeabi_f2d+0x9c>)
 8002618:	0312      	lsls	r2, r2, #12
 800261a:	1a1b      	subs	r3, r3, r0
 800261c:	055b      	lsls	r3, r3, #21
 800261e:	0b16      	lsrs	r6, r2, #12
 8002620:	0d5b      	lsrs	r3, r3, #21
 8002622:	e7d8      	b.n	80025d6 <__aeabi_f2d+0x1e>
 8002624:	2d00      	cmp	r5, #0
 8002626:	d006      	beq.n	8002636 <__aeabi_f2d+0x7e>
 8002628:	0b32      	lsrs	r2, r6, #12
 800262a:	2680      	movs	r6, #128	; 0x80
 800262c:	0336      	lsls	r6, r6, #12
 800262e:	076d      	lsls	r5, r5, #29
 8002630:	4316      	orrs	r6, r2
 8002632:	4b09      	ldr	r3, [pc, #36]	; (8002658 <__aeabi_f2d+0xa0>)
 8002634:	e7cf      	b.n	80025d6 <__aeabi_f2d+0x1e>
 8002636:	4b08      	ldr	r3, [pc, #32]	; (8002658 <__aeabi_f2d+0xa0>)
 8002638:	2600      	movs	r6, #0
 800263a:	e7cc      	b.n	80025d6 <__aeabi_f2d+0x1e>
 800263c:	2300      	movs	r3, #0
 800263e:	2600      	movs	r6, #0
 8002640:	e7c9      	b.n	80025d6 <__aeabi_f2d+0x1e>
 8002642:	0003      	movs	r3, r0
 8002644:	002a      	movs	r2, r5
 8002646:	3b0b      	subs	r3, #11
 8002648:	409a      	lsls	r2, r3
 800264a:	2500      	movs	r5, #0
 800264c:	e7e3      	b.n	8002616 <__aeabi_f2d+0x5e>
 800264e:	46c0      	nop			; (mov r8, r8)
 8002650:	800fffff 	.word	0x800fffff
 8002654:	00000389 	.word	0x00000389
 8002658:	000007ff 	.word	0x000007ff

0800265c <__clzsi2>:
 800265c:	211c      	movs	r1, #28
 800265e:	2301      	movs	r3, #1
 8002660:	041b      	lsls	r3, r3, #16
 8002662:	4298      	cmp	r0, r3
 8002664:	d301      	bcc.n	800266a <__clzsi2+0xe>
 8002666:	0c00      	lsrs	r0, r0, #16
 8002668:	3910      	subs	r1, #16
 800266a:	0a1b      	lsrs	r3, r3, #8
 800266c:	4298      	cmp	r0, r3
 800266e:	d301      	bcc.n	8002674 <__clzsi2+0x18>
 8002670:	0a00      	lsrs	r0, r0, #8
 8002672:	3908      	subs	r1, #8
 8002674:	091b      	lsrs	r3, r3, #4
 8002676:	4298      	cmp	r0, r3
 8002678:	d301      	bcc.n	800267e <__clzsi2+0x22>
 800267a:	0900      	lsrs	r0, r0, #4
 800267c:	3904      	subs	r1, #4
 800267e:	a202      	add	r2, pc, #8	; (adr r2, 8002688 <__clzsi2+0x2c>)
 8002680:	5c10      	ldrb	r0, [r2, r0]
 8002682:	1840      	adds	r0, r0, r1
 8002684:	4770      	bx	lr
 8002686:	46c0      	nop			; (mov r8, r8)
 8002688:	02020304 	.word	0x02020304
 800268c:	01010101 	.word	0x01010101
	...

08002698 <__clzdi2>:
 8002698:	b510      	push	{r4, lr}
 800269a:	2900      	cmp	r1, #0
 800269c:	d103      	bne.n	80026a6 <__clzdi2+0xe>
 800269e:	f7ff ffdd 	bl	800265c <__clzsi2>
 80026a2:	3020      	adds	r0, #32
 80026a4:	e002      	b.n	80026ac <__clzdi2+0x14>
 80026a6:	1c08      	adds	r0, r1, #0
 80026a8:	f7ff ffd8 	bl	800265c <__clzsi2>
 80026ac:	bd10      	pop	{r4, pc}
 80026ae:	46c0      	nop			; (mov r8, r8)

080026b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80026b0:	480d      	ldr	r0, [pc, #52]	; (80026e8 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80026b2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 80026b4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80026b6:	e003      	b.n	80026c0 <LoopCopyDataInit>

080026b8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80026b8:	4b0c      	ldr	r3, [pc, #48]	; (80026ec <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 80026ba:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80026bc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80026be:	3104      	adds	r1, #4

080026c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 80026c0:	480b      	ldr	r0, [pc, #44]	; (80026f0 <LoopForever+0xa>)
  ldr  r3, =_edata
 80026c2:	4b0c      	ldr	r3, [pc, #48]	; (80026f4 <LoopForever+0xe>)
  adds  r2, r0, r1
 80026c4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80026c6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80026c8:	d3f6      	bcc.n	80026b8 <CopyDataInit>
  ldr  r2, =_sbss
 80026ca:	4a0b      	ldr	r2, [pc, #44]	; (80026f8 <LoopForever+0x12>)
  b  LoopFillZerobss
 80026cc:	e002      	b.n	80026d4 <LoopFillZerobss>

080026ce <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 80026ce:	2300      	movs	r3, #0
  str  r3, [r2]
 80026d0:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026d2:	3204      	adds	r2, #4

080026d4 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 80026d4:	4b09      	ldr	r3, [pc, #36]	; (80026fc <LoopForever+0x16>)
  cmp  r2, r3
 80026d6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80026d8:	d3f9      	bcc.n	80026ce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80026da:	f001 fcf5 	bl	80040c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80026de:	f00b fc25 	bl	800df2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026e2:	f00a ffcb 	bl	800d67c <main>

080026e6 <LoopForever>:

LoopForever:
    b LoopForever
 80026e6:	e7fe      	b.n	80026e6 <LoopForever>
   ldr   r0, =_estack
 80026e8:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 80026ec:	0800f77c 	.word	0x0800f77c
  ldr  r0, =_sdata
 80026f0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80026f4:	20000250 	.word	0x20000250
  ldr  r2, =_sbss
 80026f8:	20000250 	.word	0x20000250
  ldr  r3, = _ebss
 80026fc:	20001734 	.word	0x20001734

08002700 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002700:	e7fe      	b.n	8002700 <ADC1_COMP_IRQHandler>
	...

08002704 <BSP_LED_Init>:
  *   This parameter can be one of following parameters:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8002704:	b500      	push	{lr}
 8002706:	0002      	movs	r2, r0
 8002708:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE( Led );
 800270a:	2803      	cmp	r0, #3
 800270c:	d80c      	bhi.n	8002728 <BSP_LED_Init+0x24>
 800270e:	4b1b      	ldr	r3, [pc, #108]	; (800277c <BSP_LED_Init+0x78>)
 8002710:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002712:	f7fd fcf9 	bl	8000108 <__gnu_thumb1_case_uqi>
 8002716:	1b02      	.short	0x1b02
 8002718:	2b23      	.short	0x2b23
 800271a:	2002      	movs	r0, #2
 800271c:	4301      	orrs	r1, r0
 800271e:	62d9      	str	r1, [r3, #44]	; 0x2c
 8002720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002722:	4003      	ands	r3, r0
 8002724:	9301      	str	r3, [sp, #4]
 8002726:	9b01      	ldr	r3, [sp, #4]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = LED_PIN[Led];
 8002728:	4b15      	ldr	r3, [pc, #84]	; (8002780 <BSP_LED_Init+0x7c>)
 800272a:	0051      	lsls	r1, r2, #1
 800272c:	5acb      	ldrh	r3, [r1, r3]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 800272e:	0092      	lsls	r2, r2, #2
  GPIO_InitStruct.Pin = LED_PIN[Led];
 8002730:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002732:	2301      	movs	r3, #1
 8002734:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002736:	2300      	movs	r3, #0
 8002738:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800273a:	3303      	adds	r3, #3
 800273c:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 800273e:	4b11      	ldr	r3, [pc, #68]	; (8002784 <BSP_LED_Init+0x80>)
 8002740:	a905      	add	r1, sp, #20
 8002742:	58d0      	ldr	r0, [r2, r3]
 8002744:	f002 f8ac 	bl	80048a0 <HAL_GPIO_Init>
}
 8002748:	b00b      	add	sp, #44	; 0x2c
 800274a:	bd00      	pop	{pc}
  LEDx_GPIO_CLK_ENABLE( Led );
 800274c:	2001      	movs	r0, #1
 800274e:	4301      	orrs	r1, r0
 8002750:	62d9      	str	r1, [r3, #44]	; 0x2c
 8002752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002754:	4003      	ands	r3, r0
 8002756:	9302      	str	r3, [sp, #8]
 8002758:	9b02      	ldr	r3, [sp, #8]
 800275a:	e7e5      	b.n	8002728 <BSP_LED_Init+0x24>
 800275c:	2002      	movs	r0, #2
 800275e:	4301      	orrs	r1, r0
 8002760:	62d9      	str	r1, [r3, #44]	; 0x2c
 8002762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002764:	4003      	ands	r3, r0
 8002766:	9303      	str	r3, [sp, #12]
 8002768:	9b03      	ldr	r3, [sp, #12]
 800276a:	e7dd      	b.n	8002728 <BSP_LED_Init+0x24>
 800276c:	2002      	movs	r0, #2
 800276e:	4301      	orrs	r1, r0
 8002770:	62d9      	str	r1, [r3, #44]	; 0x2c
 8002772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002774:	4003      	ands	r3, r0
 8002776:	9304      	str	r3, [sp, #16]
 8002778:	9b04      	ldr	r3, [sp, #16]
 800277a:	e7d5      	b.n	8002728 <BSP_LED_Init+0x24>
 800277c:	40021000 	.word	0x40021000
 8002780:	0800ea98 	.word	0x0800ea98
 8002784:	20000000 	.word	0x20000000

08002788 <BSP_LED_On>:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET); 
 8002788:	4b05      	ldr	r3, [pc, #20]	; (80027a0 <BSP_LED_On+0x18>)
{
 800278a:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET); 
 800278c:	0042      	lsls	r2, r0, #1
 800278e:	5ad1      	ldrh	r1, [r2, r3]
 8002790:	4b04      	ldr	r3, [pc, #16]	; (80027a4 <BSP_LED_On+0x1c>)
 8002792:	0080      	lsls	r0, r0, #2
 8002794:	2201      	movs	r2, #1
 8002796:	58c0      	ldr	r0, [r0, r3]
 8002798:	f002 f942 	bl	8004a20 <HAL_GPIO_WritePin>
}
 800279c:	bd10      	pop	{r4, pc}
 800279e:	46c0      	nop			; (mov r8, r8)
 80027a0:	0800ea98 	.word	0x0800ea98
 80027a4:	20000000 	.word	0x20000000

080027a8 <BSP_LED_Off>:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET); 
 80027a8:	4b05      	ldr	r3, [pc, #20]	; (80027c0 <BSP_LED_Off+0x18>)
{
 80027aa:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET); 
 80027ac:	0042      	lsls	r2, r0, #1
 80027ae:	5ad1      	ldrh	r1, [r2, r3]
 80027b0:	4b04      	ldr	r3, [pc, #16]	; (80027c4 <BSP_LED_Off+0x1c>)
 80027b2:	0080      	lsls	r0, r0, #2
 80027b4:	2200      	movs	r2, #0
 80027b6:	58c0      	ldr	r0, [r0, r3]
 80027b8:	f002 f932 	bl	8004a20 <HAL_GPIO_WritePin>
}
 80027bc:	bd10      	pop	{r4, pc}
 80027be:	46c0      	nop			; (mov r8, r8)
 80027c0:	0800ea98 	.word	0x0800ea98
 80027c4:	20000000 	.word	0x20000000

080027c8 <SX1276GetWakeTime>:
};

uint32_t SX1276GetWakeTime( void )
{
  return  BOARD_WAKEUP_TIME;
}
 80027c8:	2005      	movs	r0, #5
 80027ca:	4770      	bx	lr

080027cc <SX1276CheckRfFrequency>:

bool SX1276CheckRfFrequency( uint32_t frequency )
{
    // Implement check. Currently all frequencies are supported
    return true;
}
 80027cc:	2001      	movs	r0, #1
 80027ce:	4770      	bx	lr

080027d0 <SX1276SetRfTxPower>:
{
 80027d0:	b570      	push	{r4, r5, r6, lr}
 80027d2:	0005      	movs	r5, r0
    paConfig = SX1276Read( REG_PACONFIG );
 80027d4:	2009      	movs	r0, #9
 80027d6:	f000 fa09 	bl	8002bec <SX1276Read>
 80027da:	0006      	movs	r6, r0
    paDac = SX1276Read( REG_PADAC );
 80027dc:	204d      	movs	r0, #77	; 0x4d
 80027de:	f000 fa05 	bl	8002bec <SX1276Read>
    paConfig = ( paConfig & RF_PACONFIG_PASELECT_MASK ) | SX1276GetPaSelect( power );
 80027e2:	217f      	movs	r1, #127	; 0x7f
    paDac = SX1276Read( REG_PADAC );
 80027e4:	0004      	movs	r4, r0
    paConfig = ( paConfig & RF_PACONFIG_PASELECT_MASK ) | SX1276GetPaSelect( power );
 80027e6:	4031      	ands	r1, r6
        return RF_PACONFIG_PASELECT_RFO;
 80027e8:	2600      	movs	r6, #0
    if (power >14)
 80027ea:	2d0e      	cmp	r5, #14
 80027ec:	dd00      	ble.n	80027f0 <SX1276SetRfTxPower+0x20>
        return RF_PACONFIG_PASELECT_PABOOST;
 80027ee:	3680      	adds	r6, #128	; 0x80
    paConfig = ( paConfig & RF_PACONFIG_PASELECT_MASK ) | SX1276GetPaSelect( power );
 80027f0:	4331      	orrs	r1, r6
 80027f2:	b249      	sxtb	r1, r1
    if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
 80027f4:	2900      	cmp	r1, #0
 80027f6:	da29      	bge.n	800284c <SX1276SetRfTxPower+0x7c>
 80027f8:	2407      	movs	r4, #7
        if( power > 17 )
 80027fa:	2d11      	cmp	r5, #17
 80027fc:	dd19      	ble.n	8002832 <SX1276SetRfTxPower+0x62>
 80027fe:	230f      	movs	r3, #15
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_OFF;
 8002800:	4304      	orrs	r4, r0
 8002802:	b2e4      	uxtb	r4, r4
 8002804:	4399      	bics	r1, r3
        if( ( paDac & RF_PADAC_20DBM_ON ) == RF_PADAC_20DBM_ON )
 8002806:	43e3      	mvns	r3, r4
 8002808:	075b      	lsls	r3, r3, #29
 800280a:	d115      	bne.n	8002838 <SX1276SetRfTxPower+0x68>
 800280c:	1c2b      	adds	r3, r5, #0
 800280e:	2d14      	cmp	r5, #20
 8002810:	dd00      	ble.n	8002814 <SX1276SetRfTxPower+0x44>
 8002812:	2314      	movs	r3, #20
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 5 ) & 0x0F );
 8002814:	b25a      	sxtb	r2, r3
 8002816:	2a05      	cmp	r2, #5
 8002818:	da00      	bge.n	800281c <SX1276SetRfTxPower+0x4c>
 800281a:	2305      	movs	r3, #5
 800281c:	3b05      	subs	r3, #5
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 7 << 4 ) | ( power );
 800281e:	4319      	orrs	r1, r3
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 0 << 4 ) | ( power + 4 );
 8002820:	b2c9      	uxtb	r1, r1
    SX1276Write( REG_PACONFIG, paConfig );
 8002822:	2009      	movs	r0, #9
 8002824:	f000 f98f 	bl	8002b46 <SX1276Write>
    SX1276Write( REG_PADAC, paDac );
 8002828:	0021      	movs	r1, r4
 800282a:	204d      	movs	r0, #77	; 0x4d
 800282c:	f000 f98b 	bl	8002b46 <SX1276Write>
}
 8002830:	bd70      	pop	{r4, r5, r6, pc}
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_OFF;
 8002832:	43a0      	bics	r0, r4
 8002834:	2404      	movs	r4, #4
 8002836:	e7e2      	b.n	80027fe <SX1276SetRfTxPower+0x2e>
 8002838:	1c2b      	adds	r3, r5, #0
 800283a:	2d11      	cmp	r5, #17
 800283c:	dd00      	ble.n	8002840 <SX1276SetRfTxPower+0x70>
 800283e:	2311      	movs	r3, #17
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 2 ) & 0x0F );
 8002840:	b25a      	sxtb	r2, r3
 8002842:	2a02      	cmp	r2, #2
 8002844:	da00      	bge.n	8002848 <SX1276SetRfTxPower+0x78>
 8002846:	2302      	movs	r3, #2
 8002848:	3b02      	subs	r3, #2
 800284a:	e7e8      	b.n	800281e <SX1276SetRfTxPower+0x4e>
        if( power > 0 )
 800284c:	2d00      	cmp	r5, #0
 800284e:	dd05      	ble.n	800285c <SX1276SetRfTxPower+0x8c>
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 7 << 4 ) | ( power );
 8002850:	1c2b      	adds	r3, r5, #0
 8002852:	2d0f      	cmp	r5, #15
 8002854:	dd00      	ble.n	8002858 <SX1276SetRfTxPower+0x88>
 8002856:	230f      	movs	r3, #15
 8002858:	2170      	movs	r1, #112	; 0x70
 800285a:	e7e0      	b.n	800281e <SX1276SetRfTxPower+0x4e>
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 0 << 4 ) | ( power + 4 );
 800285c:	1c29      	adds	r1, r5, #0
 800285e:	1d2b      	adds	r3, r5, #4
 8002860:	da01      	bge.n	8002866 <SX1276SetRfTxPower+0x96>
 8002862:	4b02      	ldr	r3, [pc, #8]	; (800286c <SX1276SetRfTxPower+0x9c>)
 8002864:	7819      	ldrb	r1, [r3, #0]
 8002866:	3104      	adds	r1, #4
 8002868:	e7da      	b.n	8002820 <SX1276SetRfTxPower+0x50>
 800286a:	46c0      	nop			; (mov r8, r8)
 800286c:	0800f05c 	.word	0x0800f05c

08002870 <SX1276IoInit>:
{
 8002870:	b530      	push	{r4, r5, lr}
 8002872:	b087      	sub	sp, #28
  GPIO_InitTypeDef initStruct={0};
 8002874:	2214      	movs	r2, #20
 8002876:	2100      	movs	r1, #0
 8002878:	a801      	add	r0, sp, #4
 800287a:	f00b fb84 	bl	800df86 <memset>
  SX1276BoardInit( &BoardCallbacks );
 800287e:	4816      	ldr	r0, [pc, #88]	; (80028d8 <SX1276IoInit+0x68>)
 8002880:	f000 f90e 	bl	8002aa0 <SX1276BoardInit>
  initStruct.Mode =GPIO_MODE_IT_RISING;
 8002884:	4b15      	ldr	r3, [pc, #84]	; (80028dc <SX1276IoInit+0x6c>)
  initStruct.Pull = GPIO_PULLDOWN;
 8002886:	2502      	movs	r5, #2
  initStruct.Mode =GPIO_MODE_IT_RISING;
 8002888:	9302      	str	r3, [sp, #8]
  initStruct.Speed = GPIO_SPEED_HIGH;
 800288a:	2303      	movs	r3, #3
  HW_GPIO_Init( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, &initStruct );
 800288c:	4c14      	ldr	r4, [pc, #80]	; (80028e0 <SX1276IoInit+0x70>)
 800288e:	aa01      	add	r2, sp, #4
 8002890:	0020      	movs	r0, r4
 8002892:	2110      	movs	r1, #16
  initStruct.Speed = GPIO_SPEED_HIGH;
 8002894:	9304      	str	r3, [sp, #16]
  initStruct.Pull = GPIO_PULLDOWN;
 8002896:	9503      	str	r5, [sp, #12]
  HW_GPIO_Init( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, &initStruct );
 8002898:	f00a fae0 	bl	800ce5c <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_1_PORT, RADIO_DIO_1_PIN, &initStruct );
 800289c:	aa01      	add	r2, sp, #4
 800289e:	0029      	movs	r1, r5
 80028a0:	0020      	movs	r0, r4
 80028a2:	f00a fadb 	bl	800ce5c <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_2_PORT, RADIO_DIO_2_PIN, &initStruct );
 80028a6:	aa01      	add	r2, sp, #4
 80028a8:	0020      	movs	r0, r4
 80028aa:	2101      	movs	r1, #1
 80028ac:	f00a fad6 	bl	800ce5c <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_3_PORT, RADIO_DIO_3_PIN, &initStruct );
 80028b0:	2180      	movs	r1, #128	; 0x80
 80028b2:	aa01      	add	r2, sp, #4
 80028b4:	0189      	lsls	r1, r1, #6
 80028b6:	480b      	ldr	r0, [pc, #44]	; (80028e4 <SX1276IoInit+0x74>)
 80028b8:	f00a fad0 	bl	800ce5c <HW_GPIO_Init>
  initStruct.Mode =GPIO_MODE_OUTPUT_PP;
 80028bc:	2301      	movs	r3, #1
  HW_GPIO_Init( RADIO_TCXO_VCC_PORT, RADIO_TCXO_VCC_PIN, &initStruct );
 80028be:	2180      	movs	r1, #128	; 0x80
 80028c0:	20a0      	movs	r0, #160	; 0xa0
  initStruct.Mode =GPIO_MODE_OUTPUT_PP;
 80028c2:	9302      	str	r3, [sp, #8]
  initStruct.Pull = GPIO_NOPULL;  
 80028c4:	2300      	movs	r3, #0
  HW_GPIO_Init( RADIO_TCXO_VCC_PORT, RADIO_TCXO_VCC_PIN, &initStruct );
 80028c6:	aa01      	add	r2, sp, #4
 80028c8:	0149      	lsls	r1, r1, #5
 80028ca:	05c0      	lsls	r0, r0, #23
  initStruct.Pull = GPIO_NOPULL;  
 80028cc:	9303      	str	r3, [sp, #12]
  HW_GPIO_Init( RADIO_TCXO_VCC_PORT, RADIO_TCXO_VCC_PIN, &initStruct );
 80028ce:	f00a fac5 	bl	800ce5c <HW_GPIO_Init>
}
 80028d2:	b007      	add	sp, #28
 80028d4:	bd30      	pop	{r4, r5, pc}
 80028d6:	46c0      	nop			; (mov r8, r8)
 80028d8:	20000014 	.word	0x20000014
 80028dc:	10110000 	.word	0x10110000
 80028e0:	50000400 	.word	0x50000400
 80028e4:	50000800 	.word	0x50000800

080028e8 <SX1276IoDeInit>:
{
 80028e8:	b530      	push	{r4, r5, lr}
  initStruct.Pull = GPIO_PULLDOWN;
 80028ea:	2502      	movs	r5, #2
{
 80028ec:	b087      	sub	sp, #28
  HW_GPIO_Init( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, &initStruct );
 80028ee:	4c10      	ldr	r4, [pc, #64]	; (8002930 <SX1276IoDeInit+0x48>)
  GPIO_InitTypeDef initStruct={0};
 80028f0:	2214      	movs	r2, #20
 80028f2:	2100      	movs	r1, #0
 80028f4:	a801      	add	r0, sp, #4
 80028f6:	f00b fb46 	bl	800df86 <memset>
  initStruct.Mode = GPIO_MODE_IT_RISING ; //GPIO_MODE_ANALOG;
 80028fa:	4b0e      	ldr	r3, [pc, #56]	; (8002934 <SX1276IoDeInit+0x4c>)
  HW_GPIO_Init( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, &initStruct );
 80028fc:	aa01      	add	r2, sp, #4
 80028fe:	0020      	movs	r0, r4
 8002900:	2110      	movs	r1, #16
  initStruct.Mode = GPIO_MODE_IT_RISING ; //GPIO_MODE_ANALOG;
 8002902:	9302      	str	r3, [sp, #8]
  initStruct.Pull = GPIO_PULLDOWN;
 8002904:	9503      	str	r5, [sp, #12]
  HW_GPIO_Init( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, &initStruct );
 8002906:	f00a faa9 	bl	800ce5c <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_1_PORT, RADIO_DIO_1_PIN, &initStruct );
 800290a:	aa01      	add	r2, sp, #4
 800290c:	0029      	movs	r1, r5
 800290e:	0020      	movs	r0, r4
 8002910:	f00a faa4 	bl	800ce5c <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_2_PORT, RADIO_DIO_2_PIN, &initStruct );
 8002914:	aa01      	add	r2, sp, #4
 8002916:	0020      	movs	r0, r4
 8002918:	2101      	movs	r1, #1
 800291a:	f00a fa9f 	bl	800ce5c <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_3_PORT, RADIO_DIO_3_PIN, &initStruct );
 800291e:	2180      	movs	r1, #128	; 0x80
 8002920:	aa01      	add	r2, sp, #4
 8002922:	0189      	lsls	r1, r1, #6
 8002924:	4804      	ldr	r0, [pc, #16]	; (8002938 <SX1276IoDeInit+0x50>)
 8002926:	f00a fa99 	bl	800ce5c <HW_GPIO_Init>
}
 800292a:	b007      	add	sp, #28
 800292c:	bd30      	pop	{r4, r5, pc}
 800292e:	46c0      	nop			; (mov r8, r8)
 8002930:	50000400 	.word	0x50000400
 8002934:	10110000 	.word	0x10110000
 8002938:	50000800 	.word	0x50000800

0800293c <SX1276SetAntSwLowPower>:
{
 800293c:	b510      	push	{r4, lr}
  GPIO_InitTypeDef initStruct={0};
 800293e:	2214      	movs	r2, #20
{
 8002940:	b086      	sub	sp, #24
    if( status == false )
 8002942:	2800      	cmp	r0, #0
 8002944:	d129      	bne.n	800299a <SX1276SetAntSwLowPower+0x5e>
  GPIO_InitTypeDef initStruct={0};
 8002946:	0001      	movs	r1, r0
 8002948:	a801      	add	r0, sp, #4
 800294a:	f00b fb1c 	bl	800df86 <memset>
  initStruct.Mode =GPIO_MODE_OUTPUT_PP;
 800294e:	2301      	movs	r3, #1
 8002950:	9302      	str	r3, [sp, #8]
  initStruct.Speed = GPIO_SPEED_HIGH;
 8002952:	3302      	adds	r3, #2
  HW_GPIO_Init( RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, &initStruct  ); 
 8002954:	20a0      	movs	r0, #160	; 0xa0
 8002956:	aa01      	add	r2, sp, #4
 8002958:	2102      	movs	r1, #2
 800295a:	05c0      	lsls	r0, r0, #23
  initStruct.Speed = GPIO_SPEED_HIGH;
 800295c:	9304      	str	r3, [sp, #16]
  HW_GPIO_Init( RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, &initStruct  ); 
 800295e:	f00a fa7d 	bl	800ce5c <HW_GPIO_Init>
  HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, 0);
 8002962:	20a0      	movs	r0, #160	; 0xa0
 8002964:	2200      	movs	r2, #0
 8002966:	2102      	movs	r1, #2
 8002968:	05c0      	lsls	r0, r0, #23
 800296a:	f00a faeb 	bl	800cf44 <HW_GPIO_Write>
  HW_GPIO_Init( RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, &initStruct  ); 
 800296e:	aa01      	add	r2, sp, #4
 8002970:	2102      	movs	r1, #2
 8002972:	480d      	ldr	r0, [pc, #52]	; (80029a8 <SX1276SetAntSwLowPower+0x6c>)
 8002974:	f00a fa72 	bl	800ce5c <HW_GPIO_Init>
  HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, 0);
 8002978:	2200      	movs	r2, #0
 800297a:	2102      	movs	r1, #2
 800297c:	480a      	ldr	r0, [pc, #40]	; (80029a8 <SX1276SetAntSwLowPower+0x6c>)
 800297e:	f00a fae1 	bl	800cf44 <HW_GPIO_Write>
  HW_GPIO_Init( RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, &initStruct  ); 
 8002982:	aa01      	add	r2, sp, #4
 8002984:	2104      	movs	r1, #4
 8002986:	4808      	ldr	r0, [pc, #32]	; (80029a8 <SX1276SetAntSwLowPower+0x6c>)
 8002988:	f00a fa68 	bl	800ce5c <HW_GPIO_Init>
  HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, 0);
 800298c:	2200      	movs	r2, #0
 800298e:	2104      	movs	r1, #4
 8002990:	4805      	ldr	r0, [pc, #20]	; (80029a8 <SX1276SetAntSwLowPower+0x6c>)
 8002992:	f00a fad7 	bl	800cf44 <HW_GPIO_Write>
}
 8002996:	b006      	add	sp, #24
 8002998:	bd10      	pop	{r4, pc}
  GPIO_InitTypeDef initStruct={0};
 800299a:	2100      	movs	r1, #0
 800299c:	a801      	add	r0, sp, #4
 800299e:	f00b faf2 	bl	800df86 <memset>
  initStruct.Mode = GPIO_MODE_ANALOG ;
 80029a2:	2303      	movs	r3, #3
 80029a4:	9302      	str	r3, [sp, #8]
 80029a6:	e7d5      	b.n	8002954 <SX1276SetAntSwLowPower+0x18>
 80029a8:	50000800 	.word	0x50000800

080029ac <SX1276IoIrqInit>:
{
 80029ac:	b570      	push	{r4, r5, r6, lr}
 80029ae:	0004      	movs	r4, r0
  HW_GPIO_SetIrq( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, IRQ_HIGH_PRIORITY, irqHandlers[0] );
 80029b0:	4d0d      	ldr	r5, [pc, #52]	; (80029e8 <SX1276IoIrqInit+0x3c>)
 80029b2:	6803      	ldr	r3, [r0, #0]
 80029b4:	2200      	movs	r2, #0
 80029b6:	0028      	movs	r0, r5
 80029b8:	2110      	movs	r1, #16
 80029ba:	f00a fa9b 	bl	800cef4 <HW_GPIO_SetIrq>
  HW_GPIO_SetIrq( RADIO_DIO_1_PORT, RADIO_DIO_1_PIN, IRQ_HIGH_PRIORITY, irqHandlers[1] );
 80029be:	0028      	movs	r0, r5
 80029c0:	6863      	ldr	r3, [r4, #4]
 80029c2:	2200      	movs	r2, #0
 80029c4:	2102      	movs	r1, #2
 80029c6:	f00a fa95 	bl	800cef4 <HW_GPIO_SetIrq>
  HW_GPIO_SetIrq( RADIO_DIO_2_PORT, RADIO_DIO_2_PIN, IRQ_HIGH_PRIORITY, irqHandlers[2] );
 80029ca:	0028      	movs	r0, r5
 80029cc:	68a3      	ldr	r3, [r4, #8]
 80029ce:	2200      	movs	r2, #0
 80029d0:	2101      	movs	r1, #1
 80029d2:	f00a fa8f 	bl	800cef4 <HW_GPIO_SetIrq>
  HW_GPIO_SetIrq( RADIO_DIO_3_PORT, RADIO_DIO_3_PIN, IRQ_HIGH_PRIORITY, irqHandlers[3] );
 80029d6:	2180      	movs	r1, #128	; 0x80
 80029d8:	68e3      	ldr	r3, [r4, #12]
 80029da:	2200      	movs	r2, #0
 80029dc:	0189      	lsls	r1, r1, #6
 80029de:	4803      	ldr	r0, [pc, #12]	; (80029ec <SX1276IoIrqInit+0x40>)
 80029e0:	f00a fa88 	bl	800cef4 <HW_GPIO_SetIrq>
}
 80029e4:	bd70      	pop	{r4, r5, r6, pc}
 80029e6:	46c0      	nop			; (mov r8, r8)
 80029e8:	50000400 	.word	0x50000400
 80029ec:	50000800 	.word	0x50000800

080029f0 <SX1276SetAntSw>:
{
 80029f0:	b570      	push	{r4, r5, r6, lr}
 80029f2:	0005      	movs	r5, r0
 uint8_t paConfig =  SX1276Read( REG_PACONFIG );
 80029f4:	2009      	movs	r0, #9
 80029f6:	f000 f8f9 	bl	8002bec <SX1276Read>
 80029fa:	4c0b      	ldr	r4, [pc, #44]	; (8002a28 <SX1276SetAntSw+0x38>)
    switch( opMode )
 80029fc:	2d03      	cmp	r5, #3
 80029fe:	d10a      	bne.n	8002a16 <SX1276SetAntSw+0x26>
        HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, 1 );
 8002a00:	2201      	movs	r2, #1
 8002a02:	2102      	movs	r1, #2
      if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
 8002a04:	0603      	lsls	r3, r0, #24
 8002a06:	d400      	bmi.n	8002a0a <SX1276SetAntSw+0x1a>
        HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, 1 );
 8002a08:	2104      	movs	r1, #4
 8002a0a:	4808      	ldr	r0, [pc, #32]	; (8002a2c <SX1276SetAntSw+0x3c>)
 8002a0c:	f00a fa9a 	bl	800cf44 <HW_GPIO_Write>
      SX1276.RxTx = 1;
 8002a10:	2301      	movs	r3, #1
 8002a12:	7023      	strb	r3, [r4, #0]
}
 8002a14:	bd70      	pop	{r4, r5, r6, pc}
     HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, 1 );
 8002a16:	20a0      	movs	r0, #160	; 0xa0
     SX1276.RxTx = 0;
 8002a18:	2300      	movs	r3, #0
     HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, 1 );
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	2102      	movs	r1, #2
 8002a1e:	05c0      	lsls	r0, r0, #23
     SX1276.RxTx = 0;
 8002a20:	7023      	strb	r3, [r4, #0]
     HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, 1 );
 8002a22:	f00a fa8f 	bl	800cf44 <HW_GPIO_Write>
}
 8002a26:	e7f5      	b.n	8002a14 <SX1276SetAntSw+0x24>
 8002a28:	20001558 	.word	0x20001558
 8002a2c:	50000800 	.word	0x50000800

08002a30 <SX1276SetXO>:
{
 8002a30:	b510      	push	{r4, lr}
 8002a32:	0002      	movs	r2, r0
  if (state == SET )
 8002a34:	2801      	cmp	r0, #1
 8002a36:	d109      	bne.n	8002a4c <SX1276SetXO+0x1c>
    TCXO_ON(); 
 8002a38:	2180      	movs	r1, #128	; 0x80
 8002a3a:	20a0      	movs	r0, #160	; 0xa0
 8002a3c:	0149      	lsls	r1, r1, #5
 8002a3e:	05c0      	lsls	r0, r0, #23
 8002a40:	f00a fa80 	bl	800cf44 <HW_GPIO_Write>
    DelayMs( BOARD_WAKEUP_TIME ); //start up time of TCXO
 8002a44:	2005      	movs	r0, #5
 8002a46:	f00a fedd 	bl	800d804 <HAL_Delay>
}
 8002a4a:	bd10      	pop	{r4, pc}
    TCXO_OFF(); 
 8002a4c:	2180      	movs	r1, #128	; 0x80
 8002a4e:	20a0      	movs	r0, #160	; 0xa0
 8002a50:	2200      	movs	r2, #0
 8002a52:	0149      	lsls	r1, r1, #5
 8002a54:	05c0      	lsls	r0, r0, #23
 8002a56:	f00a fa75 	bl	800cf44 <HW_GPIO_Write>
}
 8002a5a:	e7f6      	b.n	8002a4a <SX1276SetXO+0x1a>

08002a5c <GetFskBandwidthRegValue>:
 *
 * \param [IN] bandwidth Bandwidth value in Hz
 * \retval regValue Bandwidth register value.
 */
static uint8_t GetFskBandwidthRegValue( uint32_t bandwidth )
{
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	b510      	push	{r4, lr}
    uint8_t i;

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
    {
        if( ( bandwidth >= FskBandwidths[i].bandwidth ) && ( bandwidth < FskBandwidths[i + 1].bandwidth ) )
 8002a60:	4907      	ldr	r1, [pc, #28]	; (8002a80 <GetFskBandwidthRegValue+0x24>)
 8002a62:	00d3      	lsls	r3, r2, #3
 8002a64:	185b      	adds	r3, r3, r1
 8002a66:	681c      	ldr	r4, [r3, #0]
 8002a68:	4284      	cmp	r4, r0
 8002a6a:	d802      	bhi.n	8002a72 <GetFskBandwidthRegValue+0x16>
 8002a6c:	689c      	ldr	r4, [r3, #8]
 8002a6e:	4284      	cmp	r4, r0
 8002a70:	d803      	bhi.n	8002a7a <GetFskBandwidthRegValue+0x1e>
 8002a72:	3201      	adds	r2, #1
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 8002a74:	2a15      	cmp	r2, #21
 8002a76:	d1f4      	bne.n	8002a62 <GetFskBandwidthRegValue+0x6>
 8002a78:	e7fe      	b.n	8002a78 <GetFskBandwidthRegValue+0x1c>
        {
            return FskBandwidths[i].RegValue;
 8002a7a:	7918      	ldrb	r0, [r3, #4]
        }
    }
    // ERROR: Value not found
    while( 1 );
}
 8002a7c:	bd10      	pop	{r4, pc}
 8002a7e:	46c0      	nop			; (mov r8, r8)
 8002a80:	0800eb60 	.word	0x0800eb60

08002a84 <SX1276OnDio4Irq>:
    }
}

void SX1276OnDio4Irq( void* context )
{
    switch( SX1276.Settings.Modem )
 8002a84:	4b05      	ldr	r3, [pc, #20]	; (8002a9c <SX1276OnDio4Irq+0x18>)
 8002a86:	795a      	ldrb	r2, [r3, #5]
 8002a88:	2a00      	cmp	r2, #0
 8002a8a:	d105      	bne.n	8002a98 <SX1276OnDio4Irq+0x14>
    {
    case MODEM_FSK:
        {
            if( SX1276.Settings.FskPacketHandler.PreambleDetected == false )
 8002a8c:	3330      	adds	r3, #48	; 0x30
 8002a8e:	781a      	ldrb	r2, [r3, #0]
 8002a90:	2a00      	cmp	r2, #0
 8002a92:	d101      	bne.n	8002a98 <SX1276OnDio4Irq+0x14>
            {
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 8002a94:	3201      	adds	r2, #1
 8002a96:	701a      	strb	r2, [r3, #0]
    case MODEM_LORA:
        break;
    default:
        break;
    }
}
 8002a98:	4770      	bx	lr
 8002a9a:	46c0      	nop			; (mov r8, r8)
 8002a9c:	20001558 	.word	0x20001558

08002aa0 <SX1276BoardInit>:
    LoRaBoardCallbacks =callbacks;
 8002aa0:	4b01      	ldr	r3, [pc, #4]	; (8002aa8 <SX1276BoardInit+0x8>)
 8002aa2:	6018      	str	r0, [r3, #0]
}
 8002aa4:	4770      	bx	lr
 8002aa6:	46c0      	nop			; (mov r8, r8)
 8002aa8:	2000026c 	.word	0x2000026c

08002aac <SX1276GetStatus>:
    return SX1276.Settings.State;
 8002aac:	4b01      	ldr	r3, [pc, #4]	; (8002ab4 <SX1276GetStatus+0x8>)
 8002aae:	7918      	ldrb	r0, [r3, #4]
}
 8002ab0:	4770      	bx	lr
 8002ab2:	46c0      	nop			; (mov r8, r8)
 8002ab4:	20001558 	.word	0x20001558

08002ab8 <SX1276Reset>:
{
 8002ab8:	b530      	push	{r4, r5, lr}
 8002aba:	b087      	sub	sp, #28
    initStruct.Mode =GPIO_MODE_OUTPUT_PP;
 8002abc:	2401      	movs	r4, #1
    GPIO_InitTypeDef initStruct = { 0 };
 8002abe:	2214      	movs	r2, #20
 8002ac0:	2100      	movs	r1, #0
 8002ac2:	a801      	add	r0, sp, #4
 8002ac4:	f00b fa5f 	bl	800df86 <memset>
    initStruct.Speed = GPIO_SPEED_HIGH;
 8002ac8:	2303      	movs	r3, #3
    HW_GPIO_Init( RADIO_RESET_PORT, RADIO_RESET_PIN, &initStruct );
 8002aca:	4d0e      	ldr	r5, [pc, #56]	; (8002b04 <SX1276Reset+0x4c>)
 8002acc:	aa01      	add	r2, sp, #4
 8002ace:	0021      	movs	r1, r4
 8002ad0:	0028      	movs	r0, r5
    initStruct.Speed = GPIO_SPEED_HIGH;
 8002ad2:	9304      	str	r3, [sp, #16]
    initStruct.Mode =GPIO_MODE_OUTPUT_PP;
 8002ad4:	9402      	str	r4, [sp, #8]
    HW_GPIO_Init( RADIO_RESET_PORT, RADIO_RESET_PIN, &initStruct );
 8002ad6:	f00a f9c1 	bl	800ce5c <HW_GPIO_Init>
    HW_GPIO_Write( RADIO_RESET_PORT, RADIO_RESET_PIN, 0 );
 8002ada:	0021      	movs	r1, r4
 8002adc:	2200      	movs	r2, #0
 8002ade:	0028      	movs	r0, r5
 8002ae0:	f00a fa30 	bl	800cf44 <HW_GPIO_Write>
    DelayMs( 1 );
 8002ae4:	0020      	movs	r0, r4
 8002ae6:	f00a fe8d 	bl	800d804 <HAL_Delay>
    initStruct.Mode = GPIO_NOPULL;
 8002aea:	2300      	movs	r3, #0
    HW_GPIO_Init( RADIO_RESET_PORT, RADIO_RESET_PIN, &initStruct );
 8002aec:	aa01      	add	r2, sp, #4
 8002aee:	0021      	movs	r1, r4
 8002af0:	0028      	movs	r0, r5
    initStruct.Mode = GPIO_NOPULL;
 8002af2:	9302      	str	r3, [sp, #8]
    HW_GPIO_Init( RADIO_RESET_PORT, RADIO_RESET_PIN, &initStruct );
 8002af4:	f00a f9b2 	bl	800ce5c <HW_GPIO_Init>
    DelayMs( 6 );
 8002af8:	2006      	movs	r0, #6
 8002afa:	f00a fe83 	bl	800d804 <HAL_Delay>
}
 8002afe:	b007      	add	sp, #28
 8002b00:	bd30      	pop	{r4, r5, pc}
 8002b02:	46c0      	nop			; (mov r8, r8)
 8002b04:	50000800 	.word	0x50000800

08002b08 <SX1276WriteBuffer>:
{
 8002b08:	b570      	push	{r4, r5, r6, lr}
 8002b0a:	0006      	movs	r6, r0
 8002b0c:	000c      	movs	r4, r1
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 0 );
 8002b0e:	20a0      	movs	r0, #160	; 0xa0
 8002b10:	2180      	movs	r1, #128	; 0x80
{
 8002b12:	0015      	movs	r5, r2
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 0 );
 8002b14:	0209      	lsls	r1, r1, #8
 8002b16:	2200      	movs	r2, #0
 8002b18:	05c0      	lsls	r0, r0, #23
 8002b1a:	f00a fa13 	bl	800cf44 <HW_GPIO_Write>
    HW_SPI_InOut( addr | 0x80 );
 8002b1e:	2080      	movs	r0, #128	; 0x80
 8002b20:	4330      	orrs	r0, r6
 8002b22:	f00a fc87 	bl	800d434 <HW_SPI_InOut>
 8002b26:	1965      	adds	r5, r4, r5
    for( i = 0; i < size; i++ )
 8002b28:	42ac      	cmp	r4, r5
 8002b2a:	d107      	bne.n	8002b3c <SX1276WriteBuffer+0x34>
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 1 );
 8002b2c:	2180      	movs	r1, #128	; 0x80
 8002b2e:	20a0      	movs	r0, #160	; 0xa0
 8002b30:	2201      	movs	r2, #1
 8002b32:	0209      	lsls	r1, r1, #8
 8002b34:	05c0      	lsls	r0, r0, #23
 8002b36:	f00a fa05 	bl	800cf44 <HW_GPIO_Write>
}
 8002b3a:	bd70      	pop	{r4, r5, r6, pc}
        HW_SPI_InOut( buffer[i] );
 8002b3c:	7820      	ldrb	r0, [r4, #0]
 8002b3e:	f00a fc79 	bl	800d434 <HW_SPI_InOut>
 8002b42:	3401      	adds	r4, #1
 8002b44:	e7f0      	b.n	8002b28 <SX1276WriteBuffer+0x20>

08002b46 <SX1276Write>:
{
 8002b46:	b507      	push	{r0, r1, r2, lr}
 8002b48:	466b      	mov	r3, sp
 8002b4a:	71d9      	strb	r1, [r3, #7]
 8002b4c:	3307      	adds	r3, #7
    SX1276WriteBuffer( addr, &data, 1 );
 8002b4e:	2201      	movs	r2, #1
 8002b50:	0019      	movs	r1, r3
 8002b52:	f7ff ffd9 	bl	8002b08 <SX1276WriteBuffer>
}
 8002b56:	bd07      	pop	{r0, r1, r2, pc}

08002b58 <SX1276SetChannel>:
    SX1276.Settings.Channel = freq;
 8002b58:	4b11      	ldr	r3, [pc, #68]	; (8002ba0 <SX1276SetChannel+0x48>)
{
 8002b5a:	b570      	push	{r4, r5, r6, lr}
    SX_FREQ_TO_CHANNEL( channel, freq );
 8002b5c:	4911      	ldr	r1, [pc, #68]	; (8002ba4 <SX1276SetChannel+0x4c>)
    SX1276.Settings.Channel = freq;
 8002b5e:	6098      	str	r0, [r3, #8]
{
 8002b60:	0005      	movs	r5, r0
    SX_FREQ_TO_CHANNEL( channel, freq );
 8002b62:	f7fd fb75 	bl	8000250 <__aeabi_uidivmod>
 8002b66:	4b10      	ldr	r3, [pc, #64]	; (8002ba8 <SX1276SetChannel+0x50>)
 8002b68:	0208      	lsls	r0, r1, #8
 8002b6a:	18c0      	adds	r0, r0, r3
 8002b6c:	490d      	ldr	r1, [pc, #52]	; (8002ba4 <SX1276SetChannel+0x4c>)
 8002b6e:	f7fd fae9 	bl	8000144 <__udivsi3>
 8002b72:	490c      	ldr	r1, [pc, #48]	; (8002ba4 <SX1276SetChannel+0x4c>)
 8002b74:	0004      	movs	r4, r0
 8002b76:	0028      	movs	r0, r5
 8002b78:	f7fd fae4 	bl	8000144 <__udivsi3>
 8002b7c:	0200      	lsls	r0, r0, #8
 8002b7e:	1824      	adds	r4, r4, r0
    SX1276Write( REG_FRFMSB, ( uint8_t )( ( channel >> 16 ) & 0xFF ) );
 8002b80:	0c21      	lsrs	r1, r4, #16
 8002b82:	b2c9      	uxtb	r1, r1
 8002b84:	2006      	movs	r0, #6
 8002b86:	f7ff ffde 	bl	8002b46 <SX1276Write>
    SX1276Write( REG_FRFMID, ( uint8_t )( ( channel >> 8 ) & 0xFF ) );
 8002b8a:	0a21      	lsrs	r1, r4, #8
 8002b8c:	b2c9      	uxtb	r1, r1
 8002b8e:	2007      	movs	r0, #7
 8002b90:	f7ff ffd9 	bl	8002b46 <SX1276Write>
    SX1276Write( REG_FRFLSB, ( uint8_t )( channel & 0xFF ) );
 8002b94:	b2e1      	uxtb	r1, r4
 8002b96:	2008      	movs	r0, #8
 8002b98:	f7ff ffd5 	bl	8002b46 <SX1276Write>
}
 8002b9c:	bd70      	pop	{r4, r5, r6, pc}
 8002b9e:	46c0      	nop			; (mov r8, r8)
 8002ba0:	20001558 	.word	0x20001558
 8002ba4:	00003d09 	.word	0x00003d09
 8002ba8:	00001e84 	.word	0x00001e84

08002bac <SX1276ReadBuffer>:
{
 8002bac:	b570      	push	{r4, r5, r6, lr}
 8002bae:	0006      	movs	r6, r0
 8002bb0:	000c      	movs	r4, r1
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 0 );
 8002bb2:	20a0      	movs	r0, #160	; 0xa0
 8002bb4:	2180      	movs	r1, #128	; 0x80
{
 8002bb6:	0015      	movs	r5, r2
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 0 );
 8002bb8:	0209      	lsls	r1, r1, #8
 8002bba:	2200      	movs	r2, #0
 8002bbc:	05c0      	lsls	r0, r0, #23
 8002bbe:	f00a f9c1 	bl	800cf44 <HW_GPIO_Write>
    HW_SPI_InOut( addr & 0x7F );
 8002bc2:	207f      	movs	r0, #127	; 0x7f
 8002bc4:	4030      	ands	r0, r6
 8002bc6:	f00a fc35 	bl	800d434 <HW_SPI_InOut>
 8002bca:	1965      	adds	r5, r4, r5
    for( i = 0; i < size; i++ )
 8002bcc:	42ac      	cmp	r4, r5
 8002bce:	d107      	bne.n	8002be0 <SX1276ReadBuffer+0x34>
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 1 );
 8002bd0:	2180      	movs	r1, #128	; 0x80
 8002bd2:	20a0      	movs	r0, #160	; 0xa0
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	0209      	lsls	r1, r1, #8
 8002bd8:	05c0      	lsls	r0, r0, #23
 8002bda:	f00a f9b3 	bl	800cf44 <HW_GPIO_Write>
}
 8002bde:	bd70      	pop	{r4, r5, r6, pc}
        buffer[i] = HW_SPI_InOut( 0 );
 8002be0:	2000      	movs	r0, #0
 8002be2:	f00a fc27 	bl	800d434 <HW_SPI_InOut>
 8002be6:	7020      	strb	r0, [r4, #0]
 8002be8:	3401      	adds	r4, #1
 8002bea:	e7ef      	b.n	8002bcc <SX1276ReadBuffer+0x20>

08002bec <SX1276Read>:
{
 8002bec:	b513      	push	{r0, r1, r4, lr}
    SX1276ReadBuffer( addr, &data, 1 );
 8002bee:	466b      	mov	r3, sp
 8002bf0:	1ddc      	adds	r4, r3, #7
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	0021      	movs	r1, r4
 8002bf6:	f7ff ffd9 	bl	8002bac <SX1276ReadBuffer>
    return data;
 8002bfa:	7820      	ldrb	r0, [r4, #0]
}
 8002bfc:	bd16      	pop	{r1, r2, r4, pc}
	...

08002c00 <RxChainCalibration>:
{
 8002c00:	b570      	push	{r4, r5, r6, lr}
    regPaConfigInitVal = SX1276Read( REG_PACONFIG );
 8002c02:	2009      	movs	r0, #9
 8002c04:	f7ff fff2 	bl	8002bec <SX1276Read>
 8002c08:	0005      	movs	r5, r0
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8002c0a:	2006      	movs	r0, #6
 8002c0c:	f7ff ffee 	bl	8002bec <SX1276Read>
 8002c10:	0004      	movs	r4, r0
                ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
 8002c12:	2007      	movs	r0, #7
 8002c14:	f7ff ffea 	bl	8002bec <SX1276Read>
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8002c18:	0424      	lsls	r4, r4, #16
                ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
 8002c1a:	0200      	lsls	r0, r0, #8
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8002c1c:	4304      	orrs	r4, r0
                ( ( uint32_t )SX1276Read( REG_FRFLSB ) ) );
 8002c1e:	2008      	movs	r0, #8
 8002c20:	f7ff ffe4 	bl	8002bec <SX1276Read>
    SX_CHANNEL_TO_FREQ(channel, initialFreq);
 8002c24:	4b1a      	ldr	r3, [pc, #104]	; (8002c90 <RxChainCalibration+0x90>)
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8002c26:	4320      	orrs	r0, r4
    SX_CHANNEL_TO_FREQ(channel, initialFreq);
 8002c28:	b2c4      	uxtb	r4, r0
 8002c2a:	435c      	muls	r4, r3
 8002c2c:	0a00      	lsrs	r0, r0, #8
 8002c2e:	4358      	muls	r0, r3
 8002c30:	3480      	adds	r4, #128	; 0x80
 8002c32:	0a24      	lsrs	r4, r4, #8
    SX1276Write( REG_PACONFIG, 0x00 );
 8002c34:	2100      	movs	r1, #0
    SX_CHANNEL_TO_FREQ(channel, initialFreq);
 8002c36:	1824      	adds	r4, r4, r0
    SX1276Write( REG_PACONFIG, 0x00 );
 8002c38:	2009      	movs	r0, #9
 8002c3a:	f7ff ff84 	bl	8002b46 <SX1276Write>
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 8002c3e:	203b      	movs	r0, #59	; 0x3b
 8002c40:	f7ff ffd4 	bl	8002bec <SX1276Read>
 8002c44:	2140      	movs	r1, #64	; 0x40
 8002c46:	4301      	orrs	r1, r0
 8002c48:	b2c9      	uxtb	r1, r1
 8002c4a:	203b      	movs	r0, #59	; 0x3b
 8002c4c:	f7ff ff7b 	bl	8002b46 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 8002c50:	2620      	movs	r6, #32
 8002c52:	203b      	movs	r0, #59	; 0x3b
 8002c54:	f7ff ffca 	bl	8002bec <SX1276Read>
 8002c58:	4230      	tst	r0, r6
 8002c5a:	d1fa      	bne.n	8002c52 <RxChainCalibration+0x52>
    SX1276SetChannel( 868000000 );
 8002c5c:	480d      	ldr	r0, [pc, #52]	; (8002c94 <RxChainCalibration+0x94>)
 8002c5e:	f7ff ff7b 	bl	8002b58 <SX1276SetChannel>
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 8002c62:	203b      	movs	r0, #59	; 0x3b
 8002c64:	f7ff ffc2 	bl	8002bec <SX1276Read>
 8002c68:	2140      	movs	r1, #64	; 0x40
 8002c6a:	4301      	orrs	r1, r0
 8002c6c:	b2c9      	uxtb	r1, r1
 8002c6e:	203b      	movs	r0, #59	; 0x3b
 8002c70:	f7ff ff69 	bl	8002b46 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 8002c74:	2620      	movs	r6, #32
 8002c76:	203b      	movs	r0, #59	; 0x3b
 8002c78:	f7ff ffb8 	bl	8002bec <SX1276Read>
 8002c7c:	4230      	tst	r0, r6
 8002c7e:	d1fa      	bne.n	8002c76 <RxChainCalibration+0x76>
    SX1276Write( REG_PACONFIG, regPaConfigInitVal );
 8002c80:	0029      	movs	r1, r5
 8002c82:	2009      	movs	r0, #9
 8002c84:	f7ff ff5f 	bl	8002b46 <SX1276Write>
    SX1276SetChannel( initialFreq );
 8002c88:	0020      	movs	r0, r4
 8002c8a:	f7ff ff65 	bl	8002b58 <SX1276SetChannel>
}
 8002c8e:	bd70      	pop	{r4, r5, r6, pc}
 8002c90:	00003d09 	.word	0x00003d09
 8002c94:	33bca100 	.word	0x33bca100

08002c98 <SX1276GetTimeOnAir>:
{
 8002c98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c9a:	000d      	movs	r5, r1
 8002c9c:	b085      	sub	sp, #20
    switch( modem )
 8002c9e:	2800      	cmp	r0, #0
 8002ca0:	d003      	beq.n	8002caa <SX1276GetTimeOnAir+0x12>
 8002ca2:	2801      	cmp	r0, #1
 8002ca4:	d055      	beq.n	8002d52 <SX1276GetTimeOnAir+0xba>
    uint32_t airTime = 0;
 8002ca6:	2000      	movs	r0, #0
    return airTime;
 8002ca8:	e04c      	b.n	8002d44 <SX1276GetTimeOnAir+0xac>
            airTime = (uint32_t) round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 8002caa:	4c6f      	ldr	r4, [pc, #444]	; (8002e68 <SX1276GetTimeOnAir+0x1d0>)
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 8002cac:	2027      	movs	r0, #39	; 0x27
            airTime = (uint32_t) round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 8002cae:	8c26      	ldrh	r6, [r4, #32]
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 8002cb0:	f7ff ff9c 	bl	8002bec <SX1276Read>
 8002cb4:	23f8      	movs	r3, #248	; 0xf8
 8002cb6:	4398      	bics	r0, r3
 8002cb8:	3001      	adds	r0, #1
            airTime = (uint32_t) round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 8002cba:	1980      	adds	r0, r0, r6
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 8002cbc:	f7ff fc10 	bl	80024e0 <__aeabi_i2d>
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 8002cc0:	1ce3      	adds	r3, r4, #3
 8002cc2:	7fdb      	ldrb	r3, [r3, #31]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d13e      	bne.n	8002d48 <SX1276GetTimeOnAir+0xb0>
 8002cca:	4b68      	ldr	r3, [pc, #416]	; (8002e6c <SX1276GetTimeOnAir+0x1d4>)
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 8002ccc:	f7fd fef2 	bl	8000ab4 <__aeabi_dadd>
 8002cd0:	0006      	movs	r6, r0
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 8002cd2:	2030      	movs	r0, #48	; 0x30
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 8002cd4:	000f      	movs	r7, r1
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 8002cd6:	f7ff ff89 	bl	8002bec <SX1276Read>
 8002cda:	23f9      	movs	r3, #249	; 0xf9
 8002cdc:	2200      	movs	r2, #0
 8002cde:	4398      	bics	r0, r3
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	2800      	cmp	r0, #0
 8002ce4:	d000      	beq.n	8002ce8 <SX1276GetTimeOnAir+0x50>
 8002ce6:	4b61      	ldr	r3, [pc, #388]	; (8002e6c <SX1276GetTimeOnAir+0x1d4>)
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 8002ce8:	0030      	movs	r0, r6
 8002cea:	0039      	movs	r1, r7
 8002cec:	f7fd fee2 	bl	8000ab4 <__aeabi_dadd>
 8002cf0:	0006      	movs	r6, r0
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 8002cf2:	0028      	movs	r0, r5
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 8002cf4:	000f      	movs	r7, r1
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 8002cf6:	f7ff fbf3 	bl	80024e0 <__aeabi_i2d>
 8002cfa:	0002      	movs	r2, r0
 8002cfc:	000b      	movs	r3, r1
 8002cfe:	0030      	movs	r0, r6
 8002d00:	0039      	movs	r1, r7
 8002d02:	f7fd fed7 	bl	8000ab4 <__aeabi_dadd>
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 8002d06:	1d63      	adds	r3, r4, #5
 8002d08:	7fdb      	ldrb	r3, [r3, #31]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d11d      	bne.n	8002d4c <SX1276GetTimeOnAir+0xb4>
 8002d10:	2300      	movs	r3, #0
                                     pktLen +
 8002d12:	f7fd fecf 	bl	8000ab4 <__aeabi_dadd>
            airTime = (uint32_t) round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 8002d16:	2200      	movs	r2, #0
 8002d18:	4b55      	ldr	r3, [pc, #340]	; (8002e70 <SX1276GetTimeOnAir+0x1d8>)
 8002d1a:	f7fe fdf1 	bl	8001900 <__aeabi_dmul>
 8002d1e:	0006      	movs	r6, r0
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 8002d20:	69e0      	ldr	r0, [r4, #28]
            airTime = (uint32_t) round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 8002d22:	000f      	movs	r7, r1
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 8002d24:	f7ff fc16 	bl	8002554 <__aeabi_ui2d>
 8002d28:	0002      	movs	r2, r0
 8002d2a:	000b      	movs	r3, r1
 8002d2c:	0030      	movs	r0, r6
 8002d2e:	0039      	movs	r1, r7
 8002d30:	f7fe f9dc 	bl	80010ec <__aeabi_ddiv>
            airTime = (uint32_t) round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 8002d34:	2200      	movs	r2, #0
 8002d36:	4b4f      	ldr	r3, [pc, #316]	; (8002e74 <SX1276GetTimeOnAir+0x1dc>)
 8002d38:	f7fe fde2 	bl	8001900 <__aeabi_dmul>
 8002d3c:	f00b fe44 	bl	800e9c8 <round>
            airTime = (uint32_t) floor( tOnAir * 1000 + 0.999 );
 8002d40:	f7fd fbd4 	bl	80004ec <__aeabi_d2uiz>
}
 8002d44:	b005      	add	sp, #20
 8002d46:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 8002d48:	2300      	movs	r3, #0
 8002d4a:	e7bf      	b.n	8002ccc <SX1276GetTimeOnAir+0x34>
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 8002d4c:	2380      	movs	r3, #128	; 0x80
 8002d4e:	05db      	lsls	r3, r3, #23
 8002d50:	e7df      	b.n	8002d12 <SX1276GetTimeOnAir+0x7a>
            switch( SX1276.Settings.LoRa.Bandwidth )
 8002d52:	4c45      	ldr	r4, [pc, #276]	; (8002e68 <SX1276GetTimeOnAir+0x1d0>)
 8002d54:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002d56:	3b07      	subs	r3, #7
 8002d58:	2b02      	cmp	r3, #2
 8002d5a:	d900      	bls.n	8002d5e <SX1276GetTimeOnAir+0xc6>
 8002d5c:	e07d      	b.n	8002e5a <SX1276GetTimeOnAir+0x1c2>
 8002d5e:	4a46      	ldr	r2, [pc, #280]	; (8002e78 <SX1276GetTimeOnAir+0x1e0>)
 8002d60:	00db      	lsls	r3, r3, #3
 8002d62:	18d3      	adds	r3, r2, r3
 8002d64:	681e      	ldr	r6, [r3, #0]
 8002d66:	685f      	ldr	r7, [r3, #4]
            double rs = bw / ( 1 << SX1276.Settings.LoRa.Datarate );
 8002d68:	2001      	movs	r0, #1
 8002d6a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 8002d6c:	00ed      	lsls	r5, r5, #3
            double rs = bw / ( 1 << SX1276.Settings.LoRa.Datarate );
 8002d6e:	4098      	lsls	r0, r3
 8002d70:	9301      	str	r3, [sp, #4]
 8002d72:	f7ff fbb5 	bl	80024e0 <__aeabi_i2d>
 8002d76:	0002      	movs	r2, r0
 8002d78:	000b      	movs	r3, r1
 8002d7a:	0030      	movs	r0, r6
 8002d7c:	0039      	movs	r1, r7
 8002d7e:	f7fe f9b5 	bl	80010ec <__aeabi_ddiv>
 8002d82:	0002      	movs	r2, r0
 8002d84:	000b      	movs	r3, r1
            double ts = 1 / rs;
 8002d86:	2000      	movs	r0, #0
 8002d88:	4938      	ldr	r1, [pc, #224]	; (8002e6c <SX1276GetTimeOnAir+0x1d4>)
 8002d8a:	f7fe f9af 	bl	80010ec <__aeabi_ddiv>
            double tPreamble = ( SX1276.Settings.LoRa.PreambleLen + 4.25 ) * ts;
 8002d8e:	0023      	movs	r3, r4
            double ts = 1 / rs;
 8002d90:	0006      	movs	r6, r0
 8002d92:	000f      	movs	r7, r1
            double tPreamble = ( SX1276.Settings.LoRa.PreambleLen + 4.25 ) * ts;
 8002d94:	334e      	adds	r3, #78	; 0x4e
 8002d96:	8818      	ldrh	r0, [r3, #0]
 8002d98:	f7ff fba2 	bl	80024e0 <__aeabi_i2d>
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	4b37      	ldr	r3, [pc, #220]	; (8002e7c <SX1276GetTimeOnAir+0x1e4>)
 8002da0:	f7fd fe88 	bl	8000ab4 <__aeabi_dadd>
 8002da4:	0032      	movs	r2, r6
 8002da6:	003b      	movs	r3, r7
 8002da8:	f7fe fdaa 	bl	8001900 <__aeabi_dmul>
                                 28 + 16 * SX1276.Settings.LoRa.CrcOn -
 8002dac:	0023      	movs	r3, r4
            double tPreamble = ( SX1276.Settings.LoRa.PreambleLen + 4.25 ) * ts;
 8002dae:	9002      	str	r0, [sp, #8]
 8002db0:	9103      	str	r1, [sp, #12]
                                 28 + 16 * SX1276.Settings.LoRa.CrcOn -
 8002db2:	3352      	adds	r3, #82	; 0x52
 8002db4:	7818      	ldrb	r0, [r3, #0]
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 8002db6:	9b01      	ldr	r3, [sp, #4]
                                 ( SX1276.Settings.LoRa.FixLen ? 20 : 0 ) ) /
 8002db8:	3450      	adds	r4, #80	; 0x50
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 8002dba:	009b      	lsls	r3, r3, #2
                                 28 + 16 * SX1276.Settings.LoRa.CrcOn -
 8002dbc:	0100      	lsls	r0, r0, #4
 8002dbe:	1ac0      	subs	r0, r0, r3
                                 ( SX1276.Settings.LoRa.FixLen ? 20 : 0 ) ) /
 8002dc0:	7823      	ldrb	r3, [r4, #0]
 8002dc2:	2214      	movs	r2, #20
 8002dc4:	1e59      	subs	r1, r3, #1
 8002dc6:	418b      	sbcs	r3, r1
 8002dc8:	301c      	adds	r0, #28
 8002dca:	425b      	negs	r3, r3
 8002dcc:	401a      	ands	r2, r3
                                 28 + 16 * SX1276.Settings.LoRa.CrcOn -
 8002dce:	1828      	adds	r0, r5, r0
 8002dd0:	1a80      	subs	r0, r0, r2
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 8002dd2:	f7ff fbbf 	bl	8002554 <__aeabi_ui2d>
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 8002dd6:	4b24      	ldr	r3, [pc, #144]	; (8002e68 <SX1276GetTimeOnAir+0x1d0>)
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 8002dd8:	0004      	movs	r4, r0
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 8002dda:	334c      	adds	r3, #76	; 0x4c
 8002ddc:	7818      	ldrb	r0, [r3, #0]
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 8002dde:	000d      	movs	r5, r1
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 8002de0:	1e43      	subs	r3, r0, #1
 8002de2:	4198      	sbcs	r0, r3
                                 ( double )( 4 * ( SX1276.Settings.LoRa.Datarate -
 8002de4:	9b01      	ldr	r3, [sp, #4]
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 8002de6:	0040      	lsls	r0, r0, #1
                                 ( double )( 4 * ( SX1276.Settings.LoRa.Datarate -
 8002de8:	1a18      	subs	r0, r3, r0
 8002dea:	0080      	lsls	r0, r0, #2
 8002dec:	f7ff fbb2 	bl	8002554 <__aeabi_ui2d>
 8002df0:	0002      	movs	r2, r0
 8002df2:	000b      	movs	r3, r1
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 8002df4:	0020      	movs	r0, r4
 8002df6:	0029      	movs	r1, r5
 8002df8:	f7fe f978 	bl	80010ec <__aeabi_ddiv>
 8002dfc:	f00b fce0 	bl	800e7c0 <ceil>
 8002e00:	0004      	movs	r4, r0
 8002e02:	000d      	movs	r5, r1
                                 ( SX1276.Settings.LoRa.Coderate + 4 );
 8002e04:	4b18      	ldr	r3, [pc, #96]	; (8002e68 <SX1276GetTimeOnAir+0x1d0>)
 8002e06:	334d      	adds	r3, #77	; 0x4d
 8002e08:	7818      	ldrb	r0, [r3, #0]
 8002e0a:	3004      	adds	r0, #4
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 8002e0c:	f7ff fb68 	bl	80024e0 <__aeabi_i2d>
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 8002e10:	0022      	movs	r2, r4
 8002e12:	002b      	movs	r3, r5
 8002e14:	f7fe fd74 	bl	8001900 <__aeabi_dmul>
            double nPayload = 8 + ( ( tmp > 0 ) ? tmp : 0 );
 8002e18:	2200      	movs	r2, #0
 8002e1a:	2300      	movs	r3, #0
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 8002e1c:	0004      	movs	r4, r0
 8002e1e:	000d      	movs	r5, r1
            double nPayload = 8 + ( ( tmp > 0 ) ? tmp : 0 );
 8002e20:	f7fd fb30 	bl	8000484 <__aeabi_dcmpgt>
 8002e24:	2800      	cmp	r0, #0
 8002e26:	d01b      	beq.n	8002e60 <SX1276GetTimeOnAir+0x1c8>
 8002e28:	2200      	movs	r2, #0
 8002e2a:	4b11      	ldr	r3, [pc, #68]	; (8002e70 <SX1276GetTimeOnAir+0x1d8>)
 8002e2c:	0020      	movs	r0, r4
 8002e2e:	0029      	movs	r1, r5
 8002e30:	f7fd fe40 	bl	8000ab4 <__aeabi_dadd>
            double tPayload = nPayload * ts;
 8002e34:	0032      	movs	r2, r6
 8002e36:	003b      	movs	r3, r7
 8002e38:	f7fe fd62 	bl	8001900 <__aeabi_dmul>
            double tOnAir = tPreamble + tPayload;
 8002e3c:	9a02      	ldr	r2, [sp, #8]
 8002e3e:	9b03      	ldr	r3, [sp, #12]
 8002e40:	f7fd fe38 	bl	8000ab4 <__aeabi_dadd>
            airTime = (uint32_t) floor( tOnAir * 1000 + 0.999 );
 8002e44:	2200      	movs	r2, #0
 8002e46:	4b0b      	ldr	r3, [pc, #44]	; (8002e74 <SX1276GetTimeOnAir+0x1dc>)
 8002e48:	f7fe fd5a 	bl	8001900 <__aeabi_dmul>
 8002e4c:	4a0c      	ldr	r2, [pc, #48]	; (8002e80 <SX1276GetTimeOnAir+0x1e8>)
 8002e4e:	4b0d      	ldr	r3, [pc, #52]	; (8002e84 <SX1276GetTimeOnAir+0x1ec>)
 8002e50:	f7fd fe30 	bl	8000ab4 <__aeabi_dadd>
 8002e54:	f00b fd36 	bl	800e8c4 <floor>
 8002e58:	e772      	b.n	8002d40 <SX1276GetTimeOnAir+0xa8>
            switch( SX1276.Settings.LoRa.Bandwidth )
 8002e5a:	2600      	movs	r6, #0
 8002e5c:	2700      	movs	r7, #0
 8002e5e:	e783      	b.n	8002d68 <SX1276GetTimeOnAir+0xd0>
            double nPayload = 8 + ( ( tmp > 0 ) ? tmp : 0 );
 8002e60:	2000      	movs	r0, #0
 8002e62:	4903      	ldr	r1, [pc, #12]	; (8002e70 <SX1276GetTimeOnAir+0x1d8>)
 8002e64:	e7e6      	b.n	8002e34 <SX1276GetTimeOnAir+0x19c>
 8002e66:	46c0      	nop			; (mov r8, r8)
 8002e68:	20001558 	.word	0x20001558
 8002e6c:	3ff00000 	.word	0x3ff00000
 8002e70:	40200000 	.word	0x40200000
 8002e74:	408f4000 	.word	0x408f4000
 8002e78:	0800eb18 	.word	0x0800eb18
 8002e7c:	40110000 	.word	0x40110000
 8002e80:	d916872b 	.word	0xd916872b
 8002e84:	3feff7ce 	.word	0x3feff7ce

08002e88 <SX1276ReadRssi>:
{
 8002e88:	b510      	push	{r4, lr}
    switch( modem )
 8002e8a:	2800      	cmp	r0, #0
 8002e8c:	d004      	beq.n	8002e98 <SX1276ReadRssi+0x10>
 8002e8e:	2801      	cmp	r0, #1
 8002e90:	d00a      	beq.n	8002ea8 <SX1276ReadRssi+0x20>
        rssi = -1;
 8002e92:	2001      	movs	r0, #1
 8002e94:	4240      	negs	r0, r0
 8002e96:	e006      	b.n	8002ea6 <SX1276ReadRssi+0x1e>
        rssi = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 8002e98:	2011      	movs	r0, #17
 8002e9a:	f7ff fea7 	bl	8002bec <SX1276Read>
 8002e9e:	0840      	lsrs	r0, r0, #1
 8002ea0:	b2c0      	uxtb	r0, r0
 8002ea2:	4240      	negs	r0, r0
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
 8002ea4:	b200      	sxth	r0, r0
}
 8002ea6:	bd10      	pop	{r4, pc}
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8002ea8:	4a06      	ldr	r2, [pc, #24]	; (8002ec4 <SX1276ReadRssi+0x3c>)
 8002eaa:	4b07      	ldr	r3, [pc, #28]	; (8002ec8 <SX1276ReadRssi+0x40>)
 8002eac:	6892      	ldr	r2, [r2, #8]
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
 8002eae:	201b      	movs	r0, #27
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d903      	bls.n	8002ebc <SX1276ReadRssi+0x34>
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
 8002eb4:	f7ff fe9a 	bl	8002bec <SX1276Read>
 8002eb8:	389d      	subs	r0, #157	; 0x9d
 8002eba:	e7f3      	b.n	8002ea4 <SX1276ReadRssi+0x1c>
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
 8002ebc:	f7ff fe96 	bl	8002bec <SX1276Read>
 8002ec0:	38a4      	subs	r0, #164	; 0xa4
 8002ec2:	e7ef      	b.n	8002ea4 <SX1276ReadRssi+0x1c>
 8002ec4:	20001558 	.word	0x20001558
 8002ec8:	1f4add40 	.word	0x1f4add40

08002ecc <SX1276SetOpMode.part.2>:
void SX1276SetOpMode( uint8_t opMode )
 8002ecc:	b510      	push	{r4, lr}
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 8002ece:	2001      	movs	r0, #1
 8002ed0:	f7ff fe8c 	bl	8002bec <SX1276Read>
 8002ed4:	21f8      	movs	r1, #248	; 0xf8
 8002ed6:	4001      	ands	r1, r0
 8002ed8:	2001      	movs	r0, #1
 8002eda:	f7ff fe34 	bl	8002b46 <SX1276Write>
      LoRaBoardCallbacks->SX1276BoardSetAntSwLowPower( true );
 8002ede:	4c05      	ldr	r4, [pc, #20]	; (8002ef4 <SX1276SetOpMode.part.2+0x28>)
 8002ee0:	2001      	movs	r0, #1
 8002ee2:	6823      	ldr	r3, [r4, #0]
 8002ee4:	691b      	ldr	r3, [r3, #16]
 8002ee6:	4798      	blx	r3
      LoRaBoardCallbacks->SX1276BoardSetXO( RESET ); 
 8002ee8:	6823      	ldr	r3, [r4, #0]
 8002eea:	2000      	movs	r0, #0
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4798      	blx	r3
}
 8002ef0:	bd10      	pop	{r4, pc}
 8002ef2:	46c0      	nop			; (mov r8, r8)
 8002ef4:	2000026c 	.word	0x2000026c

08002ef8 <SX1276SetSleep>:
{
 8002ef8:	b510      	push	{r4, lr}
    TimerStop( &RxTimeoutTimer );
 8002efa:	480a      	ldr	r0, [pc, #40]	; (8002f24 <SX1276SetSleep+0x2c>)
 8002efc:	f009 fd4a 	bl	800c994 <TimerStop>
    TimerStop( &TxTimeoutTimer );
 8002f00:	4809      	ldr	r0, [pc, #36]	; (8002f28 <SX1276SetSleep+0x30>)
 8002f02:	f009 fd47 	bl	800c994 <TimerStop>
    TimerStop( &RxTimeoutSyncWord );
 8002f06:	4809      	ldr	r0, [pc, #36]	; (8002f2c <SX1276SetSleep+0x34>)
 8002f08:	f009 fd44 	bl	800c994 <TimerStop>
 8002f0c:	f7ff ffde 	bl	8002ecc <SX1276SetOpMode.part.2>
    LoRaBoardCallbacks->SX1276BoardSetXO( RESET );
 8002f10:	4b07      	ldr	r3, [pc, #28]	; (8002f30 <SX1276SetSleep+0x38>)
 8002f12:	2000      	movs	r0, #0
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4798      	blx	r3
    SX1276.Settings.State = RF_IDLE;
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	4b05      	ldr	r3, [pc, #20]	; (8002f34 <SX1276SetSleep+0x3c>)
 8002f1e:	711a      	strb	r2, [r3, #4]
}
 8002f20:	bd10      	pop	{r4, pc}
 8002f22:	46c0      	nop			; (mov r8, r8)
 8002f24:	200015c0 	.word	0x200015c0
 8002f28:	20001528 	.word	0x20001528
 8002f2c:	20001540 	.word	0x20001540
 8002f30:	2000026c 	.word	0x2000026c
 8002f34:	20001558 	.word	0x20001558

08002f38 <SX1276SetOpMode>:
{
 8002f38:	b570      	push	{r4, r5, r6, lr}
 8002f3a:	1e04      	subs	r4, r0, #0
    if( opMode == RF_OPMODE_SLEEP )
 8002f3c:	d102      	bne.n	8002f44 <SX1276SetOpMode+0xc>
 8002f3e:	f7ff ffc5 	bl	8002ecc <SX1276SetOpMode.part.2>
}
 8002f42:	bd70      	pop	{r4, r5, r6, pc}
      LoRaBoardCallbacks->SX1276BoardSetXO( SET ); 
 8002f44:	4d0c      	ldr	r5, [pc, #48]	; (8002f78 <SX1276SetOpMode+0x40>)
 8002f46:	2001      	movs	r0, #1
 8002f48:	682b      	ldr	r3, [r5, #0]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4798      	blx	r3
      LoRaBoardCallbacks->SX1276BoardSetAntSwLowPower( false );
 8002f4e:	682b      	ldr	r3, [r5, #0]
 8002f50:	2000      	movs	r0, #0
 8002f52:	691b      	ldr	r3, [r3, #16]
 8002f54:	4798      	blx	r3
      LoRaBoardCallbacks->SX1276BoardSetAntSw( opMode );
 8002f56:	682b      	ldr	r3, [r5, #0]
 8002f58:	0020      	movs	r0, r4
 8002f5a:	695b      	ldr	r3, [r3, #20]
 8002f5c:	4798      	blx	r3
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 8002f5e:	2001      	movs	r0, #1
 8002f60:	f7ff fe44 	bl	8002bec <SX1276Read>
 8002f64:	2307      	movs	r3, #7
 8002f66:	0001      	movs	r1, r0
 8002f68:	4399      	bics	r1, r3
 8002f6a:	4321      	orrs	r1, r4
 8002f6c:	b2c9      	uxtb	r1, r1
 8002f6e:	2001      	movs	r0, #1
 8002f70:	f7ff fde9 	bl	8002b46 <SX1276Write>
}
 8002f74:	e7e5      	b.n	8002f42 <SX1276SetOpMode+0xa>
 8002f76:	46c0      	nop			; (mov r8, r8)
 8002f78:	2000026c 	.word	0x2000026c

08002f7c <SX1276SetStby>:
{
 8002f7c:	b510      	push	{r4, lr}
    TimerStop( &RxTimeoutTimer );
 8002f7e:	4808      	ldr	r0, [pc, #32]	; (8002fa0 <SX1276SetStby+0x24>)
 8002f80:	f009 fd08 	bl	800c994 <TimerStop>
    TimerStop( &TxTimeoutTimer );
 8002f84:	4807      	ldr	r0, [pc, #28]	; (8002fa4 <SX1276SetStby+0x28>)
 8002f86:	f009 fd05 	bl	800c994 <TimerStop>
    TimerStop( &RxTimeoutSyncWord );
 8002f8a:	4807      	ldr	r0, [pc, #28]	; (8002fa8 <SX1276SetStby+0x2c>)
 8002f8c:	f009 fd02 	bl	800c994 <TimerStop>
    SX1276SetOpMode( RF_OPMODE_STANDBY );
 8002f90:	2001      	movs	r0, #1
 8002f92:	f7ff ffd1 	bl	8002f38 <SX1276SetOpMode>
    SX1276.Settings.State = RF_IDLE;
 8002f96:	2200      	movs	r2, #0
 8002f98:	4b04      	ldr	r3, [pc, #16]	; (8002fac <SX1276SetStby+0x30>)
 8002f9a:	711a      	strb	r2, [r3, #4]
}
 8002f9c:	bd10      	pop	{r4, pc}
 8002f9e:	46c0      	nop			; (mov r8, r8)
 8002fa0:	200015c0 	.word	0x200015c0
 8002fa4:	20001528 	.word	0x20001528
 8002fa8:	20001540 	.word	0x20001540
 8002fac:	20001558 	.word	0x20001558

08002fb0 <SX1276SetRx>:
{
 8002fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fb2:	0006      	movs	r6, r0
    TimerStop( &TxTimeoutTimer );
 8002fb4:	4876      	ldr	r0, [pc, #472]	; (8003190 <SX1276SetRx+0x1e0>)
 8002fb6:	f009 fced 	bl	800c994 <TimerStop>
    switch( SX1276.Settings.Modem )
 8002fba:	4c76      	ldr	r4, [pc, #472]	; (8003194 <SX1276SetRx+0x1e4>)
 8002fbc:	7965      	ldrb	r5, [r4, #5]
 8002fbe:	2d00      	cmp	r5, #0
 8002fc0:	d003      	beq.n	8002fca <SX1276SetRx+0x1a>
 8002fc2:	2d01      	cmp	r5, #1
 8002fc4:	d048      	beq.n	8003058 <SX1276SetRx+0xa8>
    bool rxContinuous = false;
 8002fc6:	2700      	movs	r7, #0
 8002fc8:	e024      	b.n	8003014 <SX1276SetRx+0x64>
            rxContinuous = SX1276.Settings.Fsk.RxContinuous;
 8002fca:	1de3      	adds	r3, r4, #7
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8002fcc:	2040      	movs	r0, #64	; 0x40
            rxContinuous = SX1276.Settings.Fsk.RxContinuous;
 8002fce:	7fdf      	ldrb	r7, [r3, #31]
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8002fd0:	f7ff fe0c 	bl	8002bec <SX1276Read>
                                                                            RF_DIOMAPPING1_DIO0_00 |
 8002fd4:	2103      	movs	r1, #3
 8002fd6:	4008      	ands	r0, r1
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8002fd8:	3109      	adds	r1, #9
 8002fda:	4301      	orrs	r1, r0
 8002fdc:	2040      	movs	r0, #64	; 0x40
 8002fde:	f7ff fdb2 	bl	8002b46 <SX1276Write>
            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 8002fe2:	2041      	movs	r0, #65	; 0x41
 8002fe4:	f7ff fe02 	bl	8002bec <SX1276Read>
 8002fe8:	213f      	movs	r1, #63	; 0x3f
 8002fea:	4249      	negs	r1, r1
 8002fec:	4301      	orrs	r1, r0
 8002fee:	b2c9      	uxtb	r1, r1
 8002ff0:	2041      	movs	r0, #65	; 0x41
 8002ff2:	f7ff fda8 	bl	8002b46 <SX1276Write>
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 8002ff6:	2035      	movs	r0, #53	; 0x35
 8002ff8:	f7ff fdf8 	bl	8002bec <SX1276Read>
 8002ffc:	233f      	movs	r3, #63	; 0x3f
 8002ffe:	4018      	ands	r0, r3
 8003000:	0023      	movs	r3, r4
 8003002:	333e      	adds	r3, #62	; 0x3e
 8003004:	7018      	strb	r0, [r3, #0]
            SX1276Write( REG_RXCONFIG, RF_RXCONFIG_AFCAUTO_ON | RF_RXCONFIG_AGCAUTO_ON | RF_RXCONFIG_RXTRIGER_PREAMBLEDETECT );
 8003006:	211e      	movs	r1, #30
 8003008:	200d      	movs	r0, #13
 800300a:	f7ff fd9c 	bl	8002b46 <SX1276Write>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 800300e:	8625      	strh	r5, [r4, #48]	; 0x30
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8003010:	87a5      	strh	r5, [r4, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = 0;
 8003012:	8765      	strh	r5, [r4, #58]	; 0x3a
    memset( RxTxBuffer, 0, ( size_t )RX_BUFFER_SIZE );
 8003014:	2280      	movs	r2, #128	; 0x80
 8003016:	2100      	movs	r1, #0
 8003018:	0052      	lsls	r2, r2, #1
 800301a:	485f      	ldr	r0, [pc, #380]	; (8003198 <SX1276SetRx+0x1e8>)
 800301c:	f00a ffb3 	bl	800df86 <memset>
    SX1276.Settings.State = RF_RX_RUNNING;
 8003020:	2301      	movs	r3, #1
 8003022:	7123      	strb	r3, [r4, #4]
    if( timeout != 0 )
 8003024:	2e00      	cmp	r6, #0
 8003026:	d007      	beq.n	8003038 <SX1276SetRx+0x88>
        TimerSetValue( &RxTimeoutTimer, timeout );
 8003028:	4d5c      	ldr	r5, [pc, #368]	; (800319c <SX1276SetRx+0x1ec>)
 800302a:	0031      	movs	r1, r6
 800302c:	0028      	movs	r0, r5
 800302e:	f009 fcdd 	bl	800c9ec <TimerSetValue>
        TimerStart( &RxTimeoutTimer );
 8003032:	0028      	movs	r0, r5
 8003034:	f009 fc32 	bl	800c89c <TimerStart>
    if( SX1276.Settings.Modem == MODEM_FSK )
 8003038:	7963      	ldrb	r3, [r4, #5]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d000      	beq.n	8003040 <SX1276SetRx+0x90>
 800303e:	e0a0      	b.n	8003182 <SX1276SetRx+0x1d2>
        SX1276SetOpMode( RF_OPMODE_RECEIVER );
 8003040:	2005      	movs	r0, #5
 8003042:	f7ff ff79 	bl	8002f38 <SX1276SetOpMode>
        TimerSetValue( &RxTimeoutSyncWord, SX1276.Settings.Fsk.RxSingleTimeout );
 8003046:	4d56      	ldr	r5, [pc, #344]	; (80031a0 <SX1276SetRx+0x1f0>)
 8003048:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800304a:	0028      	movs	r0, r5
 800304c:	f009 fcce 	bl	800c9ec <TimerSetValue>
        TimerStart( &RxTimeoutSyncWord );
 8003050:	0028      	movs	r0, r5
 8003052:	f009 fc23 	bl	800c89c <TimerStart>
}
 8003056:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if( SX1276.Settings.LoRa.IqInverted == true )
 8003058:	0023      	movs	r3, r4
 800305a:	3355      	adds	r3, #85	; 0x55
 800305c:	781b      	ldrb	r3, [r3, #0]
 800305e:	2741      	movs	r7, #65	; 0x41
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
 8003060:	2033      	movs	r0, #51	; 0x33
            if( SX1276.Settings.LoRa.IqInverted == true )
 8003062:	2b00      	cmp	r3, #0
 8003064:	d023      	beq.n	80030ae <SX1276SetRx+0xfe>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
 8003066:	f7ff fdc1 	bl	8002bec <SX1276Read>
 800306a:	4338      	orrs	r0, r7
 800306c:	b2c1      	uxtb	r1, r0
 800306e:	2033      	movs	r0, #51	; 0x33
 8003070:	f7ff fd69 	bl	8002b46 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 8003074:	2119      	movs	r1, #25
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 8003076:	203b      	movs	r0, #59	; 0x3b
 8003078:	f7ff fd65 	bl	8002b46 <SX1276Write>
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
 800307c:	6c63      	ldr	r3, [r4, #68]	; 0x44
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
 800307e:	2031      	movs	r0, #49	; 0x31
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
 8003080:	2b08      	cmp	r3, #8
 8003082:	d86d      	bhi.n	8003160 <SX1276SetRx+0x1b0>
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
 8003084:	f7ff fdb2 	bl	8002bec <SX1276Read>
 8003088:	217f      	movs	r1, #127	; 0x7f
 800308a:	4001      	ands	r1, r0
 800308c:	2031      	movs	r0, #49	; 0x31
 800308e:	f7ff fd5a 	bl	8002b46 <SX1276Write>
                SX1276Write( REG_LR_IFFREQ2, 0x00 );
 8003092:	2030      	movs	r0, #48	; 0x30
 8003094:	2100      	movs	r1, #0
 8003096:	f7ff fd56 	bl	8002b46 <SX1276Write>
                switch( SX1276.Settings.LoRa.Bandwidth )
 800309a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800309c:	2808      	cmp	r0, #8
 800309e:	d81a      	bhi.n	80030d6 <SX1276SetRx+0x126>
 80030a0:	f7fd f832 	bl	8000108 <__gnu_thumb1_case_uqi>
 80030a4:	443d3610 	.word	0x443d3610
 80030a8:	5959524b 	.word	0x5959524b
 80030ac:	59          	.byte	0x59
 80030ad:	00          	.byte	0x00
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 80030ae:	f7ff fd9d 	bl	8002bec <SX1276Read>
 80030b2:	0001      	movs	r1, r0
 80030b4:	43b9      	bics	r1, r7
 80030b6:	4329      	orrs	r1, r5
 80030b8:	b2c9      	uxtb	r1, r1
 80030ba:	2033      	movs	r0, #51	; 0x33
 80030bc:	f7ff fd43 	bl	8002b46 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 80030c0:	211d      	movs	r1, #29
 80030c2:	e7d8      	b.n	8003076 <SX1276SetRx+0xc6>
                    SX1276Write( REG_LR_IFFREQ1, 0x48 );
 80030c4:	2148      	movs	r1, #72	; 0x48
 80030c6:	202f      	movs	r0, #47	; 0x2f
 80030c8:	f7ff fd3d 	bl	8002b46 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 7810 );
 80030cc:	68a3      	ldr	r3, [r4, #8]
 80030ce:	4a35      	ldr	r2, [pc, #212]	; (80031a4 <SX1276SetRx+0x1f4>)
                    SX1276SetChannel(SX1276.Settings.Channel + 41670 );
 80030d0:	1898      	adds	r0, r3, r2
 80030d2:	f7ff fd41 	bl	8002b58 <SX1276SetChannel>
            rxContinuous = SX1276.Settings.LoRa.RxContinuous;
 80030d6:	0023      	movs	r3, r4
 80030d8:	3356      	adds	r3, #86	; 0x56
 80030da:	781f      	ldrb	r7, [r3, #0]
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 80030dc:	0023      	movs	r3, r4
 80030de:	3353      	adds	r3, #83	; 0x53
 80030e0:	781b      	ldrb	r3, [r3, #0]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d044      	beq.n	8003170 <SX1276SetRx+0x1c0>
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 80030e6:	211d      	movs	r1, #29
 80030e8:	2011      	movs	r0, #17
 80030ea:	f7ff fd2c 	bl	8002b46 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK  ) | RFLR_DIOMAPPING1_DIO0_00 | RFLR_DIOMAPPING1_DIO2_00 );
 80030ee:	2040      	movs	r0, #64	; 0x40
 80030f0:	f7ff fd7c 	bl	8002bec <SX1276Read>
 80030f4:	2133      	movs	r1, #51	; 0x33
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 80030f6:	4001      	ands	r1, r0
 80030f8:	2040      	movs	r0, #64	; 0x40
 80030fa:	f7ff fd24 	bl	8002b46 <SX1276Write>
            SX1276Write( REG_LR_FIFORXBASEADDR, 0 );
 80030fe:	2100      	movs	r1, #0
 8003100:	200f      	movs	r0, #15
 8003102:	f7ff fd20 	bl	8002b46 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 8003106:	2100      	movs	r1, #0
 8003108:	200d      	movs	r0, #13
 800310a:	f7ff fd1c 	bl	8002b46 <SX1276Write>
        break;
 800310e:	e781      	b.n	8003014 <SX1276SetRx+0x64>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8003110:	2144      	movs	r1, #68	; 0x44
 8003112:	202f      	movs	r0, #47	; 0x2f
 8003114:	f7ff fd17 	bl	8002b46 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 10420 );
 8003118:	68a3      	ldr	r3, [r4, #8]
 800311a:	4a23      	ldr	r2, [pc, #140]	; (80031a8 <SX1276SetRx+0x1f8>)
 800311c:	e7d8      	b.n	80030d0 <SX1276SetRx+0x120>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 800311e:	2144      	movs	r1, #68	; 0x44
 8003120:	202f      	movs	r0, #47	; 0x2f
 8003122:	f7ff fd10 	bl	8002b46 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 15620 );
 8003126:	68a3      	ldr	r3, [r4, #8]
 8003128:	4a20      	ldr	r2, [pc, #128]	; (80031ac <SX1276SetRx+0x1fc>)
 800312a:	e7d1      	b.n	80030d0 <SX1276SetRx+0x120>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 800312c:	2144      	movs	r1, #68	; 0x44
 800312e:	202f      	movs	r0, #47	; 0x2f
 8003130:	f7ff fd09 	bl	8002b46 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 20830 );
 8003134:	68a3      	ldr	r3, [r4, #8]
 8003136:	4a1e      	ldr	r2, [pc, #120]	; (80031b0 <SX1276SetRx+0x200>)
 8003138:	e7ca      	b.n	80030d0 <SX1276SetRx+0x120>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 800313a:	2144      	movs	r1, #68	; 0x44
 800313c:	202f      	movs	r0, #47	; 0x2f
 800313e:	f7ff fd02 	bl	8002b46 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 31250 );
 8003142:	68a3      	ldr	r3, [r4, #8]
 8003144:	4a1b      	ldr	r2, [pc, #108]	; (80031b4 <SX1276SetRx+0x204>)
 8003146:	e7c3      	b.n	80030d0 <SX1276SetRx+0x120>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8003148:	2144      	movs	r1, #68	; 0x44
 800314a:	202f      	movs	r0, #47	; 0x2f
 800314c:	f7ff fcfb 	bl	8002b46 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 41670 );
 8003150:	68a3      	ldr	r3, [r4, #8]
 8003152:	4a19      	ldr	r2, [pc, #100]	; (80031b8 <SX1276SetRx+0x208>)
 8003154:	e7bc      	b.n	80030d0 <SX1276SetRx+0x120>
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 8003156:	2140      	movs	r1, #64	; 0x40
 8003158:	202f      	movs	r0, #47	; 0x2f
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) | 0x80 );
 800315a:	f7ff fcf4 	bl	8002b46 <SX1276Write>
 800315e:	e7ba      	b.n	80030d6 <SX1276SetRx+0x126>
 8003160:	f7ff fd44 	bl	8002bec <SX1276Read>
 8003164:	2180      	movs	r1, #128	; 0x80
 8003166:	4249      	negs	r1, r1
 8003168:	4301      	orrs	r1, r0
 800316a:	b2c9      	uxtb	r1, r1
 800316c:	2031      	movs	r0, #49	; 0x31
 800316e:	e7f4      	b.n	800315a <SX1276SetRx+0x1aa>
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 8003170:	211f      	movs	r1, #31
 8003172:	2011      	movs	r0, #17
 8003174:	f7ff fce7 	bl	8002b46 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 8003178:	2040      	movs	r0, #64	; 0x40
 800317a:	f7ff fd37 	bl	8002bec <SX1276Read>
 800317e:	213f      	movs	r1, #63	; 0x3f
 8003180:	e7b9      	b.n	80030f6 <SX1276SetRx+0x146>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER );
 8003182:	2005      	movs	r0, #5
        if( rxContinuous == true )
 8003184:	2f00      	cmp	r7, #0
 8003186:	d100      	bne.n	800318a <SX1276SetRx+0x1da>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
 8003188:	2006      	movs	r0, #6
 800318a:	f7ff fed5 	bl	8002f38 <SX1276SetOpMode>
}
 800318e:	e762      	b.n	8003056 <SX1276SetRx+0xa6>
 8003190:	20001528 	.word	0x20001528
 8003194:	20001558 	.word	0x20001558
 8003198:	20000274 	.word	0x20000274
 800319c:	200015c0 	.word	0x200015c0
 80031a0:	20001540 	.word	0x20001540
 80031a4:	00001e82 	.word	0x00001e82
 80031a8:	000028b4 	.word	0x000028b4
 80031ac:	00003d04 	.word	0x00003d04
 80031b0:	0000515e 	.word	0x0000515e
 80031b4:	00007a12 	.word	0x00007a12
 80031b8:	0000a2c6 	.word	0x0000a2c6

080031bc <SX1276SetTx>:
{
 80031bc:	b570      	push	{r4, r5, r6, lr}
 80031be:	0004      	movs	r4, r0
    TimerStop( &RxTimeoutTimer );
 80031c0:	4826      	ldr	r0, [pc, #152]	; (800325c <SX1276SetTx+0xa0>)
 80031c2:	f009 fbe7 	bl	800c994 <TimerStop>
    TimerSetValue( &TxTimeoutTimer, timeout );
 80031c6:	4d26      	ldr	r5, [pc, #152]	; (8003260 <SX1276SetTx+0xa4>)
 80031c8:	0021      	movs	r1, r4
 80031ca:	0028      	movs	r0, r5
 80031cc:	f009 fc0e 	bl	800c9ec <TimerSetValue>
    switch( SX1276.Settings.Modem )
 80031d0:	4c24      	ldr	r4, [pc, #144]	; (8003264 <SX1276SetTx+0xa8>)
 80031d2:	7963      	ldrb	r3, [r4, #5]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d00a      	beq.n	80031ee <SX1276SetTx+0x32>
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d023      	beq.n	8003224 <SX1276SetTx+0x68>
    SX1276.Settings.State = RF_TX_RUNNING;
 80031dc:	2302      	movs	r3, #2
    TimerStart( &TxTimeoutTimer );
 80031de:	0028      	movs	r0, r5
    SX1276.Settings.State = RF_TX_RUNNING;
 80031e0:	7123      	strb	r3, [r4, #4]
    TimerStart( &TxTimeoutTimer );
 80031e2:	f009 fb5b 	bl	800c89c <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 80031e6:	2003      	movs	r0, #3
 80031e8:	f7ff fea6 	bl	8002f38 <SX1276SetOpMode>
}
 80031ec:	bd70      	pop	{r4, r5, r6, pc}
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 80031ee:	2040      	movs	r0, #64	; 0x40
 80031f0:	f7ff fcfc 	bl	8002bec <SX1276Read>
                                                                            RF_DIOMAPPING1_DIO1_MASK &
 80031f4:	2103      	movs	r1, #3
 80031f6:	4008      	ands	r0, r1
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 80031f8:	310d      	adds	r1, #13
 80031fa:	4301      	orrs	r1, r0
 80031fc:	2040      	movs	r0, #64	; 0x40
 80031fe:	f7ff fca2 	bl	8002b46 <SX1276Write>
            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 8003202:	2041      	movs	r0, #65	; 0x41
 8003204:	f7ff fcf2 	bl	8002bec <SX1276Read>
 8003208:	213e      	movs	r1, #62	; 0x3e
 800320a:	4001      	ands	r1, r0
 800320c:	2041      	movs	r0, #65	; 0x41
 800320e:	f7ff fc9a 	bl	8002b46 <SX1276Write>
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 8003212:	2035      	movs	r0, #53	; 0x35
 8003214:	f7ff fcea 	bl	8002bec <SX1276Read>
 8003218:	233f      	movs	r3, #63	; 0x3f
 800321a:	4018      	ands	r0, r3
 800321c:	0023      	movs	r3, r4
 800321e:	333e      	adds	r3, #62	; 0x3e
 8003220:	7018      	strb	r0, [r3, #0]
        break;
 8003222:	e7db      	b.n	80031dc <SX1276SetTx+0x20>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8003224:	0023      	movs	r3, r4
 8003226:	3353      	adds	r3, #83	; 0x53
 8003228:	781b      	ldrb	r3, [r3, #0]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d00d      	beq.n	800324a <SX1276SetTx+0x8e>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 800322e:	21f5      	movs	r1, #245	; 0xf5
 8003230:	2011      	movs	r0, #17
 8003232:	f7ff fc88 	bl	8002b46 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK ) | RFLR_DIOMAPPING1_DIO0_01 | RFLR_DIOMAPPING1_DIO2_00 );
 8003236:	2040      	movs	r0, #64	; 0x40
 8003238:	f7ff fcd8 	bl	8002bec <SX1276Read>
 800323c:	2133      	movs	r1, #51	; 0x33
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 800323e:	4001      	ands	r1, r0
 8003240:	2040      	movs	r0, #64	; 0x40
 8003242:	4301      	orrs	r1, r0
 8003244:	f7ff fc7f 	bl	8002b46 <SX1276Write>
 8003248:	e7c8      	b.n	80031dc <SX1276SetTx+0x20>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 800324a:	21f7      	movs	r1, #247	; 0xf7
 800324c:	2011      	movs	r0, #17
 800324e:	f7ff fc7a 	bl	8002b46 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 8003252:	2040      	movs	r0, #64	; 0x40
 8003254:	f7ff fcca 	bl	8002bec <SX1276Read>
 8003258:	213f      	movs	r1, #63	; 0x3f
 800325a:	e7f0      	b.n	800323e <SX1276SetTx+0x82>
 800325c:	200015c0 	.word	0x200015c0
 8003260:	20001528 	.word	0x20001528
 8003264:	20001558 	.word	0x20001558

08003268 <SX1276StartCad>:
{
 8003268:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.Modem )
 800326a:	4c0b      	ldr	r4, [pc, #44]	; (8003298 <SX1276StartCad+0x30>)
 800326c:	7963      	ldrb	r3, [r4, #5]
 800326e:	2b01      	cmp	r3, #1
 8003270:	d110      	bne.n	8003294 <SX1276StartCad+0x2c>
            SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8003272:	21fa      	movs	r1, #250	; 0xfa
 8003274:	2011      	movs	r0, #17
 8003276:	f7ff fc66 	bl	8002b46 <SX1276Write>
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO3_MASK ) | RFLR_DIOMAPPING1_DIO3_00 );
 800327a:	2040      	movs	r0, #64	; 0x40
 800327c:	f7ff fcb6 	bl	8002bec <SX1276Read>
 8003280:	2503      	movs	r5, #3
 8003282:	43a8      	bics	r0, r5
 8003284:	b2c1      	uxtb	r1, r0
 8003286:	2040      	movs	r0, #64	; 0x40
 8003288:	f7ff fc5d 	bl	8002b46 <SX1276Write>
            SX1276SetOpMode( RFLR_OPMODE_CAD );
 800328c:	2007      	movs	r0, #7
            SX1276.Settings.State = RF_CAD;
 800328e:	7125      	strb	r5, [r4, #4]
            SX1276SetOpMode( RFLR_OPMODE_CAD );
 8003290:	f7ff fe52 	bl	8002f38 <SX1276SetOpMode>
}
 8003294:	bd70      	pop	{r4, r5, r6, pc}
 8003296:	46c0      	nop			; (mov r8, r8)
 8003298:	20001558 	.word	0x20001558

0800329c <SX1276SetModem>:
{
 800329c:	b510      	push	{r4, lr}
 800329e:	0004      	movs	r4, r0
    if( ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_ON ) != 0 )
 80032a0:	2001      	movs	r0, #1
 80032a2:	f7ff fca3 	bl	8002bec <SX1276Read>
 80032a6:	4b19      	ldr	r3, [pc, #100]	; (800330c <SX1276SetModem+0x70>)
 80032a8:	0602      	lsls	r2, r0, #24
 80032aa:	d51a      	bpl.n	80032e2 <SX1276SetModem+0x46>
        SX1276.Settings.Modem = MODEM_LORA;
 80032ac:	2201      	movs	r2, #1
        SX1276.Settings.Modem = MODEM_FSK;
 80032ae:	715a      	strb	r2, [r3, #5]
    if( SX1276.Settings.Modem == modem )
 80032b0:	795a      	ldrb	r2, [r3, #5]
 80032b2:	42a2      	cmp	r2, r4
 80032b4:	d014      	beq.n	80032e0 <SX1276SetModem+0x44>
    SX1276.Settings.Modem = modem;
 80032b6:	715c      	strb	r4, [r3, #5]
    switch( SX1276.Settings.Modem )
 80032b8:	2c01      	cmp	r4, #1
 80032ba:	d014      	beq.n	80032e6 <SX1276SetModem+0x4a>
 80032bc:	f7ff fe06 	bl	8002ecc <SX1276SetOpMode.part.2>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_OFF );
 80032c0:	2001      	movs	r0, #1
 80032c2:	f7ff fc93 	bl	8002bec <SX1276Read>
 80032c6:	217f      	movs	r1, #127	; 0x7f
 80032c8:	4001      	ands	r1, r0
 80032ca:	2001      	movs	r0, #1
 80032cc:	f7ff fc3b 	bl	8002b46 <SX1276Write>
        SX1276Write( REG_DIOMAPPING1, 0x00 );
 80032d0:	2100      	movs	r1, #0
 80032d2:	2040      	movs	r0, #64	; 0x40
 80032d4:	f7ff fc37 	bl	8002b46 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x30 ); // DIO5=ModeReady
 80032d8:	2130      	movs	r1, #48	; 0x30
        SX1276Write( REG_DIOMAPPING2, 0x00 );
 80032da:	2041      	movs	r0, #65	; 0x41
 80032dc:	f7ff fc33 	bl	8002b46 <SX1276Write>
}
 80032e0:	bd10      	pop	{r4, pc}
        SX1276.Settings.Modem = MODEM_FSK;
 80032e2:	2200      	movs	r2, #0
 80032e4:	e7e3      	b.n	80032ae <SX1276SetModem+0x12>
 80032e6:	f7ff fdf1 	bl	8002ecc <SX1276SetOpMode.part.2>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_ON );
 80032ea:	0020      	movs	r0, r4
 80032ec:	f7ff fc7e 	bl	8002bec <SX1276Read>
 80032f0:	2180      	movs	r1, #128	; 0x80
 80032f2:	4249      	negs	r1, r1
 80032f4:	4301      	orrs	r1, r0
 80032f6:	b2c9      	uxtb	r1, r1
 80032f8:	0020      	movs	r0, r4
 80032fa:	f7ff fc24 	bl	8002b46 <SX1276Write>
        SX1276Write( REG_DIOMAPPING1, 0x00 );
 80032fe:	2100      	movs	r1, #0
 8003300:	2040      	movs	r0, #64	; 0x40
 8003302:	f7ff fc20 	bl	8002b46 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x00 );
 8003306:	2100      	movs	r1, #0
 8003308:	e7e7      	b.n	80032da <SX1276SetModem+0x3e>
 800330a:	46c0      	nop			; (mov r8, r8)
 800330c:	20001558 	.word	0x20001558

08003310 <SX1276Init>:
{
 8003310:	b570      	push	{r4, r5, r6, lr}
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 8003312:	4c1b      	ldr	r4, [pc, #108]	; (8003380 <SX1276Init+0x70>)
    RadioEvents = events;
 8003314:	4d1b      	ldr	r5, [pc, #108]	; (8003384 <SX1276Init+0x74>)
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 8003316:	0021      	movs	r1, r4
    RadioEvents = events;
 8003318:	6068      	str	r0, [r5, #4]
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 800331a:	481b      	ldr	r0, [pc, #108]	; (8003388 <SX1276Init+0x78>)
 800331c:	f009 fab4 	bl	800c888 <TimerInit>
    TimerInit( &RxTimeoutTimer, SX1276OnTimeoutIrq );
 8003320:	0021      	movs	r1, r4
 8003322:	481a      	ldr	r0, [pc, #104]	; (800338c <SX1276Init+0x7c>)
 8003324:	f009 fab0 	bl	800c888 <TimerInit>
    TimerInit( &RxTimeoutSyncWord, SX1276OnTimeoutIrq );
 8003328:	0021      	movs	r1, r4
 800332a:	4819      	ldr	r0, [pc, #100]	; (8003390 <SX1276Init+0x80>)
 800332c:	f009 faac 	bl	800c888 <TimerInit>
    LoRaBoardCallbacks->SX1276BoardSetXO( SET );
 8003330:	682b      	ldr	r3, [r5, #0]
 8003332:	2001      	movs	r0, #1
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4798      	blx	r3
    SX1276Reset( );
 8003338:	f7ff fbbe 	bl	8002ab8 <SX1276Reset>
    RxChainCalibration( );
 800333c:	f7ff fc60 	bl	8002c00 <RxChainCalibration>
 8003340:	f7ff fdc4 	bl	8002ecc <SX1276SetOpMode.part.2>
    LoRaBoardCallbacks->SX1276BoardIoIrqInit( DioIrq );
 8003344:	682b      	ldr	r3, [r5, #0]
 8003346:	4813      	ldr	r0, [pc, #76]	; (8003394 <SX1276Init+0x84>)
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	4798      	blx	r3
 800334c:	4e12      	ldr	r6, [pc, #72]	; (8003398 <SX1276Init+0x88>)
 800334e:	0034      	movs	r4, r6
 8003350:	3648      	adds	r6, #72	; 0x48
 8003352:	3418      	adds	r4, #24
        SX1276SetModem( RadioRegsInit[i].Modem );
 8003354:	7820      	ldrb	r0, [r4, #0]
 8003356:	f7ff ffa1 	bl	800329c <SX1276SetModem>
        SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 800335a:	78a1      	ldrb	r1, [r4, #2]
 800335c:	7860      	ldrb	r0, [r4, #1]
 800335e:	3403      	adds	r4, #3
 8003360:	f7ff fbf1 	bl	8002b46 <SX1276Write>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8003364:	42b4      	cmp	r4, r6
 8003366:	d1f5      	bne.n	8003354 <SX1276Init+0x44>
    SX1276SetModem( MODEM_FSK );
 8003368:	2000      	movs	r0, #0
 800336a:	f7ff ff97 	bl	800329c <SX1276SetModem>
    SX1276.Settings.State = RF_IDLE;
 800336e:	2200      	movs	r2, #0
 8003370:	4b0a      	ldr	r3, [pc, #40]	; (800339c <SX1276Init+0x8c>)
 8003372:	711a      	strb	r2, [r3, #4]
    return ( uint32_t )LoRaBoardCallbacks->SX1276BoardGetWakeTime( ) + RADIO_WAKEUP_TIME;// BOARD_WAKEUP_TIME;
 8003374:	682b      	ldr	r3, [r5, #0]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	4798      	blx	r3
 800337a:	3002      	adds	r0, #2
}
 800337c:	bd70      	pop	{r4, r5, r6, pc}
 800337e:	46c0      	nop			; (mov r8, r8)
 8003380:	08003ff1 	.word	0x08003ff1
 8003384:	2000026c 	.word	0x2000026c
 8003388:	20001528 	.word	0x20001528
 800338c:	200015c0 	.word	0x200015c0
 8003390:	20001540 	.word	0x20001540
 8003394:	2000002c 	.word	0x2000002c
 8003398:	0800eb18 	.word	0x0800eb18
 800339c:	20001558 	.word	0x20001558

080033a0 <SX1276IsChannelFree>:
{
 80033a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
        return false;
 80033a2:	2400      	movs	r4, #0
{
 80033a4:	9301      	str	r3, [sp, #4]
    return SX1276.Settings.State;
 80033a6:	4b13      	ldr	r3, [pc, #76]	; (80033f4 <SX1276IsChannelFree+0x54>)
{
 80033a8:	0005      	movs	r5, r0
    if( SX1276GetStatus( ) != RF_IDLE )
 80033aa:	791b      	ldrb	r3, [r3, #4]
{
 80033ac:	000f      	movs	r7, r1
 80033ae:	0016      	movs	r6, r2
    if( SX1276GetStatus( ) != RF_IDLE )
 80033b0:	42a3      	cmp	r3, r4
 80033b2:	d116      	bne.n	80033e2 <SX1276IsChannelFree+0x42>
    SX1276SetModem( modem );
 80033b4:	f7ff ff72 	bl	800329c <SX1276SetModem>
    SX1276SetChannel( freq );
 80033b8:	0038      	movs	r0, r7
 80033ba:	f7ff fbcd 	bl	8002b58 <SX1276SetChannel>
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 80033be:	2005      	movs	r0, #5
 80033c0:	f7ff fdba 	bl	8002f38 <SX1276SetOpMode>
    DelayMs( 1 );
 80033c4:	2001      	movs	r0, #1
 80033c6:	f00a fa1d 	bl	800d804 <HAL_Delay>
    carrierSenseTime = TimerGetCurrentTime( );
 80033ca:	f009 fb20 	bl	800ca0e <TimerGetCurrentTime>
 80033ce:	0004      	movs	r4, r0
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 80033d0:	0020      	movs	r0, r4
 80033d2:	f009 fb22 	bl	800ca1a <TimerGetElapsedTime>
 80033d6:	9b01      	ldr	r3, [sp, #4]
 80033d8:	4298      	cmp	r0, r3
 80033da:	d304      	bcc.n	80033e6 <SX1276IsChannelFree+0x46>
    bool status = true;
 80033dc:	2401      	movs	r4, #1
    SX1276SetSleep( );
 80033de:	f7ff fd8b 	bl	8002ef8 <SX1276SetSleep>
}
 80033e2:	0020      	movs	r0, r4
 80033e4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        rssi = SX1276ReadRssi( modem );
 80033e6:	0028      	movs	r0, r5
 80033e8:	f7ff fd4e 	bl	8002e88 <SX1276ReadRssi>
        if( rssi > rssiThresh )
 80033ec:	42b0      	cmp	r0, r6
 80033ee:	ddef      	ble.n	80033d0 <SX1276IsChannelFree+0x30>
            status = false;
 80033f0:	2400      	movs	r4, #0
 80033f2:	e7f4      	b.n	80033de <SX1276IsChannelFree+0x3e>
 80033f4:	20001558 	.word	0x20001558

080033f8 <SX1276Random>:
{
 80033f8:	b570      	push	{r4, r5, r6, lr}
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 80033fa:	2400      	movs	r4, #0
    SX1276SetModem( MODEM_LORA );
 80033fc:	2001      	movs	r0, #1
 80033fe:	f7ff ff4d 	bl	800329c <SX1276SetModem>
    SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8003402:	21ff      	movs	r1, #255	; 0xff
 8003404:	2011      	movs	r0, #17
 8003406:	f7ff fb9e 	bl	8002b46 <SX1276Write>
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 800340a:	2005      	movs	r0, #5
 800340c:	f7ff fd94 	bl	8002f38 <SX1276SetOpMode>
    uint32_t rnd = 0;
 8003410:	0025      	movs	r5, r4
        DelayMs( 1 );
 8003412:	2601      	movs	r6, #1
 8003414:	0030      	movs	r0, r6
 8003416:	f00a f9f5 	bl	800d804 <HAL_Delay>
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
 800341a:	202c      	movs	r0, #44	; 0x2c
 800341c:	f7ff fbe6 	bl	8002bec <SX1276Read>
 8003420:	4030      	ands	r0, r6
 8003422:	40a0      	lsls	r0, r4
 8003424:	3401      	adds	r4, #1
 8003426:	4305      	orrs	r5, r0
    for( i = 0; i < 32; i++ )
 8003428:	2c20      	cmp	r4, #32
 800342a:	d1f3      	bne.n	8003414 <SX1276Random+0x1c>
    SX1276SetSleep( );
 800342c:	f7ff fd64 	bl	8002ef8 <SX1276SetSleep>
}
 8003430:	0028      	movs	r0, r5
 8003432:	bd70      	pop	{r4, r5, r6, pc}

08003434 <SX1276SetRxConfig>:
{
 8003434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003436:	b08d      	sub	sp, #52	; 0x34
 8003438:	9306      	str	r3, [sp, #24]
 800343a:	ab12      	add	r3, sp, #72	; 0x48
 800343c:	0016      	movs	r6, r2
 800343e:	cb04      	ldmia	r3!, {r2}
 8003440:	0004      	movs	r4, r0
 8003442:	881b      	ldrh	r3, [r3, #0]
 8003444:	9208      	str	r2, [sp, #32]
 8003446:	9301      	str	r3, [sp, #4]
 8003448:	ab14      	add	r3, sp, #80	; 0x50
 800344a:	881b      	ldrh	r3, [r3, #0]
 800344c:	aa0c      	add	r2, sp, #48	; 0x30
 800344e:	9305      	str	r3, [sp, #20]
 8003450:	ab15      	add	r3, sp, #84	; 0x54
 8003452:	781b      	ldrb	r3, [r3, #0]
 8003454:	000d      	movs	r5, r1
 8003456:	9302      	str	r3, [sp, #8]
 8003458:	ab16      	add	r3, sp, #88	; 0x58
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	9303      	str	r3, [sp, #12]
 800345e:	ab17      	add	r3, sp, #92	; 0x5c
 8003460:	781b      	ldrb	r3, [r3, #0]
 8003462:	9304      	str	r3, [sp, #16]
 8003464:	ab18      	add	r3, sp, #96	; 0x60
 8003466:	781b      	ldrb	r3, [r3, #0]
 8003468:	930a      	str	r3, [sp, #40]	; 0x28
 800346a:	ab19      	add	r3, sp, #100	; 0x64
 800346c:	781b      	ldrb	r3, [r3, #0]
 800346e:	930b      	str	r3, [sp, #44]	; 0x2c
 8003470:	2319      	movs	r3, #25
 8003472:	189b      	adds	r3, r3, r2
 8003474:	7fdf      	ldrb	r7, [r3, #31]
 8003476:	231d      	movs	r3, #29
 8003478:	189b      	adds	r3, r3, r2
 800347a:	7fdb      	ldrb	r3, [r3, #31]
 800347c:	9309      	str	r3, [sp, #36]	; 0x24
    SX1276SetModem( modem );
 800347e:	f7ff ff0d 	bl	800329c <SX1276SetModem>
    switch( modem )
 8003482:	2c00      	cmp	r4, #0
 8003484:	d004      	beq.n	8003490 <SX1276SetRxConfig+0x5c>
 8003486:	2c01      	cmp	r4, #1
 8003488:	d100      	bne.n	800348c <SX1276SetRxConfig+0x58>
 800348a:	e084      	b.n	8003596 <SX1276SetRxConfig+0x162>
}
 800348c:	b00d      	add	sp, #52	; 0x34
 800348e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 8003490:	4ca8      	ldr	r4, [pc, #672]	; (8003734 <SX1276SetRxConfig+0x300>)
            SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
 8003492:	9b08      	ldr	r3, [sp, #32]
            SX1276.Settings.Fsk.FixLen = fixLen;
 8003494:	9a02      	ldr	r2, [sp, #8]
            SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
 8003496:	61a3      	str	r3, [r4, #24]
            SX1276.Settings.Fsk.FixLen = fixLen;
 8003498:	1ce3      	adds	r3, r4, #3
 800349a:	77da      	strb	r2, [r3, #31]
            SX1276.Settings.Fsk.PayloadLen = payloadLen;
 800349c:	9a03      	ldr	r2, [sp, #12]
 800349e:	1d23      	adds	r3, r4, #4
 80034a0:	77da      	strb	r2, [r3, #31]
            SX1276.Settings.Fsk.CrcOn = crcOn;
 80034a2:	9a04      	ldr	r2, [sp, #16]
 80034a4:	1d63      	adds	r3, r4, #5
 80034a6:	77da      	strb	r2, [r3, #31]
            SX1276.Settings.Fsk.RxContinuous = rxContinuous;
 80034a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 80034aa:	1da3      	adds	r3, r4, #6
 80034ac:	77df      	strb	r7, [r3, #31]
            SX1276.Settings.Fsk.RxContinuous = rxContinuous;
 80034ae:	1de3      	adds	r3, r4, #7
 80034b0:	77da      	strb	r2, [r3, #31]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 80034b2:	9b01      	ldr	r3, [sp, #4]
            SX1276.Settings.Fsk.Datarate = datarate;
 80034b4:	61e6      	str	r6, [r4, #28]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 80034b6:	8423      	strh	r3, [r4, #32]
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 80034b8:	6165      	str	r5, [r4, #20]
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )( symbTimeout * ( ( 1.0 / ( double )datarate ) * 8.0 ) * 1000 );
 80034ba:	0030      	movs	r0, r6
 80034bc:	f7ff f84a 	bl	8002554 <__aeabi_ui2d>
 80034c0:	0002      	movs	r2, r0
 80034c2:	000b      	movs	r3, r1
 80034c4:	0006      	movs	r6, r0
 80034c6:	000f      	movs	r7, r1
 80034c8:	2000      	movs	r0, #0
 80034ca:	499b      	ldr	r1, [pc, #620]	; (8003738 <SX1276SetRxConfig+0x304>)
 80034cc:	f7fd fe0e 	bl	80010ec <__aeabi_ddiv>
 80034d0:	2200      	movs	r2, #0
 80034d2:	4b9a      	ldr	r3, [pc, #616]	; (800373c <SX1276SetRxConfig+0x308>)
 80034d4:	f7fe fa14 	bl	8001900 <__aeabi_dmul>
 80034d8:	9006      	str	r0, [sp, #24]
 80034da:	9107      	str	r1, [sp, #28]
 80034dc:	9805      	ldr	r0, [sp, #20]
 80034de:	f7fe ffff 	bl	80024e0 <__aeabi_i2d>
 80034e2:	0002      	movs	r2, r0
 80034e4:	000b      	movs	r3, r1
 80034e6:	9806      	ldr	r0, [sp, #24]
 80034e8:	9907      	ldr	r1, [sp, #28]
 80034ea:	f7fe fa09 	bl	8001900 <__aeabi_dmul>
 80034ee:	2200      	movs	r2, #0
 80034f0:	4b93      	ldr	r3, [pc, #588]	; (8003740 <SX1276SetRxConfig+0x30c>)
 80034f2:	f7fe fa05 	bl	8001900 <__aeabi_dmul>
 80034f6:	f7fc fff9 	bl	80004ec <__aeabi_d2uiz>
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 80034fa:	0032      	movs	r2, r6
 80034fc:	003b      	movs	r3, r7
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )( symbTimeout * ( ( 1.0 / ( double )datarate ) * 8.0 ) * 1000 );
 80034fe:	62e0      	str	r0, [r4, #44]	; 0x2c
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 8003500:	4990      	ldr	r1, [pc, #576]	; (8003744 <SX1276SetRxConfig+0x310>)
 8003502:	2000      	movs	r0, #0
 8003504:	f7fd fdf2 	bl	80010ec <__aeabi_ddiv>
 8003508:	f7fc fff0 	bl	80004ec <__aeabi_d2uiz>
 800350c:	b284      	uxth	r4, r0
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 800350e:	0a21      	lsrs	r1, r4, #8
 8003510:	2002      	movs	r0, #2
 8003512:	f7ff fb18 	bl	8002b46 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 8003516:	b2e1      	uxtb	r1, r4
 8003518:	2003      	movs	r0, #3
 800351a:	f7ff fb14 	bl	8002b46 <SX1276Write>
            SX1276Write( REG_RXBW, GetFskBandwidthRegValue( bandwidth ) );
 800351e:	0028      	movs	r0, r5
 8003520:	f7ff fa9c 	bl	8002a5c <GetFskBandwidthRegValue>
 8003524:	0001      	movs	r1, r0
 8003526:	2012      	movs	r0, #18
 8003528:	f7ff fb0d 	bl	8002b46 <SX1276Write>
            SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( bandwidthAfc ) );
 800352c:	9808      	ldr	r0, [sp, #32]
 800352e:	f7ff fa95 	bl	8002a5c <GetFskBandwidthRegValue>
 8003532:	0001      	movs	r1, r0
 8003534:	2013      	movs	r0, #19
 8003536:	f7ff fb06 	bl	8002b46 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 800353a:	9b01      	ldr	r3, [sp, #4]
 800353c:	2025      	movs	r0, #37	; 0x25
 800353e:	0a19      	lsrs	r1, r3, #8
 8003540:	f7ff fb01 	bl	8002b46 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 8003544:	466b      	mov	r3, sp
 8003546:	2026      	movs	r0, #38	; 0x26
 8003548:	7919      	ldrb	r1, [r3, #4]
 800354a:	f7ff fafc 	bl	8002b46 <SX1276Write>
            if( fixLen == 1 )
 800354e:	9b02      	ldr	r3, [sp, #8]
                SX1276Write( REG_PAYLOADLENGTH, payloadLen );
 8003550:	9903      	ldr	r1, [sp, #12]
            if( fixLen == 1 )
 8003552:	2b00      	cmp	r3, #0
 8003554:	d100      	bne.n	8003558 <SX1276SetRxConfig+0x124>
                SX1276Write( REG_PAYLOADLENGTH, 0xFF ); // Set payload length to the maximum
 8003556:	21ff      	movs	r1, #255	; 0xff
 8003558:	2032      	movs	r0, #50	; 0x32
 800355a:	f7ff faf4 	bl	8002b46 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 800355e:	2030      	movs	r0, #48	; 0x30
 8003560:	f7ff fb44 	bl	8002bec <SX1276Read>
                           RF_PACKETCONFIG1_CRC_MASK &
 8003564:	216f      	movs	r1, #111	; 0x6f
 8003566:	4008      	ands	r0, r1
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8003568:	2100      	movs	r1, #0
 800356a:	9b02      	ldr	r3, [sp, #8]
 800356c:	428b      	cmp	r3, r1
 800356e:	d100      	bne.n	8003572 <SX1276SetRxConfig+0x13e>
 8003570:	3980      	subs	r1, #128	; 0x80
                           ( crcOn << 4 ) );
 8003572:	9b04      	ldr	r3, [sp, #16]
 8003574:	011b      	lsls	r3, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 8003576:	4318      	orrs	r0, r3
 8003578:	4301      	orrs	r1, r0
            SX1276Write( REG_PACKETCONFIG1,
 800357a:	b2c9      	uxtb	r1, r1
 800357c:	2030      	movs	r0, #48	; 0x30
 800357e:	f7ff fae2 	bl	8002b46 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 8003582:	2031      	movs	r0, #49	; 0x31
 8003584:	f7ff fb32 	bl	8002bec <SX1276Read>
 8003588:	2140      	movs	r1, #64	; 0x40
 800358a:	4301      	orrs	r1, r0
 800358c:	2031      	movs	r0, #49	; 0x31
 800358e:	b2c9      	uxtb	r1, r1
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8003590:	f7ff fad9 	bl	8002b46 <SX1276Write>
}
 8003594:	e77a      	b.n	800348c <SX1276SetRxConfig+0x58>
            if( bandwidth > 2 )
 8003596:	2d02      	cmp	r5, #2
 8003598:	d900      	bls.n	800359c <SX1276SetRxConfig+0x168>
 800359a:	e7fe      	b.n	800359a <SX1276SetRxConfig+0x166>
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 800359c:	4b65      	ldr	r3, [pc, #404]	; (8003734 <SX1276SetRxConfig+0x300>)
            SX1276.Settings.LoRa.Coderate = coderate;
 800359e:	9906      	ldr	r1, [sp, #24]
 80035a0:	001a      	movs	r2, r3
 80035a2:	324d      	adds	r2, #77	; 0x4d
 80035a4:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 80035a6:	001a      	movs	r2, r3
 80035a8:	9901      	ldr	r1, [sp, #4]
 80035aa:	324e      	adds	r2, #78	; 0x4e
 80035ac:	8011      	strh	r1, [r2, #0]
            SX1276.Settings.LoRa.FixLen = fixLen;
 80035ae:	001a      	movs	r2, r3
 80035b0:	9902      	ldr	r1, [sp, #8]
 80035b2:	3250      	adds	r2, #80	; 0x50
 80035b4:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.PayloadLen = payloadLen;
 80035b6:	001a      	movs	r2, r3
 80035b8:	9903      	ldr	r1, [sp, #12]
 80035ba:	3251      	adds	r2, #81	; 0x51
 80035bc:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.CrcOn = crcOn;
 80035be:	001a      	movs	r2, r3
 80035c0:	9904      	ldr	r1, [sp, #16]
 80035c2:	3252      	adds	r2, #82	; 0x52
 80035c4:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 80035c6:	001a      	movs	r2, r3
 80035c8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80035ca:	3253      	adds	r2, #83	; 0x53
 80035cc:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 80035ce:	001a      	movs	r2, r3
 80035d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80035d2:	3254      	adds	r2, #84	; 0x54
 80035d4:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 80035d6:	001a      	movs	r2, r3
 80035d8:	3255      	adds	r2, #85	; 0x55
 80035da:	7017      	strb	r7, [r2, #0]
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
 80035dc:	001a      	movs	r2, r3
 80035de:	9909      	ldr	r1, [sp, #36]	; 0x24
            bandwidth += 7;
 80035e0:	1dec      	adds	r4, r5, #7
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
 80035e2:	3256      	adds	r2, #86	; 0x56
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 80035e4:	645c      	str	r4, [r3, #68]	; 0x44
            SX1276.Settings.LoRa.Datarate = datarate;
 80035e6:	649e      	str	r6, [r3, #72]	; 0x48
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
 80035e8:	7011      	strb	r1, [r2, #0]
            if( datarate > 12 )
 80035ea:	2e0c      	cmp	r6, #12
 80035ec:	d900      	bls.n	80035f0 <SX1276SetRxConfig+0x1bc>
 80035ee:	e09c      	b.n	800372a <SX1276SetRxConfig+0x2f6>
            else if( datarate < 6 )
 80035f0:	2e05      	cmp	r6, #5
 80035f2:	d800      	bhi.n	80035f6 <SX1276SetRxConfig+0x1c2>
 80035f4:	e085      	b.n	8003702 <SX1276SetRxConfig+0x2ce>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80035f6:	2c07      	cmp	r4, #7
 80035f8:	d17c      	bne.n	80036f4 <SX1276SetRxConfig+0x2c0>
 80035fa:	0032      	movs	r2, r6
 80035fc:	3a0b      	subs	r2, #11
 80035fe:	2a01      	cmp	r2, #1
 8003600:	d87c      	bhi.n	80036fc <SX1276SetRxConfig+0x2c8>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 8003602:	2201      	movs	r2, #1
 8003604:	334c      	adds	r3, #76	; 0x4c
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 8003606:	201d      	movs	r0, #29
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 8003608:	701a      	strb	r2, [r3, #0]
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 800360a:	f7ff faef 	bl	8002bec <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 800360e:	9b06      	ldr	r3, [sp, #24]
            SX1276Write( REG_LR_MODEMCONFIG1,
 8003610:	201d      	movs	r0, #29
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8003612:	0059      	lsls	r1, r3, #1
 8003614:	9b02      	ldr	r3, [sp, #8]
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK &
 8003616:	2708      	movs	r7, #8
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8003618:	4319      	orrs	r1, r3
 800361a:	0123      	lsls	r3, r4, #4
 800361c:	4319      	orrs	r1, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 800361e:	b2c9      	uxtb	r1, r1
 8003620:	f7ff fa91 	bl	8002b46 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 8003624:	201e      	movs	r0, #30
 8003626:	f7ff fae1 	bl	8002bec <SX1276Read>
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 800362a:	9b05      	ldr	r3, [sp, #20]
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK &
 800362c:	4038      	ands	r0, r7
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 800362e:	0599      	lsls	r1, r3, #22
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 8003630:	9b04      	ldr	r3, [sp, #16]
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 8003632:	0f89      	lsrs	r1, r1, #30
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 8003634:	009b      	lsls	r3, r3, #2
            SX1276Write( REG_LR_MODEMCONFIG2,
 8003636:	4319      	orrs	r1, r3
 8003638:	4301      	orrs	r1, r0
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 800363a:	0130      	lsls	r0, r6, #4
            SX1276Write( REG_LR_MODEMCONFIG2,
 800363c:	4301      	orrs	r1, r0
 800363e:	b2c9      	uxtb	r1, r1
 8003640:	201e      	movs	r0, #30
 8003642:	f7ff fa80 	bl	8002b46 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 8003646:	2026      	movs	r0, #38	; 0x26
 8003648:	f7ff fad0 	bl	8002bec <SX1276Read>
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 800364c:	4d39      	ldr	r5, [pc, #228]	; (8003734 <SX1276SetRxConfig+0x300>)
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 800364e:	43b8      	bics	r0, r7
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 8003650:	002b      	movs	r3, r5
 8003652:	334c      	adds	r3, #76	; 0x4c
 8003654:	7819      	ldrb	r1, [r3, #0]
 8003656:	00c9      	lsls	r1, r1, #3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 8003658:	4301      	orrs	r1, r0
            SX1276Write( REG_LR_MODEMCONFIG3,
 800365a:	b2c9      	uxtb	r1, r1
 800365c:	2026      	movs	r0, #38	; 0x26
 800365e:	f7ff fa72 	bl	8002b46 <SX1276Write>
            SX1276Write( REG_LR_SYMBTIMEOUTLSB, ( uint8_t )( symbTimeout & 0xFF ) );
 8003662:	466b      	mov	r3, sp
 8003664:	201f      	movs	r0, #31
 8003666:	7d19      	ldrb	r1, [r3, #20]
 8003668:	f7ff fa6d 	bl	8002b46 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 800366c:	9b01      	ldr	r3, [sp, #4]
 800366e:	2020      	movs	r0, #32
 8003670:	0a19      	lsrs	r1, r3, #8
 8003672:	f7ff fa68 	bl	8002b46 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 8003676:	466b      	mov	r3, sp
 8003678:	2021      	movs	r0, #33	; 0x21
 800367a:	7919      	ldrb	r1, [r3, #4]
 800367c:	f7ff fa63 	bl	8002b46 <SX1276Write>
            if( fixLen == 1 )
 8003680:	9b02      	ldr	r3, [sp, #8]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d003      	beq.n	800368e <SX1276SetRxConfig+0x25a>
                SX1276Write( REG_LR_PAYLOADLENGTH, payloadLen );
 8003686:	9903      	ldr	r1, [sp, #12]
 8003688:	2022      	movs	r0, #34	; 0x22
 800368a:	f7ff fa5c 	bl	8002b46 <SX1276Write>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 800368e:	002b      	movs	r3, r5
 8003690:	3353      	adds	r3, #83	; 0x53
 8003692:	781b      	ldrb	r3, [r3, #0]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d00f      	beq.n	80036b8 <SX1276SetRxConfig+0x284>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 8003698:	2044      	movs	r0, #68	; 0x44
 800369a:	f7ff faa7 	bl	8002bec <SX1276Read>
 800369e:	2180      	movs	r1, #128	; 0x80
 80036a0:	4249      	negs	r1, r1
 80036a2:	4301      	orrs	r1, r0
 80036a4:	b2c9      	uxtb	r1, r1
 80036a6:	2044      	movs	r0, #68	; 0x44
 80036a8:	f7ff fa4d 	bl	8002b46 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 80036ac:	002b      	movs	r3, r5
 80036ae:	3354      	adds	r3, #84	; 0x54
 80036b0:	7819      	ldrb	r1, [r3, #0]
 80036b2:	2024      	movs	r0, #36	; 0x24
 80036b4:	f7ff fa47 	bl	8002b46 <SX1276Write>
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 80036b8:	2c09      	cmp	r4, #9
 80036ba:	d128      	bne.n	800370e <SX1276SetRxConfig+0x2da>
 80036bc:	4b22      	ldr	r3, [pc, #136]	; (8003748 <SX1276SetRxConfig+0x314>)
 80036be:	68aa      	ldr	r2, [r5, #8]
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 80036c0:	2102      	movs	r1, #2
 80036c2:	2036      	movs	r0, #54	; 0x36
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d91e      	bls.n	8003706 <SX1276SetRxConfig+0x2d2>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 80036c8:	f7ff fa3d 	bl	8002b46 <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x64 );
 80036cc:	2164      	movs	r1, #100	; 0x64
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x7F );
 80036ce:	203a      	movs	r0, #58	; 0x3a
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x03 );
 80036d0:	f7ff fa39 	bl	8002b46 <SX1276Write>
 80036d4:	2407      	movs	r4, #7
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 80036d6:	2031      	movs	r0, #49	; 0x31
            if( datarate == 6 )
 80036d8:	2e06      	cmp	r6, #6
 80036da:	d11b      	bne.n	8003714 <SX1276SetRxConfig+0x2e0>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 80036dc:	f7ff fa86 	bl	8002bec <SX1276Read>
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 80036e0:	2105      	movs	r1, #5
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 80036e2:	43a0      	bics	r0, r4
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 80036e4:	4301      	orrs	r1, r0
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 80036e6:	b2c9      	uxtb	r1, r1
 80036e8:	2031      	movs	r0, #49	; 0x31
 80036ea:	f7ff fa2c 	bl	8002b46 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 80036ee:	210c      	movs	r1, #12
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 80036f0:	2037      	movs	r0, #55	; 0x37
 80036f2:	e74d      	b.n	8003590 <SX1276SetRxConfig+0x15c>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80036f4:	2c08      	cmp	r4, #8
 80036f6:	d101      	bne.n	80036fc <SX1276SetRxConfig+0x2c8>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 80036f8:	2e0c      	cmp	r6, #12
 80036fa:	d082      	beq.n	8003602 <SX1276SetRxConfig+0x1ce>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 80036fc:	334c      	adds	r3, #76	; 0x4c
 80036fe:	2200      	movs	r2, #0
 8003700:	e781      	b.n	8003606 <SX1276SetRxConfig+0x1d2>
                datarate = 6;
 8003702:	2606      	movs	r6, #6
 8003704:	e7fa      	b.n	80036fc <SX1276SetRxConfig+0x2c8>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 8003706:	f7ff fa1e 	bl	8002b46 <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x7F );
 800370a:	217f      	movs	r1, #127	; 0x7f
 800370c:	e7df      	b.n	80036ce <SX1276SetRxConfig+0x29a>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x03 );
 800370e:	2103      	movs	r1, #3
 8003710:	2036      	movs	r0, #54	; 0x36
 8003712:	e7dd      	b.n	80036d0 <SX1276SetRxConfig+0x29c>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8003714:	f7ff fa6a 	bl	8002bec <SX1276Read>
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 8003718:	2103      	movs	r1, #3
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800371a:	43a0      	bics	r0, r4
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 800371c:	4301      	orrs	r1, r0
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 800371e:	b2c9      	uxtb	r1, r1
 8003720:	2031      	movs	r0, #49	; 0x31
 8003722:	f7ff fa10 	bl	8002b46 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8003726:	210a      	movs	r1, #10
 8003728:	e7e2      	b.n	80036f0 <SX1276SetRxConfig+0x2bc>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800372a:	260c      	movs	r6, #12
 800372c:	2d02      	cmp	r5, #2
 800372e:	d0e5      	beq.n	80036fc <SX1276SetRxConfig+0x2c8>
 8003730:	e767      	b.n	8003602 <SX1276SetRxConfig+0x1ce>
 8003732:	46c0      	nop			; (mov r8, r8)
 8003734:	20001558 	.word	0x20001558
 8003738:	3ff00000 	.word	0x3ff00000
 800373c:	40200000 	.word	0x40200000
 8003740:	408f4000 	.word	0x408f4000
 8003744:	417e8480 	.word	0x417e8480
 8003748:	1f4add40 	.word	0x1f4add40

0800374c <SX1276SetTxConfig>:
{
 800374c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800374e:	000e      	movs	r6, r1
 8003750:	b089      	sub	sp, #36	; 0x24
 8003752:	9300      	str	r3, [sp, #0]
 8003754:	ab0e      	add	r3, sp, #56	; 0x38
 8003756:	cb10      	ldmia	r3!, {r4}
 8003758:	0005      	movs	r5, r0
 800375a:	781b      	ldrb	r3, [r3, #0]
 800375c:	9203      	str	r2, [sp, #12]
 800375e:	9304      	str	r3, [sp, #16]
 8003760:	ab10      	add	r3, sp, #64	; 0x40
 8003762:	881f      	ldrh	r7, [r3, #0]
 8003764:	ab11      	add	r3, sp, #68	; 0x44
 8003766:	781b      	ldrb	r3, [r3, #0]
 8003768:	9301      	str	r3, [sp, #4]
 800376a:	ab12      	add	r3, sp, #72	; 0x48
 800376c:	781b      	ldrb	r3, [r3, #0]
 800376e:	9302      	str	r3, [sp, #8]
 8003770:	ab13      	add	r3, sp, #76	; 0x4c
 8003772:	781b      	ldrb	r3, [r3, #0]
 8003774:	9305      	str	r3, [sp, #20]
 8003776:	ab14      	add	r3, sp, #80	; 0x50
 8003778:	781b      	ldrb	r3, [r3, #0]
 800377a:	9307      	str	r3, [sp, #28]
 800377c:	ab15      	add	r3, sp, #84	; 0x54
 800377e:	781b      	ldrb	r3, [r3, #0]
 8003780:	9306      	str	r3, [sp, #24]
    SX1276SetModem( modem );
 8003782:	f7ff fd8b 	bl	800329c <SX1276SetModem>
    LoRaBoardCallbacks->SX1276BoardSetRfTxPower( power );
 8003786:	4b86      	ldr	r3, [pc, #536]	; (80039a0 <SX1276SetTxConfig+0x254>)
 8003788:	0030      	movs	r0, r6
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	68db      	ldr	r3, [r3, #12]
 800378e:	4798      	blx	r3
    switch( modem )
 8003790:	2d00      	cmp	r5, #0
 8003792:	d003      	beq.n	800379c <SX1276SetTxConfig+0x50>
 8003794:	2d01      	cmp	r5, #1
 8003796:	d05e      	beq.n	8003856 <SX1276SetTxConfig+0x10a>
}
 8003798:	b009      	add	sp, #36	; 0x24
 800379a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            SX1276.Settings.Fsk.Power = power;
 800379c:	4b81      	ldr	r3, [pc, #516]	; (80039a4 <SX1276SetTxConfig+0x258>)
            SX1276.Settings.Fsk.Fdev = fdev;
 800379e:	9a03      	ldr	r2, [sp, #12]
            SX1276.Settings.Fsk.FixLen = fixLen;
 80037a0:	9901      	ldr	r1, [sp, #4]
            SX1276.Settings.Fsk.Fdev = fdev;
 80037a2:	611a      	str	r2, [r3, #16]
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 80037a4:	9a00      	ldr	r2, [sp, #0]
            SX1276.Settings.Fsk.Power = power;
 80037a6:	731e      	strb	r6, [r3, #12]
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 80037a8:	615a      	str	r2, [r3, #20]
            SX1276.Settings.Fsk.FixLen = fixLen;
 80037aa:	1cda      	adds	r2, r3, #3
 80037ac:	77d1      	strb	r1, [r2, #31]
            SX1276.Settings.Fsk.CrcOn = crcOn;
 80037ae:	9902      	ldr	r1, [sp, #8]
 80037b0:	1d5a      	adds	r2, r3, #5
 80037b2:	77d1      	strb	r1, [r2, #31]
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 80037b4:	9906      	ldr	r1, [sp, #24]
 80037b6:	1d9a      	adds	r2, r3, #6
 80037b8:	77d1      	strb	r1, [r2, #31]
            SX1276.Settings.Fsk.TxTimeout = timeout;
 80037ba:	9a16      	ldr	r2, [sp, #88]	; 0x58
            SX1276.Settings.Fsk.Datarate = datarate;
 80037bc:	61dc      	str	r4, [r3, #28]
            SX1276.Settings.Fsk.TxTimeout = timeout;
 80037be:	629a      	str	r2, [r3, #40]	; 0x28
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 80037c0:	841f      	strh	r7, [r3, #32]
            fdev = ( uint16_t )( ( double )fdev / ( double )FREQ_STEP );
 80037c2:	9803      	ldr	r0, [sp, #12]
 80037c4:	f7fe fec6 	bl	8002554 <__aeabi_ui2d>
 80037c8:	2200      	movs	r2, #0
 80037ca:	4b77      	ldr	r3, [pc, #476]	; (80039a8 <SX1276SetTxConfig+0x25c>)
 80037cc:	f7fd fc8e 	bl	80010ec <__aeabi_ddiv>
 80037d0:	f7fc fe8c 	bl	80004ec <__aeabi_d2uiz>
 80037d4:	b286      	uxth	r6, r0
            SX1276Write( REG_FDEVMSB, ( uint8_t )( fdev >> 8 ) );
 80037d6:	0a31      	lsrs	r1, r6, #8
 80037d8:	2004      	movs	r0, #4
 80037da:	f7ff f9b4 	bl	8002b46 <SX1276Write>
            SX1276Write( REG_FDEVLSB, ( uint8_t )( fdev & 0xFF ) );
 80037de:	b2f1      	uxtb	r1, r6
 80037e0:	2005      	movs	r0, #5
 80037e2:	f7ff f9b0 	bl	8002b46 <SX1276Write>
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 80037e6:	0020      	movs	r0, r4
 80037e8:	f7fe feb4 	bl	8002554 <__aeabi_ui2d>
 80037ec:	000b      	movs	r3, r1
 80037ee:	0002      	movs	r2, r0
 80037f0:	496e      	ldr	r1, [pc, #440]	; (80039ac <SX1276SetTxConfig+0x260>)
 80037f2:	2000      	movs	r0, #0
 80037f4:	f7fd fc7a 	bl	80010ec <__aeabi_ddiv>
 80037f8:	f7fc fe78 	bl	80004ec <__aeabi_d2uiz>
 80037fc:	b284      	uxth	r4, r0
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 80037fe:	0a21      	lsrs	r1, r4, #8
 8003800:	2002      	movs	r0, #2
 8003802:	f7ff f9a0 	bl	8002b46 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 8003806:	b2e1      	uxtb	r1, r4
 8003808:	2003      	movs	r0, #3
 800380a:	f7ff f99c 	bl	8002b46 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 800380e:	0a39      	lsrs	r1, r7, #8
 8003810:	2025      	movs	r0, #37	; 0x25
 8003812:	f7ff f998 	bl	8002b46 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, preambleLen & 0xFF );
 8003816:	b2f9      	uxtb	r1, r7
 8003818:	2026      	movs	r0, #38	; 0x26
 800381a:	f7ff f994 	bl	8002b46 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 800381e:	2030      	movs	r0, #48	; 0x30
 8003820:	f7ff f9e4 	bl	8002bec <SX1276Read>
                           RF_PACKETCONFIG1_CRC_MASK &
 8003824:	216f      	movs	r1, #111	; 0x6f
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8003826:	9b01      	ldr	r3, [sp, #4]
                           RF_PACKETCONFIG1_CRC_MASK &
 8003828:	4001      	ands	r1, r0
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 800382a:	2b00      	cmp	r3, #0
 800382c:	d101      	bne.n	8003832 <SX1276SetTxConfig+0xe6>
 800382e:	2580      	movs	r5, #128	; 0x80
 8003830:	426d      	negs	r5, r5
                           ( crcOn << 4 ) );
 8003832:	9b02      	ldr	r3, [sp, #8]
 8003834:	0118      	lsls	r0, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 8003836:	4301      	orrs	r1, r0
 8003838:	4329      	orrs	r1, r5
            SX1276Write( REG_PACKETCONFIG1,
 800383a:	b2c9      	uxtb	r1, r1
 800383c:	2030      	movs	r0, #48	; 0x30
 800383e:	f7ff f982 	bl	8002b46 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 8003842:	2031      	movs	r0, #49	; 0x31
 8003844:	f7ff f9d2 	bl	8002bec <SX1276Read>
 8003848:	2140      	movs	r1, #64	; 0x40
 800384a:	4301      	orrs	r1, r0
 800384c:	2031      	movs	r0, #49	; 0x31
 800384e:	b2c9      	uxtb	r1, r1
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8003850:	f7ff f979 	bl	8002b46 <SX1276Write>
}
 8003854:	e7a0      	b.n	8003798 <SX1276SetTxConfig+0x4c>
            SX1276.Settings.LoRa.Power = power;
 8003856:	4d53      	ldr	r5, [pc, #332]	; (80039a4 <SX1276SetTxConfig+0x258>)
 8003858:	002b      	movs	r3, r5
 800385a:	3340      	adds	r3, #64	; 0x40
 800385c:	701e      	strb	r6, [r3, #0]
            if( bandwidth > 2 )
 800385e:	9b00      	ldr	r3, [sp, #0]
 8003860:	2b02      	cmp	r3, #2
 8003862:	d900      	bls.n	8003866 <SX1276SetTxConfig+0x11a>
 8003864:	e7fe      	b.n	8003864 <SX1276SetTxConfig+0x118>
            bandwidth += 7;
 8003866:	9b00      	ldr	r3, [sp, #0]
            SX1276.Settings.LoRa.Coderate = coderate;
 8003868:	9a04      	ldr	r2, [sp, #16]
            bandwidth += 7;
 800386a:	1dde      	adds	r6, r3, #7
            SX1276.Settings.LoRa.Coderate = coderate;
 800386c:	002b      	movs	r3, r5
 800386e:	334d      	adds	r3, #77	; 0x4d
 8003870:	701a      	strb	r2, [r3, #0]
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 8003872:	002b      	movs	r3, r5
 8003874:	334e      	adds	r3, #78	; 0x4e
 8003876:	801f      	strh	r7, [r3, #0]
            SX1276.Settings.LoRa.FixLen = fixLen;
 8003878:	002b      	movs	r3, r5
 800387a:	9a01      	ldr	r2, [sp, #4]
 800387c:	3350      	adds	r3, #80	; 0x50
 800387e:	701a      	strb	r2, [r3, #0]
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 8003880:	002b      	movs	r3, r5
 8003882:	9a05      	ldr	r2, [sp, #20]
 8003884:	3353      	adds	r3, #83	; 0x53
 8003886:	701a      	strb	r2, [r3, #0]
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 8003888:	002b      	movs	r3, r5
 800388a:	9a07      	ldr	r2, [sp, #28]
 800388c:	3354      	adds	r3, #84	; 0x54
 800388e:	701a      	strb	r2, [r3, #0]
            SX1276.Settings.LoRa.CrcOn = crcOn;
 8003890:	002b      	movs	r3, r5
 8003892:	9a02      	ldr	r2, [sp, #8]
 8003894:	3352      	adds	r3, #82	; 0x52
 8003896:	701a      	strb	r2, [r3, #0]
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 8003898:	002b      	movs	r3, r5
 800389a:	9a06      	ldr	r2, [sp, #24]
 800389c:	3355      	adds	r3, #85	; 0x55
 800389e:	701a      	strb	r2, [r3, #0]
            SX1276.Settings.LoRa.TxTimeout = timeout;
 80038a0:	9b16      	ldr	r3, [sp, #88]	; 0x58
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 80038a2:	646e      	str	r6, [r5, #68]	; 0x44
            SX1276.Settings.LoRa.TxTimeout = timeout;
 80038a4:	65ab      	str	r3, [r5, #88]	; 0x58
            SX1276.Settings.LoRa.Datarate = datarate;
 80038a6:	64ac      	str	r4, [r5, #72]	; 0x48
 80038a8:	002b      	movs	r3, r5
            if( datarate > 12 )
 80038aa:	2c0c      	cmp	r4, #12
 80038ac:	d872      	bhi.n	8003994 <SX1276SetTxConfig+0x248>
            else if( datarate < 6 )
 80038ae:	2c05      	cmp	r4, #5
 80038b0:	d963      	bls.n	800397a <SX1276SetTxConfig+0x22e>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80038b2:	2e07      	cmp	r6, #7
 80038b4:	d15a      	bne.n	800396c <SX1276SetTxConfig+0x220>
 80038b6:	0022      	movs	r2, r4
 80038b8:	3a0b      	subs	r2, #11
 80038ba:	2a01      	cmp	r2, #1
 80038bc:	d85a      	bhi.n	8003974 <SX1276SetTxConfig+0x228>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 80038be:	2201      	movs	r2, #1
 80038c0:	334c      	adds	r3, #76	; 0x4c
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 80038c2:	701a      	strb	r2, [r3, #0]
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 80038c4:	9b05      	ldr	r3, [sp, #20]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d00f      	beq.n	80038ea <SX1276SetTxConfig+0x19e>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 80038ca:	2044      	movs	r0, #68	; 0x44
 80038cc:	f7ff f98e 	bl	8002bec <SX1276Read>
 80038d0:	2180      	movs	r1, #128	; 0x80
 80038d2:	4249      	negs	r1, r1
 80038d4:	4301      	orrs	r1, r0
 80038d6:	b2c9      	uxtb	r1, r1
 80038d8:	2044      	movs	r0, #68	; 0x44
 80038da:	f7ff f934 	bl	8002b46 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 80038de:	4b31      	ldr	r3, [pc, #196]	; (80039a4 <SX1276SetTxConfig+0x258>)
 80038e0:	2024      	movs	r0, #36	; 0x24
 80038e2:	3354      	adds	r3, #84	; 0x54
 80038e4:	7819      	ldrb	r1, [r3, #0]
 80038e6:	f7ff f92e 	bl	8002b46 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 80038ea:	201d      	movs	r0, #29
 80038ec:	f7ff f97e 	bl	8002bec <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 80038f0:	9b04      	ldr	r3, [sp, #16]
 80038f2:	0136      	lsls	r6, r6, #4
 80038f4:	0059      	lsls	r1, r3, #1
 80038f6:	9b01      	ldr	r3, [sp, #4]
            SX1276Write( REG_LR_MODEMCONFIG1,
 80038f8:	201d      	movs	r0, #29
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 80038fa:	430b      	orrs	r3, r1
 80038fc:	0019      	movs	r1, r3
 80038fe:	4331      	orrs	r1, r6
            SX1276Write( REG_LR_MODEMCONFIG1,
 8003900:	b2c9      	uxtb	r1, r1
 8003902:	f7ff f920 	bl	8002b46 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 8003906:	201e      	movs	r0, #30
 8003908:	f7ff f970 	bl	8002bec <SX1276Read>
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 800390c:	9b02      	ldr	r3, [sp, #8]
 800390e:	0121      	lsls	r1, r4, #4
 8003910:	009b      	lsls	r3, r3, #2
            SX1276Write( REG_LR_MODEMCONFIG2,
 8003912:	4319      	orrs	r1, r3
                           RFLR_MODEMCONFIG2_SF_MASK &
 8003914:	230b      	movs	r3, #11
 8003916:	4018      	ands	r0, r3
            SX1276Write( REG_LR_MODEMCONFIG2,
 8003918:	4301      	orrs	r1, r0
 800391a:	b2c9      	uxtb	r1, r1
 800391c:	201e      	movs	r0, #30
 800391e:	f7ff f912 	bl	8002b46 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 8003922:	2026      	movs	r0, #38	; 0x26
 8003924:	f7ff f962 	bl	8002bec <SX1276Read>
 8003928:	2308      	movs	r3, #8
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 800392a:	354c      	adds	r5, #76	; 0x4c
 800392c:	7829      	ldrb	r1, [r5, #0]
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 800392e:	4398      	bics	r0, r3
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 8003930:	00c9      	lsls	r1, r1, #3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 8003932:	4301      	orrs	r1, r0
            SX1276Write( REG_LR_MODEMCONFIG3,
 8003934:	b2c9      	uxtb	r1, r1
 8003936:	2026      	movs	r0, #38	; 0x26
 8003938:	f7ff f905 	bl	8002b46 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 800393c:	0a39      	lsrs	r1, r7, #8
 800393e:	2020      	movs	r0, #32
 8003940:	f7ff f901 	bl	8002b46 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, preambleLen & 0xFF );
 8003944:	2021      	movs	r0, #33	; 0x21
 8003946:	b2f9      	uxtb	r1, r7
 8003948:	f7ff f8fd 	bl	8002b46 <SX1276Write>
 800394c:	2507      	movs	r5, #7
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800394e:	2031      	movs	r0, #49	; 0x31
            if( datarate == 6 )
 8003950:	2c06      	cmp	r4, #6
 8003952:	d114      	bne.n	800397e <SX1276SetTxConfig+0x232>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8003954:	f7ff f94a 	bl	8002bec <SX1276Read>
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 8003958:	2105      	movs	r1, #5
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800395a:	43a8      	bics	r0, r5
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 800395c:	4301      	orrs	r1, r0
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 800395e:	b2c9      	uxtb	r1, r1
 8003960:	2031      	movs	r0, #49	; 0x31
 8003962:	f7ff f8f0 	bl	8002b46 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8003966:	210c      	movs	r1, #12
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8003968:	2037      	movs	r0, #55	; 0x37
 800396a:	e771      	b.n	8003850 <SX1276SetTxConfig+0x104>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800396c:	2e08      	cmp	r6, #8
 800396e:	d101      	bne.n	8003974 <SX1276SetTxConfig+0x228>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 8003970:	2c0c      	cmp	r4, #12
 8003972:	d0a4      	beq.n	80038be <SX1276SetTxConfig+0x172>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 8003974:	334c      	adds	r3, #76	; 0x4c
 8003976:	2200      	movs	r2, #0
 8003978:	e7a3      	b.n	80038c2 <SX1276SetTxConfig+0x176>
                datarate = 6;
 800397a:	2406      	movs	r4, #6
 800397c:	e7fa      	b.n	8003974 <SX1276SetTxConfig+0x228>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800397e:	f7ff f935 	bl	8002bec <SX1276Read>
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 8003982:	2103      	movs	r1, #3
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8003984:	43a8      	bics	r0, r5
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 8003986:	4301      	orrs	r1, r0
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8003988:	b2c9      	uxtb	r1, r1
 800398a:	2031      	movs	r0, #49	; 0x31
 800398c:	f7ff f8db 	bl	8002b46 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8003990:	210a      	movs	r1, #10
 8003992:	e7e9      	b.n	8003968 <SX1276SetTxConfig+0x21c>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8003994:	9a00      	ldr	r2, [sp, #0]
 8003996:	240c      	movs	r4, #12
 8003998:	2a02      	cmp	r2, #2
 800399a:	d0eb      	beq.n	8003974 <SX1276SetTxConfig+0x228>
 800399c:	e78f      	b.n	80038be <SX1276SetTxConfig+0x172>
 800399e:	46c0      	nop			; (mov r8, r8)
 80039a0:	2000026c 	.word	0x2000026c
 80039a4:	20001558 	.word	0x20001558
 80039a8:	404e8480 	.word	0x404e8480
 80039ac:	417e8480 	.word	0x417e8480

080039b0 <SX1276SetTxContinuousWave>:
{
 80039b0:	b530      	push	{r4, r5, lr}
    uint32_t timeout = ( uint32_t )( time * 1000 );
 80039b2:	24fa      	movs	r4, #250	; 0xfa
{
 80039b4:	b08b      	sub	sp, #44	; 0x2c
    uint32_t timeout = ( uint32_t )( time * 1000 );
 80039b6:	00a4      	lsls	r4, r4, #2
 80039b8:	4354      	muls	r4, r2
{
 80039ba:	000d      	movs	r5, r1
    SX1276SetChannel( freq );
 80039bc:	f7ff f8cc 	bl	8002b58 <SX1276SetChannel>
    SX1276SetTxConfig( MODEM_FSK, power, 0, 0, 4800, 0, 5, false, false, 0, 0, 0, timeout );
 80039c0:	2305      	movs	r3, #5
 80039c2:	9302      	str	r3, [sp, #8]
 80039c4:	2396      	movs	r3, #150	; 0x96
 80039c6:	2000      	movs	r0, #0
 80039c8:	015b      	lsls	r3, r3, #5
 80039ca:	0002      	movs	r2, r0
 80039cc:	0029      	movs	r1, r5
 80039ce:	9007      	str	r0, [sp, #28]
 80039d0:	9006      	str	r0, [sp, #24]
 80039d2:	9005      	str	r0, [sp, #20]
 80039d4:	9004      	str	r0, [sp, #16]
 80039d6:	9003      	str	r0, [sp, #12]
 80039d8:	9001      	str	r0, [sp, #4]
 80039da:	9300      	str	r3, [sp, #0]
 80039dc:	9408      	str	r4, [sp, #32]
 80039de:	0003      	movs	r3, r0
 80039e0:	f7ff feb4 	bl	800374c <SX1276SetTxConfig>
    SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) & RF_PACKETCONFIG2_DATAMODE_MASK ) );
 80039e4:	2031      	movs	r0, #49	; 0x31
 80039e6:	f7ff f901 	bl	8002bec <SX1276Read>
 80039ea:	2540      	movs	r5, #64	; 0x40
 80039ec:	43a8      	bics	r0, r5
 80039ee:	b2c1      	uxtb	r1, r0
 80039f0:	2031      	movs	r0, #49	; 0x31
 80039f2:	f7ff f8a8 	bl	8002b46 <SX1276Write>
    SX1276Write( REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_11 | RF_DIOMAPPING1_DIO1_11 );
 80039f6:	0028      	movs	r0, r5
 80039f8:	21f0      	movs	r1, #240	; 0xf0
 80039fa:	f7ff f8a4 	bl	8002b46 <SX1276Write>
    SX1276Write( REG_DIOMAPPING2, RF_DIOMAPPING2_DIO4_10 | RF_DIOMAPPING2_DIO5_10 );
 80039fe:	21a0      	movs	r1, #160	; 0xa0
 8003a00:	2041      	movs	r0, #65	; 0x41
 8003a02:	f7ff f8a0 	bl	8002b46 <SX1276Write>
    TimerSetValue( &TxTimeoutTimer, timeout );
 8003a06:	4d08      	ldr	r5, [pc, #32]	; (8003a28 <SX1276SetTxContinuousWave+0x78>)
 8003a08:	0021      	movs	r1, r4
 8003a0a:	0028      	movs	r0, r5
 8003a0c:	f008 ffee 	bl	800c9ec <TimerSetValue>
    SX1276.Settings.State = RF_TX_RUNNING;
 8003a10:	2202      	movs	r2, #2
 8003a12:	4b06      	ldr	r3, [pc, #24]	; (8003a2c <SX1276SetTxContinuousWave+0x7c>)
    TimerStart( &TxTimeoutTimer );
 8003a14:	0028      	movs	r0, r5
    SX1276.Settings.State = RF_TX_RUNNING;
 8003a16:	711a      	strb	r2, [r3, #4]
    TimerStart( &TxTimeoutTimer );
 8003a18:	f008 ff40 	bl	800c89c <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 8003a1c:	2003      	movs	r0, #3
 8003a1e:	f7ff fa8b 	bl	8002f38 <SX1276SetOpMode>
}
 8003a22:	b00b      	add	sp, #44	; 0x2c
 8003a24:	bd30      	pop	{r4, r5, pc}
 8003a26:	46c0      	nop			; (mov r8, r8)
 8003a28:	20001528 	.word	0x20001528
 8003a2c:	20001558 	.word	0x20001558

08003a30 <SX1276OnDio2Irq>:
{
 8003a30:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.State )
 8003a32:	4c2b      	ldr	r4, [pc, #172]	; (8003ae0 <SX1276OnDio2Irq+0xb0>)
 8003a34:	7921      	ldrb	r1, [r4, #4]
 8003a36:	2901      	cmp	r1, #1
 8003a38:	d002      	beq.n	8003a40 <SX1276OnDio2Irq+0x10>
 8003a3a:	2902      	cmp	r1, #2
 8003a3c:	d048      	beq.n	8003ad0 <SX1276OnDio2Irq+0xa0>
}
 8003a3e:	bd70      	pop	{r4, r5, r6, pc}
            switch( SX1276.Settings.Modem )
 8003a40:	7963      	ldrb	r3, [r4, #5]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d017      	beq.n	8003a76 <SX1276OnDio2Irq+0x46>
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d1f9      	bne.n	8003a3e <SX1276OnDio2Irq+0xe>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 8003a4a:	3453      	adds	r4, #83	; 0x53
 8003a4c:	7823      	ldrb	r3, [r4, #0]
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 8003a4e:	2102      	movs	r1, #2
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d0f4      	beq.n	8003a3e <SX1276OnDio2Irq+0xe>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 8003a54:	2012      	movs	r0, #18
 8003a56:	f7ff f876 	bl	8002b46 <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 8003a5a:	4b22      	ldr	r3, [pc, #136]	; (8003ae4 <SX1276OnDio2Irq+0xb4>)
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d0ed      	beq.n	8003a3e <SX1276OnDio2Irq+0xe>
 8003a62:	695c      	ldr	r4, [r3, #20]
 8003a64:	2c00      	cmp	r4, #0
 8003a66:	d0ea      	beq.n	8003a3e <SX1276OnDio2Irq+0xe>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 8003a68:	201c      	movs	r0, #28
 8003a6a:	f7ff f8bf 	bl	8002bec <SX1276Read>
 8003a6e:	233f      	movs	r3, #63	; 0x3f
 8003a70:	4018      	ands	r0, r3
 8003a72:	47a0      	blx	r4
}
 8003a74:	e7e3      	b.n	8003a3e <SX1276OnDio2Irq+0xe>
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 8003a76:	0023      	movs	r3, r4
 8003a78:	3330      	adds	r3, #48	; 0x30
 8003a7a:	7019      	strb	r1, [r3, #0]
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected == true ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == false ) )
 8003a7c:	8e25      	ldrh	r5, [r4, #48]	; 0x30
 8003a7e:	2d01      	cmp	r5, #1
 8003a80:	d1dd      	bne.n	8003a3e <SX1276OnDio2Irq+0xe>
                    TimerStop( &RxTimeoutSyncWord );
 8003a82:	4819      	ldr	r0, [pc, #100]	; (8003ae8 <SX1276OnDio2Irq+0xb8>)
 8003a84:	f008 ff86 	bl	800c994 <TimerStop>
                    SX1276.Settings.FskPacketHandler.SyncWordDetected = true;
 8003a88:	0023      	movs	r3, r4
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 8003a8a:	2011      	movs	r0, #17
                    SX1276.Settings.FskPacketHandler.SyncWordDetected = true;
 8003a8c:	3331      	adds	r3, #49	; 0x31
 8003a8e:	701d      	strb	r5, [r3, #0]
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 8003a90:	f7ff f8ac 	bl	8002bec <SX1276Read>
 8003a94:	0023      	movs	r3, r4
 8003a96:	0840      	lsrs	r0, r0, #1
 8003a98:	3332      	adds	r3, #50	; 0x32
 8003a9a:	4240      	negs	r0, r0
 8003a9c:	7018      	strb	r0, [r3, #0]
                    afcChannel = ( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 8003a9e:	201b      	movs	r0, #27
 8003aa0:	f7ff f8a4 	bl	8002bec <SX1276Read>
 8003aa4:	0005      	movs	r5, r0
                                     ( uint16_t )SX1276Read( REG_AFCLSB ) );
 8003aa6:	201c      	movs	r0, #28
 8003aa8:	f7ff f8a0 	bl	8002bec <SX1276Read>
                    afcChannel = ( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 8003aac:	022d      	lsls	r5, r5, #8
                    SX_CHANNEL_TO_FREQ( afcChannel, SX1276.Settings.FskPacketHandler.AfcValue );
 8003aae:	4a0f      	ldr	r2, [pc, #60]	; (8003aec <SX1276OnDio2Irq+0xbc>)
                    afcChannel = ( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 8003ab0:	4328      	orrs	r0, r5
                    SX_CHANNEL_TO_FREQ( afcChannel, SX1276.Settings.FskPacketHandler.AfcValue );
 8003ab2:	b2c3      	uxtb	r3, r0
 8003ab4:	4353      	muls	r3, r2
 8003ab6:	0a00      	lsrs	r0, r0, #8
 8003ab8:	4350      	muls	r0, r2
 8003aba:	3380      	adds	r3, #128	; 0x80
 8003abc:	0a1b      	lsrs	r3, r3, #8
 8003abe:	1818      	adds	r0, r3, r0
 8003ac0:	6360      	str	r0, [r4, #52]	; 0x34
                    SX1276.Settings.FskPacketHandler.RxGain = ( SX1276Read( REG_LNA ) >> 5 ) & 0x07;
 8003ac2:	200c      	movs	r0, #12
 8003ac4:	f7ff f892 	bl	8002bec <SX1276Read>
 8003ac8:	3438      	adds	r4, #56	; 0x38
 8003aca:	0940      	lsrs	r0, r0, #5
 8003acc:	7020      	strb	r0, [r4, #0]
 8003ace:	e7b6      	b.n	8003a3e <SX1276OnDio2Irq+0xe>
            switch( SX1276.Settings.Modem )
 8003ad0:	7963      	ldrb	r3, [r4, #5]
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d1b3      	bne.n	8003a3e <SX1276OnDio2Irq+0xe>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 8003ad6:	3453      	adds	r4, #83	; 0x53
 8003ad8:	7823      	ldrb	r3, [r4, #0]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d0af      	beq.n	8003a3e <SX1276OnDio2Irq+0xe>
 8003ade:	e7b9      	b.n	8003a54 <SX1276OnDio2Irq+0x24>
 8003ae0:	20001558 	.word	0x20001558
 8003ae4:	2000026c 	.word	0x2000026c
 8003ae8:	20001540 	.word	0x20001540
 8003aec:	00003d09 	.word	0x00003d09

08003af0 <SX1276OnDio3Irq>:
{
 8003af0:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.Modem )
 8003af2:	4b12      	ldr	r3, [pc, #72]	; (8003b3c <SX1276OnDio3Irq+0x4c>)
 8003af4:	795d      	ldrb	r5, [r3, #5]
 8003af6:	2d01      	cmp	r5, #1
 8003af8:	d111      	bne.n	8003b1e <SX1276OnDio3Irq+0x2e>
        if( ( SX1276Read( REG_LR_IRQFLAGS ) & RFLR_IRQFLAGS_CADDETECTED ) == RFLR_IRQFLAGS_CADDETECTED )
 8003afa:	2012      	movs	r0, #18
 8003afc:	f7ff f876 	bl	8002bec <SX1276Read>
 8003b00:	4028      	ands	r0, r5
 8003b02:	1e04      	subs	r4, r0, #0
 8003b04:	4e0e      	ldr	r6, [pc, #56]	; (8003b40 <SX1276OnDio3Irq+0x50>)
 8003b06:	d00b      	beq.n	8003b20 <SX1276OnDio3Irq+0x30>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDETECTED | RFLR_IRQFLAGS_CADDONE );
 8003b08:	2105      	movs	r1, #5
 8003b0a:	2012      	movs	r0, #18
 8003b0c:	f7ff f81b 	bl	8002b46 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8003b10:	6873      	ldr	r3, [r6, #4]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d003      	beq.n	8003b1e <SX1276OnDio3Irq+0x2e>
 8003b16:	699b      	ldr	r3, [r3, #24]
                RadioEvents->CadDone( true );
 8003b18:	0028      	movs	r0, r5
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d10b      	bne.n	8003b36 <SX1276OnDio3Irq+0x46>
}
 8003b1e:	bd70      	pop	{r4, r5, r6, pc}
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDONE );
 8003b20:	2104      	movs	r1, #4
 8003b22:	2012      	movs	r0, #18
 8003b24:	f7ff f80f 	bl	8002b46 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8003b28:	6873      	ldr	r3, [r6, #4]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d0f7      	beq.n	8003b1e <SX1276OnDio3Irq+0x2e>
 8003b2e:	699b      	ldr	r3, [r3, #24]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d0f4      	beq.n	8003b1e <SX1276OnDio3Irq+0x2e>
                RadioEvents->CadDone( false );
 8003b34:	0020      	movs	r0, r4
 8003b36:	4798      	blx	r3
}
 8003b38:	e7f1      	b.n	8003b1e <SX1276OnDio3Irq+0x2e>
 8003b3a:	46c0      	nop			; (mov r8, r8)
 8003b3c:	20001558 	.word	0x20001558
 8003b40:	2000026c 	.word	0x2000026c

08003b44 <SX1276WriteFifo>:
{
 8003b44:	b510      	push	{r4, lr}
 8003b46:	000a      	movs	r2, r1
    SX1276WriteBuffer( 0, buffer, size );
 8003b48:	0001      	movs	r1, r0
 8003b4a:	2000      	movs	r0, #0
 8003b4c:	f7fe ffdc 	bl	8002b08 <SX1276WriteBuffer>
}
 8003b50:	bd10      	pop	{r4, pc}
	...

08003b54 <SX1276Send>:
{
 8003b54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003b56:	466b      	mov	r3, sp
    switch( SX1276.Settings.Modem )
 8003b58:	4c3a      	ldr	r4, [pc, #232]	; (8003c44 <SX1276Send+0xf0>)
{
 8003b5a:	1dde      	adds	r6, r3, #7
 8003b5c:	7031      	strb	r1, [r6, #0]
    switch( SX1276.Settings.Modem )
 8003b5e:	7965      	ldrb	r5, [r4, #5]
{
 8003b60:	0007      	movs	r7, r0
    switch( SX1276.Settings.Modem )
 8003b62:	2d00      	cmp	r5, #0
 8003b64:	d003      	beq.n	8003b6e <SX1276Send+0x1a>
 8003b66:	2d01      	cmp	r5, #1
 8003b68:	d02e      	beq.n	8003bc8 <SX1276Send+0x74>
    uint32_t txTimeout = 0;
 8003b6a:	2000      	movs	r0, #0
 8003b6c:	e01c      	b.n	8003ba8 <SX1276Send+0x54>
            SX1276.Settings.FskPacketHandler.Size = size;
 8003b6e:	7831      	ldrb	r1, [r6, #0]
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8003b70:	87a5      	strh	r5, [r4, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = size;
 8003b72:	8761      	strh	r1, [r4, #58]	; 0x3a
            if( SX1276.Settings.Fsk.FixLen == false )
 8003b74:	1ce3      	adds	r3, r4, #3
 8003b76:	7fdb      	ldrb	r3, [r3, #31]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d118      	bne.n	8003bae <SX1276Send+0x5a>
                SX1276WriteFifo( ( uint8_t* )&size, 1 );
 8003b7c:	2101      	movs	r1, #1
 8003b7e:	0030      	movs	r0, r6
 8003b80:	f7ff ffe0 	bl	8003b44 <SX1276WriteFifo>
            if( ( size > 0 ) && ( size <= 64 ) )
 8003b84:	7832      	ldrb	r2, [r6, #0]
 8003b86:	1e53      	subs	r3, r2, #1
 8003b88:	2b3f      	cmp	r3, #63	; 0x3f
 8003b8a:	d814      	bhi.n	8003bb6 <SX1276Send+0x62>
                SX1276.Settings.FskPacketHandler.ChunkSize = size;
 8003b8c:	0023      	movs	r3, r4
 8003b8e:	333f      	adds	r3, #63	; 0x3f
            SX1276WriteFifo( buffer, SX1276.Settings.FskPacketHandler.ChunkSize );
 8003b90:	0025      	movs	r5, r4
                SX1276.Settings.FskPacketHandler.ChunkSize = 32;
 8003b92:	701a      	strb	r2, [r3, #0]
            SX1276WriteFifo( buffer, SX1276.Settings.FskPacketHandler.ChunkSize );
 8003b94:	353f      	adds	r5, #63	; 0x3f
 8003b96:	0038      	movs	r0, r7
 8003b98:	7829      	ldrb	r1, [r5, #0]
 8003b9a:	f7ff ffd3 	bl	8003b44 <SX1276WriteFifo>
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 8003b9e:	782b      	ldrb	r3, [r5, #0]
 8003ba0:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
            txTimeout = SX1276.Settings.Fsk.TxTimeout;
 8003ba2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 8003ba4:	189b      	adds	r3, r3, r2
 8003ba6:	87a3      	strh	r3, [r4, #60]	; 0x3c
    SX1276SetTx( txTimeout );
 8003ba8:	f7ff fb08 	bl	80031bc <SX1276SetTx>
}
 8003bac:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
                SX1276Write( REG_PAYLOADLENGTH, size );
 8003bae:	2032      	movs	r0, #50	; 0x32
 8003bb0:	f7fe ffc9 	bl	8002b46 <SX1276Write>
 8003bb4:	e7e6      	b.n	8003b84 <SX1276Send+0x30>
                memcpy1( RxTxBuffer, buffer, size );
 8003bb6:	b292      	uxth	r2, r2
 8003bb8:	0039      	movs	r1, r7
 8003bba:	4823      	ldr	r0, [pc, #140]	; (8003c48 <SX1276Send+0xf4>)
 8003bbc:	f008 ffdb 	bl	800cb76 <memcpy1>
                SX1276.Settings.FskPacketHandler.ChunkSize = 32;
 8003bc0:	0023      	movs	r3, r4
 8003bc2:	2220      	movs	r2, #32
 8003bc4:	333f      	adds	r3, #63	; 0x3f
 8003bc6:	e7e3      	b.n	8003b90 <SX1276Send+0x3c>
            if( SX1276.Settings.LoRa.IqInverted == true )
 8003bc8:	0023      	movs	r3, r4
 8003bca:	3355      	adds	r3, #85	; 0x55
 8003bcc:	781b      	ldrb	r3, [r3, #0]
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
 8003bce:	2033      	movs	r0, #51	; 0x33
            if( SX1276.Settings.LoRa.IqInverted == true )
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d02b      	beq.n	8003c2c <SX1276Send+0xd8>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
 8003bd4:	f7ff f80a 	bl	8002bec <SX1276Read>
 8003bd8:	2341      	movs	r3, #65	; 0x41
 8003bda:	4398      	bics	r0, r3
 8003bdc:	b2c1      	uxtb	r1, r0
 8003bde:	2033      	movs	r0, #51	; 0x33
 8003be0:	f7fe ffb1 	bl	8002b46 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 8003be4:	2119      	movs	r1, #25
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 8003be6:	203b      	movs	r0, #59	; 0x3b
 8003be8:	f7fe ffad 	bl	8002b46 <SX1276Write>
            SX1276.Settings.LoRaPacketHandler.Size = size;
 8003bec:	0023      	movs	r3, r4
 8003bee:	7831      	ldrb	r1, [r6, #0]
 8003bf0:	3364      	adds	r3, #100	; 0x64
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
 8003bf2:	2022      	movs	r0, #34	; 0x22
            SX1276.Settings.LoRaPacketHandler.Size = size;
 8003bf4:	7019      	strb	r1, [r3, #0]
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
 8003bf6:	f7fe ffa6 	bl	8002b46 <SX1276Write>
            SX1276Write( REG_LR_FIFOTXBASEADDR, 0 );
 8003bfa:	2100      	movs	r1, #0
 8003bfc:	200e      	movs	r0, #14
 8003bfe:	f7fe ffa2 	bl	8002b46 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 8003c02:	2100      	movs	r1, #0
 8003c04:	200d      	movs	r0, #13
 8003c06:	f7fe ff9e 	bl	8002b46 <SX1276Write>
            if( ( SX1276Read( REG_OPMODE ) & ~RF_OPMODE_MASK ) == RF_OPMODE_SLEEP )
 8003c0a:	2001      	movs	r0, #1
 8003c0c:	f7fe ffee 	bl	8002bec <SX1276Read>
 8003c10:	23f8      	movs	r3, #248	; 0xf8
 8003c12:	4398      	bics	r0, r3
 8003c14:	d104      	bne.n	8003c20 <SX1276Send+0xcc>
                SX1276SetStby( );
 8003c16:	f7ff f9b1 	bl	8002f7c <SX1276SetStby>
                DelayMs( 1 );
 8003c1a:	2001      	movs	r0, #1
 8003c1c:	f009 fdf2 	bl	800d804 <HAL_Delay>
            SX1276WriteFifo( buffer, size );
 8003c20:	0038      	movs	r0, r7
 8003c22:	7831      	ldrb	r1, [r6, #0]
 8003c24:	f7ff ff8e 	bl	8003b44 <SX1276WriteFifo>
            txTimeout = SX1276.Settings.LoRa.TxTimeout;
 8003c28:	6da0      	ldr	r0, [r4, #88]	; 0x58
        break;
 8003c2a:	e7bd      	b.n	8003ba8 <SX1276Send+0x54>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 8003c2c:	f7fe ffde 	bl	8002bec <SX1276Read>
 8003c30:	2341      	movs	r3, #65	; 0x41
 8003c32:	0001      	movs	r1, r0
 8003c34:	4399      	bics	r1, r3
 8003c36:	4329      	orrs	r1, r5
 8003c38:	b2c9      	uxtb	r1, r1
 8003c3a:	2033      	movs	r0, #51	; 0x33
 8003c3c:	f7fe ff83 	bl	8002b46 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 8003c40:	211d      	movs	r1, #29
 8003c42:	e7d0      	b.n	8003be6 <SX1276Send+0x92>
 8003c44:	20001558 	.word	0x20001558
 8003c48:	20000274 	.word	0x20000274

08003c4c <SX1276ReadFifo>:
{
 8003c4c:	b510      	push	{r4, lr}
 8003c4e:	000a      	movs	r2, r1
    SX1276ReadBuffer( 0, buffer, size );
 8003c50:	0001      	movs	r1, r0
 8003c52:	2000      	movs	r0, #0
 8003c54:	f7fe ffaa 	bl	8002bac <SX1276ReadBuffer>
}
 8003c58:	bd10      	pop	{r4, pc}
	...

08003c5c <SX1276OnDio0Irq>:
{
 8003c5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    volatile uint8_t irqFlags = 0;
 8003c5e:	466b      	mov	r3, sp
 8003c60:	1ddd      	adds	r5, r3, #7
 8003c62:	2300      	movs	r3, #0
    switch( SX1276.Settings.State )
 8003c64:	4c8c      	ldr	r4, [pc, #560]	; (8003e98 <SX1276OnDio0Irq+0x23c>)
    volatile uint8_t irqFlags = 0;
 8003c66:	702b      	strb	r3, [r5, #0]
    switch( SX1276.Settings.State )
 8003c68:	7923      	ldrb	r3, [r4, #4]
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d003      	beq.n	8003c76 <SX1276OnDio0Irq+0x1a>
 8003c6e:	2b02      	cmp	r3, #2
 8003c70:	d100      	bne.n	8003c74 <SX1276OnDio0Irq+0x18>
 8003c72:	e0fe      	b.n	8003e72 <SX1276OnDio0Irq+0x216>
}
 8003c74:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
            switch( SX1276.Settings.Modem )
 8003c76:	7963      	ldrb	r3, [r4, #5]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d024      	beq.n	8003cc6 <SX1276OnDio0Irq+0x6a>
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d1f9      	bne.n	8003c74 <SX1276OnDio0Irq+0x18>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXDONE );
 8003c80:	2140      	movs	r1, #64	; 0x40
 8003c82:	2012      	movs	r0, #18
 8003c84:	f7fe ff5f 	bl	8002b46 <SX1276Write>
                    irqFlags = SX1276Read( REG_LR_IRQFLAGS );
 8003c88:	2012      	movs	r0, #18
 8003c8a:	f7fe ffaf 	bl	8002bec <SX1276Read>
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
 8003c8e:	2120      	movs	r1, #32
                    irqFlags = SX1276Read( REG_LR_IRQFLAGS );
 8003c90:	7028      	strb	r0, [r5, #0]
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
 8003c92:	782b      	ldrb	r3, [r5, #0]
 8003c94:	4e81      	ldr	r6, [pc, #516]	; (8003e9c <SX1276OnDio0Irq+0x240>)
 8003c96:	4d82      	ldr	r5, [pc, #520]	; (8003ea0 <SX1276OnDio0Irq+0x244>)
 8003c98:	420b      	tst	r3, r1
 8003c9a:	d100      	bne.n	8003c9e <SX1276OnDio0Irq+0x42>
 8003c9c:	e08e      	b.n	8003dbc <SX1276OnDio0Irq+0x160>
                        SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_PAYLOADCRCERROR );
 8003c9e:	2012      	movs	r0, #18
 8003ca0:	f7fe ff51 	bl	8002b46 <SX1276Write>
                        if( SX1276.Settings.LoRa.RxContinuous == false )
 8003ca4:	0023      	movs	r3, r4
 8003ca6:	3356      	adds	r3, #86	; 0x56
 8003ca8:	781b      	ldrb	r3, [r3, #0]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d100      	bne.n	8003cb0 <SX1276OnDio0Irq+0x54>
                            SX1276.Settings.State = RF_IDLE;
 8003cae:	7123      	strb	r3, [r4, #4]
                        TimerStop( &RxTimeoutTimer );
 8003cb0:	0030      	movs	r0, r6
 8003cb2:	f008 fe6f 	bl	800c994 <TimerStop>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 8003cb6:	686b      	ldr	r3, [r5, #4]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d0db      	beq.n	8003c74 <SX1276OnDio0Irq+0x18>
 8003cbc:	691b      	ldr	r3, [r3, #16]
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d0d8      	beq.n	8003c74 <SX1276OnDio0Irq+0x18>
                    RadioEvents->TxDone( );
 8003cc2:	4798      	blx	r3
}
 8003cc4:	e7d6      	b.n	8003c74 <SX1276OnDio0Irq+0x18>
                if( SX1276.Settings.Fsk.CrcOn == true )
 8003cc6:	1d63      	adds	r3, r4, #5
 8003cc8:	7fdb      	ldrb	r3, [r3, #31]
 8003cca:	4e76      	ldr	r6, [pc, #472]	; (8003ea4 <SX1276OnDio0Irq+0x248>)
 8003ccc:	4f74      	ldr	r7, [pc, #464]	; (8003ea0 <SX1276OnDio0Irq+0x244>)
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d032      	beq.n	8003d38 <SX1276OnDio0Irq+0xdc>
                    irqFlags = SX1276Read( REG_IRQFLAGS2 );
 8003cd2:	203f      	movs	r0, #63	; 0x3f
 8003cd4:	f7fe ff8a 	bl	8002bec <SX1276Read>
 8003cd8:	7028      	strb	r0, [r5, #0]
                    if( ( irqFlags & RF_IRQFLAGS2_CRCOK ) != RF_IRQFLAGS2_CRCOK )
 8003cda:	782b      	ldrb	r3, [r5, #0]
 8003cdc:	079b      	lsls	r3, r3, #30
 8003cde:	d42b      	bmi.n	8003d38 <SX1276OnDio0Irq+0xdc>
                        SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 8003ce0:	210b      	movs	r1, #11
 8003ce2:	203e      	movs	r0, #62	; 0x3e
 8003ce4:	f7fe ff2f 	bl	8002b46 <SX1276Write>
                        SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 8003ce8:	2110      	movs	r1, #16
 8003cea:	203f      	movs	r0, #63	; 0x3f
 8003cec:	f7fe ff2b 	bl	8002b46 <SX1276Write>
                        TimerStop( &RxTimeoutTimer );
 8003cf0:	486a      	ldr	r0, [pc, #424]	; (8003e9c <SX1276OnDio0Irq+0x240>)
 8003cf2:	f008 fe4f 	bl	800c994 <TimerStop>
                        if( SX1276.Settings.Fsk.RxContinuous == false )
 8003cf6:	1de3      	adds	r3, r4, #7
 8003cf8:	7fdd      	ldrb	r5, [r3, #31]
 8003cfa:	2d00      	cmp	r5, #0
 8003cfc:	d10f      	bne.n	8003d1e <SX1276OnDio0Irq+0xc2>
                            TimerStop( &RxTimeoutSyncWord );
 8003cfe:	0030      	movs	r0, r6
 8003d00:	f008 fe48 	bl	800c994 <TimerStop>
                            SX1276.Settings.State = RF_IDLE;
 8003d04:	7125      	strb	r5, [r4, #4]
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d003      	beq.n	8003d14 <SX1276OnDio0Irq+0xb8>
 8003d0c:	691b      	ldr	r3, [r3, #16]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d000      	beq.n	8003d14 <SX1276OnDio0Irq+0xb8>
                            RadioEvents->RxError( );
 8003d12:	4798      	blx	r3
                        SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8003d14:	2300      	movs	r3, #0
 8003d16:	8623      	strh	r3, [r4, #48]	; 0x30
                        SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8003d18:	87a3      	strh	r3, [r4, #60]	; 0x3c
                        SX1276.Settings.FskPacketHandler.Size = 0;
 8003d1a:	8763      	strh	r3, [r4, #58]	; 0x3a
                        break;
 8003d1c:	e7aa      	b.n	8003c74 <SX1276OnDio0Irq+0x18>
                            SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 8003d1e:	200d      	movs	r0, #13
 8003d20:	f7fe ff64 	bl	8002bec <SX1276Read>
 8003d24:	2140      	movs	r1, #64	; 0x40
 8003d26:	4301      	orrs	r1, r0
 8003d28:	b2c9      	uxtb	r1, r1
 8003d2a:	200d      	movs	r0, #13
 8003d2c:	f7fe ff0b 	bl	8002b46 <SX1276Write>
                            TimerStart( &RxTimeoutSyncWord );
 8003d30:	0030      	movs	r0, r6
 8003d32:	f008 fdb3 	bl	800c89c <TimerStart>
 8003d36:	e7e6      	b.n	8003d06 <SX1276OnDio0Irq+0xaa>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 8003d38:	8f61      	ldrh	r1, [r4, #58]	; 0x3a
 8003d3a:	8fa0      	ldrh	r0, [r4, #60]	; 0x3c
 8003d3c:	4d5a      	ldr	r5, [pc, #360]	; (8003ea8 <SX1276OnDio0Irq+0x24c>)
 8003d3e:	2900      	cmp	r1, #0
 8003d40:	d10b      	bne.n	8003d5a <SX1276OnDio0Irq+0xfe>
 8003d42:	2800      	cmp	r0, #0
 8003d44:	d109      	bne.n	8003d5a <SX1276OnDio0Irq+0xfe>
                    if( SX1276.Settings.Fsk.FixLen == false )
 8003d46:	1ce3      	adds	r3, r4, #3
 8003d48:	7fdb      	ldrb	r3, [r3, #31]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d124      	bne.n	8003d98 <SX1276OnDio0Irq+0x13c>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 8003d4e:	3101      	adds	r1, #1
 8003d50:	4856      	ldr	r0, [pc, #344]	; (8003eac <SX1276OnDio0Irq+0x250>)
 8003d52:	f7ff ff7b 	bl	8003c4c <SX1276ReadFifo>
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8003d56:	8fa0      	ldrh	r0, [r4, #60]	; 0x3c
 8003d58:	8f61      	ldrh	r1, [r4, #58]	; 0x3a
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8003d5a:	1a09      	subs	r1, r1, r0
 8003d5c:	b2c9      	uxtb	r1, r1
 8003d5e:	1828      	adds	r0, r5, r0
 8003d60:	f7ff ff74 	bl	8003c4c <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8003d64:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
                TimerStop( &RxTimeoutTimer );
 8003d66:	484d      	ldr	r0, [pc, #308]	; (8003e9c <SX1276OnDio0Irq+0x240>)
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8003d68:	87a3      	strh	r3, [r4, #60]	; 0x3c
                TimerStop( &RxTimeoutTimer );
 8003d6a:	f008 fe13 	bl	800c994 <TimerStop>
                if( SX1276.Settings.Fsk.RxContinuous == false )
 8003d6e:	1de3      	adds	r3, r4, #7
 8003d70:	7fdb      	ldrb	r3, [r3, #31]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d115      	bne.n	8003da2 <SX1276OnDio0Irq+0x146>
                    TimerStop( &RxTimeoutSyncWord );
 8003d76:	0030      	movs	r0, r6
                    SX1276.Settings.State = RF_IDLE;
 8003d78:	7123      	strb	r3, [r4, #4]
                    TimerStop( &RxTimeoutSyncWord );
 8003d7a:	f008 fe0b 	bl	800c994 <TimerStop>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d0c7      	beq.n	8003d14 <SX1276OnDio0Irq+0xb8>
 8003d84:	689e      	ldr	r6, [r3, #8]
 8003d86:	2e00      	cmp	r6, #0
 8003d88:	d0c4      	beq.n	8003d14 <SX1276OnDio0Irq+0xb8>
                    RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.FskPacketHandler.Size, SX1276.Settings.FskPacketHandler.RssiValue, 0 );
 8003d8a:	2232      	movs	r2, #50	; 0x32
 8003d8c:	8f61      	ldrh	r1, [r4, #58]	; 0x3a
 8003d8e:	56a2      	ldrsb	r2, [r4, r2]
 8003d90:	2300      	movs	r3, #0
 8003d92:	0028      	movs	r0, r5
 8003d94:	47b0      	blx	r6
 8003d96:	e7bd      	b.n	8003d14 <SX1276OnDio0Irq+0xb8>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 8003d98:	2032      	movs	r0, #50	; 0x32
 8003d9a:	f7fe ff27 	bl	8002bec <SX1276Read>
 8003d9e:	8760      	strh	r0, [r4, #58]	; 0x3a
 8003da0:	e7d9      	b.n	8003d56 <SX1276OnDio0Irq+0xfa>
                    SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 8003da2:	200d      	movs	r0, #13
 8003da4:	f7fe ff22 	bl	8002bec <SX1276Read>
 8003da8:	2140      	movs	r1, #64	; 0x40
 8003daa:	4301      	orrs	r1, r0
 8003dac:	b2c9      	uxtb	r1, r1
 8003dae:	200d      	movs	r0, #13
 8003db0:	f7fe fec9 	bl	8002b46 <SX1276Write>
                    TimerStart( &RxTimeoutSyncWord );
 8003db4:	0030      	movs	r0, r6
 8003db6:	f008 fd71 	bl	800c89c <TimerStart>
 8003dba:	e7e0      	b.n	8003d7e <SX1276OnDio0Irq+0x122>
                    SX1276.Settings.LoRaPacketHandler.SnrValue = ( ( ( int8_t )SX1276Read( REG_LR_PKTSNRVALUE ) ) + 2 ) >> 2;
 8003dbc:	2019      	movs	r0, #25
 8003dbe:	f7fe ff15 	bl	8002bec <SX1276Read>
 8003dc2:	0027      	movs	r7, r4
 8003dc4:	b240      	sxtb	r0, r0
 8003dc6:	3002      	adds	r0, #2
 8003dc8:	3760      	adds	r7, #96	; 0x60
 8003dca:	1080      	asrs	r0, r0, #2
 8003dcc:	7038      	strb	r0, [r7, #0]
                    int16_t rssi = SX1276Read( REG_LR_PKTRSSIVALUE );
 8003dce:	201a      	movs	r0, #26
 8003dd0:	f7fe ff0c 	bl	8002bec <SX1276Read>
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue < 0 )
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	0021      	movs	r1, r4
 8003dd8:	56fb      	ldrsb	r3, [r7, r3]
 8003dda:	4a35      	ldr	r2, [pc, #212]	; (8003eb0 <SX1276OnDio0Irq+0x254>)
 8003ddc:	b207      	sxth	r7, r0
 8003dde:	113f      	asrs	r7, r7, #4
 8003de0:	b2bf      	uxth	r7, r7
 8003de2:	b280      	uxth	r0, r0
 8003de4:	4694      	mov	ip, r2
 8003de6:	3162      	adds	r1, #98	; 0x62
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	da39      	bge.n	8003e60 <SX1276OnDio0Irq+0x204>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8003dec:	68a2      	ldr	r2, [r4, #8]
 8003dee:	b29b      	uxth	r3, r3
 8003df0:	4562      	cmp	r2, ip
 8003df2:	d933      	bls.n	8003e5c <SX1276OnDio0Irq+0x200>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 8003df4:	3b9d      	subs	r3, #157	; 0x9d
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 8003df6:	18c3      	adds	r3, r0, r3
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
 8003df8:	18fb      	adds	r3, r7, r3
                    SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
 8003dfa:	2013      	movs	r0, #19
 8003dfc:	0027      	movs	r7, r4
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
 8003dfe:	800b      	strh	r3, [r1, #0]
                    SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
 8003e00:	f7fe fef4 	bl	8002bec <SX1276Read>
 8003e04:	3764      	adds	r7, #100	; 0x64
 8003e06:	7038      	strb	r0, [r7, #0]
                    SX1276Write( REG_LR_FIFOADDRPTR, SX1276Read( REG_LR_FIFORXCURRENTADDR ) );
 8003e08:	2010      	movs	r0, #16
 8003e0a:	f7fe feef 	bl	8002bec <SX1276Read>
 8003e0e:	0001      	movs	r1, r0
 8003e10:	200d      	movs	r0, #13
 8003e12:	f7fe fe98 	bl	8002b46 <SX1276Write>
                    SX1276ReadFifo( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size );
 8003e16:	7839      	ldrb	r1, [r7, #0]
 8003e18:	4f23      	ldr	r7, [pc, #140]	; (8003ea8 <SX1276OnDio0Irq+0x24c>)
 8003e1a:	0038      	movs	r0, r7
 8003e1c:	f7ff ff16 	bl	8003c4c <SX1276ReadFifo>
                    if( SX1276.Settings.LoRa.RxContinuous == false )
 8003e20:	0023      	movs	r3, r4
 8003e22:	3356      	adds	r3, #86	; 0x56
 8003e24:	781b      	ldrb	r3, [r3, #0]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d100      	bne.n	8003e2c <SX1276OnDio0Irq+0x1d0>
                        SX1276.Settings.State = RF_IDLE;
 8003e2a:	7123      	strb	r3, [r4, #4]
                    TimerStop( &RxTimeoutTimer );
 8003e2c:	0030      	movs	r0, r6
 8003e2e:	f008 fdb1 	bl	800c994 <TimerStop>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8003e32:	686b      	ldr	r3, [r5, #4]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d100      	bne.n	8003e3a <SX1276OnDio0Irq+0x1de>
 8003e38:	e71c      	b.n	8003c74 <SX1276OnDio0Irq+0x18>
 8003e3a:	689d      	ldr	r5, [r3, #8]
 8003e3c:	2d00      	cmp	r5, #0
 8003e3e:	d100      	bne.n	8003e42 <SX1276OnDio0Irq+0x1e6>
 8003e40:	e718      	b.n	8003c74 <SX1276OnDio0Irq+0x18>
                        RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size, SX1276.Settings.LoRaPacketHandler.RssiValue, SX1276.Settings.LoRaPacketHandler.SnrValue );
 8003e42:	0023      	movs	r3, r4
 8003e44:	0022      	movs	r2, r4
 8003e46:	3360      	adds	r3, #96	; 0x60
 8003e48:	781b      	ldrb	r3, [r3, #0]
 8003e4a:	3464      	adds	r4, #100	; 0x64
 8003e4c:	3262      	adds	r2, #98	; 0x62
 8003e4e:	2100      	movs	r1, #0
 8003e50:	5e52      	ldrsh	r2, [r2, r1]
 8003e52:	b25b      	sxtb	r3, r3
 8003e54:	7821      	ldrb	r1, [r4, #0]
 8003e56:	0038      	movs	r0, r7
 8003e58:	47a8      	blx	r5
 8003e5a:	e70b      	b.n	8003c74 <SX1276OnDio0Irq+0x18>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 8003e5c:	3ba4      	subs	r3, #164	; 0xa4
 8003e5e:	e7ca      	b.n	8003df6 <SX1276OnDio0Irq+0x19a>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8003e60:	68a3      	ldr	r3, [r4, #8]
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d902      	bls.n	8003e6c <SX1276OnDio0Irq+0x210>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 );
 8003e66:	0003      	movs	r3, r0
 8003e68:	3b9d      	subs	r3, #157	; 0x9d
 8003e6a:	e7c5      	b.n	8003df8 <SX1276OnDio0Irq+0x19c>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
 8003e6c:	0003      	movs	r3, r0
 8003e6e:	3ba4      	subs	r3, #164	; 0xa4
 8003e70:	e7c2      	b.n	8003df8 <SX1276OnDio0Irq+0x19c>
            TimerStop( &TxTimeoutTimer );
 8003e72:	4810      	ldr	r0, [pc, #64]	; (8003eb4 <SX1276OnDio0Irq+0x258>)
 8003e74:	f008 fd8e 	bl	800c994 <TimerStop>
            switch( SX1276.Settings.Modem )
 8003e78:	7963      	ldrb	r3, [r4, #5]
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d103      	bne.n	8003e86 <SX1276OnDio0Irq+0x22a>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_TXDONE );
 8003e7e:	2108      	movs	r1, #8
 8003e80:	2012      	movs	r0, #18
 8003e82:	f7fe fe60 	bl	8002b46 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 8003e86:	2300      	movs	r3, #0
 8003e88:	7123      	strb	r3, [r4, #4]
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8003e8a:	4b05      	ldr	r3, [pc, #20]	; (8003ea0 <SX1276OnDio0Irq+0x244>)
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d100      	bne.n	8003e94 <SX1276OnDio0Irq+0x238>
 8003e92:	e6ef      	b.n	8003c74 <SX1276OnDio0Irq+0x18>
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	e712      	b.n	8003cbe <SX1276OnDio0Irq+0x62>
 8003e98:	20001558 	.word	0x20001558
 8003e9c:	200015c0 	.word	0x200015c0
 8003ea0:	2000026c 	.word	0x2000026c
 8003ea4:	20001540 	.word	0x20001540
 8003ea8:	20000274 	.word	0x20000274
 8003eac:	20001592 	.word	0x20001592
 8003eb0:	1f4add40 	.word	0x1f4add40
 8003eb4:	20001528 	.word	0x20001528

08003eb8 <SX1276OnDio1Irq>:
{
 8003eb8:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.State )
 8003eba:	4c31      	ldr	r4, [pc, #196]	; (8003f80 <SX1276OnDio1Irq+0xc8>)
 8003ebc:	7925      	ldrb	r5, [r4, #4]
 8003ebe:	2d01      	cmp	r5, #1
 8003ec0:	d002      	beq.n	8003ec8 <SX1276OnDio1Irq+0x10>
 8003ec2:	2d02      	cmp	r5, #2
 8003ec4:	d046      	beq.n	8003f54 <SX1276OnDio1Irq+0x9c>
}
 8003ec6:	bd70      	pop	{r4, r5, r6, pc}
            switch( SX1276.Settings.Modem )
 8003ec8:	7963      	ldrb	r3, [r4, #5]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d013      	beq.n	8003ef6 <SX1276OnDio1Irq+0x3e>
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d1f9      	bne.n	8003ec6 <SX1276OnDio1Irq+0xe>
                TimerStop( &RxTimeoutTimer );
 8003ed2:	482c      	ldr	r0, [pc, #176]	; (8003f84 <SX1276OnDio1Irq+0xcc>)
 8003ed4:	f008 fd5e 	bl	800c994 <TimerStop>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXTIMEOUT );
 8003ed8:	2180      	movs	r1, #128	; 0x80
 8003eda:	2012      	movs	r0, #18
 8003edc:	f7fe fe33 	bl	8002b46 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	7123      	strb	r3, [r4, #4]
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8003ee4:	4b28      	ldr	r3, [pc, #160]	; (8003f88 <SX1276OnDio1Irq+0xd0>)
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d0ec      	beq.n	8003ec6 <SX1276OnDio1Irq+0xe>
 8003eec:	68db      	ldr	r3, [r3, #12]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d0e9      	beq.n	8003ec6 <SX1276OnDio1Irq+0xe>
                    RadioEvents->RxTimeout( );
 8003ef2:	4798      	blx	r3
 8003ef4:	e7e7      	b.n	8003ec6 <SX1276OnDio1Irq+0xe>
                TimerStop( &RxTimeoutSyncWord );
 8003ef6:	4825      	ldr	r0, [pc, #148]	; (8003f8c <SX1276OnDio1Irq+0xd4>)
 8003ef8:	f008 fd4c 	bl	800c994 <TimerStop>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 8003efc:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d10a      	bne.n	8003f18 <SX1276OnDio1Irq+0x60>
 8003f02:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d107      	bne.n	8003f18 <SX1276OnDio1Irq+0x60>
                    if( SX1276.Settings.Fsk.FixLen == false )
 8003f08:	1ce3      	adds	r3, r4, #3
 8003f0a:	7fdb      	ldrb	r3, [r3, #31]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d117      	bne.n	8003f40 <SX1276OnDio1Irq+0x88>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 8003f10:	0029      	movs	r1, r5
 8003f12:	481f      	ldr	r0, [pc, #124]	; (8003f90 <SX1276OnDio1Irq+0xd8>)
 8003f14:	f7ff fe9a 	bl	8003c4c <SX1276ReadFifo>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
 8003f18:	0025      	movs	r5, r4
 8003f1a:	353e      	adds	r5, #62	; 0x3e
 8003f1c:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 8003f1e:	8f61      	ldrh	r1, [r4, #58]	; 0x3a
 8003f20:	481c      	ldr	r0, [pc, #112]	; (8003f94 <SX1276OnDio1Irq+0xdc>)
 8003f22:	782b      	ldrb	r3, [r5, #0]
 8003f24:	1810      	adds	r0, r2, r0
 8003f26:	1a89      	subs	r1, r1, r2
 8003f28:	4299      	cmp	r1, r3
 8003f2a:	db0e      	blt.n	8003f4a <SX1276OnDio1Irq+0x92>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh - 1 );
 8003f2c:	3b01      	subs	r3, #1
 8003f2e:	b2d9      	uxtb	r1, r3
 8003f30:	f7ff fe8c 	bl	8003c4c <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.FifoThresh - 1;
 8003f34:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 8003f36:	782b      	ldrb	r3, [r5, #0]
 8003f38:	3a01      	subs	r2, #1
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 8003f3a:	189b      	adds	r3, r3, r2
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
 8003f3c:	87a3      	strh	r3, [r4, #60]	; 0x3c
}
 8003f3e:	e7c2      	b.n	8003ec6 <SX1276OnDio1Irq+0xe>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 8003f40:	2032      	movs	r0, #50	; 0x32
 8003f42:	f7fe fe53 	bl	8002bec <SX1276Read>
 8003f46:	8760      	strh	r0, [r4, #58]	; 0x3a
 8003f48:	e7e6      	b.n	8003f18 <SX1276OnDio1Irq+0x60>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8003f4a:	b2c9      	uxtb	r1, r1
 8003f4c:	f7ff fe7e 	bl	8003c4c <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
 8003f50:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 8003f52:	e7f3      	b.n	8003f3c <SX1276OnDio1Irq+0x84>
            switch( SX1276.Settings.Modem )
 8003f54:	7963      	ldrb	r3, [r4, #5]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d1b5      	bne.n	8003ec6 <SX1276OnDio1Irq+0xe>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
 8003f5a:	0025      	movs	r5, r4
 8003f5c:	353f      	adds	r5, #63	; 0x3f
 8003f5e:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 8003f60:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 8003f62:	480c      	ldr	r0, [pc, #48]	; (8003f94 <SX1276OnDio1Irq+0xdc>)
 8003f64:	7829      	ldrb	r1, [r5, #0]
 8003f66:	1810      	adds	r0, r2, r0
 8003f68:	1a9b      	subs	r3, r3, r2
 8003f6a:	428b      	cmp	r3, r1
 8003f6c:	dd04      	ble.n	8003f78 <SX1276OnDio1Irq+0xc0>
                    SX1276WriteFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.ChunkSize );
 8003f6e:	f7ff fde9 	bl	8003b44 <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 8003f72:	782b      	ldrb	r3, [r5, #0]
 8003f74:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 8003f76:	e7e0      	b.n	8003f3a <SX1276OnDio1Irq+0x82>
                    SX1276WriteFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8003f78:	b2d9      	uxtb	r1, r3
 8003f7a:	f7ff fde3 	bl	8003b44 <SX1276WriteFifo>
 8003f7e:	e7e7      	b.n	8003f50 <SX1276OnDio1Irq+0x98>
 8003f80:	20001558 	.word	0x20001558
 8003f84:	200015c0 	.word	0x200015c0
 8003f88:	2000026c 	.word	0x2000026c
 8003f8c:	20001540 	.word	0x20001540
 8003f90:	20001592 	.word	0x20001592
 8003f94:	20000274 	.word	0x20000274

08003f98 <SX1276SetMaxPayloadLength>:
{
 8003f98:	b570      	push	{r4, r5, r6, lr}
 8003f9a:	0004      	movs	r4, r0
 8003f9c:	000d      	movs	r5, r1
    SX1276SetModem( modem );
 8003f9e:	f7ff f97d 	bl	800329c <SX1276SetModem>
    switch( modem )
 8003fa2:	2c00      	cmp	r4, #0
 8003fa4:	d002      	beq.n	8003fac <SX1276SetMaxPayloadLength+0x14>
 8003fa6:	2c01      	cmp	r4, #1
 8003fa8:	d00a      	beq.n	8003fc0 <SX1276SetMaxPayloadLength+0x28>
}
 8003faa:	bd70      	pop	{r4, r5, r6, pc}
        if( SX1276.Settings.Fsk.FixLen == false )
 8003fac:	4b06      	ldr	r3, [pc, #24]	; (8003fc8 <SX1276SetMaxPayloadLength+0x30>)
 8003fae:	3303      	adds	r3, #3
 8003fb0:	7fdb      	ldrb	r3, [r3, #31]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d1f9      	bne.n	8003faa <SX1276SetMaxPayloadLength+0x12>
            SX1276Write( REG_PAYLOADLENGTH, max );
 8003fb6:	0029      	movs	r1, r5
 8003fb8:	2032      	movs	r0, #50	; 0x32
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
 8003fba:	f7fe fdc4 	bl	8002b46 <SX1276Write>
}
 8003fbe:	e7f4      	b.n	8003faa <SX1276SetMaxPayloadLength+0x12>
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
 8003fc0:	0029      	movs	r1, r5
 8003fc2:	2023      	movs	r0, #35	; 0x23
 8003fc4:	e7f9      	b.n	8003fba <SX1276SetMaxPayloadLength+0x22>
 8003fc6:	46c0      	nop			; (mov r8, r8)
 8003fc8:	20001558 	.word	0x20001558

08003fcc <SX1276SetPublicNetwork>:
{
 8003fcc:	b510      	push	{r4, lr}
 8003fce:	0004      	movs	r4, r0
    SX1276SetModem( MODEM_LORA );
 8003fd0:	2001      	movs	r0, #1
 8003fd2:	f7ff f963 	bl	800329c <SX1276SetModem>
    SX1276.Settings.LoRa.PublicNetwork = enable;
 8003fd6:	4b05      	ldr	r3, [pc, #20]	; (8003fec <SX1276SetPublicNetwork+0x20>)
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PUBLIC_SYNCWORD );
 8003fd8:	2134      	movs	r1, #52	; 0x34
    SX1276.Settings.LoRa.PublicNetwork = enable;
 8003fda:	335c      	adds	r3, #92	; 0x5c
 8003fdc:	701c      	strb	r4, [r3, #0]
    if( enable == true )
 8003fde:	2c00      	cmp	r4, #0
 8003fe0:	d100      	bne.n	8003fe4 <SX1276SetPublicNetwork+0x18>
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
 8003fe2:	2112      	movs	r1, #18
 8003fe4:	2039      	movs	r0, #57	; 0x39
 8003fe6:	f7fe fdae 	bl	8002b46 <SX1276Write>
}
 8003fea:	bd10      	pop	{r4, pc}
 8003fec:	20001558 	.word	0x20001558

08003ff0 <SX1276OnTimeoutIrq>:
{
 8003ff0:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.State )
 8003ff2:	4c2c      	ldr	r4, [pc, #176]	; (80040a4 <SX1276OnTimeoutIrq+0xb4>)
 8003ff4:	7923      	ldrb	r3, [r4, #4]
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	d002      	beq.n	8004000 <SX1276OnTimeoutIrq+0x10>
 8003ffa:	2b02      	cmp	r3, #2
 8003ffc:	d02d      	beq.n	800405a <SX1276OnTimeoutIrq+0x6a>
}
 8003ffe:	bd70      	pop	{r4, r5, r6, pc}
        if( SX1276.Settings.Modem == MODEM_FSK )
 8004000:	7963      	ldrb	r3, [r4, #5]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d11b      	bne.n	800403e <SX1276OnTimeoutIrq+0x4e>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8004006:	8623      	strh	r3, [r4, #48]	; 0x30
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 8004008:	210b      	movs	r1, #11
 800400a:	203e      	movs	r0, #62	; 0x3e
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 800400c:	87a3      	strh	r3, [r4, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = 0;
 800400e:	8763      	strh	r3, [r4, #58]	; 0x3a
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 8004010:	f7fe fd99 	bl	8002b46 <SX1276Write>
            SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 8004014:	2110      	movs	r1, #16
 8004016:	203f      	movs	r0, #63	; 0x3f
 8004018:	f7fe fd95 	bl	8002b46 <SX1276Write>
            if( SX1276.Settings.Fsk.RxContinuous == true )
 800401c:	1de3      	adds	r3, r4, #7
 800401e:	7fdb      	ldrb	r3, [r3, #31]
 8004020:	4d21      	ldr	r5, [pc, #132]	; (80040a8 <SX1276OnTimeoutIrq+0xb8>)
 8004022:	2b00      	cmp	r3, #0
 8004024:	d014      	beq.n	8004050 <SX1276OnTimeoutIrq+0x60>
                SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 8004026:	200d      	movs	r0, #13
 8004028:	f7fe fde0 	bl	8002bec <SX1276Read>
 800402c:	2140      	movs	r1, #64	; 0x40
 800402e:	4301      	orrs	r1, r0
 8004030:	b2c9      	uxtb	r1, r1
 8004032:	200d      	movs	r0, #13
 8004034:	f7fe fd87 	bl	8002b46 <SX1276Write>
                TimerStart( &RxTimeoutSyncWord );
 8004038:	0028      	movs	r0, r5
 800403a:	f008 fc2f 	bl	800c89c <TimerStart>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800403e:	4b1b      	ldr	r3, [pc, #108]	; (80040ac <SX1276OnTimeoutIrq+0xbc>)
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d0db      	beq.n	8003ffe <SX1276OnTimeoutIrq+0xe>
 8004046:	68db      	ldr	r3, [r3, #12]
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8004048:	2b00      	cmp	r3, #0
 800404a:	d0d8      	beq.n	8003ffe <SX1276OnTimeoutIrq+0xe>
            RadioEvents->TxTimeout( );
 800404c:	4798      	blx	r3
}
 800404e:	e7d6      	b.n	8003ffe <SX1276OnTimeoutIrq+0xe>
                TimerStop( &RxTimeoutSyncWord );
 8004050:	0028      	movs	r0, r5
                SX1276.Settings.State = RF_IDLE;
 8004052:	7123      	strb	r3, [r4, #4]
                TimerStop( &RxTimeoutSyncWord );
 8004054:	f008 fc9e 	bl	800c994 <TimerStop>
 8004058:	e7f1      	b.n	800403e <SX1276OnTimeoutIrq+0x4e>
        SX1276Reset( );
 800405a:	f7fe fd2d 	bl	8002ab8 <SX1276Reset>
        RxChainCalibration( );
 800405e:	f7fe fdcf 	bl	8002c00 <RxChainCalibration>
 8004062:	f7fe ff33 	bl	8002ecc <SX1276SetOpMode.part.2>
 8004066:	4e12      	ldr	r6, [pc, #72]	; (80040b0 <SX1276OnTimeoutIrq+0xc0>)
 8004068:	0035      	movs	r5, r6
 800406a:	3648      	adds	r6, #72	; 0x48
 800406c:	3518      	adds	r5, #24
            SX1276SetModem( RadioRegsInit[i].Modem );
 800406e:	7828      	ldrb	r0, [r5, #0]
 8004070:	f7ff f914 	bl	800329c <SX1276SetModem>
            SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 8004074:	78a9      	ldrb	r1, [r5, #2]
 8004076:	7868      	ldrb	r0, [r5, #1]
 8004078:	3503      	adds	r5, #3
 800407a:	f7fe fd64 	bl	8002b46 <SX1276Write>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 800407e:	42b5      	cmp	r5, r6
 8004080:	d1f5      	bne.n	800406e <SX1276OnTimeoutIrq+0x7e>
        SX1276SetModem( MODEM_FSK );
 8004082:	2000      	movs	r0, #0
 8004084:	f7ff f90a 	bl	800329c <SX1276SetModem>
        SX1276SetPublicNetwork( SX1276.Settings.LoRa.PublicNetwork );
 8004088:	0023      	movs	r3, r4
 800408a:	335c      	adds	r3, #92	; 0x5c
 800408c:	7818      	ldrb	r0, [r3, #0]
 800408e:	f7ff ff9d 	bl	8003fcc <SX1276SetPublicNetwork>
        SX1276.Settings.State = RF_IDLE;
 8004092:	2300      	movs	r3, #0
 8004094:	7123      	strb	r3, [r4, #4]
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8004096:	4b05      	ldr	r3, [pc, #20]	; (80040ac <SX1276OnTimeoutIrq+0xbc>)
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d0af      	beq.n	8003ffe <SX1276OnTimeoutIrq+0xe>
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	e7d2      	b.n	8004048 <SX1276OnTimeoutIrq+0x58>
 80040a2:	46c0      	nop			; (mov r8, r8)
 80040a4:	20001558 	.word	0x20001558
 80040a8:	20001540 	.word	0x20001540
 80040ac:	2000026c 	.word	0x2000026c
 80040b0:	0800eb18 	.word	0x0800eb18

080040b4 <SX1276GetWakeupTime>:
    return ( uint32_t )LoRaBoardCallbacks->SX1276BoardGetWakeTime( ) + RADIO_WAKEUP_TIME;// BOARD_WAKEUP_TIME;
 80040b4:	4b03      	ldr	r3, [pc, #12]	; (80040c4 <SX1276GetWakeupTime+0x10>)
{
 80040b6:	b510      	push	{r4, lr}
    return ( uint32_t )LoRaBoardCallbacks->SX1276BoardGetWakeTime( ) + RADIO_WAKEUP_TIME;// BOARD_WAKEUP_TIME;
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	4798      	blx	r3
 80040be:	3002      	adds	r0, #2
}
 80040c0:	bd10      	pop	{r4, pc}
 80040c2:	46c0      	nop			; (mov r8, r8)
 80040c4:	2000026c 	.word	0x2000026c

080040c8 <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 80040c8:	2280      	movs	r2, #128	; 0x80
 80040ca:	4b10      	ldr	r3, [pc, #64]	; (800410c <SystemInit+0x44>)
 80040cc:	0052      	lsls	r2, r2, #1
 80040ce:	6819      	ldr	r1, [r3, #0]
 80040d0:	430a      	orrs	r2, r1
 80040d2:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 80040d4:	68da      	ldr	r2, [r3, #12]
 80040d6:	490e      	ldr	r1, [pc, #56]	; (8004110 <SystemInit+0x48>)
 80040d8:	400a      	ands	r2, r1
 80040da:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	490d      	ldr	r1, [pc, #52]	; (8004114 <SystemInit+0x4c>)
 80040e0:	400a      	ands	r2, r1

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80040e2:	2101      	movs	r1, #1
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 80040e4:	601a      	str	r2, [r3, #0]
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80040e6:	689a      	ldr	r2, [r3, #8]
 80040e8:	438a      	bics	r2, r1
 80040ea:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	490a      	ldr	r1, [pc, #40]	; (8004118 <SystemInit+0x50>)
 80040f0:	400a      	ands	r2, r1
 80040f2:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 80040f4:	68da      	ldr	r2, [r3, #12]
 80040f6:	4909      	ldr	r1, [pc, #36]	; (800411c <SystemInit+0x54>)
 80040f8:	400a      	ands	r2, r1
 80040fa:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80040fc:	2200      	movs	r2, #0
 80040fe:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004100:	2280      	movs	r2, #128	; 0x80
 8004102:	4b07      	ldr	r3, [pc, #28]	; (8004120 <SystemInit+0x58>)
 8004104:	0512      	lsls	r2, r2, #20
 8004106:	609a      	str	r2, [r3, #8]
#endif
}
 8004108:	4770      	bx	lr
 800410a:	46c0      	nop			; (mov r8, r8)
 800410c:	40021000 	.word	0x40021000
 8004110:	88ff400c 	.word	0x88ff400c
 8004114:	fef6fff6 	.word	0xfef6fff6
 8004118:	fffbffff 	.word	0xfffbffff
 800411c:	ff02ffff 	.word	0xff02ffff
 8004120:	e000ed00 	.word	0xe000ed00

08004124 <HAL_Init>:
#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
#endif /* PREREAD_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004124:	2302      	movs	r3, #2
 8004126:	4a08      	ldr	r2, [pc, #32]	; (8004148 <HAL_Init+0x24>)
{
 8004128:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800412a:	6811      	ldr	r1, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800412c:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800412e:	430b      	orrs	r3, r1
 8004130:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004132:	f009 fb65 	bl	800d800 <HAL_InitTick>
 8004136:	1e04      	subs	r4, r0, #0
 8004138:	d103      	bne.n	8004142 <HAL_Init+0x1e>
    status = HAL_ERROR;
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800413a:	f009 fb69 	bl	800d810 <HAL_MspInit>
  }

  /* Return function status */
  return status;
}
 800413e:	0020      	movs	r0, r4
 8004140:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8004142:	2401      	movs	r4, #1
 8004144:	e7fb      	b.n	800413e <HAL_Init+0x1a>
 8004146:	46c0      	nop			; (mov r8, r8)
 8004148:	40022000 	.word	0x40022000

0800414c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 800414c:	4a02      	ldr	r2, [pc, #8]	; (8004158 <HAL_IncTick+0xc>)
 800414e:	6813      	ldr	r3, [r2, #0]
 8004150:	3301      	adds	r3, #1
 8004152:	6013      	str	r3, [r2, #0]
}
 8004154:	4770      	bx	lr
 8004156:	46c0      	nop			; (mov r8, r8)
 8004158:	200015d8 	.word	0x200015d8

0800415c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800415c:	4b01      	ldr	r3, [pc, #4]	; (8004164 <HAL_GetTick+0x8>)
 800415e:	6818      	ldr	r0, [r3, #0]
}
 8004160:	4770      	bx	lr
 8004162:	46c0      	nop			; (mov r8, r8)
 8004164:	200015d8 	.word	0x200015d8

08004168 <HAL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enables the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8004168:	2301      	movs	r3, #1
 800416a:	4a02      	ldr	r2, [pc, #8]	; (8004174 <HAL_DBGMCU_EnableDBGSleepMode+0xc>)
 800416c:	6851      	ldr	r1, [r2, #4]
 800416e:	430b      	orrs	r3, r1
 8004170:	6053      	str	r3, [r2, #4]
}
 8004172:	4770      	bx	lr
 8004174:	40015800 	.word	0x40015800

08004178 <HAL_DBGMCU_EnableDBGStopMode>:
  * @brief  Enables the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8004178:	2302      	movs	r3, #2
 800417a:	4a02      	ldr	r2, [pc, #8]	; (8004184 <HAL_DBGMCU_EnableDBGStopMode+0xc>)
 800417c:	6851      	ldr	r1, [r2, #4]
 800417e:	430b      	orrs	r3, r1
 8004180:	6053      	str	r3, [r2, #4]
}
 8004182:	4770      	bx	lr
 8004184:	40015800 	.word	0x40015800

08004188 <HAL_DBGMCU_EnableDBGStandbyMode>:
  * @brief  Enables the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8004188:	2304      	movs	r3, #4
 800418a:	4a02      	ldr	r2, [pc, #8]	; (8004194 <HAL_DBGMCU_EnableDBGStandbyMode+0xc>)
 800418c:	6851      	ldr	r1, [r2, #4]
 800418e:	430b      	orrs	r3, r1
 8004190:	6053      	str	r3, [r2, #4]
}
 8004192:	4770      	bx	lr
 8004194:	40015800 	.word	0x40015800

08004198 <ADC_DelayMicroSecond>:
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8004198:	4b08      	ldr	r3, [pc, #32]	; (80041bc <ADC_DelayMicroSecond+0x24>)
{
 800419a:	b513      	push	{r0, r1, r4, lr}
 800419c:	0004      	movs	r4, r0
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 800419e:	4908      	ldr	r1, [pc, #32]	; (80041c0 <ADC_DelayMicroSecond+0x28>)
 80041a0:	6818      	ldr	r0, [r3, #0]
 80041a2:	f7fb ffcf 	bl	8000144 <__udivsi3>
 80041a6:	4344      	muls	r4, r0
 80041a8:	9401      	str	r4, [sp, #4]

  while(waitLoopIndex != 0U)
 80041aa:	9b01      	ldr	r3, [sp, #4]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d100      	bne.n	80041b2 <ADC_DelayMicroSecond+0x1a>
  {
    waitLoopIndex--;
  } 
}
 80041b0:	bd13      	pop	{r0, r1, r4, pc}
    waitLoopIndex--;
 80041b2:	9b01      	ldr	r3, [sp, #4]
 80041b4:	3b01      	subs	r3, #1
 80041b6:	9301      	str	r3, [sp, #4]
 80041b8:	e7f7      	b.n	80041aa <ADC_DelayMicroSecond+0x12>
 80041ba:	46c0      	nop			; (mov r8, r8)
 80041bc:	20000044 	.word	0x20000044
 80041c0:	000f4240 	.word	0x000f4240

080041c4 <ADC_Enable>:
  if (ADC_IS_ENABLE(hadc) == RESET)
 80041c4:	2103      	movs	r1, #3
 80041c6:	6803      	ldr	r3, [r0, #0]
{
 80041c8:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 80041ca:	689a      	ldr	r2, [r3, #8]
{
 80041cc:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 80041ce:	400a      	ands	r2, r1
 80041d0:	2a01      	cmp	r2, #1
 80041d2:	d104      	bne.n	80041de <ADC_Enable+0x1a>
 80041d4:	6819      	ldr	r1, [r3, #0]
 80041d6:	4211      	tst	r1, r2
 80041d8:	d001      	beq.n	80041de <ADC_Enable+0x1a>
  return HAL_OK;
 80041da:	2000      	movs	r0, #0
}
 80041dc:	bd70      	pop	{r4, r5, r6, pc}
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80041de:	6899      	ldr	r1, [r3, #8]
 80041e0:	4a13      	ldr	r2, [pc, #76]	; (8004230 <ADC_Enable+0x6c>)
 80041e2:	4211      	tst	r1, r2
 80041e4:	d008      	beq.n	80041f8 <ADC_Enable+0x34>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80041e6:	2310      	movs	r3, #16
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80041e8:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80041ea:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80041ec:	4313      	orrs	r3, r2
 80041ee:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80041f0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80041f2:	4303      	orrs	r3, r0
 80041f4:	65a3      	str	r3, [r4, #88]	; 0x58
      return HAL_ERROR;
 80041f6:	e7f1      	b.n	80041dc <ADC_Enable+0x18>
    __HAL_ADC_ENABLE(hadc);
 80041f8:	2501      	movs	r5, #1
 80041fa:	689a      	ldr	r2, [r3, #8]
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 80041fc:	0028      	movs	r0, r5
    __HAL_ADC_ENABLE(hadc);
 80041fe:	432a      	orrs	r2, r5
 8004200:	609a      	str	r2, [r3, #8]
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8004202:	f7ff ffc9 	bl	8004198 <ADC_DelayMicroSecond>
    tickstart = HAL_GetTick();
 8004206:	f7ff ffa9 	bl	800415c <HAL_GetTick>
 800420a:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800420c:	6823      	ldr	r3, [r4, #0]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	422b      	tst	r3, r5
 8004212:	d1e2      	bne.n	80041da <ADC_Enable+0x16>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004214:	f7ff ffa2 	bl	800415c <HAL_GetTick>
 8004218:	1b80      	subs	r0, r0, r6
 800421a:	280a      	cmp	r0, #10
 800421c:	d9f6      	bls.n	800420c <ADC_Enable+0x48>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800421e:	2310      	movs	r3, #16
 8004220:	6d62      	ldr	r2, [r4, #84]	; 0x54
        return HAL_ERROR;
 8004222:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004224:	4313      	orrs	r3, r2
 8004226:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004228:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800422a:	431d      	orrs	r5, r3
 800422c:	65a5      	str	r5, [r4, #88]	; 0x58
        return HAL_ERROR;
 800422e:	e7d5      	b.n	80041dc <ADC_Enable+0x18>
 8004230:	80000017 	.word	0x80000017

08004234 <HAL_ADC_MspInit>:
}
 8004234:	4770      	bx	lr
	...

08004238 <HAL_ADC_Init>:
{
 8004238:	b570      	push	{r4, r5, r6, lr}
 800423a:	0004      	movs	r4, r0
    return HAL_ERROR;
 800423c:	2001      	movs	r0, #1
  if(hadc == NULL)
 800423e:	2c00      	cmp	r4, #0
 8004240:	d019      	beq.n	8004276 <HAL_ADC_Init+0x3e>
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004242:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004244:	2b00      	cmp	r3, #0
 8004246:	d106      	bne.n	8004256 <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
 8004248:	0022      	movs	r2, r4
 800424a:	3250      	adds	r2, #80	; 0x50
    ADC_CLEAR_ERRORCODE(hadc);
 800424c:	65a3      	str	r3, [r4, #88]	; 0x58
    HAL_ADC_MspInit(hadc);
 800424e:	0020      	movs	r0, r4
    hadc->Lock = HAL_UNLOCKED;
 8004250:	7013      	strb	r3, [r2, #0]
    HAL_ADC_MspInit(hadc);
 8004252:	f7ff ffef 	bl	8004234 <HAL_ADC_MspInit>
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8004256:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004258:	06db      	lsls	r3, r3, #27
 800425a:	d404      	bmi.n	8004266 <HAL_ADC_Init+0x2e>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 800425c:	2204      	movs	r2, #4
 800425e:	6823      	ldr	r3, [r4, #0]
 8004260:	6898      	ldr	r0, [r3, #8]
 8004262:	4010      	ands	r0, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8004264:	d008      	beq.n	8004278 <HAL_ADC_Init+0x40>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004266:	2310      	movs	r3, #16
 8004268:	6d62      	ldr	r2, [r4, #84]	; 0x54
    return HAL_ERROR;
 800426a:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800426c:	4313      	orrs	r3, r2
 800426e:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 8004270:	2300      	movs	r3, #0
 8004272:	3450      	adds	r4, #80	; 0x50
 8004274:	7023      	strb	r3, [r4, #0]
}
 8004276:	bd70      	pop	{r4, r5, r6, pc}
  ADC_STATE_CLR_SET(hadc->State,
 8004278:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800427a:	4955      	ldr	r1, [pc, #340]	; (80043d0 <HAL_ADC_Init+0x198>)
 800427c:	4011      	ands	r1, r2
 800427e:	2202      	movs	r2, #2
 8004280:	430a      	orrs	r2, r1
 8004282:	6562      	str	r2, [r4, #84]	; 0x54
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004284:	2203      	movs	r2, #3
 8004286:	6899      	ldr	r1, [r3, #8]
 8004288:	4011      	ands	r1, r2
 800428a:	4a52      	ldr	r2, [pc, #328]	; (80043d4 <HAL_ADC_Init+0x19c>)
 800428c:	2901      	cmp	r1, #1
 800428e:	d102      	bne.n	8004296 <HAL_ADC_Init+0x5e>
 8004290:	681d      	ldr	r5, [r3, #0]
 8004292:	420d      	tst	r5, r1
 8004294:	d119      	bne.n	80042ca <HAL_ADC_Init+0x92>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8004296:	2680      	movs	r6, #128	; 0x80
 8004298:	6861      	ldr	r1, [r4, #4]
 800429a:	05f6      	lsls	r6, r6, #23
 800429c:	004d      	lsls	r5, r1, #1
 800429e:	086d      	lsrs	r5, r5, #1
 80042a0:	42b5      	cmp	r5, r6
 80042a2:	d003      	beq.n	80042ac <HAL_ADC_Init+0x74>
 80042a4:	2580      	movs	r5, #128	; 0x80
 80042a6:	062d      	lsls	r5, r5, #24
 80042a8:	42a9      	cmp	r1, r5
 80042aa:	d176      	bne.n	800439a <HAL_ADC_Init+0x162>
 80042ac:	691d      	ldr	r5, [r3, #16]
 80042ae:	00ad      	lsls	r5, r5, #2
 80042b0:	08ad      	lsrs	r5, r5, #2
 80042b2:	611d      	str	r5, [r3, #16]
 80042b4:	691d      	ldr	r5, [r3, #16]
 80042b6:	4329      	orrs	r1, r5
 80042b8:	6119      	str	r1, [r3, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 80042ba:	2518      	movs	r5, #24
 80042bc:	68d9      	ldr	r1, [r3, #12]
 80042be:	43a9      	bics	r1, r5
 80042c0:	60d9      	str	r1, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 80042c2:	68d9      	ldr	r1, [r3, #12]
 80042c4:	68a5      	ldr	r5, [r4, #8]
 80042c6:	4329      	orrs	r1, r5
 80042c8:	60d9      	str	r1, [r3, #12]
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 80042ca:	6811      	ldr	r1, [r2, #0]
 80042cc:	4d42      	ldr	r5, [pc, #264]	; (80043d8 <HAL_ADC_Init+0x1a0>)
 80042ce:	4029      	ands	r1, r5
 80042d0:	6011      	str	r1, [r2, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 80042d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80042d4:	6815      	ldr	r5, [r2, #0]
 80042d6:	0649      	lsls	r1, r1, #25
 80042d8:	4329      	orrs	r1, r5
 80042da:	6011      	str	r1, [r2, #0]
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 80042dc:	2280      	movs	r2, #128	; 0x80
 80042de:	6899      	ldr	r1, [r3, #8]
 80042e0:	0552      	lsls	r2, r2, #21
 80042e2:	4211      	tst	r1, r2
 80042e4:	d102      	bne.n	80042ec <HAL_ADC_Init+0xb4>
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 80042e6:	6899      	ldr	r1, [r3, #8]
 80042e8:	430a      	orrs	r2, r1
 80042ea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 80042ec:	68da      	ldr	r2, [r3, #12]
 80042ee:	493b      	ldr	r1, [pc, #236]	; (80043dc <HAL_ADC_Init+0x1a4>)
 80042f0:	400a      	ands	r2, r1
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80042f2:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 80042f4:	60da      	str	r2, [r3, #12]
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80042f6:	68dd      	ldr	r5, [r3, #12]
 80042f8:	68e2      	ldr	r2, [r4, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80042fa:	2902      	cmp	r1, #2
 80042fc:	d100      	bne.n	8004300 <HAL_ADC_Init+0xc8>
 80042fe:	2004      	movs	r0, #4
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004300:	6b26      	ldr	r6, [r4, #48]	; 0x30
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8004302:	1c61      	adds	r1, r4, #1
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004304:	4332      	orrs	r2, r6
 8004306:	432a      	orrs	r2, r5
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8004308:	69a5      	ldr	r5, [r4, #24]
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800430a:	7fc9      	ldrb	r1, [r1, #31]
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800430c:	03ad      	lsls	r5, r5, #14
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800430e:	432a      	orrs	r2, r5
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8004310:	69e5      	ldr	r5, [r4, #28]
 8004312:	03ed      	lsls	r5, r5, #15
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004314:	432a      	orrs	r2, r5
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8004316:	034d      	lsls	r5, r1, #13
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004318:	432a      	orrs	r2, r5
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800431a:	0025      	movs	r5, r4
 800431c:	352c      	adds	r5, #44	; 0x2c
 800431e:	782d      	ldrb	r5, [r5, #0]
 8004320:	006d      	lsls	r5, r5, #1
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004322:	432a      	orrs	r2, r5
 8004324:	4302      	orrs	r2, r0
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004326:	20c2      	movs	r0, #194	; 0xc2
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004328:	60da      	str	r2, [r3, #12]
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800432a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800432c:	30ff      	adds	r0, #255	; 0xff
 800432e:	4282      	cmp	r2, r0
 8004330:	d004      	beq.n	800433c <HAL_ADC_Init+0x104>
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8004332:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8004334:	68d8      	ldr	r0, [r3, #12]
 8004336:	432a      	orrs	r2, r5
 8004338:	4302      	orrs	r2, r0
 800433a:	60da      	str	r2, [r3, #12]
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800433c:	1ca2      	adds	r2, r4, #2
 800433e:	7fd2      	ldrb	r2, [r2, #31]
 8004340:	2a01      	cmp	r2, #1
 8004342:	d106      	bne.n	8004352 <HAL_ADC_Init+0x11a>
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8004344:	2900      	cmp	r1, #0
 8004346:	d134      	bne.n	80043b2 <HAL_ADC_Init+0x17a>
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8004348:	2280      	movs	r2, #128	; 0x80
 800434a:	68d9      	ldr	r1, [r3, #12]
 800434c:	0252      	lsls	r2, r2, #9
 800434e:	430a      	orrs	r2, r1
 8004350:	60da      	str	r2, [r3, #12]
  if (hadc->Init.OversamplingMode == ENABLE)
 8004352:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8004354:	691a      	ldr	r2, [r3, #16]
  if (hadc->Init.OversamplingMode == ENABLE)
 8004356:	2901      	cmp	r1, #1
 8004358:	d133      	bne.n	80043c2 <HAL_ADC_Init+0x18a>
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 800435a:	4821      	ldr	r0, [pc, #132]	; (80043e0 <HAL_ADC_Init+0x1a8>)
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 800435c:	6c65      	ldr	r5, [r4, #68]	; 0x44
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 800435e:	4002      	ands	r2, r0
 8004360:	611a      	str	r2, [r3, #16]
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8004362:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004364:	6918      	ldr	r0, [r3, #16]
 8004366:	432a      	orrs	r2, r5
                               hadc->Init.Oversample.RightBitShift             |
 8004368:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 800436a:	432a      	orrs	r2, r5
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 800436c:	4302      	orrs	r2, r0
 800436e:	611a      	str	r2, [r3, #16]
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8004370:	691a      	ldr	r2, [r3, #16]
 8004372:	4311      	orrs	r1, r2
 8004374:	6119      	str	r1, [r3, #16]
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8004376:	2107      	movs	r1, #7
 8004378:	695a      	ldr	r2, [r3, #20]
  ADC_CLEAR_ERRORCODE(hadc);
 800437a:	2000      	movs	r0, #0
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 800437c:	438a      	bics	r2, r1
 800437e:	615a      	str	r2, [r3, #20]
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8004380:	695a      	ldr	r2, [r3, #20]
 8004382:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004384:	430a      	orrs	r2, r1
 8004386:	615a      	str	r2, [r3, #20]
  ADC_STATE_CLR_SET(hadc->State,
 8004388:	2203      	movs	r2, #3
  ADC_CLEAR_ERRORCODE(hadc);
 800438a:	65a0      	str	r0, [r4, #88]	; 0x58
  ADC_STATE_CLR_SET(hadc->State,
 800438c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800438e:	4393      	bics	r3, r2
 8004390:	001a      	movs	r2, r3
 8004392:	2301      	movs	r3, #1
 8004394:	4313      	orrs	r3, r2
 8004396:	6563      	str	r3, [r4, #84]	; 0x54
  return HAL_OK;
 8004398:	e76d      	b.n	8004276 <HAL_ADC_Init+0x3e>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 800439a:	691d      	ldr	r5, [r3, #16]
 800439c:	4e11      	ldr	r6, [pc, #68]	; (80043e4 <HAL_ADC_Init+0x1ac>)
 800439e:	00ad      	lsls	r5, r5, #2
 80043a0:	08ad      	lsrs	r5, r5, #2
 80043a2:	611d      	str	r5, [r3, #16]
 80043a4:	6815      	ldr	r5, [r2, #0]
 80043a6:	4035      	ands	r5, r6
 80043a8:	6015      	str	r5, [r2, #0]
 80043aa:	6815      	ldr	r5, [r2, #0]
 80043ac:	4329      	orrs	r1, r5
 80043ae:	6011      	str	r1, [r2, #0]
 80043b0:	e783      	b.n	80042ba <HAL_ADC_Init+0x82>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80043b2:	2120      	movs	r1, #32
 80043b4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80043b6:	4301      	orrs	r1, r0
 80043b8:	6561      	str	r1, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80043ba:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80043bc:	430a      	orrs	r2, r1
 80043be:	65a2      	str	r2, [r4, #88]	; 0x58
 80043c0:	e7c7      	b.n	8004352 <HAL_ADC_Init+0x11a>
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 80043c2:	2101      	movs	r1, #1
 80043c4:	420a      	tst	r2, r1
 80043c6:	d0d6      	beq.n	8004376 <HAL_ADC_Init+0x13e>
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 80043c8:	691a      	ldr	r2, [r3, #16]
 80043ca:	438a      	bics	r2, r1
 80043cc:	611a      	str	r2, [r3, #16]
 80043ce:	e7d2      	b.n	8004376 <HAL_ADC_Init+0x13e>
 80043d0:	fffffefd 	.word	0xfffffefd
 80043d4:	40012708 	.word	0x40012708
 80043d8:	fdffffff 	.word	0xfdffffff
 80043dc:	fffe0219 	.word	0xfffe0219
 80043e0:	fffffc03 	.word	0xfffffc03
 80043e4:	ffc3ffff 	.word	0xffc3ffff

080043e8 <HAL_ADC_Start>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80043e8:	6803      	ldr	r3, [r0, #0]
{
 80043ea:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80043ec:	689b      	ldr	r3, [r3, #8]
{
 80043ee:	0004      	movs	r4, r0
    tmp_hal_status = HAL_BUSY;
 80043f0:	2002      	movs	r0, #2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80043f2:	075b      	lsls	r3, r3, #29
 80043f4:	d41a      	bmi.n	800442c <HAL_ADC_Start+0x44>
    __HAL_LOCK(hadc);
 80043f6:	0025      	movs	r5, r4
 80043f8:	3550      	adds	r5, #80	; 0x50
 80043fa:	782b      	ldrb	r3, [r5, #0]
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d015      	beq.n	800442c <HAL_ADC_Start+0x44>
 8004400:	2301      	movs	r3, #1
 8004402:	702b      	strb	r3, [r5, #0]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8004404:	69e3      	ldr	r3, [r4, #28]
 8004406:	2b01      	cmp	r3, #1
 8004408:	d111      	bne.n	800442e <HAL_ADC_Start+0x46>
      ADC_STATE_CLR_SET(hadc->State,
 800440a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800440c:	4a0b      	ldr	r2, [pc, #44]	; (800443c <HAL_ADC_Start+0x54>)
      ADC_CLEAR_ERRORCODE(hadc);
 800440e:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 8004410:	401a      	ands	r2, r3
 8004412:	2380      	movs	r3, #128	; 0x80
 8004414:	005b      	lsls	r3, r3, #1
 8004416:	4313      	orrs	r3, r2
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004418:	221c      	movs	r2, #28
      ADC_STATE_CLR_SET(hadc->State,
 800441a:	6563      	str	r3, [r4, #84]	; 0x54
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800441c:	6823      	ldr	r3, [r4, #0]
      ADC_CLEAR_ERRORCODE(hadc);
 800441e:	65a0      	str	r0, [r4, #88]	; 0x58
      __HAL_UNLOCK(hadc);
 8004420:	7028      	strb	r0, [r5, #0]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004422:	601a      	str	r2, [r3, #0]
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8004424:	6899      	ldr	r1, [r3, #8]
 8004426:	3a18      	subs	r2, #24
 8004428:	430a      	orrs	r2, r1
 800442a:	609a      	str	r2, [r3, #8]
}
 800442c:	bd70      	pop	{r4, r5, r6, pc}
      tmp_hal_status = ADC_Enable(hadc);
 800442e:	0020      	movs	r0, r4
 8004430:	f7ff fec8 	bl	80041c4 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8004434:	2800      	cmp	r0, #0
 8004436:	d0e8      	beq.n	800440a <HAL_ADC_Start+0x22>
 8004438:	e7f8      	b.n	800442c <HAL_ADC_Start+0x44>
 800443a:	46c0      	nop			; (mov r8, r8)
 800443c:	fffff0fe 	.word	0xfffff0fe

08004440 <HAL_ADC_PollForConversion>:
{
 8004440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8004442:	6945      	ldr	r5, [r0, #20]
{
 8004444:	0004      	movs	r4, r0
 8004446:	000e      	movs	r6, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8004448:	2d08      	cmp	r5, #8
 800444a:	d00d      	beq.n	8004468 <HAL_ADC_PollForConversion+0x28>
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800444c:	6803      	ldr	r3, [r0, #0]
 800444e:	2001      	movs	r0, #1
 8004450:	68db      	ldr	r3, [r3, #12]
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8004452:	250c      	movs	r5, #12
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8004454:	4203      	tst	r3, r0
 8004456:	d007      	beq.n	8004468 <HAL_ADC_PollForConversion+0x28>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004458:	2320      	movs	r3, #32
 800445a:	6d62      	ldr	r2, [r4, #84]	; 0x54
      __HAL_UNLOCK(hadc);
 800445c:	3450      	adds	r4, #80	; 0x50
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800445e:	4313      	orrs	r3, r2
 8004460:	6063      	str	r3, [r4, #4]
      __HAL_UNLOCK(hadc);
 8004462:	2300      	movs	r3, #0
 8004464:	7023      	strb	r3, [r4, #0]
}
 8004466:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  tickstart = HAL_GetTick();
 8004468:	f7ff fe78 	bl	800415c <HAL_GetTick>
 800446c:	0007      	movs	r7, r0
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800446e:	6823      	ldr	r3, [r4, #0]
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	4215      	tst	r5, r2
 8004474:	d024      	beq.n	80044c0 <HAL_ADC_PollForConversion+0x80>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004476:	2280      	movs	r2, #128	; 0x80
 8004478:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800447a:	0092      	lsls	r2, r2, #2
 800447c:	430a      	orrs	r2, r1
 800447e:	6562      	str	r2, [r4, #84]	; 0x54
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004480:	22c0      	movs	r2, #192	; 0xc0
 8004482:	68d9      	ldr	r1, [r3, #12]
 8004484:	0112      	lsls	r2, r2, #4
 8004486:	4211      	tst	r1, r2
 8004488:	d113      	bne.n	80044b2 <HAL_ADC_PollForConversion+0x72>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800448a:	1c62      	adds	r2, r4, #1
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800448c:	7fd2      	ldrb	r2, [r2, #31]
 800448e:	2a00      	cmp	r2, #0
 8004490:	d10f      	bne.n	80044b2 <HAL_ADC_PollForConversion+0x72>
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	0712      	lsls	r2, r2, #28
 8004496:	d50c      	bpl.n	80044b2 <HAL_ADC_PollForConversion+0x72>
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004498:	689a      	ldr	r2, [r3, #8]
 800449a:	0752      	lsls	r2, r2, #29
 800449c:	d423      	bmi.n	80044e6 <HAL_ADC_PollForConversion+0xa6>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800449e:	210c      	movs	r1, #12
 80044a0:	685a      	ldr	r2, [r3, #4]
 80044a2:	438a      	bics	r2, r1
 80044a4:	605a      	str	r2, [r3, #4]
        ADC_STATE_CLR_SET(hadc->State,
 80044a6:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80044a8:	4913      	ldr	r1, [pc, #76]	; (80044f8 <HAL_ADC_PollForConversion+0xb8>)
 80044aa:	4011      	ands	r1, r2
 80044ac:	2201      	movs	r2, #1
 80044ae:	430a      	orrs	r2, r1
 80044b0:	6562      	str	r2, [r4, #84]	; 0x54
  return HAL_OK;
 80044b2:	2000      	movs	r0, #0
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80044b4:	69a2      	ldr	r2, [r4, #24]
 80044b6:	4282      	cmp	r2, r0
 80044b8:	d1d5      	bne.n	8004466 <HAL_ADC_PollForConversion+0x26>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80044ba:	220c      	movs	r2, #12
 80044bc:	601a      	str	r2, [r3, #0]
 80044be:	e7d2      	b.n	8004466 <HAL_ADC_PollForConversion+0x26>
    if(Timeout != HAL_MAX_DELAY)
 80044c0:	1c72      	adds	r2, r6, #1
 80044c2:	d0d5      	beq.n	8004470 <HAL_ADC_PollForConversion+0x30>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80044c4:	2e00      	cmp	r6, #0
 80044c6:	d108      	bne.n	80044da <HAL_ADC_PollForConversion+0x9a>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80044c8:	2304      	movs	r3, #4
 80044ca:	6d62      	ldr	r2, [r4, #84]	; 0x54
        __HAL_UNLOCK(hadc);
 80044cc:	3450      	adds	r4, #80	; 0x50
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80044ce:	4313      	orrs	r3, r2
 80044d0:	6063      	str	r3, [r4, #4]
        __HAL_UNLOCK(hadc);
 80044d2:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 80044d4:	2003      	movs	r0, #3
        __HAL_UNLOCK(hadc);
 80044d6:	7023      	strb	r3, [r4, #0]
        return HAL_TIMEOUT;
 80044d8:	e7c5      	b.n	8004466 <HAL_ADC_PollForConversion+0x26>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80044da:	f7ff fe3f 	bl	800415c <HAL_GetTick>
 80044de:	1bc0      	subs	r0, r0, r7
 80044e0:	42b0      	cmp	r0, r6
 80044e2:	d9c4      	bls.n	800446e <HAL_ADC_PollForConversion+0x2e>
 80044e4:	e7f0      	b.n	80044c8 <HAL_ADC_PollForConversion+0x88>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80044e6:	2220      	movs	r2, #32
 80044e8:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80044ea:	430a      	orrs	r2, r1
 80044ec:	6562      	str	r2, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044ee:	2201      	movs	r2, #1
 80044f0:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80044f2:	430a      	orrs	r2, r1
 80044f4:	65a2      	str	r2, [r4, #88]	; 0x58
 80044f6:	e7dc      	b.n	80044b2 <HAL_ADC_PollForConversion+0x72>
 80044f8:	fffffefe 	.word	0xfffffefe

080044fc <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 80044fc:	6803      	ldr	r3, [r0, #0]
 80044fe:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 8004500:	4770      	bx	lr
	...

08004504 <HAL_ADC_ConfigChannel>:
{
 8004504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 8004506:	0004      	movs	r4, r0
 8004508:	3450      	adds	r4, #80	; 0x50
 800450a:	7823      	ldrb	r3, [r4, #0]
{
 800450c:	0006      	movs	r6, r0
 800450e:	000d      	movs	r5, r1
  __HAL_LOCK(hadc);
 8004510:	2002      	movs	r0, #2
 8004512:	2b01      	cmp	r3, #1
 8004514:	d00b      	beq.n	800452e <HAL_ADC_ConfigChannel+0x2a>
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8004516:	6832      	ldr	r2, [r6, #0]
  __HAL_LOCK(hadc);
 8004518:	3801      	subs	r0, #1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 800451a:	6891      	ldr	r1, [r2, #8]
  __HAL_LOCK(hadc);
 800451c:	7020      	strb	r0, [r4, #0]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 800451e:	074b      	lsls	r3, r1, #29
 8004520:	d506      	bpl.n	8004530 <HAL_ADC_ConfigChannel+0x2c>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004522:	2220      	movs	r2, #32
 8004524:	6d71      	ldr	r1, [r6, #84]	; 0x54
 8004526:	430a      	orrs	r2, r1
 8004528:	6572      	str	r2, [r6, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 800452a:	2200      	movs	r2, #0
 800452c:	7022      	strb	r2, [r4, #0]
}
 800452e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004530:	2380      	movs	r3, #128	; 0x80
 8004532:	6828      	ldr	r0, [r5, #0]
  if (sConfig->Rank != ADC_RANK_NONE)
 8004534:	4e19      	ldr	r6, [pc, #100]	; (800459c <HAL_ADC_ConfigChannel+0x98>)
 8004536:	686f      	ldr	r7, [r5, #4]
 8004538:	0341      	lsls	r1, r0, #13
 800453a:	02db      	lsls	r3, r3, #11
 800453c:	0b49      	lsrs	r1, r1, #13
 800453e:	4003      	ands	r3, r0
 8004540:	42b7      	cmp	r7, r6
 8004542:	d019      	beq.n	8004578 <HAL_ADC_ConfigChannel+0x74>
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8004544:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8004546:	4301      	orrs	r1, r0
 8004548:	6291      	str	r1, [r2, #40]	; 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800454a:	2b00      	cmp	r3, #0
 800454c:	d008      	beq.n	8004560 <HAL_ADC_ConfigChannel+0x5c>
      ADC->CCR |= ADC_CCR_TSEN;   
 800454e:	2380      	movs	r3, #128	; 0x80
 8004550:	4a13      	ldr	r2, [pc, #76]	; (80045a0 <HAL_ADC_ConfigChannel+0x9c>)
 8004552:	041b      	lsls	r3, r3, #16
 8004554:	6811      	ldr	r1, [r2, #0]
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8004556:	200a      	movs	r0, #10
      ADC->CCR |= ADC_CCR_TSEN;   
 8004558:	430b      	orrs	r3, r1
 800455a:	6013      	str	r3, [r2, #0]
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800455c:	f7ff fe1c 	bl	8004198 <ADC_DelayMicroSecond>
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8004560:	682b      	ldr	r3, [r5, #0]
 8004562:	039b      	lsls	r3, r3, #14
 8004564:	d505      	bpl.n	8004572 <HAL_ADC_ConfigChannel+0x6e>
      ADC->CCR |= ADC_CCR_VREFEN;   
 8004566:	2380      	movs	r3, #128	; 0x80
 8004568:	4a0d      	ldr	r2, [pc, #52]	; (80045a0 <HAL_ADC_ConfigChannel+0x9c>)
 800456a:	03db      	lsls	r3, r3, #15
 800456c:	6811      	ldr	r1, [r2, #0]
 800456e:	430b      	orrs	r3, r1
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8004570:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hadc);
 8004572:	2000      	movs	r0, #0
 8004574:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 8004576:	e7da      	b.n	800452e <HAL_ADC_ConfigChannel+0x2a>
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8004578:	6a95      	ldr	r5, [r2, #40]	; 0x28
 800457a:	438d      	bics	r5, r1
 800457c:	6295      	str	r5, [r2, #40]	; 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800457e:	2b00      	cmp	r3, #0
 8004580:	d004      	beq.n	800458c <HAL_ADC_ConfigChannel+0x88>
      ADC->CCR &= ~ADC_CCR_TSEN;   
 8004582:	4a07      	ldr	r2, [pc, #28]	; (80045a0 <HAL_ADC_ConfigChannel+0x9c>)
 8004584:	4907      	ldr	r1, [pc, #28]	; (80045a4 <HAL_ADC_ConfigChannel+0xa0>)
 8004586:	6813      	ldr	r3, [r2, #0]
 8004588:	400b      	ands	r3, r1
 800458a:	6013      	str	r3, [r2, #0]
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800458c:	0383      	lsls	r3, r0, #14
 800458e:	d5f0      	bpl.n	8004572 <HAL_ADC_ConfigChannel+0x6e>
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8004590:	4a03      	ldr	r2, [pc, #12]	; (80045a0 <HAL_ADC_ConfigChannel+0x9c>)
 8004592:	4905      	ldr	r1, [pc, #20]	; (80045a8 <HAL_ADC_ConfigChannel+0xa4>)
 8004594:	6813      	ldr	r3, [r2, #0]
 8004596:	400b      	ands	r3, r1
 8004598:	e7ea      	b.n	8004570 <HAL_ADC_ConfigChannel+0x6c>
 800459a:	46c0      	nop			; (mov r8, r8)
 800459c:	00001001 	.word	0x00001001
 80045a0:	40012708 	.word	0x40012708
 80045a4:	ff7fffff 	.word	0xff7fffff
 80045a8:	ffbfffff 	.word	0xffbfffff

080045ac <HAL_ADCEx_Calibration_Start>:
  *          This parameter can be only of the following values:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 80045ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80045ae:	0005      	movs	r5, r0
 80045b0:	3550      	adds	r5, #80	; 0x50
 80045b2:	782b      	ldrb	r3, [r5, #0]
{
 80045b4:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 80045b6:	2002      	movs	r0, #2
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d044      	beq.n	8004646 <HAL_ADCEx_Calibration_Start+0x9a>
 80045bc:	2301      	movs	r3, #1
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80045be:	2203      	movs	r2, #3
  __HAL_LOCK(hadc);
 80045c0:	702b      	strb	r3, [r5, #0]
  if (ADC_IS_ENABLE(hadc) == RESET)
 80045c2:	6823      	ldr	r3, [r4, #0]
 80045c4:	6898      	ldr	r0, [r3, #8]
 80045c6:	4010      	ands	r0, r2
 80045c8:	2801      	cmp	r0, #1
 80045ca:	d109      	bne.n	80045e0 <HAL_ADCEx_Calibration_Start+0x34>
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	4202      	tst	r2, r0
 80045d0:	d006      	beq.n	80045e0 <HAL_ADCEx_Calibration_Start+0x34>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80045d2:	2320      	movs	r3, #32
 80045d4:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80045d6:	4313      	orrs	r3, r2
 80045d8:	6563      	str	r3, [r4, #84]	; 0x54
    
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80045da:	2300      	movs	r3, #0
 80045dc:	702b      	strb	r3, [r5, #0]
  
  /* Return function status */
  return tmp_hal_status;
 80045de:	e032      	b.n	8004646 <HAL_ADCEx_Calibration_Start+0x9a>
    ADC_STATE_CLR_SET(hadc->State, 
 80045e0:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80045e2:	4919      	ldr	r1, [pc, #100]	; (8004648 <HAL_ADCEx_Calibration_Start+0x9c>)
 80045e4:	4011      	ands	r1, r2
 80045e6:	2202      	movs	r2, #2
 80045e8:	430a      	orrs	r2, r1
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80045ea:	2103      	movs	r1, #3
    ADC_STATE_CLR_SET(hadc->State, 
 80045ec:	6562      	str	r2, [r4, #84]	; 0x54
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80045ee:	68de      	ldr	r6, [r3, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80045f0:	68da      	ldr	r2, [r3, #12]
 80045f2:	438a      	bics	r2, r1
 80045f4:	60da      	str	r2, [r3, #12]
    hadc->Instance->CR |= ADC_CR_ADCAL;
 80045f6:	2280      	movs	r2, #128	; 0x80
 80045f8:	6899      	ldr	r1, [r3, #8]
 80045fa:	0612      	lsls	r2, r2, #24
 80045fc:	430a      	orrs	r2, r1
 80045fe:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();  
 8004600:	f7ff fdac 	bl	800415c <HAL_GetTick>
 8004604:	0007      	movs	r7, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8004606:	6823      	ldr	r3, [r4, #0]
 8004608:	689a      	ldr	r2, [r3, #8]
 800460a:	2a00      	cmp	r2, #0
 800460c:	db0c      	blt.n	8004628 <HAL_ADCEx_Calibration_Start+0x7c>
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800460e:	2203      	movs	r2, #3
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8004610:	68d9      	ldr	r1, [r3, #12]
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8004612:	4016      	ands	r6, r2
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8004614:	430e      	orrs	r6, r1
 8004616:	60de      	str	r6, [r3, #12]
    ADC_STATE_CLR_SET(hadc->State,
 8004618:	6d63      	ldr	r3, [r4, #84]	; 0x54
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800461a:	2000      	movs	r0, #0
    ADC_STATE_CLR_SET(hadc->State,
 800461c:	4393      	bics	r3, r2
 800461e:	001a      	movs	r2, r3
 8004620:	2301      	movs	r3, #1
 8004622:	4313      	orrs	r3, r2
 8004624:	6563      	str	r3, [r4, #84]	; 0x54
 8004626:	e7d8      	b.n	80045da <HAL_ADCEx_Calibration_Start+0x2e>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8004628:	f7ff fd98 	bl	800415c <HAL_GetTick>
 800462c:	1bc0      	subs	r0, r0, r7
 800462e:	280a      	cmp	r0, #10
 8004630:	d9e9      	bls.n	8004606 <HAL_ADCEx_Calibration_Start+0x5a>
        ADC_STATE_CLR_SET(hadc->State,
 8004632:	2212      	movs	r2, #18
 8004634:	6d63      	ldr	r3, [r4, #84]	; 0x54
        return HAL_ERROR;
 8004636:	2001      	movs	r0, #1
        ADC_STATE_CLR_SET(hadc->State,
 8004638:	4393      	bics	r3, r2
 800463a:	001a      	movs	r2, r3
 800463c:	2310      	movs	r3, #16
 800463e:	4313      	orrs	r3, r2
 8004640:	6563      	str	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hadc);
 8004642:	2300      	movs	r3, #0
 8004644:	702b      	strb	r3, [r5, #0]
}
 8004646:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004648:	fffffefd 	.word	0xfffffefd

0800464c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800464c:	b530      	push	{r4, r5, lr}
 800464e:	25ff      	movs	r5, #255	; 0xff
 8004650:	2403      	movs	r4, #3
 8004652:	002a      	movs	r2, r5
 8004654:	b2c3      	uxtb	r3, r0
 8004656:	401c      	ands	r4, r3
 8004658:	00e4      	lsls	r4, r4, #3
 800465a:	40a2      	lsls	r2, r4
 800465c:	0189      	lsls	r1, r1, #6
 800465e:	4029      	ands	r1, r5
 8004660:	43d2      	mvns	r2, r2
 8004662:	40a1      	lsls	r1, r4
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8004664:	2800      	cmp	r0, #0
 8004666:	db0a      	blt.n	800467e <HAL_NVIC_SetPriority+0x32>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004668:	24c0      	movs	r4, #192	; 0xc0
 800466a:	4b0b      	ldr	r3, [pc, #44]	; (8004698 <HAL_NVIC_SetPriority+0x4c>)
 800466c:	0880      	lsrs	r0, r0, #2
 800466e:	0080      	lsls	r0, r0, #2
 8004670:	18c0      	adds	r0, r0, r3
 8004672:	00a4      	lsls	r4, r4, #2
 8004674:	5903      	ldr	r3, [r0, r4]
 8004676:	401a      	ands	r2, r3
 8004678:	4311      	orrs	r1, r2
 800467a:	5101      	str	r1, [r0, r4]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 800467c:	bd30      	pop	{r4, r5, pc}
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800467e:	200f      	movs	r0, #15
 8004680:	4003      	ands	r3, r0
 8004682:	3b08      	subs	r3, #8
 8004684:	4805      	ldr	r0, [pc, #20]	; (800469c <HAL_NVIC_SetPriority+0x50>)
 8004686:	089b      	lsrs	r3, r3, #2
 8004688:	009b      	lsls	r3, r3, #2
 800468a:	181b      	adds	r3, r3, r0
 800468c:	69d8      	ldr	r0, [r3, #28]
 800468e:	4002      	ands	r2, r0
 8004690:	4311      	orrs	r1, r2
 8004692:	61d9      	str	r1, [r3, #28]
 8004694:	e7f2      	b.n	800467c <HAL_NVIC_SetPriority+0x30>
 8004696:	46c0      	nop			; (mov r8, r8)
 8004698:	e000e100 	.word	0xe000e100
 800469c:	e000ed00 	.word	0xe000ed00

080046a0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80046a0:	2800      	cmp	r0, #0
 80046a2:	db05      	blt.n	80046b0 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80046a4:	231f      	movs	r3, #31
 80046a6:	4018      	ands	r0, r3
 80046a8:	3b1e      	subs	r3, #30
 80046aa:	4083      	lsls	r3, r0
 80046ac:	4a01      	ldr	r2, [pc, #4]	; (80046b4 <HAL_NVIC_EnableIRQ+0x14>)
 80046ae:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80046b0:	4770      	bx	lr
 80046b2:	46c0      	nop			; (mov r8, r8)
 80046b4:	e000e100 	.word	0xe000e100

080046b8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80046b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046ba:	0004      	movs	r4, r0
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
  {
    return HAL_ERROR;
 80046bc:	2001      	movs	r0, #1
  if(hdma == NULL)
 80046be:	2c00      	cmp	r4, #0
 80046c0:	d035      	beq.n	800472e <HAL_DMA_Init+0x76>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80046c2:	6825      	ldr	r5, [r4, #0]
 80046c4:	4b1a      	ldr	r3, [pc, #104]	; (8004730 <HAL_DMA_Init+0x78>)
 80046c6:	2114      	movs	r1, #20
 80046c8:	18e8      	adds	r0, r5, r3
 80046ca:	f7fb fd3b 	bl	8000144 <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 80046ce:	4b19      	ldr	r3, [pc, #100]	; (8004734 <HAL_DMA_Init+0x7c>)
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80046d0:	0080      	lsls	r0, r0, #2
  hdma->DmaBaseAddress = DMA1;
 80046d2:	6423      	str	r3, [r4, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80046d4:	2302      	movs	r3, #2
 80046d6:	1da2      	adds	r2, r4, #6
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80046d8:	6460      	str	r0, [r4, #68]	; 0x44
  hdma->State = HAL_DMA_STATE_BUSY;
 80046da:	77d3      	strb	r3, [r2, #31]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80046dc:	682e      	ldr	r6, [r5, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80046de:	4b16      	ldr	r3, [pc, #88]	; (8004738 <HAL_DMA_Init+0x80>)
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80046e0:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80046e2:	401e      	ands	r6, r3
  tmp |=  hdma->Init.Direction        |
 80046e4:	68e3      	ldr	r3, [r4, #12]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046e6:	6927      	ldr	r7, [r4, #16]
  tmp |=  hdma->Init.Direction        |
 80046e8:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046ea:	433b      	orrs	r3, r7
 80046ec:	6967      	ldr	r7, [r4, #20]
 80046ee:	433b      	orrs	r3, r7
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046f0:	69a7      	ldr	r7, [r4, #24]
 80046f2:	433b      	orrs	r3, r7
 80046f4:	69e7      	ldr	r7, [r4, #28]
 80046f6:	433b      	orrs	r3, r7
          hdma->Init.Mode                | hdma->Init.Priority;
 80046f8:	6a27      	ldr	r7, [r4, #32]
 80046fa:	433b      	orrs	r3, r7
  tmp |=  hdma->Init.Direction        |
 80046fc:	4333      	orrs	r3, r6

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80046fe:	602b      	str	r3, [r5, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8004700:	2380      	movs	r3, #128	; 0x80
 8004702:	01db      	lsls	r3, r3, #7
 8004704:	4299      	cmp	r1, r3
 8004706:	d00c      	beq.n	8004722 <HAL_DMA_Init+0x6a>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004708:	251c      	movs	r5, #28
 800470a:	4028      	ands	r0, r5
 800470c:	3d0d      	subs	r5, #13
 800470e:	4085      	lsls	r5, r0
 8004710:	490a      	ldr	r1, [pc, #40]	; (800473c <HAL_DMA_Init+0x84>)
 8004712:	680b      	ldr	r3, [r1, #0]
 8004714:	43ab      	bics	r3, r5
 8004716:	600b      	str	r3, [r1, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004718:	6863      	ldr	r3, [r4, #4]
 800471a:	680d      	ldr	r5, [r1, #0]
 800471c:	4083      	lsls	r3, r0
 800471e:	432b      	orrs	r3, r5
 8004720:	600b      	str	r3, [r1, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004722:	2000      	movs	r0, #0

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004724:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004726:	63e0      	str	r0, [r4, #60]	; 0x3c

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004728:	3405      	adds	r4, #5
  hdma->State  = HAL_DMA_STATE_READY;
 800472a:	77d3      	strb	r3, [r2, #31]
  hdma->Lock = HAL_UNLOCKED;
 800472c:	77e0      	strb	r0, [r4, #31]

  return HAL_OK;
}
 800472e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004730:	bffdfff8 	.word	0xbffdfff8
 8004734:	40020000 	.word	0x40020000
 8004738:	ffff800f 	.word	0xffff800f
 800473c:	400200a8 	.word	0x400200a8

08004740 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004740:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004742:	1d44      	adds	r4, r0, #5
 8004744:	7fe6      	ldrb	r6, [r4, #31]
{
 8004746:	0005      	movs	r5, r0
  __HAL_LOCK(hdma);
 8004748:	2002      	movs	r0, #2
 800474a:	2e01      	cmp	r6, #1
 800474c:	d02b      	beq.n	80047a6 <HAL_DMA_Start_IT+0x66>
 800474e:	3801      	subs	r0, #1
 8004750:	77e0      	strb	r0, [r4, #31]

  if(HAL_DMA_STATE_READY == hdma->State)
 8004752:	1da8      	adds	r0, r5, #6
 8004754:	7fc6      	ldrb	r6, [r0, #31]
 8004756:	4684      	mov	ip, r0
 8004758:	b2f6      	uxtb	r6, r6
 800475a:	2002      	movs	r0, #2
 800475c:	2700      	movs	r7, #0
 800475e:	2e01      	cmp	r6, #1
 8004760:	d12c      	bne.n	80047bc <HAL_DMA_Start_IT+0x7c>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004762:	4664      	mov	r4, ip
 8004764:	77e0      	strb	r0, [r4, #31]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004766:	682c      	ldr	r4, [r5, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004768:	63ef      	str	r7, [r5, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 800476a:	6820      	ldr	r0, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800476c:	371c      	adds	r7, #28
    __HAL_DMA_DISABLE(hdma);
 800476e:	43b0      	bics	r0, r6
 8004770:	6020      	str	r0, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004772:	6c28      	ldr	r0, [r5, #64]	; 0x40
 8004774:	9001      	str	r0, [sp, #4]
 8004776:	6c68      	ldr	r0, [r5, #68]	; 0x44
 8004778:	4007      	ands	r7, r0
 800477a:	40be      	lsls	r6, r7
 800477c:	9801      	ldr	r0, [sp, #4]
 800477e:	6046      	str	r6, [r0, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004780:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004782:	68ab      	ldr	r3, [r5, #8]
 8004784:	6828      	ldr	r0, [r5, #0]
 8004786:	2b10      	cmp	r3, #16
 8004788:	d10e      	bne.n	80047a8 <HAL_DMA_Start_IT+0x68>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800478a:	60a2      	str	r2, [r4, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800478c:	60e1      	str	r1, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 800478e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8004790:	2b00      	cmp	r3, #0
 8004792:	d00c      	beq.n	80047ae <HAL_DMA_Start_IT+0x6e>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004794:	230e      	movs	r3, #14
 8004796:	6822      	ldr	r2, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004798:	4313      	orrs	r3, r2
 800479a:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 800479c:	2301      	movs	r3, #1
 800479e:	6802      	ldr	r2, [r0, #0]
 80047a0:	4313      	orrs	r3, r2
 80047a2:	6003      	str	r3, [r0, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047a4:	2000      	movs	r0, #0
}
 80047a6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80047a8:	60a1      	str	r1, [r4, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80047aa:	60e2      	str	r2, [r4, #12]
 80047ac:	e7ef      	b.n	800478e <HAL_DMA_Start_IT+0x4e>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80047ae:	2204      	movs	r2, #4
 80047b0:	6823      	ldr	r3, [r4, #0]
 80047b2:	4393      	bics	r3, r2
 80047b4:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80047b6:	6822      	ldr	r2, [r4, #0]
 80047b8:	230a      	movs	r3, #10
 80047ba:	e7ed      	b.n	8004798 <HAL_DMA_Start_IT+0x58>
    __HAL_UNLOCK(hdma);
 80047bc:	77e7      	strb	r7, [r4, #31]
 80047be:	e7f2      	b.n	80047a6 <HAL_DMA_Start_IT+0x66>

080047c0 <HAL_DMA_Abort_IT>:
{
 80047c0:	b570      	push	{r4, r5, r6, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80047c2:	1d84      	adds	r4, r0, #6
 80047c4:	7fe3      	ldrb	r3, [r4, #31]
 80047c6:	2b02      	cmp	r3, #2
 80047c8:	d004      	beq.n	80047d4 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80047ca:	2304      	movs	r3, #4
 80047cc:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 80047ce:	3b03      	subs	r3, #3
}
 80047d0:	0018      	movs	r0, r3
 80047d2:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80047d4:	210e      	movs	r1, #14
 80047d6:	6803      	ldr	r3, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80047d8:	6c45      	ldr	r5, [r0, #68]	; 0x44
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	438a      	bics	r2, r1
 80047de:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 80047e0:	2201      	movs	r2, #1
 80047e2:	6819      	ldr	r1, [r3, #0]
 80047e4:	4391      	bics	r1, r2
 80047e6:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80047e8:	231c      	movs	r3, #28
 80047ea:	402b      	ands	r3, r5
 80047ec:	0015      	movs	r5, r2
 80047ee:	409d      	lsls	r5, r3
 80047f0:	6c01      	ldr	r1, [r0, #64]	; 0x40
    __HAL_UNLOCK(hdma);
 80047f2:	1d43      	adds	r3, r0, #5
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80047f4:	604d      	str	r5, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80047f6:	77e2      	strb	r2, [r4, #31]
    __HAL_UNLOCK(hdma);
 80047f8:	2400      	movs	r4, #0
    if(hdma->XferAbortCallback != NULL)
 80047fa:	6b82      	ldr	r2, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 80047fc:	77dc      	strb	r4, [r3, #31]
  HAL_StatusTypeDef status = HAL_OK;
 80047fe:	0013      	movs	r3, r2
    if(hdma->XferAbortCallback != NULL)
 8004800:	42a2      	cmp	r2, r4
 8004802:	d0e5      	beq.n	80047d0 <HAL_DMA_Abort_IT+0x10>
      hdma->XferAbortCallback(hdma);
 8004804:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 8004806:	0023      	movs	r3, r4
 8004808:	e7e2      	b.n	80047d0 <HAL_DMA_Abort_IT+0x10>

0800480a <HAL_DMA_IRQHandler>:
{
 800480a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 800480c:	221c      	movs	r2, #28
 800480e:	2704      	movs	r7, #4
 8004810:	6c46      	ldr	r6, [r0, #68]	; 0x44
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004812:	6c01      	ldr	r1, [r0, #64]	; 0x40
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8004814:	4032      	ands	r2, r6
 8004816:	003e      	movs	r6, r7
 8004818:	4096      	lsls	r6, r2
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800481a:	680d      	ldr	r5, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800481c:	6803      	ldr	r3, [r0, #0]
 800481e:	681c      	ldr	r4, [r3, #0]
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8004820:	4235      	tst	r5, r6
 8004822:	d00d      	beq.n	8004840 <HAL_DMA_IRQHandler+0x36>
 8004824:	423c      	tst	r4, r7
 8004826:	d00b      	beq.n	8004840 <HAL_DMA_IRQHandler+0x36>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	0692      	lsls	r2, r2, #26
 800482c:	d402      	bmi.n	8004834 <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	43ba      	bics	r2, r7
 8004832:	601a      	str	r2, [r3, #0]
     if(hdma->XferHalfCpltCallback != NULL)
 8004834:	6b03      	ldr	r3, [r0, #48]	; 0x30
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8004836:	604e      	str	r6, [r1, #4]
     if(hdma->XferHalfCpltCallback != NULL)
 8004838:	2b00      	cmp	r3, #0
 800483a:	d019      	beq.n	8004870 <HAL_DMA_IRQHandler+0x66>
      hdma->XferErrorCallback(hdma);
 800483c:	4798      	blx	r3
  return;
 800483e:	e017      	b.n	8004870 <HAL_DMA_IRQHandler+0x66>
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8004840:	2702      	movs	r7, #2
 8004842:	003e      	movs	r6, r7
 8004844:	4096      	lsls	r6, r2
 8004846:	4235      	tst	r5, r6
 8004848:	d013      	beq.n	8004872 <HAL_DMA_IRQHandler+0x68>
 800484a:	423c      	tst	r4, r7
 800484c:	d011      	beq.n	8004872 <HAL_DMA_IRQHandler+0x68>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	0692      	lsls	r2, r2, #26
 8004852:	d406      	bmi.n	8004862 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004854:	240a      	movs	r4, #10
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	43a2      	bics	r2, r4
 800485a:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 800485c:	2201      	movs	r2, #1
 800485e:	1d83      	adds	r3, r0, #6
 8004860:	77da      	strb	r2, [r3, #31]
    __HAL_UNLOCK(hdma);
 8004862:	2200      	movs	r2, #0
 8004864:	1d43      	adds	r3, r0, #5
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8004866:	604e      	str	r6, [r1, #4]
    __HAL_UNLOCK(hdma);
 8004868:	77da      	strb	r2, [r3, #31]
    if(hdma->XferCpltCallback != NULL)
 800486a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 800486c:	4293      	cmp	r3, r2
 800486e:	d1e5      	bne.n	800483c <HAL_DMA_IRQHandler+0x32>
}
 8004870:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8004872:	2608      	movs	r6, #8
 8004874:	0037      	movs	r7, r6
 8004876:	4097      	lsls	r7, r2
 8004878:	423d      	tst	r5, r7
 800487a:	d0f9      	beq.n	8004870 <HAL_DMA_IRQHandler+0x66>
 800487c:	4234      	tst	r4, r6
 800487e:	d0f7      	beq.n	8004870 <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004880:	250e      	movs	r5, #14
 8004882:	681c      	ldr	r4, [r3, #0]
 8004884:	43ac      	bics	r4, r5
 8004886:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004888:	2301      	movs	r3, #1
 800488a:	001c      	movs	r4, r3
 800488c:	4094      	lsls	r4, r2
    hdma->State = HAL_DMA_STATE_READY;
 800488e:	1d82      	adds	r2, r0, #6
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004890:	604c      	str	r4, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004892:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8004894:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hdma);
 8004896:	2200      	movs	r2, #0
 8004898:	1d43      	adds	r3, r0, #5
 800489a:	77da      	strb	r2, [r3, #31]
    if (hdma->XferErrorCallback != NULL)
 800489c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800489e:	e7e5      	b.n	800486c <HAL_DMA_IRQHandler+0x62>

080048a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80048a0:	b5f0      	push	{r4, r5, r6, r7, lr}
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
        
        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80048a2:	4a54      	ldr	r2, [pc, #336]	; (80049f4 <HAL_GPIO_Init+0x154>)
  while (((GPIO_Init->Pin) >> position) != 0)
 80048a4:	680b      	ldr	r3, [r1, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80048a6:	1882      	adds	r2, r0, r2
 80048a8:	1e54      	subs	r4, r2, #1
 80048aa:	41a2      	sbcs	r2, r4
{
 80048ac:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != 0)
 80048ae:	9303      	str	r3, [sp, #12]
  uint32_t position = 0x00U;
 80048b0:	2300      	movs	r3, #0
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80048b2:	3205      	adds	r2, #5
 80048b4:	9205      	str	r2, [sp, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80048b6:	9a03      	ldr	r2, [sp, #12]
 80048b8:	40da      	lsrs	r2, r3
 80048ba:	d101      	bne.n	80048c0 <HAL_GPIO_Init+0x20>
        EXTI->FTSR = temp;
      }
    }
    position++;
  }
}
 80048bc:	b007      	add	sp, #28
 80048be:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80048c0:	2501      	movs	r5, #1
 80048c2:	409d      	lsls	r5, r3
 80048c4:	9a03      	ldr	r2, [sp, #12]
 80048c6:	402a      	ands	r2, r5
 80048c8:	9202      	str	r2, [sp, #8]
    if(iocurrent)
 80048ca:	d100      	bne.n	80048ce <HAL_GPIO_Init+0x2e>
 80048cc:	e08f      	b.n	80049ee <HAL_GPIO_Init+0x14e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80048ce:	684a      	ldr	r2, [r1, #4]
 80048d0:	9201      	str	r2, [sp, #4]
 80048d2:	2210      	movs	r2, #16
 80048d4:	9e01      	ldr	r6, [sp, #4]
 80048d6:	4396      	bics	r6, r2
 80048d8:	2e02      	cmp	r6, #2
 80048da:	d10f      	bne.n	80048fc <HAL_GPIO_Init+0x5c>
        temp = GPIOx->AFR[position >> 3U];
 80048dc:	08da      	lsrs	r2, r3, #3
 80048de:	0092      	lsls	r2, r2, #2
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 80048e0:	2407      	movs	r4, #7
 80048e2:	1882      	adds	r2, r0, r2
        temp = GPIOx->AFR[position >> 3U];
 80048e4:	6a17      	ldr	r7, [r2, #32]
 80048e6:	9204      	str	r2, [sp, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 80048e8:	220f      	movs	r2, #15
 80048ea:	401c      	ands	r4, r3
 80048ec:	00a4      	lsls	r4, r4, #2
 80048ee:	40a2      	lsls	r2, r4
 80048f0:	4397      	bics	r7, r2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 80048f2:	690a      	ldr	r2, [r1, #16]
 80048f4:	40a2      	lsls	r2, r4
 80048f6:	4317      	orrs	r7, r2
        GPIOx->AFR[position >> 3U] = temp;
 80048f8:	9a04      	ldr	r2, [sp, #16]
 80048fa:	6217      	str	r7, [r2, #32]
 80048fc:	2203      	movs	r2, #3
 80048fe:	005c      	lsls	r4, r3, #1
 8004900:	40a2      	lsls	r2, r4
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004902:	3e01      	subs	r6, #1
 8004904:	43d2      	mvns	r2, r2
 8004906:	2e01      	cmp	r6, #1
 8004908:	d80d      	bhi.n	8004926 <HAL_GPIO_Init+0x86>
        temp |= (GPIO_Init->Speed << (position * 2U));
 800490a:	68ce      	ldr	r6, [r1, #12]
        temp = GPIOx->OSPEEDR;
 800490c:	6887      	ldr	r7, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800490e:	40a6      	lsls	r6, r4
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8004910:	4017      	ands	r7, r2
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004912:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 8004914:	6086      	str	r6, [r0, #8]
        temp= GPIOx->OTYPER;
 8004916:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004918:	43ae      	bics	r6, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800491a:	9d01      	ldr	r5, [sp, #4]
 800491c:	06ed      	lsls	r5, r5, #27
 800491e:	0fed      	lsrs	r5, r5, #31
 8004920:	409d      	lsls	r5, r3
 8004922:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 8004924:	6045      	str	r5, [r0, #4]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004926:	2603      	movs	r6, #3
 8004928:	9d01      	ldr	r5, [sp, #4]
      temp = GPIOx->MODER;
 800492a:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800492c:	4035      	ands	r5, r6
 800492e:	40a5      	lsls	r5, r4
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004930:	4017      	ands	r7, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004932:	433d      	orrs	r5, r7
      GPIOx->MODER = temp;
 8004934:	6005      	str	r5, [r0, #0]
      temp = GPIOx->PUPDR;
 8004936:	68c5      	ldr	r5, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004938:	402a      	ands	r2, r5
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 800493a:	688d      	ldr	r5, [r1, #8]
 800493c:	40a5      	lsls	r5, r4
 800493e:	432a      	orrs	r2, r5
      GPIOx->PUPDR = temp;
 8004940:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8004942:	9a01      	ldr	r2, [sp, #4]
 8004944:	00d2      	lsls	r2, r2, #3
 8004946:	d552      	bpl.n	80049ee <HAL_GPIO_Init+0x14e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004948:	2501      	movs	r5, #1
 800494a:	4c2b      	ldr	r4, [pc, #172]	; (80049f8 <HAL_GPIO_Init+0x158>)
 800494c:	46ac      	mov	ip, r5
 800494e:	6b62      	ldr	r2, [r4, #52]	; 0x34
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8004950:	270f      	movs	r7, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004952:	432a      	orrs	r2, r5
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8004954:	001d      	movs	r5, r3
 8004956:	4035      	ands	r5, r6
 8004958:	00ad      	lsls	r5, r5, #2
 800495a:	40af      	lsls	r7, r5
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800495c:	6362      	str	r2, [r4, #52]	; 0x34
 800495e:	4a27      	ldr	r2, [pc, #156]	; (80049fc <HAL_GPIO_Init+0x15c>)
        temp = SYSCFG->EXTICR[position >> 2U];
 8004960:	089c      	lsrs	r4, r3, #2
 8004962:	00a4      	lsls	r4, r4, #2
 8004964:	18a4      	adds	r4, r4, r2
 8004966:	68a2      	ldr	r2, [r4, #8]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8004968:	43ba      	bics	r2, r7
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800496a:	27a0      	movs	r7, #160	; 0xa0
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 800496c:	9204      	str	r2, [sp, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800496e:	05ff      	lsls	r7, r7, #23
 8004970:	2200      	movs	r2, #0
 8004972:	42b8      	cmp	r0, r7
 8004974:	d010      	beq.n	8004998 <HAL_GPIO_Init+0xf8>
 8004976:	4f22      	ldr	r7, [pc, #136]	; (8004a00 <HAL_GPIO_Init+0x160>)
 8004978:	4662      	mov	r2, ip
 800497a:	42b8      	cmp	r0, r7
 800497c:	d00c      	beq.n	8004998 <HAL_GPIO_Init+0xf8>
 800497e:	4f21      	ldr	r7, [pc, #132]	; (8004a04 <HAL_GPIO_Init+0x164>)
 8004980:	1892      	adds	r2, r2, r2
 8004982:	42b8      	cmp	r0, r7
 8004984:	d008      	beq.n	8004998 <HAL_GPIO_Init+0xf8>
 8004986:	4f20      	ldr	r7, [pc, #128]	; (8004a08 <HAL_GPIO_Init+0x168>)
 8004988:	0032      	movs	r2, r6
 800498a:	42b8      	cmp	r0, r7
 800498c:	d004      	beq.n	8004998 <HAL_GPIO_Init+0xf8>
 800498e:	4e1f      	ldr	r6, [pc, #124]	; (8004a0c <HAL_GPIO_Init+0x16c>)
 8004990:	4462      	add	r2, ip
 8004992:	42b0      	cmp	r0, r6
 8004994:	d000      	beq.n	8004998 <HAL_GPIO_Init+0xf8>
 8004996:	9a05      	ldr	r2, [sp, #20]
 8004998:	40aa      	lsls	r2, r5
 800499a:	9d04      	ldr	r5, [sp, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800499c:	9f01      	ldr	r7, [sp, #4]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800499e:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 80049a0:	60a2      	str	r2, [r4, #8]
        temp = EXTI->IMR;
 80049a2:	4a1b      	ldr	r2, [pc, #108]	; (8004a10 <HAL_GPIO_Init+0x170>)
        temp &= ~((uint32_t)iocurrent);
 80049a4:	9c02      	ldr	r4, [sp, #8]
        temp = EXTI->IMR;
 80049a6:	6816      	ldr	r6, [r2, #0]
          temp |= iocurrent;
 80049a8:	9d02      	ldr	r5, [sp, #8]
        temp &= ~((uint32_t)iocurrent);
 80049aa:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 80049ac:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80049ae:	03ff      	lsls	r7, r7, #15
 80049b0:	d401      	bmi.n	80049b6 <HAL_GPIO_Init+0x116>
        temp &= ~((uint32_t)iocurrent);
 80049b2:	0035      	movs	r5, r6
 80049b4:	4025      	ands	r5, r4
        EXTI->IMR = temp;
 80049b6:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 80049b8:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 80049ba:	9d02      	ldr	r5, [sp, #8]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80049bc:	9f01      	ldr	r7, [sp, #4]
          temp |= iocurrent;
 80049be:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80049c0:	03bf      	lsls	r7, r7, #14
 80049c2:	d401      	bmi.n	80049c8 <HAL_GPIO_Init+0x128>
        temp &= ~((uint32_t)iocurrent);
 80049c4:	0035      	movs	r5, r6
 80049c6:	4025      	ands	r5, r4
        EXTI->EMR = temp;
 80049c8:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 80049ca:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 80049cc:	9d02      	ldr	r5, [sp, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80049ce:	9f01      	ldr	r7, [sp, #4]
          temp |= iocurrent;
 80049d0:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80049d2:	02ff      	lsls	r7, r7, #11
 80049d4:	d401      	bmi.n	80049da <HAL_GPIO_Init+0x13a>
        temp &= ~((uint32_t)iocurrent);
 80049d6:	0035      	movs	r5, r6
 80049d8:	4025      	ands	r5, r4
        EXTI->RTSR = temp;
 80049da:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 80049dc:	68d5      	ldr	r5, [r2, #12]
          temp |= iocurrent;
 80049de:	9e02      	ldr	r6, [sp, #8]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80049e0:	9f01      	ldr	r7, [sp, #4]
          temp |= iocurrent;
 80049e2:	432e      	orrs	r6, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80049e4:	02bf      	lsls	r7, r7, #10
 80049e6:	d401      	bmi.n	80049ec <HAL_GPIO_Init+0x14c>
        temp &= ~((uint32_t)iocurrent);
 80049e8:	4025      	ands	r5, r4
 80049ea:	002e      	movs	r6, r5
        EXTI->FTSR = temp;
 80049ec:	60d6      	str	r6, [r2, #12]
    position++;
 80049ee:	3301      	adds	r3, #1
 80049f0:	e761      	b.n	80048b6 <HAL_GPIO_Init+0x16>
 80049f2:	46c0      	nop			; (mov r8, r8)
 80049f4:	afffe400 	.word	0xafffe400
 80049f8:	40021000 	.word	0x40021000
 80049fc:	40010000 	.word	0x40010000
 8004a00:	50000400 	.word	0x50000400
 8004a04:	50000800 	.word	0x50000800
 8004a08:	50000c00 	.word	0x50000c00
 8004a0c:	50001000 	.word	0x50001000
 8004a10:	40010400 	.word	0x40010400

08004a14 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;
  
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  
  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004a14:	6900      	ldr	r0, [r0, #16]
 8004a16:	4008      	ands	r0, r1
 8004a18:	1e41      	subs	r1, r0, #1
 8004a1a:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8004a1c:	b2c0      	uxtb	r0, r0
}
 8004a1e:	4770      	bx	lr

08004a20 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 8004a20:	2a00      	cmp	r2, #0
 8004a22:	d001      	beq.n	8004a28 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a24:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8004a26:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 8004a28:	6281      	str	r1, [r0, #40]	; 0x28
}
 8004a2a:	e7fc      	b.n	8004a26 <HAL_GPIO_WritePin+0x6>

08004a2c <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8004a2c:	4b04      	ldr	r3, [pc, #16]	; (8004a40 <HAL_GPIO_EXTI_IRQHandler+0x14>)
{
 8004a2e:	b510      	push	{r4, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8004a30:	695a      	ldr	r2, [r3, #20]
 8004a32:	4210      	tst	r0, r2
 8004a34:	d002      	beq.n	8004a3c <HAL_GPIO_EXTI_IRQHandler+0x10>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004a36:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004a38:	f008 ff40 	bl	800d8bc <HAL_GPIO_EXTI_Callback>
  }
}
 8004a3c:	bd10      	pop	{r4, pc}
 8004a3e:	46c0      	nop			; (mov r8, r8)
 8004a40:	40010400 	.word	0x40010400

08004a44 <HAL_PWR_DisablePVD>:
  * @retval None
  */
void HAL_PWR_DisablePVD(void)
{
  /* Disable the power voltage detector */
  CLEAR_BIT(PWR->CR, PWR_CR_PVDE);
 8004a44:	2110      	movs	r1, #16
 8004a46:	4a02      	ldr	r2, [pc, #8]	; (8004a50 <HAL_PWR_DisablePVD+0xc>)
 8004a48:	6813      	ldr	r3, [r2, #0]
 8004a4a:	438b      	bics	r3, r1
 8004a4c:	6013      	str	r3, [r2, #0]
}
 8004a4e:	4770      	bx	lr
 8004a50:	40007000 	.word	0x40007000

08004a54 <HAL_PWREx_EnableFastWakeUp>:
  * @retval None
  */
void HAL_PWREx_EnableFastWakeUp(void)
{
  /* Enable the fast wake up */
  SET_BIT(PWR->CR, PWR_CR_FWU);
 8004a54:	2380      	movs	r3, #128	; 0x80
 8004a56:	4a03      	ldr	r2, [pc, #12]	; (8004a64 <HAL_PWREx_EnableFastWakeUp+0x10>)
 8004a58:	00db      	lsls	r3, r3, #3
 8004a5a:	6811      	ldr	r1, [r2, #0]
 8004a5c:	430b      	orrs	r3, r1
 8004a5e:	6013      	str	r3, [r2, #0]
}
 8004a60:	4770      	bx	lr
 8004a62:	46c0      	nop			; (mov r8, r8)
 8004a64:	40007000 	.word	0x40007000

08004a68 <HAL_PWREx_EnableUltraLowPower>:
  * @retval None
  */
void HAL_PWREx_EnableUltraLowPower(void)
{
  /* Enable the Ultra Low Power mode */
  SET_BIT(PWR->CR, PWR_CR_ULP);
 8004a68:	2380      	movs	r3, #128	; 0x80
 8004a6a:	4a03      	ldr	r2, [pc, #12]	; (8004a78 <HAL_PWREx_EnableUltraLowPower+0x10>)
 8004a6c:	009b      	lsls	r3, r3, #2
 8004a6e:	6811      	ldr	r1, [r2, #0]
 8004a70:	430b      	orrs	r3, r1
 8004a72:	6013      	str	r3, [r2, #0]
}
 8004a74:	4770      	bx	lr
 8004a76:	46c0      	nop			; (mov r8, r8)
 8004a78:	40007000 	.word	0x40007000

08004a7c <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004a7c:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8004a7e:	4b19      	ldr	r3, [pc, #100]	; (8004ae4 <HAL_RCC_GetSysClockFreq+0x68>)
{
 8004a80:	b510      	push	{r4, lr}
  tmpreg = RCC->CFGR;
 8004a82:	68d9      	ldr	r1, [r3, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 8004a84:	400a      	ands	r2, r1
 8004a86:	2a08      	cmp	r2, #8
 8004a88:	d029      	beq.n	8004ade <HAL_RCC_GetSysClockFreq+0x62>
 8004a8a:	2a0c      	cmp	r2, #12
 8004a8c:	d009      	beq.n	8004aa2 <HAL_RCC_GetSysClockFreq+0x26>
 8004a8e:	2a04      	cmp	r2, #4
 8004a90:	d11d      	bne.n	8004ace <HAL_RCC_GetSysClockFreq+0x52>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004a92:	6818      	ldr	r0, [r3, #0]
      {
        sysclockfreq =  (HSI_VALUE >> 2);
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
 8004a94:	4b14      	ldr	r3, [pc, #80]	; (8004ae8 <HAL_RCC_GetSysClockFreq+0x6c>)
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004a96:	06c0      	lsls	r0, r0, #27
        sysclockfreq =  HSI_VALUE;
 8004a98:	17c0      	asrs	r0, r0, #31
 8004a9a:	4018      	ands	r0, r3
 8004a9c:	4b13      	ldr	r3, [pc, #76]	; (8004aec <HAL_RCC_GetSysClockFreq+0x70>)
 8004a9e:	18c0      	adds	r0, r0, r3
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
      break;
    }
  }
  return sysclockfreq;
}
 8004aa0:	bd10      	pop	{r4, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004aa2:	028a      	lsls	r2, r1, #10
 8004aa4:	4812      	ldr	r0, [pc, #72]	; (8004af0 <HAL_RCC_GetSysClockFreq+0x74>)
 8004aa6:	0f12      	lsrs	r2, r2, #28
 8004aa8:	5c82      	ldrb	r2, [r0, r2]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8004aaa:	0209      	lsls	r1, r1, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004aac:	68d8      	ldr	r0, [r3, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8004aae:	0f89      	lsrs	r1, r1, #30
 8004ab0:	3101      	adds	r1, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004ab2:	03c0      	lsls	r0, r0, #15
 8004ab4:	d504      	bpl.n	8004ac0 <HAL_RCC_GetSysClockFreq+0x44>
        pllvco = (HSE_VALUE * pllm) / plld;
 8004ab6:	480f      	ldr	r0, [pc, #60]	; (8004af4 <HAL_RCC_GetSysClockFreq+0x78>)
         pllvco = (HSI_VALUE * pllm) / plld;
 8004ab8:	4350      	muls	r0, r2
 8004aba:	f7fb fb43 	bl	8000144 <__udivsi3>
 8004abe:	e7ef      	b.n	8004aa0 <HAL_RCC_GetSysClockFreq+0x24>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	06db      	lsls	r3, r3, #27
 8004ac4:	d501      	bpl.n	8004aca <HAL_RCC_GetSysClockFreq+0x4e>
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8004ac6:	480c      	ldr	r0, [pc, #48]	; (8004af8 <HAL_RCC_GetSysClockFreq+0x7c>)
 8004ac8:	e7f6      	b.n	8004ab8 <HAL_RCC_GetSysClockFreq+0x3c>
         pllvco = (HSI_VALUE * pllm) / plld;
 8004aca:	4808      	ldr	r0, [pc, #32]	; (8004aec <HAL_RCC_GetSysClockFreq+0x70>)
 8004acc:	e7f4      	b.n	8004ab8 <HAL_RCC_GetSysClockFreq+0x3c>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8004ace:	2080      	movs	r0, #128	; 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8004ad0:	685b      	ldr	r3, [r3, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8004ad2:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8004ad4:	041b      	lsls	r3, r3, #16
 8004ad6:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8004ad8:	3301      	adds	r3, #1
 8004ada:	4098      	lsls	r0, r3
 8004adc:	e7e0      	b.n	8004aa0 <HAL_RCC_GetSysClockFreq+0x24>
      sysclockfreq = HSE_VALUE;
 8004ade:	4805      	ldr	r0, [pc, #20]	; (8004af4 <HAL_RCC_GetSysClockFreq+0x78>)
 8004ae0:	e7de      	b.n	8004aa0 <HAL_RCC_GetSysClockFreq+0x24>
 8004ae2:	46c0      	nop			; (mov r8, r8)
 8004ae4:	40021000 	.word	0x40021000
 8004ae8:	ff48e500 	.word	0xff48e500
 8004aec:	00f42400 	.word	0x00f42400
 8004af0:	0800ec10 	.word	0x0800ec10
 8004af4:	007a1200 	.word	0x007a1200
 8004af8:	003d0900 	.word	0x003d0900

08004afc <HAL_RCC_OscConfig>:
{
 8004afc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004afe:	0005      	movs	r5, r0
 8004b00:	b087      	sub	sp, #28
  if(RCC_OscInitStruct == NULL)
 8004b02:	2800      	cmp	r0, #0
 8004b04:	d102      	bne.n	8004b0c <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 8004b06:	2001      	movs	r0, #1
}
 8004b08:	b007      	add	sp, #28
 8004b0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b0c:	230c      	movs	r3, #12
 8004b0e:	4cc2      	ldr	r4, [pc, #776]	; (8004e18 <HAL_RCC_OscConfig+0x31c>)
 8004b10:	68e6      	ldr	r6, [r4, #12]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b12:	68e2      	ldr	r2, [r4, #12]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b14:	401e      	ands	r6, r3
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b16:	2380      	movs	r3, #128	; 0x80
 8004b18:	025b      	lsls	r3, r3, #9
 8004b1a:	401a      	ands	r2, r3
 8004b1c:	9201      	str	r2, [sp, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b1e:	6802      	ldr	r2, [r0, #0]
 8004b20:	07d2      	lsls	r2, r2, #31
 8004b22:	d441      	bmi.n	8004ba8 <HAL_RCC_OscConfig+0xac>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b24:	682b      	ldr	r3, [r5, #0]
 8004b26:	079b      	lsls	r3, r3, #30
 8004b28:	d500      	bpl.n	8004b2c <HAL_RCC_OscConfig+0x30>
 8004b2a:	e087      	b.n	8004c3c <HAL_RCC_OscConfig+0x140>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004b2c:	682b      	ldr	r3, [r5, #0]
 8004b2e:	06db      	lsls	r3, r3, #27
 8004b30:	d528      	bpl.n	8004b84 <HAL_RCC_OscConfig+0x88>
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8004b32:	2e00      	cmp	r6, #0
 8004b34:	d000      	beq.n	8004b38 <HAL_RCC_OscConfig+0x3c>
 8004b36:	e0e1      	b.n	8004cfc <HAL_RCC_OscConfig+0x200>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004b38:	6823      	ldr	r3, [r4, #0]
 8004b3a:	059b      	lsls	r3, r3, #22
 8004b3c:	d502      	bpl.n	8004b44 <HAL_RCC_OscConfig+0x48>
 8004b3e:	69eb      	ldr	r3, [r5, #28]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d0e0      	beq.n	8004b06 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004b44:	6862      	ldr	r2, [r4, #4]
 8004b46:	49b5      	ldr	r1, [pc, #724]	; (8004e1c <HAL_RCC_OscConfig+0x320>)
 8004b48:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004b4a:	400a      	ands	r2, r1
 8004b4c:	431a      	orrs	r2, r3
 8004b4e:	6062      	str	r2, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004b50:	6861      	ldr	r1, [r4, #4]
 8004b52:	6a2a      	ldr	r2, [r5, #32]
 8004b54:	0209      	lsls	r1, r1, #8
 8004b56:	0a09      	lsrs	r1, r1, #8
 8004b58:	0612      	lsls	r2, r2, #24
 8004b5a:	430a      	orrs	r2, r1
 8004b5c:	6062      	str	r2, [r4, #4]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004b5e:	2280      	movs	r2, #128	; 0x80
 8004b60:	0b5b      	lsrs	r3, r3, #13
 8004b62:	3301      	adds	r3, #1
 8004b64:	0212      	lsls	r2, r2, #8
 8004b66:	409a      	lsls	r2, r3
 8004b68:	0013      	movs	r3, r2
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8004b6a:	68e1      	ldr	r1, [r4, #12]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8004b6c:	2003      	movs	r0, #3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8004b6e:	060a      	lsls	r2, r1, #24
 8004b70:	49ab      	ldr	r1, [pc, #684]	; (8004e20 <HAL_RCC_OscConfig+0x324>)
 8004b72:	0f12      	lsrs	r2, r2, #28
 8004b74:	5c8a      	ldrb	r2, [r1, r2]
 8004b76:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004b78:	4aaa      	ldr	r2, [pc, #680]	; (8004e24 <HAL_RCC_OscConfig+0x328>)
 8004b7a:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8004b7c:	f008 fe40 	bl	800d800 <HAL_InitTick>
        if(status != HAL_OK)
 8004b80:	2800      	cmp	r0, #0
 8004b82:	d1c1      	bne.n	8004b08 <HAL_RCC_OscConfig+0xc>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b84:	682b      	ldr	r3, [r5, #0]
 8004b86:	071b      	lsls	r3, r3, #28
 8004b88:	d500      	bpl.n	8004b8c <HAL_RCC_OscConfig+0x90>
 8004b8a:	e0ee      	b.n	8004d6a <HAL_RCC_OscConfig+0x26e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b8c:	682b      	ldr	r3, [r5, #0]
 8004b8e:	075b      	lsls	r3, r3, #29
 8004b90:	d500      	bpl.n	8004b94 <HAL_RCC_OscConfig+0x98>
 8004b92:	e110      	b.n	8004db6 <HAL_RCC_OscConfig+0x2ba>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004b94:	682b      	ldr	r3, [r5, #0]
 8004b96:	069b      	lsls	r3, r3, #26
 8004b98:	d500      	bpl.n	8004b9c <HAL_RCC_OscConfig+0xa0>
 8004b9a:	e195      	b.n	8004ec8 <HAL_RCC_OscConfig+0x3cc>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b9c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d000      	beq.n	8004ba4 <HAL_RCC_OscConfig+0xa8>
 8004ba2:	e1c4      	b.n	8004f2e <HAL_RCC_OscConfig+0x432>
  return HAL_OK;
 8004ba4:	2000      	movs	r0, #0
 8004ba6:	e7af      	b.n	8004b08 <HAL_RCC_OscConfig+0xc>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004ba8:	2e08      	cmp	r6, #8
 8004baa:	d004      	beq.n	8004bb6 <HAL_RCC_OscConfig+0xba>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004bac:	2e0c      	cmp	r6, #12
 8004bae:	d109      	bne.n	8004bc4 <HAL_RCC_OscConfig+0xc8>
 8004bb0:	9a01      	ldr	r2, [sp, #4]
 8004bb2:	2a00      	cmp	r2, #0
 8004bb4:	d006      	beq.n	8004bc4 <HAL_RCC_OscConfig+0xc8>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bb6:	6823      	ldr	r3, [r4, #0]
 8004bb8:	039b      	lsls	r3, r3, #14
 8004bba:	d5b3      	bpl.n	8004b24 <HAL_RCC_OscConfig+0x28>
 8004bbc:	686b      	ldr	r3, [r5, #4]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d1b0      	bne.n	8004b24 <HAL_RCC_OscConfig+0x28>
 8004bc2:	e7a0      	b.n	8004b06 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004bc4:	686a      	ldr	r2, [r5, #4]
 8004bc6:	429a      	cmp	r2, r3
 8004bc8:	d111      	bne.n	8004bee <HAL_RCC_OscConfig+0xf2>
 8004bca:	6822      	ldr	r2, [r4, #0]
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004bd0:	f7ff fac4 	bl	800415c <HAL_GetTick>
 8004bd4:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004bd6:	2280      	movs	r2, #128	; 0x80
 8004bd8:	6823      	ldr	r3, [r4, #0]
 8004bda:	0292      	lsls	r2, r2, #10
 8004bdc:	4213      	tst	r3, r2
 8004bde:	d1a1      	bne.n	8004b24 <HAL_RCC_OscConfig+0x28>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004be0:	f7ff fabc 	bl	800415c <HAL_GetTick>
 8004be4:	1bc0      	subs	r0, r0, r7
 8004be6:	2864      	cmp	r0, #100	; 0x64
 8004be8:	d9f5      	bls.n	8004bd6 <HAL_RCC_OscConfig+0xda>
            return HAL_TIMEOUT;
 8004bea:	2003      	movs	r0, #3
 8004bec:	e78c      	b.n	8004b08 <HAL_RCC_OscConfig+0xc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004bee:	21a0      	movs	r1, #160	; 0xa0
 8004bf0:	02c9      	lsls	r1, r1, #11
 8004bf2:	428a      	cmp	r2, r1
 8004bf4:	d105      	bne.n	8004c02 <HAL_RCC_OscConfig+0x106>
 8004bf6:	2280      	movs	r2, #128	; 0x80
 8004bf8:	6821      	ldr	r1, [r4, #0]
 8004bfa:	02d2      	lsls	r2, r2, #11
 8004bfc:	430a      	orrs	r2, r1
 8004bfe:	6022      	str	r2, [r4, #0]
 8004c00:	e7e3      	b.n	8004bca <HAL_RCC_OscConfig+0xce>
 8004c02:	6821      	ldr	r1, [r4, #0]
 8004c04:	4888      	ldr	r0, [pc, #544]	; (8004e28 <HAL_RCC_OscConfig+0x32c>)
 8004c06:	4001      	ands	r1, r0
 8004c08:	6021      	str	r1, [r4, #0]
 8004c0a:	6821      	ldr	r1, [r4, #0]
 8004c0c:	400b      	ands	r3, r1
 8004c0e:	9305      	str	r3, [sp, #20]
 8004c10:	9b05      	ldr	r3, [sp, #20]
 8004c12:	4986      	ldr	r1, [pc, #536]	; (8004e2c <HAL_RCC_OscConfig+0x330>)
 8004c14:	6823      	ldr	r3, [r4, #0]
 8004c16:	400b      	ands	r3, r1
 8004c18:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c1a:	2a00      	cmp	r2, #0
 8004c1c:	d1d8      	bne.n	8004bd0 <HAL_RCC_OscConfig+0xd4>
        tickstart = HAL_GetTick();
 8004c1e:	f7ff fa9d 	bl	800415c <HAL_GetTick>
 8004c22:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004c24:	2280      	movs	r2, #128	; 0x80
 8004c26:	6823      	ldr	r3, [r4, #0]
 8004c28:	0292      	lsls	r2, r2, #10
 8004c2a:	4213      	tst	r3, r2
 8004c2c:	d100      	bne.n	8004c30 <HAL_RCC_OscConfig+0x134>
 8004c2e:	e779      	b.n	8004b24 <HAL_RCC_OscConfig+0x28>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c30:	f7ff fa94 	bl	800415c <HAL_GetTick>
 8004c34:	1bc0      	subs	r0, r0, r7
 8004c36:	2864      	cmp	r0, #100	; 0x64
 8004c38:	d9f4      	bls.n	8004c24 <HAL_RCC_OscConfig+0x128>
 8004c3a:	e7d6      	b.n	8004bea <HAL_RCC_OscConfig+0xee>
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8004c3c:	2220      	movs	r2, #32
    hsi_state = RCC_OscInitStruct->HSIState;
 8004c3e:	68eb      	ldr	r3, [r5, #12]
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8004c40:	4213      	tst	r3, r2
 8004c42:	d003      	beq.n	8004c4c <HAL_RCC_OscConfig+0x150>
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8004c44:	6821      	ldr	r1, [r4, #0]
      hsi_state &= ~RCC_CR_HSIOUTEN;
 8004c46:	4393      	bics	r3, r2
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8004c48:	4311      	orrs	r1, r2
 8004c4a:	6021      	str	r1, [r4, #0]
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004c4c:	2e04      	cmp	r6, #4
 8004c4e:	d004      	beq.n	8004c5a <HAL_RCC_OscConfig+0x15e>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004c50:	2e0c      	cmp	r6, #12
 8004c52:	d125      	bne.n	8004ca0 <HAL_RCC_OscConfig+0x1a4>
 8004c54:	9a01      	ldr	r2, [sp, #4]
 8004c56:	2a00      	cmp	r2, #0
 8004c58:	d122      	bne.n	8004ca0 <HAL_RCC_OscConfig+0x1a4>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8004c5a:	6822      	ldr	r2, [r4, #0]
 8004c5c:	0752      	lsls	r2, r2, #29
 8004c5e:	d502      	bpl.n	8004c66 <HAL_RCC_OscConfig+0x16a>
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d100      	bne.n	8004c66 <HAL_RCC_OscConfig+0x16a>
 8004c64:	e74f      	b.n	8004b06 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c66:	6861      	ldr	r1, [r4, #4]
 8004c68:	692a      	ldr	r2, [r5, #16]
 8004c6a:	4871      	ldr	r0, [pc, #452]	; (8004e30 <HAL_RCC_OscConfig+0x334>)
 8004c6c:	0212      	lsls	r2, r2, #8
 8004c6e:	4001      	ands	r1, r0
 8004c70:	430a      	orrs	r2, r1
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004c72:	2109      	movs	r1, #9
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c74:	6062      	str	r2, [r4, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004c76:	6822      	ldr	r2, [r4, #0]
 8004c78:	438a      	bics	r2, r1
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	6023      	str	r3, [r4, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004c7e:	f7ff fefd 	bl	8004a7c <HAL_RCC_GetSysClockFreq>
 8004c82:	68e3      	ldr	r3, [r4, #12]
 8004c84:	4a66      	ldr	r2, [pc, #408]	; (8004e20 <HAL_RCC_OscConfig+0x324>)
 8004c86:	061b      	lsls	r3, r3, #24
 8004c88:	0f1b      	lsrs	r3, r3, #28
 8004c8a:	5cd3      	ldrb	r3, [r2, r3]
 8004c8c:	40d8      	lsrs	r0, r3
 8004c8e:	4b65      	ldr	r3, [pc, #404]	; (8004e24 <HAL_RCC_OscConfig+0x328>)
 8004c90:	6018      	str	r0, [r3, #0]
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8004c92:	2003      	movs	r0, #3
 8004c94:	f008 fdb4 	bl	800d800 <HAL_InitTick>
      if(status != HAL_OK)
 8004c98:	2800      	cmp	r0, #0
 8004c9a:	d100      	bne.n	8004c9e <HAL_RCC_OscConfig+0x1a2>
 8004c9c:	e746      	b.n	8004b2c <HAL_RCC_OscConfig+0x30>
 8004c9e:	e733      	b.n	8004b08 <HAL_RCC_OscConfig+0xc>
      if(hsi_state != RCC_HSI_OFF)
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d019      	beq.n	8004cd8 <HAL_RCC_OscConfig+0x1dc>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004ca4:	2109      	movs	r1, #9
 8004ca6:	6822      	ldr	r2, [r4, #0]
 8004ca8:	438a      	bics	r2, r1
 8004caa:	4313      	orrs	r3, r2
 8004cac:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004cae:	f7ff fa55 	bl	800415c <HAL_GetTick>
 8004cb2:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004cb4:	2204      	movs	r2, #4
 8004cb6:	6823      	ldr	r3, [r4, #0]
 8004cb8:	4213      	tst	r3, r2
 8004cba:	d007      	beq.n	8004ccc <HAL_RCC_OscConfig+0x1d0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cbc:	6862      	ldr	r2, [r4, #4]
 8004cbe:	692b      	ldr	r3, [r5, #16]
 8004cc0:	495b      	ldr	r1, [pc, #364]	; (8004e30 <HAL_RCC_OscConfig+0x334>)
 8004cc2:	021b      	lsls	r3, r3, #8
 8004cc4:	400a      	ands	r2, r1
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	6063      	str	r3, [r4, #4]
 8004cca:	e72f      	b.n	8004b2c <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ccc:	f7ff fa46 	bl	800415c <HAL_GetTick>
 8004cd0:	1bc0      	subs	r0, r0, r7
 8004cd2:	2802      	cmp	r0, #2
 8004cd4:	d9ee      	bls.n	8004cb4 <HAL_RCC_OscConfig+0x1b8>
 8004cd6:	e788      	b.n	8004bea <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_HSI_DISABLE();
 8004cd8:	2201      	movs	r2, #1
 8004cda:	6823      	ldr	r3, [r4, #0]
 8004cdc:	4393      	bics	r3, r2
 8004cde:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004ce0:	f7ff fa3c 	bl	800415c <HAL_GetTick>
 8004ce4:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004ce6:	2204      	movs	r2, #4
 8004ce8:	6823      	ldr	r3, [r4, #0]
 8004cea:	4213      	tst	r3, r2
 8004cec:	d100      	bne.n	8004cf0 <HAL_RCC_OscConfig+0x1f4>
 8004cee:	e71d      	b.n	8004b2c <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004cf0:	f7ff fa34 	bl	800415c <HAL_GetTick>
 8004cf4:	1bc0      	subs	r0, r0, r7
 8004cf6:	2802      	cmp	r0, #2
 8004cf8:	d9f5      	bls.n	8004ce6 <HAL_RCC_OscConfig+0x1ea>
 8004cfa:	e776      	b.n	8004bea <HAL_RCC_OscConfig+0xee>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004cfc:	69eb      	ldr	r3, [r5, #28]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d020      	beq.n	8004d44 <HAL_RCC_OscConfig+0x248>
        __HAL_RCC_MSI_ENABLE();
 8004d02:	2380      	movs	r3, #128	; 0x80
 8004d04:	6822      	ldr	r2, [r4, #0]
 8004d06:	005b      	lsls	r3, r3, #1
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004d0c:	f7ff fa26 	bl	800415c <HAL_GetTick>
 8004d10:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004d12:	2280      	movs	r2, #128	; 0x80
 8004d14:	6823      	ldr	r3, [r4, #0]
 8004d16:	0092      	lsls	r2, r2, #2
 8004d18:	4213      	tst	r3, r2
 8004d1a:	d00d      	beq.n	8004d38 <HAL_RCC_OscConfig+0x23c>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004d1c:	6863      	ldr	r3, [r4, #4]
 8004d1e:	4a3f      	ldr	r2, [pc, #252]	; (8004e1c <HAL_RCC_OscConfig+0x320>)
 8004d20:	4013      	ands	r3, r2
 8004d22:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8004d24:	4313      	orrs	r3, r2
 8004d26:	6063      	str	r3, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004d28:	6862      	ldr	r2, [r4, #4]
 8004d2a:	6a2b      	ldr	r3, [r5, #32]
 8004d2c:	0212      	lsls	r2, r2, #8
 8004d2e:	061b      	lsls	r3, r3, #24
 8004d30:	0a12      	lsrs	r2, r2, #8
 8004d32:	4313      	orrs	r3, r2
 8004d34:	6063      	str	r3, [r4, #4]
 8004d36:	e725      	b.n	8004b84 <HAL_RCC_OscConfig+0x88>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004d38:	f7ff fa10 	bl	800415c <HAL_GetTick>
 8004d3c:	1bc0      	subs	r0, r0, r7
 8004d3e:	2802      	cmp	r0, #2
 8004d40:	d9e7      	bls.n	8004d12 <HAL_RCC_OscConfig+0x216>
 8004d42:	e752      	b.n	8004bea <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_MSI_DISABLE();
 8004d44:	6823      	ldr	r3, [r4, #0]
 8004d46:	4a3b      	ldr	r2, [pc, #236]	; (8004e34 <HAL_RCC_OscConfig+0x338>)
 8004d48:	4013      	ands	r3, r2
 8004d4a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004d4c:	f7ff fa06 	bl	800415c <HAL_GetTick>
 8004d50:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004d52:	2280      	movs	r2, #128	; 0x80
 8004d54:	6823      	ldr	r3, [r4, #0]
 8004d56:	0092      	lsls	r2, r2, #2
 8004d58:	4213      	tst	r3, r2
 8004d5a:	d100      	bne.n	8004d5e <HAL_RCC_OscConfig+0x262>
 8004d5c:	e712      	b.n	8004b84 <HAL_RCC_OscConfig+0x88>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004d5e:	f7ff f9fd 	bl	800415c <HAL_GetTick>
 8004d62:	1bc0      	subs	r0, r0, r7
 8004d64:	2802      	cmp	r0, #2
 8004d66:	d9f4      	bls.n	8004d52 <HAL_RCC_OscConfig+0x256>
 8004d68:	e73f      	b.n	8004bea <HAL_RCC_OscConfig+0xee>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d6a:	696a      	ldr	r2, [r5, #20]
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	2a00      	cmp	r2, #0
 8004d70:	d010      	beq.n	8004d94 <HAL_RCC_OscConfig+0x298>
      __HAL_RCC_LSI_ENABLE();
 8004d72:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8004d74:	4313      	orrs	r3, r2
 8004d76:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8004d78:	f7ff f9f0 	bl	800415c <HAL_GetTick>
 8004d7c:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004d7e:	2202      	movs	r2, #2
 8004d80:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004d82:	4213      	tst	r3, r2
 8004d84:	d000      	beq.n	8004d88 <HAL_RCC_OscConfig+0x28c>
 8004d86:	e701      	b.n	8004b8c <HAL_RCC_OscConfig+0x90>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d88:	f7ff f9e8 	bl	800415c <HAL_GetTick>
 8004d8c:	1bc0      	subs	r0, r0, r7
 8004d8e:	2802      	cmp	r0, #2
 8004d90:	d9f5      	bls.n	8004d7e <HAL_RCC_OscConfig+0x282>
 8004d92:	e72a      	b.n	8004bea <HAL_RCC_OscConfig+0xee>
      __HAL_RCC_LSI_DISABLE();
 8004d94:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8004d96:	439a      	bics	r2, r3
 8004d98:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8004d9a:	f7ff f9df 	bl	800415c <HAL_GetTick>
 8004d9e:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004da0:	2202      	movs	r2, #2
 8004da2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004da4:	4213      	tst	r3, r2
 8004da6:	d100      	bne.n	8004daa <HAL_RCC_OscConfig+0x2ae>
 8004da8:	e6f0      	b.n	8004b8c <HAL_RCC_OscConfig+0x90>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004daa:	f7ff f9d7 	bl	800415c <HAL_GetTick>
 8004dae:	1bc0      	subs	r0, r0, r7
 8004db0:	2802      	cmp	r0, #2
 8004db2:	d9f5      	bls.n	8004da0 <HAL_RCC_OscConfig+0x2a4>
 8004db4:	e719      	b.n	8004bea <HAL_RCC_OscConfig+0xee>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004db6:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8004db8:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004dba:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004dbc:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 8004dbe:	9101      	str	r1, [sp, #4]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004dc0:	421a      	tst	r2, r3
 8004dc2:	d104      	bne.n	8004dce <HAL_RCC_OscConfig+0x2d2>
      __HAL_RCC_PWR_CLK_ENABLE();
 8004dc4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	9301      	str	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dce:	2280      	movs	r2, #128	; 0x80
 8004dd0:	4f19      	ldr	r7, [pc, #100]	; (8004e38 <HAL_RCC_OscConfig+0x33c>)
 8004dd2:	0052      	lsls	r2, r2, #1
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	4213      	tst	r3, r2
 8004dd8:	d008      	beq.n	8004dec <HAL_RCC_OscConfig+0x2f0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004dda:	2280      	movs	r2, #128	; 0x80
 8004ddc:	68ab      	ldr	r3, [r5, #8]
 8004dde:	0052      	lsls	r2, r2, #1
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d12b      	bne.n	8004e3c <HAL_RCC_OscConfig+0x340>
 8004de4:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8004de6:	4313      	orrs	r3, r2
 8004de8:	6523      	str	r3, [r4, #80]	; 0x50
 8004dea:	e04c      	b.n	8004e86 <HAL_RCC_OscConfig+0x38a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004dec:	2280      	movs	r2, #128	; 0x80
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	0052      	lsls	r2, r2, #1
 8004df2:	4313      	orrs	r3, r2
 8004df4:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8004df6:	f7ff f9b1 	bl	800415c <HAL_GetTick>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dfa:	2380      	movs	r3, #128	; 0x80
 8004dfc:	005b      	lsls	r3, r3, #1
      tickstart = HAL_GetTick();
 8004dfe:	9002      	str	r0, [sp, #8]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e00:	9303      	str	r3, [sp, #12]
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	9a03      	ldr	r2, [sp, #12]
 8004e06:	4213      	tst	r3, r2
 8004e08:	d1e7      	bne.n	8004dda <HAL_RCC_OscConfig+0x2de>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e0a:	f7ff f9a7 	bl	800415c <HAL_GetTick>
 8004e0e:	9b02      	ldr	r3, [sp, #8]
 8004e10:	1ac0      	subs	r0, r0, r3
 8004e12:	2864      	cmp	r0, #100	; 0x64
 8004e14:	d9f5      	bls.n	8004e02 <HAL_RCC_OscConfig+0x306>
 8004e16:	e6e8      	b.n	8004bea <HAL_RCC_OscConfig+0xee>
 8004e18:	40021000 	.word	0x40021000
 8004e1c:	ffff1fff 	.word	0xffff1fff
 8004e20:	0800ec19 	.word	0x0800ec19
 8004e24:	20000044 	.word	0x20000044
 8004e28:	fffeffff 	.word	0xfffeffff
 8004e2c:	fffbffff 	.word	0xfffbffff
 8004e30:	ffffe0ff 	.word	0xffffe0ff
 8004e34:	fffffeff 	.word	0xfffffeff
 8004e38:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d116      	bne.n	8004e6e <HAL_RCC_OscConfig+0x372>
 8004e40:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004e42:	4a6c      	ldr	r2, [pc, #432]	; (8004ff4 <HAL_RCC_OscConfig+0x4f8>)
 8004e44:	4013      	ands	r3, r2
 8004e46:	6523      	str	r3, [r4, #80]	; 0x50
 8004e48:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004e4a:	4a6b      	ldr	r2, [pc, #428]	; (8004ff8 <HAL_RCC_OscConfig+0x4fc>)
 8004e4c:	4013      	ands	r3, r2
 8004e4e:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8004e50:	f7ff f984 	bl	800415c <HAL_GetTick>
 8004e54:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004e56:	2280      	movs	r2, #128	; 0x80
 8004e58:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004e5a:	0092      	lsls	r2, r2, #2
 8004e5c:	4213      	tst	r3, r2
 8004e5e:	d02a      	beq.n	8004eb6 <HAL_RCC_OscConfig+0x3ba>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e60:	f7ff f97c 	bl	800415c <HAL_GetTick>
 8004e64:	4b65      	ldr	r3, [pc, #404]	; (8004ffc <HAL_RCC_OscConfig+0x500>)
 8004e66:	1bc0      	subs	r0, r0, r7
 8004e68:	4298      	cmp	r0, r3
 8004e6a:	d9f4      	bls.n	8004e56 <HAL_RCC_OscConfig+0x35a>
 8004e6c:	e6bd      	b.n	8004bea <HAL_RCC_OscConfig+0xee>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e6e:	21a0      	movs	r1, #160	; 0xa0
 8004e70:	00c9      	lsls	r1, r1, #3
 8004e72:	428b      	cmp	r3, r1
 8004e74:	d10b      	bne.n	8004e8e <HAL_RCC_OscConfig+0x392>
 8004e76:	2380      	movs	r3, #128	; 0x80
 8004e78:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8004e7a:	00db      	lsls	r3, r3, #3
 8004e7c:	430b      	orrs	r3, r1
 8004e7e:	6523      	str	r3, [r4, #80]	; 0x50
 8004e80:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004e82:	431a      	orrs	r2, r3
 8004e84:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8004e86:	f7ff f969 	bl	800415c <HAL_GetTick>
 8004e8a:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004e8c:	e00e      	b.n	8004eac <HAL_RCC_OscConfig+0x3b0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e8e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004e90:	4a58      	ldr	r2, [pc, #352]	; (8004ff4 <HAL_RCC_OscConfig+0x4f8>)
 8004e92:	4013      	ands	r3, r2
 8004e94:	6523      	str	r3, [r4, #80]	; 0x50
 8004e96:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004e98:	4a57      	ldr	r2, [pc, #348]	; (8004ff8 <HAL_RCC_OscConfig+0x4fc>)
 8004e9a:	4013      	ands	r3, r2
 8004e9c:	e7a4      	b.n	8004de8 <HAL_RCC_OscConfig+0x2ec>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e9e:	f7ff f95d 	bl	800415c <HAL_GetTick>
 8004ea2:	4b56      	ldr	r3, [pc, #344]	; (8004ffc <HAL_RCC_OscConfig+0x500>)
 8004ea4:	1bc0      	subs	r0, r0, r7
 8004ea6:	4298      	cmp	r0, r3
 8004ea8:	d900      	bls.n	8004eac <HAL_RCC_OscConfig+0x3b0>
 8004eaa:	e69e      	b.n	8004bea <HAL_RCC_OscConfig+0xee>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004eac:	2280      	movs	r2, #128	; 0x80
 8004eae:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004eb0:	0092      	lsls	r2, r2, #2
 8004eb2:	4213      	tst	r3, r2
 8004eb4:	d0f3      	beq.n	8004e9e <HAL_RCC_OscConfig+0x3a2>
    if(pwrclkchanged == SET)
 8004eb6:	9b01      	ldr	r3, [sp, #4]
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d000      	beq.n	8004ebe <HAL_RCC_OscConfig+0x3c2>
 8004ebc:	e66a      	b.n	8004b94 <HAL_RCC_OscConfig+0x98>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ebe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004ec0:	4a4f      	ldr	r2, [pc, #316]	; (8005000 <HAL_RCC_OscConfig+0x504>)
 8004ec2:	4013      	ands	r3, r2
 8004ec4:	63a3      	str	r3, [r4, #56]	; 0x38
 8004ec6:	e665      	b.n	8004b94 <HAL_RCC_OscConfig+0x98>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004ec8:	69a9      	ldr	r1, [r5, #24]
 8004eca:	2301      	movs	r3, #1
 8004ecc:	4a4d      	ldr	r2, [pc, #308]	; (8005004 <HAL_RCC_OscConfig+0x508>)
 8004ece:	2900      	cmp	r1, #0
 8004ed0:	d018      	beq.n	8004f04 <HAL_RCC_OscConfig+0x408>
        __HAL_RCC_HSI48_ENABLE();
 8004ed2:	68a1      	ldr	r1, [r4, #8]
 8004ed4:	4319      	orrs	r1, r3
 8004ed6:	60a1      	str	r1, [r4, #8]
 8004ed8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004eda:	430b      	orrs	r3, r1
 8004edc:	6363      	str	r3, [r4, #52]	; 0x34
 8004ede:	2380      	movs	r3, #128	; 0x80
 8004ee0:	6a11      	ldr	r1, [r2, #32]
 8004ee2:	019b      	lsls	r3, r3, #6
 8004ee4:	430b      	orrs	r3, r1
 8004ee6:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8004ee8:	f7ff f938 	bl	800415c <HAL_GetTick>
 8004eec:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004eee:	2202      	movs	r2, #2
 8004ef0:	68a3      	ldr	r3, [r4, #8]
 8004ef2:	4213      	tst	r3, r2
 8004ef4:	d000      	beq.n	8004ef8 <HAL_RCC_OscConfig+0x3fc>
 8004ef6:	e651      	b.n	8004b9c <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004ef8:	f7ff f930 	bl	800415c <HAL_GetTick>
 8004efc:	1bc0      	subs	r0, r0, r7
 8004efe:	2802      	cmp	r0, #2
 8004f00:	d9f5      	bls.n	8004eee <HAL_RCC_OscConfig+0x3f2>
 8004f02:	e672      	b.n	8004bea <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_HSI48_DISABLE();
 8004f04:	68a1      	ldr	r1, [r4, #8]
 8004f06:	4399      	bics	r1, r3
 8004f08:	60a1      	str	r1, [r4, #8]
 8004f0a:	6a13      	ldr	r3, [r2, #32]
 8004f0c:	493e      	ldr	r1, [pc, #248]	; (8005008 <HAL_RCC_OscConfig+0x50c>)
 8004f0e:	400b      	ands	r3, r1
 8004f10:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8004f12:	f7ff f923 	bl	800415c <HAL_GetTick>
 8004f16:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004f18:	2202      	movs	r2, #2
 8004f1a:	68a3      	ldr	r3, [r4, #8]
 8004f1c:	4213      	tst	r3, r2
 8004f1e:	d100      	bne.n	8004f22 <HAL_RCC_OscConfig+0x426>
 8004f20:	e63c      	b.n	8004b9c <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f22:	f7ff f91b 	bl	800415c <HAL_GetTick>
 8004f26:	1bc0      	subs	r0, r0, r7
 8004f28:	2802      	cmp	r0, #2
 8004f2a:	d9f5      	bls.n	8004f18 <HAL_RCC_OscConfig+0x41c>
 8004f2c:	e65d      	b.n	8004bea <HAL_RCC_OscConfig+0xee>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004f2e:	2e0c      	cmp	r6, #12
 8004f30:	d043      	beq.n	8004fba <HAL_RCC_OscConfig+0x4be>
 8004f32:	4a36      	ldr	r2, [pc, #216]	; (800500c <HAL_RCC_OscConfig+0x510>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f34:	2b02      	cmp	r3, #2
 8004f36:	d12e      	bne.n	8004f96 <HAL_RCC_OscConfig+0x49a>
        __HAL_RCC_PLL_DISABLE();
 8004f38:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004f3a:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8004f3c:	4013      	ands	r3, r2
 8004f3e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004f40:	f7ff f90c 	bl	800415c <HAL_GetTick>
 8004f44:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004f46:	04b6      	lsls	r6, r6, #18
 8004f48:	6823      	ldr	r3, [r4, #0]
 8004f4a:	4233      	tst	r3, r6
 8004f4c:	d11d      	bne.n	8004f8a <HAL_RCC_OscConfig+0x48e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f4e:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8004f50:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004f52:	68e2      	ldr	r2, [r4, #12]
 8004f54:	430b      	orrs	r3, r1
 8004f56:	492e      	ldr	r1, [pc, #184]	; (8005010 <HAL_RCC_OscConfig+0x514>)
 8004f58:	400a      	ands	r2, r1
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004f5e:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f60:	4313      	orrs	r3, r2
 8004f62:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8004f64:	2380      	movs	r3, #128	; 0x80
 8004f66:	6822      	ldr	r2, [r4, #0]
 8004f68:	045b      	lsls	r3, r3, #17
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004f6e:	f7ff f8f5 	bl	800415c <HAL_GetTick>
 8004f72:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004f74:	04ad      	lsls	r5, r5, #18
 8004f76:	6823      	ldr	r3, [r4, #0]
 8004f78:	422b      	tst	r3, r5
 8004f7a:	d000      	beq.n	8004f7e <HAL_RCC_OscConfig+0x482>
 8004f7c:	e612      	b.n	8004ba4 <HAL_RCC_OscConfig+0xa8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f7e:	f7ff f8ed 	bl	800415c <HAL_GetTick>
 8004f82:	1b80      	subs	r0, r0, r6
 8004f84:	2802      	cmp	r0, #2
 8004f86:	d9f6      	bls.n	8004f76 <HAL_RCC_OscConfig+0x47a>
 8004f88:	e62f      	b.n	8004bea <HAL_RCC_OscConfig+0xee>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f8a:	f7ff f8e7 	bl	800415c <HAL_GetTick>
 8004f8e:	1bc0      	subs	r0, r0, r7
 8004f90:	2802      	cmp	r0, #2
 8004f92:	d9d9      	bls.n	8004f48 <HAL_RCC_OscConfig+0x44c>
 8004f94:	e629      	b.n	8004bea <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_PLL_DISABLE();
 8004f96:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004f98:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8004f9a:	4013      	ands	r3, r2
 8004f9c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004f9e:	f7ff f8dd 	bl	800415c <HAL_GetTick>
 8004fa2:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004fa4:	04ad      	lsls	r5, r5, #18
 8004fa6:	6823      	ldr	r3, [r4, #0]
 8004fa8:	422b      	tst	r3, r5
 8004faa:	d100      	bne.n	8004fae <HAL_RCC_OscConfig+0x4b2>
 8004fac:	e5fa      	b.n	8004ba4 <HAL_RCC_OscConfig+0xa8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fae:	f7ff f8d5 	bl	800415c <HAL_GetTick>
 8004fb2:	1b80      	subs	r0, r0, r6
 8004fb4:	2802      	cmp	r0, #2
 8004fb6:	d9f6      	bls.n	8004fa6 <HAL_RCC_OscConfig+0x4aa>
 8004fb8:	e617      	b.n	8004bea <HAL_RCC_OscConfig+0xee>
        return HAL_ERROR;
 8004fba:	0018      	movs	r0, r3
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004fbc:	2b01      	cmp	r3, #1
 8004fbe:	d100      	bne.n	8004fc2 <HAL_RCC_OscConfig+0x4c6>
 8004fc0:	e5a2      	b.n	8004b08 <HAL_RCC_OscConfig+0xc>
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fc2:	2280      	movs	r2, #128	; 0x80
        pll_config = RCC->CFGR;
 8004fc4:	68e3      	ldr	r3, [r4, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fc6:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8004fc8:	0252      	lsls	r2, r2, #9
 8004fca:	401a      	ands	r2, r3
        return HAL_ERROR;
 8004fcc:	2001      	movs	r0, #1
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fce:	428a      	cmp	r2, r1
 8004fd0:	d000      	beq.n	8004fd4 <HAL_RCC_OscConfig+0x4d8>
 8004fd2:	e599      	b.n	8004b08 <HAL_RCC_OscConfig+0xc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004fd4:	22f0      	movs	r2, #240	; 0xf0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fd6:	6b29      	ldr	r1, [r5, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004fd8:	0392      	lsls	r2, r2, #14
 8004fda:	401a      	ands	r2, r3
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fdc:	428a      	cmp	r2, r1
 8004fde:	d000      	beq.n	8004fe2 <HAL_RCC_OscConfig+0x4e6>
 8004fe0:	e592      	b.n	8004b08 <HAL_RCC_OscConfig+0xc>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8004fe2:	20c0      	movs	r0, #192	; 0xc0
 8004fe4:	0400      	lsls	r0, r0, #16
 8004fe6:	4003      	ands	r3, r0
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004fe8:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8004fea:	1a18      	subs	r0, r3, r0
 8004fec:	1e43      	subs	r3, r0, #1
 8004fee:	4198      	sbcs	r0, r3
    return HAL_ERROR;
 8004ff0:	b2c0      	uxtb	r0, r0
 8004ff2:	e589      	b.n	8004b08 <HAL_RCC_OscConfig+0xc>
 8004ff4:	fffffeff 	.word	0xfffffeff
 8004ff8:	fffffbff 	.word	0xfffffbff
 8004ffc:	00001388 	.word	0x00001388
 8005000:	efffffff 	.word	0xefffffff
 8005004:	40010000 	.word	0x40010000
 8005008:	ffffdfff 	.word	0xffffdfff
 800500c:	feffffff 	.word	0xfeffffff
 8005010:	ff02ffff 	.word	0xff02ffff

08005014 <HAL_RCC_ClockConfig>:
{
 8005014:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005016:	1e06      	subs	r6, r0, #0
 8005018:	9101      	str	r1, [sp, #4]
  if(RCC_ClkInitStruct == NULL)
 800501a:	d101      	bne.n	8005020 <HAL_RCC_ClockConfig+0xc>
    return HAL_ERROR;
 800501c:	2001      	movs	r0, #1
}
 800501e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005020:	2201      	movs	r2, #1
 8005022:	4c51      	ldr	r4, [pc, #324]	; (8005168 <HAL_RCC_ClockConfig+0x154>)
 8005024:	9901      	ldr	r1, [sp, #4]
 8005026:	6823      	ldr	r3, [r4, #0]
 8005028:	4013      	ands	r3, r2
 800502a:	428b      	cmp	r3, r1
 800502c:	d327      	bcc.n	800507e <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800502e:	6832      	ldr	r2, [r6, #0]
 8005030:	0793      	lsls	r3, r2, #30
 8005032:	d42f      	bmi.n	8005094 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005034:	07d3      	lsls	r3, r2, #31
 8005036:	d435      	bmi.n	80050a4 <HAL_RCC_ClockConfig+0x90>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005038:	2301      	movs	r3, #1
 800503a:	6822      	ldr	r2, [r4, #0]
 800503c:	9901      	ldr	r1, [sp, #4]
 800503e:	401a      	ands	r2, r3
 8005040:	428a      	cmp	r2, r1
 8005042:	d900      	bls.n	8005046 <HAL_RCC_ClockConfig+0x32>
 8005044:	e081      	b.n	800514a <HAL_RCC_ClockConfig+0x136>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005046:	6832      	ldr	r2, [r6, #0]
 8005048:	4c48      	ldr	r4, [pc, #288]	; (800516c <HAL_RCC_ClockConfig+0x158>)
 800504a:	0753      	lsls	r3, r2, #29
 800504c:	d500      	bpl.n	8005050 <HAL_RCC_ClockConfig+0x3c>
 800504e:	e084      	b.n	800515a <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005050:	0713      	lsls	r3, r2, #28
 8005052:	d506      	bpl.n	8005062 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005054:	68e2      	ldr	r2, [r4, #12]
 8005056:	6933      	ldr	r3, [r6, #16]
 8005058:	4945      	ldr	r1, [pc, #276]	; (8005170 <HAL_RCC_ClockConfig+0x15c>)
 800505a:	00db      	lsls	r3, r3, #3
 800505c:	400a      	ands	r2, r1
 800505e:	4313      	orrs	r3, r2
 8005060:	60e3      	str	r3, [r4, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005062:	f7ff fd0b 	bl	8004a7c <HAL_RCC_GetSysClockFreq>
 8005066:	68e3      	ldr	r3, [r4, #12]
 8005068:	4a42      	ldr	r2, [pc, #264]	; (8005174 <HAL_RCC_ClockConfig+0x160>)
 800506a:	061b      	lsls	r3, r3, #24
 800506c:	0f1b      	lsrs	r3, r3, #28
 800506e:	5cd3      	ldrb	r3, [r2, r3]
 8005070:	40d8      	lsrs	r0, r3
 8005072:	4b41      	ldr	r3, [pc, #260]	; (8005178 <HAL_RCC_ClockConfig+0x164>)
 8005074:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8005076:	2003      	movs	r0, #3
 8005078:	f008 fbc2 	bl	800d800 <HAL_InitTick>
 800507c:	e7cf      	b.n	800501e <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800507e:	6823      	ldr	r3, [r4, #0]
 8005080:	9901      	ldr	r1, [sp, #4]
 8005082:	4393      	bics	r3, r2
 8005084:	430b      	orrs	r3, r1
 8005086:	6023      	str	r3, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005088:	6823      	ldr	r3, [r4, #0]
 800508a:	4013      	ands	r3, r2
 800508c:	9a01      	ldr	r2, [sp, #4]
 800508e:	4293      	cmp	r3, r2
 8005090:	d1c4      	bne.n	800501c <HAL_RCC_ClockConfig+0x8>
 8005092:	e7cc      	b.n	800502e <HAL_RCC_ClockConfig+0x1a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005094:	20f0      	movs	r0, #240	; 0xf0
 8005096:	4935      	ldr	r1, [pc, #212]	; (800516c <HAL_RCC_ClockConfig+0x158>)
 8005098:	68cb      	ldr	r3, [r1, #12]
 800509a:	4383      	bics	r3, r0
 800509c:	68b0      	ldr	r0, [r6, #8]
 800509e:	4303      	orrs	r3, r0
 80050a0:	60cb      	str	r3, [r1, #12]
 80050a2:	e7c7      	b.n	8005034 <HAL_RCC_ClockConfig+0x20>
 80050a4:	4d31      	ldr	r5, [pc, #196]	; (800516c <HAL_RCC_ClockConfig+0x158>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050a6:	6872      	ldr	r2, [r6, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80050a8:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050aa:	2a02      	cmp	r2, #2
 80050ac:	d119      	bne.n	80050e2 <HAL_RCC_ClockConfig+0xce>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80050ae:	039b      	lsls	r3, r3, #14
 80050b0:	d5b4      	bpl.n	800501c <HAL_RCC_ClockConfig+0x8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80050b2:	2103      	movs	r1, #3
 80050b4:	68eb      	ldr	r3, [r5, #12]
 80050b6:	438b      	bics	r3, r1
 80050b8:	4313      	orrs	r3, r2
 80050ba:	60eb      	str	r3, [r5, #12]
    tickstart = HAL_GetTick();
 80050bc:	f7ff f84e 	bl	800415c <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050c0:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 80050c2:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050c4:	2b02      	cmp	r3, #2
 80050c6:	d119      	bne.n	80050fc <HAL_RCC_ClockConfig+0xe8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80050c8:	220c      	movs	r2, #12
 80050ca:	68eb      	ldr	r3, [r5, #12]
 80050cc:	4013      	ands	r3, r2
 80050ce:	2b08      	cmp	r3, #8
 80050d0:	d0b2      	beq.n	8005038 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050d2:	f7ff f843 	bl	800415c <HAL_GetTick>
 80050d6:	4b29      	ldr	r3, [pc, #164]	; (800517c <HAL_RCC_ClockConfig+0x168>)
 80050d8:	1bc0      	subs	r0, r0, r7
 80050da:	4298      	cmp	r0, r3
 80050dc:	d9f4      	bls.n	80050c8 <HAL_RCC_ClockConfig+0xb4>
          return HAL_TIMEOUT;
 80050de:	2003      	movs	r0, #3
 80050e0:	e79d      	b.n	800501e <HAL_RCC_ClockConfig+0xa>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80050e2:	2a03      	cmp	r2, #3
 80050e4:	d102      	bne.n	80050ec <HAL_RCC_ClockConfig+0xd8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80050e6:	019b      	lsls	r3, r3, #6
 80050e8:	d4e3      	bmi.n	80050b2 <HAL_RCC_ClockConfig+0x9e>
 80050ea:	e797      	b.n	800501c <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80050ec:	2a01      	cmp	r2, #1
 80050ee:	d102      	bne.n	80050f6 <HAL_RCC_ClockConfig+0xe2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80050f0:	075b      	lsls	r3, r3, #29
 80050f2:	d4de      	bmi.n	80050b2 <HAL_RCC_ClockConfig+0x9e>
 80050f4:	e792      	b.n	800501c <HAL_RCC_ClockConfig+0x8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80050f6:	059b      	lsls	r3, r3, #22
 80050f8:	d4db      	bmi.n	80050b2 <HAL_RCC_ClockConfig+0x9e>
 80050fa:	e78f      	b.n	800501c <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80050fc:	2b03      	cmp	r3, #3
 80050fe:	d10b      	bne.n	8005118 <HAL_RCC_ClockConfig+0x104>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005100:	220c      	movs	r2, #12
 8005102:	68eb      	ldr	r3, [r5, #12]
 8005104:	4013      	ands	r3, r2
 8005106:	4293      	cmp	r3, r2
 8005108:	d096      	beq.n	8005038 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800510a:	f7ff f827 	bl	800415c <HAL_GetTick>
 800510e:	4b1b      	ldr	r3, [pc, #108]	; (800517c <HAL_RCC_ClockConfig+0x168>)
 8005110:	1bc0      	subs	r0, r0, r7
 8005112:	4298      	cmp	r0, r3
 8005114:	d9f4      	bls.n	8005100 <HAL_RCC_ClockConfig+0xec>
 8005116:	e7e2      	b.n	80050de <HAL_RCC_ClockConfig+0xca>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005118:	2b01      	cmp	r3, #1
 800511a:	d010      	beq.n	800513e <HAL_RCC_ClockConfig+0x12a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800511c:	220c      	movs	r2, #12
 800511e:	68eb      	ldr	r3, [r5, #12]
 8005120:	4213      	tst	r3, r2
 8005122:	d089      	beq.n	8005038 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005124:	f7ff f81a 	bl	800415c <HAL_GetTick>
 8005128:	4b14      	ldr	r3, [pc, #80]	; (800517c <HAL_RCC_ClockConfig+0x168>)
 800512a:	1bc0      	subs	r0, r0, r7
 800512c:	4298      	cmp	r0, r3
 800512e:	d9f5      	bls.n	800511c <HAL_RCC_ClockConfig+0x108>
 8005130:	e7d5      	b.n	80050de <HAL_RCC_ClockConfig+0xca>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005132:	f7ff f813 	bl	800415c <HAL_GetTick>
 8005136:	4b11      	ldr	r3, [pc, #68]	; (800517c <HAL_RCC_ClockConfig+0x168>)
 8005138:	1bc0      	subs	r0, r0, r7
 800513a:	4298      	cmp	r0, r3
 800513c:	d8cf      	bhi.n	80050de <HAL_RCC_ClockConfig+0xca>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800513e:	220c      	movs	r2, #12
 8005140:	68eb      	ldr	r3, [r5, #12]
 8005142:	4013      	ands	r3, r2
 8005144:	2b04      	cmp	r3, #4
 8005146:	d1f4      	bne.n	8005132 <HAL_RCC_ClockConfig+0x11e>
 8005148:	e776      	b.n	8005038 <HAL_RCC_ClockConfig+0x24>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800514a:	6822      	ldr	r2, [r4, #0]
 800514c:	439a      	bics	r2, r3
 800514e:	6022      	str	r2, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005150:	6822      	ldr	r2, [r4, #0]
 8005152:	421a      	tst	r2, r3
 8005154:	d100      	bne.n	8005158 <HAL_RCC_ClockConfig+0x144>
 8005156:	e776      	b.n	8005046 <HAL_RCC_ClockConfig+0x32>
 8005158:	e760      	b.n	800501c <HAL_RCC_ClockConfig+0x8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800515a:	68e3      	ldr	r3, [r4, #12]
 800515c:	4908      	ldr	r1, [pc, #32]	; (8005180 <HAL_RCC_ClockConfig+0x16c>)
 800515e:	400b      	ands	r3, r1
 8005160:	68f1      	ldr	r1, [r6, #12]
 8005162:	430b      	orrs	r3, r1
 8005164:	60e3      	str	r3, [r4, #12]
 8005166:	e773      	b.n	8005050 <HAL_RCC_ClockConfig+0x3c>
 8005168:	40022000 	.word	0x40022000
 800516c:	40021000 	.word	0x40021000
 8005170:	ffffc7ff 	.word	0xffffc7ff
 8005174:	0800ec19 	.word	0x0800ec19
 8005178:	20000044 	.word	0x20000044
 800517c:	00001388 	.word	0x00001388
 8005180:	fffff8ff 	.word	0xfffff8ff

08005184 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005184:	4b04      	ldr	r3, [pc, #16]	; (8005198 <HAL_RCC_GetPCLK1Freq+0x14>)
 8005186:	4a05      	ldr	r2, [pc, #20]	; (800519c <HAL_RCC_GetPCLK1Freq+0x18>)
 8005188:	68db      	ldr	r3, [r3, #12]
 800518a:	055b      	lsls	r3, r3, #21
 800518c:	0f5b      	lsrs	r3, r3, #29
 800518e:	5cd3      	ldrb	r3, [r2, r3]
 8005190:	4a03      	ldr	r2, [pc, #12]	; (80051a0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8005192:	6810      	ldr	r0, [r2, #0]
 8005194:	40d8      	lsrs	r0, r3
}
 8005196:	4770      	bx	lr
 8005198:	40021000 	.word	0x40021000
 800519c:	0800ec29 	.word	0x0800ec29
 80051a0:	20000044 	.word	0x20000044

080051a4 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80051a4:	4b04      	ldr	r3, [pc, #16]	; (80051b8 <HAL_RCC_GetPCLK2Freq+0x14>)
 80051a6:	4a05      	ldr	r2, [pc, #20]	; (80051bc <HAL_RCC_GetPCLK2Freq+0x18>)
 80051a8:	68db      	ldr	r3, [r3, #12]
 80051aa:	049b      	lsls	r3, r3, #18
 80051ac:	0f5b      	lsrs	r3, r3, #29
 80051ae:	5cd3      	ldrb	r3, [r2, r3]
 80051b0:	4a03      	ldr	r2, [pc, #12]	; (80051c0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80051b2:	6810      	ldr	r0, [r2, #0]
 80051b4:	40d8      	lsrs	r0, r3
}
 80051b6:	4770      	bx	lr
 80051b8:	40021000 	.word	0x40021000
 80051bc:	0800ec29 	.word	0x0800ec29
 80051c0:	20000044 	.word	0x20000044

080051c4 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80051c4:	6803      	ldr	r3, [r0, #0]
{
 80051c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80051c8:	0005      	movs	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80051ca:	069b      	lsls	r3, r3, #26
 80051cc:	d53d      	bpl.n	800524a <HAL_RCCEx_PeriphCLKConfig+0x86>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051ce:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 80051d0:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051d2:	4c5f      	ldr	r4, [pc, #380]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80051d4:	055b      	lsls	r3, r3, #21
 80051d6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    FlagStatus       pwrclkchanged = RESET;
 80051d8:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051da:	421a      	tst	r2, r3
 80051dc:	d104      	bne.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x24>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051de:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80051e0:	4313      	orrs	r3, r2
 80051e2:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 80051e4:	2301      	movs	r3, #1
 80051e6:	9300      	str	r3, [sp, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051e8:	2780      	movs	r7, #128	; 0x80
 80051ea:	4e5a      	ldr	r6, [pc, #360]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80051ec:	007f      	lsls	r7, r7, #1
 80051ee:	6833      	ldr	r3, [r6, #0]
 80051f0:	423b      	tst	r3, r7
 80051f2:	d06c      	beq.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x10a>
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80051f4:	6868      	ldr	r0, [r5, #4]
 80051f6:	23c0      	movs	r3, #192	; 0xc0
 80051f8:	26c0      	movs	r6, #192	; 0xc0
 80051fa:	0001      	movs	r1, r0
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80051fc:	6822      	ldr	r2, [r4, #0]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80051fe:	03b6      	lsls	r6, r6, #14
 8005200:	029b      	lsls	r3, r3, #10
 8005202:	4030      	ands	r0, r6
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8005204:	4032      	ands	r2, r6
 8005206:	4019      	ands	r1, r3
 8005208:	001e      	movs	r6, r3
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800520a:	4290      	cmp	r0, r2
 800520c:	d000      	beq.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x4c>
 800520e:	e06f      	b.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8005210:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005212:	4033      	ands	r3, r6

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8005214:	d000      	beq.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8005216:	e074      	b.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x13e>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005218:	6869      	ldr	r1, [r5, #4]
 800521a:	23c0      	movs	r3, #192	; 0xc0
 800521c:	000a      	movs	r2, r1
 800521e:	029b      	lsls	r3, r3, #10
 8005220:	401a      	ands	r2, r3
 8005222:	429a      	cmp	r2, r3
 8005224:	d107      	bne.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8005226:	6823      	ldr	r3, [r4, #0]
 8005228:	484b      	ldr	r0, [pc, #300]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 800522a:	4003      	ands	r3, r0
 800522c:	20c0      	movs	r0, #192	; 0xc0
 800522e:	0380      	lsls	r0, r0, #14
 8005230:	4001      	ands	r1, r0
 8005232:	430b      	orrs	r3, r1
 8005234:	6023      	str	r3, [r4, #0]
 8005236:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005238:	431a      	orrs	r2, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800523a:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800523c:	6522      	str	r2, [r4, #80]	; 0x50
    if(pwrclkchanged == SET)
 800523e:	2b01      	cmp	r3, #1
 8005240:	d103      	bne.n	800524a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005242:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005244:	4a45      	ldr	r2, [pc, #276]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8005246:	4013      	ands	r3, r2
 8005248:	63a3      	str	r3, [r4, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800524a:	682b      	ldr	r3, [r5, #0]
 800524c:	07da      	lsls	r2, r3, #31
 800524e:	d506      	bpl.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005250:	2003      	movs	r0, #3
 8005252:	493f      	ldr	r1, [pc, #252]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8005254:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8005256:	4382      	bics	r2, r0
 8005258:	68a8      	ldr	r0, [r5, #8]
 800525a:	4302      	orrs	r2, r0
 800525c:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800525e:	079a      	lsls	r2, r3, #30
 8005260:	d506      	bpl.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0xac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005262:	200c      	movs	r0, #12
 8005264:	493a      	ldr	r1, [pc, #232]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8005266:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8005268:	4382      	bics	r2, r0
 800526a:	68e8      	ldr	r0, [r5, #12]
 800526c:	4302      	orrs	r2, r0
 800526e:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005270:	075a      	lsls	r2, r3, #29
 8005272:	d506      	bpl.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0xbe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005274:	4936      	ldr	r1, [pc, #216]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8005276:	483a      	ldr	r0, [pc, #232]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x19c>)
 8005278:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800527a:	4002      	ands	r2, r0
 800527c:	6928      	ldr	r0, [r5, #16]
 800527e:	4302      	orrs	r2, r0
 8005280:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005282:	071a      	lsls	r2, r3, #28
 8005284:	d506      	bpl.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0xd0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005286:	4932      	ldr	r1, [pc, #200]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8005288:	4836      	ldr	r0, [pc, #216]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 800528a:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800528c:	4002      	ands	r2, r0
 800528e:	6968      	ldr	r0, [r5, #20]
 8005290:	4302      	orrs	r2, r0
 8005292:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005294:	05da      	lsls	r2, r3, #23
 8005296:	d506      	bpl.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005298:	492d      	ldr	r1, [pc, #180]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 800529a:	4833      	ldr	r0, [pc, #204]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800529c:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800529e:	4002      	ands	r2, r0
 80052a0:	69a8      	ldr	r0, [r5, #24]
 80052a2:	4302      	orrs	r2, r0
 80052a4:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80052a6:	065a      	lsls	r2, r3, #25
 80052a8:	d506      	bpl.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80052aa:	4929      	ldr	r1, [pc, #164]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80052ac:	482f      	ldr	r0, [pc, #188]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80052ae:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80052b0:	4002      	ands	r2, r0
 80052b2:	6a28      	ldr	r0, [r5, #32]
 80052b4:	4302      	orrs	r2, r0
 80052b6:	64ca      	str	r2, [r1, #76]	; 0x4c
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
  }

  return HAL_OK;
 80052b8:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80052ba:	061b      	lsls	r3, r3, #24
 80052bc:	d517      	bpl.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0x12a>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80052be:	4a24      	ldr	r2, [pc, #144]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80052c0:	492b      	ldr	r1, [pc, #172]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80052c2:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80052c4:	400b      	ands	r3, r1
 80052c6:	69e9      	ldr	r1, [r5, #28]
 80052c8:	430b      	orrs	r3, r1
 80052ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 80052cc:	e00f      	b.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0x12a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80052ce:	6833      	ldr	r3, [r6, #0]
 80052d0:	433b      	orrs	r3, r7
 80052d2:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80052d4:	f7fe ff42 	bl	800415c <HAL_GetTick>
 80052d8:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052da:	6833      	ldr	r3, [r6, #0]
 80052dc:	423b      	tst	r3, r7
 80052de:	d189      	bne.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052e0:	f7fe ff3c 	bl	800415c <HAL_GetTick>
 80052e4:	9b01      	ldr	r3, [sp, #4]
 80052e6:	1ac0      	subs	r0, r0, r3
 80052e8:	2864      	cmp	r0, #100	; 0x64
 80052ea:	d9f6      	bls.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x116>
          return HAL_TIMEOUT;
 80052ec:	2003      	movs	r0, #3
}
 80052ee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80052f0:	4299      	cmp	r1, r3
 80052f2:	d000      	beq.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x132>
 80052f4:	e78c      	b.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x4c>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80052f6:	6823      	ldr	r3, [r4, #0]
          return HAL_ERROR;
 80052f8:	2001      	movs	r0, #1
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80052fa:	039b      	lsls	r3, r3, #14
 80052fc:	d400      	bmi.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80052fe:	e787      	b.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x4c>
 8005300:	e7f5      	b.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0x12a>
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8005302:	428b      	cmp	r3, r1
 8005304:	d100      	bne.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0x144>
 8005306:	e787      	b.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x54>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005308:	682b      	ldr	r3, [r5, #0]
 800530a:	069b      	lsls	r3, r3, #26
 800530c:	d400      	bmi.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800530e:	e783      	b.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x54>
      __HAL_RCC_BACKUPRESET_FORCE();
 8005310:	2280      	movs	r2, #128	; 0x80
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8005312:	6d21      	ldr	r1, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_FORCE();
 8005314:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8005316:	0312      	lsls	r2, r2, #12
 8005318:	4302      	orrs	r2, r0
 800531a:	6522      	str	r2, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800531c:	6d22      	ldr	r2, [r4, #80]	; 0x50
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800531e:	4b12      	ldr	r3, [pc, #72]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005320:	4814      	ldr	r0, [pc, #80]	; (8005374 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8005322:	400b      	ands	r3, r1
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005324:	4002      	ands	r2, r0
 8005326:	6522      	str	r2, [r4, #80]	; 0x50
      RCC->CSR = temp_reg;
 8005328:	6523      	str	r3, [r4, #80]	; 0x50
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800532a:	05cb      	lsls	r3, r1, #23
 800532c:	d400      	bmi.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800532e:	e773      	b.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x54>
        tickstart = HAL_GetTick();
 8005330:	f7fe ff14 	bl	800415c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005334:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 8005336:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005338:	00bf      	lsls	r7, r7, #2
 800533a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800533c:	423b      	tst	r3, r7
 800533e:	d000      	beq.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x17e>
 8005340:	e76a      	b.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x54>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005342:	f7fe ff0b 	bl	800415c <HAL_GetTick>
 8005346:	4b0c      	ldr	r3, [pc, #48]	; (8005378 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005348:	1b80      	subs	r0, r0, r6
 800534a:	4298      	cmp	r0, r3
 800534c:	d9f5      	bls.n	800533a <HAL_RCCEx_PeriphCLKConfig+0x176>
 800534e:	e7cd      	b.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x128>
 8005350:	40021000 	.word	0x40021000
 8005354:	40007000 	.word	0x40007000
 8005358:	ffcfffff 	.word	0xffcfffff
 800535c:	efffffff 	.word	0xefffffff
 8005360:	fffff3ff 	.word	0xfffff3ff
 8005364:	ffffcfff 	.word	0xffffcfff
 8005368:	fffcffff 	.word	0xfffcffff
 800536c:	fbffffff 	.word	0xfbffffff
 8005370:	fff3ffff 	.word	0xfff3ffff
 8005374:	fff7ffff 	.word	0xfff7ffff
 8005378:	00001388 	.word	0x00001388

0800537c <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 800537c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800537e:	2702      	movs	r7, #2

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005380:	1c45      	adds	r5, r0, #1
 8005382:	7feb      	ldrb	r3, [r5, #31]
{
 8005384:	0004      	movs	r4, r0
  __HAL_LOCK(hrtc);
 8005386:	0038      	movs	r0, r7
 8005388:	2b01      	cmp	r3, #1
 800538a:	d024      	beq.n	80053d6 <HAL_RTC_DeactivateAlarm+0x5a>
 800538c:	2301      	movs	r3, #1

  hrtc->State = HAL_RTC_STATE_BUSY;

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800538e:	22ca      	movs	r2, #202	; 0xca
  __HAL_LOCK(hrtc);
 8005390:	77eb      	strb	r3, [r5, #31]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005392:	6823      	ldr	r3, [r4, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005394:	19e6      	adds	r6, r4, r7
 8005396:	77f7      	strb	r7, [r6, #31]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005398:	625a      	str	r2, [r3, #36]	; 0x24
 800539a:	3a77      	subs	r2, #119	; 0x77
 800539c:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 800539e:	32ad      	adds	r2, #173	; 0xad
 80053a0:	4291      	cmp	r1, r2
 80053a2:	d128      	bne.n	80053f6 <HAL_RTC_DeactivateAlarm+0x7a>
  {
    /* AlarmA */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80053a4:	689a      	ldr	r2, [r3, #8]
 80053a6:	4921      	ldr	r1, [pc, #132]	; (800542c <HAL_RTC_DeactivateAlarm+0xb0>)
 80053a8:	400a      	ands	r2, r1
 80053aa:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 80053ac:	689a      	ldr	r2, [r3, #8]
 80053ae:	4920      	ldr	r1, [pc, #128]	; (8005430 <HAL_RTC_DeactivateAlarm+0xb4>)
 80053b0:	400a      	ands	r2, r1
 80053b2:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 80053b4:	f7fe fed2 	bl	800415c <HAL_GetTick>

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80053b8:	2301      	movs	r3, #1
    tickstart = HAL_GetTick();
 80053ba:	9000      	str	r0, [sp, #0]
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80053bc:	9301      	str	r3, [sp, #4]
 80053be:	6823      	ldr	r3, [r4, #0]
 80053c0:	68df      	ldr	r7, [r3, #12]
 80053c2:	9b01      	ldr	r3, [sp, #4]
 80053c4:	401f      	ands	r7, r3
 80053c6:	d007      	beq.n	80053d8 <HAL_RTC_DeactivateAlarm+0x5c>
        return HAL_TIMEOUT;
      }
    }
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80053c8:	22ff      	movs	r2, #255	; 0xff
 80053ca:	6823      	ldr	r3, [r4, #0]

  hrtc->State = HAL_RTC_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80053cc:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80053ce:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 80053d0:	2301      	movs	r3, #1
 80053d2:	77f3      	strb	r3, [r6, #31]
  __HAL_UNLOCK(hrtc);
 80053d4:	77e8      	strb	r0, [r5, #31]

  return HAL_OK;
}
 80053d6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80053d8:	f7fe fec0 	bl	800415c <HAL_GetTick>
 80053dc:	9b00      	ldr	r3, [sp, #0]
 80053de:	1ac0      	subs	r0, r0, r3
 80053e0:	23fa      	movs	r3, #250	; 0xfa
 80053e2:	009b      	lsls	r3, r3, #2
 80053e4:	4298      	cmp	r0, r3
 80053e6:	d9ea      	bls.n	80053be <HAL_RTC_DeactivateAlarm+0x42>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80053e8:	22ff      	movs	r2, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80053ea:	2003      	movs	r0, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80053ec:	6823      	ldr	r3, [r4, #0]
 80053ee:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80053f0:	77f0      	strb	r0, [r6, #31]
        __HAL_UNLOCK(hrtc);
 80053f2:	77ef      	strb	r7, [r5, #31]
        return HAL_TIMEOUT;
 80053f4:	e7ef      	b.n	80053d6 <HAL_RTC_DeactivateAlarm+0x5a>
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80053f6:	689a      	ldr	r2, [r3, #8]
 80053f8:	490e      	ldr	r1, [pc, #56]	; (8005434 <HAL_RTC_DeactivateAlarm+0xb8>)
 80053fa:	400a      	ands	r2, r1
 80053fc:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 80053fe:	689a      	ldr	r2, [r3, #8]
 8005400:	490d      	ldr	r1, [pc, #52]	; (8005438 <HAL_RTC_DeactivateAlarm+0xbc>)
 8005402:	400a      	ands	r2, r1
 8005404:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8005406:	f7fe fea9 	bl	800415c <HAL_GetTick>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800540a:	9701      	str	r7, [sp, #4]
    tickstart = HAL_GetTick();
 800540c:	9000      	str	r0, [sp, #0]
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800540e:	6823      	ldr	r3, [r4, #0]
 8005410:	68df      	ldr	r7, [r3, #12]
 8005412:	9b01      	ldr	r3, [sp, #4]
 8005414:	401f      	ands	r7, r3
 8005416:	d1d7      	bne.n	80053c8 <HAL_RTC_DeactivateAlarm+0x4c>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005418:	f7fe fea0 	bl	800415c <HAL_GetTick>
 800541c:	9b00      	ldr	r3, [sp, #0]
 800541e:	1ac0      	subs	r0, r0, r3
 8005420:	23fa      	movs	r3, #250	; 0xfa
 8005422:	009b      	lsls	r3, r3, #2
 8005424:	4298      	cmp	r0, r3
 8005426:	d9f2      	bls.n	800540e <HAL_RTC_DeactivateAlarm+0x92>
 8005428:	e7de      	b.n	80053e8 <HAL_RTC_DeactivateAlarm+0x6c>
 800542a:	46c0      	nop			; (mov r8, r8)
 800542c:	fffffeff 	.word	0xfffffeff
 8005430:	ffffefff 	.word	0xffffefff
 8005434:	fffffdff 	.word	0xfffffdff
 8005438:	ffffdfff 	.word	0xffffdfff

0800543c <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800543c:	21a0      	movs	r1, #160	; 0xa0
 800543e:	6802      	ldr	r2, [r0, #0]
{
 8005440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005442:	68d3      	ldr	r3, [r2, #12]
{
 8005444:	0004      	movs	r4, r0
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005446:	438b      	bics	r3, r1
 8005448:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 800544a:	f7fe fe87 	bl	800415c <HAL_GetTick>

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800544e:	27fa      	movs	r7, #250	; 0xfa
  tickstart = HAL_GetTick();
 8005450:	0006      	movs	r6, r0
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005452:	2520      	movs	r5, #32
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005454:	00bf      	lsls	r7, r7, #2
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005456:	6823      	ldr	r3, [r4, #0]
 8005458:	68db      	ldr	r3, [r3, #12]
 800545a:	422b      	tst	r3, r5
 800545c:	d001      	beq.n	8005462 <HAL_RTC_WaitForSynchro+0x26>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 800545e:	2000      	movs	r0, #0
}
 8005460:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005462:	f7fe fe7b 	bl	800415c <HAL_GetTick>
 8005466:	1b80      	subs	r0, r0, r6
 8005468:	42b8      	cmp	r0, r7
 800546a:	d9f4      	bls.n	8005456 <HAL_RTC_WaitForSynchro+0x1a>
      return HAL_TIMEOUT;
 800546c:	2003      	movs	r0, #3
 800546e:	e7f7      	b.n	8005460 <HAL_RTC_WaitForSynchro+0x24>

08005470 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005472:	2440      	movs	r4, #64	; 0x40
 8005474:	6803      	ldr	r3, [r0, #0]
{
 8005476:	0005      	movs	r5, r0
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005478:	68da      	ldr	r2, [r3, #12]
 800547a:	4222      	tst	r2, r4
 800547c:	d001      	beq.n	8005482 <RTC_EnterInitMode+0x12>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 800547e:	2000      	movs	r0, #0
}
 8005480:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005482:	2201      	movs	r2, #1
 8005484:	4252      	negs	r2, r2
 8005486:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8005488:	f7fe fe68 	bl	800415c <HAL_GetTick>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800548c:	27fa      	movs	r7, #250	; 0xfa
    tickstart = HAL_GetTick();
 800548e:	0006      	movs	r6, r0
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005490:	00bf      	lsls	r7, r7, #2
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005492:	682b      	ldr	r3, [r5, #0]
 8005494:	68db      	ldr	r3, [r3, #12]
 8005496:	4223      	tst	r3, r4
 8005498:	d1f1      	bne.n	800547e <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800549a:	f7fe fe5f 	bl	800415c <HAL_GetTick>
 800549e:	1b80      	subs	r0, r0, r6
 80054a0:	42b8      	cmp	r0, r7
 80054a2:	d9f6      	bls.n	8005492 <RTC_EnterInitMode+0x22>
        return HAL_TIMEOUT;
 80054a4:	2003      	movs	r0, #3
 80054a6:	e7eb      	b.n	8005480 <RTC_EnterInitMode+0x10>

080054a8 <HAL_RTC_Init>:
{
 80054a8:	b570      	push	{r4, r5, r6, lr}
 80054aa:	0004      	movs	r4, r0
    return HAL_ERROR;
 80054ac:	2501      	movs	r5, #1
  if (hrtc == NULL)
 80054ae:	2800      	cmp	r0, #0
 80054b0:	d01a      	beq.n	80054e8 <HAL_RTC_Init+0x40>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80054b2:	1c86      	adds	r6, r0, #2
 80054b4:	7ff3      	ldrb	r3, [r6, #31]
 80054b6:	b2db      	uxtb	r3, r3
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d103      	bne.n	80054c4 <HAL_RTC_Init+0x1c>
    hrtc->Lock = HAL_UNLOCKED;
 80054bc:	1942      	adds	r2, r0, r5
 80054be:	77d3      	strb	r3, [r2, #31]
    HAL_RTC_MspInit(hrtc);
 80054c0:	f008 f9c2 	bl	800d848 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 80054c4:	2302      	movs	r3, #2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80054c6:	22ca      	movs	r2, #202	; 0xca
  hrtc->State = HAL_RTC_STATE_BUSY;
 80054c8:	77f3      	strb	r3, [r6, #31]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80054ca:	6823      	ldr	r3, [r4, #0]
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80054cc:	0020      	movs	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80054ce:	625a      	str	r2, [r3, #36]	; 0x24
 80054d0:	3a77      	subs	r2, #119	; 0x77
 80054d2:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80054d4:	f7ff ffcc 	bl	8005470 <RTC_EnterInitMode>
 80054d8:	6823      	ldr	r3, [r4, #0]
 80054da:	1e05      	subs	r5, r0, #0
 80054dc:	d006      	beq.n	80054ec <HAL_RTC_Init+0x44>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80054de:	22ff      	movs	r2, #255	; 0xff
 80054e0:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80054e2:	2304      	movs	r3, #4
 80054e4:	77f3      	strb	r3, [r6, #31]
        return HAL_ERROR;
 80054e6:	2501      	movs	r5, #1
}
 80054e8:	0028      	movs	r0, r5
 80054ea:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80054ec:	689a      	ldr	r2, [r3, #8]
 80054ee:	491b      	ldr	r1, [pc, #108]	; (800555c <HAL_RTC_Init+0xb4>)
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80054f0:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80054f2:	400a      	ands	r2, r1
 80054f4:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80054f6:	6862      	ldr	r2, [r4, #4]
 80054f8:	6899      	ldr	r1, [r3, #8]
 80054fa:	4302      	orrs	r2, r0
 80054fc:	69a0      	ldr	r0, [r4, #24]
 80054fe:	4302      	orrs	r2, r0
 8005500:	430a      	orrs	r2, r1
 8005502:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005504:	68e2      	ldr	r2, [r4, #12]
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005506:	6960      	ldr	r0, [r4, #20]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005508:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800550a:	68a2      	ldr	r2, [r4, #8]
 800550c:	6919      	ldr	r1, [r3, #16]
 800550e:	0412      	lsls	r2, r2, #16
 8005510:	430a      	orrs	r2, r1
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8005512:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8005514:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8005516:	68da      	ldr	r2, [r3, #12]
 8005518:	438a      	bics	r2, r1
 800551a:	60da      	str	r2, [r3, #12]
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800551c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800551e:	397d      	subs	r1, #125	; 0x7d
 8005520:	438a      	bics	r2, r1
 8005522:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005524:	69e2      	ldr	r2, [r4, #28]
 8005526:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005528:	4302      	orrs	r2, r0
 800552a:	430a      	orrs	r2, r1
 800552c:	64da      	str	r2, [r3, #76]	; 0x4c
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800552e:	689b      	ldr	r3, [r3, #8]
 8005530:	069b      	lsls	r3, r3, #26
 8005532:	d40c      	bmi.n	800554e <HAL_RTC_Init+0xa6>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005534:	0020      	movs	r0, r4
 8005536:	f7ff ff81 	bl	800543c <HAL_RTC_WaitForSynchro>
 800553a:	2800      	cmp	r0, #0
 800553c:	d007      	beq.n	800554e <HAL_RTC_Init+0xa6>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800553e:	22ff      	movs	r2, #255	; 0xff
 8005540:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(hrtc);
 8005542:	3401      	adds	r4, #1
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005544:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005546:	2304      	movs	r3, #4
 8005548:	77f3      	strb	r3, [r6, #31]
        __HAL_UNLOCK(hrtc);
 800554a:	77e5      	strb	r5, [r4, #31]
 800554c:	e7cb      	b.n	80054e6 <HAL_RTC_Init+0x3e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800554e:	22ff      	movs	r2, #255	; 0xff
 8005550:	6823      	ldr	r3, [r4, #0]
 8005552:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8005554:	2301      	movs	r3, #1
 8005556:	77f3      	strb	r3, [r6, #31]
    return HAL_OK;
 8005558:	e7c6      	b.n	80054e8 <HAL_RTC_Init+0x40>
 800555a:	46c0      	nop			; (mov r8, r8)
 800555c:	ff8fffbf 	.word	0xff8fffbf

08005560 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8005560:	2300      	movs	r3, #0
  uint8_t Param = Value;

  while (Param >= 10U)
 8005562:	2809      	cmp	r0, #9
 8005564:	d803      	bhi.n	800556e <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    Param -= 10U;
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8005566:	011b      	lsls	r3, r3, #4
 8005568:	4318      	orrs	r0, r3
 800556a:	b2c0      	uxtb	r0, r0
}
 800556c:	4770      	bx	lr
    Param -= 10U;
 800556e:	380a      	subs	r0, #10
    bcdhigh++;
 8005570:	3301      	adds	r3, #1
    Param -= 10U;
 8005572:	b2c0      	uxtb	r0, r0
 8005574:	e7f5      	b.n	8005562 <RTC_ByteToBcd2+0x2>
	...

08005578 <HAL_RTC_SetTime>:
{
 8005578:	2302      	movs	r3, #2
 800557a:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 800557c:	1c47      	adds	r7, r0, #1
{
 800557e:	000c      	movs	r4, r1
  __HAL_LOCK(hrtc);
 8005580:	7ff9      	ldrb	r1, [r7, #31]
{
 8005582:	b085      	sub	sp, #20
 8005584:	0005      	movs	r5, r0
  __HAL_LOCK(hrtc);
 8005586:	001e      	movs	r6, r3
 8005588:	2901      	cmp	r1, #1
 800558a:	d037      	beq.n	80055fc <HAL_RTC_SetTime+0x84>
 800558c:	2101      	movs	r1, #1
 800558e:	77f9      	strb	r1, [r7, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005590:	18c1      	adds	r1, r0, r3
 8005592:	77cb      	strb	r3, [r1, #31]
 8005594:	9101      	str	r1, [sp, #4]
 8005596:	2140      	movs	r1, #64	; 0x40
 8005598:	6806      	ldr	r6, [r0, #0]
 800559a:	7863      	ldrb	r3, [r4, #1]
 800559c:	7820      	ldrb	r0, [r4, #0]
 800559e:	9302      	str	r3, [sp, #8]
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80055a0:	68b3      	ldr	r3, [r6, #8]
 80055a2:	400b      	ands	r3, r1
  if (Format == RTC_FORMAT_BIN)
 80055a4:	2a00      	cmp	r2, #0
 80055a6:	d12c      	bne.n	8005602 <HAL_RTC_SetTime+0x8a>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d100      	bne.n	80055ae <HAL_RTC_SetTime+0x36>
      sTime->TimeFormat = 0x00U;
 80055ac:	70e3      	strb	r3, [r4, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80055ae:	f7ff ffd7 	bl	8005560 <RTC_ByteToBcd2>
 80055b2:	9003      	str	r0, [sp, #12]
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80055b4:	9802      	ldr	r0, [sp, #8]
 80055b6:	f7ff ffd3 	bl	8005560 <RTC_ByteToBcd2>
 80055ba:	9002      	str	r0, [sp, #8]
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80055bc:	78a0      	ldrb	r0, [r4, #2]
 80055be:	f7ff ffcf 	bl	8005560 <RTC_ByteToBcd2>
 80055c2:	0003      	movs	r3, r0
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80055c4:	78e0      	ldrb	r0, [r4, #3]
 80055c6:	0400      	lsls	r0, r0, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80055c8:	4318      	orrs	r0, r3
 80055ca:	9b03      	ldr	r3, [sp, #12]
 80055cc:	041b      	lsls	r3, r3, #16
 80055ce:	4318      	orrs	r0, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80055d0:	9b02      	ldr	r3, [sp, #8]
 80055d2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80055d4:	4318      	orrs	r0, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80055d6:	23ca      	movs	r3, #202	; 0xca
 80055d8:	6273      	str	r3, [r6, #36]	; 0x24
 80055da:	3b77      	subs	r3, #119	; 0x77
 80055dc:	6273      	str	r3, [r6, #36]	; 0x24
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80055de:	9002      	str	r0, [sp, #8]
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80055e0:	0028      	movs	r0, r5
 80055e2:	f7ff ff45 	bl	8005470 <RTC_EnterInitMode>
 80055e6:	682b      	ldr	r3, [r5, #0]
 80055e8:	1e06      	subs	r6, r0, #0
 80055ea:	d016      	beq.n	800561a <HAL_RTC_SetTime+0xa2>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80055ec:	22ff      	movs	r2, #255	; 0xff
 80055ee:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80055f0:	2304      	movs	r3, #4
 80055f2:	9a01      	ldr	r2, [sp, #4]
 80055f4:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 80055f6:	2300      	movs	r3, #0
 80055f8:	77fb      	strb	r3, [r7, #31]
        return HAL_ERROR;
 80055fa:	2601      	movs	r6, #1
}
 80055fc:	0030      	movs	r0, r6
 80055fe:	b005      	add	sp, #20
 8005600:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005602:	2b00      	cmp	r3, #0
 8005604:	d100      	bne.n	8005608 <HAL_RTC_SetTime+0x90>
      sTime->TimeFormat = 0x00U;
 8005606:	70e3      	strb	r3, [r4, #3]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8005608:	9b02      	ldr	r3, [sp, #8]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800560a:	0400      	lsls	r0, r0, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800560c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800560e:	4318      	orrs	r0, r3
              ((uint32_t)sTime->Seconds) | \
 8005610:	78a3      	ldrb	r3, [r4, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8005612:	4318      	orrs	r0, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8005614:	78e3      	ldrb	r3, [r4, #3]
 8005616:	041b      	lsls	r3, r3, #16
 8005618:	e7dc      	b.n	80055d4 <HAL_RTC_SetTime+0x5c>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800561a:	4815      	ldr	r0, [pc, #84]	; (8005670 <HAL_RTC_SetTime+0xf8>)
 800561c:	9a02      	ldr	r2, [sp, #8]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800561e:	4915      	ldr	r1, [pc, #84]	; (8005674 <HAL_RTC_SetTime+0xfc>)
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005620:	4002      	ands	r2, r0
 8005622:	601a      	str	r2, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8005624:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005626:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8005628:	400a      	ands	r2, r1
 800562a:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800562c:	68e2      	ldr	r2, [r4, #12]
 800562e:	6899      	ldr	r1, [r3, #8]
 8005630:	4302      	orrs	r2, r0
 8005632:	430a      	orrs	r2, r1
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8005634:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005636:	609a      	str	r2, [r3, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8005638:	68da      	ldr	r2, [r3, #12]
 800563a:	438a      	bics	r2, r1
 800563c:	60da      	str	r2, [r3, #12]
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	069b      	lsls	r3, r3, #26
 8005642:	d40c      	bmi.n	800565e <HAL_RTC_SetTime+0xe6>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005644:	0028      	movs	r0, r5
 8005646:	f7ff fef9 	bl	800543c <HAL_RTC_WaitForSynchro>
 800564a:	2800      	cmp	r0, #0
 800564c:	d007      	beq.n	800565e <HAL_RTC_SetTime+0xe6>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800564e:	22ff      	movs	r2, #255	; 0xff
 8005650:	682b      	ldr	r3, [r5, #0]
 8005652:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005654:	2304      	movs	r3, #4
 8005656:	9a01      	ldr	r2, [sp, #4]
 8005658:	77d3      	strb	r3, [r2, #31]
        __HAL_UNLOCK(hrtc);
 800565a:	77fe      	strb	r6, [r7, #31]
 800565c:	e7cd      	b.n	80055fa <HAL_RTC_SetTime+0x82>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800565e:	22ff      	movs	r2, #255	; 0xff
 8005660:	682b      	ldr	r3, [r5, #0]
 8005662:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8005664:	2301      	movs	r3, #1
 8005666:	9a01      	ldr	r2, [sp, #4]
 8005668:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 800566a:	2300      	movs	r3, #0
 800566c:	77fb      	strb	r3, [r7, #31]
    return HAL_OK;
 800566e:	e7c5      	b.n	80055fc <HAL_RTC_SetTime+0x84>
 8005670:	007f7f7f 	.word	0x007f7f7f
 8005674:	fffbffff 	.word	0xfffbffff

08005678 <HAL_RTC_SetDate>:
{
 8005678:	2302      	movs	r3, #2
 800567a:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 800567c:	1c47      	adds	r7, r0, #1
{
 800567e:	000e      	movs	r6, r1
  __HAL_LOCK(hrtc);
 8005680:	7ff9      	ldrb	r1, [r7, #31]
{
 8005682:	b085      	sub	sp, #20
 8005684:	0004      	movs	r4, r0
  __HAL_LOCK(hrtc);
 8005686:	001d      	movs	r5, r3
 8005688:	2901      	cmp	r1, #1
 800568a:	d036      	beq.n	80056fa <HAL_RTC_SetDate+0x82>
 800568c:	2101      	movs	r1, #1
 800568e:	77f9      	strb	r1, [r7, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005690:	18c1      	adds	r1, r0, r3
 8005692:	9101      	str	r1, [sp, #4]
 8005694:	77cb      	strb	r3, [r1, #31]
 8005696:	7831      	ldrb	r1, [r6, #0]
 8005698:	78f0      	ldrb	r0, [r6, #3]
 800569a:	0349      	lsls	r1, r1, #13
 800569c:	7873      	ldrb	r3, [r6, #1]
 800569e:	78b5      	ldrb	r5, [r6, #2]
 80056a0:	9102      	str	r1, [sp, #8]
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80056a2:	2a00      	cmp	r2, #0
 80056a4:	d14c      	bne.n	8005740 <HAL_RTC_SetDate+0xc8>
 80056a6:	3210      	adds	r2, #16
 80056a8:	4213      	tst	r3, r2
 80056aa:	d002      	beq.n	80056b2 <HAL_RTC_SetDate+0x3a>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80056ac:	4393      	bics	r3, r2
 80056ae:	330a      	adds	r3, #10
 80056b0:	7073      	strb	r3, [r6, #1]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80056b2:	f7ff ff55 	bl	8005560 <RTC_ByteToBcd2>
 80056b6:	9003      	str	r0, [sp, #12]
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80056b8:	7870      	ldrb	r0, [r6, #1]
 80056ba:	f7ff ff51 	bl	8005560 <RTC_ByteToBcd2>
 80056be:	0006      	movs	r6, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80056c0:	0028      	movs	r0, r5
 80056c2:	f7ff ff4d 	bl	8005560 <RTC_ByteToBcd2>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80056c6:	9b03      	ldr	r3, [sp, #12]
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80056c8:	0236      	lsls	r6, r6, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80056ca:	041d      	lsls	r5, r3, #16
 80056cc:	9b02      	ldr	r3, [sp, #8]
 80056ce:	4318      	orrs	r0, r3
 80056d0:	4305      	orrs	r5, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80056d2:	22ca      	movs	r2, #202	; 0xca
 80056d4:	6823      	ldr	r3, [r4, #0]
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80056d6:	0020      	movs	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80056d8:	625a      	str	r2, [r3, #36]	; 0x24
 80056da:	3a77      	subs	r2, #119	; 0x77
 80056dc:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80056de:	f7ff fec7 	bl	8005470 <RTC_EnterInitMode>
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80056e2:	432e      	orrs	r6, r5
 80056e4:	6823      	ldr	r3, [r4, #0]
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80056e6:	1e05      	subs	r5, r0, #0
 80056e8:	d00a      	beq.n	8005700 <HAL_RTC_SetDate+0x88>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80056ea:	22ff      	movs	r2, #255	; 0xff
 80056ec:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80056ee:	2304      	movs	r3, #4
 80056f0:	9a01      	ldr	r2, [sp, #4]
 80056f2:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 80056f4:	2300      	movs	r3, #0
 80056f6:	77fb      	strb	r3, [r7, #31]
        return HAL_ERROR;
 80056f8:	2501      	movs	r5, #1
}
 80056fa:	0028      	movs	r0, r5
 80056fc:	b005      	add	sp, #20
 80056fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8005700:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005702:	4812      	ldr	r0, [pc, #72]	; (800574c <HAL_RTC_SetDate+0xd4>)
 8005704:	4006      	ands	r6, r0
 8005706:	605e      	str	r6, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8005708:	68da      	ldr	r2, [r3, #12]
 800570a:	438a      	bics	r2, r1
 800570c:	60da      	str	r2, [r3, #12]
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800570e:	689b      	ldr	r3, [r3, #8]
 8005710:	069b      	lsls	r3, r3, #26
 8005712:	d40c      	bmi.n	800572e <HAL_RTC_SetDate+0xb6>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005714:	0020      	movs	r0, r4
 8005716:	f7ff fe91 	bl	800543c <HAL_RTC_WaitForSynchro>
 800571a:	2800      	cmp	r0, #0
 800571c:	d007      	beq.n	800572e <HAL_RTC_SetDate+0xb6>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800571e:	22ff      	movs	r2, #255	; 0xff
 8005720:	6823      	ldr	r3, [r4, #0]
 8005722:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005724:	2304      	movs	r3, #4
 8005726:	9a01      	ldr	r2, [sp, #4]
 8005728:	77d3      	strb	r3, [r2, #31]
        __HAL_UNLOCK(hrtc);
 800572a:	77fd      	strb	r5, [r7, #31]
 800572c:	e7e4      	b.n	80056f8 <HAL_RTC_SetDate+0x80>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800572e:	22ff      	movs	r2, #255	; 0xff
 8005730:	6823      	ldr	r3, [r4, #0]
 8005732:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8005734:	2301      	movs	r3, #1
 8005736:	9a01      	ldr	r2, [sp, #4]
 8005738:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 800573a:	2300      	movs	r3, #0
 800573c:	77fb      	strb	r3, [r7, #31]
    return HAL_OK;
 800573e:	e7dc      	b.n	80056fa <HAL_RTC_SetDate+0x82>
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005740:	9a02      	ldr	r2, [sp, #8]
 8005742:	0400      	lsls	r0, r0, #16
 8005744:	4310      	orrs	r0, r2
 8005746:	4305      	orrs	r5, r0
                  (((uint32_t)sDate->Month) << 8U) | \
 8005748:	021e      	lsls	r6, r3, #8
 800574a:	e7c2      	b.n	80056d2 <HAL_RTC_SetDate+0x5a>
 800574c:	00ffff3f 	.word	0x00ffff3f

08005750 <HAL_RTC_SetAlarm_IT>:
{
 8005750:	2302      	movs	r3, #2
 8005752:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005754:	000d      	movs	r5, r1
  __HAL_LOCK(hrtc);
 8005756:	1c41      	adds	r1, r0, #1
 8005758:	7fce      	ldrb	r6, [r1, #31]
{
 800575a:	0004      	movs	r4, r0
  __HAL_LOCK(hrtc);
 800575c:	0018      	movs	r0, r3
 800575e:	2e01      	cmp	r6, #1
 8005760:	d100      	bne.n	8005764 <HAL_RTC_SetAlarm_IT+0x14>
 8005762:	e08c      	b.n	800587e <HAL_RTC_SetAlarm_IT+0x12e>
 8005764:	3801      	subs	r0, #1
 8005766:	77c8      	strb	r0, [r1, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005768:	18e1      	adds	r1, r4, r3
 800576a:	77cb      	strb	r3, [r1, #31]
 800576c:	2140      	movs	r1, #64	; 0x40
 800576e:	786b      	ldrb	r3, [r5, #1]
 8005770:	6826      	ldr	r6, [r4, #0]
 8005772:	9300      	str	r3, [sp, #0]
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005774:	68b3      	ldr	r3, [r6, #8]
 8005776:	7828      	ldrb	r0, [r5, #0]
 8005778:	78af      	ldrb	r7, [r5, #2]
 800577a:	400b      	ands	r3, r1
  if (Format == RTC_FORMAT_BIN)
 800577c:	2a00      	cmp	r2, #0
 800577e:	d15d      	bne.n	800583c <HAL_RTC_SetAlarm_IT+0xec>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005780:	2b00      	cmp	r3, #0
 8005782:	d100      	bne.n	8005786 <HAL_RTC_SetAlarm_IT+0x36>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005784:	70eb      	strb	r3, [r5, #3]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8005786:	f7ff feeb 	bl	8005560 <RTC_ByteToBcd2>
 800578a:	9001      	str	r0, [sp, #4]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800578c:	9800      	ldr	r0, [sp, #0]
 800578e:	f7ff fee7 	bl	8005560 <RTC_ByteToBcd2>
 8005792:	9000      	str	r0, [sp, #0]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8005794:	0038      	movs	r0, r7
 8005796:	f7ff fee3 	bl	8005560 <RTC_ByteToBcd2>
 800579a:	0007      	movs	r7, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800579c:	1c6b      	adds	r3, r5, #1
 800579e:	7fd8      	ldrb	r0, [r3, #31]
 80057a0:	f7ff fede 	bl	8005560 <RTC_ByteToBcd2>
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80057a4:	696a      	ldr	r2, [r5, #20]
 80057a6:	69eb      	ldr	r3, [r5, #28]
 80057a8:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80057aa:	78ea      	ldrb	r2, [r5, #3]
 80057ac:	0412      	lsls	r2, r2, #16
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80057ae:	4313      	orrs	r3, r2
 80057b0:	431f      	orrs	r7, r3
 80057b2:	9b01      	ldr	r3, [sp, #4]
 80057b4:	041b      	lsls	r3, r3, #16
 80057b6:	431f      	orrs	r7, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 80057b8:	9b00      	ldr	r3, [sp, #0]
 80057ba:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80057bc:	431f      	orrs	r7, r3
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80057be:	69aa      	ldr	r2, [r5, #24]
 80057c0:	686b      	ldr	r3, [r5, #4]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80057c2:	0600      	lsls	r0, r0, #24
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80057c4:	4313      	orrs	r3, r2
 80057c6:	9300      	str	r3, [sp, #0]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80057c8:	23ca      	movs	r3, #202	; 0xca
  if (sAlarm->Alarm == RTC_ALARM_A)
 80057ca:	6a6a      	ldr	r2, [r5, #36]	; 0x24
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80057cc:	6273      	str	r3, [r6, #36]	; 0x24
 80057ce:	3b77      	subs	r3, #119	; 0x77
 80057d0:	6273      	str	r3, [r6, #36]	; 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 80057d2:	33ad      	adds	r3, #173	; 0xad
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80057d4:	4307      	orrs	r7, r0
  if (sAlarm->Alarm == RTC_ALARM_A)
 80057d6:	429a      	cmp	r2, r3
 80057d8:	d152      	bne.n	8005880 <HAL_RTC_SetAlarm_IT+0x130>
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80057da:	68b3      	ldr	r3, [r6, #8]
 80057dc:	4a3b      	ldr	r2, [pc, #236]	; (80058cc <HAL_RTC_SetAlarm_IT+0x17c>)
 80057de:	4013      	ands	r3, r2
 80057e0:	60b3      	str	r3, [r6, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80057e2:	68f2      	ldr	r2, [r6, #12]
 80057e4:	4b3a      	ldr	r3, [pc, #232]	; (80058d0 <HAL_RTC_SetAlarm_IT+0x180>)
 80057e6:	b2d2      	uxtb	r2, r2
 80057e8:	4313      	orrs	r3, r2
 80057ea:	60f3      	str	r3, [r6, #12]
    tickstart = HAL_GetTick();
 80057ec:	f7fe fcb6 	bl	800415c <HAL_GetTick>
 80057f0:	0006      	movs	r6, r0
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80057f2:	2201      	movs	r2, #1
 80057f4:	6823      	ldr	r3, [r4, #0]
 80057f6:	68dd      	ldr	r5, [r3, #12]
 80057f8:	4015      	ands	r5, r2
 80057fa:	d031      	beq.n	8005860 <HAL_RTC_SetAlarm_IT+0x110>
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80057fc:	9a00      	ldr	r2, [sp, #0]
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80057fe:	61df      	str	r7, [r3, #28]
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8005800:	645a      	str	r2, [r3, #68]	; 0x44
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8005802:	2280      	movs	r2, #128	; 0x80
 8005804:	6899      	ldr	r1, [r3, #8]
 8005806:	0052      	lsls	r2, r2, #1
 8005808:	430a      	orrs	r2, r1
 800580a:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 800580c:	2280      	movs	r2, #128	; 0x80
 800580e:	6899      	ldr	r1, [r3, #8]
 8005810:	0152      	lsls	r2, r2, #5
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8005812:	430a      	orrs	r2, r1
 8005814:	609a      	str	r2, [r3, #8]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8005816:	2280      	movs	r2, #128	; 0x80
 8005818:	4b2e      	ldr	r3, [pc, #184]	; (80058d4 <HAL_RTC_SetAlarm_IT+0x184>)
 800581a:	0292      	lsls	r2, r2, #10
 800581c:	6819      	ldr	r1, [r3, #0]
  __HAL_UNLOCK(hrtc);
 800581e:	2000      	movs	r0, #0
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8005820:	4311      	orrs	r1, r2
 8005822:	6019      	str	r1, [r3, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8005824:	6899      	ldr	r1, [r3, #8]
 8005826:	430a      	orrs	r2, r1
 8005828:	609a      	str	r2, [r3, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800582a:	22ff      	movs	r2, #255	; 0xff
 800582c:	6823      	ldr	r3, [r4, #0]
 800582e:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 8005830:	3afe      	subs	r2, #254	; 0xfe
 8005832:	1ca3      	adds	r3, r4, #2
  __HAL_UNLOCK(hrtc);
 8005834:	18a4      	adds	r4, r4, r2
  hrtc->State = HAL_RTC_STATE_READY;
 8005836:	77da      	strb	r2, [r3, #31]
  __HAL_UNLOCK(hrtc);
 8005838:	77e0      	strb	r0, [r4, #31]
  return HAL_OK;
 800583a:	e020      	b.n	800587e <HAL_RTC_SetAlarm_IT+0x12e>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800583c:	2b00      	cmp	r3, #0
 800583e:	d100      	bne.n	8005842 <HAL_RTC_SetAlarm_IT+0xf2>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005840:	70eb      	strb	r3, [r5, #3]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8005842:	69eb      	ldr	r3, [r5, #28]
 8005844:	696a      	ldr	r2, [r5, #20]
 8005846:	0400      	lsls	r0, r0, #16
 8005848:	4313      	orrs	r3, r2
 800584a:	431f      	orrs	r7, r3
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800584c:	9b00      	ldr	r3, [sp, #0]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800584e:	4307      	orrs	r7, r0
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8005850:	0218      	lsls	r0, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8005852:	4307      	orrs	r7, r0
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005854:	78e8      	ldrb	r0, [r5, #3]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005856:	1c6b      	adds	r3, r5, #1
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005858:	0400      	lsls	r0, r0, #16
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800585a:	4307      	orrs	r7, r0
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800585c:	7fd8      	ldrb	r0, [r3, #31]
 800585e:	e7ae      	b.n	80057be <HAL_RTC_SetAlarm_IT+0x6e>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005860:	f7fe fc7c 	bl	800415c <HAL_GetTick>
 8005864:	23fa      	movs	r3, #250	; 0xfa
 8005866:	1b80      	subs	r0, r0, r6
 8005868:	009b      	lsls	r3, r3, #2
 800586a:	4298      	cmp	r0, r3
 800586c:	d9c1      	bls.n	80057f2 <HAL_RTC_SetAlarm_IT+0xa2>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800586e:	22ff      	movs	r2, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005870:	2003      	movs	r0, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005872:	6823      	ldr	r3, [r4, #0]
 8005874:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005876:	1ca3      	adds	r3, r4, #2
        __HAL_UNLOCK(hrtc);
 8005878:	3401      	adds	r4, #1
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800587a:	77d8      	strb	r0, [r3, #31]
        __HAL_UNLOCK(hrtc);
 800587c:	77e5      	strb	r5, [r4, #31]
}
 800587e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8005880:	68b3      	ldr	r3, [r6, #8]
 8005882:	4a15      	ldr	r2, [pc, #84]	; (80058d8 <HAL_RTC_SetAlarm_IT+0x188>)
 8005884:	4013      	ands	r3, r2
 8005886:	60b3      	str	r3, [r6, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8005888:	68f2      	ldr	r2, [r6, #12]
 800588a:	4b14      	ldr	r3, [pc, #80]	; (80058dc <HAL_RTC_SetAlarm_IT+0x18c>)
 800588c:	b2d2      	uxtb	r2, r2
 800588e:	4313      	orrs	r3, r2
 8005890:	60f3      	str	r3, [r6, #12]
    tickstart = HAL_GetTick();
 8005892:	f7fe fc63 	bl	800415c <HAL_GetTick>
 8005896:	0006      	movs	r6, r0
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8005898:	2202      	movs	r2, #2
 800589a:	6823      	ldr	r3, [r4, #0]
 800589c:	68dd      	ldr	r5, [r3, #12]
 800589e:	4015      	ands	r5, r2
 80058a0:	d00b      	beq.n	80058ba <HAL_RTC_SetAlarm_IT+0x16a>
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80058a2:	9a00      	ldr	r2, [sp, #0]
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80058a4:	621f      	str	r7, [r3, #32]
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80058a6:	649a      	str	r2, [r3, #72]	; 0x48
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80058a8:	2280      	movs	r2, #128	; 0x80
 80058aa:	6899      	ldr	r1, [r3, #8]
 80058ac:	0092      	lsls	r2, r2, #2
 80058ae:	430a      	orrs	r2, r1
 80058b0:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80058b2:	2280      	movs	r2, #128	; 0x80
 80058b4:	6899      	ldr	r1, [r3, #8]
 80058b6:	0192      	lsls	r2, r2, #6
 80058b8:	e7ab      	b.n	8005812 <HAL_RTC_SetAlarm_IT+0xc2>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80058ba:	f7fe fc4f 	bl	800415c <HAL_GetTick>
 80058be:	23fa      	movs	r3, #250	; 0xfa
 80058c0:	1b80      	subs	r0, r0, r6
 80058c2:	009b      	lsls	r3, r3, #2
 80058c4:	4298      	cmp	r0, r3
 80058c6:	d9e7      	bls.n	8005898 <HAL_RTC_SetAlarm_IT+0x148>
 80058c8:	e7d1      	b.n	800586e <HAL_RTC_SetAlarm_IT+0x11e>
 80058ca:	46c0      	nop			; (mov r8, r8)
 80058cc:	fffffeff 	.word	0xfffffeff
 80058d0:	fffffe7f 	.word	0xfffffe7f
 80058d4:	40010400 	.word	0x40010400
 80058d8:	fffffdff 	.word	0xfffffdff
 80058dc:	fffffd7f 	.word	0xfffffd7f

080058e0 <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 80058e0:	230a      	movs	r3, #10
 80058e2:	0902      	lsrs	r2, r0, #4
 80058e4:	4353      	muls	r3, r2
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 80058e6:	220f      	movs	r2, #15
 80058e8:	4010      	ands	r0, r2
 80058ea:	1818      	adds	r0, r3, r0
 80058ec:	b2c0      	uxtb	r0, r0
}
 80058ee:	4770      	bx	lr

080058f0 <HAL_RTC_GetTime>:
{
 80058f0:	b570      	push	{r4, r5, r6, lr}
 80058f2:	000c      	movs	r4, r1
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80058f4:	6801      	ldr	r1, [r0, #0]
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80058f6:	203f      	movs	r0, #63	; 0x3f
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80058f8:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 80058fa:	6063      	str	r3, [r4, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80058fc:	690b      	ldr	r3, [r1, #16]
 80058fe:	045b      	lsls	r3, r3, #17
 8005900:	0c5b      	lsrs	r3, r3, #17
 8005902:	60a3      	str	r3, [r4, #8]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005904:	680b      	ldr	r3, [r1, #0]
 8005906:	490e      	ldr	r1, [pc, #56]	; (8005940 <HAL_RTC_GetTime+0x50>)
 8005908:	400b      	ands	r3, r1
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800590a:	0c19      	lsrs	r1, r3, #16
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800590c:	0a1e      	lsrs	r6, r3, #8
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800590e:	b2dd      	uxtb	r5, r3
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8005910:	2340      	movs	r3, #64	; 0x40
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8005912:	4008      	ands	r0, r1
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8005914:	b2f6      	uxtb	r6, r6
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8005916:	4019      	ands	r1, r3
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8005918:	7020      	strb	r0, [r4, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800591a:	7066      	strb	r6, [r4, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800591c:	70a5      	strb	r5, [r4, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800591e:	70e1      	strb	r1, [r4, #3]
  if (Format == RTC_FORMAT_BIN)
 8005920:	2a00      	cmp	r2, #0
 8005922:	d10a      	bne.n	800593a <HAL_RTC_GetTime+0x4a>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005924:	f7ff ffdc 	bl	80058e0 <RTC_Bcd2ToByte>
 8005928:	7020      	strb	r0, [r4, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800592a:	0030      	movs	r0, r6
 800592c:	f7ff ffd8 	bl	80058e0 <RTC_Bcd2ToByte>
 8005930:	7060      	strb	r0, [r4, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005932:	0028      	movs	r0, r5
 8005934:	f7ff ffd4 	bl	80058e0 <RTC_Bcd2ToByte>
 8005938:	70a0      	strb	r0, [r4, #2]
}
 800593a:	2000      	movs	r0, #0
 800593c:	bd70      	pop	{r4, r5, r6, pc}
 800593e:	46c0      	nop			; (mov r8, r8)
 8005940:	007f7f7f 	.word	0x007f7f7f

08005944 <HAL_RTC_GetDate>:
{
 8005944:	b570      	push	{r4, r5, r6, lr}
 8005946:	000c      	movs	r4, r1
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005948:	6803      	ldr	r3, [r0, #0]
 800594a:	490e      	ldr	r1, [pc, #56]	; (8005984 <HAL_RTC_GetDate+0x40>)
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	400b      	ands	r3, r1
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8005950:	0c18      	lsrs	r0, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8005952:	04dd      	lsls	r5, r3, #19
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8005954:	b2de      	uxtb	r6, r3
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8005956:	041b      	lsls	r3, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8005958:	0eed      	lsrs	r5, r5, #27
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800595a:	0f5b      	lsrs	r3, r3, #29
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800595c:	70e0      	strb	r0, [r4, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800595e:	7065      	strb	r5, [r4, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8005960:	70a6      	strb	r6, [r4, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8005962:	7023      	strb	r3, [r4, #0]
  if (Format == RTC_FORMAT_BIN)
 8005964:	2a00      	cmp	r2, #0
 8005966:	d10a      	bne.n	800597e <HAL_RTC_GetDate+0x3a>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005968:	f7ff ffba 	bl	80058e0 <RTC_Bcd2ToByte>
 800596c:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800596e:	0028      	movs	r0, r5
 8005970:	f7ff ffb6 	bl	80058e0 <RTC_Bcd2ToByte>
 8005974:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005976:	0030      	movs	r0, r6
 8005978:	f7ff ffb2 	bl	80058e0 <RTC_Bcd2ToByte>
 800597c:	70a0      	strb	r0, [r4, #2]
}
 800597e:	2000      	movs	r0, #0
 8005980:	bd70      	pop	{r4, r5, r6, pc}
 8005982:	46c0      	nop			; (mov r8, r8)
 8005984:	00ffff3f 	.word	0x00ffff3f

08005988 <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8005988:	6803      	ldr	r3, [r0, #0]
  tmp += (BackupRegister * 4U);
 800598a:	0089      	lsls	r1, r1, #2
  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 800598c:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4U);
 800598e:	18c9      	adds	r1, r1, r3

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8005990:	600a      	str	r2, [r1, #0]
}
 8005992:	4770      	bx	lr

08005994 <HAL_RTCEx_BKUPRead>:
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8005994:	6803      	ldr	r3, [r0, #0]
  tmp += (BackupRegister * 4U);
 8005996:	0089      	lsls	r1, r1, #2
  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8005998:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4U);
 800599a:	18c9      	adds	r1, r1, r3

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800599c:	6808      	ldr	r0, [r1, #0]
}
 800599e:	4770      	bx	lr

080059a0 <HAL_RTCEx_EnableBypassShadow>:
  * @note   When the Bypass Shadow is enabled the calendar value are taken
  *         directly from the Calendar counter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 80059a0:	2202      	movs	r2, #2
 80059a2:	b510      	push	{r4, lr}
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80059a4:	1c41      	adds	r1, r0, #1
 80059a6:	7fcc      	ldrb	r4, [r1, #31]
{
 80059a8:	0003      	movs	r3, r0
  __HAL_LOCK(hrtc);
 80059aa:	0010      	movs	r0, r2
 80059ac:	2c01      	cmp	r4, #1
 80059ae:	d010      	beq.n	80059d2 <HAL_RTCEx_EnableBypassShadow+0x32>

  hrtc->State = HAL_RTC_STATE_BUSY;
 80059b0:	1898      	adds	r0, r3, r2

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80059b2:	681b      	ldr	r3, [r3, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80059b4:	77c2      	strb	r2, [r0, #31]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80059b6:	32c8      	adds	r2, #200	; 0xc8
 80059b8:	625a      	str	r2, [r3, #36]	; 0x24
 80059ba:	3a77      	subs	r2, #119	; 0x77
 80059bc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 80059be:	689c      	ldr	r4, [r3, #8]
 80059c0:	3a33      	subs	r2, #51	; 0x33
 80059c2:	4322      	orrs	r2, r4
 80059c4:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80059c6:	22ff      	movs	r2, #255	; 0xff
 80059c8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80059ca:	2301      	movs	r3, #1
 80059cc:	77c3      	strb	r3, [r0, #31]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80059ce:	2000      	movs	r0, #0
 80059d0:	77c8      	strb	r0, [r1, #31]

  return HAL_OK;
}
 80059d2:	bd10      	pop	{r4, pc}

080059d4 <SPI_WaitFlagStateUntilTimeout.constprop.7>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 80059d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059d6:	0004      	movs	r4, r0
 80059d8:	000d      	movs	r5, r1
 80059da:	0016      	movs	r6, r2
 80059dc:	001f      	movs	r7, r3
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80059de:	6822      	ldr	r2, [r4, #0]
 80059e0:	6893      	ldr	r3, [r2, #8]
 80059e2:	402b      	ands	r3, r5
 80059e4:	429d      	cmp	r5, r3
 80059e6:	d001      	beq.n	80059ec <SPI_WaitFlagStateUntilTimeout.constprop.7+0x18>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 80059e8:	2000      	movs	r0, #0
 80059ea:	e031      	b.n	8005a50 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x7c>
    if (Timeout != HAL_MAX_DELAY)
 80059ec:	1c73      	adds	r3, r6, #1
 80059ee:	d0f7      	beq.n	80059e0 <SPI_WaitFlagStateUntilTimeout.constprop.7+0xc>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80059f0:	f7fe fbb4 	bl	800415c <HAL_GetTick>
 80059f4:	1bc0      	subs	r0, r0, r7
 80059f6:	4286      	cmp	r6, r0
 80059f8:	d8f1      	bhi.n	80059de <SPI_WaitFlagStateUntilTimeout.constprop.7+0xa>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80059fa:	21e0      	movs	r1, #224	; 0xe0
 80059fc:	6823      	ldr	r3, [r4, #0]
 80059fe:	685a      	ldr	r2, [r3, #4]
 8005a00:	438a      	bics	r2, r1
 8005a02:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a04:	2282      	movs	r2, #130	; 0x82
 8005a06:	6861      	ldr	r1, [r4, #4]
 8005a08:	0052      	lsls	r2, r2, #1
 8005a0a:	4291      	cmp	r1, r2
 8005a0c:	d10c      	bne.n	8005a28 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x54>
 8005a0e:	2180      	movs	r1, #128	; 0x80
 8005a10:	68a2      	ldr	r2, [r4, #8]
 8005a12:	0209      	lsls	r1, r1, #8
 8005a14:	428a      	cmp	r2, r1
 8005a16:	d003      	beq.n	8005a20 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x4c>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005a18:	2180      	movs	r1, #128	; 0x80
 8005a1a:	00c9      	lsls	r1, r1, #3
 8005a1c:	428a      	cmp	r2, r1
 8005a1e:	d103      	bne.n	8005a28 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x54>
          __HAL_SPI_DISABLE(hspi);
 8005a20:	2140      	movs	r1, #64	; 0x40
 8005a22:	681a      	ldr	r2, [r3, #0]
 8005a24:	438a      	bics	r2, r1
 8005a26:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005a28:	2180      	movs	r1, #128	; 0x80
 8005a2a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8005a2c:	0189      	lsls	r1, r1, #6
 8005a2e:	428a      	cmp	r2, r1
 8005a30:	d106      	bne.n	8005a40 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x6c>
          SPI_RESET_CRC(hspi);
 8005a32:	6819      	ldr	r1, [r3, #0]
 8005a34:	4807      	ldr	r0, [pc, #28]	; (8005a54 <SPI_WaitFlagStateUntilTimeout.constprop.7+0x80>)
 8005a36:	4001      	ands	r1, r0
 8005a38:	6019      	str	r1, [r3, #0]
 8005a3a:	6819      	ldr	r1, [r3, #0]
 8005a3c:	430a      	orrs	r2, r1
 8005a3e:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8005a40:	0023      	movs	r3, r4
 8005a42:	2201      	movs	r2, #1
 8005a44:	3351      	adds	r3, #81	; 0x51
 8005a46:	701a      	strb	r2, [r3, #0]
        __HAL_UNLOCK(hspi);
 8005a48:	2300      	movs	r3, #0
 8005a4a:	2003      	movs	r0, #3
 8005a4c:	3450      	adds	r4, #80	; 0x50
 8005a4e:	7023      	strb	r3, [r4, #0]
}
 8005a50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a52:	46c0      	nop			; (mov r8, r8)
 8005a54:	ffffdfff 	.word	0xffffdfff

08005a58 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005a58:	0013      	movs	r3, r2
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a5a:	2282      	movs	r2, #130	; 0x82
{
 8005a5c:	b510      	push	{r4, lr}
 8005a5e:	0004      	movs	r4, r0
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a60:	6840      	ldr	r0, [r0, #4]
 8005a62:	0052      	lsls	r2, r2, #1
 8005a64:	4290      	cmp	r0, r2
 8005a66:	d108      	bne.n	8005a7a <SPI_EndRxTxTransaction+0x22>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005a68:	000a      	movs	r2, r1
 8005a6a:	2180      	movs	r1, #128	; 0x80
 8005a6c:	0020      	movs	r0, r4
 8005a6e:	f7ff ffb1 	bl	80059d4 <SPI_WaitFlagStateUntilTimeout.constprop.7>
 8005a72:	2800      	cmp	r0, #0
 8005a74:	d109      	bne.n	8005a8a <SPI_EndRxTxTransaction+0x32>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8005a76:	2000      	movs	r0, #0
}
 8005a78:	bd10      	pop	{r4, pc}
    if (hspi->State == HAL_SPI_STATE_BUSY_TX_RX)
 8005a7a:	0022      	movs	r2, r4
 8005a7c:	3251      	adds	r2, #81	; 0x51
 8005a7e:	7812      	ldrb	r2, [r2, #0]
 8005a80:	2a05      	cmp	r2, #5
 8005a82:	d1f8      	bne.n	8005a76 <SPI_EndRxTxTransaction+0x1e>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005a84:	000a      	movs	r2, r1
 8005a86:	2101      	movs	r1, #1
 8005a88:	e7f0      	b.n	8005a6c <SPI_EndRxTxTransaction+0x14>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a8a:	2320      	movs	r3, #32
 8005a8c:	6d62      	ldr	r2, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 8005a8e:	2003      	movs	r0, #3
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a90:	4313      	orrs	r3, r2
 8005a92:	6563      	str	r3, [r4, #84]	; 0x54
 8005a94:	e7f0      	b.n	8005a78 <SPI_EndRxTxTransaction+0x20>

08005a96 <HAL_SPI_MspInit>:
}
 8005a96:	4770      	bx	lr

08005a98 <HAL_SPI_Init>:
{
 8005a98:	b570      	push	{r4, r5, r6, lr}
 8005a9a:	0004      	movs	r4, r0
    return HAL_ERROR;
 8005a9c:	2001      	movs	r0, #1
  if (hspi == NULL)
 8005a9e:	2c00      	cmp	r4, #0
 8005aa0:	d037      	beq.n	8005b12 <HAL_SPI_Init+0x7a>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005aa2:	2300      	movs	r3, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 8005aa4:	0025      	movs	r5, r4
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005aa6:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8005aa8:	3551      	adds	r5, #81	; 0x51
 8005aaa:	782b      	ldrb	r3, [r5, #0]
 8005aac:	b2db      	uxtb	r3, r3
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d105      	bne.n	8005abe <HAL_SPI_Init+0x26>
    hspi->Lock = HAL_UNLOCKED;
 8005ab2:	0022      	movs	r2, r4
 8005ab4:	3250      	adds	r2, #80	; 0x50
 8005ab6:	7013      	strb	r3, [r2, #0]
    HAL_SPI_MspInit(hspi);
 8005ab8:	0020      	movs	r0, r4
 8005aba:	f7ff ffec 	bl	8005a96 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8005abe:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8005ac0:	2240      	movs	r2, #64	; 0x40
 8005ac2:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8005ac4:	702b      	strb	r3, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 8005ac6:	680b      	ldr	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005ac8:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 8005aca:	4393      	bics	r3, r2
 8005acc:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005ace:	6863      	ldr	r3, [r4, #4]
 8005ad0:	69a2      	ldr	r2, [r4, #24]
 8005ad2:	4303      	orrs	r3, r0
 8005ad4:	68e0      	ldr	r0, [r4, #12]
 8005ad6:	4303      	orrs	r3, r0
 8005ad8:	6920      	ldr	r0, [r4, #16]
 8005ada:	4303      	orrs	r3, r0
 8005adc:	6960      	ldr	r0, [r4, #20]
 8005ade:	4303      	orrs	r3, r0
 8005ae0:	69e0      	ldr	r0, [r4, #28]
 8005ae2:	4303      	orrs	r3, r0
 8005ae4:	6a20      	ldr	r0, [r4, #32]
 8005ae6:	4303      	orrs	r3, r0
 8005ae8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8005aea:	4303      	orrs	r3, r0
 8005aec:	2080      	movs	r0, #128	; 0x80
 8005aee:	0080      	lsls	r0, r0, #2
 8005af0:	4010      	ands	r0, r2
 8005af2:	4303      	orrs	r3, r0
 8005af4:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8005af6:	2304      	movs	r3, #4
 8005af8:	0c12      	lsrs	r2, r2, #16
 8005afa:	401a      	ands	r2, r3
 8005afc:	6a63      	ldr	r3, [r4, #36]	; 0x24
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005afe:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8005b00:	431a      	orrs	r2, r3
 8005b02:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005b04:	69cb      	ldr	r3, [r1, #28]
 8005b06:	4a03      	ldr	r2, [pc, #12]	; (8005b14 <HAL_SPI_Init+0x7c>)
 8005b08:	4013      	ands	r3, r2
 8005b0a:	61cb      	str	r3, [r1, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8005b0c:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005b0e:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005b10:	702b      	strb	r3, [r5, #0]
}
 8005b12:	bd70      	pop	{r4, r5, r6, pc}
 8005b14:	fffff7ff 	.word	0xfffff7ff

08005b18 <HAL_SPI_TransmitReceive>:
{
 8005b18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b1a:	001e      	movs	r6, r3
  __HAL_LOCK(hspi);
 8005b1c:	0003      	movs	r3, r0
 8005b1e:	3350      	adds	r3, #80	; 0x50
{
 8005b20:	0017      	movs	r7, r2
  __HAL_LOCK(hspi);
 8005b22:	781a      	ldrb	r2, [r3, #0]
{
 8005b24:	0004      	movs	r4, r0
 8005b26:	b085      	sub	sp, #20
 8005b28:	000d      	movs	r5, r1
  __HAL_LOCK(hspi);
 8005b2a:	2002      	movs	r0, #2
 8005b2c:	2a01      	cmp	r2, #1
 8005b2e:	d100      	bne.n	8005b32 <HAL_SPI_TransmitReceive+0x1a>
 8005b30:	e099      	b.n	8005c66 <HAL_SPI_TransmitReceive+0x14e>
 8005b32:	2201      	movs	r2, #1
 8005b34:	701a      	strb	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8005b36:	f7fe fb11 	bl	800415c <HAL_GetTick>
  tmp_state           = hspi->State;
 8005b3a:	0023      	movs	r3, r4
  tickstart = HAL_GetTick();
 8005b3c:	9001      	str	r0, [sp, #4]
  tmp_state           = hspi->State;
 8005b3e:	3351      	adds	r3, #81	; 0x51
 8005b40:	781b      	ldrb	r3, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8005b42:	6861      	ldr	r1, [r4, #4]
  tmp_state           = hspi->State;
 8005b44:	b2db      	uxtb	r3, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005b46:	2b01      	cmp	r3, #1
 8005b48:	d00c      	beq.n	8005b64 <HAL_SPI_TransmitReceive+0x4c>
 8005b4a:	2282      	movs	r2, #130	; 0x82
    errorcode = HAL_BUSY;
 8005b4c:	2002      	movs	r0, #2
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005b4e:	0052      	lsls	r2, r2, #1
 8005b50:	4291      	cmp	r1, r2
 8005b52:	d000      	beq.n	8005b56 <HAL_SPI_TransmitReceive+0x3e>
 8005b54:	e080      	b.n	8005c58 <HAL_SPI_TransmitReceive+0x140>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005b56:	68a2      	ldr	r2, [r4, #8]
 8005b58:	2a00      	cmp	r2, #0
 8005b5a:	d000      	beq.n	8005b5e <HAL_SPI_TransmitReceive+0x46>
 8005b5c:	e07c      	b.n	8005c58 <HAL_SPI_TransmitReceive+0x140>
 8005b5e:	2b04      	cmp	r3, #4
 8005b60:	d000      	beq.n	8005b64 <HAL_SPI_TransmitReceive+0x4c>
 8005b62:	e079      	b.n	8005c58 <HAL_SPI_TransmitReceive+0x140>
    errorcode = HAL_ERROR;
 8005b64:	2001      	movs	r0, #1
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005b66:	2d00      	cmp	r5, #0
 8005b68:	d076      	beq.n	8005c58 <HAL_SPI_TransmitReceive+0x140>
 8005b6a:	2f00      	cmp	r7, #0
 8005b6c:	d074      	beq.n	8005c58 <HAL_SPI_TransmitReceive+0x140>
 8005b6e:	2e00      	cmp	r6, #0
 8005b70:	d072      	beq.n	8005c58 <HAL_SPI_TransmitReceive+0x140>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005b72:	0023      	movs	r3, r4
 8005b74:	3351      	adds	r3, #81	; 0x51
 8005b76:	781a      	ldrb	r2, [r3, #0]
 8005b78:	2a04      	cmp	r2, #4
 8005b7a:	d001      	beq.n	8005b80 <HAL_SPI_TransmitReceive+0x68>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005b7c:	2205      	movs	r2, #5
 8005b7e:	701a      	strb	r2, [r3, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b80:	2300      	movs	r3, #0
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005b82:	2240      	movs	r2, #64	; 0x40
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b84:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 8005b86:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005b88:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005b8a:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 8005b8c:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 8005b8e:	86e6      	strh	r6, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005b90:	6818      	ldr	r0, [r3, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005b92:	63a7      	str	r7, [r4, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005b94:	87a6      	strh	r6, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005b96:	6325      	str	r5, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005b98:	86a6      	strh	r6, [r4, #52]	; 0x34
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005b9a:	4210      	tst	r0, r2
 8005b9c:	d102      	bne.n	8005ba4 <HAL_SPI_TransmitReceive+0x8c>
    __HAL_SPI_ENABLE(hspi);
 8005b9e:	6818      	ldr	r0, [r3, #0]
 8005ba0:	4302      	orrs	r2, r0
 8005ba2:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005ba4:	2280      	movs	r2, #128	; 0x80
 8005ba6:	68e0      	ldr	r0, [r4, #12]
 8005ba8:	0112      	lsls	r2, r2, #4
 8005baa:	4290      	cmp	r0, r2
 8005bac:	d15d      	bne.n	8005c6a <HAL_SPI_TransmitReceive+0x152>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005bae:	2900      	cmp	r1, #0
 8005bb0:	d001      	beq.n	8005bb6 <HAL_SPI_TransmitReceive+0x9e>
 8005bb2:	2e01      	cmp	r6, #1
 8005bb4:	d107      	bne.n	8005bc6 <HAL_SPI_TransmitReceive+0xae>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005bb6:	882a      	ldrh	r2, [r5, #0]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005bb8:	3502      	adds	r5, #2
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005bba:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8005bbc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005bbe:	6325      	str	r5, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8005bc0:	3b01      	subs	r3, #1
 8005bc2:	b29b      	uxth	r3, r3
 8005bc4:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8005bc6:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005bc8:	2702      	movs	r7, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005bca:	002e      	movs	r6, r5
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005bcc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d115      	bne.n	8005bfe <HAL_SPI_TransmitReceive+0xe6>
 8005bd2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d112      	bne.n	8005bfe <HAL_SPI_TransmitReceive+0xe6>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005bd8:	9a01      	ldr	r2, [sp, #4]
 8005bda:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005bdc:	0020      	movs	r0, r4
 8005bde:	f7ff ff3b 	bl	8005a58 <SPI_EndRxTxTransaction>
 8005be2:	2800      	cmp	r0, #0
 8005be4:	d000      	beq.n	8005be8 <HAL_SPI_TransmitReceive+0xd0>
 8005be6:	e086      	b.n	8005cf6 <HAL_SPI_TransmitReceive+0x1de>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005be8:	68a3      	ldr	r3, [r4, #8]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d134      	bne.n	8005c58 <HAL_SPI_TransmitReceive+0x140>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005bee:	6823      	ldr	r3, [r4, #0]
 8005bf0:	9003      	str	r0, [sp, #12]
 8005bf2:	68da      	ldr	r2, [r3, #12]
 8005bf4:	9203      	str	r2, [sp, #12]
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	9303      	str	r3, [sp, #12]
 8005bfa:	9b03      	ldr	r3, [sp, #12]
 8005bfc:	e02c      	b.n	8005c58 <HAL_SPI_TransmitReceive+0x140>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005bfe:	6822      	ldr	r2, [r4, #0]
 8005c00:	6893      	ldr	r3, [r2, #8]
 8005c02:	423b      	tst	r3, r7
 8005c04:	d00e      	beq.n	8005c24 <HAL_SPI_TransmitReceive+0x10c>
 8005c06:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d00b      	beq.n	8005c24 <HAL_SPI_TransmitReceive+0x10c>
 8005c0c:	2d01      	cmp	r5, #1
 8005c0e:	d109      	bne.n	8005c24 <HAL_SPI_TransmitReceive+0x10c>
        txallowed = 0U;
 8005c10:	2500      	movs	r5, #0
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c12:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005c14:	8819      	ldrh	r1, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c16:	3302      	adds	r3, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c18:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c1a:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8005c1c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005c1e:	3b01      	subs	r3, #1
 8005c20:	b29b      	uxth	r3, r3
 8005c22:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005c24:	6893      	ldr	r3, [r2, #8]
 8005c26:	4233      	tst	r3, r6
 8005c28:	d00c      	beq.n	8005c44 <HAL_SPI_TransmitReceive+0x12c>
 8005c2a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d009      	beq.n	8005c44 <HAL_SPI_TransmitReceive+0x12c>
        txallowed = 1U;
 8005c30:	0035      	movs	r5, r6
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005c32:	68d2      	ldr	r2, [r2, #12]
 8005c34:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005c36:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005c38:	3302      	adds	r3, #2
 8005c3a:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8005c3c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005c3e:	3b01      	subs	r3, #1
 8005c40:	b29b      	uxth	r3, r3
 8005c42:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005c44:	f7fe fa8a 	bl	800415c <HAL_GetTick>
 8005c48:	9b01      	ldr	r3, [sp, #4]
 8005c4a:	1ac0      	subs	r0, r0, r3
 8005c4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c4e:	4283      	cmp	r3, r0
 8005c50:	d8bc      	bhi.n	8005bcc <HAL_SPI_TransmitReceive+0xb4>
 8005c52:	3301      	adds	r3, #1
 8005c54:	d0ba      	beq.n	8005bcc <HAL_SPI_TransmitReceive+0xb4>
        errorcode = HAL_TIMEOUT;
 8005c56:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8005c58:	0023      	movs	r3, r4
 8005c5a:	2201      	movs	r2, #1
 8005c5c:	3351      	adds	r3, #81	; 0x51
 8005c5e:	701a      	strb	r2, [r3, #0]
  __HAL_UNLOCK(hspi);
 8005c60:	2300      	movs	r3, #0
 8005c62:	3450      	adds	r4, #80	; 0x50
 8005c64:	7023      	strb	r3, [r4, #0]
}
 8005c66:	b005      	add	sp, #20
 8005c68:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c6a:	2900      	cmp	r1, #0
 8005c6c:	d001      	beq.n	8005c72 <HAL_SPI_TransmitReceive+0x15a>
 8005c6e:	2e01      	cmp	r6, #1
 8005c70:	d108      	bne.n	8005c84 <HAL_SPI_TransmitReceive+0x16c>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005c72:	782a      	ldrb	r2, [r5, #0]
 8005c74:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005c76:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005c78:	3301      	adds	r3, #1
 8005c7a:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8005c7c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005c7e:	3b01      	subs	r3, #1
 8005c80:	b29b      	uxth	r3, r3
 8005c82:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8005c84:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005c86:	2702      	movs	r7, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005c88:	002e      	movs	r6, r5
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c8a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d102      	bne.n	8005c96 <HAL_SPI_TransmitReceive+0x17e>
 8005c90:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d0a0      	beq.n	8005bd8 <HAL_SPI_TransmitReceive+0xc0>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005c96:	6823      	ldr	r3, [r4, #0]
 8005c98:	689a      	ldr	r2, [r3, #8]
 8005c9a:	423a      	tst	r2, r7
 8005c9c:	d00f      	beq.n	8005cbe <HAL_SPI_TransmitReceive+0x1a6>
 8005c9e:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8005ca0:	2a00      	cmp	r2, #0
 8005ca2:	d00c      	beq.n	8005cbe <HAL_SPI_TransmitReceive+0x1a6>
 8005ca4:	2d01      	cmp	r5, #1
 8005ca6:	d10a      	bne.n	8005cbe <HAL_SPI_TransmitReceive+0x1a6>
        txallowed = 0U;
 8005ca8:	2500      	movs	r5, #0
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005caa:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005cac:	7812      	ldrb	r2, [r2, #0]
 8005cae:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8005cb0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005cb2:	3301      	adds	r3, #1
 8005cb4:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8005cb6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005cb8:	3b01      	subs	r3, #1
 8005cba:	b29b      	uxth	r3, r3
 8005cbc:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005cbe:	6823      	ldr	r3, [r4, #0]
 8005cc0:	689a      	ldr	r2, [r3, #8]
 8005cc2:	4232      	tst	r2, r6
 8005cc4:	d00d      	beq.n	8005ce2 <HAL_SPI_TransmitReceive+0x1ca>
 8005cc6:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8005cc8:	2a00      	cmp	r2, #0
 8005cca:	d00a      	beq.n	8005ce2 <HAL_SPI_TransmitReceive+0x1ca>
        txallowed = 1U;
 8005ccc:	0035      	movs	r5, r6
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005cce:	68db      	ldr	r3, [r3, #12]
 8005cd0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005cd2:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr++;
 8005cd4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005cd6:	3301      	adds	r3, #1
 8005cd8:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8005cda:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005cdc:	3b01      	subs	r3, #1
 8005cde:	b29b      	uxth	r3, r3
 8005ce0:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005ce2:	f7fe fa3b 	bl	800415c <HAL_GetTick>
 8005ce6:	9b01      	ldr	r3, [sp, #4]
 8005ce8:	1ac0      	subs	r0, r0, r3
 8005cea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005cec:	4283      	cmp	r3, r0
 8005cee:	d8cc      	bhi.n	8005c8a <HAL_SPI_TransmitReceive+0x172>
 8005cf0:	3301      	adds	r3, #1
 8005cf2:	d0ca      	beq.n	8005c8a <HAL_SPI_TransmitReceive+0x172>
 8005cf4:	e7af      	b.n	8005c56 <HAL_SPI_TransmitReceive+0x13e>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005cf6:	2320      	movs	r3, #32
    errorcode = HAL_ERROR;
 8005cf8:	2001      	movs	r0, #1
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005cfa:	6563      	str	r3, [r4, #84]	; 0x54
 8005cfc:	e7ac      	b.n	8005c58 <HAL_SPI_TransmitReceive+0x140>
	...

08005d00 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d00:	6803      	ldr	r3, [r0, #0]
 8005d02:	4907      	ldr	r1, [pc, #28]	; (8005d20 <UART_EndRxTransfer+0x20>)
 8005d04:	681a      	ldr	r2, [r3, #0]
 8005d06:	400a      	ands	r2, r1
 8005d08:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d0a:	689a      	ldr	r2, [r3, #8]
 8005d0c:	3123      	adds	r1, #35	; 0x23
 8005d0e:	31ff      	adds	r1, #255	; 0xff
 8005d10:	438a      	bics	r2, r1
 8005d12:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d14:	2320      	movs	r3, #32
 8005d16:	6783      	str	r3, [r0, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005d18:	2300      	movs	r3, #0
 8005d1a:	6603      	str	r3, [r0, #96]	; 0x60
}
 8005d1c:	4770      	bx	lr
 8005d1e:	46c0      	nop			; (mov r8, r8)
 8005d20:	fffffedf 	.word	0xfffffedf

08005d24 <HAL_UART_Transmit_DMA>:
{
 8005d24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005d26:	0013      	movs	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8005d28:	6f42      	ldr	r2, [r0, #116]	; 0x74
{
 8005d2a:	0004      	movs	r4, r0
    return HAL_BUSY;
 8005d2c:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 8005d2e:	2a20      	cmp	r2, #32
 8005d30:	d137      	bne.n	8005da2 <HAL_UART_Transmit_DMA+0x7e>
      return HAL_ERROR;
 8005d32:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 8005d34:	2900      	cmp	r1, #0
 8005d36:	d034      	beq.n	8005da2 <HAL_UART_Transmit_DMA+0x7e>
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d032      	beq.n	8005da2 <HAL_UART_Transmit_DMA+0x7e>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d3c:	2280      	movs	r2, #128	; 0x80
 8005d3e:	68a5      	ldr	r5, [r4, #8]
 8005d40:	0152      	lsls	r2, r2, #5
 8005d42:	4295      	cmp	r5, r2
 8005d44:	d104      	bne.n	8005d50 <HAL_UART_Transmit_DMA+0x2c>
 8005d46:	6922      	ldr	r2, [r4, #16]
 8005d48:	2a00      	cmp	r2, #0
 8005d4a:	d101      	bne.n	8005d50 <HAL_UART_Transmit_DMA+0x2c>
      if ((((uint32_t)pData) & 1) != 0)
 8005d4c:	4201      	tst	r1, r0
 8005d4e:	d128      	bne.n	8005da2 <HAL_UART_Transmit_DMA+0x7e>
    __HAL_LOCK(huart);
 8005d50:	0026      	movs	r6, r4
 8005d52:	3670      	adds	r6, #112	; 0x70
 8005d54:	7832      	ldrb	r2, [r6, #0]
    return HAL_BUSY;
 8005d56:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 8005d58:	2a01      	cmp	r2, #1
 8005d5a:	d022      	beq.n	8005da2 <HAL_UART_Transmit_DMA+0x7e>
    huart->TxXferSize  = Size;
 8005d5c:	0022      	movs	r2, r4
    __HAL_LOCK(huart);
 8005d5e:	2501      	movs	r5, #1
    huart->TxXferSize  = Size;
 8005d60:	3250      	adds	r2, #80	; 0x50
    __HAL_LOCK(huart);
 8005d62:	7035      	strb	r5, [r6, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d64:	2700      	movs	r7, #0
    huart->pTxBuffPtr  = pData;
 8005d66:	64e1      	str	r1, [r4, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8005d68:	8013      	strh	r3, [r2, #0]
    huart->TxXferCount = Size;
 8005d6a:	8053      	strh	r3, [r2, #2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d6c:	2221      	movs	r2, #33	; 0x21
    if (huart->hdmatx != NULL)
 8005d6e:	6ea0      	ldr	r0, [r4, #104]	; 0x68
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d70:	67e7      	str	r7, [r4, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d72:	6762      	str	r2, [r4, #116]	; 0x74
    if (huart->hdmatx != NULL)
 8005d74:	42b8      	cmp	r0, r7
 8005d76:	d015      	beq.n	8005da4 <HAL_UART_Transmit_DMA+0x80>
 8005d78:	6822      	ldr	r2, [r4, #0]
      huart->hdmatx->XferAbortCallback = NULL;
 8005d7a:	6387      	str	r7, [r0, #56]	; 0x38
 8005d7c:	9201      	str	r2, [sp, #4]
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005d7e:	4a0e      	ldr	r2, [pc, #56]	; (8005db8 <HAL_UART_Transmit_DMA+0x94>)
 8005d80:	62c2      	str	r2, [r0, #44]	; 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005d82:	4a0e      	ldr	r2, [pc, #56]	; (8005dbc <HAL_UART_Transmit_DMA+0x98>)
 8005d84:	6302      	str	r2, [r0, #48]	; 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005d86:	4a0e      	ldr	r2, [pc, #56]	; (8005dc0 <HAL_UART_Transmit_DMA+0x9c>)
 8005d88:	6342      	str	r2, [r0, #52]	; 0x34
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8005d8a:	9a01      	ldr	r2, [sp, #4]
 8005d8c:	3228      	adds	r2, #40	; 0x28
 8005d8e:	f7fe fcd7 	bl	8004740 <HAL_DMA_Start_IT>
 8005d92:	42b8      	cmp	r0, r7
 8005d94:	d006      	beq.n	8005da4 <HAL_UART_Transmit_DMA+0x80>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005d96:	2310      	movs	r3, #16
        return HAL_ERROR;
 8005d98:	0028      	movs	r0, r5
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005d9a:	67e3      	str	r3, [r4, #124]	; 0x7c
        huart->gState = HAL_UART_STATE_READY;
 8005d9c:	18db      	adds	r3, r3, r3
        __HAL_UNLOCK(huart);
 8005d9e:	7037      	strb	r7, [r6, #0]
        huart->gState = HAL_UART_STATE_READY;
 8005da0:	6763      	str	r3, [r4, #116]	; 0x74
}
 8005da2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005da4:	2240      	movs	r2, #64	; 0x40
    __HAL_UNLOCK(huart);
 8005da6:	2000      	movs	r0, #0
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005da8:	6823      	ldr	r3, [r4, #0]
 8005daa:	621a      	str	r2, [r3, #32]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005dac:	6899      	ldr	r1, [r3, #8]
 8005dae:	1892      	adds	r2, r2, r2
 8005db0:	430a      	orrs	r2, r1
    __HAL_UNLOCK(huart);
 8005db2:	7030      	strb	r0, [r6, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005db4:	609a      	str	r2, [r3, #8]
    return HAL_OK;
 8005db6:	e7f4      	b.n	8005da2 <HAL_UART_Transmit_DMA+0x7e>
 8005db8:	08005dc5 	.word	0x08005dc5
 8005dbc:	08005df7 	.word	0x08005df7
 8005dc0:	08005e03 	.word	0x08005e03

08005dc4 <UART_DMATransmitCplt>:
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005dc4:	2120      	movs	r1, #32
 8005dc6:	6803      	ldr	r3, [r0, #0]
{
 8005dc8:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005dca:	681b      	ldr	r3, [r3, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005dcc:	6a82      	ldr	r2, [r0, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005dce:	400b      	ands	r3, r1
 8005dd0:	d10c      	bne.n	8005dec <UART_DMATransmitCplt+0x28>
  {
    huart->TxXferCount = 0U;
 8005dd2:	0011      	movs	r1, r2
 8005dd4:	3152      	adds	r1, #82	; 0x52
 8005dd6:	800b      	strh	r3, [r1, #0]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005dd8:	2180      	movs	r1, #128	; 0x80
 8005dda:	6813      	ldr	r3, [r2, #0]
 8005ddc:	689a      	ldr	r2, [r3, #8]
 8005dde:	438a      	bics	r2, r1
 8005de0:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005de2:	2240      	movs	r2, #64	; 0x40
 8005de4:	6819      	ldr	r1, [r3, #0]
 8005de6:	430a      	orrs	r2, r1
 8005de8:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005dea:	bd10      	pop	{r4, pc}
    HAL_UART_TxCpltCallback(huart);
 8005dec:	0010      	movs	r0, r2
 8005dee:	f007 ffc3 	bl	800dd78 <HAL_UART_TxCpltCallback>
}
 8005df2:	e7fa      	b.n	8005dea <UART_DMATransmitCplt+0x26>

08005df4 <HAL_UART_TxHalfCpltCallback>:
 8005df4:	4770      	bx	lr

08005df6 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005df6:	b510      	push	{r4, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005df8:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8005dfa:	f7ff fffb 	bl	8005df4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005dfe:	bd10      	pop	{r4, pc}

08005e00 <HAL_UART_ErrorCallback>:
 8005e00:	4770      	bx	lr

08005e02 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005e02:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005e04:	6a84      	ldr	r4, [r0, #40]	; 0x28

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005e06:	6823      	ldr	r3, [r4, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005e08:	6f62      	ldr	r2, [r4, #116]	; 0x74
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005e0a:	6fa1      	ldr	r1, [r4, #120]	; 0x78
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005e0c:	6898      	ldr	r0, [r3, #8]
 8005e0e:	0600      	lsls	r0, r0, #24
 8005e10:	d50b      	bpl.n	8005e2a <UART_DMAError+0x28>
 8005e12:	2a21      	cmp	r2, #33	; 0x21
 8005e14:	d109      	bne.n	8005e2a <UART_DMAError+0x28>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005e16:	0022      	movs	r2, r4
 8005e18:	2000      	movs	r0, #0
 8005e1a:	3252      	adds	r2, #82	; 0x52
 8005e1c:	8010      	strh	r0, [r2, #0]
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005e1e:	681a      	ldr	r2, [r3, #0]
 8005e20:	30c0      	adds	r0, #192	; 0xc0
 8005e22:	4382      	bics	r2, r0
 8005e24:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8005e26:	2220      	movs	r2, #32
 8005e28:	6762      	str	r2, [r4, #116]	; 0x74
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005e2a:	689b      	ldr	r3, [r3, #8]
 8005e2c:	065b      	lsls	r3, r3, #25
 8005e2e:	d508      	bpl.n	8005e42 <UART_DMAError+0x40>
 8005e30:	2922      	cmp	r1, #34	; 0x22
 8005e32:	d106      	bne.n	8005e42 <UART_DMAError+0x40>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005e34:	0023      	movs	r3, r4
 8005e36:	2200      	movs	r2, #0
 8005e38:	335a      	adds	r3, #90	; 0x5a
 8005e3a:	801a      	strh	r2, [r3, #0]
    UART_EndRxTransfer(huart);
 8005e3c:	0020      	movs	r0, r4
 8005e3e:	f7ff ff5f 	bl	8005d00 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005e42:	2310      	movs	r3, #16
 8005e44:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005e46:	0020      	movs	r0, r4
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	67e3      	str	r3, [r4, #124]	; 0x7c
  HAL_UART_ErrorCallback(huart);
 8005e4c:	f7ff ffd8 	bl	8005e00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e50:	bd10      	pop	{r4, pc}
	...

08005e54 <HAL_UART_IRQHandler>:
{
 8005e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005e56:	6803      	ldr	r3, [r0, #0]
{
 8005e58:	0004      	movs	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005e5a:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005e5c:	6818      	ldr	r0, [r3, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005e5e:	689e      	ldr	r6, [r3, #8]
  if (errorflags == 0U)
 8005e60:	0711      	lsls	r1, r2, #28
 8005e62:	d10a      	bne.n	8005e7a <HAL_UART_IRQHandler+0x26>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005e64:	2120      	movs	r1, #32
 8005e66:	420a      	tst	r2, r1
 8005e68:	d100      	bne.n	8005e6c <HAL_UART_IRQHandler+0x18>
 8005e6a:	e06a      	b.n	8005f42 <HAL_UART_IRQHandler+0xee>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005e6c:	4208      	tst	r0, r1
 8005e6e:	d068      	beq.n	8005f42 <HAL_UART_IRQHandler+0xee>
      if (huart->RxISR != NULL)
 8005e70:	6e23      	ldr	r3, [r4, #96]	; 0x60
      huart->TxISR(huart);
 8005e72:	0020      	movs	r0, r4
    if (huart->TxISR != NULL)
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d15a      	bne.n	8005f2e <HAL_UART_IRQHandler+0xda>
 8005e78:	e05a      	b.n	8005f30 <HAL_UART_IRQHandler+0xdc>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005e7a:	2101      	movs	r1, #1
 8005e7c:	0035      	movs	r5, r6
 8005e7e:	400d      	ands	r5, r1
 8005e80:	d103      	bne.n	8005e8a <HAL_UART_IRQHandler+0x36>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8005e82:	2790      	movs	r7, #144	; 0x90
 8005e84:	007f      	lsls	r7, r7, #1
 8005e86:	4238      	tst	r0, r7
 8005e88:	d05b      	beq.n	8005f42 <HAL_UART_IRQHandler+0xee>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005e8a:	420a      	tst	r2, r1
 8005e8c:	d005      	beq.n	8005e9a <HAL_UART_IRQHandler+0x46>
 8005e8e:	05c6      	lsls	r6, r0, #23
 8005e90:	d503      	bpl.n	8005e9a <HAL_UART_IRQHandler+0x46>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005e92:	6219      	str	r1, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005e94:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
 8005e96:	4331      	orrs	r1, r6
 8005e98:	67e1      	str	r1, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005e9a:	2102      	movs	r1, #2
 8005e9c:	420a      	tst	r2, r1
 8005e9e:	d006      	beq.n	8005eae <HAL_UART_IRQHandler+0x5a>
 8005ea0:	2d00      	cmp	r5, #0
 8005ea2:	d004      	beq.n	8005eae <HAL_UART_IRQHandler+0x5a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005ea4:	6219      	str	r1, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005ea6:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
 8005ea8:	1849      	adds	r1, r1, r1
 8005eaa:	4331      	orrs	r1, r6
 8005eac:	67e1      	str	r1, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005eae:	2104      	movs	r1, #4
 8005eb0:	420a      	tst	r2, r1
 8005eb2:	d006      	beq.n	8005ec2 <HAL_UART_IRQHandler+0x6e>
 8005eb4:	2d00      	cmp	r5, #0
 8005eb6:	d004      	beq.n	8005ec2 <HAL_UART_IRQHandler+0x6e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005eb8:	6219      	str	r1, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005eba:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
 8005ebc:	3902      	subs	r1, #2
 8005ebe:	4331      	orrs	r1, r6
 8005ec0:	67e1      	str	r1, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005ec2:	0711      	lsls	r1, r2, #28
 8005ec4:	d508      	bpl.n	8005ed8 <HAL_UART_IRQHandler+0x84>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005ec6:	0681      	lsls	r1, r0, #26
 8005ec8:	d401      	bmi.n	8005ece <HAL_UART_IRQHandler+0x7a>
 8005eca:	2d00      	cmp	r5, #0
 8005ecc:	d004      	beq.n	8005ed8 <HAL_UART_IRQHandler+0x84>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005ece:	2108      	movs	r1, #8
 8005ed0:	6219      	str	r1, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005ed2:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8005ed4:	4319      	orrs	r1, r3
 8005ed6:	67e1      	str	r1, [r4, #124]	; 0x7c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005ed8:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d028      	beq.n	8005f30 <HAL_UART_IRQHandler+0xdc>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005ede:	2320      	movs	r3, #32
 8005ee0:	421a      	tst	r2, r3
 8005ee2:	d006      	beq.n	8005ef2 <HAL_UART_IRQHandler+0x9e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005ee4:	4218      	tst	r0, r3
 8005ee6:	d004      	beq.n	8005ef2 <HAL_UART_IRQHandler+0x9e>
        if (huart->RxISR != NULL)
 8005ee8:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d001      	beq.n	8005ef2 <HAL_UART_IRQHandler+0x9e>
          huart->RxISR(huart);
 8005eee:	0020      	movs	r0, r4
 8005ef0:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005ef2:	6823      	ldr	r3, [r4, #0]
      errorcode = huart->ErrorCode;
 8005ef4:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005ef6:	689b      	ldr	r3, [r3, #8]
        UART_EndRxTransfer(huart);
 8005ef8:	0020      	movs	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005efa:	065b      	lsls	r3, r3, #25
 8005efc:	d402      	bmi.n	8005f04 <HAL_UART_IRQHandler+0xb0>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 8005efe:	2308      	movs	r3, #8
 8005f00:	401d      	ands	r5, r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005f02:	d01a      	beq.n	8005f3a <HAL_UART_IRQHandler+0xe6>
        UART_EndRxTransfer(huart);
 8005f04:	f7ff fefc 	bl	8005d00 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f08:	2140      	movs	r1, #64	; 0x40
 8005f0a:	6823      	ldr	r3, [r4, #0]
 8005f0c:	689a      	ldr	r2, [r3, #8]
 8005f0e:	420a      	tst	r2, r1
 8005f10:	d00f      	beq.n	8005f32 <HAL_UART_IRQHandler+0xde>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f12:	689a      	ldr	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8005f14:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f16:	438a      	bics	r2, r1
 8005f18:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8005f1a:	2800      	cmp	r0, #0
 8005f1c:	d009      	beq.n	8005f32 <HAL_UART_IRQHandler+0xde>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005f1e:	4b1a      	ldr	r3, [pc, #104]	; (8005f88 <HAL_UART_IRQHandler+0x134>)
 8005f20:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005f22:	f7fe fc4d 	bl	80047c0 <HAL_DMA_Abort_IT>
 8005f26:	2800      	cmp	r0, #0
 8005f28:	d002      	beq.n	8005f30 <HAL_UART_IRQHandler+0xdc>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005f2a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8005f2c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005f2e:	4798      	blx	r3
}
 8005f30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            HAL_UART_ErrorCallback(huart);
 8005f32:	0020      	movs	r0, r4
 8005f34:	f7ff ff64 	bl	8005e00 <HAL_UART_ErrorCallback>
 8005f38:	e7fa      	b.n	8005f30 <HAL_UART_IRQHandler+0xdc>
        HAL_UART_ErrorCallback(huart);
 8005f3a:	f7ff ff61 	bl	8005e00 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f3e:	67e5      	str	r5, [r4, #124]	; 0x7c
 8005f40:	e7f6      	b.n	8005f30 <HAL_UART_IRQHandler+0xdc>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005f42:	2180      	movs	r1, #128	; 0x80
 8005f44:	0349      	lsls	r1, r1, #13
 8005f46:	420a      	tst	r2, r1
 8005f48:	d006      	beq.n	8005f58 <HAL_UART_IRQHandler+0x104>
 8005f4a:	0275      	lsls	r5, r6, #9
 8005f4c:	d504      	bpl.n	8005f58 <HAL_UART_IRQHandler+0x104>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005f4e:	6219      	str	r1, [r3, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8005f50:	0020      	movs	r0, r4
 8005f52:	f000 fb3f 	bl	80065d4 <HAL_UARTEx_WakeupCallback>
    return;
 8005f56:	e7eb      	b.n	8005f30 <HAL_UART_IRQHandler+0xdc>
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005f58:	2180      	movs	r1, #128	; 0x80
 8005f5a:	420a      	tst	r2, r1
 8005f5c:	d003      	beq.n	8005f66 <HAL_UART_IRQHandler+0x112>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005f5e:	4208      	tst	r0, r1
 8005f60:	d001      	beq.n	8005f66 <HAL_UART_IRQHandler+0x112>
    if (huart->TxISR != NULL)
 8005f62:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005f64:	e785      	b.n	8005e72 <HAL_UART_IRQHandler+0x1e>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005f66:	2140      	movs	r1, #64	; 0x40
 8005f68:	420a      	tst	r2, r1
 8005f6a:	d0e1      	beq.n	8005f30 <HAL_UART_IRQHandler+0xdc>
 8005f6c:	4208      	tst	r0, r1
 8005f6e:	d0df      	beq.n	8005f30 <HAL_UART_IRQHandler+0xdc>
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005f70:	681a      	ldr	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005f72:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005f74:	438a      	bics	r2, r1
 8005f76:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8005f78:	2320      	movs	r3, #32
 8005f7a:	6763      	str	r3, [r4, #116]	; 0x74
  huart->TxISR = NULL;
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	6663      	str	r3, [r4, #100]	; 0x64
  HAL_UART_TxCpltCallback(huart);
 8005f80:	f007 fefa 	bl	800dd78 <HAL_UART_TxCpltCallback>
 8005f84:	e7d4      	b.n	8005f30 <HAL_UART_IRQHandler+0xdc>
 8005f86:	46c0      	nop			; (mov r8, r8)
 8005f88:	08005f8d 	.word	0x08005f8d

08005f8c <UART_DMAAbortOnError>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005f8c:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8005f8e:	2300      	movs	r3, #0
 8005f90:	0002      	movs	r2, r0
{
 8005f92:	b510      	push	{r4, lr}
  huart->RxXferCount = 0U;
 8005f94:	325a      	adds	r2, #90	; 0x5a
 8005f96:	8013      	strh	r3, [r2, #0]
  huart->TxXferCount = 0U;
 8005f98:	3a08      	subs	r2, #8
 8005f9a:	8013      	strh	r3, [r2, #0]
  HAL_UART_ErrorCallback(huart);
 8005f9c:	f7ff ff30 	bl	8005e00 <HAL_UART_ErrorCallback>
}
 8005fa0:	bd10      	pop	{r4, pc}
	...

08005fa4 <UART_SetConfig>:
{
 8005fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fa6:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005fa8:	6925      	ldr	r5, [r4, #16]
 8005faa:	68a2      	ldr	r2, [r4, #8]
  if (UART_INSTANCE_LOWPOWER(huart))
 8005fac:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005fae:	432a      	orrs	r2, r5
 8005fb0:	6965      	ldr	r5, [r4, #20]
 8005fb2:	69c1      	ldr	r1, [r0, #28]
 8005fb4:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005fb6:	6818      	ldr	r0, [r3, #0]
 8005fb8:	4d81      	ldr	r5, [pc, #516]	; (80061c0 <UART_SetConfig+0x21c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005fba:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005fbc:	4028      	ands	r0, r5
 8005fbe:	4302      	orrs	r2, r0
 8005fc0:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005fc2:	685a      	ldr	r2, [r3, #4]
 8005fc4:	487f      	ldr	r0, [pc, #508]	; (80061c4 <UART_SetConfig+0x220>)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005fc6:	4d80      	ldr	r5, [pc, #512]	; (80061c8 <UART_SetConfig+0x224>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005fc8:	4002      	ands	r2, r0
 8005fca:	68e0      	ldr	r0, [r4, #12]
 8005fcc:	4302      	orrs	r2, r0
 8005fce:	605a      	str	r2, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005fd0:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005fd2:	42ab      	cmp	r3, r5
 8005fd4:	d001      	beq.n	8005fda <UART_SetConfig+0x36>
    tmpreg |= huart->Init.OneBitSampling;
 8005fd6:	6a22      	ldr	r2, [r4, #32]
 8005fd8:	4310      	orrs	r0, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005fda:	689a      	ldr	r2, [r3, #8]
 8005fdc:	4e7b      	ldr	r6, [pc, #492]	; (80061cc <UART_SetConfig+0x228>)
 8005fde:	4032      	ands	r2, r6
 8005fe0:	4302      	orrs	r2, r0
 8005fe2:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005fe4:	4a7a      	ldr	r2, [pc, #488]	; (80061d0 <UART_SetConfig+0x22c>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d114      	bne.n	8006014 <UART_SetConfig+0x70>
 8005fea:	2203      	movs	r2, #3
 8005fec:	4b79      	ldr	r3, [pc, #484]	; (80061d4 <UART_SetConfig+0x230>)
 8005fee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ff0:	4013      	ands	r3, r2
 8005ff2:	4a79      	ldr	r2, [pc, #484]	; (80061d8 <UART_SetConfig+0x234>)
 8005ff4:	5cd0      	ldrb	r0, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ff6:	2380      	movs	r3, #128	; 0x80
 8005ff8:	021b      	lsls	r3, r3, #8
 8005ffa:	4299      	cmp	r1, r3
 8005ffc:	d000      	beq.n	8006000 <UART_SetConfig+0x5c>
 8005ffe:	e09e      	b.n	800613e <UART_SetConfig+0x19a>
    switch (clocksource)
 8006000:	2808      	cmp	r0, #8
 8006002:	d900      	bls.n	8006006 <UART_SetConfig+0x62>
 8006004:	e098      	b.n	8006138 <UART_SetConfig+0x194>
 8006006:	f7fa f87f 	bl	8000108 <__gnu_thumb1_case_uqi>
 800600a:	6b63      	.short	0x6b63
 800600c:	978f976e 	.word	0x978f976e
 8006010:	9797      	.short	0x9797
 8006012:	92          	.byte	0x92
 8006013:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006014:	4a71      	ldr	r2, [pc, #452]	; (80061dc <UART_SetConfig+0x238>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d107      	bne.n	800602a <UART_SetConfig+0x86>
 800601a:	220c      	movs	r2, #12
 800601c:	4b6d      	ldr	r3, [pc, #436]	; (80061d4 <UART_SetConfig+0x230>)
 800601e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006020:	401a      	ands	r2, r3
 8006022:	4b6d      	ldr	r3, [pc, #436]	; (80061d8 <UART_SetConfig+0x234>)
 8006024:	189b      	adds	r3, r3, r2
 8006026:	7918      	ldrb	r0, [r3, #4]
 8006028:	e7e5      	b.n	8005ff6 <UART_SetConfig+0x52>
 800602a:	4a6d      	ldr	r2, [pc, #436]	; (80061e0 <UART_SetConfig+0x23c>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d100      	bne.n	8006032 <UART_SetConfig+0x8e>
 8006030:	e0b4      	b.n	800619c <UART_SetConfig+0x1f8>
 8006032:	4a6c      	ldr	r2, [pc, #432]	; (80061e4 <UART_SetConfig+0x240>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d100      	bne.n	800603a <UART_SetConfig+0x96>
 8006038:	e0b0      	b.n	800619c <UART_SetConfig+0x1f8>
 800603a:	42ab      	cmp	r3, r5
 800603c:	d000      	beq.n	8006040 <UART_SetConfig+0x9c>
 800603e:	e0b8      	b.n	80061b2 <UART_SetConfig+0x20e>
 8006040:	21c0      	movs	r1, #192	; 0xc0
 8006042:	2080      	movs	r0, #128	; 0x80
 8006044:	4a63      	ldr	r2, [pc, #396]	; (80061d4 <UART_SetConfig+0x230>)
 8006046:	0109      	lsls	r1, r1, #4
 8006048:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800604a:	00c0      	lsls	r0, r0, #3
 800604c:	400b      	ands	r3, r1
 800604e:	4283      	cmp	r3, r0
 8006050:	d03b      	beq.n	80060ca <UART_SetConfig+0x126>
 8006052:	d803      	bhi.n	800605c <UART_SetConfig+0xb8>
 8006054:	2b00      	cmp	r3, #0
 8006056:	d00a      	beq.n	800606e <UART_SetConfig+0xca>
        ret = HAL_ERROR;
 8006058:	2501      	movs	r5, #1
 800605a:	e00d      	b.n	8006078 <UART_SetConfig+0xd4>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800605c:	2080      	movs	r0, #128	; 0x80
 800605e:	0100      	lsls	r0, r0, #4
 8006060:	4283      	cmp	r3, r0
 8006062:	d00e      	beq.n	8006082 <UART_SetConfig+0xde>
 8006064:	428b      	cmp	r3, r1
 8006066:	d1f7      	bne.n	8006058 <UART_SetConfig+0xb4>
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8006068:	2080      	movs	r0, #128	; 0x80
 800606a:	0200      	lsls	r0, r0, #8
 800606c:	e010      	b.n	8006090 <UART_SetConfig+0xec>
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 800606e:	f7ff f889 	bl	8005184 <HAL_RCC_GetPCLK1Freq>
 8006072:	2500      	movs	r5, #0
    if (lpuart_ker_ck_pres != 0U)
 8006074:	42a8      	cmp	r0, r5
 8006076:	d10b      	bne.n	8006090 <UART_SetConfig+0xec>
  huart->RxISR = NULL;
 8006078:	2300      	movs	r3, #0
}
 800607a:	0028      	movs	r0, r5
  huart->RxISR = NULL;
 800607c:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 800607e:	6663      	str	r3, [r4, #100]	; 0x64
}
 8006080:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006082:	6810      	ldr	r0, [r2, #0]
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8006084:	4b58      	ldr	r3, [pc, #352]	; (80061e8 <UART_SetConfig+0x244>)
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006086:	06c0      	lsls	r0, r0, #27
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8006088:	17c0      	asrs	r0, r0, #31
 800608a:	4018      	ands	r0, r3
 800608c:	4b57      	ldr	r3, [pc, #348]	; (80061ec <UART_SetConfig+0x248>)
 800608e:	18c0      	adds	r0, r0, r3
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006090:	2203      	movs	r2, #3
 8006092:	6863      	ldr	r3, [r4, #4]
 8006094:	435a      	muls	r2, r3
 8006096:	4282      	cmp	r2, r0
 8006098:	d8de      	bhi.n	8006058 <UART_SetConfig+0xb4>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800609a:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800609c:	4282      	cmp	r2, r0
 800609e:	d3db      	bcc.n	8006058 <UART_SetConfig+0xb4>
        usartdiv = (uint32_t)(UART_DIV_LPUART(lpuart_ker_ck_pres, huart->Init.BaudRate));
 80060a0:	2700      	movs	r7, #0
 80060a2:	0e02      	lsrs	r2, r0, #24
 80060a4:	0201      	lsls	r1, r0, #8
 80060a6:	085e      	lsrs	r6, r3, #1
 80060a8:	1989      	adds	r1, r1, r6
 80060aa:	417a      	adcs	r2, r7
 80060ac:	0008      	movs	r0, r1
 80060ae:	0011      	movs	r1, r2
 80060b0:	001a      	movs	r2, r3
 80060b2:	003b      	movs	r3, r7
 80060b4:	f7fa f9fa 	bl	80004ac <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80060b8:	4b4d      	ldr	r3, [pc, #308]	; (80061f0 <UART_SetConfig+0x24c>)
 80060ba:	18c2      	adds	r2, r0, r3
 80060bc:	4b4d      	ldr	r3, [pc, #308]	; (80061f4 <UART_SetConfig+0x250>)
 80060be:	429a      	cmp	r2, r3
 80060c0:	d8ca      	bhi.n	8006058 <UART_SetConfig+0xb4>
          huart->Instance->BRR = usartdiv;
 80060c2:	6823      	ldr	r3, [r4, #0]
 80060c4:	003d      	movs	r5, r7
 80060c6:	60d8      	str	r0, [r3, #12]
 80060c8:	e7d6      	b.n	8006078 <UART_SetConfig+0xd4>
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80060ca:	f7fe fcd7 	bl	8004a7c <HAL_RCC_GetSysClockFreq>
        break;
 80060ce:	e7d0      	b.n	8006072 <UART_SetConfig+0xce>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80060d0:	f7ff f858 	bl	8005184 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80060d4:	6863      	ldr	r3, [r4, #4]
 80060d6:	0040      	lsls	r0, r0, #1
 80060d8:	085b      	lsrs	r3, r3, #1
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80060da:	18c0      	adds	r0, r0, r3
 80060dc:	6861      	ldr	r1, [r4, #4]
 80060de:	e00b      	b.n	80060f8 <UART_SetConfig+0x154>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80060e0:	f7ff f860 	bl	80051a4 <HAL_RCC_GetPCLK2Freq>
 80060e4:	e7f6      	b.n	80060d4 <UART_SetConfig+0x130>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80060e6:	2510      	movs	r5, #16
 80060e8:	4b3a      	ldr	r3, [pc, #232]	; (80061d4 <UART_SetConfig+0x230>)
 80060ea:	6861      	ldr	r1, [r4, #4]
 80060ec:	681a      	ldr	r2, [r3, #0]
 80060ee:	0848      	lsrs	r0, r1, #1
 80060f0:	4015      	ands	r5, r2
 80060f2:	d006      	beq.n	8006102 <UART_SetConfig+0x15e>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 80060f4:	4b40      	ldr	r3, [pc, #256]	; (80061f8 <UART_SetConfig+0x254>)
 80060f6:	18c0      	adds	r0, r0, r3
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80060f8:	f7fa f824 	bl	8000144 <__udivsi3>
  HAL_StatusTypeDef ret               = HAL_OK;
 80060fc:	2500      	movs	r5, #0
 80060fe:	b283      	uxth	r3, r0
        break;
 8006100:	e004      	b.n	800610c <UART_SetConfig+0x168>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8006102:	4b3e      	ldr	r3, [pc, #248]	; (80061fc <UART_SetConfig+0x258>)
 8006104:	18c0      	adds	r0, r0, r3
 8006106:	f7fa f81d 	bl	8000144 <__udivsi3>
 800610a:	b283      	uxth	r3, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800610c:	0019      	movs	r1, r3
 800610e:	483c      	ldr	r0, [pc, #240]	; (8006200 <UART_SetConfig+0x25c>)
 8006110:	3910      	subs	r1, #16
 8006112:	4281      	cmp	r1, r0
 8006114:	d8a0      	bhi.n	8006058 <UART_SetConfig+0xb4>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006116:	210f      	movs	r1, #15
 8006118:	0018      	movs	r0, r3
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800611a:	071b      	lsls	r3, r3, #28
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800611c:	4388      	bics	r0, r1
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800611e:	0f5b      	lsrs	r3, r3, #29
      huart->Instance->BRR = brrtemp;
 8006120:	6821      	ldr	r1, [r4, #0]
 8006122:	4303      	orrs	r3, r0
      huart->Instance->BRR = usartdiv;
 8006124:	60cb      	str	r3, [r1, #12]
 8006126:	e7a7      	b.n	8006078 <UART_SetConfig+0xd4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8006128:	f7fe fca8 	bl	8004a7c <HAL_RCC_GetSysClockFreq>
 800612c:	e7d2      	b.n	80060d4 <UART_SetConfig+0x130>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800612e:	6863      	ldr	r3, [r4, #4]
 8006130:	0858      	lsrs	r0, r3, #1
 8006132:	2380      	movs	r3, #128	; 0x80
 8006134:	025b      	lsls	r3, r3, #9
 8006136:	e7d0      	b.n	80060da <UART_SetConfig+0x136>
        ret = HAL_ERROR;
 8006138:	2501      	movs	r5, #1
  uint32_t usartdiv                   = 0x00000000U;
 800613a:	2300      	movs	r3, #0
 800613c:	e7e6      	b.n	800610c <UART_SetConfig+0x168>
    switch (clocksource)
 800613e:	2808      	cmp	r0, #8
 8006140:	d83b      	bhi.n	80061ba <UART_SetConfig+0x216>
 8006142:	f7f9 ffe1 	bl	8000108 <__gnu_thumb1_case_uqi>
 8006146:	052f      	.short	0x052f
 8006148:	3a233a08 	.word	0x3a233a08
 800614c:	3a3a      	.short	0x3a3a
 800614e:	26          	.byte	0x26
 800614f:	00          	.byte	0x00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8006150:	f7ff f828 	bl	80051a4 <HAL_RCC_GetPCLK2Freq>
 8006154:	e028      	b.n	80061a8 <UART_SetConfig+0x204>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006156:	2510      	movs	r5, #16
 8006158:	4b1e      	ldr	r3, [pc, #120]	; (80061d4 <UART_SetConfig+0x230>)
 800615a:	6861      	ldr	r1, [r4, #4]
 800615c:	681a      	ldr	r2, [r3, #0]
 800615e:	0848      	lsrs	r0, r1, #1
 8006160:	4015      	ands	r5, r2
 8006162:	d00d      	beq.n	8006180 <UART_SetConfig+0x1dc>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8006164:	4b27      	ldr	r3, [pc, #156]	; (8006204 <UART_SetConfig+0x260>)
 8006166:	18c0      	adds	r0, r0, r3
 8006168:	f7f9 ffec 	bl	8000144 <__udivsi3>
  HAL_StatusTypeDef ret               = HAL_OK;
 800616c:	2500      	movs	r5, #0
 800616e:	b283      	uxth	r3, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006170:	0019      	movs	r1, r3
 8006172:	4823      	ldr	r0, [pc, #140]	; (8006200 <UART_SetConfig+0x25c>)
 8006174:	3910      	subs	r1, #16
 8006176:	4281      	cmp	r1, r0
 8006178:	d900      	bls.n	800617c <UART_SetConfig+0x1d8>
 800617a:	e76d      	b.n	8006058 <UART_SetConfig+0xb4>
      huart->Instance->BRR = usartdiv;
 800617c:	6821      	ldr	r1, [r4, #0]
 800617e:	e7d1      	b.n	8006124 <UART_SetConfig+0x180>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8006180:	4b1a      	ldr	r3, [pc, #104]	; (80061ec <UART_SetConfig+0x248>)
 8006182:	18c0      	adds	r0, r0, r3
 8006184:	f7f9 ffde 	bl	8000144 <__udivsi3>
 8006188:	b283      	uxth	r3, r0
 800618a:	e7f1      	b.n	8006170 <UART_SetConfig+0x1cc>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800618c:	f7fe fc76 	bl	8004a7c <HAL_RCC_GetSysClockFreq>
 8006190:	e00a      	b.n	80061a8 <UART_SetConfig+0x204>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8006192:	6863      	ldr	r3, [r4, #4]
 8006194:	0858      	lsrs	r0, r3, #1
 8006196:	2380      	movs	r3, #128	; 0x80
 8006198:	021b      	lsls	r3, r3, #8
 800619a:	e007      	b.n	80061ac <UART_SetConfig+0x208>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800619c:	2380      	movs	r3, #128	; 0x80
 800619e:	021b      	lsls	r3, r3, #8
 80061a0:	4299      	cmp	r1, r3
 80061a2:	d095      	beq.n	80060d0 <UART_SetConfig+0x12c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80061a4:	f7fe ffee 	bl	8005184 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80061a8:	6863      	ldr	r3, [r4, #4]
 80061aa:	085b      	lsrs	r3, r3, #1
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80061ac:	18c0      	adds	r0, r0, r3
 80061ae:	6861      	ldr	r1, [r4, #4]
 80061b0:	e7da      	b.n	8006168 <UART_SetConfig+0x1c4>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80061b2:	2380      	movs	r3, #128	; 0x80
 80061b4:	021b      	lsls	r3, r3, #8
 80061b6:	4299      	cmp	r1, r3
 80061b8:	d0be      	beq.n	8006138 <UART_SetConfig+0x194>
        ret = HAL_ERROR;
 80061ba:	2501      	movs	r5, #1
  uint32_t usartdiv                   = 0x00000000U;
 80061bc:	2300      	movs	r3, #0
 80061be:	e7d7      	b.n	8006170 <UART_SetConfig+0x1cc>
 80061c0:	efff69f3 	.word	0xefff69f3
 80061c4:	ffffcfff 	.word	0xffffcfff
 80061c8:	40004800 	.word	0x40004800
 80061cc:	fffff4ff 	.word	0xfffff4ff
 80061d0:	40013800 	.word	0x40013800
 80061d4:	40021000 	.word	0x40021000
 80061d8:	0800ec31 	.word	0x0800ec31
 80061dc:	40004400 	.word	0x40004400
 80061e0:	40004c00 	.word	0x40004c00
 80061e4:	40005000 	.word	0x40005000
 80061e8:	ff48e500 	.word	0xff48e500
 80061ec:	00f42400 	.word	0x00f42400
 80061f0:	fffffd00 	.word	0xfffffd00
 80061f4:	000ffcff 	.word	0x000ffcff
 80061f8:	007a1200 	.word	0x007a1200
 80061fc:	01e84800 	.word	0x01e84800
 8006200:	0000ffef 	.word	0x0000ffef
 8006204:	003d0900 	.word	0x003d0900

08006208 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006208:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 800620a:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800620c:	07da      	lsls	r2, r3, #31
 800620e:	d506      	bpl.n	800621e <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006210:	6801      	ldr	r1, [r0, #0]
 8006212:	4c28      	ldr	r4, [pc, #160]	; (80062b4 <UART_AdvFeatureConfig+0xac>)
 8006214:	684a      	ldr	r2, [r1, #4]
 8006216:	4022      	ands	r2, r4
 8006218:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800621a:	4322      	orrs	r2, r4
 800621c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800621e:	079a      	lsls	r2, r3, #30
 8006220:	d506      	bpl.n	8006230 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006222:	6801      	ldr	r1, [r0, #0]
 8006224:	4c24      	ldr	r4, [pc, #144]	; (80062b8 <UART_AdvFeatureConfig+0xb0>)
 8006226:	684a      	ldr	r2, [r1, #4]
 8006228:	4022      	ands	r2, r4
 800622a:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800622c:	4322      	orrs	r2, r4
 800622e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006230:	075a      	lsls	r2, r3, #29
 8006232:	d506      	bpl.n	8006242 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006234:	6801      	ldr	r1, [r0, #0]
 8006236:	4c21      	ldr	r4, [pc, #132]	; (80062bc <UART_AdvFeatureConfig+0xb4>)
 8006238:	684a      	ldr	r2, [r1, #4]
 800623a:	4022      	ands	r2, r4
 800623c:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800623e:	4322      	orrs	r2, r4
 8006240:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006242:	071a      	lsls	r2, r3, #28
 8006244:	d506      	bpl.n	8006254 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006246:	6801      	ldr	r1, [r0, #0]
 8006248:	4c1d      	ldr	r4, [pc, #116]	; (80062c0 <UART_AdvFeatureConfig+0xb8>)
 800624a:	684a      	ldr	r2, [r1, #4]
 800624c:	4022      	ands	r2, r4
 800624e:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8006250:	4322      	orrs	r2, r4
 8006252:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006254:	06da      	lsls	r2, r3, #27
 8006256:	d506      	bpl.n	8006266 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006258:	6801      	ldr	r1, [r0, #0]
 800625a:	4c1a      	ldr	r4, [pc, #104]	; (80062c4 <UART_AdvFeatureConfig+0xbc>)
 800625c:	688a      	ldr	r2, [r1, #8]
 800625e:	4022      	ands	r2, r4
 8006260:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8006262:	4322      	orrs	r2, r4
 8006264:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006266:	069a      	lsls	r2, r3, #26
 8006268:	d506      	bpl.n	8006278 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800626a:	6801      	ldr	r1, [r0, #0]
 800626c:	4c16      	ldr	r4, [pc, #88]	; (80062c8 <UART_AdvFeatureConfig+0xc0>)
 800626e:	688a      	ldr	r2, [r1, #8]
 8006270:	4022      	ands	r2, r4
 8006272:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8006274:	4322      	orrs	r2, r4
 8006276:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006278:	065a      	lsls	r2, r3, #25
 800627a:	d510      	bpl.n	800629e <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800627c:	6801      	ldr	r1, [r0, #0]
 800627e:	4d13      	ldr	r5, [pc, #76]	; (80062cc <UART_AdvFeatureConfig+0xc4>)
 8006280:	684a      	ldr	r2, [r1, #4]
 8006282:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8006284:	402a      	ands	r2, r5
 8006286:	4322      	orrs	r2, r4
 8006288:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800628a:	2280      	movs	r2, #128	; 0x80
 800628c:	0352      	lsls	r2, r2, #13
 800628e:	4294      	cmp	r4, r2
 8006290:	d105      	bne.n	800629e <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006292:	684a      	ldr	r2, [r1, #4]
 8006294:	4c0e      	ldr	r4, [pc, #56]	; (80062d0 <UART_AdvFeatureConfig+0xc8>)
 8006296:	4022      	ands	r2, r4
 8006298:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800629a:	4322      	orrs	r2, r4
 800629c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800629e:	061b      	lsls	r3, r3, #24
 80062a0:	d506      	bpl.n	80062b0 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80062a2:	6802      	ldr	r2, [r0, #0]
 80062a4:	490b      	ldr	r1, [pc, #44]	; (80062d4 <UART_AdvFeatureConfig+0xcc>)
 80062a6:	6853      	ldr	r3, [r2, #4]
 80062a8:	400b      	ands	r3, r1
 80062aa:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80062ac:	430b      	orrs	r3, r1
 80062ae:	6053      	str	r3, [r2, #4]
}
 80062b0:	bd30      	pop	{r4, r5, pc}
 80062b2:	46c0      	nop			; (mov r8, r8)
 80062b4:	fffdffff 	.word	0xfffdffff
 80062b8:	fffeffff 	.word	0xfffeffff
 80062bc:	fffbffff 	.word	0xfffbffff
 80062c0:	ffff7fff 	.word	0xffff7fff
 80062c4:	ffffefff 	.word	0xffffefff
 80062c8:	ffffdfff 	.word	0xffffdfff
 80062cc:	ffefffff 	.word	0xffefffff
 80062d0:	ff9fffff 	.word	0xff9fffff
 80062d4:	fff7ffff 	.word	0xfff7ffff

080062d8 <UART_WaitOnFlagUntilTimeout>:
{
 80062d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062da:	0004      	movs	r4, r0
 80062dc:	000e      	movs	r6, r1
 80062de:	0015      	movs	r5, r2
 80062e0:	001f      	movs	r7, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062e2:	6822      	ldr	r2, [r4, #0]
 80062e4:	69d3      	ldr	r3, [r2, #28]
 80062e6:	4033      	ands	r3, r6
 80062e8:	1b9b      	subs	r3, r3, r6
 80062ea:	4259      	negs	r1, r3
 80062ec:	414b      	adcs	r3, r1
 80062ee:	42ab      	cmp	r3, r5
 80062f0:	d001      	beq.n	80062f6 <UART_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 80062f2:	2000      	movs	r0, #0
 80062f4:	e01b      	b.n	800632e <UART_WaitOnFlagUntilTimeout+0x56>
    if (Timeout != HAL_MAX_DELAY)
 80062f6:	9b06      	ldr	r3, [sp, #24]
 80062f8:	3301      	adds	r3, #1
 80062fa:	d0f3      	beq.n	80062e4 <UART_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062fc:	f7fd ff2e 	bl	800415c <HAL_GetTick>
 8006300:	9b06      	ldr	r3, [sp, #24]
 8006302:	1bc0      	subs	r0, r0, r7
 8006304:	4298      	cmp	r0, r3
 8006306:	d801      	bhi.n	800630c <UART_WaitOnFlagUntilTimeout+0x34>
 8006308:	2b00      	cmp	r3, #0
 800630a:	d1ea      	bne.n	80062e2 <UART_WaitOnFlagUntilTimeout+0xa>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800630c:	6823      	ldr	r3, [r4, #0]
 800630e:	4908      	ldr	r1, [pc, #32]	; (8006330 <UART_WaitOnFlagUntilTimeout+0x58>)
 8006310:	681a      	ldr	r2, [r3, #0]
        __HAL_UNLOCK(huart);
 8006312:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006314:	400a      	ands	r2, r1
 8006316:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006318:	689a      	ldr	r2, [r3, #8]
 800631a:	31a3      	adds	r1, #163	; 0xa3
 800631c:	31ff      	adds	r1, #255	; 0xff
 800631e:	438a      	bics	r2, r1
 8006320:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8006322:	2320      	movs	r3, #32
 8006324:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8006326:	67a3      	str	r3, [r4, #120]	; 0x78
        __HAL_UNLOCK(huart);
 8006328:	2300      	movs	r3, #0
 800632a:	3470      	adds	r4, #112	; 0x70
 800632c:	7023      	strb	r3, [r4, #0]
}
 800632e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006330:	fffffe5f 	.word	0xfffffe5f

08006334 <HAL_UART_Transmit>:
{
 8006334:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006336:	b087      	sub	sp, #28
 8006338:	9305      	str	r3, [sp, #20]
  if (huart->gState == HAL_UART_STATE_READY)
 800633a:	6f43      	ldr	r3, [r0, #116]	; 0x74
{
 800633c:	0004      	movs	r4, r0
 800633e:	000d      	movs	r5, r1
 8006340:	0017      	movs	r7, r2
    return HAL_BUSY;
 8006342:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 8006344:	2b20      	cmp	r3, #32
 8006346:	d149      	bne.n	80063dc <HAL_UART_Transmit+0xa8>
      return  HAL_ERROR;
 8006348:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 800634a:	2900      	cmp	r1, #0
 800634c:	d046      	beq.n	80063dc <HAL_UART_Transmit+0xa8>
 800634e:	2a00      	cmp	r2, #0
 8006350:	d044      	beq.n	80063dc <HAL_UART_Transmit+0xa8>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006352:	2380      	movs	r3, #128	; 0x80
 8006354:	68a2      	ldr	r2, [r4, #8]
 8006356:	015b      	lsls	r3, r3, #5
 8006358:	429a      	cmp	r2, r3
 800635a:	d104      	bne.n	8006366 <HAL_UART_Transmit+0x32>
 800635c:	6923      	ldr	r3, [r4, #16]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d101      	bne.n	8006366 <HAL_UART_Transmit+0x32>
      if ((((uint32_t)pData) & 1) != 0)
 8006362:	4201      	tst	r1, r0
 8006364:	d13a      	bne.n	80063dc <HAL_UART_Transmit+0xa8>
    __HAL_LOCK(huart);
 8006366:	0023      	movs	r3, r4
 8006368:	3370      	adds	r3, #112	; 0x70
 800636a:	781a      	ldrb	r2, [r3, #0]
    return HAL_BUSY;
 800636c:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 800636e:	2a01      	cmp	r2, #1
 8006370:	d034      	beq.n	80063dc <HAL_UART_Transmit+0xa8>
 8006372:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006374:	2600      	movs	r6, #0
    __HAL_LOCK(huart);
 8006376:	701a      	strb	r2, [r3, #0]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006378:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800637a:	67e6      	str	r6, [r4, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800637c:	6763      	str	r3, [r4, #116]	; 0x74
    tickstart = HAL_GetTick();
 800637e:	f7fd feed 	bl	800415c <HAL_GetTick>
    huart->TxXferSize  = Size;
 8006382:	0023      	movs	r3, r4
 8006384:	3350      	adds	r3, #80	; 0x50
 8006386:	801f      	strh	r7, [r3, #0]
    huart->TxXferCount = Size;
 8006388:	3302      	adds	r3, #2
 800638a:	9303      	str	r3, [sp, #12]
 800638c:	801f      	strh	r7, [r3, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800638e:	2380      	movs	r3, #128	; 0x80
 8006390:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 8006392:	9004      	str	r0, [sp, #16]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006394:	015b      	lsls	r3, r3, #5
 8006396:	429a      	cmp	r2, r3
 8006398:	d104      	bne.n	80063a4 <HAL_UART_Transmit+0x70>
 800639a:	6923      	ldr	r3, [r4, #16]
 800639c:	42b3      	cmp	r3, r6
 800639e:	d101      	bne.n	80063a4 <HAL_UART_Transmit+0x70>
 80063a0:	002e      	movs	r6, r5
      pdata8bits  = NULL;
 80063a2:	001d      	movs	r5, r3
    while (huart->TxXferCount > 0U)
 80063a4:	0023      	movs	r3, r4
 80063a6:	3352      	adds	r3, #82	; 0x52
 80063a8:	881a      	ldrh	r2, [r3, #0]
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80063aa:	9b05      	ldr	r3, [sp, #20]
    while (huart->TxXferCount > 0U)
 80063ac:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80063ae:	9300      	str	r3, [sp, #0]
 80063b0:	9b04      	ldr	r3, [sp, #16]
    while (huart->TxXferCount > 0U)
 80063b2:	2a00      	cmp	r2, #0
 80063b4:	d10a      	bne.n	80063cc <HAL_UART_Transmit+0x98>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80063b6:	2140      	movs	r1, #64	; 0x40
 80063b8:	0020      	movs	r0, r4
 80063ba:	f7ff ff8d 	bl	80062d8 <UART_WaitOnFlagUntilTimeout>
 80063be:	2800      	cmp	r0, #0
 80063c0:	d10b      	bne.n	80063da <HAL_UART_Transmit+0xa6>
    huart->gState = HAL_UART_STATE_READY;
 80063c2:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 80063c4:	3470      	adds	r4, #112	; 0x70
    huart->gState = HAL_UART_STATE_READY;
 80063c6:	6063      	str	r3, [r4, #4]
    __HAL_UNLOCK(huart);
 80063c8:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 80063ca:	e007      	b.n	80063dc <HAL_UART_Transmit+0xa8>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80063cc:	2200      	movs	r2, #0
 80063ce:	2180      	movs	r1, #128	; 0x80
 80063d0:	0020      	movs	r0, r4
 80063d2:	f7ff ff81 	bl	80062d8 <UART_WaitOnFlagUntilTimeout>
 80063d6:	2800      	cmp	r0, #0
 80063d8:	d002      	beq.n	80063e0 <HAL_UART_Transmit+0xac>
        return HAL_TIMEOUT;
 80063da:	2003      	movs	r0, #3
}
 80063dc:	b007      	add	sp, #28
 80063de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063e0:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 80063e2:	2d00      	cmp	r5, #0
 80063e4:	d10b      	bne.n	80063fe <HAL_UART_Transmit+0xca>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80063e6:	8833      	ldrh	r3, [r6, #0]
        pdata16bits++;
 80063e8:	3602      	adds	r6, #2
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80063ea:	05db      	lsls	r3, r3, #23
 80063ec:	0ddb      	lsrs	r3, r3, #23
 80063ee:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 80063f0:	9b03      	ldr	r3, [sp, #12]
 80063f2:	9a03      	ldr	r2, [sp, #12]
 80063f4:	881b      	ldrh	r3, [r3, #0]
 80063f6:	3b01      	subs	r3, #1
 80063f8:	b29b      	uxth	r3, r3
 80063fa:	8013      	strh	r3, [r2, #0]
 80063fc:	e7d2      	b.n	80063a4 <HAL_UART_Transmit+0x70>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80063fe:	782b      	ldrb	r3, [r5, #0]
        pdata8bits++;
 8006400:	3501      	adds	r5, #1
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006402:	6293      	str	r3, [r2, #40]	; 0x28
 8006404:	e7f4      	b.n	80063f0 <HAL_UART_Transmit+0xbc>
	...

08006408 <HAL_UART_Receive>:
{
 8006408:	b5f0      	push	{r4, r5, r6, r7, lr}
 800640a:	b087      	sub	sp, #28
 800640c:	9305      	str	r3, [sp, #20]
  if (huart->RxState == HAL_UART_STATE_READY)
 800640e:	6f83      	ldr	r3, [r0, #120]	; 0x78
{
 8006410:	0004      	movs	r4, r0
 8006412:	000d      	movs	r5, r1
 8006414:	0016      	movs	r6, r2
    return HAL_BUSY;
 8006416:	2002      	movs	r0, #2
  if (huart->RxState == HAL_UART_STATE_READY)
 8006418:	2b20      	cmp	r3, #32
 800641a:	d143      	bne.n	80064a4 <HAL_UART_Receive+0x9c>
      return  HAL_ERROR;
 800641c:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 800641e:	2900      	cmp	r1, #0
 8006420:	d040      	beq.n	80064a4 <HAL_UART_Receive+0x9c>
 8006422:	2a00      	cmp	r2, #0
 8006424:	d03e      	beq.n	80064a4 <HAL_UART_Receive+0x9c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006426:	2380      	movs	r3, #128	; 0x80
 8006428:	68a2      	ldr	r2, [r4, #8]
 800642a:	015b      	lsls	r3, r3, #5
 800642c:	429a      	cmp	r2, r3
 800642e:	d104      	bne.n	800643a <HAL_UART_Receive+0x32>
 8006430:	6923      	ldr	r3, [r4, #16]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d101      	bne.n	800643a <HAL_UART_Receive+0x32>
      if ((((uint32_t)pData) & 1) != 0)
 8006436:	4201      	tst	r1, r0
 8006438:	d134      	bne.n	80064a4 <HAL_UART_Receive+0x9c>
    __HAL_LOCK(huart);
 800643a:	0023      	movs	r3, r4
 800643c:	3370      	adds	r3, #112	; 0x70
 800643e:	781a      	ldrb	r2, [r3, #0]
    return HAL_BUSY;
 8006440:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 8006442:	2a01      	cmp	r2, #1
 8006444:	d02e      	beq.n	80064a4 <HAL_UART_Receive+0x9c>
 8006446:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006448:	2700      	movs	r7, #0
    __HAL_LOCK(huart);
 800644a:	701a      	strb	r2, [r3, #0]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800644c:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800644e:	67e7      	str	r7, [r4, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006450:	67a3      	str	r3, [r4, #120]	; 0x78
    tickstart = HAL_GetTick();
 8006452:	f7fd fe83 	bl	800415c <HAL_GetTick>
    huart->RxXferSize  = Size;
 8006456:	0023      	movs	r3, r4
    UART_MASK_COMPUTATION(huart);
 8006458:	2180      	movs	r1, #128	; 0x80
    huart->RxXferSize  = Size;
 800645a:	3358      	adds	r3, #88	; 0x58
    UART_MASK_COMPUTATION(huart);
 800645c:	68a2      	ldr	r2, [r4, #8]
    huart->RxXferSize  = Size;
 800645e:	801e      	strh	r6, [r3, #0]
    huart->RxXferCount = Size;
 8006460:	3302      	adds	r3, #2
 8006462:	9303      	str	r3, [sp, #12]
 8006464:	801e      	strh	r6, [r3, #0]
    tickstart = HAL_GetTick();
 8006466:	9004      	str	r0, [sp, #16]
    UART_MASK_COMPUTATION(huart);
 8006468:	0149      	lsls	r1, r1, #5
 800646a:	3302      	adds	r3, #2
 800646c:	428a      	cmp	r2, r1
 800646e:	d11d      	bne.n	80064ac <HAL_UART_Receive+0xa4>
 8006470:	6921      	ldr	r1, [r4, #16]
 8006472:	42b9      	cmp	r1, r7
 8006474:	d118      	bne.n	80064a8 <HAL_UART_Receive+0xa0>
 8006476:	4925      	ldr	r1, [pc, #148]	; (800650c <HAL_UART_Receive+0x104>)
 8006478:	8019      	strh	r1, [r3, #0]
    uhMask = huart->Mask;
 800647a:	881f      	ldrh	r7, [r3, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800647c:	2380      	movs	r3, #128	; 0x80
      pdata16bits = NULL;
 800647e:	2600      	movs	r6, #0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006480:	015b      	lsls	r3, r3, #5
 8006482:	429a      	cmp	r2, r3
 8006484:	d104      	bne.n	8006490 <HAL_UART_Receive+0x88>
 8006486:	6923      	ldr	r3, [r4, #16]
 8006488:	42b3      	cmp	r3, r6
 800648a:	d101      	bne.n	8006490 <HAL_UART_Receive+0x88>
 800648c:	002e      	movs	r6, r5
      pdata8bits  = NULL;
 800648e:	001d      	movs	r5, r3
    while (huart->RxXferCount > 0U)
 8006490:	0023      	movs	r3, r4
 8006492:	335a      	adds	r3, #90	; 0x5a
 8006494:	8818      	ldrh	r0, [r3, #0]
 8006496:	b280      	uxth	r0, r0
 8006498:	2800      	cmp	r0, #0
 800649a:	d119      	bne.n	80064d0 <HAL_UART_Receive+0xc8>
    huart->RxState = HAL_UART_STATE_READY;
 800649c:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 800649e:	3470      	adds	r4, #112	; 0x70
    huart->RxState = HAL_UART_STATE_READY;
 80064a0:	60a3      	str	r3, [r4, #8]
    __HAL_UNLOCK(huart);
 80064a2:	7020      	strb	r0, [r4, #0]
}
 80064a4:	b007      	add	sp, #28
 80064a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    UART_MASK_COMPUTATION(huart);
 80064a8:	21ff      	movs	r1, #255	; 0xff
 80064aa:	e7e5      	b.n	8006478 <HAL_UART_Receive+0x70>
 80064ac:	2a00      	cmp	r2, #0
 80064ae:	d104      	bne.n	80064ba <HAL_UART_Receive+0xb2>
 80064b0:	6921      	ldr	r1, [r4, #16]
 80064b2:	2900      	cmp	r1, #0
 80064b4:	d0f8      	beq.n	80064a8 <HAL_UART_Receive+0xa0>
 80064b6:	217f      	movs	r1, #127	; 0x7f
 80064b8:	e7de      	b.n	8006478 <HAL_UART_Receive+0x70>
 80064ba:	2180      	movs	r1, #128	; 0x80
 80064bc:	0549      	lsls	r1, r1, #21
 80064be:	428a      	cmp	r2, r1
 80064c0:	d104      	bne.n	80064cc <HAL_UART_Receive+0xc4>
 80064c2:	6921      	ldr	r1, [r4, #16]
 80064c4:	2900      	cmp	r1, #0
 80064c6:	d0f6      	beq.n	80064b6 <HAL_UART_Receive+0xae>
 80064c8:	213f      	movs	r1, #63	; 0x3f
 80064ca:	e7d5      	b.n	8006478 <HAL_UART_Receive+0x70>
 80064cc:	801f      	strh	r7, [r3, #0]
 80064ce:	e7d4      	b.n	800647a <HAL_UART_Receive+0x72>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80064d0:	9b05      	ldr	r3, [sp, #20]
 80064d2:	2200      	movs	r2, #0
 80064d4:	9300      	str	r3, [sp, #0]
 80064d6:	2120      	movs	r1, #32
 80064d8:	9b04      	ldr	r3, [sp, #16]
 80064da:	0020      	movs	r0, r4
 80064dc:	f7ff fefc 	bl	80062d8 <UART_WaitOnFlagUntilTimeout>
 80064e0:	2800      	cmp	r0, #0
 80064e2:	d110      	bne.n	8006506 <HAL_UART_Receive+0xfe>
 80064e4:	6823      	ldr	r3, [r4, #0]
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80064e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064e8:	403b      	ands	r3, r7
      if (pdata8bits == NULL)
 80064ea:	2d00      	cmp	r5, #0
 80064ec:	d108      	bne.n	8006500 <HAL_UART_Receive+0xf8>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80064ee:	8033      	strh	r3, [r6, #0]
        pdata16bits++;
 80064f0:	3602      	adds	r6, #2
      huart->RxXferCount--;
 80064f2:	9b03      	ldr	r3, [sp, #12]
 80064f4:	9a03      	ldr	r2, [sp, #12]
 80064f6:	881b      	ldrh	r3, [r3, #0]
 80064f8:	3b01      	subs	r3, #1
 80064fa:	b29b      	uxth	r3, r3
 80064fc:	8013      	strh	r3, [r2, #0]
 80064fe:	e7c7      	b.n	8006490 <HAL_UART_Receive+0x88>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006500:	702b      	strb	r3, [r5, #0]
        pdata8bits++;
 8006502:	3501      	adds	r5, #1
 8006504:	e7f5      	b.n	80064f2 <HAL_UART_Receive+0xea>
        return HAL_TIMEOUT;
 8006506:	2003      	movs	r0, #3
 8006508:	e7cc      	b.n	80064a4 <HAL_UART_Receive+0x9c>
 800650a:	46c0      	nop			; (mov r8, r8)
 800650c:	000001ff 	.word	0x000001ff

08006510 <UART_CheckIdleState>:
{
 8006510:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006512:	2600      	movs	r6, #0
{
 8006514:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006516:	67c6      	str	r6, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8006518:	f7fd fe20 	bl	800415c <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800651c:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800651e:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	071b      	lsls	r3, r3, #28
 8006524:	d415      	bmi.n	8006552 <UART_CheckIdleState+0x42>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006526:	6823      	ldr	r3, [r4, #0]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	075b      	lsls	r3, r3, #29
 800652c:	d50a      	bpl.n	8006544 <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800652e:	2180      	movs	r1, #128	; 0x80
 8006530:	4b0e      	ldr	r3, [pc, #56]	; (800656c <UART_CheckIdleState+0x5c>)
 8006532:	2200      	movs	r2, #0
 8006534:	9300      	str	r3, [sp, #0]
 8006536:	03c9      	lsls	r1, r1, #15
 8006538:	002b      	movs	r3, r5
 800653a:	0020      	movs	r0, r4
 800653c:	f7ff fecc 	bl	80062d8 <UART_WaitOnFlagUntilTimeout>
 8006540:	2800      	cmp	r0, #0
 8006542:	d111      	bne.n	8006568 <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 8006544:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8006546:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8006548:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800654a:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 800654c:	3470      	adds	r4, #112	; 0x70
 800654e:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 8006550:	e00b      	b.n	800656a <UART_CheckIdleState+0x5a>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006552:	2180      	movs	r1, #128	; 0x80
 8006554:	4b05      	ldr	r3, [pc, #20]	; (800656c <UART_CheckIdleState+0x5c>)
 8006556:	0032      	movs	r2, r6
 8006558:	9300      	str	r3, [sp, #0]
 800655a:	0389      	lsls	r1, r1, #14
 800655c:	0003      	movs	r3, r0
 800655e:	0020      	movs	r0, r4
 8006560:	f7ff feba 	bl	80062d8 <UART_WaitOnFlagUntilTimeout>
 8006564:	2800      	cmp	r0, #0
 8006566:	d0de      	beq.n	8006526 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8006568:	2003      	movs	r0, #3
}
 800656a:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 800656c:	01ffffff 	.word	0x01ffffff

08006570 <HAL_UART_Init>:
{
 8006570:	b510      	push	{r4, lr}
 8006572:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8006574:	d101      	bne.n	800657a <HAL_UART_Init+0xa>
    return HAL_ERROR;
 8006576:	2001      	movs	r0, #1
}
 8006578:	bd10      	pop	{r4, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 800657a:	6f43      	ldr	r3, [r0, #116]	; 0x74
 800657c:	2b00      	cmp	r3, #0
 800657e:	d104      	bne.n	800658a <HAL_UART_Init+0x1a>
    huart->Lock = HAL_UNLOCKED;
 8006580:	0002      	movs	r2, r0
 8006582:	3270      	adds	r2, #112	; 0x70
 8006584:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 8006586:	f007 fc3b 	bl	800de00 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 800658a:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 800658c:	2101      	movs	r1, #1
 800658e:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8006590:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8006592:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006594:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 8006596:	438b      	bics	r3, r1
 8006598:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800659a:	f7ff fd03 	bl	8005fa4 <UART_SetConfig>
 800659e:	2801      	cmp	r0, #1
 80065a0:	d0e9      	beq.n	8006576 <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80065a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d002      	beq.n	80065ae <HAL_UART_Init+0x3e>
    UART_AdvFeatureConfig(huart);
 80065a8:	0020      	movs	r0, r4
 80065aa:	f7ff fe2d 	bl	8006208 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80065ae:	6823      	ldr	r3, [r4, #0]
 80065b0:	4907      	ldr	r1, [pc, #28]	; (80065d0 <HAL_UART_Init+0x60>)
 80065b2:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 80065b4:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80065b6:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80065b8:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80065ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80065bc:	689a      	ldr	r2, [r3, #8]
 80065be:	438a      	bics	r2, r1
 80065c0:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80065c2:	2201      	movs	r2, #1
 80065c4:	6819      	ldr	r1, [r3, #0]
 80065c6:	430a      	orrs	r2, r1
 80065c8:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 80065ca:	f7ff ffa1 	bl	8006510 <UART_CheckIdleState>
 80065ce:	e7d3      	b.n	8006578 <HAL_UART_Init+0x8>
 80065d0:	ffffb7ff 	.word	0xffffb7ff

080065d4 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80065d4:	4770      	bx	lr

080065d6 <xor_block>:
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 80065d6:	780a      	ldrb	r2, [r1, #0]
 80065d8:	7803      	ldrb	r3, [r0, #0]
 80065da:	4053      	eors	r3, r2
 80065dc:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 80065de:	784a      	ldrb	r2, [r1, #1]
 80065e0:	7843      	ldrb	r3, [r0, #1]
 80065e2:	4053      	eors	r3, r2
 80065e4:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 80065e6:	788a      	ldrb	r2, [r1, #2]
 80065e8:	7883      	ldrb	r3, [r0, #2]
 80065ea:	4053      	eors	r3, r2
 80065ec:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 80065ee:	78ca      	ldrb	r2, [r1, #3]
 80065f0:	78c3      	ldrb	r3, [r0, #3]
 80065f2:	4053      	eors	r3, r2
 80065f4:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 80065f6:	790a      	ldrb	r2, [r1, #4]
 80065f8:	7903      	ldrb	r3, [r0, #4]
 80065fa:	4053      	eors	r3, r2
 80065fc:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 80065fe:	794a      	ldrb	r2, [r1, #5]
 8006600:	7943      	ldrb	r3, [r0, #5]
 8006602:	4053      	eors	r3, r2
 8006604:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 8006606:	798a      	ldrb	r2, [r1, #6]
 8006608:	7983      	ldrb	r3, [r0, #6]
 800660a:	4053      	eors	r3, r2
 800660c:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800660e:	79ca      	ldrb	r2, [r1, #7]
 8006610:	79c3      	ldrb	r3, [r0, #7]
 8006612:	4053      	eors	r3, r2
 8006614:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 8006616:	7a0a      	ldrb	r2, [r1, #8]
 8006618:	7a03      	ldrb	r3, [r0, #8]
 800661a:	4053      	eors	r3, r2
 800661c:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800661e:	7a4a      	ldrb	r2, [r1, #9]
 8006620:	7a43      	ldrb	r3, [r0, #9]
 8006622:	4053      	eors	r3, r2
 8006624:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 8006626:	7a8a      	ldrb	r2, [r1, #10]
 8006628:	7a83      	ldrb	r3, [r0, #10]
 800662a:	4053      	eors	r3, r2
 800662c:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800662e:	7aca      	ldrb	r2, [r1, #11]
 8006630:	7ac3      	ldrb	r3, [r0, #11]
 8006632:	4053      	eors	r3, r2
 8006634:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 8006636:	7b0a      	ldrb	r2, [r1, #12]
 8006638:	7b03      	ldrb	r3, [r0, #12]
 800663a:	4053      	eors	r3, r2
 800663c:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800663e:	7b4a      	ldrb	r2, [r1, #13]
 8006640:	7b43      	ldrb	r3, [r0, #13]
 8006642:	4053      	eors	r3, r2
 8006644:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 8006646:	7b8a      	ldrb	r2, [r1, #14]
 8006648:	7b83      	ldrb	r3, [r0, #14]
 800664a:	4053      	eors	r3, r2
 800664c:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800664e:	7bca      	ldrb	r2, [r1, #15]
 8006650:	7bc3      	ldrb	r3, [r0, #15]
 8006652:	4053      	eors	r3, r2
 8006654:	73c3      	strb	r3, [r0, #15]
#endif
}
 8006656:	4770      	bx	lr

08006658 <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 8006658:	b510      	push	{r4, lr}
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800665a:	780b      	ldrb	r3, [r1, #0]
 800665c:	7814      	ldrb	r4, [r2, #0]
 800665e:	4063      	eors	r3, r4
 8006660:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 8006662:	7854      	ldrb	r4, [r2, #1]
 8006664:	784b      	ldrb	r3, [r1, #1]
 8006666:	4063      	eors	r3, r4
 8006668:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800666a:	7894      	ldrb	r4, [r2, #2]
 800666c:	788b      	ldrb	r3, [r1, #2]
 800666e:	4063      	eors	r3, r4
 8006670:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 8006672:	78d4      	ldrb	r4, [r2, #3]
 8006674:	78cb      	ldrb	r3, [r1, #3]
 8006676:	4063      	eors	r3, r4
 8006678:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800667a:	7914      	ldrb	r4, [r2, #4]
 800667c:	790b      	ldrb	r3, [r1, #4]
 800667e:	4063      	eors	r3, r4
 8006680:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 8006682:	7954      	ldrb	r4, [r2, #5]
 8006684:	794b      	ldrb	r3, [r1, #5]
 8006686:	4063      	eors	r3, r4
 8006688:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800668a:	7994      	ldrb	r4, [r2, #6]
 800668c:	798b      	ldrb	r3, [r1, #6]
 800668e:	4063      	eors	r3, r4
 8006690:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 8006692:	79d4      	ldrb	r4, [r2, #7]
 8006694:	79cb      	ldrb	r3, [r1, #7]
 8006696:	4063      	eors	r3, r4
 8006698:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800669a:	7a14      	ldrb	r4, [r2, #8]
 800669c:	7a0b      	ldrb	r3, [r1, #8]
 800669e:	4063      	eors	r3, r4
 80066a0:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 80066a2:	7a4b      	ldrb	r3, [r1, #9]
 80066a4:	7a54      	ldrb	r4, [r2, #9]
 80066a6:	4063      	eors	r3, r4
 80066a8:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 80066aa:	7a8b      	ldrb	r3, [r1, #10]
 80066ac:	7a94      	ldrb	r4, [r2, #10]
 80066ae:	4063      	eors	r3, r4
 80066b0:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 80066b2:	7ad4      	ldrb	r4, [r2, #11]
 80066b4:	7acb      	ldrb	r3, [r1, #11]
 80066b6:	4063      	eors	r3, r4
 80066b8:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 80066ba:	7b14      	ldrb	r4, [r2, #12]
 80066bc:	7b0b      	ldrb	r3, [r1, #12]
 80066be:	4063      	eors	r3, r4
 80066c0:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 80066c2:	7b54      	ldrb	r4, [r2, #13]
 80066c4:	7b4b      	ldrb	r3, [r1, #13]
 80066c6:	4063      	eors	r3, r4
 80066c8:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 80066ca:	7b94      	ldrb	r4, [r2, #14]
 80066cc:	7b8b      	ldrb	r3, [r1, #14]
 80066ce:	4063      	eors	r3, r4
 80066d0:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 80066d2:	7bcb      	ldrb	r3, [r1, #15]
 80066d4:	7bd2      	ldrb	r2, [r2, #15]
 80066d6:	4053      	eors	r3, r2
 80066d8:	73c3      	strb	r3, [r0, #15]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 80066da:	bd10      	pop	{r4, pc}

080066dc <aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type aes_set_key( const uint8_t key[], length_type keylen, aes_context ctx[1] )
{
 80066dc:	000b      	movs	r3, r1
 80066de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80066e0:	3b10      	subs	r3, #16
 80066e2:	b2db      	uxtb	r3, r3
 80066e4:	b087      	sub	sp, #28
 80066e6:	000f      	movs	r7, r1
 80066e8:	0015      	movs	r5, r2
 80066ea:	2b10      	cmp	r3, #16
 80066ec:	d805      	bhi.n	80066fa <aes_set_key+0x1e>
 80066ee:	2201      	movs	r2, #1
 80066f0:	409a      	lsls	r2, r3
 80066f2:	493a      	ldr	r1, [pc, #232]	; (80067dc <aes_set_key+0x100>)
        break;
    default:
        ctx->rnd = 0;
        return ( uint8_t )-1;
    }
    block_copy_nn(ctx->ksch, key, keylen);
 80066f4:	2300      	movs	r3, #0
 80066f6:	420a      	tst	r2, r1
 80066f8:	d105      	bne.n	8006706 <aes_set_key+0x2a>
        ctx->rnd = 0;
 80066fa:	2300      	movs	r3, #0
        return ( uint8_t )-1;
 80066fc:	20ff      	movs	r0, #255	; 0xff
        ctx->rnd = 0;
 80066fe:	35f0      	adds	r5, #240	; 0xf0
 8006700:	702b      	strb	r3, [r5, #0]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
    }
    return 0;
}
 8006702:	b007      	add	sp, #28
 8006704:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *d++ = *s++;
 8006706:	5cc2      	ldrb	r2, [r0, r3]
 8006708:	54ea      	strb	r2, [r5, r3]
 800670a:	3301      	adds	r3, #1
    while( nn-- )
 800670c:	429f      	cmp	r7, r3
 800670e:	d1fa      	bne.n	8006706 <aes_set_key+0x2a>
    hi = (keylen + 28) << 2;
 8006710:	003b      	movs	r3, r7
    ctx->rnd = (hi >> 4) - 1;
 8006712:	002a      	movs	r2, r5
    hi = (keylen + 28) << 2;
 8006714:	331c      	adds	r3, #28
 8006716:	009b      	lsls	r3, r3, #2
 8006718:	b2db      	uxtb	r3, r3
 800671a:	9305      	str	r3, [sp, #20]
    ctx->rnd = (hi >> 4) - 1;
 800671c:	091b      	lsrs	r3, r3, #4
 800671e:	3b01      	subs	r3, #1
 8006720:	32f0      	adds	r2, #240	; 0xf0
 8006722:	7013      	strb	r3, [r2, #0]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8006724:	2301      	movs	r3, #1
    ctx->rnd = (hi >> 4) - 1;
 8006726:	003c      	movs	r4, r7
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8006728:	9304      	str	r3, [sp, #16]
        t0 = ctx->ksch[cc - 4];
 800672a:	192b      	adds	r3, r5, r4
 800672c:	1f1a      	subs	r2, r3, #4
 800672e:	7816      	ldrb	r6, [r2, #0]
        t1 = ctx->ksch[cc - 3];
 8006730:	1eda      	subs	r2, r3, #3
 8006732:	7812      	ldrb	r2, [r2, #0]
        if( cc % keylen == 0 )
 8006734:	0039      	movs	r1, r7
        t1 = ctx->ksch[cc - 3];
 8006736:	9201      	str	r2, [sp, #4]
        t2 = ctx->ksch[cc - 2];
 8006738:	1e9a      	subs	r2, r3, #2
        t3 = ctx->ksch[cc - 1];
 800673a:	3b01      	subs	r3, #1
        t2 = ctx->ksch[cc - 2];
 800673c:	7812      	ldrb	r2, [r2, #0]
        t3 = ctx->ksch[cc - 1];
 800673e:	781b      	ldrb	r3, [r3, #0]
        if( cc % keylen == 0 )
 8006740:	0020      	movs	r0, r4
        t2 = ctx->ksch[cc - 2];
 8006742:	9202      	str	r2, [sp, #8]
        t3 = ctx->ksch[cc - 1];
 8006744:	9303      	str	r3, [sp, #12]
        if( cc % keylen == 0 )
 8006746:	f7f9 fd83 	bl	8000250 <__aeabi_uidivmod>
 800674a:	b2c9      	uxtb	r1, r1
 800674c:	2900      	cmp	r1, #0
 800674e:	d133      	bne.n	80067b8 <aes_set_key+0xdc>
            t0 = s_box(t1) ^ rc;
 8006750:	4b23      	ldr	r3, [pc, #140]	; (80067e0 <aes_set_key+0x104>)
 8006752:	9a01      	ldr	r2, [sp, #4]
            t1 = s_box(t2);
 8006754:	9902      	ldr	r1, [sp, #8]
            t0 = s_box(t1) ^ rc;
 8006756:	5c9a      	ldrb	r2, [r3, r2]
 8006758:	9b04      	ldr	r3, [sp, #16]
 800675a:	405a      	eors	r2, r3
            t1 = s_box(t2);
 800675c:	4b20      	ldr	r3, [pc, #128]	; (80067e0 <aes_set_key+0x104>)
 800675e:	5c5b      	ldrb	r3, [r3, r1]
            t2 = s_box(t3);
 8006760:	9903      	ldr	r1, [sp, #12]
            t1 = s_box(t2);
 8006762:	9301      	str	r3, [sp, #4]
            t2 = s_box(t3);
 8006764:	4b1e      	ldr	r3, [pc, #120]	; (80067e0 <aes_set_key+0x104>)
 8006766:	5c5b      	ldrb	r3, [r3, r1]
            rc = f2(rc);
 8006768:	211b      	movs	r1, #27
            t2 = s_box(t3);
 800676a:	9302      	str	r3, [sp, #8]
            t3 = s_box(tt);
 800676c:	4b1c      	ldr	r3, [pc, #112]	; (80067e0 <aes_set_key+0x104>)
 800676e:	5d9b      	ldrb	r3, [r3, r6]
            t0 = s_box(t1) ^ rc;
 8006770:	0016      	movs	r6, r2
            t3 = s_box(tt);
 8006772:	9303      	str	r3, [sp, #12]
            rc = f2(rc);
 8006774:	9b04      	ldr	r3, [sp, #16]
 8006776:	09db      	lsrs	r3, r3, #7
 8006778:	434b      	muls	r3, r1
 800677a:	9904      	ldr	r1, [sp, #16]
 800677c:	0049      	lsls	r1, r1, #1
 800677e:	404b      	eors	r3, r1
 8006780:	b2db      	uxtb	r3, r3
 8006782:	9304      	str	r3, [sp, #16]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 8006784:	1be3      	subs	r3, r4, r7
 8006786:	b2db      	uxtb	r3, r3
 8006788:	5cea      	ldrb	r2, [r5, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800678a:	18eb      	adds	r3, r5, r3
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800678c:	4056      	eors	r6, r2
 800678e:	552e      	strb	r6, [r5, r4]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 8006790:	785a      	ldrb	r2, [r3, #1]
 8006792:	9801      	ldr	r0, [sp, #4]
 8006794:	1929      	adds	r1, r5, r4
 8006796:	4050      	eors	r0, r2
 8006798:	7048      	strb	r0, [r1, #1]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800679a:	789a      	ldrb	r2, [r3, #2]
 800679c:	9802      	ldr	r0, [sp, #8]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800679e:	3404      	adds	r4, #4
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 80067a0:	4050      	eors	r0, r2
 80067a2:	7088      	strb	r0, [r1, #2]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 80067a4:	78db      	ldrb	r3, [r3, #3]
 80067a6:	9a03      	ldr	r2, [sp, #12]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 80067a8:	b2e4      	uxtb	r4, r4
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 80067aa:	405a      	eors	r2, r3
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 80067ac:	9b05      	ldr	r3, [sp, #20]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 80067ae:	70ca      	strb	r2, [r1, #3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 80067b0:	42a3      	cmp	r3, r4
 80067b2:	d8ba      	bhi.n	800672a <aes_set_key+0x4e>
    return 0;
 80067b4:	2000      	movs	r0, #0
 80067b6:	e7a4      	b.n	8006702 <aes_set_key+0x26>
        else if( keylen > 24 && cc % keylen == 16 )
 80067b8:	2f18      	cmp	r7, #24
 80067ba:	d9e3      	bls.n	8006784 <aes_set_key+0xa8>
 80067bc:	2910      	cmp	r1, #16
 80067be:	d1e1      	bne.n	8006784 <aes_set_key+0xa8>
            t1 = s_box(t1);
 80067c0:	9a01      	ldr	r2, [sp, #4]
            t0 = s_box(t0);
 80067c2:	4b07      	ldr	r3, [pc, #28]	; (80067e0 <aes_set_key+0x104>)
 80067c4:	5d9e      	ldrb	r6, [r3, r6]
            t1 = s_box(t1);
 80067c6:	5c9b      	ldrb	r3, [r3, r2]
            t2 = s_box(t2);
 80067c8:	9a02      	ldr	r2, [sp, #8]
            t1 = s_box(t1);
 80067ca:	9301      	str	r3, [sp, #4]
            t2 = s_box(t2);
 80067cc:	4b04      	ldr	r3, [pc, #16]	; (80067e0 <aes_set_key+0x104>)
 80067ce:	5c9b      	ldrb	r3, [r3, r2]
            t3 = s_box(t3);
 80067d0:	9a03      	ldr	r2, [sp, #12]
            t2 = s_box(t2);
 80067d2:	9302      	str	r3, [sp, #8]
            t3 = s_box(t3);
 80067d4:	4b02      	ldr	r3, [pc, #8]	; (80067e0 <aes_set_key+0x104>)
 80067d6:	5c9b      	ldrb	r3, [r3, r2]
 80067d8:	9303      	str	r3, [sp, #12]
 80067da:	e7d3      	b.n	8006784 <aes_set_key+0xa8>
 80067dc:	00010101 	.word	0x00010101
 80067e0:	0800ee42 	.word	0x0800ee42

080067e4 <aes_encrypt>:

/*  Encrypt a single block of 16 bytes */

return_type aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const aes_context ctx[1] )
{
    if( ctx->rnd )
 80067e4:	0013      	movs	r3, r2
{
 80067e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80067e8:	b0a5      	sub	sp, #148	; 0x94
    if( ctx->rnd )
 80067ea:	33f0      	adds	r3, #240	; 0xf0
{
 80067ec:	911f      	str	r1, [sp, #124]	; 0x7c
 80067ee:	0016      	movs	r6, r2
    if( ctx->rnd )
 80067f0:	781a      	ldrb	r2, [r3, #0]
#endif
        shift_sub_rows( s1 );
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
    }
    else
        return ( uint8_t )-1;
 80067f2:	23ff      	movs	r3, #255	; 0xff
    if( ctx->rnd )
 80067f4:	2a00      	cmp	r2, #0
 80067f6:	d100      	bne.n	80067fa <aes_encrypt+0x16>
 80067f8:	e08a      	b.n	8006910 <aes_encrypt+0x12c>
        copy_and_key( s1, in, ctx->ksch );
 80067fa:	0001      	movs	r1, r0
 80067fc:	0032      	movs	r2, r6
 80067fe:	a820      	add	r0, sp, #128	; 0x80
 8006800:	f7ff ff2a 	bl	8006658 <copy_and_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 8006804:	2501      	movs	r5, #1
 8006806:	012a      	lsls	r2, r5, #4
 8006808:	18b3      	adds	r3, r6, r2
 800680a:	931e      	str	r3, [sp, #120]	; 0x78
 800680c:	ab20      	add	r3, sp, #128	; 0x80
 800680e:	781b      	ldrb	r3, [r3, #0]
 8006810:	9301      	str	r3, [sp, #4]
 8006812:	ab20      	add	r3, sp, #128	; 0x80
 8006814:	795b      	ldrb	r3, [r3, #5]
 8006816:	9302      	str	r3, [sp, #8]
 8006818:	ab20      	add	r3, sp, #128	; 0x80
 800681a:	7a9f      	ldrb	r7, [r3, #10]
 800681c:	4b91      	ldr	r3, [pc, #580]	; (8006a64 <aes_encrypt+0x280>)
 800681e:	5dda      	ldrb	r2, [r3, r7]
 8006820:	9203      	str	r2, [sp, #12]
 8006822:	aa20      	add	r2, sp, #128	; 0x80
 8006824:	7bd2      	ldrb	r2, [r2, #15]
 8006826:	9204      	str	r2, [sp, #16]
 8006828:	5c9a      	ldrb	r2, [r3, r2]
 800682a:	9205      	str	r2, [sp, #20]
 800682c:	9a01      	ldr	r2, [sp, #4]
 800682e:	5c98      	ldrb	r0, [r3, r2]
 8006830:	9a02      	ldr	r2, [sp, #8]
 8006832:	5c9a      	ldrb	r2, [r3, r2]
 8006834:	9206      	str	r2, [sp, #24]
 8006836:	aa20      	add	r2, sp, #128	; 0x80
 8006838:	7912      	ldrb	r2, [r2, #4]
 800683a:	9207      	str	r2, [sp, #28]
 800683c:	aa20      	add	r2, sp, #128	; 0x80
 800683e:	7a52      	ldrb	r2, [r2, #9]
 8006840:	9208      	str	r2, [sp, #32]
 8006842:	aa20      	add	r2, sp, #128	; 0x80
 8006844:	7b92      	ldrb	r2, [r2, #14]
 8006846:	9209      	str	r2, [sp, #36]	; 0x24
 8006848:	5c9a      	ldrb	r2, [r3, r2]
 800684a:	920a      	str	r2, [sp, #40]	; 0x28
 800684c:	aa20      	add	r2, sp, #128	; 0x80
 800684e:	78d2      	ldrb	r2, [r2, #3]
 8006850:	920b      	str	r2, [sp, #44]	; 0x2c
 8006852:	5c9a      	ldrb	r2, [r3, r2]
 8006854:	4694      	mov	ip, r2
 8006856:	9a07      	ldr	r2, [sp, #28]
 8006858:	5c9a      	ldrb	r2, [r3, r2]
 800685a:	920c      	str	r2, [sp, #48]	; 0x30
 800685c:	9a08      	ldr	r2, [sp, #32]
 800685e:	5c9a      	ldrb	r2, [r3, r2]
 8006860:	920d      	str	r2, [sp, #52]	; 0x34
 8006862:	aa20      	add	r2, sp, #128	; 0x80
 8006864:	7a12      	ldrb	r2, [r2, #8]
 8006866:	920e      	str	r2, [sp, #56]	; 0x38
 8006868:	aa20      	add	r2, sp, #128	; 0x80
 800686a:	7b52      	ldrb	r2, [r2, #13]
 800686c:	920f      	str	r2, [sp, #60]	; 0x3c
 800686e:	aa20      	add	r2, sp, #128	; 0x80
 8006870:	7892      	ldrb	r2, [r2, #2]
 8006872:	9210      	str	r2, [sp, #64]	; 0x40
 8006874:	5c9a      	ldrb	r2, [r3, r2]
 8006876:	9211      	str	r2, [sp, #68]	; 0x44
 8006878:	aa20      	add	r2, sp, #128	; 0x80
 800687a:	79d2      	ldrb	r2, [r2, #7]
 800687c:	9212      	str	r2, [sp, #72]	; 0x48
 800687e:	5c9a      	ldrb	r2, [r3, r2]
 8006880:	9213      	str	r2, [sp, #76]	; 0x4c
 8006882:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006884:	5c9a      	ldrb	r2, [r3, r2]
 8006886:	9214      	str	r2, [sp, #80]	; 0x50
 8006888:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800688a:	5c9a      	ldrb	r2, [r3, r2]
 800688c:	9215      	str	r2, [sp, #84]	; 0x54
 800688e:	aa20      	add	r2, sp, #128	; 0x80
 8006890:	7b12      	ldrb	r2, [r2, #12]
 8006892:	9216      	str	r2, [sp, #88]	; 0x58
 8006894:	aa20      	add	r2, sp, #128	; 0x80
 8006896:	7852      	ldrb	r2, [r2, #1]
 8006898:	9217      	str	r2, [sp, #92]	; 0x5c
 800689a:	aa20      	add	r2, sp, #128	; 0x80
 800689c:	7992      	ldrb	r2, [r2, #6]
 800689e:	9218      	str	r2, [sp, #96]	; 0x60
 80068a0:	5c9a      	ldrb	r2, [r3, r2]
 80068a2:	9219      	str	r2, [sp, #100]	; 0x64
 80068a4:	aa20      	add	r2, sp, #128	; 0x80
 80068a6:	7ad2      	ldrb	r2, [r2, #11]
 80068a8:	921a      	str	r2, [sp, #104]	; 0x68
 80068aa:	5c9a      	ldrb	r2, [r3, r2]
 80068ac:	921b      	str	r2, [sp, #108]	; 0x6c
 80068ae:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80068b0:	5c9a      	ldrb	r2, [r3, r2]
 80068b2:	921c      	str	r2, [sp, #112]	; 0x70
 80068b4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80068b6:	5c9b      	ldrb	r3, [r3, r2]
 80068b8:	931d      	str	r3, [sp, #116]	; 0x74
 80068ba:	0033      	movs	r3, r6
 80068bc:	33f0      	adds	r3, #240	; 0xf0
 80068be:	781b      	ldrb	r3, [r3, #0]
 80068c0:	42ab      	cmp	r3, r5
 80068c2:	d828      	bhi.n	8006916 <aes_encrypt+0x132>
    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 80068c4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80068c6:	ab20      	add	r3, sp, #128	; 0x80
 80068c8:	711a      	strb	r2, [r3, #4]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 80068ca:	9a14      	ldr	r2, [sp, #80]	; 0x50
    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 80068cc:	7018      	strb	r0, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 80068ce:	721a      	strb	r2, [r3, #8]
 80068d0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 80068d2:	0019      	movs	r1, r3
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 80068d4:	731a      	strb	r2, [r3, #12]
    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 80068d6:	9a06      	ldr	r2, [sp, #24]
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 80068d8:	981f      	ldr	r0, [sp, #124]	; 0x7c
    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 80068da:	705a      	strb	r2, [r3, #1]
 80068dc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80068de:	715a      	strb	r2, [r3, #5]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 80068e0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80068e2:	725a      	strb	r2, [r3, #9]
 80068e4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80068e6:	735a      	strb	r2, [r3, #13]
    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 80068e8:	9a03      	ldr	r2, [sp, #12]
 80068ea:	709a      	strb	r2, [r3, #2]
 80068ec:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80068ee:	729a      	strb	r2, [r3, #10]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 80068f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80068f2:	719a      	strb	r2, [r3, #6]
 80068f4:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80068f6:	739a      	strb	r2, [r3, #14]
    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 80068f8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80068fa:	73da      	strb	r2, [r3, #15]
 80068fc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80068fe:	72da      	strb	r2, [r3, #11]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 8006900:	4662      	mov	r2, ip
 8006902:	71da      	strb	r2, [r3, #7]
 8006904:	9a05      	ldr	r2, [sp, #20]
 8006906:	70da      	strb	r2, [r3, #3]
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 8006908:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800690a:	f7ff fea5 	bl	8006658 <copy_and_key>
 800690e:	2300      	movs	r3, #0
    return 0;
}
 8006910:	0018      	movs	r0, r3
 8006912:	b025      	add	sp, #148	; 0x94
 8006914:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 8006916:	4b54      	ldr	r3, [pc, #336]	; (8006a68 <aes_encrypt+0x284>)
 8006918:	9c01      	ldr	r4, [sp, #4]
 800691a:	9905      	ldr	r1, [sp, #20]
 800691c:	9a03      	ldr	r2, [sp, #12]
 800691e:	5d1c      	ldrb	r4, [r3, r4]
 8006920:	404a      	eors	r2, r1
 8006922:	4054      	eors	r4, r2
 8006924:	9902      	ldr	r1, [sp, #8]
 8006926:	4a51      	ldr	r2, [pc, #324]	; (8006a6c <aes_encrypt+0x288>)
        for( r = 1 ; r < ctx->rnd ; ++r )
 8006928:	3501      	adds	r5, #1
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800692a:	5c51      	ldrb	r1, [r2, r1]
        for( r = 1 ; r < ctx->rnd ; ++r )
 800692c:	b2ed      	uxtb	r5, r5
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800692e:	404c      	eors	r4, r1
 8006930:	a920      	add	r1, sp, #128	; 0x80
 8006932:	700c      	strb	r4, [r1, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 8006934:	9c02      	ldr	r4, [sp, #8]
 8006936:	9905      	ldr	r1, [sp, #20]
 8006938:	5d1c      	ldrb	r4, [r3, r4]
 800693a:	4041      	eors	r1, r0
 800693c:	4061      	eors	r1, r4
 800693e:	5dd4      	ldrb	r4, [r2, r7]
 8006940:	4061      	eors	r1, r4
 8006942:	ac20      	add	r4, sp, #128	; 0x80
 8006944:	7061      	strb	r1, [r4, #1]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 8006946:	9906      	ldr	r1, [sp, #24]
 8006948:	4048      	eors	r0, r1
 800694a:	5dd9      	ldrb	r1, [r3, r7]
 800694c:	4048      	eors	r0, r1
 800694e:	9904      	ldr	r1, [sp, #16]
 8006950:	5c51      	ldrb	r1, [r2, r1]
 8006952:	4048      	eors	r0, r1
 8006954:	70a0      	strb	r0, [r4, #2]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 8006956:	9903      	ldr	r1, [sp, #12]
 8006958:	9806      	ldr	r0, [sp, #24]
 800695a:	4041      	eors	r1, r0
 800695c:	9801      	ldr	r0, [sp, #4]
 800695e:	5c10      	ldrb	r0, [r2, r0]
 8006960:	4041      	eors	r1, r0
 8006962:	9804      	ldr	r0, [sp, #16]
 8006964:	5c18      	ldrb	r0, [r3, r0]
 8006966:	4041      	eors	r1, r0
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 8006968:	4660      	mov	r0, ip
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800696a:	70e1      	strb	r1, [r4, #3]
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800696c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800696e:	4041      	eors	r1, r0
 8006970:	9807      	ldr	r0, [sp, #28]
 8006972:	5c18      	ldrb	r0, [r3, r0]
 8006974:	4041      	eors	r1, r0
 8006976:	9808      	ldr	r0, [sp, #32]
 8006978:	5c10      	ldrb	r0, [r2, r0]
 800697a:	4041      	eors	r1, r0
 800697c:	7121      	strb	r1, [r4, #4]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800697e:	4661      	mov	r1, ip
 8006980:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006982:	4041      	eors	r1, r0
 8006984:	9808      	ldr	r0, [sp, #32]
 8006986:	5c18      	ldrb	r0, [r3, r0]
 8006988:	4041      	eors	r1, r0
 800698a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800698c:	5c10      	ldrb	r0, [r2, r0]
 800698e:	4041      	eors	r1, r0
 8006990:	7161      	strb	r1, [r4, #5]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 8006992:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006994:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006996:	4041      	eors	r1, r0
 8006998:	9809      	ldr	r0, [sp, #36]	; 0x24
 800699a:	5c18      	ldrb	r0, [r3, r0]
 800699c:	4041      	eors	r1, r0
 800699e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80069a0:	5c10      	ldrb	r0, [r2, r0]
 80069a2:	4041      	eors	r1, r0
 80069a4:	71a1      	strb	r1, [r4, #6]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 80069a6:	980d      	ldr	r0, [sp, #52]	; 0x34
 80069a8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80069aa:	4041      	eors	r1, r0
 80069ac:	9807      	ldr	r0, [sp, #28]
 80069ae:	5c10      	ldrb	r0, [r2, r0]
 80069b0:	4041      	eors	r1, r0
 80069b2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80069b4:	5c18      	ldrb	r0, [r3, r0]
 80069b6:	4041      	eors	r1, r0
 80069b8:	71e1      	strb	r1, [r4, #7]
    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 80069ba:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80069bc:	9911      	ldr	r1, [sp, #68]	; 0x44
 80069be:	4041      	eors	r1, r0
 80069c0:	980e      	ldr	r0, [sp, #56]	; 0x38
 80069c2:	5c18      	ldrb	r0, [r3, r0]
 80069c4:	4041      	eors	r1, r0
 80069c6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80069c8:	5c10      	ldrb	r0, [r2, r0]
 80069ca:	4041      	eors	r1, r0
 80069cc:	7221      	strb	r1, [r4, #8]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 80069ce:	9814      	ldr	r0, [sp, #80]	; 0x50
 80069d0:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80069d2:	4041      	eors	r1, r0
 80069d4:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80069d6:	5c18      	ldrb	r0, [r3, r0]
 80069d8:	4041      	eors	r1, r0
 80069da:	9810      	ldr	r0, [sp, #64]	; 0x40
 80069dc:	5c10      	ldrb	r0, [r2, r0]
 80069de:	4041      	eors	r1, r0
 80069e0:	7261      	strb	r1, [r4, #9]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 80069e2:	9815      	ldr	r0, [sp, #84]	; 0x54
 80069e4:	9914      	ldr	r1, [sp, #80]	; 0x50
 80069e6:	4041      	eors	r1, r0
 80069e8:	9810      	ldr	r0, [sp, #64]	; 0x40
 80069ea:	5c18      	ldrb	r0, [r3, r0]
 80069ec:	4041      	eors	r1, r0
 80069ee:	9812      	ldr	r0, [sp, #72]	; 0x48
 80069f0:	5c10      	ldrb	r0, [r2, r0]
 80069f2:	4041      	eors	r1, r0
 80069f4:	72a1      	strb	r1, [r4, #10]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 80069f6:	9815      	ldr	r0, [sp, #84]	; 0x54
 80069f8:	9911      	ldr	r1, [sp, #68]	; 0x44
 80069fa:	4041      	eors	r1, r0
 80069fc:	980e      	ldr	r0, [sp, #56]	; 0x38
 80069fe:	5c10      	ldrb	r0, [r2, r0]
 8006a00:	4041      	eors	r1, r0
 8006a02:	9812      	ldr	r0, [sp, #72]	; 0x48
 8006a04:	5c18      	ldrb	r0, [r3, r0]
 8006a06:	4041      	eors	r1, r0
 8006a08:	72e1      	strb	r1, [r4, #11]
    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 8006a0a:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8006a0c:	9919      	ldr	r1, [sp, #100]	; 0x64
 8006a0e:	4041      	eors	r1, r0
 8006a10:	9816      	ldr	r0, [sp, #88]	; 0x58
 8006a12:	5c18      	ldrb	r0, [r3, r0]
 8006a14:	4041      	eors	r1, r0
 8006a16:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8006a18:	5c10      	ldrb	r0, [r2, r0]
 8006a1a:	4041      	eors	r1, r0
 8006a1c:	7321      	strb	r1, [r4, #12]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 8006a1e:	981c      	ldr	r0, [sp, #112]	; 0x70
 8006a20:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8006a22:	4041      	eors	r1, r0
 8006a24:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8006a26:	5c18      	ldrb	r0, [r3, r0]
 8006a28:	4041      	eors	r1, r0
 8006a2a:	9818      	ldr	r0, [sp, #96]	; 0x60
 8006a2c:	5c10      	ldrb	r0, [r2, r0]
 8006a2e:	4041      	eors	r1, r0
 8006a30:	7361      	strb	r1, [r4, #13]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 8006a32:	981d      	ldr	r0, [sp, #116]	; 0x74
 8006a34:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006a36:	4041      	eors	r1, r0
 8006a38:	9818      	ldr	r0, [sp, #96]	; 0x60
 8006a3a:	5c18      	ldrb	r0, [r3, r0]
 8006a3c:	4041      	eors	r1, r0
 8006a3e:	981a      	ldr	r0, [sp, #104]	; 0x68
 8006a40:	5c10      	ldrb	r0, [r2, r0]
 8006a42:	4041      	eors	r1, r0
 8006a44:	73a1      	strb	r1, [r4, #14]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 8006a46:	981d      	ldr	r0, [sp, #116]	; 0x74
 8006a48:	9919      	ldr	r1, [sp, #100]	; 0x64
 8006a4a:	4041      	eors	r1, r0
 8006a4c:	9816      	ldr	r0, [sp, #88]	; 0x58
 8006a4e:	5c12      	ldrb	r2, [r2, r0]
    xor_block(d, k);
 8006a50:	0020      	movs	r0, r4
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 8006a52:	404a      	eors	r2, r1
 8006a54:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006a56:	5c5b      	ldrb	r3, [r3, r1]
    xor_block(d, k);
 8006a58:	991e      	ldr	r1, [sp, #120]	; 0x78
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 8006a5a:	4053      	eors	r3, r2
 8006a5c:	73e3      	strb	r3, [r4, #15]
    xor_block(d, k);
 8006a5e:	f7ff fdba 	bl	80065d6 <xor_block>
 8006a62:	e6d0      	b.n	8006806 <aes_encrypt+0x22>
 8006a64:	0800ee42 	.word	0x0800ee42
 8006a68:	0800ed42 	.word	0x0800ed42
 8006a6c:	0800ec42 	.word	0x0800ec42

08006a70 <AES_CMAC_Init>:
        }                          \
    } while (0) \


void AES_CMAC_Init(AES_CMAC_CTX *ctx)
{
 8006a70:	b510      	push	{r4, lr}
 8006a72:	0004      	movs	r4, r0
            memset1(ctx->X, 0, sizeof ctx->X);
 8006a74:	2210      	movs	r2, #16
 8006a76:	30f1      	adds	r0, #241	; 0xf1
 8006a78:	2100      	movs	r1, #0
 8006a7a:	f006 f891 	bl	800cba0 <memset1>
            ctx->M_n = 0;
 8006a7e:	0023      	movs	r3, r4
 8006a80:	2100      	movs	r1, #0
 8006a82:	33fc      	adds	r3, #252	; 0xfc
 8006a84:	6199      	str	r1, [r3, #24]
        memset1(ctx->rijndael.ksch, '\0', 240);
 8006a86:	22f0      	movs	r2, #240	; 0xf0
 8006a88:	0020      	movs	r0, r4
 8006a8a:	f006 f889 	bl	800cba0 <memset1>
}
 8006a8e:	bd10      	pop	{r4, pc}

08006a90 <AES_CMAC_SetKey>:
    
void AES_CMAC_SetKey(AES_CMAC_CTX *ctx, const uint8_t key[AES_CMAC_KEY_LENGTH])
{
 8006a90:	b510      	push	{r4, lr}
 8006a92:	0002      	movs	r2, r0
 8006a94:	0008      	movs	r0, r1
           //rijndael_set_key_enc_only(&ctx->rijndael, key, 128);
       aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael);
 8006a96:	2110      	movs	r1, #16
 8006a98:	f7ff fe20 	bl	80066dc <aes_set_key>
}
 8006a9c:	bd10      	pop	{r4, pc}

08006a9e <AES_CMAC_Update>:
void AES_CMAC_Update(AES_CMAC_CTX *ctx, const uint8_t *data, uint32_t len)
{
            uint32_t mlen;
        uint8_t in[16];
    
            if (ctx->M_n > 0) {
 8006a9e:	0003      	movs	r3, r0
{
 8006aa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006aa2:	0004      	movs	r4, r0
            if (ctx->M_n > 0) {
 8006aa4:	33fc      	adds	r3, #252	; 0xfc
 8006aa6:	6998      	ldr	r0, [r3, #24]
 8006aa8:	1ca3      	adds	r3, r4, #2
{
 8006aaa:	b087      	sub	sp, #28
 8006aac:	33ff      	adds	r3, #255	; 0xff
 8006aae:	000e      	movs	r6, r1
 8006ab0:	0015      	movs	r5, r2
 8006ab2:	9301      	str	r3, [sp, #4]
            if (ctx->M_n > 0) {
 8006ab4:	2800      	cmp	r0, #0
 8006ab6:	d02a      	beq.n	8006b0e <AES_CMAC_Update+0x70>
                  mlen = MIN(16 - ctx->M_n, len);
 8006ab8:	2710      	movs	r7, #16
 8006aba:	1a3f      	subs	r7, r7, r0
 8006abc:	9700      	str	r7, [sp, #0]
 8006abe:	4297      	cmp	r7, r2
 8006ac0:	d900      	bls.n	8006ac4 <AES_CMAC_Update+0x26>
 8006ac2:	9200      	str	r2, [sp, #0]
                    memcpy1(ctx->M_last + ctx->M_n, data, mlen);
 8006ac4:	466b      	mov	r3, sp
 8006ac6:	881a      	ldrh	r2, [r3, #0]
 8006ac8:	1ca3      	adds	r3, r4, #2
 8006aca:	33ff      	adds	r3, #255	; 0xff
 8006acc:	1818      	adds	r0, r3, r0
 8006ace:	0031      	movs	r1, r6
 8006ad0:	f006 f851 	bl	800cb76 <memcpy1>
                    ctx->M_n += mlen;
 8006ad4:	0022      	movs	r2, r4
 8006ad6:	32fc      	adds	r2, #252	; 0xfc
 8006ad8:	6991      	ldr	r1, [r2, #24]
 8006ada:	9b00      	ldr	r3, [sp, #0]
 8006adc:	185b      	adds	r3, r3, r1
 8006ade:	6193      	str	r3, [r2, #24]
                    if (ctx->M_n < 16 || len == mlen)
 8006ae0:	2b0f      	cmp	r3, #15
 8006ae2:	d91d      	bls.n	8006b20 <AES_CMAC_Update+0x82>
 8006ae4:	42af      	cmp	r7, r5
 8006ae6:	d21b      	bcs.n	8006b20 <AES_CMAC_Update+0x82>
 8006ae8:	0023      	movs	r3, r4
 8006aea:	33f1      	adds	r3, #241	; 0xf1
 8006aec:	0018      	movs	r0, r3
 8006aee:	1ca1      	adds	r1, r4, #2
 8006af0:	31ff      	adds	r1, #255	; 0xff
                            return;
                   XOR(ctx->M_last, ctx->X);
 8006af2:	781a      	ldrb	r2, [r3, #0]
 8006af4:	7c1f      	ldrb	r7, [r3, #16]
 8006af6:	407a      	eors	r2, r7
 8006af8:	701a      	strb	r2, [r3, #0]
 8006afa:	3301      	adds	r3, #1
 8006afc:	428b      	cmp	r3, r1
 8006afe:	d1f8      	bne.n	8006af2 <AES_CMAC_Update+0x54>
                    //rijndael_encrypt(&ctx->rijndael, ctx->X, ctx->X);
            aes_encrypt( ctx->X, ctx->X, &ctx->rijndael);
 8006b00:	0022      	movs	r2, r4
 8006b02:	0001      	movs	r1, r0
 8006b04:	f7ff fe6e 	bl	80067e4 <aes_encrypt>
                    data += mlen;
 8006b08:	9b00      	ldr	r3, [sp, #0]
 8006b0a:	18f6      	adds	r6, r6, r3
                    len -= mlen;
 8006b0c:	1aed      	subs	r5, r5, r3
            }
            while (len > 16) {      /* not last block */
 8006b0e:	2d10      	cmp	r5, #16
 8006b10:	d808      	bhi.n	8006b24 <AES_CMAC_Update+0x86>

                    data += 16;
                    len -= 16;
            }
            /* potential last block, save it */
            memcpy1(ctx->M_last, data, len);
 8006b12:	b2aa      	uxth	r2, r5
 8006b14:	0031      	movs	r1, r6
 8006b16:	9801      	ldr	r0, [sp, #4]
            ctx->M_n = len;
 8006b18:	34fc      	adds	r4, #252	; 0xfc
            memcpy1(ctx->M_last, data, len);
 8006b1a:	f006 f82c 	bl	800cb76 <memcpy1>
            ctx->M_n = len;
 8006b1e:	61a5      	str	r5, [r4, #24]
}
 8006b20:	b007      	add	sp, #28
 8006b22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b24:	0023      	movs	r3, r4
 8006b26:	0032      	movs	r2, r6
 8006b28:	1ca0      	adds	r0, r4, #2
 8006b2a:	33f1      	adds	r3, #241	; 0xf1
 8006b2c:	30ff      	adds	r0, #255	; 0xff
                    XOR(data, ctx->X);
 8006b2e:	7819      	ldrb	r1, [r3, #0]
 8006b30:	7817      	ldrb	r7, [r2, #0]
 8006b32:	3201      	adds	r2, #1
 8006b34:	4079      	eors	r1, r7
 8006b36:	7019      	strb	r1, [r3, #0]
 8006b38:	3301      	adds	r3, #1
 8006b3a:	4283      	cmp	r3, r0
 8006b3c:	d1f7      	bne.n	8006b2e <AES_CMAC_Update+0x90>
                    memcpy1(in, &ctx->X[0], 16); //Bestela ez du ondo iten
 8006b3e:	0027      	movs	r7, r4
 8006b40:	37f1      	adds	r7, #241	; 0xf1
 8006b42:	2210      	movs	r2, #16
 8006b44:	0039      	movs	r1, r7
 8006b46:	a802      	add	r0, sp, #8
 8006b48:	f006 f815 	bl	800cb76 <memcpy1>
            aes_encrypt( in, in, &ctx->rijndael);
 8006b4c:	a902      	add	r1, sp, #8
 8006b4e:	0022      	movs	r2, r4
 8006b50:	0008      	movs	r0, r1
 8006b52:	f7ff fe47 	bl	80067e4 <aes_encrypt>
                    memcpy1(&ctx->X[0], in, 16);
 8006b56:	2210      	movs	r2, #16
 8006b58:	a902      	add	r1, sp, #8
 8006b5a:	0038      	movs	r0, r7
 8006b5c:	f006 f80b 	bl	800cb76 <memcpy1>
                    data += 16;
 8006b60:	3610      	adds	r6, #16
                    len -= 16;
 8006b62:	3d10      	subs	r5, #16
 8006b64:	e7d3      	b.n	8006b0e <AES_CMAC_Update+0x70>

08006b66 <AES_CMAC_Final>:
   
void AES_CMAC_Final(uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX *ctx)
{
 8006b66:	b570      	push	{r4, r5, r6, lr}
 8006b68:	000c      	movs	r4, r1
 8006b6a:	b088      	sub	sp, #32
            uint8_t K[16];
        uint8_t in[16];
            /* generate subkey K1 */
            memset1(K, '\0', 16);
 8006b6c:	2210      	movs	r2, #16
 8006b6e:	2100      	movs	r1, #0
{
 8006b70:	0005      	movs	r5, r0
            memset1(K, '\0', 16);
 8006b72:	4668      	mov	r0, sp
 8006b74:	f006 f814 	bl	800cba0 <memset1>

            //rijndael_encrypt(&ctx->rijndael, K, K);

            aes_encrypt( K, K, &ctx->rijndael);
 8006b78:	0022      	movs	r2, r4
 8006b7a:	4669      	mov	r1, sp
 8006b7c:	4668      	mov	r0, sp
 8006b7e:	f7ff fe31 	bl	80067e4 <aes_encrypt>

            if (K[0] & 0x80) {
 8006b82:	466b      	mov	r3, sp
 8006b84:	781a      	ldrb	r2, [r3, #0]
                    LSHIFT(K, K);
                   K[15] ^= 0x87;
            } else
                    LSHIFT(K, K);
 8006b86:	2300      	movs	r3, #0
            if (K[0] & 0x80) {
 8006b88:	2a7f      	cmp	r2, #127	; 0x7f
 8006b8a:	d940      	bls.n	8006c0e <AES_CMAC_Final+0xa8>
                    LSHIFT(K, K);
 8006b8c:	466a      	mov	r2, sp
 8006b8e:	4669      	mov	r1, sp
 8006b90:	5cd2      	ldrb	r2, [r2, r3]
 8006b92:	3301      	adds	r3, #1
 8006b94:	5cc9      	ldrb	r1, [r1, r3]
 8006b96:	0052      	lsls	r2, r2, #1
 8006b98:	09c9      	lsrs	r1, r1, #7
 8006b9a:	430a      	orrs	r2, r1
 8006b9c:	4669      	mov	r1, sp
 8006b9e:	1e58      	subs	r0, r3, #1
 8006ba0:	540a      	strb	r2, [r1, r0]
 8006ba2:	2b0f      	cmp	r3, #15
 8006ba4:	d1f2      	bne.n	8006b8c <AES_CMAC_Final+0x26>
                   K[15] ^= 0x87;
 8006ba6:	2379      	movs	r3, #121	; 0x79
                    LSHIFT(K, K);
 8006ba8:	7bca      	ldrb	r2, [r1, #15]
                   K[15] ^= 0x87;
 8006baa:	425b      	negs	r3, r3
                    LSHIFT(K, K);
 8006bac:	0052      	lsls	r2, r2, #1
                   K[15] ^= 0x87;
 8006bae:	4053      	eors	r3, r2
                    LSHIFT(K, K);
 8006bb0:	466a      	mov	r2, sp
 8006bb2:	73d3      	strb	r3, [r2, #15]


            if (ctx->M_n == 16) {
 8006bb4:	0023      	movs	r3, r4
 8006bb6:	33fc      	adds	r3, #252	; 0xfc
 8006bb8:	699a      	ldr	r2, [r3, #24]
 8006bba:	2a10      	cmp	r2, #16
 8006bbc:	d137      	bne.n	8006c2e <AES_CMAC_Final+0xc8>
                    /* last block was a complete block */
                    XOR(K, ctx->M_last);
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	1ca2      	adds	r2, r4, #2
 8006bc2:	32ff      	adds	r2, #255	; 0xff
 8006bc4:	4668      	mov	r0, sp
 8006bc6:	7811      	ldrb	r1, [r2, #0]
 8006bc8:	5cc0      	ldrb	r0, [r0, r3]
 8006bca:	3301      	adds	r3, #1
 8006bcc:	4041      	eors	r1, r0
 8006bce:	7011      	strb	r1, [r2, #0]
 8006bd0:	3201      	adds	r2, #1
 8006bd2:	2b10      	cmp	r3, #16
 8006bd4:	d1f6      	bne.n	8006bc4 <AES_CMAC_Final+0x5e>
 8006bd6:	0023      	movs	r3, r4
 8006bd8:	33f1      	adds	r3, #241	; 0xf1
 8006bda:	0019      	movs	r1, r3
 8006bdc:	1ca0      	adds	r0, r4, #2
 8006bde:	30ff      	adds	r0, #255	; 0xff
   
                  XOR(K, ctx->M_last);


           }
           XOR(ctx->M_last, ctx->X);
 8006be0:	781a      	ldrb	r2, [r3, #0]
 8006be2:	7c1e      	ldrb	r6, [r3, #16]
 8006be4:	4072      	eors	r2, r6
 8006be6:	701a      	strb	r2, [r3, #0]
 8006be8:	3301      	adds	r3, #1
 8006bea:	4298      	cmp	r0, r3
 8006bec:	d1f8      	bne.n	8006be0 <AES_CMAC_Final+0x7a>

           //rijndael_encrypt(&ctx->rijndael, ctx->X, digest);

       memcpy1(in, &ctx->X[0], 16); //Bestela ez du ondo iten
 8006bee:	a804      	add	r0, sp, #16
 8006bf0:	2210      	movs	r2, #16
 8006bf2:	f005 ffc0 	bl	800cb76 <memcpy1>
       aes_encrypt(in, digest, &ctx->rijndael);
 8006bf6:	0022      	movs	r2, r4
 8006bf8:	0029      	movs	r1, r5
 8006bfa:	a804      	add	r0, sp, #16
 8006bfc:	f7ff fdf2 	bl	80067e4 <aes_encrypt>
           memset1(K, 0, sizeof K);
 8006c00:	2210      	movs	r2, #16
 8006c02:	2100      	movs	r1, #0
 8006c04:	4668      	mov	r0, sp
 8006c06:	f005 ffcb 	bl	800cba0 <memset1>

}
 8006c0a:	b008      	add	sp, #32
 8006c0c:	bd70      	pop	{r4, r5, r6, pc}
                    LSHIFT(K, K);
 8006c0e:	466a      	mov	r2, sp
 8006c10:	4669      	mov	r1, sp
 8006c12:	5cd2      	ldrb	r2, [r2, r3]
 8006c14:	3301      	adds	r3, #1
 8006c16:	5cc9      	ldrb	r1, [r1, r3]
 8006c18:	0052      	lsls	r2, r2, #1
 8006c1a:	09c9      	lsrs	r1, r1, #7
 8006c1c:	430a      	orrs	r2, r1
 8006c1e:	4669      	mov	r1, sp
 8006c20:	1e58      	subs	r0, r3, #1
 8006c22:	540a      	strb	r2, [r1, r0]
 8006c24:	2b0f      	cmp	r3, #15
 8006c26:	d1f2      	bne.n	8006c0e <AES_CMAC_Final+0xa8>
 8006c28:	7bcb      	ldrb	r3, [r1, #15]
 8006c2a:	005b      	lsls	r3, r3, #1
 8006c2c:	e7c0      	b.n	8006bb0 <AES_CMAC_Final+0x4a>
                  if (K[0] & 0x80) {
 8006c2e:	466b      	mov	r3, sp
 8006c30:	7819      	ldrb	r1, [r3, #0]
                           LSHIFT(K, K);
 8006c32:	2300      	movs	r3, #0
                  if (K[0] & 0x80) {
 8006c34:	297f      	cmp	r1, #127	; 0x7f
 8006c36:	d92b      	bls.n	8006c90 <AES_CMAC_Final+0x12a>
                          LSHIFT(K, K);
 8006c38:	4669      	mov	r1, sp
 8006c3a:	4668      	mov	r0, sp
 8006c3c:	5cc9      	ldrb	r1, [r1, r3]
 8006c3e:	3301      	adds	r3, #1
 8006c40:	5cc0      	ldrb	r0, [r0, r3]
 8006c42:	0049      	lsls	r1, r1, #1
 8006c44:	09c0      	lsrs	r0, r0, #7
 8006c46:	4301      	orrs	r1, r0
 8006c48:	4668      	mov	r0, sp
 8006c4a:	1e5e      	subs	r6, r3, #1
 8006c4c:	5581      	strb	r1, [r0, r6]
 8006c4e:	2b0f      	cmp	r3, #15
 8006c50:	d1f2      	bne.n	8006c38 <AES_CMAC_Final+0xd2>
                          K[15] ^= 0x87;
 8006c52:	2379      	movs	r3, #121	; 0x79
                          LSHIFT(K, K);
 8006c54:	7bc1      	ldrb	r1, [r0, #15]
                          K[15] ^= 0x87;
 8006c56:	425b      	negs	r3, r3
                          LSHIFT(K, K);
 8006c58:	0049      	lsls	r1, r1, #1
                          K[15] ^= 0x87;
 8006c5a:	404b      	eors	r3, r1
                           LSHIFT(K, K);
 8006c5c:	4669      	mov	r1, sp
 8006c5e:	73cb      	strb	r3, [r1, #15]
                   ctx->M_last[ctx->M_n] = 0x80;
 8006c60:	2180      	movs	r1, #128	; 0x80
 8006c62:	18a3      	adds	r3, r4, r2
 8006c64:	33ff      	adds	r3, #255	; 0xff
 8006c66:	7099      	strb	r1, [r3, #2]
 8006c68:	2100      	movs	r1, #0
                   while (++ctx->M_n < 16)
 8006c6a:	1c53      	adds	r3, r2, #1
 8006c6c:	2b0f      	cmp	r3, #15
 8006c6e:	d91f      	bls.n	8006cb0 <AES_CMAC_Final+0x14a>
 8006c70:	0022      	movs	r2, r4
 8006c72:	32fc      	adds	r2, #252	; 0xfc
 8006c74:	6193      	str	r3, [r2, #24]
                  XOR(K, ctx->M_last);
 8006c76:	2300      	movs	r3, #0
 8006c78:	1ca2      	adds	r2, r4, #2
 8006c7a:	32ff      	adds	r2, #255	; 0xff
 8006c7c:	4668      	mov	r0, sp
 8006c7e:	7811      	ldrb	r1, [r2, #0]
 8006c80:	5cc0      	ldrb	r0, [r0, r3]
 8006c82:	3301      	adds	r3, #1
 8006c84:	4041      	eors	r1, r0
 8006c86:	7011      	strb	r1, [r2, #0]
 8006c88:	3201      	adds	r2, #1
 8006c8a:	2b10      	cmp	r3, #16
 8006c8c:	d1f6      	bne.n	8006c7c <AES_CMAC_Final+0x116>
 8006c8e:	e7a2      	b.n	8006bd6 <AES_CMAC_Final+0x70>
                           LSHIFT(K, K);
 8006c90:	4669      	mov	r1, sp
 8006c92:	4668      	mov	r0, sp
 8006c94:	5cc9      	ldrb	r1, [r1, r3]
 8006c96:	3301      	adds	r3, #1
 8006c98:	5cc0      	ldrb	r0, [r0, r3]
 8006c9a:	0049      	lsls	r1, r1, #1
 8006c9c:	09c0      	lsrs	r0, r0, #7
 8006c9e:	4301      	orrs	r1, r0
 8006ca0:	4668      	mov	r0, sp
 8006ca2:	1e5e      	subs	r6, r3, #1
 8006ca4:	5581      	strb	r1, [r0, r6]
 8006ca6:	2b0f      	cmp	r3, #15
 8006ca8:	d1f2      	bne.n	8006c90 <AES_CMAC_Final+0x12a>
 8006caa:	7bc3      	ldrb	r3, [r0, #15]
 8006cac:	005b      	lsls	r3, r3, #1
 8006cae:	e7d5      	b.n	8006c5c <AES_CMAC_Final+0xf6>
                         ctx->M_last[ctx->M_n] = 0;
 8006cb0:	3203      	adds	r2, #3
 8006cb2:	32ff      	adds	r2, #255	; 0xff
 8006cb4:	18a2      	adds	r2, r4, r2
 8006cb6:	7011      	strb	r1, [r2, #0]
 8006cb8:	001a      	movs	r2, r3
 8006cba:	e7d6      	b.n	8006c6a <AES_CMAC_Final+0x104>

08006cbc <DummyCB>:
 * Dummy callback in case if the user provides NULL function pointer
 */
static void DummyCB( void )
{
    return;
}
 8006cbc:	4770      	bx	lr
	...

08006cc0 <GetKeyByID>:
{
 8006cc0:	b570      	push	{r4, r5, r6, lr}
 8006cc2:	2200      	movs	r2, #0
        if( SeNvmCtx.KeyList[i].KeyID == keyID )
 8006cc4:	2411      	movs	r4, #17
 8006cc6:	4d09      	ldr	r5, [pc, #36]	; (8006cec <GetKeyByID+0x2c>)
 8006cc8:	0023      	movs	r3, r4
 8006cca:	268b      	movs	r6, #139	; 0x8b
 8006ccc:	4353      	muls	r3, r2
 8006cce:	00b6      	lsls	r6, r6, #2
 8006cd0:	199b      	adds	r3, r3, r6
 8006cd2:	195b      	adds	r3, r3, r5
 8006cd4:	781e      	ldrb	r6, [r3, #0]
 8006cd6:	4286      	cmp	r6, r0
 8006cd8:	d102      	bne.n	8006ce0 <GetKeyByID+0x20>
            return SECURE_ELEMENT_SUCCESS;
 8006cda:	2000      	movs	r0, #0
            *keyItem = &( SeNvmCtx.KeyList[i] );
 8006cdc:	600b      	str	r3, [r1, #0]
}
 8006cde:	bd70      	pop	{r4, r5, r6, pc}
 8006ce0:	3201      	adds	r2, #1
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8006ce2:	2a18      	cmp	r2, #24
 8006ce4:	d1f0      	bne.n	8006cc8 <GetKeyByID+0x8>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8006ce6:	2003      	movs	r0, #3
 8006ce8:	e7f9      	b.n	8006cde <GetKeyByID+0x1e>
 8006cea:	46c0      	nop			; (mov r8, r8)
 8006cec:	20000378 	.word	0x20000378

08006cf0 <ComputeCmac.part.0>:
 * \param[IN]  size           - Data buffer size
 * \param[IN]  keyID          - Key identifier to determine the AES key to be used
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint16_t size, KeyIdentifier_t keyID, uint32_t* cmac )
 8006cf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006cf2:	001d      	movs	r5, r3
        return SECURE_ELEMENT_ERROR_NPE;
    }

    uint8_t Cmac[16];

    AES_CMAC_Init( SeNvmCtx.AesCmacCtx );
 8006cf4:	4c14      	ldr	r4, [pc, #80]	; (8006d48 <ComputeCmac.part.0+0x58>)
static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint16_t size, KeyIdentifier_t keyID, uint32_t* cmac )
 8006cf6:	b089      	sub	sp, #36	; 0x24
 8006cf8:	0006      	movs	r6, r0
    AES_CMAC_Init( SeNvmCtx.AesCmacCtx );
 8006cfa:	0020      	movs	r0, r4
static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint16_t size, KeyIdentifier_t keyID, uint32_t* cmac )
 8006cfc:	9101      	str	r1, [sp, #4]
 8006cfe:	0017      	movs	r7, r2
    AES_CMAC_Init( SeNvmCtx.AesCmacCtx );
 8006d00:	f7ff feb6 	bl	8006a70 <AES_CMAC_Init>

    Key_t* keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 8006d04:	0028      	movs	r0, r5
 8006d06:	a903      	add	r1, sp, #12
 8006d08:	f7ff ffda 	bl	8006cc0 <GetKeyByID>
 8006d0c:	1e05      	subs	r5, r0, #0

    if( retval == SECURE_ELEMENT_SUCCESS )
 8006d0e:	d117      	bne.n	8006d40 <ComputeCmac.part.0+0x50>
    {
        AES_CMAC_SetKey( SeNvmCtx.AesCmacCtx, keyItem->KeyValue );
 8006d10:	9b03      	ldr	r3, [sp, #12]
 8006d12:	0020      	movs	r0, r4
 8006d14:	1c59      	adds	r1, r3, #1
 8006d16:	f7ff febb 	bl	8006a90 <AES_CMAC_SetKey>

        if( micBxBuffer != NULL )
 8006d1a:	2e00      	cmp	r6, #0
 8006d1c:	d004      	beq.n	8006d28 <ComputeCmac.part.0+0x38>
        {
            AES_CMAC_Update( SeNvmCtx.AesCmacCtx, micBxBuffer, 16 );
 8006d1e:	2210      	movs	r2, #16
 8006d20:	0031      	movs	r1, r6
 8006d22:	0020      	movs	r0, r4
 8006d24:	f7ff febb 	bl	8006a9e <AES_CMAC_Update>
        }

        AES_CMAC_Update( SeNvmCtx.AesCmacCtx, buffer, size );
 8006d28:	003a      	movs	r2, r7
 8006d2a:	9901      	ldr	r1, [sp, #4]
 8006d2c:	0020      	movs	r0, r4
 8006d2e:	f7ff feb6 	bl	8006a9e <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, SeNvmCtx.AesCmacCtx );
 8006d32:	0021      	movs	r1, r4
 8006d34:	a804      	add	r0, sp, #16
 8006d36:	f7ff ff16 	bl	8006b66 <AES_CMAC_Final>

        // Bring into the required format
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 | ( uint32_t ) Cmac[0] );
 8006d3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006d3c:	9a04      	ldr	r2, [sp, #16]
 8006d3e:	601a      	str	r2, [r3, #0]
    }

    return retval;
}
 8006d40:	0028      	movs	r0, r5
 8006d42:	b009      	add	sp, #36	; 0x24
 8006d44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d46:	46c0      	nop			; (mov r8, r8)
 8006d48:	2000048c 	.word	0x2000048c

08006d4c <SecureElementInit>:
/*
 * API functions
 */

SecureElementStatus_t SecureElementInit( SecureElementNvmEvent seNvmCtxChanged )
{
 8006d4c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    uint8_t itr = 0;
    uint8_t zeroKey[16] = { 0 };
 8006d4e:	2210      	movs	r2, #16
 8006d50:	2100      	movs	r1, #0
{
 8006d52:	0006      	movs	r6, r0
    uint8_t zeroKey[16] = { 0 };
 8006d54:	4668      	mov	r0, sp
 8006d56:	f007 f916 	bl	800df86 <memset>

    // Initialize with defaults
    SeNvmCtx.KeyList[itr++].KeyID = APP_KEY;
 8006d5a:	238b      	movs	r3, #139	; 0x8b
 8006d5c:	2500      	movs	r5, #0
    SeNvmCtx.KeyList[itr++].KeyID = GEN_APP_KEY;
 8006d5e:	2201      	movs	r2, #1
    SeNvmCtx.KeyList[itr++].KeyID = APP_KEY;
 8006d60:	4c2f      	ldr	r4, [pc, #188]	; (8006e20 <SecureElementInit+0xd4>)
 8006d62:	009b      	lsls	r3, r3, #2
 8006d64:	54e5      	strb	r5, [r4, r3]
    SeNvmCtx.KeyList[itr++].KeyID = GEN_APP_KEY;
 8006d66:	4b2f      	ldr	r3, [pc, #188]	; (8006e24 <SecureElementInit+0xd8>)
    SeNvmCtx.KeyList[itr++].KeyID = MC_APP_S_KEY_3;
    SeNvmCtx.KeyList[itr++].KeyID = MC_NWK_S_KEY_3;
    SeNvmCtx.KeyList[itr].KeyID = SLOT_RAND_ZERO_KEY;

    // Set standard keys
    memcpy1( SeNvmCtx.KeyList[itr].KeyValue, zeroKey, KEY_SIZE );
 8006d68:	4669      	mov	r1, sp
    SeNvmCtx.KeyList[itr++].KeyID = GEN_APP_KEY;
 8006d6a:	54e2      	strb	r2, [r4, r3]
    SeNvmCtx.KeyList[itr++].KeyID = NWK_KEY;
 8006d6c:	4b2e      	ldr	r3, [pc, #184]	; (8006e28 <SecureElementInit+0xdc>)
 8006d6e:	1892      	adds	r2, r2, r2
 8006d70:	54e2      	strb	r2, [r4, r3]
    SeNvmCtx.KeyList[itr++].KeyID = J_S_INT_KEY;
 8006d72:	4b2e      	ldr	r3, [pc, #184]	; (8006e2c <SecureElementInit+0xe0>)
 8006d74:	3201      	adds	r2, #1
 8006d76:	54e2      	strb	r2, [r4, r3]
    SeNvmCtx.KeyList[itr++].KeyID = J_S_ENC_KEY;
 8006d78:	3311      	adds	r3, #17
 8006d7a:	3201      	adds	r2, #1
 8006d7c:	54e2      	strb	r2, [r4, r3]
    SeNvmCtx.KeyList[itr++].KeyID = F_NWK_S_INT_KEY;
 8006d7e:	4b2c      	ldr	r3, [pc, #176]	; (8006e30 <SecureElementInit+0xe4>)
 8006d80:	3201      	adds	r2, #1
 8006d82:	54e2      	strb	r2, [r4, r3]
    SeNvmCtx.KeyList[itr++].KeyID = S_NWK_S_INT_KEY;
 8006d84:	4b2b      	ldr	r3, [pc, #172]	; (8006e34 <SecureElementInit+0xe8>)
 8006d86:	3201      	adds	r2, #1
 8006d88:	54e2      	strb	r2, [r4, r3]
    SeNvmCtx.KeyList[itr++].KeyID = NWK_S_ENC_KEY;
 8006d8a:	4b2b      	ldr	r3, [pc, #172]	; (8006e38 <SecureElementInit+0xec>)
 8006d8c:	3201      	adds	r2, #1
 8006d8e:	54e2      	strb	r2, [r4, r3]
    SeNvmCtx.KeyList[itr++].KeyID = APP_S_KEY;
 8006d90:	3311      	adds	r3, #17
 8006d92:	3201      	adds	r2, #1
 8006d94:	54e2      	strb	r2, [r4, r3]
    SeNvmCtx.KeyList[itr++].KeyID = MC_ROOT_KEY;
 8006d96:	4b29      	ldr	r3, [pc, #164]	; (8006e3c <SecureElementInit+0xf0>)
 8006d98:	3201      	adds	r2, #1
 8006d9a:	54e2      	strb	r2, [r4, r3]
    SeNvmCtx.KeyList[itr++].KeyID = MC_KE_KEY;
 8006d9c:	4b28      	ldr	r3, [pc, #160]	; (8006e40 <SecureElementInit+0xf4>)
 8006d9e:	3276      	adds	r2, #118	; 0x76
 8006da0:	54e2      	strb	r2, [r4, r3]
    SeNvmCtx.KeyList[itr++].KeyID = MC_KEY_0;
 8006da2:	4b28      	ldr	r3, [pc, #160]	; (8006e44 <SecureElementInit+0xf8>)
 8006da4:	3201      	adds	r2, #1
 8006da6:	54e2      	strb	r2, [r4, r3]
    SeNvmCtx.KeyList[itr++].KeyID = MC_APP_S_KEY_0;
 8006da8:	3311      	adds	r3, #17
 8006daa:	3201      	adds	r2, #1
 8006dac:	54e2      	strb	r2, [r4, r3]
    SeNvmCtx.KeyList[itr++].KeyID = MC_NWK_S_KEY_0;
 8006dae:	4b26      	ldr	r3, [pc, #152]	; (8006e48 <SecureElementInit+0xfc>)
 8006db0:	3201      	adds	r2, #1
 8006db2:	54e2      	strb	r2, [r4, r3]
    SeNvmCtx.KeyList[itr++].KeyID = MC_KEY_1;
 8006db4:	4b25      	ldr	r3, [pc, #148]	; (8006e4c <SecureElementInit+0x100>)
 8006db6:	3201      	adds	r2, #1
 8006db8:	54e2      	strb	r2, [r4, r3]
    SeNvmCtx.KeyList[itr++].KeyID = MC_APP_S_KEY_1;
 8006dba:	4b25      	ldr	r3, [pc, #148]	; (8006e50 <SecureElementInit+0x104>)
 8006dbc:	3201      	adds	r2, #1
 8006dbe:	54e2      	strb	r2, [r4, r3]
    SeNvmCtx.KeyList[itr++].KeyID = MC_NWK_S_KEY_1;
 8006dc0:	3311      	adds	r3, #17
 8006dc2:	3201      	adds	r2, #1
 8006dc4:	54e2      	strb	r2, [r4, r3]
    SeNvmCtx.KeyList[itr++].KeyID = MC_KEY_2;
 8006dc6:	4b23      	ldr	r3, [pc, #140]	; (8006e54 <SecureElementInit+0x108>)
 8006dc8:	3201      	adds	r2, #1
 8006dca:	54e2      	strb	r2, [r4, r3]
    SeNvmCtx.KeyList[itr++].KeyID = MC_APP_S_KEY_2;
 8006dcc:	4b22      	ldr	r3, [pc, #136]	; (8006e58 <SecureElementInit+0x10c>)
 8006dce:	3201      	adds	r2, #1
 8006dd0:	54e2      	strb	r2, [r4, r3]
    SeNvmCtx.KeyList[itr++].KeyID = MC_NWK_S_KEY_2;
 8006dd2:	4b22      	ldr	r3, [pc, #136]	; (8006e5c <SecureElementInit+0x110>)
 8006dd4:	3201      	adds	r2, #1
 8006dd6:	54e2      	strb	r2, [r4, r3]
    SeNvmCtx.KeyList[itr++].KeyID = MC_KEY_3;
 8006dd8:	3311      	adds	r3, #17
 8006dda:	3201      	adds	r2, #1
 8006ddc:	54e2      	strb	r2, [r4, r3]
    SeNvmCtx.KeyList[itr++].KeyID = MC_APP_S_KEY_3;
 8006dde:	4b20      	ldr	r3, [pc, #128]	; (8006e60 <SecureElementInit+0x114>)
 8006de0:	3201      	adds	r2, #1
 8006de2:	54e2      	strb	r2, [r4, r3]
    SeNvmCtx.KeyList[itr++].KeyID = MC_NWK_S_KEY_3;
 8006de4:	4b1f      	ldr	r3, [pc, #124]	; (8006e64 <SecureElementInit+0x118>)
 8006de6:	3201      	adds	r2, #1
 8006de8:	54e2      	strb	r2, [r4, r3]
    SeNvmCtx.KeyList[itr].KeyID = SLOT_RAND_ZERO_KEY;
 8006dea:	4b1f      	ldr	r3, [pc, #124]	; (8006e68 <SecureElementInit+0x11c>)
 8006dec:	3201      	adds	r2, #1
 8006dee:	54e2      	strb	r2, [r4, r3]
    memcpy1( SeNvmCtx.KeyList[itr].KeyValue, zeroKey, KEY_SIZE );
 8006df0:	481e      	ldr	r0, [pc, #120]	; (8006e6c <SecureElementInit+0x120>)
 8006df2:	3a7c      	subs	r2, #124	; 0x7c
 8006df4:	f005 febf 	bl	800cb76 <memcpy1>

    memset1( SeNvmCtx.DevEui, 0, SE_EUI_SIZE );
 8006df8:	2210      	movs	r2, #16
 8006dfa:	0029      	movs	r1, r5
 8006dfc:	0020      	movs	r0, r4
 8006dfe:	f005 fecf 	bl	800cba0 <memset1>
    memset1( SeNvmCtx.JoinEui, 0, SE_EUI_SIZE );
 8006e02:	2210      	movs	r2, #16
 8006e04:	0029      	movs	r1, r5
 8006e06:	481a      	ldr	r0, [pc, #104]	; (8006e70 <SecureElementInit+0x124>)
 8006e08:	f005 feca 	bl	800cba0 <memset1>
 8006e0c:	4b19      	ldr	r3, [pc, #100]	; (8006e74 <SecureElementInit+0x128>)

    // Assign callback
    if( seNvmCtxChanged != 0 )
 8006e0e:	42ae      	cmp	r6, r5
 8006e10:	d003      	beq.n	8006e1a <SecureElementInit+0xce>
    {
        SeNvmCtxChanged = seNvmCtxChanged;
 8006e12:	601e      	str	r6, [r3, #0]
    {
        SeNvmCtxChanged = DummyCB;
    }

    return SECURE_ELEMENT_SUCCESS;
}
 8006e14:	2000      	movs	r0, #0
 8006e16:	b004      	add	sp, #16
 8006e18:	bd70      	pop	{r4, r5, r6, pc}
        SeNvmCtxChanged = DummyCB;
 8006e1a:	4a17      	ldr	r2, [pc, #92]	; (8006e78 <SecureElementInit+0x12c>)
 8006e1c:	601a      	str	r2, [r3, #0]
 8006e1e:	e7f9      	b.n	8006e14 <SecureElementInit+0xc8>
 8006e20:	20000378 	.word	0x20000378
 8006e24:	0000023d 	.word	0x0000023d
 8006e28:	0000024e 	.word	0x0000024e
 8006e2c:	0000025f 	.word	0x0000025f
 8006e30:	00000281 	.word	0x00000281
 8006e34:	00000292 	.word	0x00000292
 8006e38:	000002a3 	.word	0x000002a3
 8006e3c:	000002c5 	.word	0x000002c5
 8006e40:	000002d6 	.word	0x000002d6
 8006e44:	000002e7 	.word	0x000002e7
 8006e48:	00000309 	.word	0x00000309
 8006e4c:	0000031a 	.word	0x0000031a
 8006e50:	0000032b 	.word	0x0000032b
 8006e54:	0000034d 	.word	0x0000034d
 8006e58:	0000035e 	.word	0x0000035e
 8006e5c:	0000036f 	.word	0x0000036f
 8006e60:	00000391 	.word	0x00000391
 8006e64:	000003a2 	.word	0x000003a2
 8006e68:	000003b3 	.word	0x000003b3
 8006e6c:	2000072c 	.word	0x2000072c
 8006e70:	20000388 	.word	0x20000388
 8006e74:	20000374 	.word	0x20000374
 8006e78:	08006cbd 	.word	0x08006cbd

08006e7c <SecureElementRestoreNvmCtx>:

SecureElementStatus_t SecureElementRestoreNvmCtx( void* seNvmCtx )
{
 8006e7c:	0001      	movs	r1, r0
 8006e7e:	b510      	push	{r4, lr}
        memcpy1( ( uint8_t* ) &SeNvmCtx, ( uint8_t* ) seNvmCtx, sizeof( SeNvmCtx ) );
        return SECURE_ELEMENT_SUCCESS;
    }
    else
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8006e80:	2002      	movs	r0, #2
    if( seNvmCtx != 0 )
 8006e82:	2900      	cmp	r1, #0
 8006e84:	d005      	beq.n	8006e92 <SecureElementRestoreNvmCtx+0x16>
        memcpy1( ( uint8_t* ) &SeNvmCtx, ( uint8_t* ) seNvmCtx, sizeof( SeNvmCtx ) );
 8006e86:	22f1      	movs	r2, #241	; 0xf1
 8006e88:	4802      	ldr	r0, [pc, #8]	; (8006e94 <SecureElementRestoreNvmCtx+0x18>)
 8006e8a:	0092      	lsls	r2, r2, #2
 8006e8c:	f005 fe73 	bl	800cb76 <memcpy1>
        return SECURE_ELEMENT_SUCCESS;
 8006e90:	2000      	movs	r0, #0
    }
}
 8006e92:	bd10      	pop	{r4, pc}
 8006e94:	20000378 	.word	0x20000378

08006e98 <SecureElementGetNvmCtx>:

void* SecureElementGetNvmCtx( size_t* seNvmCtxSize )
{
    *seNvmCtxSize = sizeof( SeNvmCtx );
 8006e98:	23f1      	movs	r3, #241	; 0xf1
 8006e9a:	009b      	lsls	r3, r3, #2
 8006e9c:	6003      	str	r3, [r0, #0]
    return &SeNvmCtx;
}
 8006e9e:	4801      	ldr	r0, [pc, #4]	; (8006ea4 <SecureElementGetNvmCtx+0xc>)
 8006ea0:	4770      	bx	lr
 8006ea2:	46c0      	nop			; (mov r8, r8)
 8006ea4:	20000378 	.word	0x20000378

08006ea8 <SecureElementComputeAesCmac>:

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
}

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint16_t size, KeyIdentifier_t keyID, uint32_t* cmac )
{
 8006ea8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006eaa:	9c06      	ldr	r4, [sp, #24]
 8006eac:	0005      	movs	r5, r0
    if( keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS )
    {
        //Never accept multicast key identifier for cmac computation
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8006eae:	2003      	movs	r0, #3
    if( keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS )
 8006eb0:	2b7e      	cmp	r3, #126	; 0x7e
 8006eb2:	d808      	bhi.n	8006ec6 <SecureElementComputeAesCmac+0x1e>
        return SECURE_ELEMENT_ERROR_NPE;
 8006eb4:	3801      	subs	r0, #1
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 8006eb6:	2900      	cmp	r1, #0
 8006eb8:	d005      	beq.n	8006ec6 <SecureElementComputeAesCmac+0x1e>
 8006eba:	2c00      	cmp	r4, #0
 8006ebc:	d003      	beq.n	8006ec6 <SecureElementComputeAesCmac+0x1e>
 8006ebe:	9400      	str	r4, [sp, #0]
 8006ec0:	0028      	movs	r0, r5
 8006ec2:	f7ff ff15 	bl	8006cf0 <ComputeCmac.part.0>
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
}
 8006ec6:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

08006ec8 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t* buffer, uint16_t size, uint32_t expectedCmac, KeyIdentifier_t keyID )
{
 8006ec8:	b530      	push	{r4, r5, lr}
 8006eca:	0004      	movs	r4, r0
 8006ecc:	b085      	sub	sp, #20
 8006ece:	0015      	movs	r5, r2
    if( buffer == NULL )
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8006ed0:	2002      	movs	r0, #2
    if( buffer == NULL )
 8006ed2:	2c00      	cmp	r4, #0
 8006ed4:	d00e      	beq.n	8006ef4 <SecureElementVerifyAesCmac+0x2c>
    }

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
    uint32_t compCmac = 0;
 8006ed6:	2000      	movs	r0, #0
 8006ed8:	aa03      	add	r2, sp, #12
 8006eda:	9200      	str	r2, [sp, #0]
 8006edc:	000a      	movs	r2, r1
 8006ede:	0021      	movs	r1, r4
 8006ee0:	9003      	str	r0, [sp, #12]
 8006ee2:	f7ff ff05 	bl	8006cf0 <ComputeCmac.part.0>
    retval = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
    if( retval != SECURE_ELEMENT_SUCCESS )
 8006ee6:	2800      	cmp	r0, #0
 8006ee8:	d104      	bne.n	8006ef4 <SecureElementVerifyAesCmac+0x2c>
    {
        return retval;
    }

    if( expectedCmac != compCmac )
 8006eea:	9b03      	ldr	r3, [sp, #12]
 8006eec:	1b58      	subs	r0, r3, r5
 8006eee:	1e43      	subs	r3, r0, #1
 8006ef0:	4198      	sbcs	r0, r3
        return SECURE_ELEMENT_ERROR_NPE;
 8006ef2:	b2c0      	uxtb	r0, r0
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
    }

    return retval;
}
 8006ef4:	b005      	add	sp, #20
 8006ef6:	bd30      	pop	{r4, r5, pc}

08006ef8 <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID, uint8_t* encBuffer )
{
 8006ef8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006efa:	b085      	sub	sp, #20
 8006efc:	9000      	str	r0, [sp, #0]
 8006efe:	000e      	movs	r6, r1
 8006f00:	0014      	movs	r4, r2
 8006f02:	9301      	str	r3, [sp, #4]
    if( buffer == NULL || encBuffer == NULL )
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8006f04:	2502      	movs	r5, #2
    if( buffer == NULL || encBuffer == NULL )
 8006f06:	2800      	cmp	r0, #0
 8006f08:	d01c      	beq.n	8006f44 <SecureElementAesEncrypt+0x4c>
 8006f0a:	9b01      	ldr	r3, [sp, #4]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d019      	beq.n	8006f44 <SecureElementAesEncrypt+0x4c>
    }

    // Check if the size is divisible by 16,
    if( ( size % 16 ) != 0 )
 8006f10:	210f      	movs	r1, #15
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 8006f12:	3503      	adds	r5, #3
    if( ( size % 16 ) != 0 )
 8006f14:	4031      	ands	r1, r6
 8006f16:	d115      	bne.n	8006f44 <SecureElementAesEncrypt+0x4c>
    }

    memset1( SeNvmCtx.AesContext.ksch, '\0', 240 );
 8006f18:	4f11      	ldr	r7, [pc, #68]	; (8006f60 <SecureElementAesEncrypt+0x68>)
 8006f1a:	22f0      	movs	r2, #240	; 0xf0
 8006f1c:	0038      	movs	r0, r7
 8006f1e:	f005 fe3f 	bl	800cba0 <memset1>

    Key_t* pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 8006f22:	a903      	add	r1, sp, #12
 8006f24:	0020      	movs	r0, r4
 8006f26:	f7ff fecb 	bl	8006cc0 <GetKeyByID>
 8006f2a:	1e05      	subs	r5, r0, #0

    if( retval == SECURE_ELEMENT_SUCCESS )
 8006f2c:	d10a      	bne.n	8006f44 <SecureElementAesEncrypt+0x4c>
    {
        aes_set_key( pItem->KeyValue, 16, &SeNvmCtx.AesContext );
 8006f2e:	9b03      	ldr	r3, [sp, #12]
 8006f30:	003a      	movs	r2, r7
 8006f32:	1c58      	adds	r0, r3, #1
 8006f34:	2110      	movs	r1, #16
 8006f36:	f7ff fbd1 	bl	80066dc <aes_set_key>
 8006f3a:	0034      	movs	r4, r6
 8006f3c:	1b30      	subs	r0, r6, r4
 8006f3e:	b2c0      	uxtb	r0, r0

        uint8_t block = 0;

        while( size != 0 )
 8006f40:	2c00      	cmp	r4, #0
 8006f42:	d102      	bne.n	8006f4a <SecureElementAesEncrypt+0x52>
            block = block + 16;
            size = size - 16;
        }
    }
    return retval;
}
 8006f44:	0028      	movs	r0, r5
 8006f46:	b005      	add	sp, #20
 8006f48:	bdf0      	pop	{r4, r5, r6, r7, pc}
            aes_encrypt( &buffer[block], &encBuffer[block], &SeNvmCtx.AesContext );
 8006f4a:	9b01      	ldr	r3, [sp, #4]
 8006f4c:	003a      	movs	r2, r7
 8006f4e:	1819      	adds	r1, r3, r0
 8006f50:	9b00      	ldr	r3, [sp, #0]
            size = size - 16;
 8006f52:	3c10      	subs	r4, #16
            aes_encrypt( &buffer[block], &encBuffer[block], &SeNvmCtx.AesContext );
 8006f54:	1818      	adds	r0, r3, r0
 8006f56:	f7ff fc45 	bl	80067e4 <aes_encrypt>
            size = size - 16;
 8006f5a:	b2a4      	uxth	r4, r4
 8006f5c:	e7ee      	b.n	8006f3c <SecureElementAesEncrypt+0x44>
 8006f5e:	46c0      	nop			; (mov r8, r8)
 8006f60:	20000398 	.word	0x20000398

08006f64 <SecureElementSetKey.part.2>:
SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t* key )
 8006f64:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8006f66:	000d      	movs	r5, r1
 8006f68:	2300      	movs	r3, #0
        if( SeNvmCtx.KeyList[i].KeyID == keyID )
 8006f6a:	2411      	movs	r4, #17
 8006f6c:	4a1d      	ldr	r2, [pc, #116]	; (8006fe4 <SecureElementSetKey.part.2+0x80>)
 8006f6e:	0021      	movs	r1, r4
 8006f70:	268b      	movs	r6, #139	; 0x8b
 8006f72:	4359      	muls	r1, r3
 8006f74:	00b6      	lsls	r6, r6, #2
 8006f76:	1989      	adds	r1, r1, r6
 8006f78:	5c51      	ldrb	r1, [r2, r1]
 8006f7a:	4281      	cmp	r1, r0
 8006f7c:	d12c      	bne.n	8006fd8 <SecureElementSetKey.part.2+0x74>
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
 8006f7e:	3880      	subs	r0, #128	; 0x80
 8006f80:	b2c0      	uxtb	r0, r0
 8006f82:	2101      	movs	r1, #1
 8006f84:	2809      	cmp	r0, #9
 8006f86:	d802      	bhi.n	8006f8e <SecureElementSetKey.part.2+0x2a>
 8006f88:	4c17      	ldr	r4, [pc, #92]	; (8006fe8 <SecureElementSetKey.part.2+0x84>)
 8006f8a:	40c4      	lsrs	r4, r0
 8006f8c:	43a1      	bics	r1, r4
 8006f8e:	2411      	movs	r4, #17
 8006f90:	435c      	muls	r4, r3
 8006f92:	4b16      	ldr	r3, [pc, #88]	; (8006fec <SecureElementSetKey.part.2+0x88>)
 8006f94:	4e16      	ldr	r6, [pc, #88]	; (8006ff0 <SecureElementSetKey.part.2+0x8c>)
 8006f96:	18e4      	adds	r4, r4, r3
 8006f98:	1914      	adds	r4, r2, r4
                uint8_t decryptedKey[16] = { 0 };
 8006f9a:	2210      	movs	r2, #16
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
 8006f9c:	2900      	cmp	r1, #0
 8006f9e:	d113      	bne.n	8006fc8 <SecureElementSetKey.part.2+0x64>
                uint8_t decryptedKey[16] = { 0 };
 8006fa0:	4668      	mov	r0, sp
 8006fa2:	f006 fff0 	bl	800df86 <memset>
                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
 8006fa6:	466b      	mov	r3, sp
 8006fa8:	227f      	movs	r2, #127	; 0x7f
 8006faa:	2110      	movs	r1, #16
 8006fac:	0028      	movs	r0, r5
 8006fae:	f7ff ffa3 	bl	8006ef8 <SecureElementAesEncrypt>
                memcpy1( SeNvmCtx.KeyList[i].KeyValue, decryptedKey, KEY_SIZE );
 8006fb2:	2210      	movs	r2, #16
                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
 8006fb4:	0005      	movs	r5, r0
                memcpy1( SeNvmCtx.KeyList[i].KeyValue, decryptedKey, KEY_SIZE );
 8006fb6:	4669      	mov	r1, sp
 8006fb8:	0020      	movs	r0, r4
 8006fba:	f005 fddc 	bl	800cb76 <memcpy1>
                SeNvmCtxChanged( );
 8006fbe:	6833      	ldr	r3, [r6, #0]
 8006fc0:	4798      	blx	r3
}
 8006fc2:	0028      	movs	r0, r5
 8006fc4:	b004      	add	sp, #16
 8006fc6:	bd70      	pop	{r4, r5, r6, pc}
                memcpy1( SeNvmCtx.KeyList[i].KeyValue, key, KEY_SIZE );
 8006fc8:	0029      	movs	r1, r5
 8006fca:	0020      	movs	r0, r4
 8006fcc:	f005 fdd3 	bl	800cb76 <memcpy1>
                SeNvmCtxChanged( );
 8006fd0:	6833      	ldr	r3, [r6, #0]
 8006fd2:	4798      	blx	r3
                return SECURE_ELEMENT_SUCCESS;
 8006fd4:	2500      	movs	r5, #0
 8006fd6:	e7f4      	b.n	8006fc2 <SecureElementSetKey.part.2+0x5e>
 8006fd8:	3301      	adds	r3, #1
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8006fda:	2b18      	cmp	r3, #24
 8006fdc:	d1c7      	bne.n	8006f6e <SecureElementSetKey.part.2+0xa>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8006fde:	2503      	movs	r5, #3
 8006fe0:	e7ef      	b.n	8006fc2 <SecureElementSetKey.part.2+0x5e>
 8006fe2:	46c0      	nop			; (mov r8, r8)
 8006fe4:	20000378 	.word	0x20000378
 8006fe8:	00000249 	.word	0x00000249
 8006fec:	0000022d 	.word	0x0000022d
 8006ff0:	20000374 	.word	0x20000374

08006ff4 <SecureElementSetKey>:
{
 8006ff4:	b510      	push	{r4, lr}
        return SECURE_ELEMENT_ERROR_NPE;
 8006ff6:	2302      	movs	r3, #2
    if( key == NULL )
 8006ff8:	2900      	cmp	r1, #0
 8006ffa:	d002      	beq.n	8007002 <SecureElementSetKey+0xe>
 8006ffc:	f7ff ffb2 	bl	8006f64 <SecureElementSetKey.part.2>
 8007000:	0003      	movs	r3, r0
}
 8007002:	0018      	movs	r0, r3
 8007004:	bd10      	pop	{r4, pc}

08007006 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( Version_t version, uint8_t* input, KeyIdentifier_t rootKeyID, KeyIdentifier_t targetKeyID )
{
 8007006:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007008:	0004      	movs	r4, r0
 800700a:	b085      	sub	sp, #20
 800700c:	000f      	movs	r7, r1
 800700e:	0015      	movs	r5, r2
 8007010:	001e      	movs	r6, r3
    if( input == NULL )
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8007012:	2002      	movs	r0, #2
    if( input == NULL )
 8007014:	2900      	cmp	r1, #0
 8007016:	d00d      	beq.n	8007034 <SecureElementDeriveAndStoreKey+0x2e>
    }

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
    uint8_t key[16] = { 0 };
 8007018:	2210      	movs	r2, #16
 800701a:	2100      	movs	r1, #0
 800701c:	4668      	mov	r0, sp
 800701e:	f006 ffb2 	bl	800df86 <memset>

    // In case of MC_KE_KEY, prevent other keys than NwkKey or AppKey for LoRaWAN 1.1 or later
    if( targetKeyID == MC_KE_KEY )
 8007022:	2e7f      	cmp	r6, #127	; 0x7f
 8007024:	d10b      	bne.n	800703e <SecureElementDeriveAndStoreKey+0x38>
    {
        if( ( ( rootKeyID == APP_KEY ) && ( version.Fields.Minor == 0 ) ) || ( rootKeyID == NWK_KEY ) )
 8007026:	2d00      	cmp	r5, #0
 8007028:	d106      	bne.n	8007038 <SecureElementDeriveAndStoreKey+0x32>
 800702a:	0224      	lsls	r4, r4, #8
 800702c:	0e24      	lsrs	r4, r4, #24
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800702e:	2003      	movs	r0, #3
        if( ( ( rootKeyID == APP_KEY ) && ( version.Fields.Minor == 0 ) ) || ( rootKeyID == NWK_KEY ) )
 8007030:	2c00      	cmp	r4, #0
 8007032:	d104      	bne.n	800703e <SecureElementDeriveAndStoreKey+0x38>
    {
        return retval;
    }

    return SECURE_ELEMENT_SUCCESS;
}
 8007034:	b005      	add	sp, #20
 8007036:	bdf0      	pop	{r4, r5, r6, r7, pc}
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8007038:	2003      	movs	r0, #3
        if( ( ( rootKeyID == APP_KEY ) && ( version.Fields.Minor == 0 ) ) || ( rootKeyID == NWK_KEY ) )
 800703a:	2d02      	cmp	r5, #2
 800703c:	d0fa      	beq.n	8007034 <SecureElementDeriveAndStoreKey+0x2e>
    retval = SecureElementAesEncrypt( input, 16, rootKeyID, key );
 800703e:	466b      	mov	r3, sp
 8007040:	002a      	movs	r2, r5
 8007042:	2110      	movs	r1, #16
 8007044:	0038      	movs	r0, r7
 8007046:	f7ff ff57 	bl	8006ef8 <SecureElementAesEncrypt>
    if( retval != SECURE_ELEMENT_SUCCESS )
 800704a:	2800      	cmp	r0, #0
 800704c:	d1f2      	bne.n	8007034 <SecureElementDeriveAndStoreKey+0x2e>
 800704e:	4669      	mov	r1, sp
 8007050:	0030      	movs	r0, r6
 8007052:	f7ff ff87 	bl	8006f64 <SecureElementSetKey.part.2>
 8007056:	e7ed      	b.n	8007034 <SecureElementDeriveAndStoreKey+0x2e>

08007058 <SecureElementRandomNumber>:

SecureElementStatus_t SecureElementRandomNumber( uint32_t* randomNum )
{
 8007058:	b513      	push	{r0, r1, r4, lr}
 800705a:	0004      	movs	r4, r0
    if( randomNum == NULL )
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800705c:	2002      	movs	r0, #2
    if( randomNum == NULL )
 800705e:	2c00      	cmp	r4, #0
 8007060:	d005      	beq.n	800706e <SecureElementRandomNumber+0x16>
    }
    *randomNum = Radio.Random( );
 8007062:	4b03      	ldr	r3, [pc, #12]	; (8007070 <SecureElementRandomNumber+0x18>)
 8007064:	69db      	ldr	r3, [r3, #28]
 8007066:	9301      	str	r3, [sp, #4]
 8007068:	4798      	blx	r3
 800706a:	6020      	str	r0, [r4, #0]
    return SECURE_ELEMENT_SUCCESS;
 800706c:	2000      	movs	r0, #0
}
 800706e:	bd16      	pop	{r1, r2, r4, pc}
 8007070:	0800eaa4 	.word	0x0800eaa4

08007074 <SecureElementSetDevEui>:

SecureElementStatus_t SecureElementSetDevEui( uint8_t* devEui )
{
 8007074:	0001      	movs	r1, r0
 8007076:	b510      	push	{r4, lr}
    if( devEui == NULL )
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8007078:	2002      	movs	r0, #2
    if( devEui == NULL )
 800707a:	2900      	cmp	r1, #0
 800707c:	d007      	beq.n	800708e <SecureElementSetDevEui+0x1a>
    }
    memcpy1( SeNvmCtx.DevEui, devEui, SE_EUI_SIZE );
 800707e:	4804      	ldr	r0, [pc, #16]	; (8007090 <SecureElementSetDevEui+0x1c>)
 8007080:	2210      	movs	r2, #16
 8007082:	f005 fd78 	bl	800cb76 <memcpy1>
    SeNvmCtxChanged( );
 8007086:	4b03      	ldr	r3, [pc, #12]	; (8007094 <SecureElementSetDevEui+0x20>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4798      	blx	r3
    return SECURE_ELEMENT_SUCCESS;
 800708c:	2000      	movs	r0, #0
}
 800708e:	bd10      	pop	{r4, pc}
 8007090:	20000378 	.word	0x20000378
 8007094:	20000374 	.word	0x20000374

08007098 <SecureElementGetDevEui>:

uint8_t* SecureElementGetDevEui( void )
{
    return SeNvmCtx.DevEui;
}
 8007098:	4800      	ldr	r0, [pc, #0]	; (800709c <SecureElementGetDevEui+0x4>)
 800709a:	4770      	bx	lr
 800709c:	20000378 	.word	0x20000378

080070a0 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t* joinEui )
{
 80070a0:	0001      	movs	r1, r0
 80070a2:	b510      	push	{r4, lr}
    if( joinEui == NULL )
    {
        return SECURE_ELEMENT_ERROR_NPE;
 80070a4:	2002      	movs	r0, #2
    if( joinEui == NULL )
 80070a6:	2900      	cmp	r1, #0
 80070a8:	d007      	beq.n	80070ba <SecureElementSetJoinEui+0x1a>
    }
    memcpy1( SeNvmCtx.JoinEui, joinEui, SE_EUI_SIZE );
 80070aa:	4804      	ldr	r0, [pc, #16]	; (80070bc <SecureElementSetJoinEui+0x1c>)
 80070ac:	2210      	movs	r2, #16
 80070ae:	f005 fd62 	bl	800cb76 <memcpy1>
    SeNvmCtxChanged( );
 80070b2:	4b03      	ldr	r3, [pc, #12]	; (80070c0 <SecureElementSetJoinEui+0x20>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4798      	blx	r3
    return SECURE_ELEMENT_SUCCESS;
 80070b8:	2000      	movs	r0, #0
}
 80070ba:	bd10      	pop	{r4, pc}
 80070bc:	20000388 	.word	0x20000388
 80070c0:	20000374 	.word	0x20000374

080070c4 <SecureElementGetJoinEui>:

uint8_t* SecureElementGetJoinEui( void )
{
    return SeNvmCtx.JoinEui;
}
 80070c4:	4800      	ldr	r0, [pc, #0]	; (80070c8 <SecureElementGetJoinEui+0x4>)
 80070c6:	4770      	bx	lr
 80070c8:	20000388 	.word	0x20000388

080070cc <OnRadioRxError>:
#endif
}

static void OnRadioRxError( void )
{
    LoRaMacRadioEvents.Events.RxError = 1;
 80070cc:	2302      	movs	r3, #2
 80070ce:	4a08      	ldr	r2, [pc, #32]	; (80070f0 <OnRadioRxError+0x24>)
{
 80070d0:	b510      	push	{r4, lr}
    LoRaMacRadioEvents.Events.RxError = 1;
 80070d2:	7811      	ldrb	r1, [r2, #0]
 80070d4:	430b      	orrs	r3, r1
 80070d6:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 80070d8:	23d2      	movs	r3, #210	; 0xd2
 80070da:	4a06      	ldr	r2, [pc, #24]	; (80070f4 <OnRadioRxError+0x28>)
 80070dc:	009b      	lsls	r3, r3, #2
 80070de:	58d3      	ldr	r3, [r2, r3]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d003      	beq.n	80070ec <OnRadioRxError+0x20>
 80070e4:	68db      	ldr	r3, [r3, #12]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d000      	beq.n	80070ec <OnRadioRxError+0x20>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 80070ea:	4798      	blx	r3
    }
}
 80070ec:	bd10      	pop	{r4, pc}
 80070ee:	46c0      	nop			; (mov r8, r8)
 80070f0:	2000073c 	.word	0x2000073c
 80070f4:	2000091c 	.word	0x2000091c

080070f8 <UpdateRxSlotIdleState>:
#endif
}

static void UpdateRxSlotIdleState( void )
{
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 80070f8:	4b05      	ldr	r3, [pc, #20]	; (8007110 <UpdateRxSlotIdleState+0x18>)
 80070fa:	4a06      	ldr	r2, [pc, #24]	; (8007114 <UpdateRxSlotIdleState+0x1c>)
 80070fc:	589a      	ldr	r2, [r3, r2]
 80070fe:	32f0      	adds	r2, #240	; 0xf0
 8007100:	7811      	ldrb	r1, [r2, #0]
 8007102:	2290      	movs	r2, #144	; 0x90
 8007104:	00d2      	lsls	r2, r2, #3
 8007106:	2902      	cmp	r1, #2
 8007108:	d000      	beq.n	800710c <UpdateRxSlotIdleState+0x14>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 800710a:	2106      	movs	r1, #6
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 800710c:	5499      	strb	r1, [r3, r2]
    }
}
 800710e:	4770      	bx	lr
 8007110:	2000091c 	.word	0x2000091c
 8007114:	00000484 	.word	0x00000484

08007118 <StopRetransmission>:
    return false;
}

static bool StopRetransmission( void )
{
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8007118:	4b11      	ldr	r3, [pc, #68]	; (8007160 <StopRetransmission+0x48>)
 800711a:	4a12      	ldr	r2, [pc, #72]	; (8007164 <StopRetransmission+0x4c>)
 800711c:	5c9a      	ldrb	r2, [r3, r2]
 800711e:	0792      	lsls	r2, r2, #30
 8007120:	d503      	bpl.n	800712a <StopRetransmission+0x12>
        ( ( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_1 ) &&
 8007122:	4a11      	ldr	r2, [pc, #68]	; (8007168 <StopRetransmission+0x50>)
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8007124:	5c9a      	ldrb	r2, [r3, r2]
 8007126:	2a01      	cmp	r2, #1
 8007128:	d90a      	bls.n	8007140 <StopRetransmission+0x28>
          ( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_2 ) ) )
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( MacCtx.NvmCtx->AdrCtrlOn == true )
 800712a:	4a10      	ldr	r2, [pc, #64]	; (800716c <StopRetransmission+0x54>)
 800712c:	589a      	ldr	r2, [r3, r2]
 800712e:	0011      	movs	r1, r2
 8007130:	31f2      	adds	r1, #242	; 0xf2
 8007132:	7809      	ldrb	r1, [r1, #0]
 8007134:	2900      	cmp	r1, #0
 8007136:	d003      	beq.n	8007140 <StopRetransmission+0x28>
        {
            MacCtx.NvmCtx->AdrAckCounter++;
 8007138:	32f4      	adds	r2, #244	; 0xf4
 800713a:	6811      	ldr	r1, [r2, #0]
 800713c:	3101      	adds	r1, #1
 800713e:	6011      	str	r1, [r2, #0]
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 8007140:	2182      	movs	r1, #130	; 0x82
 8007142:	2200      	movs	r2, #0
 8007144:	00c9      	lsls	r1, r1, #3
 8007146:	545a      	strb	r2, [r3, r1]
    MacCtx.NodeAckRequested = false;
 8007148:	4909      	ldr	r1, [pc, #36]	; (8007170 <StopRetransmission+0x58>)
 800714a:	545a      	strb	r2, [r3, r1]
    MacCtx.AckTimeoutRetry = false;
 800714c:	4909      	ldr	r1, [pc, #36]	; (8007174 <StopRetransmission+0x5c>)
 800714e:	545a      	strb	r2, [r3, r1]
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8007150:	39d3      	subs	r1, #211	; 0xd3
 8007152:	5858      	ldr	r0, [r3, r1]
 8007154:	3202      	adds	r2, #2
 8007156:	4390      	bics	r0, r2
 8007158:	5058      	str	r0, [r3, r1]

    return true;
}
 800715a:	2001      	movs	r0, #1
 800715c:	4770      	bx	lr
 800715e:	46c0      	nop			; (mov r8, r8)
 8007160:	2000091c 	.word	0x2000091c
 8007164:	00000481 	.word	0x00000481
 8007168:	0000042d 	.word	0x0000042d
 800716c:	00000484 	.word	0x00000484
 8007170:	00000414 	.word	0x00000414
 8007174:	00000413 	.word	0x00000413

08007178 <CallNvmCtxCallback>:
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
}

static void CallNvmCtxCallback( LoRaMacNvmCtxModule_t module )
{
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->NvmContextChange != NULL ) )
 8007178:	23d2      	movs	r3, #210	; 0xd2
 800717a:	4a05      	ldr	r2, [pc, #20]	; (8007190 <CallNvmCtxCallback+0x18>)
 800717c:	009b      	lsls	r3, r3, #2
 800717e:	58d3      	ldr	r3, [r2, r3]
{
 8007180:	b510      	push	{r4, lr}
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->NvmContextChange != NULL ) )
 8007182:	2b00      	cmp	r3, #0
 8007184:	d003      	beq.n	800718e <CallNvmCtxCallback+0x16>
 8007186:	689b      	ldr	r3, [r3, #8]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d000      	beq.n	800718e <CallNvmCtxCallback+0x16>
    {
        MacCtx.MacCallbacks->NvmContextChange( module );
 800718c:	4798      	blx	r3
    }
}
 800718e:	bd10      	pop	{r4, pc}
 8007190:	2000091c 	.word	0x2000091c

08007194 <EventMacNvmCtxChanged>:

static void EventMacNvmCtxChanged( void )
{
 8007194:	b510      	push	{r4, lr}
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_MAC );
 8007196:	2000      	movs	r0, #0
 8007198:	f7ff ffee 	bl	8007178 <CallNvmCtxCallback>
}
 800719c:	bd10      	pop	{r4, pc}

0800719e <EventRegionNvmCtxChanged>:

static void EventRegionNvmCtxChanged( void )
{
 800719e:	b510      	push	{r4, lr}
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_REGION );
 80071a0:	2001      	movs	r0, #1
 80071a2:	f7ff ffe9 	bl	8007178 <CallNvmCtxCallback>
}
 80071a6:	bd10      	pop	{r4, pc}

080071a8 <EventCryptoNvmCtxChanged>:

static void EventCryptoNvmCtxChanged( void )
{
 80071a8:	b510      	push	{r4, lr}
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_CRYPTO );
 80071aa:	2002      	movs	r0, #2
 80071ac:	f7ff ffe4 	bl	8007178 <CallNvmCtxCallback>
}
 80071b0:	bd10      	pop	{r4, pc}

080071b2 <EventSecureElementNvmCtxChanged>:

static void EventSecureElementNvmCtxChanged( void )
{
 80071b2:	b510      	push	{r4, lr}
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_SECURE_ELEMENT );
 80071b4:	2003      	movs	r0, #3
 80071b6:	f7ff ffdf 	bl	8007178 <CallNvmCtxCallback>
}
 80071ba:	bd10      	pop	{r4, pc}

080071bc <EventCommandsNvmCtxChanged>:

static void EventCommandsNvmCtxChanged( void )
{
 80071bc:	b510      	push	{r4, lr}
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_COMMANDS );
 80071be:	2004      	movs	r0, #4
 80071c0:	f7ff ffda 	bl	8007178 <CallNvmCtxCallback>
}
 80071c4:	bd10      	pop	{r4, pc}

080071c6 <EventClassBNvmCtxChanged>:

static void EventClassBNvmCtxChanged( void )
{
 80071c6:	b510      	push	{r4, lr}
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_CLASS_B );
 80071c8:	2005      	movs	r0, #5
 80071ca:	f7ff ffd5 	bl	8007178 <CallNvmCtxCallback>
}
 80071ce:	bd10      	pop	{r4, pc}

080071d0 <EventConfirmQueueNvmCtxChanged>:

static void EventConfirmQueueNvmCtxChanged( void )
{
 80071d0:	b510      	push	{r4, lr}
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_CONFIRM_QUEUE );
 80071d2:	2006      	movs	r0, #6
 80071d4:	f7ff ffd0 	bl	8007178 <CallNvmCtxCallback>
}
 80071d8:	bd10      	pop	{r4, pc}
	...

080071dc <GetMaxAppPayloadWithoutFOptsLength>:
{
 80071dc:	b507      	push	{r0, r1, r2, lr}
    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 80071de:	4b0c      	ldr	r3, [pc, #48]	; (8007210 <GetMaxAppPayloadWithoutFOptsLength+0x34>)
 80071e0:	4a0c      	ldr	r2, [pc, #48]	; (8007214 <GetMaxAppPayloadWithoutFOptsLength+0x38>)
 80071e2:	4669      	mov	r1, sp
 80071e4:	58d3      	ldr	r3, [r2, r3]
 80071e6:	2296      	movs	r2, #150	; 0x96
 80071e8:	0052      	lsls	r2, r2, #1
 80071ea:	5c9a      	ldrb	r2, [r3, r2]
    getPhy.Datarate = datarate;
 80071ec:	7048      	strb	r0, [r1, #1]
    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 80071ee:	708a      	strb	r2, [r1, #2]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 80071f0:	220d      	movs	r2, #13
 80071f2:	700a      	strb	r2, [r1, #0]
    if( MacCtx.NvmCtx->RepeaterSupport == true )
 80071f4:	2240      	movs	r2, #64	; 0x40
 80071f6:	32ff      	adds	r2, #255	; 0xff
 80071f8:	5c9a      	ldrb	r2, [r3, r2]
 80071fa:	2a00      	cmp	r2, #0
 80071fc:	d001      	beq.n	8007202 <GetMaxAppPayloadWithoutFOptsLength+0x26>
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 80071fe:	220e      	movs	r2, #14
 8007200:	700a      	strb	r2, [r1, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8007202:	7818      	ldrb	r0, [r3, #0]
 8007204:	4669      	mov	r1, sp
 8007206:	f003 fdfb 	bl	800ae00 <RegionGetPhyParam>
    return phyParam.Value;
 800720a:	b2c0      	uxtb	r0, r0
}
 800720c:	bd0e      	pop	{r1, r2, r3, pc}
 800720e:	46c0      	nop			; (mov r8, r8)
 8007210:	00000484 	.word	0x00000484
 8007214:	2000091c 	.word	0x2000091c

08007218 <OnAckTimeoutTimerEvent>:
{
 8007218:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.AckTimeoutTimer );
 800721a:	4810      	ldr	r0, [pc, #64]	; (800725c <OnAckTimeoutTimerEvent+0x44>)
 800721c:	f005 fbba 	bl	800c994 <TimerStop>
    if( MacCtx.NodeAckRequested == true )
 8007220:	4b0f      	ldr	r3, [pc, #60]	; (8007260 <OnAckTimeoutTimerEvent+0x48>)
 8007222:	4a10      	ldr	r2, [pc, #64]	; (8007264 <OnAckTimeoutTimerEvent+0x4c>)
 8007224:	5c9a      	ldrb	r2, [r3, r2]
 8007226:	2a00      	cmp	r2, #0
 8007228:	d002      	beq.n	8007230 <OnAckTimeoutTimerEvent+0x18>
        MacCtx.AckTimeoutRetry = true;
 800722a:	2101      	movs	r1, #1
 800722c:	4a0e      	ldr	r2, [pc, #56]	; (8007268 <OnAckTimeoutTimerEvent+0x50>)
 800722e:	5499      	strb	r1, [r3, r2]
    if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 8007230:	4a0e      	ldr	r2, [pc, #56]	; (800726c <OnAckTimeoutTimerEvent+0x54>)
 8007232:	589a      	ldr	r2, [r3, r2]
 8007234:	32f0      	adds	r2, #240	; 0xf0
 8007236:	7812      	ldrb	r2, [r2, #0]
 8007238:	2a02      	cmp	r2, #2
 800723a:	d104      	bne.n	8007246 <OnAckTimeoutTimerEvent+0x2e>
        MacCtx.MacFlags.Bits.MacDone = 1;
 800723c:	490c      	ldr	r1, [pc, #48]	; (8007270 <OnAckTimeoutTimerEvent+0x58>)
 800723e:	321e      	adds	r2, #30
 8007240:	5c58      	ldrb	r0, [r3, r1]
 8007242:	4302      	orrs	r2, r0
 8007244:	545a      	strb	r2, [r3, r1]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8007246:	22d2      	movs	r2, #210	; 0xd2
 8007248:	0092      	lsls	r2, r2, #2
 800724a:	589b      	ldr	r3, [r3, r2]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d003      	beq.n	8007258 <OnAckTimeoutTimerEvent+0x40>
 8007250:	68db      	ldr	r3, [r3, #12]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d000      	beq.n	8007258 <OnAckTimeoutTimerEvent+0x40>
        MacCtx.MacCallbacks->MacProcessNotify( );
 8007256:	4798      	blx	r3
}
 8007258:	bd10      	pop	{r4, pc}
 800725a:	46c0      	nop			; (mov r8, r8)
 800725c:	20000d14 	.word	0x20000d14
 8007260:	2000091c 	.word	0x2000091c
 8007264:	00000414 	.word	0x00000414
 8007268:	00000413 	.word	0x00000413
 800726c:	00000484 	.word	0x00000484
 8007270:	00000481 	.word	0x00000481

08007274 <PrepareRxDoneAbort>:
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 8007274:	22d0      	movs	r2, #208	; 0xd0
 8007276:	2380      	movs	r3, #128	; 0x80
{
 8007278:	b510      	push	{r4, lr}
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 800727a:	4c0a      	ldr	r4, [pc, #40]	; (80072a4 <PrepareRxDoneAbort+0x30>)
 800727c:	0092      	lsls	r2, r2, #2
 800727e:	58a1      	ldr	r1, [r4, r2]
 8007280:	430b      	orrs	r3, r1
 8007282:	50a3      	str	r3, [r4, r2]
    if( MacCtx.NodeAckRequested == true )
 8007284:	4b08      	ldr	r3, [pc, #32]	; (80072a8 <PrepareRxDoneAbort+0x34>)
 8007286:	5ce3      	ldrb	r3, [r4, r3]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d002      	beq.n	8007292 <PrepareRxDoneAbort+0x1e>
        OnAckTimeoutTimerEvent( NULL );
 800728c:	2000      	movs	r0, #0
 800728e:	f7ff ffc3 	bl	8007218 <OnAckTimeoutTimerEvent>
    MacCtx.MacFlags.Bits.MacDone = 1;
 8007292:	2122      	movs	r1, #34	; 0x22
    MacCtx.MacFlags.Bits.McpsInd = 1;
 8007294:	4a05      	ldr	r2, [pc, #20]	; (80072ac <PrepareRxDoneAbort+0x38>)
 8007296:	5ca3      	ldrb	r3, [r4, r2]
    MacCtx.MacFlags.Bits.MacDone = 1;
 8007298:	430b      	orrs	r3, r1
 800729a:	54a3      	strb	r3, [r4, r2]
    UpdateRxSlotIdleState( );
 800729c:	f7ff ff2c 	bl	80070f8 <UpdateRxSlotIdleState>
}
 80072a0:	bd10      	pop	{r4, pc}
 80072a2:	46c0      	nop			; (mov r8, r8)
 80072a4:	2000091c 	.word	0x2000091c
 80072a8:	00000414 	.word	0x00000414
 80072ac:	00000481 	.word	0x00000481

080072b0 <HandleRadioRxErrorTimeout>:
{
 80072b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 80072b2:	4c2d      	ldr	r4, [pc, #180]	; (8007368 <HandleRadioRxErrorTimeout+0xb8>)
 80072b4:	4e2d      	ldr	r6, [pc, #180]	; (800736c <HandleRadioRxErrorTimeout+0xbc>)
{
 80072b6:	b085      	sub	sp, #20
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 80072b8:	59a3      	ldr	r3, [r4, r6]
{
 80072ba:	9001      	str	r0, [sp, #4]
 80072bc:	9102      	str	r1, [sp, #8]
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 80072be:	33f0      	adds	r3, #240	; 0xf0
 80072c0:	781b      	ldrb	r3, [r3, #0]
 80072c2:	2b02      	cmp	r3, #2
 80072c4:	d003      	beq.n	80072ce <HandleRadioRxErrorTimeout+0x1e>
        Radio.Sleep( );
 80072c6:	4b2a      	ldr	r3, [pc, #168]	; (8007370 <HandleRadioRxErrorTimeout+0xc0>)
 80072c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072ca:	9303      	str	r3, [sp, #12]
 80072cc:	4798      	blx	r3
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 80072ce:	f002 fe20 	bl	8009f12 <LoRaMacClassBIsBeaconExpected>
 80072d2:	1e05      	subs	r5, r0, #0
 80072d4:	d005      	beq.n	80072e2 <HandleRadioRxErrorTimeout+0x32>
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 80072d6:	2002      	movs	r0, #2
 80072d8:	f002 fe11 	bl	8009efe <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 80072dc:	2000      	movs	r0, #0
 80072de:	f002 fe13 	bl	8009f08 <LoRaMacClassBBeaconTimerEvent>
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 80072e2:	59a3      	ldr	r3, [r4, r6]
 80072e4:	33f0      	adds	r3, #240	; 0xf0
 80072e6:	781b      	ldrb	r3, [r3, #0]
 80072e8:	2b01      	cmp	r3, #1
 80072ea:	d118      	bne.n	800731e <HandleRadioRxErrorTimeout+0x6e>
        if( LoRaMacClassBIsPingExpected( ) == true )
 80072ec:	f002 fe13 	bl	8009f16 <LoRaMacClassBIsPingExpected>
 80072f0:	1e07      	subs	r7, r0, #0
 80072f2:	d006      	beq.n	8007302 <HandleRadioRxErrorTimeout+0x52>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 80072f4:	2000      	movs	r0, #0
 80072f6:	f002 fe03 	bl	8009f00 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 80072fa:	2000      	movs	r0, #0
 80072fc:	f002 fe05 	bl	8009f0a <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 8007300:	003d      	movs	r5, r7
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 8007302:	f002 fe0a 	bl	8009f1a <LoRaMacClassBIsMulticastExpected>
 8007306:	2800      	cmp	r0, #0
 8007308:	d009      	beq.n	800731e <HandleRadioRxErrorTimeout+0x6e>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800730a:	2000      	movs	r0, #0
 800730c:	f002 fdf9 	bl	8009f02 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8007310:	2000      	movs	r0, #0
 8007312:	f002 fdfb 	bl	8009f0c <LoRaMacClassBMulticastSlotTimerEvent>
    UpdateRxSlotIdleState( );
 8007316:	f7ff feef 	bl	80070f8 <UpdateRxSlotIdleState>
}
 800731a:	b005      	add	sp, #20
 800731c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( classBRx == false )
 800731e:	2d00      	cmp	r5, #0
 8007320:	d1f9      	bne.n	8007316 <HandleRadioRxErrorTimeout+0x66>
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8007322:	2290      	movs	r2, #144	; 0x90
 8007324:	00d2      	lsls	r2, r2, #3
 8007326:	4b13      	ldr	r3, [pc, #76]	; (8007374 <HandleRadioRxErrorTimeout+0xc4>)
 8007328:	5ca2      	ldrb	r2, [r4, r2]
 800732a:	5ce3      	ldrb	r3, [r4, r3]
 800732c:	2a00      	cmp	r2, #0
 800732e:	d108      	bne.n	8007342 <HandleRadioRxErrorTimeout+0x92>
            if( MacCtx.NodeAckRequested == true )
 8007330:	2b00      	cmp	r3, #0
 8007332:	d002      	beq.n	800733a <HandleRadioRxErrorTimeout+0x8a>
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 8007334:	4b10      	ldr	r3, [pc, #64]	; (8007378 <HandleRadioRxErrorTimeout+0xc8>)
 8007336:	9a01      	ldr	r2, [sp, #4]
 8007338:	54e2      	strb	r2, [r4, r3]
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 800733a:	9801      	ldr	r0, [sp, #4]
 800733c:	f002 ffc4 	bl	800a2c8 <LoRaMacConfirmQueueSetStatusCmn>
 8007340:	e7e9      	b.n	8007316 <HandleRadioRxErrorTimeout+0x66>
            if( MacCtx.NodeAckRequested == true )
 8007342:	2b00      	cmp	r3, #0
 8007344:	d002      	beq.n	800734c <HandleRadioRxErrorTimeout+0x9c>
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 8007346:	4b0c      	ldr	r3, [pc, #48]	; (8007378 <HandleRadioRxErrorTimeout+0xc8>)
 8007348:	9a02      	ldr	r2, [sp, #8]
 800734a:	54e2      	strb	r2, [r4, r3]
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 800734c:	9802      	ldr	r0, [sp, #8]
 800734e:	f002 ffbb 	bl	800a2c8 <LoRaMacConfirmQueueSetStatusCmn>
            if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 8007352:	59a3      	ldr	r3, [r4, r6]
 8007354:	33f0      	adds	r3, #240	; 0xf0
 8007356:	781b      	ldrb	r3, [r3, #0]
 8007358:	2b02      	cmp	r3, #2
 800735a:	d0dc      	beq.n	8007316 <HandleRadioRxErrorTimeout+0x66>
                MacCtx.MacFlags.Bits.MacDone = 1;
 800735c:	2320      	movs	r3, #32
 800735e:	4a07      	ldr	r2, [pc, #28]	; (800737c <HandleRadioRxErrorTimeout+0xcc>)
 8007360:	5ca1      	ldrb	r1, [r4, r2]
 8007362:	430b      	orrs	r3, r1
 8007364:	54a3      	strb	r3, [r4, r2]
 8007366:	e7d6      	b.n	8007316 <HandleRadioRxErrorTimeout+0x66>
 8007368:	2000091c 	.word	0x2000091c
 800736c:	00000484 	.word	0x00000484
 8007370:	0800eaa4 	.word	0x0800eaa4
 8007374:	00000414 	.word	0x00000414
 8007378:	0000043d 	.word	0x0000043d
 800737c:	00000481 	.word	0x00000481

08007380 <ResetMacParameters>:
{
 8007380:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    MacCtx.NvmCtx->NetworkActivation = ACTIVATION_TYPE_NONE;
 8007382:	22ea      	movs	r2, #234	; 0xea
 8007384:	2500      	movs	r5, #0
 8007386:	4c32      	ldr	r4, [pc, #200]	; (8007450 <ResetMacParameters+0xd0>)
 8007388:	4f32      	ldr	r7, [pc, #200]	; (8007454 <ResetMacParameters+0xd4>)
 800738a:	0052      	lsls	r2, r2, #1
 800738c:	59e3      	ldr	r3, [r4, r7]
    MacCtx.ChannelsNbTransCounter = 0;
 800738e:	2180      	movs	r1, #128	; 0x80
    MacCtx.NvmCtx->NetworkActivation = ACTIVATION_TYPE_NONE;
 8007390:	549d      	strb	r5, [r3, r2]
    MacCtx.NvmCtx->AdrAckCounter = 0;
 8007392:	001a      	movs	r2, r3
 8007394:	32f4      	adds	r2, #244	; 0xf4
 8007396:	6015      	str	r5, [r2, #0]
    MacCtx.ChannelsNbTransCounter = 0;
 8007398:	2282      	movs	r2, #130	; 0x82
 800739a:	0049      	lsls	r1, r1, #1
 800739c:	00d2      	lsls	r2, r2, #3
 800739e:	52a1      	strh	r1, [r4, r2]
    MacCtx.AckTimeoutRetries = 1;
 80073a0:	4a2d      	ldr	r2, [pc, #180]	; (8007458 <ResetMacParameters+0xd8>)
 80073a2:	39ff      	subs	r1, #255	; 0xff
 80073a4:	54a1      	strb	r1, [r4, r2]
    MacCtx.AckTimeoutRetry = false;
 80073a6:	4a2d      	ldr	r2, [pc, #180]	; (800745c <ResetMacParameters+0xdc>)
 80073a8:	54a5      	strb	r5, [r4, r2]
    MacCtx.NvmCtx->MaxDCycle = 0;
 80073aa:	229e      	movs	r2, #158	; 0x9e
 80073ac:	0052      	lsls	r2, r2, #1
 80073ae:	549d      	strb	r5, [r3, r2]
    MacCtx.NvmCtx->AggregatedDCycle = 1;
 80073b0:	3286      	adds	r2, #134	; 0x86
 80073b2:	5299      	strh	r1, [r3, r2]
    MacCtx.NvmCtx->MacParams.ChannelsTxPower = MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower;
 80073b4:	001a      	movs	r2, r3
 80073b6:	7919      	ldrb	r1, [r3, #4]
 80073b8:	32f8      	adds	r2, #248	; 0xf8
 80073ba:	7011      	strb	r1, [r2, #0]
    MacCtx.NvmCtx->MacParams.ChannelsDatarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
 80073bc:	7959      	ldrb	r1, [r3, #5]
 80073be:	7051      	strb	r1, [r2, #1]
    MacCtx.NvmCtx->MacParams.Rx1DrOffset = MacCtx.NvmCtx->MacParamsDefaults.Rx1DrOffset;
 80073c0:	1d99      	adds	r1, r3, #6
 80073c2:	7fc9      	ldrb	r1, [r1, #31]
 80073c4:	3207      	adds	r2, #7
 80073c6:	7691      	strb	r1, [r2, #26]
    MacCtx.NvmCtx->MacParams.Rx2Channel = MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel;
 80073c8:	0019      	movs	r1, r3
 80073ca:	321d      	adds	r2, #29
 80073cc:	3128      	adds	r1, #40	; 0x28
 80073ce:	c941      	ldmia	r1!, {r0, r6}
 80073d0:	c241      	stmia	r2!, {r0, r6}
    MacCtx.NvmCtx->MacParams.RxCChannel = MacCtx.NvmCtx->MacParamsDefaults.RxCChannel;
 80073d2:	c941      	ldmia	r1!, {r0, r6}
 80073d4:	c241      	stmia	r2!, {r0, r6}
    MacCtx.NvmCtx->MacParams.UplinkDwellTime = MacCtx.NvmCtx->MacParamsDefaults.UplinkDwellTime;
 80073d6:	3af4      	subs	r2, #244	; 0xf4
 80073d8:	7811      	ldrb	r1, [r2, #0]
 80073da:	2296      	movs	r2, #150	; 0x96
 80073dc:	0052      	lsls	r2, r2, #1
 80073de:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParamsDefaults.DownlinkDwellTime;
 80073e0:	001a      	movs	r2, r3
 80073e2:	212e      	movs	r1, #46	; 0x2e
 80073e4:	3239      	adds	r2, #57	; 0x39
 80073e6:	7812      	ldrb	r2, [r2, #0]
 80073e8:	31ff      	adds	r1, #255	; 0xff
 80073ea:	545a      	strb	r2, [r3, r1]
    MacCtx.NvmCtx->MacParams.MaxEirp = MacCtx.NvmCtx->MacParamsDefaults.MaxEirp;
 80073ec:	001a      	movs	r2, r3
 80073ee:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80073f0:	32fc      	adds	r2, #252	; 0xfc
 80073f2:	6350      	str	r0, [r2, #52]	; 0x34
    MacCtx.NvmCtx->MacParams.AntennaGain = MacCtx.NvmCtx->MacParamsDefaults.AntennaGain;
 80073f4:	6c18      	ldr	r0, [r3, #64]	; 0x40
    MacCtx.NvmCtx->MacParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParamsDefaults.DownlinkDwellTime;
 80073f6:	000e      	movs	r6, r1
    MacCtx.NvmCtx->MacParams.AntennaGain = MacCtx.NvmCtx->MacParamsDefaults.AntennaGain;
 80073f8:	6390      	str	r0, [r2, #56]	; 0x38
    MacCtx.NodeAckRequested = false;
 80073fa:	4a19      	ldr	r2, [pc, #100]	; (8007460 <ResetMacParameters+0xe0>)
    params.Type = INIT_TYPE_RESTORE_DEFAULT_CHANNELS;
 80073fc:	392d      	subs	r1, #45	; 0x2d
    MacCtx.NodeAckRequested = false;
 80073fe:	54a5      	strb	r5, [r4, r2]
    MacCtx.NvmCtx->SrvAckRequested = false;
 8007400:	22e0      	movs	r2, #224	; 0xe0
 8007402:	0052      	lsls	r2, r2, #1
 8007404:	549d      	strb	r5, [r3, r2]
    params.Type = INIT_TYPE_RESTORE_DEFAULT_CHANNELS;
 8007406:	466a      	mov	r2, sp
 8007408:	39ff      	subs	r1, #255	; 0xff
 800740a:	7111      	strb	r1, [r2, #4]
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 800740c:	7818      	ldrb	r0, [r3, #0]
 800740e:	4669      	mov	r1, sp
    params.NvmCtx = NULL;
 8007410:	9500      	str	r5, [sp, #0]
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 8007412:	f003 fd08 	bl	800ae26 <RegionInitDefaults>
    MacCtx.NvmCtx->LastTxChannel = MacCtx.Channel;
 8007416:	229f      	movs	r2, #159	; 0x9f
    MacCtx.Channel = 0;
 8007418:	4b12      	ldr	r3, [pc, #72]	; (8007464 <ResetMacParameters+0xe4>)
    MacCtx.NvmCtx->LastTxChannel = MacCtx.Channel;
 800741a:	0052      	lsls	r2, r2, #1
    MacCtx.Channel = 0;
 800741c:	54e5      	strb	r5, [r4, r3]
    MacCtx.NvmCtx->LastTxChannel = MacCtx.Channel;
 800741e:	59e3      	ldr	r3, [r4, r7]
 8007420:	549d      	strb	r5, [r3, r2]
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8007422:	22f3      	movs	r2, #243	; 0xf3
 8007424:	0092      	lsls	r2, r2, #2
 8007426:	54a5      	strb	r5, [r4, r2]
    MacCtx.RxWindow2Config.Frequency = MacCtx.NvmCtx->MacParams.Rx2Channel.Frequency;
 8007428:	001a      	movs	r2, r3
 800742a:	32fc      	adds	r2, #252	; 0xfc
 800742c:	6a11      	ldr	r1, [r2, #32]
 800742e:	22f4      	movs	r2, #244	; 0xf4
 8007430:	0092      	lsls	r2, r2, #2
 8007432:	50a1      	str	r1, [r4, r2]
    MacCtx.RxWindow2Config.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8007434:	5d99      	ldrb	r1, [r3, r6]
 8007436:	320c      	adds	r2, #12
 8007438:	54a1      	strb	r1, [r4, r2]
    MacCtx.RxWindow2Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 800743a:	2240      	movs	r2, #64	; 0x40
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800743c:	2101      	movs	r1, #1
    MacCtx.RxWindow2Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 800743e:	32ff      	adds	r2, #255	; 0xff
 8007440:	5c9a      	ldrb	r2, [r3, r2]
 8007442:	4b09      	ldr	r3, [pc, #36]	; (8007468 <ResetMacParameters+0xe8>)
 8007444:	54e2      	strb	r2, [r4, r3]
    MacCtx.RxWindow2Config.RxContinuous = false;
 8007446:	4b09      	ldr	r3, [pc, #36]	; (800746c <ResetMacParameters+0xec>)
 8007448:	54e5      	strb	r5, [r4, r3]
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800744a:	4b09      	ldr	r3, [pc, #36]	; (8007470 <ResetMacParameters+0xf0>)
 800744c:	54e1      	strb	r1, [r4, r3]
}
 800744e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8007450:	2000091c 	.word	0x2000091c
 8007454:	00000484 	.word	0x00000484
 8007458:	00000412 	.word	0x00000412
 800745c:	00000413 	.word	0x00000413
 8007460:	00000414 	.word	0x00000414
 8007464:	00000415 	.word	0x00000415
 8007468:	000003dd 	.word	0x000003dd
 800746c:	000003de 	.word	0x000003de
 8007470:	000003df 	.word	0x000003df

08007474 <OpenContinuousRxCWindow>:
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8007474:	2302      	movs	r3, #2
{
 8007476:	b537      	push	{r0, r1, r2, r4, r5, lr}
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8007478:	2201      	movs	r2, #1
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800747a:	4c0c      	ldr	r4, [pc, #48]	; (80074ac <OpenContinuousRxCWindow+0x38>)
 800747c:	4d0c      	ldr	r5, [pc, #48]	; (80074b0 <OpenContinuousRxCWindow+0x3c>)
    if( RegionRxConfig( MacCtx.NvmCtx->Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 800747e:	490d      	ldr	r1, [pc, #52]	; (80074b4 <OpenContinuousRxCWindow+0x40>)
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8007480:	5563      	strb	r3, [r4, r5]
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8007482:	4b0d      	ldr	r3, [pc, #52]	; (80074b8 <OpenContinuousRxCWindow+0x44>)
 8007484:	54e2      	strb	r2, [r4, r3]
    if( RegionRxConfig( MacCtx.NvmCtx->Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8007486:	4b0d      	ldr	r3, [pc, #52]	; (80074bc <OpenContinuousRxCWindow+0x48>)
 8007488:	4a0d      	ldr	r2, [pc, #52]	; (80074c0 <OpenContinuousRxCWindow+0x4c>)
 800748a:	58e3      	ldr	r3, [r4, r3]
 800748c:	7818      	ldrb	r0, [r3, #0]
 800748e:	f003 fd00 	bl	800ae92 <RegionRxConfig>
 8007492:	2800      	cmp	r0, #0
 8007494:	d008      	beq.n	80074a8 <OpenContinuousRxCWindow+0x34>
        Radio.Rx( 0 ); // Continuous mode
 8007496:	4b0b      	ldr	r3, [pc, #44]	; (80074c4 <OpenContinuousRxCWindow+0x50>)
 8007498:	2000      	movs	r0, #0
 800749a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800749c:	9301      	str	r3, [sp, #4]
 800749e:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 80074a0:	2390      	movs	r3, #144	; 0x90
 80074a2:	5d62      	ldrb	r2, [r4, r5]
 80074a4:	00db      	lsls	r3, r3, #3
 80074a6:	54e2      	strb	r2, [r4, r3]
}
 80074a8:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 80074aa:	46c0      	nop			; (mov r8, r8)
 80074ac:	2000091c 	.word	0x2000091c
 80074b0:	000003f3 	.word	0x000003f3
 80074b4:	20000cfc 	.word	0x20000cfc
 80074b8:	000003f2 	.word	0x000003f2
 80074bc:	00000484 	.word	0x00000484
 80074c0:	20000d3c 	.word	0x20000d3c
 80074c4:	0800eaa4 	.word	0x0800eaa4

080074c8 <OnRadioRxTimeout>:
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 80074c8:	2301      	movs	r3, #1
{
 80074ca:	b507      	push	{r0, r1, r2, lr}
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 80074cc:	4a0d      	ldr	r2, [pc, #52]	; (8007504 <OnRadioRxTimeout+0x3c>)
 80074ce:	7811      	ldrb	r1, [r2, #0]
 80074d0:	430b      	orrs	r3, r1
 80074d2:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 80074d4:	23d2      	movs	r3, #210	; 0xd2
 80074d6:	4a0c      	ldr	r2, [pc, #48]	; (8007508 <OnRadioRxTimeout+0x40>)
 80074d8:	009b      	lsls	r3, r3, #2
 80074da:	58d3      	ldr	r3, [r2, r3]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d003      	beq.n	80074e8 <OnRadioRxTimeout+0x20>
 80074e0:	68db      	ldr	r3, [r3, #12]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d000      	beq.n	80074e8 <OnRadioRxTimeout+0x20>
        MacCtx.MacCallbacks->MacProcessNotify( );
 80074e6:	4798      	blx	r3
    PRINTNOW(); PRINTF("PHY rxTimeOut\n\r" );
 80074e8:	4668      	mov	r0, sp
 80074ea:	f005 f99b 	bl	800c824 <SysTimeGetMcuTime>
 80074ee:	466b      	mov	r3, sp
 80074f0:	9900      	ldr	r1, [sp, #0]
 80074f2:	2204      	movs	r2, #4
 80074f4:	5e9a      	ldrsh	r2, [r3, r2]
 80074f6:	4805      	ldr	r0, [pc, #20]	; (800750c <OnRadioRxTimeout+0x44>)
 80074f8:	f005 fada 	bl	800cab0 <TraceSend>
 80074fc:	4804      	ldr	r0, [pc, #16]	; (8007510 <OnRadioRxTimeout+0x48>)
 80074fe:	f005 fad7 	bl	800cab0 <TraceSend>
}
 8007502:	bd07      	pop	{r0, r1, r2, pc}
 8007504:	2000073c 	.word	0x2000073c
 8007508:	2000091c 	.word	0x2000091c
 800750c:	0800f05d 	.word	0x0800f05d
 8007510:	0800f068 	.word	0x0800f068

08007514 <OnRadioTxTimeout>:
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 8007514:	2304      	movs	r3, #4
{
 8007516:	b507      	push	{r0, r1, r2, lr}
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 8007518:	4a0d      	ldr	r2, [pc, #52]	; (8007550 <OnRadioTxTimeout+0x3c>)
 800751a:	7811      	ldrb	r1, [r2, #0]
 800751c:	430b      	orrs	r3, r1
 800751e:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8007520:	23d2      	movs	r3, #210	; 0xd2
 8007522:	4a0c      	ldr	r2, [pc, #48]	; (8007554 <OnRadioTxTimeout+0x40>)
 8007524:	009b      	lsls	r3, r3, #2
 8007526:	58d3      	ldr	r3, [r2, r3]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d003      	beq.n	8007534 <OnRadioTxTimeout+0x20>
 800752c:	68db      	ldr	r3, [r3, #12]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d000      	beq.n	8007534 <OnRadioTxTimeout+0x20>
        MacCtx.MacCallbacks->MacProcessNotify( );
 8007532:	4798      	blx	r3
    PRINTNOW(); PRINTF("PHY txTimeOut\n\r" );
 8007534:	4668      	mov	r0, sp
 8007536:	f005 f975 	bl	800c824 <SysTimeGetMcuTime>
 800753a:	466b      	mov	r3, sp
 800753c:	9900      	ldr	r1, [sp, #0]
 800753e:	2204      	movs	r2, #4
 8007540:	5e9a      	ldrsh	r2, [r3, r2]
 8007542:	4805      	ldr	r0, [pc, #20]	; (8007558 <OnRadioTxTimeout+0x44>)
 8007544:	f005 fab4 	bl	800cab0 <TraceSend>
 8007548:	4804      	ldr	r0, [pc, #16]	; (800755c <OnRadioTxTimeout+0x48>)
 800754a:	f005 fab1 	bl	800cab0 <TraceSend>
}
 800754e:	bd07      	pop	{r0, r1, r2, pc}
 8007550:	2000073c 	.word	0x2000073c
 8007554:	2000091c 	.word	0x2000091c
 8007558:	0800f05d 	.word	0x0800f05d
 800755c:	0800f078 	.word	0x0800f078

08007560 <OnRadioRxDone>:
{
 8007560:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007562:	000e      	movs	r6, r1
 8007564:	0015      	movs	r5, r2
 8007566:	001c      	movs	r4, r3
 8007568:	0007      	movs	r7, r0
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800756a:	f005 fa50 	bl	800ca0e <TimerGetCurrentTime>
 800756e:	4b11      	ldr	r3, [pc, #68]	; (80075b4 <OnRadioRxDone+0x54>)
    LoRaMacRadioEvents.Events.RxDone = 1;
 8007570:	4a11      	ldr	r2, [pc, #68]	; (80075b8 <OnRadioRxDone+0x58>)
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 8007572:	6018      	str	r0, [r3, #0]
    RxDoneParams.Payload = payload;
 8007574:	605f      	str	r7, [r3, #4]
    RxDoneParams.Size = size;
 8007576:	811e      	strh	r6, [r3, #8]
    RxDoneParams.Rssi = rssi;
 8007578:	815d      	strh	r5, [r3, #10]
    RxDoneParams.Snr = snr;
 800757a:	731c      	strb	r4, [r3, #12]
    LoRaMacRadioEvents.Events.RxDone = 1;
 800757c:	2308      	movs	r3, #8
 800757e:	7811      	ldrb	r1, [r2, #0]
 8007580:	430b      	orrs	r3, r1
 8007582:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8007584:	23d2      	movs	r3, #210	; 0xd2
 8007586:	4a0d      	ldr	r2, [pc, #52]	; (80075bc <OnRadioRxDone+0x5c>)
 8007588:	009b      	lsls	r3, r3, #2
 800758a:	58d3      	ldr	r3, [r2, r3]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d003      	beq.n	8007598 <OnRadioRxDone+0x38>
 8007590:	68db      	ldr	r3, [r3, #12]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d000      	beq.n	8007598 <OnRadioRxDone+0x38>
        MacCtx.MacCallbacks->MacProcessNotify( );
 8007596:	4798      	blx	r3
    PRINTNOW(); PRINTF("PHY rxDone\n\r" );
 8007598:	4668      	mov	r0, sp
 800759a:	f005 f943 	bl	800c824 <SysTimeGetMcuTime>
 800759e:	466b      	mov	r3, sp
 80075a0:	9900      	ldr	r1, [sp, #0]
 80075a2:	2204      	movs	r2, #4
 80075a4:	5e9a      	ldrsh	r2, [r3, r2]
 80075a6:	4806      	ldr	r0, [pc, #24]	; (80075c0 <OnRadioRxDone+0x60>)
 80075a8:	f005 fa82 	bl	800cab0 <TraceSend>
 80075ac:	4805      	ldr	r0, [pc, #20]	; (80075c4 <OnRadioRxDone+0x64>)
 80075ae:	f005 fa7f 	bl	800cab0 <TraceSend>
}
 80075b2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80075b4:	200015e0 	.word	0x200015e0
 80075b8:	2000073c 	.word	0x2000073c
 80075bc:	2000091c 	.word	0x2000091c
 80075c0:	0800f05d 	.word	0x0800f05d
 80075c4:	0800f088 	.word	0x0800f088

080075c8 <OnRadioTxDone>:
{
 80075c8:	b530      	push	{r4, r5, lr}
 80075ca:	b085      	sub	sp, #20
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 80075cc:	f005 fa1f 	bl	800ca0e <TimerGetCurrentTime>
    MacCtx.LastTxSysTime = SysTimeGet( );
 80075d0:	466c      	mov	r4, sp
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 80075d2:	4b14      	ldr	r3, [pc, #80]	; (8007624 <OnRadioTxDone+0x5c>)
    MacCtx.LastTxSysTime = SysTimeGet( );
 80075d4:	4d14      	ldr	r5, [pc, #80]	; (8007628 <OnRadioTxDone+0x60>)
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 80075d6:	6018      	str	r0, [r3, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 80075d8:	0020      	movs	r0, r4
 80075da:	f005 f8f9 	bl	800c7d0 <SysTimeGet>
 80075de:	23ce      	movs	r3, #206	; 0xce
 80075e0:	009b      	lsls	r3, r3, #2
 80075e2:	18eb      	adds	r3, r5, r3
 80075e4:	cc06      	ldmia	r4!, {r1, r2}
 80075e6:	c306      	stmia	r3!, {r1, r2}
    LoRaMacRadioEvents.Events.TxDone = 1;
 80075e8:	2310      	movs	r3, #16
 80075ea:	4a10      	ldr	r2, [pc, #64]	; (800762c <OnRadioTxDone+0x64>)
 80075ec:	7811      	ldrb	r1, [r2, #0]
 80075ee:	430b      	orrs	r3, r1
 80075f0:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 80075f2:	23d2      	movs	r3, #210	; 0xd2
 80075f4:	009b      	lsls	r3, r3, #2
 80075f6:	58eb      	ldr	r3, [r5, r3]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d003      	beq.n	8007604 <OnRadioTxDone+0x3c>
 80075fc:	68db      	ldr	r3, [r3, #12]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d000      	beq.n	8007604 <OnRadioTxDone+0x3c>
        MacCtx.MacCallbacks->MacProcessNotify( );
 8007602:	4798      	blx	r3
    PRINTNOW(); PRINTF("PHY txDone\n\r" );
 8007604:	ac02      	add	r4, sp, #8
 8007606:	0020      	movs	r0, r4
 8007608:	f005 f90c 	bl	800c824 <SysTimeGetMcuTime>
 800760c:	2304      	movs	r3, #4
 800760e:	5ee2      	ldrsh	r2, [r4, r3]
 8007610:	9902      	ldr	r1, [sp, #8]
 8007612:	4807      	ldr	r0, [pc, #28]	; (8007630 <OnRadioTxDone+0x68>)
 8007614:	f005 fa4c 	bl	800cab0 <TraceSend>
 8007618:	4806      	ldr	r0, [pc, #24]	; (8007634 <OnRadioTxDone+0x6c>)
 800761a:	f005 fa49 	bl	800cab0 <TraceSend>
}
 800761e:	b005      	add	sp, #20
 8007620:	bd30      	pop	{r4, r5, pc}
 8007622:	46c0      	nop			; (mov r8, r8)
 8007624:	200015dc 	.word	0x200015dc
 8007628:	2000091c 	.word	0x2000091c
 800762c:	2000073c 	.word	0x2000073c
 8007630:	0800f05d 	.word	0x0800f05d
 8007634:	0800f095 	.word	0x0800f095

08007638 <SwitchClass>:
{
 8007638:	b5f0      	push	{r4, r5, r6, r7, lr}
    switch( MacCtx.NvmCtx->DeviceClass )
 800763a:	4c44      	ldr	r4, [pc, #272]	; (800774c <SwitchClass+0x114>)
 800763c:	4e44      	ldr	r6, [pc, #272]	; (8007750 <SwitchClass+0x118>)
{
 800763e:	b085      	sub	sp, #20
    switch( MacCtx.NvmCtx->DeviceClass )
 8007640:	59a3      	ldr	r3, [r4, r6]
{
 8007642:	0005      	movs	r5, r0
    switch( MacCtx.NvmCtx->DeviceClass )
 8007644:	0019      	movs	r1, r3
 8007646:	31f0      	adds	r1, #240	; 0xf0
 8007648:	780a      	ldrb	r2, [r1, #0]
 800764a:	4694      	mov	ip, r2
 800764c:	2a01      	cmp	r2, #1
 800764e:	d012      	beq.n	8007676 <SwitchClass+0x3e>
 8007650:	2a00      	cmp	r2, #0
 8007652:	d004      	beq.n	800765e <SwitchClass+0x26>
 8007654:	2a02      	cmp	r2, #2
 8007656:	d100      	bne.n	800765a <SwitchClass+0x22>
 8007658:	e06f      	b.n	800773a <SwitchClass+0x102>
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800765a:	2003      	movs	r0, #3
 800765c:	e013      	b.n	8007686 <SwitchClass+0x4e>
            if( deviceClass == CLASS_A )
 800765e:	2800      	cmp	r0, #0
 8007660:	d107      	bne.n	8007672 <SwitchClass+0x3a>
                MacCtx.NvmCtx->MacParams.RxCChannel = MacCtx.NvmCtx->MacParams.Rx2Channel;
 8007662:	001a      	movs	r2, r3
 8007664:	331d      	adds	r3, #29
 8007666:	3225      	adds	r2, #37	; 0x25
 8007668:	32ff      	adds	r2, #255	; 0xff
 800766a:	33ff      	adds	r3, #255	; 0xff
 800766c:	cb03      	ldmia	r3!, {r0, r1}
 800766e:	c203      	stmia	r2!, {r0, r1}
 8007670:	e7f3      	b.n	800765a <SwitchClass+0x22>
            if( deviceClass == CLASS_B )
 8007672:	2801      	cmp	r0, #1
 8007674:	d109      	bne.n	800768a <SwitchClass+0x52>
            status = LoRaMacClassBSwitchClass( deviceClass );
 8007676:	0028      	movs	r0, r5
 8007678:	f002 fc56 	bl	8009f28 <LoRaMacClassBSwitchClass>
            if( status == LORAMAC_STATUS_OK )
 800767c:	2800      	cmp	r0, #0
 800767e:	d102      	bne.n	8007686 <SwitchClass+0x4e>
                MacCtx.NvmCtx->DeviceClass = deviceClass;
 8007680:	59a3      	ldr	r3, [r4, r6]
 8007682:	33f0      	adds	r3, #240	; 0xf0
 8007684:	701d      	strb	r5, [r3, #0]
}
 8007686:	b005      	add	sp, #20
 8007688:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if( deviceClass == CLASS_C )
 800768a:	2003      	movs	r0, #3
 800768c:	2d02      	cmp	r5, #2
 800768e:	d1fa      	bne.n	8007686 <SwitchClass+0x4e>
                MacCtx.NvmCtx->DeviceClass = deviceClass;
 8007690:	700d      	strb	r5, [r1, #0]
                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8007692:	20f3      	movs	r0, #243	; 0xf3
 8007694:	21f8      	movs	r1, #248	; 0xf8
 8007696:	0080      	lsls	r0, r0, #2
 8007698:	0089      	lsls	r1, r1, #2
 800769a:	1861      	adds	r1, r4, r1
 800769c:	1820      	adds	r0, r4, r0
 800769e:	c8c4      	ldmia	r0!, {r2, r6, r7}
 80076a0:	c1c4      	stmia	r1!, {r2, r6, r7}
 80076a2:	c844      	ldmia	r0!, {r2, r6}
 80076a4:	c144      	stmia	r1!, {r2, r6}
 80076a6:	0019      	movs	r1, r3
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 80076a8:	4662      	mov	r2, ip
 80076aa:	482a      	ldr	r0, [pc, #168]	; (8007754 <SwitchClass+0x11c>)
 80076ac:	3151      	adds	r1, #81	; 0x51
 80076ae:	5425      	strb	r5, [r4, r0]
                    if( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.IsEnabled == true )
 80076b0:	780d      	ldrb	r5, [r1, #0]
 80076b2:	2d00      	cmp	r5, #0
 80076b4:	d03c      	beq.n	8007730 <SwitchClass+0xf8>
                        MacCtx.NvmCtx->MacParams.RxCChannel.Frequency = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 80076b6:	2128      	movs	r1, #40	; 0x28
 80076b8:	001d      	movs	r5, r3
 80076ba:	434a      	muls	r2, r1
 80076bc:	189a      	adds	r2, r3, r2
 80076be:	6e51      	ldr	r1, [r2, #100]	; 0x64
 80076c0:	35fc      	adds	r5, #252	; 0xfc
 80076c2:	62a9      	str	r1, [r5, #40]	; 0x28
                        MacCtx.NvmCtx->MacParams.RxCChannel.Datarate = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 80076c4:	3268      	adds	r2, #104	; 0x68
 80076c6:	7815      	ldrb	r5, [r2, #0]
 80076c8:	2294      	movs	r2, #148	; 0x94
 80076ca:	0052      	lsls	r2, r2, #1
 80076cc:	549d      	strb	r5, [r3, r2]
                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 80076ce:	4a22      	ldr	r2, [pc, #136]	; (8007758 <SwitchClass+0x120>)
 80076d0:	5ca5      	ldrb	r5, [r4, r2]
 80076d2:	3a35      	subs	r2, #53	; 0x35
 80076d4:	54a5      	strb	r5, [r4, r2]
                        MacCtx.RxWindowCConfig.Frequency = MacCtx.NvmCtx->MacParams.RxCChannel.Frequency;
 80076d6:	3204      	adds	r2, #4
 80076d8:	50a1      	str	r1, [r4, r2]
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 80076da:	222e      	movs	r2, #46	; 0x2e
 80076dc:	32ff      	adds	r2, #255	; 0xff
 80076de:	5c99      	ldrb	r1, [r3, r2]
 80076e0:	22fc      	movs	r2, #252	; 0xfc
 80076e2:	0092      	lsls	r2, r2, #2
 80076e4:	54a1      	strb	r1, [r4, r2]
                        MacCtx.RxWindowCConfig.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 80076e6:	2240      	movs	r2, #64	; 0x40
 80076e8:	32ff      	adds	r2, #255	; 0xff
 80076ea:	5c9a      	ldrb	r2, [r3, r2]
 80076ec:	4b1b      	ldr	r3, [pc, #108]	; (800775c <SwitchClass+0x124>)
 80076ee:	54e2      	strb	r2, [r4, r3]
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 80076f0:	2303      	movs	r3, #3
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 80076f2:	2201      	movs	r2, #1
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 80076f4:	5423      	strb	r3, [r4, r0]
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 80076f6:	4b1a      	ldr	r3, [pc, #104]	; (8007760 <SwitchClass+0x128>)
 80076f8:	54e2      	strb	r2, [r4, r3]
                MacCtx.NodeAckRequested = false;
 80076fa:	2500      	movs	r5, #0
 80076fc:	4b19      	ldr	r3, [pc, #100]	; (8007764 <SwitchClass+0x12c>)
 80076fe:	54e5      	strb	r5, [r4, r3]
                Radio.Sleep( );
 8007700:	4b19      	ldr	r3, [pc, #100]	; (8007768 <SwitchClass+0x130>)
 8007702:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007704:	9303      	str	r3, [sp, #12]
 8007706:	4798      	blx	r3
                RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8007708:	4b11      	ldr	r3, [pc, #68]	; (8007750 <SwitchClass+0x118>)
                                                 MacCtx.NvmCtx->MacParams.RxCChannel.Datarate,
 800770a:	2194      	movs	r1, #148	; 0x94
                RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800770c:	58e3      	ldr	r3, [r4, r3]
                                                 MacCtx.NvmCtx->MacParams.RxCChannel.Datarate,
 800770e:	0049      	lsls	r1, r1, #1
                RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8007710:	001a      	movs	r2, r3
 8007712:	001c      	movs	r4, r3
 8007714:	5659      	ldrsb	r1, [r3, r1]
 8007716:	7818      	ldrb	r0, [r3, #0]
 8007718:	4b14      	ldr	r3, [pc, #80]	; (800776c <SwitchClass+0x134>)
 800771a:	32ff      	adds	r2, #255	; 0xff
 800771c:	7852      	ldrb	r2, [r2, #1]
 800771e:	34fc      	adds	r4, #252	; 0xfc
 8007720:	9300      	str	r3, [sp, #0]
 8007722:	6823      	ldr	r3, [r4, #0]
 8007724:	f003 fbaa 	bl	800ae7c <RegionComputeRxWindowParameters>
                OpenContinuousRxCWindow( );
 8007728:	f7ff fea4 	bl	8007474 <OpenContinuousRxCWindow>
                status = LORAMAC_STATUS_OK;
 800772c:	0028      	movs	r0, r5
 800772e:	e7aa      	b.n	8007686 <SwitchClass+0x4e>
 8007730:	3201      	adds	r2, #1
 8007732:	3128      	adds	r1, #40	; 0x28
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8007734:	2a04      	cmp	r2, #4
 8007736:	d1bb      	bne.n	80076b0 <SwitchClass+0x78>
 8007738:	e7df      	b.n	80076fa <SwitchClass+0xc2>
 800773a:	2003      	movs	r0, #3
            if( deviceClass == CLASS_A )
 800773c:	2d00      	cmp	r5, #0
 800773e:	d1a2      	bne.n	8007686 <SwitchClass+0x4e>
                Radio.Sleep( );
 8007740:	4b09      	ldr	r3, [pc, #36]	; (8007768 <SwitchClass+0x130>)
                MacCtx.NvmCtx->DeviceClass = deviceClass;
 8007742:	700d      	strb	r5, [r1, #0]
                Radio.Sleep( );
 8007744:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007746:	9303      	str	r3, [sp, #12]
 8007748:	4798      	blx	r3
 800774a:	e7ef      	b.n	800772c <SwitchClass+0xf4>
 800774c:	2000091c 	.word	0x2000091c
 8007750:	00000484 	.word	0x00000484
 8007754:	000003f3 	.word	0x000003f3
 8007758:	00000415 	.word	0x00000415
 800775c:	000003f1 	.word	0x000003f1
 8007760:	000003f2 	.word	0x000003f2
 8007764:	00000414 	.word	0x00000414
 8007768:	0800eaa4 	.word	0x0800eaa4
 800776c:	20000cfc 	.word	0x20000cfc

08007770 <RxWindowSetup.constprop.6>:
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
 8007770:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007772:	000d      	movs	r5, r1
    TimerStop( rxTimer );
 8007774:	f005 f90e 	bl	800c994 <TimerStop>
    Radio.Standby( );
 8007778:	4e0c      	ldr	r6, [pc, #48]	; (80077ac <RxWindowSetup.constprop.6+0x3c>)
    if( RegionRxConfig( MacCtx.NvmCtx->Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 800777a:	4f0d      	ldr	r7, [pc, #52]	; (80077b0 <RxWindowSetup.constprop.6+0x40>)
    Radio.Standby( );
 800777c:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 800777e:	9301      	str	r3, [sp, #4]
 8007780:	4798      	blx	r3
    if( RegionRxConfig( MacCtx.NvmCtx->Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8007782:	4c0c      	ldr	r4, [pc, #48]	; (80077b4 <RxWindowSetup.constprop.6+0x44>)
 8007784:	4a0c      	ldr	r2, [pc, #48]	; (80077b8 <RxWindowSetup.constprop.6+0x48>)
 8007786:	59e3      	ldr	r3, [r4, r7]
 8007788:	0029      	movs	r1, r5
 800778a:	7818      	ldrb	r0, [r3, #0]
 800778c:	f003 fb81 	bl	800ae92 <RegionRxConfig>
 8007790:	2800      	cmp	r0, #0
 8007792:	d009      	beq.n	80077a8 <RxWindowSetup.constprop.6+0x38>
        Radio.Rx( MacCtx.NvmCtx->MacParams.MaxRxWindow );
 8007794:	59e3      	ldr	r3, [r4, r7]
 8007796:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
 8007798:	33fc      	adds	r3, #252	; 0xfc
 800779a:	6898      	ldr	r0, [r3, #8]
 800779c:	9201      	str	r2, [sp, #4]
 800779e:	4790      	blx	r2
        MacCtx.RxSlot = rxConfig->RxSlot;
 80077a0:	2390      	movs	r3, #144	; 0x90
 80077a2:	7cea      	ldrb	r2, [r5, #19]
 80077a4:	00db      	lsls	r3, r3, #3
 80077a6:	54e2      	strb	r2, [r4, r3]
}
 80077a8:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80077aa:	46c0      	nop			; (mov r8, r8)
 80077ac:	0800eaa4 	.word	0x0800eaa4
 80077b0:	00000484 	.word	0x00000484
 80077b4:	2000091c 	.word	0x2000091c
 80077b8:	20000d3c 	.word	0x20000d3c

080077bc <OnRxWindow1TimerEvent>:
{
 80077bc:	b510      	push	{r4, lr}
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 80077be:	4b10      	ldr	r3, [pc, #64]	; (8007800 <OnRxWindow1TimerEvent+0x44>)
 80077c0:	4a10      	ldr	r2, [pc, #64]	; (8007804 <OnRxWindow1TimerEvent+0x48>)
 80077c2:	5c99      	ldrb	r1, [r3, r2]
 80077c4:	3a5d      	subs	r2, #93	; 0x5d
 80077c6:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow1Config.DrOffset = MacCtx.NvmCtx->MacParams.Rx1DrOffset;
 80077c8:	4a0f      	ldr	r2, [pc, #60]	; (8007808 <OnRxWindow1TimerEvent+0x4c>)
 80077ca:	589a      	ldr	r2, [r3, r2]
 80077cc:	0011      	movs	r1, r2
 80077ce:	31ff      	adds	r1, #255	; 0xff
 80077d0:	7e88      	ldrb	r0, [r1, #26]
 80077d2:	490e      	ldr	r1, [pc, #56]	; (800780c <OnRxWindow1TimerEvent+0x50>)
 80077d4:	5458      	strb	r0, [r3, r1]
    MacCtx.RxWindow1Config.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 80077d6:	212e      	movs	r1, #46	; 0x2e
 80077d8:	31ff      	adds	r1, #255	; 0xff
 80077da:	5c50      	ldrb	r0, [r2, r1]
 80077dc:	21f2      	movs	r1, #242	; 0xf2
 80077de:	0089      	lsls	r1, r1, #2
 80077e0:	5458      	strb	r0, [r3, r1]
    MacCtx.RxWindow1Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 80077e2:	2140      	movs	r1, #64	; 0x40
 80077e4:	31ff      	adds	r1, #255	; 0xff
 80077e6:	5c51      	ldrb	r1, [r2, r1]
 80077e8:	4a09      	ldr	r2, [pc, #36]	; (8007810 <OnRxWindow1TimerEvent+0x54>)
    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 80077ea:	480a      	ldr	r0, [pc, #40]	; (8007814 <OnRxWindow1TimerEvent+0x58>)
    MacCtx.RxWindow1Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 80077ec:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow1Config.RxContinuous = false;
 80077ee:	2200      	movs	r2, #0
 80077f0:	4909      	ldr	r1, [pc, #36]	; (8007818 <OnRxWindow1TimerEvent+0x5c>)
 80077f2:	545a      	strb	r2, [r3, r1]
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 80077f4:	4909      	ldr	r1, [pc, #36]	; (800781c <OnRxWindow1TimerEvent+0x60>)
 80077f6:	545a      	strb	r2, [r3, r1]
    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 80077f8:	4909      	ldr	r1, [pc, #36]	; (8007820 <OnRxWindow1TimerEvent+0x64>)
 80077fa:	f7ff ffb9 	bl	8007770 <RxWindowSetup.constprop.6>
}
 80077fe:	bd10      	pop	{r4, pc}
 8007800:	2000091c 	.word	0x2000091c
 8007804:	00000415 	.word	0x00000415
 8007808:	00000484 	.word	0x00000484
 800780c:	000003bb 	.word	0x000003bb
 8007810:	000003c9 	.word	0x000003c9
 8007814:	20000c9c 	.word	0x20000c9c
 8007818:	000003ca 	.word	0x000003ca
 800781c:	000003cb 	.word	0x000003cb
 8007820:	20000cd4 	.word	0x20000cd4

08007824 <OnRxWindow2TimerEvent>:
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8007824:	2290      	movs	r2, #144	; 0x90
{
 8007826:	b510      	push	{r4, lr}
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8007828:	4b13      	ldr	r3, [pc, #76]	; (8007878 <OnRxWindow2TimerEvent+0x54>)
 800782a:	00d2      	lsls	r2, r2, #3
 800782c:	5c9a      	ldrb	r2, [r3, r2]
 800782e:	2a00      	cmp	r2, #0
 8007830:	d020      	beq.n	8007874 <OnRxWindow2TimerEvent+0x50>
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8007832:	4a12      	ldr	r2, [pc, #72]	; (800787c <OnRxWindow2TimerEvent+0x58>)
 8007834:	5c99      	ldrb	r1, [r3, r2]
 8007836:	3a49      	subs	r2, #73	; 0x49
 8007838:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow2Config.Frequency = MacCtx.NvmCtx->MacParams.Rx2Channel.Frequency;
 800783a:	4a11      	ldr	r2, [pc, #68]	; (8007880 <OnRxWindow2TimerEvent+0x5c>)
 800783c:	589a      	ldr	r2, [r3, r2]
 800783e:	0011      	movs	r1, r2
 8007840:	31fc      	adds	r1, #252	; 0xfc
 8007842:	6a08      	ldr	r0, [r1, #32]
 8007844:	21f4      	movs	r1, #244	; 0xf4
 8007846:	0089      	lsls	r1, r1, #2
 8007848:	5058      	str	r0, [r3, r1]
    MacCtx.RxWindow2Config.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800784a:	212e      	movs	r1, #46	; 0x2e
 800784c:	31ff      	adds	r1, #255	; 0xff
 800784e:	5c50      	ldrb	r0, [r2, r1]
 8007850:	21f7      	movs	r1, #247	; 0xf7
 8007852:	0089      	lsls	r1, r1, #2
 8007854:	5458      	strb	r0, [r3, r1]
    MacCtx.RxWindow2Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 8007856:	2140      	movs	r1, #64	; 0x40
 8007858:	31ff      	adds	r1, #255	; 0xff
 800785a:	5c51      	ldrb	r1, [r2, r1]
 800785c:	4a09      	ldr	r2, [pc, #36]	; (8007884 <OnRxWindow2TimerEvent+0x60>)
    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 800785e:	480a      	ldr	r0, [pc, #40]	; (8007888 <OnRxWindow2TimerEvent+0x64>)
    MacCtx.RxWindow2Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 8007860:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow2Config.RxContinuous = false;
 8007862:	2100      	movs	r1, #0
 8007864:	4a09      	ldr	r2, [pc, #36]	; (800788c <OnRxWindow2TimerEvent+0x68>)
 8007866:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8007868:	4a09      	ldr	r2, [pc, #36]	; (8007890 <OnRxWindow2TimerEvent+0x6c>)
 800786a:	3101      	adds	r1, #1
 800786c:	5499      	strb	r1, [r3, r2]
    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 800786e:	4909      	ldr	r1, [pc, #36]	; (8007894 <OnRxWindow2TimerEvent+0x70>)
 8007870:	f7ff ff7e 	bl	8007770 <RxWindowSetup.constprop.6>
}
 8007874:	bd10      	pop	{r4, pc}
 8007876:	46c0      	nop			; (mov r8, r8)
 8007878:	2000091c 	.word	0x2000091c
 800787c:	00000415 	.word	0x00000415
 8007880:	00000484 	.word	0x00000484
 8007884:	000003dd 	.word	0x000003dd
 8007888:	20000cb4 	.word	0x20000cb4
 800788c:	000003de 	.word	0x000003de
 8007890:	000003df 	.word	0x000003df
 8007894:	20000ce8 	.word	0x20000ce8

08007898 <ProcessMacCommands.isra.1.constprop.7>:
    uint8_t status = 0;
 8007898:	2300      	movs	r3, #0
static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
 800789a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800789c:	b095      	sub	sp, #84	; 0x54
 800789e:	9206      	str	r2, [sp, #24]
    uint8_t status = 0;
 80078a0:	220d      	movs	r2, #13
static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
 80078a2:	0007      	movs	r7, r0
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 80078a4:	001c      	movs	r4, r3
static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
 80078a6:	9104      	str	r1, [sp, #16]
    uint8_t status = 0;
 80078a8:	a906      	add	r1, sp, #24
 80078aa:	1852      	adds	r2, r2, r1
 80078ac:	7013      	strb	r3, [r2, #0]
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 80078ae:	aa0a      	add	r2, sp, #40	; 0x28
 80078b0:	8013      	strh	r3, [r2, #0]
    bool adrBlockFound = false;
 80078b2:	9302      	str	r3, [sp, #8]
    while( macIndex < commandsSize )
 80078b4:	9b04      	ldr	r3, [sp, #16]
 80078b6:	429c      	cmp	r4, r3
 80078b8:	d301      	bcc.n	80078be <ProcessMacCommands.isra.1.constprop.7+0x26>
}
 80078ba:	b015      	add	sp, #84	; 0x54
 80078bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        switch( payload[macIndex++] )
 80078be:	5d38      	ldrb	r0, [r7, r4]
 80078c0:	1c66      	adds	r6, r4, #1
 80078c2:	3802      	subs	r0, #2
 80078c4:	b2f6      	uxtb	r6, r6
 80078c6:	2811      	cmp	r0, #17
 80078c8:	d8f7      	bhi.n	80078ba <ProcessMacCommands.isra.1.constprop.7+0x22>
 80078ca:	f7f8 fc27 	bl	800011c <__gnu_thumb1_case_shi>
 80078ce:	0012      	.short	0x0012
 80078d0:	00910029 	.word	0x00910029
 80078d4:	00f200aa 	.word	0x00f200aa
 80078d8:	01360108 	.word	0x01360108
 80078dc:	01a20153 	.word	0x01a20153
 80078e0:	fff6fff6 	.word	0xfff6fff6
 80078e4:	fff601d9 	.word	0xfff601d9
 80078e8:	021ffff6 	.word	0x021ffff6
 80078ec:	0245022a 	.word	0x0245022a
 80078f0:	0255      	.short	0x0255
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 80078f2:	2003      	movs	r0, #3
 80078f4:	f002 fd04 	bl	800a300 <LoRaMacConfirmQueueIsCmdActive>
 80078f8:	2800      	cmp	r0, #0
 80078fa:	d00f      	beq.n	800791c <ProcessMacCommands.isra.1.constprop.7+0x84>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 80078fc:	2103      	movs	r1, #3
 80078fe:	2000      	movs	r0, #0
 8007900:	f002 fca8 	bl	800a254 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 8007904:	228b      	movs	r2, #139	; 0x8b
 8007906:	5db9      	ldrb	r1, [r7, r6]
 8007908:	4bd8      	ldr	r3, [pc, #864]	; (8007c6c <ProcessMacCommands.isra.1.constprop.7+0x3d4>)
 800790a:	00d2      	lsls	r2, r2, #3
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 800790c:	1ce6      	adds	r6, r4, #3
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 800790e:	3402      	adds	r4, #2
 8007910:	5499      	strb	r1, [r3, r2]
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 8007912:	b2e4      	uxtb	r4, r4
 8007914:	5d39      	ldrb	r1, [r7, r4]
 8007916:	4ad6      	ldr	r2, [pc, #856]	; (8007c70 <ProcessMacCommands.isra.1.constprop.7+0x3d8>)
 8007918:	b2f6      	uxtb	r6, r6
 800791a:	5499      	strb	r1, [r3, r2]
                uint8_t eirpDwellTime = payload[macIndex++];
 800791c:	0034      	movs	r4, r6
 800791e:	e7c9      	b.n	80078b4 <ProcessMacCommands.isra.1.constprop.7+0x1c>
                int8_t linkAdrDatarate = DR_0;
 8007920:	2300      	movs	r3, #0
 8007922:	aa06      	add	r2, sp, #24
 8007924:	7393      	strb	r3, [r2, #14]
                int8_t linkAdrTxPower = TX_POWER_0;
 8007926:	73d3      	strb	r3, [r2, #15]
                uint8_t linkAdrNbRep = 0;
 8007928:	ad0b      	add	r5, sp, #44	; 0x2c
                uint8_t linkAdrNbBytesParsed = 0;
 800792a:	aa0c      	add	r2, sp, #48	; 0x30
                uint8_t linkAdrNbRep = 0;
 800792c:	702b      	strb	r3, [r5, #0]
                uint8_t linkAdrNbBytesParsed = 0;
 800792e:	7013      	strb	r3, [r2, #0]
                if( adrBlockFound == false )
 8007930:	9b02      	ldr	r3, [sp, #8]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d14e      	bne.n	80079d4 <ProcessMacCommands.isra.1.constprop.7+0x13c>
                    linkAdrReq.Payload = &payload[macIndex - 1];
 8007936:	1e73      	subs	r3, r6, #1
 8007938:	a910      	add	r1, sp, #64	; 0x40
 800793a:	18fb      	adds	r3, r7, r3
 800793c:	604b      	str	r3, [r1, #4]
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 800793e:	9b04      	ldr	r3, [sp, #16]
 8007940:	3301      	adds	r3, #1
 8007942:	1b9b      	subs	r3, r3, r6
 8007944:	720b      	strb	r3, [r1, #8]
                    linkAdrReq.AdrEnabled = MacCtx.NvmCtx->AdrCtrlOn;
 8007946:	4ecb      	ldr	r6, [pc, #812]	; (8007c74 <ProcessMacCommands.isra.1.constprop.7+0x3dc>)
 8007948:	4bc8      	ldr	r3, [pc, #800]	; (8007c6c <ProcessMacCommands.isra.1.constprop.7+0x3d4>)
 800794a:	599b      	ldr	r3, [r3, r6]
 800794c:	0018      	movs	r0, r3
 800794e:	30f2      	adds	r0, #242	; 0xf2
 8007950:	7800      	ldrb	r0, [r0, #0]
 8007952:	7288      	strb	r0, [r1, #10]
                    linkAdrReq.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8007954:	2096      	movs	r0, #150	; 0x96
 8007956:	0040      	lsls	r0, r0, #1
 8007958:	5c18      	ldrb	r0, [r3, r0]
 800795a:	7248      	strb	r0, [r1, #9]
                    linkAdrReq.CurrentDatarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800795c:	0018      	movs	r0, r3
 800795e:	30f9      	adds	r0, #249	; 0xf9
 8007960:	7800      	ldrb	r0, [r0, #0]
 8007962:	72c8      	strb	r0, [r1, #11]
                    linkAdrReq.CurrentTxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 8007964:	0018      	movs	r0, r3
 8007966:	30f8      	adds	r0, #248	; 0xf8
 8007968:	7800      	ldrb	r0, [r0, #0]
 800796a:	7308      	strb	r0, [r1, #12]
                    linkAdrReq.CurrentNbRep = MacCtx.NvmCtx->MacParams.ChannelsNbTrans;
 800796c:	0018      	movs	r0, r3
 800796e:	30ff      	adds	r0, #255	; 0xff
 8007970:	7e40      	ldrb	r0, [r0, #25]
 8007972:	7348      	strb	r0, [r1, #13]
                    linkAdrReq.Version = MacCtx.NvmCtx->Version;
 8007974:	20e8      	movs	r0, #232	; 0xe8
 8007976:	0040      	lsls	r0, r0, #1
 8007978:	5818      	ldr	r0, [r3, r0]
                    status = RegionLinkAdrReq( MacCtx.NvmCtx->Region, &linkAdrReq, &linkAdrDatarate,
 800797a:	781b      	ldrb	r3, [r3, #0]
 800797c:	9201      	str	r2, [sp, #4]
 800797e:	469c      	mov	ip, r3
 8007980:	230f      	movs	r3, #15
 8007982:	aa06      	add	r2, sp, #24
 8007984:	189b      	adds	r3, r3, r2
 8007986:	220e      	movs	r2, #14
                    linkAdrReq.Version = MacCtx.NvmCtx->Version;
 8007988:	9010      	str	r0, [sp, #64]	; 0x40
                    status = RegionLinkAdrReq( MacCtx.NvmCtx->Region, &linkAdrReq, &linkAdrDatarate,
 800798a:	a806      	add	r0, sp, #24
 800798c:	1812      	adds	r2, r2, r0
 800798e:	9500      	str	r5, [sp, #0]
 8007990:	4660      	mov	r0, ip
 8007992:	f003 fa95 	bl	800aec0 <RegionLinkAdrReq>
 8007996:	ab06      	add	r3, sp, #24
 8007998:	7358      	strb	r0, [r3, #13]
                    if( ( status & 0x07 ) == 0x07 )
 800799a:	43c0      	mvns	r0, r0
 800799c:	0743      	lsls	r3, r0, #29
 800799e:	d10d      	bne.n	80079bc <ProcessMacCommands.isra.1.constprop.7+0x124>
                        MacCtx.NvmCtx->MacParams.ChannelsDatarate = linkAdrDatarate;
 80079a0:	4bb2      	ldr	r3, [pc, #712]	; (8007c6c <ProcessMacCommands.isra.1.constprop.7+0x3d4>)
 80079a2:	a906      	add	r1, sp, #24
 80079a4:	599b      	ldr	r3, [r3, r6]
 80079a6:	7b89      	ldrb	r1, [r1, #14]
 80079a8:	001a      	movs	r2, r3
 80079aa:	32f9      	adds	r2, #249	; 0xf9
 80079ac:	7011      	strb	r1, [r2, #0]
                        MacCtx.NvmCtx->MacParams.ChannelsTxPower = linkAdrTxPower;
 80079ae:	a906      	add	r1, sp, #24
 80079b0:	7bc9      	ldrb	r1, [r1, #15]
 80079b2:	3a01      	subs	r2, #1
 80079b4:	7011      	strb	r1, [r2, #0]
                        MacCtx.NvmCtx->MacParams.ChannelsNbTrans = linkAdrNbRep;
 80079b6:	782a      	ldrb	r2, [r5, #0]
 80079b8:	33ff      	adds	r3, #255	; 0xff
 80079ba:	765a      	strb	r2, [r3, #25]
static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
 80079bc:	2500      	movs	r5, #0
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 80079be:	ab0c      	add	r3, sp, #48	; 0x30
 80079c0:	781e      	ldrb	r6, [r3, #0]
 80079c2:	2105      	movs	r1, #5
 80079c4:	0030      	movs	r0, r6
 80079c6:	f7f8 fbbd 	bl	8000144 <__udivsi3>
 80079ca:	b2c0      	uxtb	r0, r0
 80079cc:	4285      	cmp	r5, r0
 80079ce:	d304      	bcc.n	80079da <ProcessMacCommands.isra.1.constprop.7+0x142>
                    macIndex += linkAdrNbBytesParsed - 1;
 80079d0:	19a6      	adds	r6, r4, r6
 80079d2:	b2f6      	uxtb	r6, r6
 80079d4:	2301      	movs	r3, #1
 80079d6:	9302      	str	r3, [sp, #8]
 80079d8:	e7a0      	b.n	800791c <ProcessMacCommands.isra.1.constprop.7+0x84>
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 80079da:	230d      	movs	r3, #13
 80079dc:	a906      	add	r1, sp, #24
 80079de:	185b      	adds	r3, r3, r1
 80079e0:	2201      	movs	r2, #1
 80079e2:	0019      	movs	r1, r3
 80079e4:	2003      	movs	r0, #3
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 80079e6:	3501      	adds	r5, #1
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 80079e8:	f002 fae0 	bl	8009fac <LoRaMacCommandsAddCmd>
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 80079ec:	b2ed      	uxtb	r5, r5
 80079ee:	e7e6      	b.n	80079be <ProcessMacCommands.isra.1.constprop.7+0x126>
                MacCtx.NvmCtx->MaxDCycle = payload[macIndex++] & 0x0F;
 80079f0:	4a9e      	ldr	r2, [pc, #632]	; (8007c6c <ProcessMacCommands.isra.1.constprop.7+0x3d4>)
 80079f2:	4ba0      	ldr	r3, [pc, #640]	; (8007c74 <ProcessMacCommands.isra.1.constprop.7+0x3dc>)
 80079f4:	3402      	adds	r4, #2
 80079f6:	58d1      	ldr	r1, [r2, r3]
 80079f8:	220f      	movs	r2, #15
 80079fa:	5dbb      	ldrb	r3, [r7, r6]
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 80079fc:	2004      	movs	r0, #4
                MacCtx.NvmCtx->MaxDCycle = payload[macIndex++] & 0x0F;
 80079fe:	4013      	ands	r3, r2
 8007a00:	322e      	adds	r2, #46	; 0x2e
 8007a02:	32ff      	adds	r2, #255	; 0xff
 8007a04:	548b      	strb	r3, [r1, r2]
                MacCtx.NvmCtx->AggregatedDCycle = 1 << MacCtx.NvmCtx->MaxDCycle;
 8007a06:	3a3c      	subs	r2, #60	; 0x3c
 8007a08:	3aff      	subs	r2, #255	; 0xff
 8007a0a:	409a      	lsls	r2, r3
 8007a0c:	0013      	movs	r3, r2
 8007a0e:	22e1      	movs	r2, #225	; 0xe1
 8007a10:	0052      	lsls	r2, r2, #1
 8007a12:	528b      	strh	r3, [r1, r2]
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 8007a14:	2200      	movs	r2, #0
 8007a16:	a90a      	add	r1, sp, #40	; 0x28
                MacCtx.NvmCtx->MaxDCycle = payload[macIndex++] & 0x0F;
 8007a18:	b2e4      	uxtb	r4, r4
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 8007a1a:	f002 fac7 	bl	8009fac <LoRaMacCommandsAddCmd>
                uint8_t delay = payload[macIndex++] & 0x0F;
 8007a1e:	0026      	movs	r6, r4
 8007a20:	e77c      	b.n	800791c <ProcessMacCommands.isra.1.constprop.7+0x84>
                status = 0x07;
 8007a22:	2107      	movs	r1, #7
 8007a24:	ab06      	add	r3, sp, #24
 8007a26:	7359      	strb	r1, [r3, #13]
                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 8007a28:	5dbb      	ldrb	r3, [r7, r6]
 8007a2a:	ad10      	add	r5, sp, #64	; 0x40
 8007a2c:	091a      	lsrs	r2, r3, #4
 8007a2e:	400a      	ands	r2, r1
 8007a30:	706a      	strb	r2, [r5, #1]
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 8007a32:	220f      	movs	r2, #15
 8007a34:	4013      	ands	r3, r2
 8007a36:	702b      	strb	r3, [r5, #0]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8007a38:	1d22      	adds	r2, r4, #4
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 8007a3a:	1ce3      	adds	r3, r4, #3
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8007a3c:	b2db      	uxtb	r3, r3
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8007a3e:	b2d2      	uxtb	r2, r2
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8007a40:	5cfb      	ldrb	r3, [r7, r3]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8007a42:	5cba      	ldrb	r2, [r7, r2]
 8007a44:	1d66      	adds	r6, r4, #5
                macIndex++;
 8007a46:	3402      	adds	r4, #2
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8007a48:	0412      	lsls	r2, r2, #16
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 8007a4a:	b2e4      	uxtb	r4, r4
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8007a4c:	021b      	lsls	r3, r3, #8
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8007a4e:	4313      	orrs	r3, r2
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 8007a50:	5d3a      	ldrb	r2, [r7, r4]
                status = RegionRxParamSetupReq( MacCtx.NvmCtx->Region, &rxParamSetupReq );
 8007a52:	4c88      	ldr	r4, [pc, #544]	; (8007c74 <ProcessMacCommands.isra.1.constprop.7+0x3dc>)
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8007a54:	4313      	orrs	r3, r2
                rxParamSetupReq.Frequency *= 100;
 8007a56:	2264      	movs	r2, #100	; 0x64
 8007a58:	4353      	muls	r3, r2
 8007a5a:	9311      	str	r3, [sp, #68]	; 0x44
                status = RegionRxParamSetupReq( MacCtx.NvmCtx->Region, &rxParamSetupReq );
 8007a5c:	4b83      	ldr	r3, [pc, #524]	; (8007c6c <ProcessMacCommands.isra.1.constprop.7+0x3d4>)
 8007a5e:	0029      	movs	r1, r5
 8007a60:	591b      	ldr	r3, [r3, r4]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8007a62:	b2f6      	uxtb	r6, r6
                status = RegionRxParamSetupReq( MacCtx.NvmCtx->Region, &rxParamSetupReq );
 8007a64:	7818      	ldrb	r0, [r3, #0]
 8007a66:	9303      	str	r3, [sp, #12]
 8007a68:	f003 fa39 	bl	800aede <RegionRxParamSetupReq>
 8007a6c:	ab06      	add	r3, sp, #24
 8007a6e:	7358      	strb	r0, [r3, #13]
                if( ( status & 0x07 ) == 0x07 )
 8007a70:	2307      	movs	r3, #7
 8007a72:	4003      	ands	r3, r0
 8007a74:	2b07      	cmp	r3, #7
 8007a76:	d10f      	bne.n	8007a98 <ProcessMacCommands.isra.1.constprop.7+0x200>
                    MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 8007a78:	2190      	movs	r1, #144	; 0x90
 8007a7a:	4b7c      	ldr	r3, [pc, #496]	; (8007c6c <ProcessMacCommands.isra.1.constprop.7+0x3d4>)
 8007a7c:	782a      	ldrb	r2, [r5, #0]
 8007a7e:	591b      	ldr	r3, [r3, r4]
 8007a80:	0049      	lsls	r1, r1, #1
 8007a82:	545a      	strb	r2, [r3, r1]
                    MacCtx.NvmCtx->MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 8007a84:	3108      	adds	r1, #8
 8007a86:	545a      	strb	r2, [r3, r1]
                    MacCtx.NvmCtx->MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 8007a88:	001a      	movs	r2, r3
 8007a8a:	6869      	ldr	r1, [r5, #4]
 8007a8c:	32fc      	adds	r2, #252	; 0xfc
 8007a8e:	6211      	str	r1, [r2, #32]
                    MacCtx.NvmCtx->MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 8007a90:	6291      	str	r1, [r2, #40]	; 0x28
                    MacCtx.NvmCtx->MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 8007a92:	786a      	ldrb	r2, [r5, #1]
 8007a94:	33ff      	adds	r3, #255	; 0xff
 8007a96:	769a      	strb	r2, [r3, #26]
                macCmdPayload[0] = status;
 8007a98:	a90a      	add	r1, sp, #40	; 0x28
 8007a9a:	7008      	strb	r0, [r1, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 8007a9c:	2201      	movs	r2, #1
 8007a9e:	2005      	movs	r0, #5
 8007aa0:	f002 fa84 	bl	8009fac <LoRaMacCommandsAddCmd>
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 8007aa4:	2310      	movs	r3, #16
 8007aa6:	4971      	ldr	r1, [pc, #452]	; (8007c6c <ProcessMacCommands.isra.1.constprop.7+0x3d4>)
 8007aa8:	4a73      	ldr	r2, [pc, #460]	; (8007c78 <ProcessMacCommands.isra.1.constprop.7+0x3e0>)
 8007aaa:	5c88      	ldrb	r0, [r1, r2]
 8007aac:	4303      	orrs	r3, r0
 8007aae:	548b      	strb	r3, [r1, r2]
 8007ab0:	e734      	b.n	800791c <ProcessMacCommands.isra.1.constprop.7+0x84>
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 8007ab2:	23d2      	movs	r3, #210	; 0xd2
 8007ab4:	4a6d      	ldr	r2, [pc, #436]	; (8007c6c <ProcessMacCommands.isra.1.constprop.7+0x3d4>)
 8007ab6:	009b      	lsls	r3, r3, #2
 8007ab8:	58d3      	ldr	r3, [r2, r3]
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 8007aba:	20ff      	movs	r0, #255	; 0xff
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d003      	beq.n	8007ac8 <ProcessMacCommands.isra.1.constprop.7+0x230>
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d000      	beq.n	8007ac8 <ProcessMacCommands.isra.1.constprop.7+0x230>
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 8007ac6:	4798      	blx	r3
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 8007ac8:	233f      	movs	r3, #63	; 0x3f
 8007aca:	9a06      	ldr	r2, [sp, #24]
                macCmdPayload[0] = batteryLevel;
 8007acc:	a90a      	add	r1, sp, #40	; 0x28
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 8007ace:	4013      	ands	r3, r2
                macCmdPayload[0] = batteryLevel;
 8007ad0:	7008      	strb	r0, [r1, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 8007ad2:	2202      	movs	r2, #2
 8007ad4:	2006      	movs	r0, #6
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 8007ad6:	704b      	strb	r3, [r1, #1]
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 8007ad8:	f002 fa68 	bl	8009fac <LoRaMacCommandsAddCmd>
 8007adc:	e71e      	b.n	800791c <ProcessMacCommands.isra.1.constprop.7+0x84>
                status = 0x03;
 8007ade:	250d      	movs	r5, #13
 8007ae0:	ab06      	add	r3, sp, #24
 8007ae2:	18ed      	adds	r5, r5, r3
 8007ae4:	2303      	movs	r3, #3
 8007ae6:	702b      	strb	r3, [r5, #0]
                newChannelReq.ChannelId = payload[macIndex++];
 8007ae8:	5dbb      	ldrb	r3, [r7, r6]
 8007aea:	a90c      	add	r1, sp, #48	; 0x30
 8007aec:	710b      	strb	r3, [r1, #4]
                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 8007aee:	1ce3      	adds	r3, r4, #3
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8007af0:	b2db      	uxtb	r3, r3
 8007af2:	5cf8      	ldrb	r0, [r7, r3]
 8007af4:	1d23      	adds	r3, r4, #4
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8007af6:	b2db      	uxtb	r3, r3
 8007af8:	5cfb      	ldrb	r3, [r7, r3]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8007afa:	0200      	lsls	r0, r0, #8
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8007afc:	041b      	lsls	r3, r3, #16
 8007afe:	4303      	orrs	r3, r0
                newChannelReq.ChannelId = payload[macIndex++];
 8007b00:	1ca0      	adds	r0, r4, #2
                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 8007b02:	b2c0      	uxtb	r0, r0
 8007b04:	5c38      	ldrb	r0, [r7, r0]
                chParam.DrRange.Value = payload[macIndex++];
 8007b06:	1da6      	adds	r6, r4, #6
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8007b08:	4303      	orrs	r3, r0
                chParam.Frequency *= 100;
 8007b0a:	2064      	movs	r0, #100	; 0x64
 8007b0c:	4343      	muls	r3, r0
 8007b0e:	9310      	str	r3, [sp, #64]	; 0x40
                chParam.Rx1Frequency = 0;
 8007b10:	2300      	movs	r3, #0
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8007b12:	3405      	adds	r4, #5
                chParam.DrRange.Value = payload[macIndex++];
 8007b14:	b2e4      	uxtb	r4, r4
                chParam.Rx1Frequency = 0;
 8007b16:	9311      	str	r3, [sp, #68]	; 0x44
                chParam.DrRange.Value = payload[macIndex++];
 8007b18:	5d3b      	ldrb	r3, [r7, r4]
                newChannelReq.NewChannel = &chParam;
 8007b1a:	aa10      	add	r2, sp, #64	; 0x40
                chParam.DrRange.Value = payload[macIndex++];
 8007b1c:	7213      	strb	r3, [r2, #8]
                newChannelReq.NewChannel = &chParam;
 8007b1e:	920c      	str	r2, [sp, #48]	; 0x30
                status = RegionNewChannelReq( MacCtx.NvmCtx->Region, &newChannelReq );
 8007b20:	4b54      	ldr	r3, [pc, #336]	; (8007c74 <ProcessMacCommands.isra.1.constprop.7+0x3dc>)
 8007b22:	4a52      	ldr	r2, [pc, #328]	; (8007c6c <ProcessMacCommands.isra.1.constprop.7+0x3d4>)
                chParam.DrRange.Value = payload[macIndex++];
 8007b24:	b2f6      	uxtb	r6, r6
                status = RegionNewChannelReq( MacCtx.NvmCtx->Region, &newChannelReq );
 8007b26:	58d3      	ldr	r3, [r2, r3]
 8007b28:	7818      	ldrb	r0, [r3, #0]
 8007b2a:	f003 f9e1 	bl	800aef0 <RegionNewChannelReq>
                macCmdPayload[0] = status;
 8007b2e:	a90a      	add	r1, sp, #40	; 0x28
                status = RegionNewChannelReq( MacCtx.NvmCtx->Region, &newChannelReq );
 8007b30:	7028      	strb	r0, [r5, #0]
                macCmdPayload[0] = status;
 8007b32:	7008      	strb	r0, [r1, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 8007b34:	2201      	movs	r2, #1
 8007b36:	2007      	movs	r0, #7
 8007b38:	e7ce      	b.n	8007ad8 <ProcessMacCommands.isra.1.constprop.7+0x240>
                uint8_t delay = payload[macIndex++] & 0x0F;
 8007b3a:	230f      	movs	r3, #15
 8007b3c:	5dba      	ldrb	r2, [r7, r6]
 8007b3e:	3402      	adds	r4, #2
 8007b40:	b2e4      	uxtb	r4, r4
 8007b42:	401a      	ands	r2, r3
                if( delay == 0 )
 8007b44:	d100      	bne.n	8007b48 <ProcessMacCommands.isra.1.constprop.7+0x2b0>
                    delay++;
 8007b46:	3201      	adds	r2, #1
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 = delay * 1000;
 8007b48:	4d48      	ldr	r5, [pc, #288]	; (8007c6c <ProcessMacCommands.isra.1.constprop.7+0x3d4>)
 8007b4a:	4b4a      	ldr	r3, [pc, #296]	; (8007c74 <ProcessMacCommands.isra.1.constprop.7+0x3dc>)
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 8007b4c:	2008      	movs	r0, #8
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 = delay * 1000;
 8007b4e:	58e9      	ldr	r1, [r5, r3]
 8007b50:	3b9c      	subs	r3, #156	; 0x9c
 8007b52:	4353      	muls	r3, r2
                MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + 1000;
 8007b54:	22fa      	movs	r2, #250	; 0xfa
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 = delay * 1000;
 8007b56:	31fc      	adds	r1, #252	; 0xfc
                MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + 1000;
 8007b58:	0092      	lsls	r2, r2, #2
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 = delay * 1000;
 8007b5a:	60cb      	str	r3, [r1, #12]
                MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + 1000;
 8007b5c:	189b      	adds	r3, r3, r2
 8007b5e:	610b      	str	r3, [r1, #16]
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 8007b60:	2200      	movs	r2, #0
 8007b62:	a90a      	add	r1, sp, #40	; 0x28
 8007b64:	f002 fa22 	bl	8009fac <LoRaMacCommandsAddCmd>
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 8007b68:	2310      	movs	r3, #16
 8007b6a:	4a43      	ldr	r2, [pc, #268]	; (8007c78 <ProcessMacCommands.isra.1.constprop.7+0x3e0>)
 8007b6c:	5ca9      	ldrb	r1, [r5, r2]
 8007b6e:	430b      	orrs	r3, r1
 8007b70:	54ab      	strb	r3, [r5, r2]
 8007b72:	e754      	b.n	8007a1e <ProcessMacCommands.isra.1.constprop.7+0x186>
                txParamSetupReq.UplinkDwellTime = 0;
 8007b74:	2200      	movs	r2, #0
                uint8_t eirpDwellTime = payload[macIndex++];
 8007b76:	3402      	adds	r4, #2
 8007b78:	b2e3      	uxtb	r3, r4
 8007b7a:	9305      	str	r3, [sp, #20]
                txParamSetupReq.UplinkDwellTime = 0;
 8007b7c:	ac0b      	add	r4, sp, #44	; 0x2c
                uint8_t eirpDwellTime = payload[macIndex++];
 8007b7e:	5dbb      	ldrb	r3, [r7, r6]
                txParamSetupReq.UplinkDwellTime = 0;
 8007b80:	7022      	strb	r2, [r4, #0]
                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 8007b82:	3220      	adds	r2, #32
 8007b84:	401a      	ands	r2, r3
 8007b86:	d142      	bne.n	8007c0e <ProcessMacCommands.isra.1.constprop.7+0x376>
                    txParamSetupReq.DownlinkDwellTime = 1;
 8007b88:	7062      	strb	r2, [r4, #1]
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 8007b8a:	06da      	lsls	r2, r3, #27
 8007b8c:	d501      	bpl.n	8007b92 <ProcessMacCommands.isra.1.constprop.7+0x2fa>
                    txParamSetupReq.UplinkDwellTime = 1;
 8007b8e:	2201      	movs	r2, #1
 8007b90:	7022      	strb	r2, [r4, #0]
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 8007b92:	220f      	movs	r2, #15
 8007b94:	4013      	ands	r3, r2
 8007b96:	70a3      	strb	r3, [r4, #2]
                if( RegionTxParamSetupReq( MacCtx.NvmCtx->Region, &txParamSetupReq ) != -1 )
 8007b98:	4e36      	ldr	r6, [pc, #216]	; (8007c74 <ProcessMacCommands.isra.1.constprop.7+0x3dc>)
 8007b9a:	4b34      	ldr	r3, [pc, #208]	; (8007c6c <ProcessMacCommands.isra.1.constprop.7+0x3d4>)
 8007b9c:	0021      	movs	r1, r4
 8007b9e:	599b      	ldr	r3, [r3, r6]
 8007ba0:	7818      	ldrb	r0, [r3, #0]
 8007ba2:	9303      	str	r3, [sp, #12]
 8007ba4:	f003 f9ad 	bl	800af02 <RegionTxParamSetupReq>
 8007ba8:	1c43      	adds	r3, r0, #1
 8007baa:	d02e      	beq.n	8007c0a <ProcessMacCommands.isra.1.constprop.7+0x372>
                    MacCtx.NvmCtx->MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 8007bac:	4b2f      	ldr	r3, [pc, #188]	; (8007c6c <ProcessMacCommands.isra.1.constprop.7+0x3d4>)
 8007bae:	599d      	ldr	r5, [r3, r6]
 8007bb0:	7823      	ldrb	r3, [r4, #0]
 8007bb2:	9303      	str	r3, [sp, #12]
 8007bb4:	2396      	movs	r3, #150	; 0x96
 8007bb6:	9a03      	ldr	r2, [sp, #12]
 8007bb8:	005b      	lsls	r3, r3, #1
 8007bba:	54ea      	strb	r2, [r5, r3]
                    MacCtx.NvmCtx->MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 8007bbc:	232e      	movs	r3, #46	; 0x2e
 8007bbe:	7862      	ldrb	r2, [r4, #1]
 8007bc0:	33ff      	adds	r3, #255	; 0xff
 8007bc2:	54ea      	strb	r2, [r5, r3]
                    MacCtx.NvmCtx->MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 8007bc4:	002b      	movs	r3, r5
 8007bc6:	33fc      	adds	r3, #252	; 0xfc
 8007bc8:	9307      	str	r3, [sp, #28]
 8007bca:	78a3      	ldrb	r3, [r4, #2]
 8007bcc:	4a2b      	ldr	r2, [pc, #172]	; (8007c7c <ProcessMacCommands.isra.1.constprop.7+0x3e4>)
 8007bce:	5cd0      	ldrb	r0, [r2, r3]
 8007bd0:	f7f8 ff30 	bl	8000a34 <__aeabi_ui2f>
 8007bd4:	9b07      	ldr	r3, [sp, #28]
                    getPhy.Attribute = PHY_MIN_TX_DR;
 8007bd6:	a90c      	add	r1, sp, #48	; 0x30
                    MacCtx.NvmCtx->MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 8007bd8:	6358      	str	r0, [r3, #52]	; 0x34
                    getPhy.Attribute = PHY_MIN_TX_DR;
 8007bda:	2302      	movs	r3, #2
 8007bdc:	700b      	strb	r3, [r1, #0]
                    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8007bde:	9b03      	ldr	r3, [sp, #12]
 8007be0:	708b      	strb	r3, [r1, #2]
                    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8007be2:	7828      	ldrb	r0, [r5, #0]
 8007be4:	f003 f90c 	bl	800ae00 <RegionGetPhyParam>
                    MacCtx.NvmCtx->MacParams.ChannelsDatarate = MAX( MacCtx.NvmCtx->MacParams.ChannelsDatarate, ( int8_t )phyParam.Value );
 8007be8:	4b20      	ldr	r3, [pc, #128]	; (8007c6c <ProcessMacCommands.isra.1.constprop.7+0x3d4>)
                    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8007bea:	9010      	str	r0, [sp, #64]	; 0x40
                    MacCtx.NvmCtx->MacParams.ChannelsDatarate = MAX( MacCtx.NvmCtx->MacParams.ChannelsDatarate, ( int8_t )phyParam.Value );
 8007bec:	599b      	ldr	r3, [r3, r6]
 8007bee:	1c02      	adds	r2, r0, #0
 8007bf0:	33f9      	adds	r3, #249	; 0xf9
 8007bf2:	7819      	ldrb	r1, [r3, #0]
 8007bf4:	b240      	sxtb	r0, r0
 8007bf6:	b24c      	sxtb	r4, r1
 8007bf8:	42a0      	cmp	r0, r4
 8007bfa:	da00      	bge.n	8007bfe <ProcessMacCommands.isra.1.constprop.7+0x366>
 8007bfc:	1c0a      	adds	r2, r1, #0
 8007bfe:	701a      	strb	r2, [r3, #0]
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 8007c00:	a90a      	add	r1, sp, #40	; 0x28
 8007c02:	2200      	movs	r2, #0
 8007c04:	2009      	movs	r0, #9
 8007c06:	f002 f9d1 	bl	8009fac <LoRaMacCommandsAddCmd>
                uint8_t eirpDwellTime = payload[macIndex++];
 8007c0a:	9e05      	ldr	r6, [sp, #20]
 8007c0c:	e686      	b.n	800791c <ProcessMacCommands.isra.1.constprop.7+0x84>
                    txParamSetupReq.DownlinkDwellTime = 1;
 8007c0e:	2201      	movs	r2, #1
 8007c10:	e7ba      	b.n	8007b88 <ProcessMacCommands.isra.1.constprop.7+0x2f0>
                status = 0x03;
 8007c12:	250d      	movs	r5, #13
 8007c14:	ab06      	add	r3, sp, #24
 8007c16:	18ed      	adds	r5, r5, r3
 8007c18:	2303      	movs	r3, #3
 8007c1a:	702b      	strb	r3, [r5, #0]
                dlChannelReq.ChannelId = payload[macIndex++];
 8007c1c:	5dbb      	ldrb	r3, [r7, r6]
 8007c1e:	a910      	add	r1, sp, #64	; 0x40
 8007c20:	700b      	strb	r3, [r1, #0]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8007c22:	1d22      	adds	r2, r4, #4
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 8007c24:	1ce3      	adds	r3, r4, #3
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8007c26:	b2db      	uxtb	r3, r3
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8007c28:	b2d2      	uxtb	r2, r2
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8007c2a:	5cfb      	ldrb	r3, [r7, r3]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8007c2c:	5cba      	ldrb	r2, [r7, r2]
 8007c2e:	1d66      	adds	r6, r4, #5
                dlChannelReq.ChannelId = payload[macIndex++];
 8007c30:	3402      	adds	r4, #2
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8007c32:	0412      	lsls	r2, r2, #16
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 8007c34:	b2e4      	uxtb	r4, r4
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8007c36:	021b      	lsls	r3, r3, #8
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8007c38:	4313      	orrs	r3, r2
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 8007c3a:	5d3a      	ldrb	r2, [r7, r4]
                status = RegionDlChannelReq( MacCtx.NvmCtx->Region, &dlChannelReq );
 8007c3c:	4c0b      	ldr	r4, [pc, #44]	; (8007c6c <ProcessMacCommands.isra.1.constprop.7+0x3d4>)
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8007c3e:	4313      	orrs	r3, r2
                dlChannelReq.Rx1Frequency *= 100;
 8007c40:	2264      	movs	r2, #100	; 0x64
 8007c42:	4353      	muls	r3, r2
 8007c44:	604b      	str	r3, [r1, #4]
                status = RegionDlChannelReq( MacCtx.NvmCtx->Region, &dlChannelReq );
 8007c46:	4b0b      	ldr	r3, [pc, #44]	; (8007c74 <ProcessMacCommands.isra.1.constprop.7+0x3dc>)
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8007c48:	b2f6      	uxtb	r6, r6
                status = RegionDlChannelReq( MacCtx.NvmCtx->Region, &dlChannelReq );
 8007c4a:	58e3      	ldr	r3, [r4, r3]
 8007c4c:	7818      	ldrb	r0, [r3, #0]
 8007c4e:	f003 f961 	bl	800af14 <RegionDlChannelReq>
                macCmdPayload[0] = status;
 8007c52:	a90a      	add	r1, sp, #40	; 0x28
 8007c54:	7008      	strb	r0, [r1, #0]
                status = RegionDlChannelReq( MacCtx.NvmCtx->Region, &dlChannelReq );
 8007c56:	7028      	strb	r0, [r5, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 8007c58:	2201      	movs	r2, #1
 8007c5a:	200a      	movs	r0, #10
 8007c5c:	f002 f9a6 	bl	8009fac <LoRaMacCommandsAddCmd>
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 8007c60:	2310      	movs	r3, #16
 8007c62:	4a05      	ldr	r2, [pc, #20]	; (8007c78 <ProcessMacCommands.isra.1.constprop.7+0x3e0>)
 8007c64:	5ca1      	ldrb	r1, [r4, r2]
 8007c66:	430b      	orrs	r3, r1
 8007c68:	54a3      	strb	r3, [r4, r2]
 8007c6a:	e657      	b.n	800791c <ProcessMacCommands.isra.1.constprop.7+0x84>
 8007c6c:	2000091c 	.word	0x2000091c
 8007c70:	00000459 	.word	0x00000459
 8007c74:	00000484 	.word	0x00000484
 8007c78:	00000481 	.word	0x00000481
 8007c7c:	0800ef42 	.word	0x0800ef42
                SysTime_t sysTime = { 0 };
 8007c80:	231e      	movs	r3, #30
 8007c82:	aa06      	add	r2, sp, #24
 8007c84:	189b      	adds	r3, r3, r2
 8007c86:	2200      	movs	r2, #0
 8007c88:	801a      	strh	r2, [r3, #0]
                gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 8007c8a:	1ca3      	adds	r3, r4, #2
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 8007c8c:	b2db      	uxtb	r3, r3
 8007c8e:	5cfd      	ldrb	r5, [r7, r3]
 8007c90:	1ce3      	adds	r3, r4, #3
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 8007c92:	b2db      	uxtb	r3, r3
 8007c94:	5cf9      	ldrb	r1, [r7, r3]
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 8007c96:	022d      	lsls	r5, r5, #8
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 8007c98:	0409      	lsls	r1, r1, #16
 8007c9a:	430d      	orrs	r5, r1
 8007c9c:	1d23      	adds	r3, r4, #4
                gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 8007c9e:	5db9      	ldrb	r1, [r7, r6]
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8007ca0:	b2db      	uxtb	r3, r3
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 8007ca2:	430d      	orrs	r5, r1
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8007ca4:	5cf9      	ldrb	r1, [r7, r3]
                gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 8007ca6:	23fa      	movs	r3, #250	; 0xfa
                gpsEpochTime.SubSeconds = payload[macIndex++];
 8007ca8:	1da6      	adds	r6, r4, #6
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8007caa:	3405      	adds	r4, #5
                gpsEpochTime.SubSeconds = payload[macIndex++];
 8007cac:	b2e4      	uxtb	r4, r4
                gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 8007cae:	5d3a      	ldrb	r2, [r7, r4]
 8007cb0:	009b      	lsls	r3, r3, #2
 8007cb2:	4353      	muls	r3, r2
 8007cb4:	aa06      	add	r2, sp, #24
 8007cb6:	121b      	asrs	r3, r3, #8
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8007cb8:	0609      	lsls	r1, r1, #24
                gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 8007cba:	8393      	strh	r3, [r2, #28]
                sysTimeCurrent = SysTimeGet( );
 8007cbc:	a810      	add	r0, sp, #64	; 0x40
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8007cbe:	430d      	orrs	r5, r1
                sysTimeCurrent = SysTimeGet( );
 8007cc0:	f004 fd86 	bl	800c7d0 <SysTimeGet>
                sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 8007cc4:	4b3a      	ldr	r3, [pc, #232]	; (8007db0 <ProcessMacCommands.isra.1.constprop.7+0x518>)
                sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 8007cc6:	4c3b      	ldr	r4, [pc, #236]	; (8007db4 <ProcessMacCommands.isra.1.constprop.7+0x51c>)
                sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 8007cc8:	18e9      	adds	r1, r5, r3
                sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 8007cca:	23cf      	movs	r3, #207	; 0xcf
 8007ccc:	009b      	lsls	r3, r3, #2
 8007cce:	18e3      	adds	r3, r4, r3
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007cd4:	9300      	str	r3, [sp, #0]
 8007cd6:	23ce      	movs	r3, #206	; 0xce
 8007cd8:	009b      	lsls	r3, r3, #2
 8007cda:	58e3      	ldr	r3, [r4, r3]
 8007cdc:	a80e      	add	r0, sp, #56	; 0x38
 8007cde:	910c      	str	r1, [sp, #48]	; 0x30
 8007ce0:	f004 fd42 	bl	800c768 <SysTimeSub>
 8007ce4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007ce6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007ce8:	9300      	str	r3, [sp, #0]
 8007cea:	9910      	ldr	r1, [sp, #64]	; 0x40
 8007cec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007cee:	a80c      	add	r0, sp, #48	; 0x30
 8007cf0:	f004 fd20 	bl	800c734 <SysTimeAdd>
                SysTimeSet( sysTime );
 8007cf4:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007cf6:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007cf8:	f004 fd4c 	bl	800c794 <SysTimeSet>
                LoRaMacClassBDeviceTimeAns( );
 8007cfc:	f002 f91e 	bl	8009f3c <LoRaMacClassBDeviceTimeAns>
                MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 8007d00:	2387      	movs	r3, #135	; 0x87
 8007d02:	2201      	movs	r2, #1
 8007d04:	00db      	lsls	r3, r3, #3
                gpsEpochTime.SubSeconds = payload[macIndex++];
 8007d06:	b2f6      	uxtb	r6, r6
                MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 8007d08:	54e2      	strb	r2, [r4, r3]
 8007d0a:	e607      	b.n	800791c <ProcessMacCommands.isra.1.constprop.7+0x84>
                if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 8007d0c:	2390      	movs	r3, #144	; 0x90
 8007d0e:	4a29      	ldr	r2, [pc, #164]	; (8007db4 <ProcessMacCommands.isra.1.constprop.7+0x51c>)
 8007d10:	00db      	lsls	r3, r3, #3
 8007d12:	5cd3      	ldrb	r3, [r2, r3]
 8007d14:	3b04      	subs	r3, #4
 8007d16:	2b01      	cmp	r3, #1
 8007d18:	d800      	bhi.n	8007d1c <ProcessMacCommands.isra.1.constprop.7+0x484>
 8007d1a:	e5ff      	b.n	800791c <ProcessMacCommands.isra.1.constprop.7+0x84>
                    LoRaMacClassBPingSlotInfoAns( );
 8007d1c:	f002 f90a 	bl	8009f34 <LoRaMacClassBPingSlotInfoAns>
 8007d20:	e5fc      	b.n	800791c <ProcessMacCommands.isra.1.constprop.7+0x84>
                frequency = ( uint32_t )payload[macIndex++];
 8007d22:	1ca3      	adds	r3, r4, #2
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 8007d24:	b2db      	uxtb	r3, r3
 8007d26:	5cf9      	ldrb	r1, [r7, r3]
 8007d28:	1ce3      	adds	r3, r4, #3
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8007d2a:	b2db      	uxtb	r3, r3
 8007d2c:	5cfb      	ldrb	r3, [r7, r3]
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 8007d2e:	0209      	lsls	r1, r1, #8
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8007d30:	041b      	lsls	r3, r3, #16
 8007d32:	4319      	orrs	r1, r3
                frequency *= 100;
 8007d34:	2364      	movs	r3, #100	; 0x64
                frequency = ( uint32_t )payload[macIndex++];
 8007d36:	5dba      	ldrb	r2, [r7, r6]
                datarate = payload[macIndex++] & 0x0F;
 8007d38:	1d66      	adds	r6, r4, #5
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8007d3a:	3404      	adds	r4, #4
                datarate = payload[macIndex++] & 0x0F;
 8007d3c:	b2e4      	uxtb	r4, r4
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8007d3e:	4311      	orrs	r1, r2
                datarate = payload[macIndex++] & 0x0F;
 8007d40:	5d38      	ldrb	r0, [r7, r4]
                frequency *= 100;
 8007d42:	4359      	muls	r1, r3
                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 8007d44:	3b55      	subs	r3, #85	; 0x55
 8007d46:	4018      	ands	r0, r3
 8007d48:	f002 f8f5 	bl	8009f36 <LoRaMacClassBPingSlotChannelReq>
                macCmdPayload[0] = status;
 8007d4c:	a90a      	add	r1, sp, #40	; 0x28
 8007d4e:	7008      	strb	r0, [r1, #0]
                datarate = payload[macIndex++] & 0x0F;
 8007d50:	b2f6      	uxtb	r6, r6
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
 8007d52:	2201      	movs	r2, #1
 8007d54:	2011      	movs	r0, #17
 8007d56:	e6bf      	b.n	8007ad8 <ProcessMacCommands.isra.1.constprop.7+0x240>
                beaconTimingDelay = ( uint16_t )payload[macIndex++];
 8007d58:	1ca3      	adds	r3, r4, #2
                beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 8007d5a:	b2db      	uxtb	r3, r3
 8007d5c:	5cf8      	ldrb	r0, [r7, r3]
 8007d5e:	5dbb      	ldrb	r3, [r7, r6]
 8007d60:	0200      	lsls	r0, r0, #8
 8007d62:	4318      	orrs	r0, r3
                beaconTimingChannel = payload[macIndex++];
 8007d64:	1d26      	adds	r6, r4, #4
                LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 8007d66:	4b14      	ldr	r3, [pc, #80]	; (8007db8 <ProcessMacCommands.isra.1.constprop.7+0x520>)
                beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 8007d68:	3403      	adds	r4, #3
                beaconTimingChannel = payload[macIndex++];
 8007d6a:	b2e4      	uxtb	r4, r4
                LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 8007d6c:	5d39      	ldrb	r1, [r7, r4]
 8007d6e:	681a      	ldr	r2, [r3, #0]
                beaconTimingChannel = payload[macIndex++];
 8007d70:	b2f6      	uxtb	r6, r6
                LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 8007d72:	f002 f8e2 	bl	8009f3a <LoRaMacClassBBeaconTimingAns>
 8007d76:	e5d1      	b.n	800791c <ProcessMacCommands.isra.1.constprop.7+0x84>
                    frequency = ( uint32_t )payload[macIndex++];
 8007d78:	5dba      	ldrb	r2, [r7, r6]
 8007d7a:	1ca3      	adds	r3, r4, #2
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8007d7c:	1d26      	adds	r6, r4, #4
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 8007d7e:	3403      	adds	r4, #3
 8007d80:	b2db      	uxtb	r3, r3
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8007d82:	b2e4      	uxtb	r4, r4
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 8007d84:	5cf8      	ldrb	r0, [r7, r3]
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8007d86:	5d3b      	ldrb	r3, [r7, r4]
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 8007d88:	0200      	lsls	r0, r0, #8
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8007d8a:	041b      	lsls	r3, r3, #16
 8007d8c:	4318      	orrs	r0, r3
                    frequency *= 100;
 8007d8e:	2364      	movs	r3, #100	; 0x64
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8007d90:	4310      	orrs	r0, r2
                    frequency *= 100;
 8007d92:	4358      	muls	r0, r3
                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 8007d94:	f002 f8d3 	bl	8009f3e <LoRaMacClassBBeaconFreqReq>
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8007d98:	b2f6      	uxtb	r6, r6
 8007d9a:	a90a      	add	r1, sp, #40	; 0x28
                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 8007d9c:	2800      	cmp	r0, #0
 8007d9e:	d004      	beq.n	8007daa <ProcessMacCommands.isra.1.constprop.7+0x512>
                        macCmdPayload[0] = 1;
 8007da0:	2301      	movs	r3, #1
 8007da2:	700b      	strb	r3, [r1, #0]
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 8007da4:	2201      	movs	r2, #1
 8007da6:	2013      	movs	r0, #19
 8007da8:	e696      	b.n	8007ad8 <ProcessMacCommands.isra.1.constprop.7+0x240>
                        macCmdPayload[0] = 0;
 8007daa:	7008      	strb	r0, [r1, #0]
 8007dac:	e7fa      	b.n	8007da4 <ProcessMacCommands.isra.1.constprop.7+0x50c>
 8007dae:	46c0      	nop			; (mov r8, r8)
 8007db0:	12d53d80 	.word	0x12d53d80
 8007db4:	2000091c 	.word	0x2000091c
 8007db8:	200015e0 	.word	0x200015e0

08007dbc <LoRaMacIsBusy>:
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 8007dbc:	22d0      	movs	r2, #208	; 0xd0
 8007dbe:	4b06      	ldr	r3, [pc, #24]	; (8007dd8 <LoRaMacIsBusy+0x1c>)
 8007dc0:	0092      	lsls	r2, r2, #2
 8007dc2:	589a      	ldr	r2, [r3, r2]
    return true;
 8007dc4:	2001      	movs	r0, #1
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 8007dc6:	2a00      	cmp	r2, #0
 8007dc8:	d105      	bne.n	8007dd6 <LoRaMacIsBusy+0x1a>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 8007dca:	4a04      	ldr	r2, [pc, #16]	; (8007ddc <LoRaMacIsBusy+0x20>)
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 8007dcc:	5c98      	ldrb	r0, [r3, r2]
 8007dce:	3801      	subs	r0, #1
 8007dd0:	1e43      	subs	r3, r0, #1
 8007dd2:	4198      	sbcs	r0, r3
 8007dd4:	b2c0      	uxtb	r0, r0
}
 8007dd6:	4770      	bx	lr
 8007dd8:	2000091c 	.word	0x2000091c
 8007ddc:	00000482 	.word	0x00000482

08007de0 <PrepareFrame>:
{
 8007de0:	b5f0      	push	{r4, r5, r6, r7, lr}
    MacCtx.PktBufferLen = 0;
 8007de2:	2500      	movs	r5, #0
{
 8007de4:	001f      	movs	r7, r3
 8007de6:	b087      	sub	sp, #28
 8007de8:	ab0c      	add	r3, sp, #48	; 0x30
    MacCtx.PktBufferLen = 0;
 8007dea:	4c57      	ldr	r4, [pc, #348]	; (8007f48 <PrepareFrame+0x168>)
{
 8007dec:	881e      	ldrh	r6, [r3, #0]
    MacCtx.NodeAckRequested = false;
 8007dee:	4b57      	ldr	r3, [pc, #348]	; (8007f4c <PrepareFrame+0x16c>)
{
 8007df0:	9203      	str	r2, [sp, #12]
    MacCtx.NodeAckRequested = false;
 8007df2:	54e5      	strb	r5, [r4, r3]
        fBufferSize = 0;
 8007df4:	003b      	movs	r3, r7
 8007df6:	1e5a      	subs	r2, r3, #1
 8007df8:	4193      	sbcs	r3, r2
 8007dfa:	425b      	negs	r3, r3
 8007dfc:	401e      	ands	r6, r3
{
 8007dfe:	9001      	str	r0, [sp, #4]
 8007e00:	9102      	str	r1, [sp, #8]
    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 8007e02:	0032      	movs	r2, r6
 8007e04:	0039      	movs	r1, r7
 8007e06:	4852      	ldr	r0, [pc, #328]	; (8007f50 <PrepareFrame+0x170>)
    MacCtx.PktBufferLen = 0;
 8007e08:	8025      	strh	r5, [r4, #0]
    uint32_t fCntUp = 0;
 8007e0a:	9504      	str	r5, [sp, #16]
    size_t macCmdsSize = 0;
 8007e0c:	9505      	str	r5, [sp, #20]
    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 8007e0e:	f004 feb2 	bl	800cb76 <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 8007e12:	4b50      	ldr	r3, [pc, #320]	; (8007f54 <PrepareFrame+0x174>)
 8007e14:	b2f2      	uxtb	r2, r6
 8007e16:	54e2      	strb	r2, [r4, r3]
    MacCtx.PktBuffer[0] = macHdr->Value;
 8007e18:	9b01      	ldr	r3, [sp, #4]
 8007e1a:	781b      	ldrb	r3, [r3, #0]
 8007e1c:	70a3      	strb	r3, [r4, #2]
    switch( macHdr->Bits.MType )
 8007e1e:	9b01      	ldr	r3, [sp, #4]
 8007e20:	781b      	ldrb	r3, [r3, #0]
 8007e22:	095b      	lsrs	r3, r3, #5
 8007e24:	2b04      	cmp	r3, #4
 8007e26:	d03c      	beq.n	8007ea2 <PrepareFrame+0xc2>
 8007e28:	2b07      	cmp	r3, #7
 8007e2a:	d100      	bne.n	8007e2e <PrepareFrame+0x4e>
 8007e2c:	e07e      	b.n	8007f2c <PrepareFrame+0x14c>
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8007e2e:	2002      	movs	r0, #2
    switch( macHdr->Bits.MType )
 8007e30:	2b02      	cmp	r3, #2
 8007e32:	d134      	bne.n	8007e9e <PrepareFrame+0xbe>
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 8007e34:	0026      	movs	r6, r4
 8007e36:	2304      	movs	r3, #4
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 8007e38:	0027      	movs	r7, r4
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 8007e3a:	36ff      	adds	r6, #255	; 0xff
 8007e3c:	7173      	strb	r3, [r6, #5]
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 8007e3e:	4b46      	ldr	r3, [pc, #280]	; (8007f58 <PrepareFrame+0x178>)
 8007e40:	37fc      	adds	r7, #252	; 0xfc
 8007e42:	60fb      	str	r3, [r7, #12]
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8007e44:	23ff      	movs	r3, #255	; 0xff
 8007e46:	7373      	strb	r3, [r6, #13]
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 8007e48:	9b01      	ldr	r3, [sp, #4]
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 8007e4a:	9903      	ldr	r1, [sp, #12]
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 8007e4c:	781b      	ldrb	r3, [r3, #0]
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = MacCtx.NvmCtx->DevAddr;
 8007e4e:	4d43      	ldr	r5, [pc, #268]	; (8007f5c <PrepareFrame+0x17c>)
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 8007e50:	73b3      	strb	r3, [r6, #14]
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 8007e52:	2394      	movs	r3, #148	; 0x94
 8007e54:	005b      	lsls	r3, r3, #1
 8007e56:	54e1      	strb	r1, [r4, r3]
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = MacCtx.NvmCtx->DevAddr;
 8007e58:	5963      	ldr	r3, [r4, r5]
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8007e5a:	a804      	add	r0, sp, #16
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = MacCtx.NvmCtx->DevAddr;
 8007e5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e5e:	617b      	str	r3, [r7, #20]
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8007e60:	9b02      	ldr	r3, [sp, #8]
 8007e62:	781b      	ldrb	r3, [r3, #0]
 8007e64:	7573      	strb	r3, [r6, #21]
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 8007e66:	2398      	movs	r3, #152	; 0x98
 8007e68:	005b      	lsls	r3, r3, #1
 8007e6a:	54e2      	strb	r2, [r4, r3]
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 8007e6c:	4b38      	ldr	r3, [pc, #224]	; (8007f50 <PrepareFrame+0x170>)
 8007e6e:	633b      	str	r3, [r7, #48]	; 0x30
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8007e70:	f002 fc0e 	bl	800a690 <LoRaMacCryptoGetFCntUp>
 8007e74:	0003      	movs	r3, r0
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8007e76:	2012      	movs	r0, #18
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d110      	bne.n	8007e9e <PrepareFrame+0xbe>
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 8007e7c:	0021      	movs	r1, r4
 8007e7e:	9a04      	ldr	r2, [sp, #16]
 8007e80:	31fe      	adds	r1, #254	; 0xfe
 8007e82:	830a      	strh	r2, [r1, #24]
            MacCtx.McpsConfirm.NbRetries = 0;
 8007e84:	4936      	ldr	r1, [pc, #216]	; (8007f60 <PrepareFrame+0x180>)
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8007e86:	a805      	add	r0, sp, #20
            MacCtx.McpsConfirm.NbRetries = 0;
 8007e88:	5463      	strb	r3, [r4, r1]
            MacCtx.McpsConfirm.AckReceived = false;
 8007e8a:	3901      	subs	r1, #1
 8007e8c:	5463      	strb	r3, [r4, r1]
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 8007e8e:	2389      	movs	r3, #137	; 0x89
 8007e90:	00db      	lsls	r3, r3, #3
 8007e92:	50e2      	str	r2, [r4, r3]
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8007e94:	f002 f934 	bl	800a100 <LoRaMacCommandsGetSizeSerializedCmds>
 8007e98:	2800      	cmp	r0, #0
 8007e9a:	d006      	beq.n	8007eaa <PrepareFrame+0xca>
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8007e9c:	2013      	movs	r0, #19
}
 8007e9e:	b007      	add	sp, #28
 8007ea0:	bdf0      	pop	{r4, r5, r6, r7, pc}
            MacCtx.NodeAckRequested = true;
 8007ea2:	2301      	movs	r3, #1
 8007ea4:	4929      	ldr	r1, [pc, #164]	; (8007f4c <PrepareFrame+0x16c>)
 8007ea6:	5463      	strb	r3, [r4, r1]
 8007ea8:	e7c4      	b.n	8007e34 <PrepareFrame+0x54>
            if( macCmdsSize > 0 )
 8007eaa:	9b05      	ldr	r3, [sp, #20]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d101      	bne.n	8007eb4 <PrepareFrame+0xd4>
    return LORAMAC_STATUS_OK;
 8007eb0:	2000      	movs	r0, #0
 8007eb2:	e7f4      	b.n	8007e9e <PrepareFrame+0xbe>
                availableSize = GetMaxAppPayloadWithoutFOptsLength( MacCtx.NvmCtx->MacParams.ChannelsDatarate );
 8007eb4:	20f9      	movs	r0, #249	; 0xf9
 8007eb6:	5963      	ldr	r3, [r4, r5]
 8007eb8:	5618      	ldrsb	r0, [r3, r0]
 8007eba:	f7ff f98f 	bl	80071dc <GetMaxAppPayloadWithoutFOptsLength>
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8007ebe:	4b25      	ldr	r3, [pc, #148]	; (8007f54 <PrepareFrame+0x174>)
 8007ec0:	5ce3      	ldrb	r3, [r4, r3]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d01e      	beq.n	8007f04 <PrepareFrame+0x124>
 8007ec6:	9b05      	ldr	r3, [sp, #20]
 8007ec8:	2b0f      	cmp	r3, #15
 8007eca:	d811      	bhi.n	8007ef0 <PrepareFrame+0x110>
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 8007ecc:	4a25      	ldr	r2, [pc, #148]	; (8007f64 <PrepareFrame+0x184>)
 8007ece:	a905      	add	r1, sp, #20
 8007ed0:	200f      	movs	r0, #15
 8007ed2:	f002 f921 	bl	800a118 <LoRaMacCommandsSerializeCmds>
 8007ed6:	2800      	cmp	r0, #0
 8007ed8:	d1e0      	bne.n	8007e9c <PrepareFrame+0xbc>
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 8007eda:	210f      	movs	r1, #15
 8007edc:	9b02      	ldr	r3, [sp, #8]
 8007ede:	9a05      	ldr	r2, [sp, #20]
 8007ee0:	781b      	ldrb	r3, [r3, #0]
 8007ee2:	400a      	ands	r2, r1
 8007ee4:	438b      	bics	r3, r1
 8007ee6:	4313      	orrs	r3, r2
 8007ee8:	9a02      	ldr	r2, [sp, #8]
 8007eea:	7013      	strb	r3, [r2, #0]
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8007eec:	7573      	strb	r3, [r6, #21]
 8007eee:	e7d6      	b.n	8007e9e <PrepareFrame+0xbe>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.NvmCtx->MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8007ef0:	5962      	ldr	r2, [r4, r5]
 8007ef2:	a905      	add	r1, sp, #20
 8007ef4:	3241      	adds	r2, #65	; 0x41
 8007ef6:	32ff      	adds	r2, #255	; 0xff
 8007ef8:	f002 f90e 	bl	800a118 <LoRaMacCommandsSerializeCmds>
 8007efc:	2800      	cmp	r0, #0
 8007efe:	d1cd      	bne.n	8007e9c <PrepareFrame+0xbc>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 8007f00:	300a      	adds	r0, #10
 8007f02:	e7cc      	b.n	8007e9e <PrepareFrame+0xbe>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.NvmCtx->MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8007f04:	5962      	ldr	r2, [r4, r5]
 8007f06:	a905      	add	r1, sp, #20
 8007f08:	3241      	adds	r2, #65	; 0x41
 8007f0a:	32ff      	adds	r2, #255	; 0xff
 8007f0c:	f002 f904 	bl	800a118 <LoRaMacCommandsSerializeCmds>
 8007f10:	2800      	cmp	r0, #0
 8007f12:	d1c3      	bne.n	8007e9c <PrepareFrame+0xbc>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 8007f14:	2394      	movs	r3, #148	; 0x94
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 8007f16:	2298      	movs	r2, #152	; 0x98
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 8007f18:	005b      	lsls	r3, r3, #1
 8007f1a:	54e0      	strb	r0, [r4, r3]
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.NvmCtx->MacCommandsBuffer;
 8007f1c:	5963      	ldr	r3, [r4, r5]
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 8007f1e:	0052      	lsls	r2, r2, #1
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.NvmCtx->MacCommandsBuffer;
 8007f20:	3341      	adds	r3, #65	; 0x41
 8007f22:	33ff      	adds	r3, #255	; 0xff
 8007f24:	633b      	str	r3, [r7, #48]	; 0x30
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 8007f26:	9b05      	ldr	r3, [sp, #20]
 8007f28:	54a3      	strb	r3, [r4, r2]
 8007f2a:	e7b8      	b.n	8007e9e <PrepareFrame+0xbe>
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 8007f2c:	2f00      	cmp	r7, #0
 8007f2e:	d0bf      	beq.n	8007eb0 <PrepareFrame+0xd0>
 8007f30:	2a00      	cmp	r2, #0
 8007f32:	d0bd      	beq.n	8007eb0 <PrepareFrame+0xd0>
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 8007f34:	b2f2      	uxtb	r2, r6
 8007f36:	0039      	movs	r1, r7
 8007f38:	480b      	ldr	r0, [pc, #44]	; (8007f68 <PrepareFrame+0x188>)
 8007f3a:	f004 fe1c 	bl	800cb76 <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 8007f3e:	4b05      	ldr	r3, [pc, #20]	; (8007f54 <PrepareFrame+0x174>)
 8007f40:	5ce3      	ldrb	r3, [r4, r3]
 8007f42:	3301      	adds	r3, #1
 8007f44:	8023      	strh	r3, [r4, #0]
 8007f46:	e7b3      	b.n	8007eb0 <PrepareFrame+0xd0>
 8007f48:	2000091c 	.word	0x2000091c
 8007f4c:	00000414 	.word	0x00000414
 8007f50:	20000a54 	.word	0x20000a54
 8007f54:	00000237 	.word	0x00000237
 8007f58:	2000091e 	.word	0x2000091e
 8007f5c:	00000484 	.word	0x00000484
 8007f60:	00000441 	.word	0x00000441
 8007f64:	20000a34 	.word	0x20000a34
 8007f68:	2000091f 	.word	0x2000091f

08007f6c <SendFrameOnChannel>:
{
 8007f6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f6e:	b089      	sub	sp, #36	; 0x24
    int8_t txPower = 0;
 8007f70:	ab02      	add	r3, sp, #8
 8007f72:	1ddf      	adds	r7, r3, #7
 8007f74:	2300      	movs	r3, #0
    txConfig.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8007f76:	4c37      	ldr	r4, [pc, #220]	; (8008054 <SendFrameOnChannel+0xe8>)
 8007f78:	4e37      	ldr	r6, [pc, #220]	; (8008058 <SendFrameOnChannel+0xec>)
    int8_t txPower = 0;
 8007f7a:	703b      	strb	r3, [r7, #0]
    txConfig.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8007f7c:	59a3      	ldr	r3, [r4, r6]
    txConfig.Channel = channel;
 8007f7e:	ad04      	add	r5, sp, #16
    txConfig.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8007f80:	001a      	movs	r2, r3
{
 8007f82:	9001      	str	r0, [sp, #4]
    txConfig.Channel = channel;
 8007f84:	7028      	strb	r0, [r5, #0]
    txConfig.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8007f86:	32f9      	adds	r2, #249	; 0xf9
 8007f88:	7812      	ldrb	r2, [r2, #0]
 8007f8a:	706a      	strb	r2, [r5, #1]
    txConfig.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 8007f8c:	001a      	movs	r2, r3
 8007f8e:	32f8      	adds	r2, #248	; 0xf8
 8007f90:	7812      	ldrb	r2, [r2, #0]
    txConfig.MaxEirp = MacCtx.NvmCtx->MacParams.MaxEirp;
 8007f92:	33fc      	adds	r3, #252	; 0xfc
    txConfig.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 8007f94:	70aa      	strb	r2, [r5, #2]
    txConfig.MaxEirp = MacCtx.NvmCtx->MacParams.MaxEirp;
 8007f96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    txConfig.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 8007f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    txConfig.MaxEirp = MacCtx.NvmCtx->MacParams.MaxEirp;
 8007f9a:	606a      	str	r2, [r5, #4]
    txConfig.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 8007f9c:	60ab      	str	r3, [r5, #8]
    txConfig.PktLen = MacCtx.PktBufferLen;
 8007f9e:	8823      	ldrh	r3, [r4, #0]
 8007fa0:	81ab      	strh	r3, [r5, #12]
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8007fa2:	f001 ffb6 	bl	8009f12 <LoRaMacClassBIsBeaconExpected>
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 8007fa6:	230e      	movs	r3, #14
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8007fa8:	2800      	cmp	r0, #0
 8007faa:	d109      	bne.n	8007fc0 <SendFrameOnChannel+0x54>
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 8007fac:	59a3      	ldr	r3, [r4, r6]
 8007fae:	33f0      	adds	r3, #240	; 0xf0
 8007fb0:	781b      	ldrb	r3, [r3, #0]
 8007fb2:	2b01      	cmp	r3, #1
 8007fb4:	d10d      	bne.n	8007fd2 <SendFrameOnChannel+0x66>
        if( LoRaMacClassBIsPingExpected( ) == true )
 8007fb6:	f001 ffae 	bl	8009f16 <LoRaMacClassBIsPingExpected>
 8007fba:	2800      	cmp	r0, #0
 8007fbc:	d003      	beq.n	8007fc6 <SendFrameOnChannel+0x5a>
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8007fbe:	230f      	movs	r3, #15
}
 8007fc0:	0018      	movs	r0, r3
 8007fc2:	b009      	add	sp, #36	; 0x24
 8007fc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8007fc6:	f001 ffa8 	bl	8009f1a <LoRaMacClassBIsMulticastExpected>
 8007fca:	2800      	cmp	r0, #0
 8007fcc:	d1f7      	bne.n	8007fbe <SendFrameOnChannel+0x52>
            LoRaMacClassBStopRxSlots( );
 8007fce:	f001 ffba 	bl	8009f46 <LoRaMacClassBStopRxSlots>
    RegionTxConfig( MacCtx.NvmCtx->Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 8007fd2:	59a3      	ldr	r3, [r4, r6]
 8007fd4:	003a      	movs	r2, r7
 8007fd6:	7818      	ldrb	r0, [r3, #0]
 8007fd8:	0029      	movs	r1, r5
 8007fda:	4b20      	ldr	r3, [pc, #128]	; (800805c <SendFrameOnChannel+0xf0>)
 8007fdc:	f002 ff64 	bl	800aea8 <RegionTxConfig>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8007fe0:	2201      	movs	r2, #1
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8007fe2:	2583      	movs	r5, #131	; 0x83
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8007fe4:	4b1e      	ldr	r3, [pc, #120]	; (8008060 <SendFrameOnChannel+0xf4>)
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8007fe6:	00ed      	lsls	r5, r5, #3
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8007fe8:	54e2      	strb	r2, [r4, r3]
    MacCtx.McpsConfirm.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8007fea:	59a3      	ldr	r3, [r4, r6]
 8007fec:	33f9      	adds	r3, #249	; 0xf9
 8007fee:	781a      	ldrb	r2, [r3, #0]
 8007ff0:	4b1c      	ldr	r3, [pc, #112]	; (8008064 <SendFrameOnChannel+0xf8>)
 8007ff2:	54e2      	strb	r2, [r4, r3]
    MacCtx.McpsConfirm.TxPower = txPower;
 8007ff4:	783a      	ldrb	r2, [r7, #0]
 8007ff6:	4b1c      	ldr	r3, [pc, #112]	; (8008068 <SendFrameOnChannel+0xfc>)
 8007ff8:	54e2      	strb	r2, [r4, r3]
    MacCtx.McpsConfirm.Channel = channel;
 8007ffa:	4b1c      	ldr	r3, [pc, #112]	; (800806c <SendFrameOnChannel+0x100>)
 8007ffc:	9a01      	ldr	r2, [sp, #4]
 8007ffe:	50e2      	str	r2, [r4, r3]
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8008000:	5963      	ldr	r3, [r4, r5]
 8008002:	4a1b      	ldr	r2, [pc, #108]	; (8008070 <SendFrameOnChannel+0x104>)
 8008004:	50a3      	str	r3, [r4, r2]
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8008006:	4a1b      	ldr	r2, [pc, #108]	; (8008074 <SendFrameOnChannel+0x108>)
 8008008:	50a3      	str	r3, [r4, r2]
    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 800800a:	f001 ff88 	bl	8009f1e <LoRaMacClassBIsBeaconModeActive>
 800800e:	2800      	cmp	r0, #0
 8008010:	d119      	bne.n	8008046 <SendFrameOnChannel+0xda>
    LoRaMacClassBHaltBeaconing( );
 8008012:	f001 ff87 	bl	8009f24 <LoRaMacClassBHaltBeaconing>
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8008016:	21d0      	movs	r1, #208	; 0xd0
 8008018:	2202      	movs	r2, #2
 800801a:	4b0e      	ldr	r3, [pc, #56]	; (8008054 <SendFrameOnChannel+0xe8>)
 800801c:	0089      	lsls	r1, r1, #2
 800801e:	5858      	ldr	r0, [r3, r1]
 8008020:	4302      	orrs	r2, r0
 8008022:	505a      	str	r2, [r3, r1]
    if( MacCtx.NodeAckRequested == false )
 8008024:	4a14      	ldr	r2, [pc, #80]	; (8008078 <SendFrameOnChannel+0x10c>)
 8008026:	5c9a      	ldrb	r2, [r3, r2]
 8008028:	2a00      	cmp	r2, #0
 800802a:	d104      	bne.n	8008036 <SendFrameOnChannel+0xca>
        MacCtx.ChannelsNbTransCounter++;
 800802c:	2182      	movs	r1, #130	; 0x82
 800802e:	00c9      	lsls	r1, r1, #3
 8008030:	5c5a      	ldrb	r2, [r3, r1]
 8008032:	3201      	adds	r2, #1
 8008034:	545a      	strb	r2, [r3, r1]
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 8008036:	7819      	ldrb	r1, [r3, #0]
 8008038:	4b10      	ldr	r3, [pc, #64]	; (800807c <SendFrameOnChannel+0x110>)
 800803a:	4811      	ldr	r0, [pc, #68]	; (8008080 <SendFrameOnChannel+0x114>)
 800803c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800803e:	9301      	str	r3, [sp, #4]
 8008040:	4798      	blx	r3
    return LORAMAC_STATUS_OK;
 8008042:	2300      	movs	r3, #0
 8008044:	e7bc      	b.n	8007fc0 <SendFrameOnChannel+0x54>
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 8008046:	5960      	ldr	r0, [r4, r5]
 8008048:	f001 ff7b 	bl	8009f42 <LoRaMacClassBIsUplinkCollision>
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 800804c:	2310      	movs	r3, #16
        if( collisionTime > 0 )
 800804e:	2800      	cmp	r0, #0
 8008050:	d0df      	beq.n	8008012 <SendFrameOnChannel+0xa6>
 8008052:	e7b5      	b.n	8007fc0 <SendFrameOnChannel+0x54>
 8008054:	2000091c 	.word	0x2000091c
 8008058:	00000484 	.word	0x00000484
 800805c:	20000d34 	.word	0x20000d34
 8008060:	0000043d 	.word	0x0000043d
 8008064:	0000043e 	.word	0x0000043e
 8008068:	0000043f 	.word	0x0000043f
 800806c:	0000044c 	.word	0x0000044c
 8008070:	00000444 	.word	0x00000444
 8008074:	00000454 	.word	0x00000454
 8008078:	00000414 	.word	0x00000414
 800807c:	0800eaa4 	.word	0x0800eaa4
 8008080:	2000091e 	.word	0x2000091e

08008084 <ScheduleTx>:
    TimerTime_t dutyCycleTimeOff = 0;
 8008084:	2300      	movs	r3, #0
    CalculateBackOff( MacCtx.NvmCtx->LastTxChannel );
 8008086:	229f      	movs	r2, #159	; 0x9f
{
 8008088:	b5f0      	push	{r4, r5, r6, r7, lr}
    CalculateBackOff( MacCtx.NvmCtx->LastTxChannel );
 800808a:	4c8b      	ldr	r4, [pc, #556]	; (80082b8 <ScheduleTx+0x234>)
 800808c:	4e8b      	ldr	r6, [pc, #556]	; (80082bc <ScheduleTx+0x238>)
{
 800808e:	b08b      	sub	sp, #44	; 0x2c
    TimerTime_t dutyCycleTimeOff = 0;
 8008090:	9304      	str	r3, [sp, #16]
    size_t macCmdsSize = 0;
 8008092:	9305      	str	r3, [sp, #20]
    CalculateBackOff( MacCtx.NvmCtx->LastTxChannel );
 8008094:	59a3      	ldr	r3, [r4, r6]
{
 8008096:	9003      	str	r0, [sp, #12]
    CalculateBackOff( MacCtx.NvmCtx->LastTxChannel );
 8008098:	0052      	lsls	r2, r2, #1
 800809a:	5c99      	ldrb	r1, [r3, r2]
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 800809c:	3296      	adds	r2, #150	; 0x96
 800809e:	5c9a      	ldrb	r2, [r3, r2]
 80080a0:	ad07      	add	r5, sp, #28
 80080a2:	2a00      	cmp	r2, #0
 80080a4:	d161      	bne.n	800816a <ScheduleTx+0xe6>
    calcBackOff.DutyCycleEnabled = MacCtx.NvmCtx->DutyCycleOn;
 80080a6:	273e      	movs	r7, #62	; 0x3e
        calcBackOff.Joined = true;
 80080a8:	702a      	strb	r2, [r5, #0]
    calcBackOff.DutyCycleEnabled = MacCtx.NvmCtx->DutyCycleOn;
 80080aa:	37ff      	adds	r7, #255	; 0xff
 80080ac:	5dda      	ldrb	r2, [r3, r7]
    calcBackOff.Channel = channel;
 80080ae:	70e9      	strb	r1, [r5, #3]
    calcBackOff.DutyCycleEnabled = MacCtx.NvmCtx->DutyCycleOn;
 80080b0:	70aa      	strb	r2, [r5, #2]
    calcBackOff.ElapsedTime = TimerGetElapsedTime( MacCtx.NvmCtx->InitializationTime );
 80080b2:	22e6      	movs	r2, #230	; 0xe6
 80080b4:	0052      	lsls	r2, r2, #1
 80080b6:	5898      	ldr	r0, [r3, r2]
 80080b8:	f004 fcaf 	bl	800ca1a <TimerGetElapsedTime>
    calcBackOff.TxTimeOnAir = MacCtx.TxTimeOnAir;
 80080bc:	2383      	movs	r3, #131	; 0x83
    calcBackOff.ElapsedTime = TimerGetElapsedTime( MacCtx.NvmCtx->InitializationTime );
 80080be:	6068      	str	r0, [r5, #4]
    calcBackOff.LastTxIsJoinRequest = false;
 80080c0:	2000      	movs	r0, #0
    calcBackOff.TxTimeOnAir = MacCtx.TxTimeOnAir;
 80080c2:	00db      	lsls	r3, r3, #3
 80080c4:	58e3      	ldr	r3, [r4, r3]
    calcBackOff.LastTxIsJoinRequest = false;
 80080c6:	7068      	strb	r0, [r5, #1]
    calcBackOff.TxTimeOnAir = MacCtx.TxTimeOnAir;
 80080c8:	60ab      	str	r3, [r5, #8]
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) && ( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true ) )
 80080ca:	4b7d      	ldr	r3, [pc, #500]	; (80082c0 <ScheduleTx+0x23c>)
 80080cc:	5ce3      	ldrb	r3, [r4, r3]
 80080ce:	075b      	lsls	r3, r3, #29
 80080d0:	d505      	bpl.n	80080de <ScheduleTx+0x5a>
 80080d2:	f002 f915 	bl	800a300 <LoRaMacConfirmQueueIsCmdActive>
 80080d6:	2800      	cmp	r0, #0
 80080d8:	d001      	beq.n	80080de <ScheduleTx+0x5a>
        calcBackOff.LastTxIsJoinRequest = true;
 80080da:	2301      	movs	r3, #1
 80080dc:	706b      	strb	r3, [r5, #1]
    RegionCalcBackOff( MacCtx.NvmCtx->Region, &calcBackOff );
 80080de:	59a3      	ldr	r3, [r4, r6]
 80080e0:	0029      	movs	r1, r5
 80080e2:	7818      	ldrb	r0, [r3, #0]
 80080e4:	f002 ff2a 	bl	800af3c <RegionCalcBackOff>
    MacCtx.NvmCtx->AggregatedTimeOff = ( MacCtx.TxTimeOnAir * MacCtx.NvmCtx->AggregatedDCycle - MacCtx.TxTimeOnAir );
 80080e8:	22e1      	movs	r2, #225	; 0xe1
 80080ea:	59a3      	ldr	r3, [r4, r6]
 80080ec:	0052      	lsls	r2, r2, #1
 80080ee:	5a99      	ldrh	r1, [r3, r2]
 80080f0:	2283      	movs	r2, #131	; 0x83
 80080f2:	00d2      	lsls	r2, r2, #3
 80080f4:	58a2      	ldr	r2, [r4, r2]
 80080f6:	3901      	subs	r1, #1
 80080f8:	434a      	muls	r2, r1
 80080fa:	21e4      	movs	r1, #228	; 0xe4
 80080fc:	0049      	lsls	r1, r1, #1
 80080fe:	505a      	str	r2, [r3, r1]
    nextChan.AggrTimeOff = MacCtx.NvmCtx->AggregatedTimeOff;
 8008100:	9207      	str	r2, [sp, #28]
    nextChan.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8008102:	001a      	movs	r2, r3
 8008104:	32f9      	adds	r2, #249	; 0xf9
 8008106:	7812      	ldrb	r2, [r2, #0]
 8008108:	722a      	strb	r2, [r5, #8]
    nextChan.DutyCycleEnabled = MacCtx.NvmCtx->DutyCycleOn;
 800810a:	5dda      	ldrb	r2, [r3, r7]
 800810c:	72aa      	strb	r2, [r5, #10]
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 800810e:	22ea      	movs	r2, #234	; 0xea
 8008110:	0052      	lsls	r2, r2, #1
 8008112:	5c9a      	ldrb	r2, [r3, r2]
 8008114:	2a00      	cmp	r2, #0
 8008116:	d12a      	bne.n	800816e <ScheduleTx+0xea>
        nextChan.Joined = true;
 8008118:	726a      	strb	r2, [r5, #9]
    nextChan.LastAggrTx = MacCtx.NvmCtx->LastTxDoneTime;
 800811a:	22e2      	movs	r2, #226	; 0xe2
 800811c:	0052      	lsls	r2, r2, #1
 800811e:	589a      	ldr	r2, [r3, r2]
    status = RegionNextChannel( MacCtx.NvmCtx->Region, &nextChan, &MacCtx.Channel, &dutyCycleTimeOff, &MacCtx.NvmCtx->AggregatedTimeOff );
 8008120:	7818      	ldrb	r0, [r3, #0]
 8008122:	33c9      	adds	r3, #201	; 0xc9
 8008124:	33ff      	adds	r3, #255	; 0xff
    nextChan.LastAggrTx = MacCtx.NvmCtx->LastTxDoneTime;
 8008126:	606a      	str	r2, [r5, #4]
    status = RegionNextChannel( MacCtx.NvmCtx->Region, &nextChan, &MacCtx.Channel, &dutyCycleTimeOff, &MacCtx.NvmCtx->AggregatedTimeOff );
 8008128:	0029      	movs	r1, r5
 800812a:	9300      	str	r3, [sp, #0]
 800812c:	4a65      	ldr	r2, [pc, #404]	; (80082c4 <ScheduleTx+0x240>)
 800812e:	ab04      	add	r3, sp, #16
 8008130:	f002 ff0b 	bl	800af4a <RegionNextChannel>
 8008134:	1e05      	subs	r5, r0, #0
    if( status != LORAMAC_STATUS_OK )
 8008136:	d01c      	beq.n	8008172 <ScheduleTx+0xee>
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 8008138:	280b      	cmp	r0, #11
 800813a:	d113      	bne.n	8008164 <ScheduleTx+0xe0>
 800813c:	9b03      	ldr	r3, [sp, #12]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d010      	beq.n	8008164 <ScheduleTx+0xe0>
            return LORAMAC_STATUS_OK;
 8008142:	2500      	movs	r5, #0
            if( dutyCycleTimeOff != 0 )
 8008144:	9904      	ldr	r1, [sp, #16]
 8008146:	42a9      	cmp	r1, r5
 8008148:	d00c      	beq.n	8008164 <ScheduleTx+0xe0>
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 800814a:	22d0      	movs	r2, #208	; 0xd0
 800814c:	2320      	movs	r3, #32
 800814e:	0092      	lsls	r2, r2, #2
 8008150:	58a0      	ldr	r0, [r4, r2]
 8008152:	4303      	orrs	r3, r0
 8008154:	50a3      	str	r3, [r4, r2]
                TimerSetValue( &MacCtx.TxDelayedTimer, dutyCycleTimeOff );
 8008156:	4c5c      	ldr	r4, [pc, #368]	; (80082c8 <ScheduleTx+0x244>)
 8008158:	0020      	movs	r0, r4
 800815a:	f004 fc47 	bl	800c9ec <TimerSetValue>
                TimerStart( &MacCtx.TxDelayedTimer );
 800815e:	0020      	movs	r0, r4
 8008160:	f004 fb9c 	bl	800c89c <TimerStart>
}
 8008164:	0028      	movs	r0, r5
 8008166:	b00b      	add	sp, #44	; 0x2c
 8008168:	bdf0      	pop	{r4, r5, r6, r7, pc}
        calcBackOff.Joined = true;
 800816a:	2201      	movs	r2, #1
 800816c:	e79b      	b.n	80080a6 <ScheduleTx+0x22>
        nextChan.Joined = true;
 800816e:	2201      	movs	r2, #1
 8008170:	e7d2      	b.n	8008118 <ScheduleTx+0x94>
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8008172:	59a1      	ldr	r1, [r4, r6]
                                     RegionApplyDrOffset( MacCtx.NvmCtx->Region, MacCtx.NvmCtx->MacParams.DownlinkDwellTime, MacCtx.NvmCtx->MacParams.ChannelsDatarate, MacCtx.NvmCtx->MacParams.Rx1DrOffset ),
 8008174:	202e      	movs	r0, #46	; 0x2e
 8008176:	000b      	movs	r3, r1
 8008178:	000a      	movs	r2, r1
 800817a:	33ff      	adds	r3, #255	; 0xff
 800817c:	32f9      	adds	r2, #249	; 0xf9
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800817e:	780d      	ldrb	r5, [r1, #0]
                                     RegionApplyDrOffset( MacCtx.NvmCtx->Region, MacCtx.NvmCtx->MacParams.DownlinkDwellTime, MacCtx.NvmCtx->MacParams.ChannelsDatarate, MacCtx.NvmCtx->MacParams.Rx1DrOffset ),
 8008180:	7e9b      	ldrb	r3, [r3, #26]
 8008182:	7812      	ldrb	r2, [r2, #0]
 8008184:	30ff      	adds	r0, #255	; 0xff
 8008186:	5c09      	ldrb	r1, [r1, r0]
 8008188:	b25b      	sxtb	r3, r3
 800818a:	b252      	sxtb	r2, r2
 800818c:	0028      	movs	r0, r5
 800818e:	f002 fef0 	bl	800af72 <RegionApplyDrOffset>
                                     MacCtx.NvmCtx->MacParams.MinRxSymbols,
 8008192:	59a3      	ldr	r3, [r4, r6]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8008194:	b241      	sxtb	r1, r0
 8008196:	001f      	movs	r7, r3
 8008198:	33ff      	adds	r3, #255	; 0xff
 800819a:	785a      	ldrb	r2, [r3, #1]
 800819c:	4b4b      	ldr	r3, [pc, #300]	; (80082cc <ScheduleTx+0x248>)
 800819e:	37fc      	adds	r7, #252	; 0xfc
 80081a0:	9300      	str	r3, [sp, #0]
 80081a2:	0028      	movs	r0, r5
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	f002 fe69 	bl	800ae7c <RegionComputeRxWindowParameters>
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 80081aa:	59a3      	ldr	r3, [r4, r6]
                                     MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate,
 80081ac:	2190      	movs	r1, #144	; 0x90
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 80081ae:	001a      	movs	r2, r3
 80081b0:	001d      	movs	r5, r3
                                     MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate,
 80081b2:	0049      	lsls	r1, r1, #1
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 80081b4:	5659      	ldrsb	r1, [r3, r1]
 80081b6:	7818      	ldrb	r0, [r3, #0]
 80081b8:	4b45      	ldr	r3, [pc, #276]	; (80082d0 <ScheduleTx+0x24c>)
 80081ba:	32ff      	adds	r2, #255	; 0xff
 80081bc:	7852      	ldrb	r2, [r2, #1]
 80081be:	35fc      	adds	r5, #252	; 0xfc
 80081c0:	9300      	str	r3, [sp, #0]
 80081c2:	682b      	ldr	r3, [r5, #0]
 80081c4:	f002 fe5a 	bl	800ae7c <RegionComputeRxWindowParameters>
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 80081c8:	22ea      	movs	r2, #234	; 0xea
 80081ca:	59a3      	ldr	r3, [r4, r6]
 80081cc:	0052      	lsls	r2, r2, #1
 80081ce:	5c9a      	ldrb	r2, [r3, r2]
 80081d0:	2a00      	cmp	r2, #0
 80081d2:	d121      	bne.n	8008218 <ScheduleTx+0x194>
        MacCtx.RxWindow1Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 80081d4:	22f1      	movs	r2, #241	; 0xf1
 80081d6:	33fc      	adds	r3, #252	; 0xfc
 80081d8:	0092      	lsls	r2, r2, #2
 80081da:	6959      	ldr	r1, [r3, #20]
 80081dc:	58a2      	ldr	r2, [r4, r2]
        MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 80081de:	699b      	ldr	r3, [r3, #24]
        MacCtx.RxWindow1Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 80081e0:	188a      	adds	r2, r1, r2
 80081e2:	21ec      	movs	r1, #236	; 0xec
 80081e4:	0089      	lsls	r1, r1, #2
 80081e6:	5062      	str	r2, [r4, r1]
        MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 80081e8:	22f6      	movs	r2, #246	; 0xf6
 80081ea:	0092      	lsls	r2, r2, #2
 80081ec:	58a2      	ldr	r2, [r4, r2]
    switch( MacCtx.TxMsg.Type )
 80081ee:	0025      	movs	r5, r4
        MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 80081f0:	189b      	adds	r3, r3, r2
 80081f2:	22ed      	movs	r2, #237	; 0xed
 80081f4:	0092      	lsls	r2, r2, #2
 80081f6:	50a3      	str	r3, [r4, r2]
    LoRaMacStatus_t retval = SecureFrame( MacCtx.NvmCtx->MacParams.ChannelsDatarate, MacCtx.Channel );
 80081f8:	59a3      	ldr	r3, [r4, r6]
 80081fa:	26f9      	movs	r6, #249	; 0xf9
 80081fc:	579e      	ldrsb	r6, [r3, r6]
    uint32_t fCntUp = 0;
 80081fe:	2300      	movs	r3, #0
    LoRaMacStatus_t retval = SecureFrame( MacCtx.NvmCtx->MacParams.ChannelsDatarate, MacCtx.Channel );
 8008200:	4a34      	ldr	r2, [pc, #208]	; (80082d4 <ScheduleTx+0x250>)
    switch( MacCtx.TxMsg.Type )
 8008202:	35ff      	adds	r5, #255	; 0xff
    LoRaMacStatus_t retval = SecureFrame( MacCtx.NvmCtx->MacParams.ChannelsDatarate, MacCtx.Channel );
 8008204:	5ca7      	ldrb	r7, [r4, r2]
    uint32_t fCntUp = 0;
 8008206:	9306      	str	r3, [sp, #24]
    switch( MacCtx.TxMsg.Type )
 8008208:	796b      	ldrb	r3, [r5, #5]
 800820a:	9203      	str	r2, [sp, #12]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d024      	beq.n	800825a <ScheduleTx+0x1d6>
 8008210:	2b04      	cmp	r3, #4
 8008212:	d02f      	beq.n	8008274 <ScheduleTx+0x1f0>
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8008214:	2503      	movs	r5, #3
 8008216:	e7a5      	b.n	8008164 <ScheduleTx+0xe0>
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8008218:	a805      	add	r0, sp, #20
 800821a:	f001 ff71 	bl	800a100 <LoRaMacCommandsGetSizeSerializedCmds>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800821e:	2513      	movs	r5, #19
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8008220:	2800      	cmp	r0, #0
 8008222:	d19f      	bne.n	8008164 <ScheduleTx+0xe0>
    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8008224:	20f9      	movs	r0, #249	; 0xf9
        if( ValidatePayloadLength( MacCtx.AppDataSize, MacCtx.NvmCtx->MacParams.ChannelsDatarate, macCmdsSize ) == false )
 8008226:	4b2c      	ldr	r3, [pc, #176]	; (80082d8 <ScheduleTx+0x254>)
 8008228:	5ce5      	ldrb	r5, [r4, r3]
 800822a:	9b05      	ldr	r3, [sp, #20]
 800822c:	b2df      	uxtb	r7, r3
 800822e:	59a3      	ldr	r3, [r4, r6]
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 8008230:	19ef      	adds	r7, r5, r7
    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8008232:	5618      	ldrsb	r0, [r3, r0]
 8008234:	f7fe ffd2 	bl	80071dc <GetMaxAppPayloadWithoutFOptsLength>
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 8008238:	b280      	uxth	r0, r0
            return LORAMAC_STATUS_LENGTH_ERROR;
 800823a:	2508      	movs	r5, #8
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 800823c:	42b8      	cmp	r0, r7
 800823e:	d200      	bcs.n	8008242 <ScheduleTx+0x1be>
 8008240:	e790      	b.n	8008164 <ScheduleTx+0xe0>
        MacCtx.RxWindow1Delay = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8008242:	22f1      	movs	r2, #241	; 0xf1
 8008244:	59a3      	ldr	r3, [r4, r6]
 8008246:	0092      	lsls	r2, r2, #2
 8008248:	33fc      	adds	r3, #252	; 0xfc
 800824a:	68d9      	ldr	r1, [r3, #12]
 800824c:	58a2      	ldr	r2, [r4, r2]
        MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800824e:	691b      	ldr	r3, [r3, #16]
        MacCtx.RxWindow1Delay = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8008250:	188a      	adds	r2, r1, r2
 8008252:	21ec      	movs	r1, #236	; 0xec
 8008254:	0089      	lsls	r1, r1, #2
 8008256:	5062      	str	r2, [r4, r1]
 8008258:	e7c6      	b.n	80081e8 <ScheduleTx+0x164>
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800825a:	4820      	ldr	r0, [pc, #128]	; (80082dc <ScheduleTx+0x258>)
 800825c:	f002 fa78 	bl	800a750 <LoRaMacCryptoPrepareJoinRequest>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8008260:	2800      	cmp	r0, #0
 8008262:	d126      	bne.n	80082b2 <ScheduleTx+0x22e>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8008264:	7b6b      	ldrb	r3, [r5, #13]
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8008266:	8023      	strh	r3, [r4, #0]
    return SendFrameOnChannel( MacCtx.Channel );
 8008268:	9b03      	ldr	r3, [sp, #12]
 800826a:	5ce0      	ldrb	r0, [r4, r3]
 800826c:	f7ff fe7e 	bl	8007f6c <SendFrameOnChannel>
 8008270:	0005      	movs	r5, r0
 8008272:	e777      	b.n	8008164 <ScheduleTx+0xe0>
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8008274:	a806      	add	r0, sp, #24
 8008276:	f002 fa0b 	bl	800a690 <LoRaMacCryptoGetFCntUp>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800827a:	2512      	movs	r5, #18
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800827c:	2800      	cmp	r0, #0
 800827e:	d000      	beq.n	8008282 <ScheduleTx+0x1fe>
 8008280:	e770      	b.n	8008164 <ScheduleTx+0xe0>
            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
 8008282:	2382      	movs	r3, #130	; 0x82
 8008284:	00db      	lsls	r3, r3, #3
 8008286:	5ce3      	ldrb	r3, [r4, r3]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d103      	bne.n	8008294 <ScheduleTx+0x210>
 800828c:	4b14      	ldr	r3, [pc, #80]	; (80082e0 <ScheduleTx+0x25c>)
 800828e:	5ce3      	ldrb	r3, [r4, r3]
 8008290:	2b01      	cmp	r3, #1
 8008292:	d902      	bls.n	800829a <ScheduleTx+0x216>
                fCntUp -= 1;
 8008294:	9b06      	ldr	r3, [sp, #24]
 8008296:	3b01      	subs	r3, #1
 8008298:	9306      	str	r3, [sp, #24]
            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 800829a:	b2f1      	uxtb	r1, r6
 800829c:	4b0f      	ldr	r3, [pc, #60]	; (80082dc <ScheduleTx+0x258>)
 800829e:	003a      	movs	r2, r7
 80082a0:	9806      	ldr	r0, [sp, #24]
 80082a2:	f002 fa85 	bl	800a7b0 <LoRaMacCryptoSecureMessage>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 80082a6:	2800      	cmp	r0, #0
 80082a8:	d103      	bne.n	80082b2 <ScheduleTx+0x22e>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 80082aa:	0023      	movs	r3, r4
 80082ac:	33ff      	adds	r3, #255	; 0xff
 80082ae:	7b5b      	ldrb	r3, [r3, #13]
 80082b0:	e7d9      	b.n	8008266 <ScheduleTx+0x1e2>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80082b2:	2511      	movs	r5, #17
 80082b4:	e756      	b.n	8008164 <ScheduleTx+0xe0>
 80082b6:	46c0      	nop			; (mov r8, r8)
 80082b8:	2000091c 	.word	0x2000091c
 80082bc:	00000484 	.word	0x00000484
 80082c0:	00000481 	.word	0x00000481
 80082c4:	20000d31 	.word	0x20000d31
 80082c8:	20000c84 	.word	0x20000c84
 80082cc:	20000cd4 	.word	0x20000cd4
 80082d0:	20000ce8 	.word	0x20000ce8
 80082d4:	00000415 	.word	0x00000415
 80082d8:	00000237 	.word	0x00000237
 80082dc:	20000a24 	.word	0x20000a24
 80082e0:	00000412 	.word	0x00000412

080082e4 <OnTxDelayedTimerEvent>:
{
 80082e4:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.TxDelayedTimer );
 80082e6:	4811      	ldr	r0, [pc, #68]	; (800832c <OnTxDelayedTimerEvent+0x48>)
 80082e8:	f004 fb54 	bl	800c994 <TimerStop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 80082ec:	22d0      	movs	r2, #208	; 0xd0
 80082ee:	2320      	movs	r3, #32
 80082f0:	4c0f      	ldr	r4, [pc, #60]	; (8008330 <OnTxDelayedTimerEvent+0x4c>)
 80082f2:	0092      	lsls	r2, r2, #2
 80082f4:	58a1      	ldr	r1, [r4, r2]
    switch( ScheduleTx( true ) )
 80082f6:	2001      	movs	r0, #1
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 80082f8:	4399      	bics	r1, r3
 80082fa:	50a1      	str	r1, [r4, r2]
    switch( ScheduleTx( true ) )
 80082fc:	f7ff fec2 	bl	8008084 <ScheduleTx>
 8008300:	2800      	cmp	r0, #0
 8008302:	d012      	beq.n	800832a <OnTxDelayedTimerEvent+0x46>
 8008304:	280b      	cmp	r0, #11
 8008306:	d010      	beq.n	800832a <OnTxDelayedTimerEvent+0x46>
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 8008308:	2009      	movs	r0, #9
            MacCtx.McpsConfirm.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800830a:	4b0a      	ldr	r3, [pc, #40]	; (8008334 <OnTxDelayedTimerEvent+0x50>)
 800830c:	58e3      	ldr	r3, [r4, r3]
 800830e:	33f9      	adds	r3, #249	; 0xf9
 8008310:	781a      	ldrb	r2, [r3, #0]
 8008312:	4b09      	ldr	r3, [pc, #36]	; (8008338 <OnTxDelayedTimerEvent+0x54>)
 8008314:	54e2      	strb	r2, [r4, r3]
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 8008316:	4b09      	ldr	r3, [pc, #36]	; (800833c <OnTxDelayedTimerEvent+0x58>)
 8008318:	5ce2      	ldrb	r2, [r4, r3]
 800831a:	4b09      	ldr	r3, [pc, #36]	; (8008340 <OnTxDelayedTimerEvent+0x5c>)
 800831c:	54e2      	strb	r2, [r4, r3]
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 800831e:	4b09      	ldr	r3, [pc, #36]	; (8008344 <OnTxDelayedTimerEvent+0x60>)
 8008320:	54e0      	strb	r0, [r4, r3]
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 8008322:	f001 ffd1 	bl	800a2c8 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 8008326:	f7fe fef7 	bl	8007118 <StopRetransmission>
}
 800832a:	bd10      	pop	{r4, pc}
 800832c:	20000c84 	.word	0x20000c84
 8008330:	2000091c 	.word	0x2000091c
 8008334:	00000484 	.word	0x00000484
 8008338:	0000043e 	.word	0x0000043e
 800833c:	00000412 	.word	0x00000412
 8008340:	00000441 	.word	0x00000441
 8008344:	0000043d 	.word	0x0000043d

08008348 <Send>:
{
 8008348:	b5f0      	push	{r4, r5, r6, r7, lr}
 800834a:	b091      	sub	sp, #68	; 0x44
 800834c:	9307      	str	r3, [sp, #28]
    int8_t datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800834e:	4c47      	ldr	r4, [pc, #284]	; (800846c <Send+0x124>)
 8008350:	4b47      	ldr	r3, [pc, #284]	; (8008470 <Send+0x128>)
{
 8008352:	9105      	str	r1, [sp, #20]
    int8_t datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8008354:	5919      	ldr	r1, [r3, r4]
{
 8008356:	9004      	str	r0, [sp, #16]
    int8_t datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8008358:	000b      	movs	r3, r1
{
 800835a:	9206      	str	r2, [sp, #24]
    int8_t datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800835c:	33f9      	adds	r3, #249	; 0xf9
 800835e:	781b      	ldrb	r3, [r3, #0]
    int8_t txPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 8008360:	2700      	movs	r7, #0
    int8_t datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8008362:	b25b      	sxtb	r3, r3
 8008364:	9303      	str	r3, [sp, #12]
    int8_t txPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 8008366:	000b      	movs	r3, r1
 8008368:	33f8      	adds	r3, #248	; 0xf8
 800836a:	57df      	ldrsb	r7, [r3, r7]
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 800836c:	3b04      	subs	r3, #4
 800836e:	681d      	ldr	r5, [r3, #0]
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 8008370:	23ea      	movs	r3, #234	; 0xea
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 8008372:	950a      	str	r5, [sp, #40]	; 0x28
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 8008374:	005b      	lsls	r3, r3, #1
 8008376:	5ccb      	ldrb	r3, [r1, r3]
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 8008378:	2607      	movs	r6, #7
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 800837a:	2b00      	cmp	r3, #0
 800837c:	d063      	beq.n	8008446 <Send+0xfe>
    if( MacCtx.NvmCtx->MaxDCycle == 0 )
 800837e:	239e      	movs	r3, #158	; 0x9e
 8008380:	005b      	lsls	r3, r3, #1
 8008382:	5ccb      	ldrb	r3, [r1, r3]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d102      	bne.n	800838e <Send+0x46>
        MacCtx.NvmCtx->AggregatedTimeOff = 0;
 8008388:	22e4      	movs	r2, #228	; 0xe4
 800838a:	0052      	lsls	r2, r2, #1
 800838c:	508b      	str	r3, [r1, r2]
    fCtrl.Bits.FOptsLen      = 0;
 800838e:	2300      	movs	r3, #0
 8008390:	aa09      	add	r2, sp, #36	; 0x24
 8008392:	7013      	strb	r3, [r2, #0]
    fCtrl.Bits.Adr           = MacCtx.NvmCtx->AdrCtrlOn;
 8008394:	000b      	movs	r3, r1
 8008396:	33f2      	adds	r3, #242	; 0xf2
 8008398:	781b      	ldrb	r3, [r3, #0]
 800839a:	2010      	movs	r0, #16
 800839c:	469c      	mov	ip, r3
 800839e:	01db      	lsls	r3, r3, #7
 80083a0:	7013      	strb	r3, [r2, #0]
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 80083a2:	000b      	movs	r3, r1
 80083a4:	33f0      	adds	r3, #240	; 0xf0
 80083a6:	781e      	ldrb	r6, [r3, #0]
 80083a8:	7813      	ldrb	r3, [r2, #0]
 80083aa:	2e01      	cmp	r6, #1
 80083ac:	d14e      	bne.n	800844c <Send+0x104>
        fCtrl.Bits.FPending      = 1;
 80083ae:	4303      	orrs	r3, r0
        fCtrl.Bits.FPending      = 0;
 80083b0:	7013      	strb	r3, [r2, #0]
    if( MacCtx.NvmCtx->SrvAckRequested == true )
 80083b2:	23e0      	movs	r3, #224	; 0xe0
 80083b4:	005b      	lsls	r3, r3, #1
 80083b6:	5ccb      	ldrb	r3, [r1, r3]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d004      	beq.n	80083c6 <Send+0x7e>
        fCtrl.Bits.Ack = 1;
 80083bc:	2320      	movs	r3, #32
 80083be:	aa09      	add	r2, sp, #36	; 0x24
 80083c0:	7810      	ldrb	r0, [r2, #0]
 80083c2:	4303      	orrs	r3, r0
 80083c4:	7013      	strb	r3, [r2, #0]
    adrNext.Version = MacCtx.NvmCtx->Version;
 80083c6:	23e8      	movs	r3, #232	; 0xe8
 80083c8:	005b      	lsls	r3, r3, #1
 80083ca:	58cb      	ldr	r3, [r1, r3]
 80083cc:	a80b      	add	r0, sp, #44	; 0x2c
 80083ce:	930b      	str	r3, [sp, #44]	; 0x2c
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 80083d0:	4663      	mov	r3, ip
    adrNext.UpdateChanMask = true;
 80083d2:	2601      	movs	r6, #1
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 80083d4:	7143      	strb	r3, [r0, #5]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 80083d6:	23fd      	movs	r3, #253	; 0xfd
    adrNext.AdrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 80083d8:	6085      	str	r5, [r0, #8]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 80083da:	4d25      	ldr	r5, [pc, #148]	; (8008470 <Send+0x128>)
    adrNext.UpdateChanMask = true;
 80083dc:	7106      	strb	r6, [r0, #4]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 80083de:	009b      	lsls	r3, r3, #2
 80083e0:	5aeb      	ldrh	r3, [r5, r3]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &MacCtx.NvmCtx->MacParams.ChannelsDatarate,
 80083e2:	000a      	movs	r2, r1
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 80083e4:	8183      	strh	r3, [r0, #12]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 80083e6:	4b23      	ldr	r3, [pc, #140]	; (8008474 <Send+0x12c>)
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &MacCtx.NvmCtx->MacParams.ChannelsDatarate,
 80083e8:	32f8      	adds	r2, #248	; 0xf8
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 80083ea:	5aeb      	ldrh	r3, [r5, r3]
    adrNext.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 80083ec:	7447      	strb	r7, [r0, #17]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 80083ee:	81c3      	strh	r3, [r0, #14]
    adrNext.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 80083f0:	9b03      	ldr	r3, [sp, #12]
 80083f2:	7403      	strb	r3, [r0, #16]
    adrNext.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 80083f4:	2396      	movs	r3, #150	; 0x96
 80083f6:	005b      	lsls	r3, r3, #1
 80083f8:	5ccb      	ldrb	r3, [r1, r3]
 80083fa:	7483      	strb	r3, [r0, #18]
    adrNext.Region = MacCtx.NvmCtx->Region;
 80083fc:	780b      	ldrb	r3, [r1, #0]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &MacCtx.NvmCtx->MacParams.ChannelsDatarate,
 80083fe:	31f9      	adds	r1, #249	; 0xf9
    adrNext.Region = MacCtx.NvmCtx->Region;
 8008400:	74c3      	strb	r3, [r0, #19]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &MacCtx.NvmCtx->MacParams.ChannelsDatarate,
 8008402:	ab0a      	add	r3, sp, #40	; 0x28
 8008404:	f001 fd0e 	bl	8009e24 <LoRaMacAdrCalcNext>
 8008408:	2340      	movs	r3, #64	; 0x40
 800840a:	a909      	add	r1, sp, #36	; 0x24
 800840c:	4030      	ands	r0, r6
 800840e:	780e      	ldrb	r6, [r1, #0]
 8008410:	0180      	lsls	r0, r0, #6
 8008412:	439e      	bics	r6, r3
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 8008414:	9b07      	ldr	r3, [sp, #28]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &MacCtx.NvmCtx->MacParams.ChannelsDatarate,
 8008416:	4306      	orrs	r6, r0
 8008418:	700e      	strb	r6, [r1, #0]
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 800841a:	9a05      	ldr	r2, [sp, #20]
 800841c:	9300      	str	r3, [sp, #0]
 800841e:	9804      	ldr	r0, [sp, #16]
 8008420:	9b06      	ldr	r3, [sp, #24]
 8008422:	f7ff fcdd 	bl	8007de0 <PrepareFrame>
 8008426:	1e06      	subs	r6, r0, #0
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 8008428:	d001      	beq.n	800842e <Send+0xe6>
 800842a:	280a      	cmp	r0, #10
 800842c:	d104      	bne.n	8008438 <Send+0xf0>
        status = ScheduleTx( false );
 800842e:	2000      	movs	r0, #0
 8008430:	f7ff fe28 	bl	8008084 <ScheduleTx>
 8008434:	1e06      	subs	r6, r0, #0
    if( status != LORAMAC_STATUS_OK )
 8008436:	d00b      	beq.n	8008450 <Send+0x108>
        MacCtx.NvmCtx->MacParams.ChannelsDatarate = datarate;
 8008438:	592b      	ldr	r3, [r5, r4]
 800843a:	9903      	ldr	r1, [sp, #12]
 800843c:	001a      	movs	r2, r3
        MacCtx.NvmCtx->MacParams.ChannelsTxPower = txPower;
 800843e:	33f8      	adds	r3, #248	; 0xf8
        MacCtx.NvmCtx->MacParams.ChannelsDatarate = datarate;
 8008440:	32f9      	adds	r2, #249	; 0xf9
 8008442:	7011      	strb	r1, [r2, #0]
        MacCtx.NvmCtx->MacParams.ChannelsTxPower = txPower;
 8008444:	701f      	strb	r7, [r3, #0]
}
 8008446:	0030      	movs	r0, r6
 8008448:	b011      	add	sp, #68	; 0x44
 800844a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        fCtrl.Bits.FPending      = 0;
 800844c:	4383      	bics	r3, r0
 800844e:	e7af      	b.n	80083b0 <Send+0x68>
        MacCtx.NvmCtx->SrvAckRequested = false;
 8008450:	22e0      	movs	r2, #224	; 0xe0
 8008452:	592b      	ldr	r3, [r5, r4]
 8008454:	0052      	lsls	r2, r2, #1
 8008456:	5498      	strb	r0, [r3, r2]
        MacCtx.NvmCtx->AdrAckCounter = adrAckCounter;
 8008458:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800845a:	33f4      	adds	r3, #244	; 0xf4
 800845c:	601a      	str	r2, [r3, #0]
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 800845e:	f001 fe1f 	bl	800a0a0 <LoRaMacCommandsRemoveNoneStickyCmds>
 8008462:	2800      	cmp	r0, #0
 8008464:	d0ef      	beq.n	8008446 <Send+0xfe>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8008466:	2613      	movs	r6, #19
 8008468:	e7ed      	b.n	8008446 <Send+0xfe>
 800846a:	46c0      	nop			; (mov r8, r8)
 800846c:	00000484 	.word	0x00000484
 8008470:	2000091c 	.word	0x2000091c
 8008474:	000003f6 	.word	0x000003f6

08008478 <SendReJoinReq>:
{
 8008478:	b570      	push	{r4, r5, r6, lr}
 800847a:	0005      	movs	r5, r0
    macHdr.Value = 0;
 800847c:	2400      	movs	r4, #0
    bool allowDelayedTx = true;
 800847e:	2001      	movs	r0, #1
    switch( joinReqType )
 8008480:	2dff      	cmp	r5, #255	; 0xff
 8008482:	d11a      	bne.n	80084ba <SendReJoinReq+0x42>
            SwitchClass( CLASS_A );
 8008484:	0020      	movs	r0, r4
 8008486:	f7ff f8d7 	bl	8007638 <SwitchClass>
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 800848a:	4b0d      	ldr	r3, [pc, #52]	; (80084c0 <SendReJoinReq+0x48>)
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 800848c:	490d      	ldr	r1, [pc, #52]	; (80084c4 <SendReJoinReq+0x4c>)
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 800848e:	001a      	movs	r2, r3
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 8008490:	33fc      	adds	r3, #252	; 0xfc
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 8008492:	32ff      	adds	r2, #255	; 0xff
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 8008494:	60d9      	str	r1, [r3, #12]
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 8008496:	7154      	strb	r4, [r2, #5]
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8008498:	7355      	strb	r5, [r2, #13]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 800849a:	7394      	strb	r4, [r2, #14]
            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
 800849c:	f7fe fe12 	bl	80070c4 <SecureElementGetJoinEui>
 80084a0:	2208      	movs	r2, #8
 80084a2:	0001      	movs	r1, r0
 80084a4:	4808      	ldr	r0, [pc, #32]	; (80084c8 <SendReJoinReq+0x50>)
 80084a6:	f004 fb66 	bl	800cb76 <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
 80084aa:	f7fe fdf5 	bl	8007098 <SecureElementGetDevEui>
 80084ae:	2208      	movs	r2, #8
 80084b0:	0001      	movs	r1, r0
 80084b2:	4806      	ldr	r0, [pc, #24]	; (80084cc <SendReJoinReq+0x54>)
 80084b4:	f004 fb5f 	bl	800cb76 <memcpy1>
            allowDelayedTx = false;
 80084b8:	0020      	movs	r0, r4
    status = ScheduleTx( allowDelayedTx );
 80084ba:	f7ff fde3 	bl	8008084 <ScheduleTx>
}
 80084be:	bd70      	pop	{r4, r5, r6, pc}
 80084c0:	2000091c 	.word	0x2000091c
 80084c4:	2000091e 	.word	0x2000091e
 80084c8:	20000a2a 	.word	0x20000a2a
 80084cc:	20000a32 	.word	0x20000a32

080084d0 <SetTxContinuousWave>:
{
 80084d0:	b510      	push	{r4, lr}
    continuousWave.Channel = MacCtx.Channel;
 80084d2:	4b13      	ldr	r3, [pc, #76]	; (8008520 <SetTxContinuousWave+0x50>)
 80084d4:	4c13      	ldr	r4, [pc, #76]	; (8008524 <SetTxContinuousWave+0x54>)
{
 80084d6:	b086      	sub	sp, #24
    continuousWave.Channel = MacCtx.Channel;
 80084d8:	5ce3      	ldrb	r3, [r4, r3]
 80084da:	aa02      	add	r2, sp, #8
 80084dc:	7013      	strb	r3, [r2, #0]
    continuousWave.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 80084de:	4b12      	ldr	r3, [pc, #72]	; (8008528 <SetTxContinuousWave+0x58>)
 80084e0:	a902      	add	r1, sp, #8
 80084e2:	58e3      	ldr	r3, [r4, r3]
 80084e4:	001a      	movs	r2, r3
 80084e6:	32f9      	adds	r2, #249	; 0xf9
 80084e8:	7812      	ldrb	r2, [r2, #0]
 80084ea:	704a      	strb	r2, [r1, #1]
    continuousWave.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 80084ec:	001a      	movs	r2, r3
 80084ee:	32f8      	adds	r2, #248	; 0xf8
 80084f0:	7812      	ldrb	r2, [r2, #0]
 80084f2:	708a      	strb	r2, [r1, #2]
    continuousWave.MaxEirp = MacCtx.NvmCtx->MacParams.MaxEirp;
 80084f4:	001a      	movs	r2, r3
 80084f6:	32fc      	adds	r2, #252	; 0xfc
 80084f8:	6b51      	ldr	r1, [r2, #52]	; 0x34
    continuousWave.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 80084fa:	6b92      	ldr	r2, [r2, #56]	; 0x38
    continuousWave.MaxEirp = MacCtx.NvmCtx->MacParams.MaxEirp;
 80084fc:	9103      	str	r1, [sp, #12]
    continuousWave.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 80084fe:	9201      	str	r2, [sp, #4]
 8008500:	9204      	str	r2, [sp, #16]
    continuousWave.Timeout = timeout;
 8008502:	aa02      	add	r2, sp, #8
 8008504:	8190      	strh	r0, [r2, #12]
    RegionSetContinuousWave( MacCtx.NvmCtx->Region, &continuousWave );
 8008506:	0011      	movs	r1, r2
 8008508:	7818      	ldrb	r0, [r3, #0]
 800850a:	f002 fd2b 	bl	800af64 <RegionSetContinuousWave>
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800850e:	22d0      	movs	r2, #208	; 0xd0
 8008510:	2302      	movs	r3, #2
}
 8008512:	2000      	movs	r0, #0
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8008514:	0092      	lsls	r2, r2, #2
 8008516:	58a1      	ldr	r1, [r4, r2]
 8008518:	430b      	orrs	r3, r1
 800851a:	50a3      	str	r3, [r4, r2]
}
 800851c:	b006      	add	sp, #24
 800851e:	bd10      	pop	{r4, pc}
 8008520:	00000415 	.word	0x00000415
 8008524:	2000091c 	.word	0x2000091c
 8008528:	00000484 	.word	0x00000484

0800852c <SetTxContinuousWave1>:
{
 800852c:	b510      	push	{r4, lr}
 800852e:	0004      	movs	r4, r0
    Radio.SetTxContinuousWave( frequency, power, timeout );
 8008530:	4b07      	ldr	r3, [pc, #28]	; (8008550 <SetTxContinuousWave1+0x24>)
{
 8008532:	0008      	movs	r0, r1
    Radio.SetTxContinuousWave( frequency, power, timeout );
 8008534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008536:	b251      	sxtb	r1, r2
 8008538:	0022      	movs	r2, r4
 800853a:	4798      	blx	r3
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800853c:	22d0      	movs	r2, #208	; 0xd0
 800853e:	2302      	movs	r3, #2
 8008540:	4904      	ldr	r1, [pc, #16]	; (8008554 <SetTxContinuousWave1+0x28>)
 8008542:	0092      	lsls	r2, r2, #2
 8008544:	5888      	ldr	r0, [r1, r2]
 8008546:	4303      	orrs	r3, r0
 8008548:	508b      	str	r3, [r1, r2]
}
 800854a:	2000      	movs	r0, #0
 800854c:	bd10      	pop	{r4, pc}
 800854e:	46c0      	nop			; (mov r8, r8)
 8008550:	0800eaa4 	.word	0x0800eaa4
 8008554:	2000091c 	.word	0x2000091c

08008558 <GetCtxs>:
{
 8008558:	b513      	push	{r0, r1, r4, lr}
    Contexts.MacNvmCtx = &NvmMacCtx;
 800855a:	4b14      	ldr	r3, [pc, #80]	; (80085ac <GetCtxs+0x54>)
 800855c:	4c14      	ldr	r4, [pc, #80]	; (80085b0 <GetCtxs+0x58>)
    Contexts.CryptoNvmCtx = LoRaMacCryptoGetNvmCtx( &Contexts.CryptoNvmCtxSize );
 800855e:	4815      	ldr	r0, [pc, #84]	; (80085b4 <GetCtxs+0x5c>)
    Contexts.MacNvmCtx = &NvmMacCtx;
 8008560:	6023      	str	r3, [r4, #0]
    Contexts.MacNvmCtxSize = sizeof( NvmMacCtx );
 8008562:	23ee      	movs	r3, #238	; 0xee
 8008564:	005b      	lsls	r3, r3, #1
 8008566:	6063      	str	r3, [r4, #4]
    Contexts.CryptoNvmCtx = LoRaMacCryptoGetNvmCtx( &Contexts.CryptoNvmCtxSize );
 8008568:	f002 f88a 	bl	800a680 <LoRaMacCryptoGetNvmCtx>
    GetNvmCtxParams_t params ={ 0 };
 800856c:	2300      	movs	r3, #0
    Contexts.RegionNvmCtx = RegionGetNvmCtx( MacCtx.NvmCtx->Region, &params );
 800856e:	4a12      	ldr	r2, [pc, #72]	; (80085b8 <GetCtxs+0x60>)
    GetNvmCtxParams_t params ={ 0 };
 8008570:	9301      	str	r3, [sp, #4]
    Contexts.RegionNvmCtx = RegionGetNvmCtx( MacCtx.NvmCtx->Region, &params );
 8008572:	4b12      	ldr	r3, [pc, #72]	; (80085bc <GetCtxs+0x64>)
 8008574:	a901      	add	r1, sp, #4
 8008576:	58d3      	ldr	r3, [r2, r3]
    Contexts.CryptoNvmCtx = LoRaMacCryptoGetNvmCtx( &Contexts.CryptoNvmCtxSize );
 8008578:	6120      	str	r0, [r4, #16]
    Contexts.RegionNvmCtx = RegionGetNvmCtx( MacCtx.NvmCtx->Region, &params );
 800857a:	7818      	ldrb	r0, [r3, #0]
 800857c:	f002 fc5a 	bl	800ae34 <RegionGetNvmCtx>
    Contexts.RegionNvmCtxSize = params.nvmCtxSize;
 8008580:	9b01      	ldr	r3, [sp, #4]
    Contexts.RegionNvmCtx = RegionGetNvmCtx( MacCtx.NvmCtx->Region, &params );
 8008582:	60a0      	str	r0, [r4, #8]
    Contexts.SecureElementNvmCtx = SecureElementGetNvmCtx( &Contexts.SecureElementNvmCtxSize );
 8008584:	480e      	ldr	r0, [pc, #56]	; (80085c0 <GetCtxs+0x68>)
    Contexts.RegionNvmCtxSize = params.nvmCtxSize;
 8008586:	60e3      	str	r3, [r4, #12]
    Contexts.SecureElementNvmCtx = SecureElementGetNvmCtx( &Contexts.SecureElementNvmCtxSize );
 8008588:	f7fe fc86 	bl	8006e98 <SecureElementGetNvmCtx>
 800858c:	61a0      	str	r0, [r4, #24]
    Contexts.CommandsNvmCtx = LoRaMacCommandsGetNvmCtx( &Contexts.CommandsNvmCtxSize );
 800858e:	480d      	ldr	r0, [pc, #52]	; (80085c4 <GetCtxs+0x6c>)
 8008590:	f001 fd06 	bl	8009fa0 <LoRaMacCommandsGetNvmCtx>
 8008594:	6220      	str	r0, [r4, #32]
    Contexts.ClassBNvmCtx = LoRaMacClassBGetNvmCtx( &Contexts.ClassBNvmCtxSize );
 8008596:	480c      	ldr	r0, [pc, #48]	; (80085c8 <GetCtxs+0x70>)
 8008598:	f001 fcad 	bl	8009ef6 <LoRaMacClassBGetNvmCtx>
 800859c:	62a0      	str	r0, [r4, #40]	; 0x28
    Contexts.ConfirmQueueNvmCtx = LoRaMacConfirmQueueGetNvmCtx( &Contexts.ConfirmQueueNvmCtxSize );
 800859e:	480b      	ldr	r0, [pc, #44]	; (80085cc <GetCtxs+0x74>)
 80085a0:	f001 fe1c 	bl	800a1dc <LoRaMacConfirmQueueGetNvmCtx>
 80085a4:	6320      	str	r0, [r4, #48]	; 0x30
}
 80085a6:	0020      	movs	r0, r4
 80085a8:	bd16      	pop	{r1, r2, r4, pc}
 80085aa:	46c0      	nop			; (mov r8, r8)
 80085ac:	20000740 	.word	0x20000740
 80085b0:	200015f0 	.word	0x200015f0
 80085b4:	20001604 	.word	0x20001604
 80085b8:	2000091c 	.word	0x2000091c
 80085bc:	00000484 	.word	0x00000484
 80085c0:	2000160c 	.word	0x2000160c
 80085c4:	20001614 	.word	0x20001614
 80085c8:	2000161c 	.word	0x2000161c
 80085cc:	20001624 	.word	0x20001624

080085d0 <RestoreCtxs>:
{
 80085d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80085d2:	2303      	movs	r3, #3
{
 80085d4:	1e04      	subs	r4, r0, #0
    if( contexts == NULL )
 80085d6:	d01f      	beq.n	8008618 <RestoreCtxs+0x48>
    if( MacCtx.MacState != LORAMAC_STOPPED )
 80085d8:	23d0      	movs	r3, #208	; 0xd0
 80085da:	4d1d      	ldr	r5, [pc, #116]	; (8008650 <RestoreCtxs+0x80>)
 80085dc:	009b      	lsls	r3, r3, #2
 80085de:	58ea      	ldr	r2, [r5, r3]
        return LORAMAC_STATUS_BUSY;
 80085e0:	2301      	movs	r3, #1
    if( MacCtx.MacState != LORAMAC_STOPPED )
 80085e2:	429a      	cmp	r2, r3
 80085e4:	d118      	bne.n	8008618 <RestoreCtxs+0x48>
    if( contexts->MacNvmCtx != NULL )
 80085e6:	6801      	ldr	r1, [r0, #0]
 80085e8:	2900      	cmp	r1, #0
 80085ea:	d004      	beq.n	80085f6 <RestoreCtxs+0x26>
        memcpy1( ( uint8_t* ) &NvmMacCtx, ( uint8_t* ) contexts->MacNvmCtx, contexts->MacNvmCtxSize );
 80085ec:	6843      	ldr	r3, [r0, #4]
 80085ee:	4819      	ldr	r0, [pc, #100]	; (8008654 <RestoreCtxs+0x84>)
 80085f0:	b29a      	uxth	r2, r3
 80085f2:	f004 fac0 	bl	800cb76 <memcpy1>
    params.Type = INIT_TYPE_RESTORE_CTX;
 80085f6:	2302      	movs	r3, #2
 80085f8:	466a      	mov	r2, sp
 80085fa:	7113      	strb	r3, [r2, #4]
    params.NvmCtx = contexts->RegionNvmCtx;
 80085fc:	68a3      	ldr	r3, [r4, #8]
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 80085fe:	4669      	mov	r1, sp
    params.NvmCtx = contexts->RegionNvmCtx;
 8008600:	9300      	str	r3, [sp, #0]
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 8008602:	4b15      	ldr	r3, [pc, #84]	; (8008658 <RestoreCtxs+0x88>)
 8008604:	58eb      	ldr	r3, [r5, r3]
 8008606:	7818      	ldrb	r0, [r3, #0]
 8008608:	f002 fc0d 	bl	800ae26 <RegionInitDefaults>
    if( SecureElementRestoreNvmCtx( contexts->SecureElementNvmCtx ) != SECURE_ELEMENT_SUCCESS )
 800860c:	69a0      	ldr	r0, [r4, #24]
 800860e:	f7fe fc35 	bl	8006e7c <SecureElementRestoreNvmCtx>
 8008612:	2800      	cmp	r0, #0
 8008614:	d002      	beq.n	800861c <RestoreCtxs+0x4c>
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8008616:	2311      	movs	r3, #17
}
 8008618:	0018      	movs	r0, r3
 800861a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    if( LoRaMacCryptoRestoreNvmCtx( contexts->CryptoNvmCtx ) != LORAMAC_CRYPTO_SUCCESS )
 800861c:	6920      	ldr	r0, [r4, #16]
 800861e:	f002 f821 	bl	800a664 <LoRaMacCryptoRestoreNvmCtx>
 8008622:	2800      	cmp	r0, #0
 8008624:	d1f7      	bne.n	8008616 <RestoreCtxs+0x46>
    if( LoRaMacCommandsRestoreNvmCtx( contexts->CommandsNvmCtx ) != LORAMAC_COMMANDS_SUCCESS )
 8008626:	6a20      	ldr	r0, [r4, #32]
 8008628:	f001 fcac 	bl	8009f84 <LoRaMacCommandsRestoreNvmCtx>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800862c:	2313      	movs	r3, #19
    if( LoRaMacCommandsRestoreNvmCtx( contexts->CommandsNvmCtx ) != LORAMAC_COMMANDS_SUCCESS )
 800862e:	1e05      	subs	r5, r0, #0
 8008630:	d1f2      	bne.n	8008618 <RestoreCtxs+0x48>
    if( LoRaMacClassBRestoreNvmCtx( contexts->ClassBNvmCtx ) != true )
 8008632:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8008634:	f001 fc5d 	bl	8009ef2 <LoRaMacClassBRestoreNvmCtx>
        return LORAMAC_STATUS_CLASS_B_ERROR;
 8008638:	2314      	movs	r3, #20
    if( LoRaMacClassBRestoreNvmCtx( contexts->ClassBNvmCtx ) != true )
 800863a:	2800      	cmp	r0, #0
 800863c:	d0ec      	beq.n	8008618 <RestoreCtxs+0x48>
    if( LoRaMacConfirmQueueRestoreNvmCtx( contexts->ConfirmQueueNvmCtx ) != true )
 800863e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8008640:	f001 fdbe 	bl	800a1c0 <LoRaMacConfirmQueueRestoreNvmCtx>
        return LORAMAC_STATUS_CONFIRM_QUEUE_ERROR;
 8008644:	2315      	movs	r3, #21
    if( LoRaMacConfirmQueueRestoreNvmCtx( contexts->ConfirmQueueNvmCtx ) != true )
 8008646:	2800      	cmp	r0, #0
 8008648:	d0e6      	beq.n	8008618 <RestoreCtxs+0x48>
    return LORAMAC_STATUS_OK;
 800864a:	002b      	movs	r3, r5
 800864c:	e7e4      	b.n	8008618 <RestoreCtxs+0x48>
 800864e:	46c0      	nop			; (mov r8, r8)
 8008650:	2000091c 	.word	0x2000091c
 8008654:	20000740 	.word	0x20000740
 8008658:	00000484 	.word	0x00000484

0800865c <DetermineFrameType>:
{
 800865c:	0002      	movs	r2, r0
 800865e:	b510      	push	{r4, lr}
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8008660:	2003      	movs	r0, #3
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 8008662:	2a00      	cmp	r2, #0
 8008664:	d00b      	beq.n	800867e <DetermineFrameType+0x22>
 8008666:	2900      	cmp	r1, #0
 8008668:	d009      	beq.n	800867e <DetermineFrameType+0x22>
    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 800866a:	230f      	movs	r3, #15
 800866c:	7b14      	ldrb	r4, [r2, #12]
 800866e:	401c      	ands	r4, r3
 8008670:	d006      	beq.n	8008680 <DetermineFrameType+0x24>
 8008672:	1c53      	adds	r3, r2, #1
 8008674:	7fdb      	ldrb	r3, [r3, #31]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d002      	beq.n	8008680 <DetermineFrameType+0x24>
        *fType = FRAME_TYPE_A;
 800867a:	2000      	movs	r0, #0
 800867c:	7008      	strb	r0, [r1, #0]
}
 800867e:	bd10      	pop	{r4, pc}
    else if( macMsg->FRMPayloadSize == 0 )
 8008680:	0013      	movs	r3, r2
 8008682:	3328      	adds	r3, #40	; 0x28
 8008684:	7818      	ldrb	r0, [r3, #0]
 8008686:	2800      	cmp	r0, #0
 8008688:	d102      	bne.n	8008690 <DetermineFrameType+0x34>
        *fType = FRAME_TYPE_B;
 800868a:	2201      	movs	r2, #1
 800868c:	700a      	strb	r2, [r1, #0]
 800868e:	e7f6      	b.n	800867e <DetermineFrameType+0x22>
        return LORAMAC_STATUS_ERROR;
 8008690:	2017      	movs	r0, #23
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 8008692:	2c00      	cmp	r4, #0
 8008694:	d1f3      	bne.n	800867e <DetermineFrameType+0x22>
 8008696:	3201      	adds	r2, #1
 8008698:	7fd3      	ldrb	r3, [r2, #31]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d103      	bne.n	80086a6 <DetermineFrameType+0x4a>
        *fType = FRAME_TYPE_C;
 800869e:	3302      	adds	r3, #2
        *fType = FRAME_TYPE_D;
 80086a0:	700b      	strb	r3, [r1, #0]
    return LORAMAC_STATUS_OK;
 80086a2:	0020      	movs	r0, r4
        *fType = FRAME_TYPE_D;
 80086a4:	e7eb      	b.n	800867e <DetermineFrameType+0x22>
 80086a6:	2303      	movs	r3, #3
 80086a8:	e7fa      	b.n	80086a0 <DetermineFrameType+0x44>
	...

080086ac <LoRaMacProcess>:
{
 80086ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80086ae:	b0ad      	sub	sp, #180	; 0xb4
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80086b0:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80086b4:	b672      	cpsid	i
    LoRaMacRadioEvents.Value = 0;
 80086b6:	2000      	movs	r0, #0
    events = LoRaMacRadioEvents;
 80086b8:	4ac8      	ldr	r2, [pc, #800]	; (80089dc <LoRaMacProcess+0x330>)
 80086ba:	6813      	ldr	r3, [r2, #0]
    LoRaMacRadioEvents.Value = 0;
 80086bc:	6010      	str	r0, [r2, #0]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086be:	f381 8810 	msr	PRIMASK, r1
    if( events.Value != 0 )
 80086c2:	4283      	cmp	r3, r0
 80086c4:	d100      	bne.n	80086c8 <LoRaMacProcess+0x1c>
 80086c6:	e0e6      	b.n	8008896 <LoRaMacProcess+0x1ea>
 80086c8:	b2db      	uxtb	r3, r3
 80086ca:	9303      	str	r3, [sp, #12]
        if( events.Events.TxDone == 1 )
 80086cc:	06db      	lsls	r3, r3, #27
 80086ce:	d559      	bpl.n	8008784 <LoRaMacProcess+0xd8>
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 80086d0:	4cc3      	ldr	r4, [pc, #780]	; (80089e0 <LoRaMacProcess+0x334>)
 80086d2:	4dc4      	ldr	r5, [pc, #784]	; (80089e4 <LoRaMacProcess+0x338>)
 80086d4:	5963      	ldr	r3, [r4, r5]
 80086d6:	33f0      	adds	r3, #240	; 0xf0
 80086d8:	781b      	ldrb	r3, [r3, #0]
 80086da:	2b02      	cmp	r3, #2
 80086dc:	d003      	beq.n	80086e6 <LoRaMacProcess+0x3a>
        Radio.Sleep( );
 80086de:	4bc2      	ldr	r3, [pc, #776]	; (80089e8 <LoRaMacProcess+0x33c>)
 80086e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086e2:	9302      	str	r3, [sp, #8]
 80086e4:	4798      	blx	r3
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 80086e6:	23ec      	movs	r3, #236	; 0xec
 80086e8:	4ec0      	ldr	r6, [pc, #768]	; (80089ec <LoRaMacProcess+0x340>)
 80086ea:	009b      	lsls	r3, r3, #2
 80086ec:	58e1      	ldr	r1, [r4, r3]
 80086ee:	0030      	movs	r0, r6
 80086f0:	f004 f97c 	bl	800c9ec <TimerSetValue>
    TimerStart( &MacCtx.RxWindowTimer1 );
 80086f4:	0030      	movs	r0, r6
 80086f6:	f004 f8d1 	bl	800c89c <TimerStart>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 80086fa:	23ed      	movs	r3, #237	; 0xed
 80086fc:	4ebc      	ldr	r6, [pc, #752]	; (80089f0 <LoRaMacProcess+0x344>)
 80086fe:	009b      	lsls	r3, r3, #2
 8008700:	58e1      	ldr	r1, [r4, r3]
 8008702:	0030      	movs	r0, r6
 8008704:	f004 f972 	bl	800c9ec <TimerSetValue>
    TimerStart( &MacCtx.RxWindowTimer2 );
 8008708:	0030      	movs	r0, r6
 800870a:	f004 f8c7 	bl	800c89c <TimerStart>
    if( ( MacCtx.NvmCtx->DeviceClass == CLASS_C ) || ( MacCtx.NodeAckRequested == true ) )
 800870e:	5963      	ldr	r3, [r4, r5]
 8008710:	4eb8      	ldr	r6, [pc, #736]	; (80089f4 <LoRaMacProcess+0x348>)
 8008712:	001a      	movs	r2, r3
 8008714:	32f0      	adds	r2, #240	; 0xf0
 8008716:	7812      	ldrb	r2, [r2, #0]
 8008718:	2a02      	cmp	r2, #2
 800871a:	d002      	beq.n	8008722 <LoRaMacProcess+0x76>
 800871c:	5da2      	ldrb	r2, [r4, r6]
 800871e:	2a00      	cmp	r2, #0
 8008720:	d011      	beq.n	8008746 <LoRaMacProcess+0x9a>
        getPhy.Attribute = PHY_ACK_TIMEOUT;
 8008722:	2216      	movs	r2, #22
 8008724:	a914      	add	r1, sp, #80	; 0x50
        phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8008726:	7818      	ldrb	r0, [r3, #0]
        getPhy.Attribute = PHY_ACK_TIMEOUT;
 8008728:	700a      	strb	r2, [r1, #0]
        phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800872a:	f002 fb69 	bl	800ae00 <RegionGetPhyParam>
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 800872e:	23ed      	movs	r3, #237	; 0xed
 8008730:	009b      	lsls	r3, r3, #2
 8008732:	4fb1      	ldr	r7, [pc, #708]	; (80089f8 <LoRaMacProcess+0x34c>)
 8008734:	58e1      	ldr	r1, [r4, r3]
        phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8008736:	9016      	str	r0, [sp, #88]	; 0x58
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 8008738:	1809      	adds	r1, r1, r0
 800873a:	0038      	movs	r0, r7
 800873c:	f004 f956 	bl	800c9ec <TimerSetValue>
        TimerStart( &MacCtx.AckTimeoutTimer );
 8008740:	0038      	movs	r0, r7
 8008742:	f004 f8ab 	bl	800c89c <TimerStart>
    MacCtx.NvmCtx->LastTxChannel = MacCtx.Channel;
 8008746:	219f      	movs	r1, #159	; 0x9f
 8008748:	4aac      	ldr	r2, [pc, #688]	; (80089fc <LoRaMacProcess+0x350>)
 800874a:	5963      	ldr	r3, [r4, r5]
 800874c:	5ca2      	ldrb	r2, [r4, r2]
 800874e:	0049      	lsls	r1, r1, #1
 8008750:	545a      	strb	r2, [r3, r1]
    txDone.Channel = MacCtx.Channel;
 8008752:	a920      	add	r1, sp, #128	; 0x80
 8008754:	700a      	strb	r2, [r1, #0]
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 8008756:	22ea      	movs	r2, #234	; 0xea
 8008758:	0052      	lsls	r2, r2, #1
 800875a:	5c9a      	ldrb	r2, [r3, r2]
 800875c:	2a00      	cmp	r2, #0
 800875e:	d000      	beq.n	8008762 <LoRaMacProcess+0xb6>
 8008760:	e13a      	b.n	80089d8 <LoRaMacProcess+0x32c>
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 8008762:	4fa7      	ldr	r7, [pc, #668]	; (8008a00 <LoRaMacProcess+0x354>)
        txDone.Joined  = true;
 8008764:	704a      	strb	r2, [r1, #1]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 8008766:	683a      	ldr	r2, [r7, #0]
    RegionSetBandTxDone( MacCtx.NvmCtx->Region, &txDone );
 8008768:	7818      	ldrb	r0, [r3, #0]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 800876a:	604a      	str	r2, [r1, #4]
    RegionSetBandTxDone( MacCtx.NvmCtx->Region, &txDone );
 800876c:	f002 fb54 	bl	800ae18 <RegionSetBandTxDone>
    MacCtx.NvmCtx->LastTxDoneTime = TxDoneParams.CurTime;
 8008770:	23e2      	movs	r3, #226	; 0xe2
 8008772:	5962      	ldr	r2, [r4, r5]
 8008774:	6839      	ldr	r1, [r7, #0]
 8008776:	005b      	lsls	r3, r3, #1
 8008778:	50d1      	str	r1, [r2, r3]
    if( MacCtx.NodeAckRequested == false )
 800877a:	5da3      	ldrb	r3, [r4, r6]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d101      	bne.n	8008784 <LoRaMacProcess+0xd8>
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8008780:	4aa0      	ldr	r2, [pc, #640]	; (8008a04 <LoRaMacProcess+0x358>)
 8008782:	54a3      	strb	r3, [r4, r2]
        if( events.Events.RxDone == 1 )
 8008784:	9b03      	ldr	r3, [sp, #12]
 8008786:	071b      	lsls	r3, r3, #28
 8008788:	d556      	bpl.n	8008838 <LoRaMacProcess+0x18c>
    uint8_t *payload = RxDoneParams.Payload;
 800878a:	4b9f      	ldr	r3, [pc, #636]	; (8008a08 <LoRaMacProcess+0x35c>)
    uint32_t address = MacCtx.NvmCtx->DevAddr;
 800878c:	4c94      	ldr	r4, [pc, #592]	; (80089e0 <LoRaMacProcess+0x334>)
    uint16_t size = RxDoneParams.Size;
 800878e:	891a      	ldrh	r2, [r3, #8]
    uint32_t address = MacCtx.NvmCtx->DevAddr;
 8008790:	4e94      	ldr	r6, [pc, #592]	; (80089e4 <LoRaMacProcess+0x338>)
    uint16_t size = RxDoneParams.Size;
 8008792:	9204      	str	r2, [sp, #16]
    int16_t rssi = RxDoneParams.Rssi;
 8008794:	210a      	movs	r1, #10
 8008796:	5e5a      	ldrsh	r2, [r3, r1]
    uint8_t *payload = RxDoneParams.Payload;
 8008798:	685f      	ldr	r7, [r3, #4]
    int16_t rssi = RxDoneParams.Rssi;
 800879a:	9206      	str	r2, [sp, #24]
    uint32_t address = MacCtx.NvmCtx->DevAddr;
 800879c:	59a2      	ldr	r2, [r4, r6]
    int8_t snr = RxDoneParams.Snr;
 800879e:	7b1b      	ldrb	r3, [r3, #12]
    uint32_t address = MacCtx.NvmCtx->DevAddr;
 80087a0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
    int8_t snr = RxDoneParams.Snr;
 80087a2:	b25b      	sxtb	r3, r3
    uint32_t address = MacCtx.NvmCtx->DevAddr;
 80087a4:	9207      	str	r2, [sp, #28]
    MacCtx.McpsConfirm.AckReceived = false;
 80087a6:	2288      	movs	r2, #136	; 0x88
    int8_t snr = RxDoneParams.Snr;
 80087a8:	9305      	str	r3, [sp, #20]
    uint32_t downLinkCounter = 0;
 80087aa:	2300      	movs	r3, #0
    MacCtx.McpsConfirm.AckReceived = false;
 80087ac:	00d2      	lsls	r2, r2, #3
 80087ae:	54a3      	strb	r3, [r4, r2]
    MacCtx.McpsIndication.Rssi = rssi;
 80087b0:	9906      	ldr	r1, [sp, #24]
 80087b2:	4a96      	ldr	r2, [pc, #600]	; (8008a0c <LoRaMacProcess+0x360>)
    uint32_t downLinkCounter = 0;
 80087b4:	9313      	str	r3, [sp, #76]	; 0x4c
    MacCtx.McpsIndication.Rssi = rssi;
 80087b6:	52a1      	strh	r1, [r4, r2]
    MacCtx.McpsIndication.Snr = snr;
 80087b8:	9905      	ldr	r1, [sp, #20]
 80087ba:	4a95      	ldr	r2, [pc, #596]	; (8008a10 <LoRaMacProcess+0x364>)
 80087bc:	54a1      	strb	r1, [r4, r2]
    MacCtx.McpsIndication.RxSlot = MacCtx.RxSlot;
 80087be:	3254      	adds	r2, #84	; 0x54
 80087c0:	5ca2      	ldrb	r2, [r4, r2]
 80087c2:	4994      	ldr	r1, [pc, #592]	; (8008a14 <LoRaMacProcess+0x368>)
 80087c4:	5462      	strb	r2, [r4, r1]
    MacCtx.McpsIndication.Multicast = 0;
 80087c6:	4a94      	ldr	r2, [pc, #592]	; (8008a18 <LoRaMacProcess+0x36c>)
 80087c8:	52a3      	strh	r3, [r4, r2]
    MacCtx.McpsIndication.FramePending = 0;
 80087ca:	4a94      	ldr	r2, [pc, #592]	; (8008a1c <LoRaMacProcess+0x370>)
 80087cc:	54a3      	strb	r3, [r4, r2]
    MacCtx.McpsIndication.Buffer = NULL;
 80087ce:	4a94      	ldr	r2, [pc, #592]	; (8008a20 <LoRaMacProcess+0x374>)
 80087d0:	50a3      	str	r3, [r4, r2]
    MacCtx.McpsIndication.BufferSize = 0;
 80087d2:	3204      	adds	r2, #4
 80087d4:	54a3      	strb	r3, [r4, r2]
    MacCtx.McpsIndication.RxData = false;
 80087d6:	4a93      	ldr	r2, [pc, #588]	; (8008a24 <LoRaMacProcess+0x378>)
 80087d8:	54a3      	strb	r3, [r4, r2]
    MacCtx.McpsIndication.AckReceived = false;
 80087da:	4a93      	ldr	r2, [pc, #588]	; (8008a28 <LoRaMacProcess+0x37c>)
 80087dc:	54a3      	strb	r3, [r4, r2]
    MacCtx.McpsIndication.DownLinkCounter = 0;
 80087de:	3202      	adds	r2, #2
 80087e0:	50a3      	str	r3, [r4, r2]
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 80087e2:	4a92      	ldr	r2, [pc, #584]	; (8008a2c <LoRaMacProcess+0x380>)
 80087e4:	54a3      	strb	r3, [r4, r2]
    MacCtx.McpsIndication.DevAddress = 0;
 80087e6:	4a92      	ldr	r2, [pc, #584]	; (8008a30 <LoRaMacProcess+0x384>)
 80087e8:	50a3      	str	r3, [r4, r2]
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 80087ea:	3204      	adds	r2, #4
 80087ec:	54a3      	strb	r3, [r4, r2]
    Radio.Sleep( );
 80087ee:	4b7e      	ldr	r3, [pc, #504]	; (80089e8 <LoRaMacProcess+0x33c>)
 80087f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087f2:	9302      	str	r3, [sp, #8]
 80087f4:	4798      	blx	r3
    TimerStop( &MacCtx.RxWindowTimer2 );
 80087f6:	487e      	ldr	r0, [pc, #504]	; (80089f0 <LoRaMacProcess+0x344>)
 80087f8:	f004 f8cc 	bl	800c994 <TimerStop>
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 80087fc:	9904      	ldr	r1, [sp, #16]
 80087fe:	0038      	movs	r0, r7
 8008800:	f001 fb85 	bl	8009f0e <LoRaMacClassBRxBeacon>
 8008804:	4b83      	ldr	r3, [pc, #524]	; (8008a14 <LoRaMacProcess+0x368>)
 8008806:	1e05      	subs	r5, r0, #0
 8008808:	930a      	str	r3, [sp, #40]	; 0x28
 800880a:	4b83      	ldr	r3, [pc, #524]	; (8008a18 <LoRaMacProcess+0x36c>)
 800880c:	9602      	str	r6, [sp, #8]
 800880e:	930c      	str	r3, [sp, #48]	; 0x30
 8008810:	4b82      	ldr	r3, [pc, #520]	; (8008a1c <LoRaMacProcess+0x370>)
 8008812:	930d      	str	r3, [sp, #52]	; 0x34
 8008814:	4b82      	ldr	r3, [pc, #520]	; (8008a20 <LoRaMacProcess+0x374>)
 8008816:	9308      	str	r3, [sp, #32]
 8008818:	4b82      	ldr	r3, [pc, #520]	; (8008a24 <LoRaMacProcess+0x378>)
 800881a:	930b      	str	r3, [sp, #44]	; 0x2c
 800881c:	4b82      	ldr	r3, [pc, #520]	; (8008a28 <LoRaMacProcess+0x37c>)
 800881e:	930e      	str	r3, [sp, #56]	; 0x38
 8008820:	4b82      	ldr	r3, [pc, #520]	; (8008a2c <LoRaMacProcess+0x380>)
 8008822:	9309      	str	r3, [sp, #36]	; 0x24
 8008824:	4b82      	ldr	r3, [pc, #520]	; (8008a30 <LoRaMacProcess+0x384>)
 8008826:	930f      	str	r3, [sp, #60]	; 0x3c
 8008828:	d100      	bne.n	800882c <LoRaMacProcess+0x180>
 800882a:	e113      	b.n	8008a54 <LoRaMacProcess+0x3a8>
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 800882c:	4b81      	ldr	r3, [pc, #516]	; (8008a34 <LoRaMacProcess+0x388>)
 800882e:	9a06      	ldr	r2, [sp, #24]
 8008830:	52e2      	strh	r2, [r4, r3]
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 8008832:	9a05      	ldr	r2, [sp, #20]
 8008834:	3302      	adds	r3, #2
 8008836:	54e2      	strb	r2, [r4, r3]
        if( events.Events.TxTimeout == 1 )
 8008838:	9b03      	ldr	r3, [sp, #12]
 800883a:	075b      	lsls	r3, r3, #29
 800883c:	d51d      	bpl.n	800887a <LoRaMacProcess+0x1ce>
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 800883e:	4c68      	ldr	r4, [pc, #416]	; (80089e0 <LoRaMacProcess+0x334>)
 8008840:	4b68      	ldr	r3, [pc, #416]	; (80089e4 <LoRaMacProcess+0x338>)
 8008842:	58e3      	ldr	r3, [r4, r3]
 8008844:	33f0      	adds	r3, #240	; 0xf0
 8008846:	781b      	ldrb	r3, [r3, #0]
 8008848:	2b02      	cmp	r3, #2
 800884a:	d003      	beq.n	8008854 <LoRaMacProcess+0x1a8>
        Radio.Sleep( );
 800884c:	4b66      	ldr	r3, [pc, #408]	; (80089e8 <LoRaMacProcess+0x33c>)
 800884e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008850:	9302      	str	r3, [sp, #8]
 8008852:	4798      	blx	r3
    UpdateRxSlotIdleState( );
 8008854:	f7fe fc50 	bl	80070f8 <UpdateRxSlotIdleState>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 8008858:	2002      	movs	r0, #2
 800885a:	4b6a      	ldr	r3, [pc, #424]	; (8008a04 <LoRaMacProcess+0x358>)
 800885c:	54e0      	strb	r0, [r4, r3]
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 800885e:	f001 fd33 	bl	800a2c8 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 8008862:	4b64      	ldr	r3, [pc, #400]	; (80089f4 <LoRaMacProcess+0x348>)
 8008864:	5ce3      	ldrb	r3, [r4, r3]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d002      	beq.n	8008870 <LoRaMacProcess+0x1c4>
        MacCtx.AckTimeoutRetry = true;
 800886a:	2201      	movs	r2, #1
 800886c:	4b72      	ldr	r3, [pc, #456]	; (8008a38 <LoRaMacProcess+0x38c>)
 800886e:	54e2      	strb	r2, [r4, r3]
    MacCtx.MacFlags.Bits.MacDone = 1;
 8008870:	2320      	movs	r3, #32
 8008872:	4a72      	ldr	r2, [pc, #456]	; (8008a3c <LoRaMacProcess+0x390>)
 8008874:	5ca1      	ldrb	r1, [r4, r2]
 8008876:	430b      	orrs	r3, r1
 8008878:	54a3      	strb	r3, [r4, r2]
        if( events.Events.RxError == 1 )
 800887a:	9b03      	ldr	r3, [sp, #12]
 800887c:	079b      	lsls	r3, r3, #30
 800887e:	d503      	bpl.n	8008888 <LoRaMacProcess+0x1dc>
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 8008880:	2106      	movs	r1, #6
 8008882:	2005      	movs	r0, #5
 8008884:	f7fe fd14 	bl	80072b0 <HandleRadioRxErrorTimeout>
        if( events.Events.RxTimeout == 1 )
 8008888:	9b03      	ldr	r3, [sp, #12]
 800888a:	07db      	lsls	r3, r3, #31
 800888c:	d503      	bpl.n	8008896 <LoRaMacProcess+0x1ea>
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 800888e:	2104      	movs	r1, #4
 8008890:	2003      	movs	r0, #3
 8008892:	f7fe fd0d 	bl	80072b0 <HandleRadioRxErrorTimeout>
    LoRaMacClassBProcess( );
 8008896:	f001 fb57 	bl	8009f48 <LoRaMacClassBProcess>
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 800889a:	4d68      	ldr	r5, [pc, #416]	; (8008a3c <LoRaMacProcess+0x390>)
 800889c:	4c50      	ldr	r4, [pc, #320]	; (80089e0 <LoRaMacProcess+0x334>)
 800889e:	5d62      	ldrb	r2, [r4, r5]
 80088a0:	0693      	lsls	r3, r2, #26
 80088a2:	d567      	bpl.n	8008974 <LoRaMacProcess+0x2c8>
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 80088a4:	21d0      	movs	r1, #208	; 0xd0
    MacCtx.AllowRequests = requestState;
 80088a6:	2300      	movs	r3, #0
 80088a8:	4865      	ldr	r0, [pc, #404]	; (8008a40 <LoRaMacProcess+0x394>)
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 80088aa:	0089      	lsls	r1, r1, #2
    MacCtx.AllowRequests = requestState;
 80088ac:	5423      	strb	r3, [r4, r0]
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 80088ae:	5863      	ldr	r3, [r4, r1]
 80088b0:	9002      	str	r0, [sp, #8]
 80088b2:	0618      	lsls	r0, r3, #24
 80088b4:	d502      	bpl.n	80088bc <LoRaMacProcess+0x210>
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 80088b6:	2082      	movs	r0, #130	; 0x82
 80088b8:	4383      	bics	r3, r0
 80088ba:	5063      	str	r3, [r4, r1]

static uint8_t IsRequestPending( void )
{
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 80088bc:	2305      	movs	r3, #5
 80088be:	421a      	tst	r2, r3
 80088c0:	d100      	bne.n	80088c4 <LoRaMacProcess+0x218>
 80088c2:	e310      	b.n	8008ee6 <LoRaMacProcess+0x83a>
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 80088c4:	200b      	movs	r0, #11
 80088c6:	f001 fd1b 	bl	800a300 <LoRaMacConfirmQueueIsCmdActive>
 80088ca:	2800      	cmp	r0, #0
 80088cc:	d100      	bne.n	80088d0 <LoRaMacProcess+0x224>
 80088ce:	e30a      	b.n	8008ee6 <LoRaMacProcess+0x83a>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 80088d0:	5d63      	ldrb	r3, [r4, r5]
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 80088d2:	07da      	lsls	r2, r3, #31
 80088d4:	d500      	bpl.n	80088d8 <LoRaMacProcess+0x22c>
 80088d6:	e306      	b.n	8008ee6 <LoRaMacProcess+0x83a>
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 80088d8:	075b      	lsls	r3, r3, #29
 80088da:	d400      	bmi.n	80088de <LoRaMacProcess+0x232>
 80088dc:	e303      	b.n	8008ee6 <LoRaMacProcess+0x83a>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 80088de:	22d0      	movs	r2, #208	; 0xd0
 80088e0:	2302      	movs	r3, #2
 80088e2:	0092      	lsls	r2, r2, #2
 80088e4:	58a1      	ldr	r1, [r4, r2]
 80088e6:	4399      	bics	r1, r3
 80088e8:	50a1      	str	r1, [r4, r2]
    if( MacCtx.MacState == LORAMAC_IDLE )
 80088ea:	23d0      	movs	r3, #208	; 0xd0
 80088ec:	009b      	lsls	r3, r3, #2
 80088ee:	58e3      	ldr	r3, [r4, r3]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d12b      	bne.n	800894c <LoRaMacProcess+0x2a0>
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 80088f4:	5d67      	ldrb	r7, [r4, r5]
 80088f6:	3301      	adds	r3, #1
 80088f8:	003a      	movs	r2, r7
 80088fa:	401a      	ands	r2, r3
 80088fc:	d002      	beq.n	8008904 <LoRaMacProcess+0x258>
            MacCtx.MacFlags.Bits.McpsReq = 0;
 80088fe:	0039      	movs	r1, r7
 8008900:	4399      	bics	r1, r3
 8008902:	5561      	strb	r1, [r4, r5]
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8008904:	2104      	movs	r1, #4
 8008906:	5d63      	ldrb	r3, [r4, r5]
 8008908:	420b      	tst	r3, r1
 800890a:	d001      	beq.n	8008910 <LoRaMacProcess+0x264>
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800890c:	438b      	bics	r3, r1
 800890e:	5563      	strb	r3, [r4, r5]
    MacCtx.AllowRequests = requestState;
 8008910:	2301      	movs	r3, #1
 8008912:	9902      	ldr	r1, [sp, #8]
 8008914:	5463      	strb	r3, [r4, r1]
        if( reqEvents.Bits.McpsReq == 1 )
 8008916:	2a00      	cmp	r2, #0
 8008918:	d005      	beq.n	8008926 <LoRaMacProcess+0x27a>
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 800891a:	23d1      	movs	r3, #209	; 0xd1
 800891c:	009b      	lsls	r3, r3, #2
 800891e:	58e3      	ldr	r3, [r4, r3]
 8008920:	4848      	ldr	r0, [pc, #288]	; (8008a44 <LoRaMacProcess+0x398>)
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	4798      	blx	r3
        if( reqEvents.Bits.MlmeReq == 1 )
 8008926:	2604      	movs	r6, #4
 8008928:	4237      	tst	r7, r6
 800892a:	d009      	beq.n	8008940 <LoRaMacProcess+0x294>
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 800892c:	4846      	ldr	r0, [pc, #280]	; (8008a48 <LoRaMacProcess+0x39c>)
 800892e:	f001 fcff 	bl	800a330 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 8008932:	f001 fd29 	bl	800a388 <LoRaMacConfirmQueueGetCnt>
 8008936:	2800      	cmp	r0, #0
 8008938:	d002      	beq.n	8008940 <LoRaMacProcess+0x294>
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 800893a:	5d63      	ldrb	r3, [r4, r5]
 800893c:	431e      	orrs	r6, r3
 800893e:	5566      	strb	r6, [r4, r5]
        LoRaMacClassBResumeBeaconing( );
 8008940:	f001 faf1 	bl	8009f26 <LoRaMacClassBResumeBeaconing>
        MacCtx.MacFlags.Bits.MacDone = 0;
 8008944:	2220      	movs	r2, #32
 8008946:	5d63      	ldrb	r3, [r4, r5]
 8008948:	4393      	bics	r3, r2
 800894a:	5563      	strb	r3, [r4, r5]
    if( MacCtx.MacState == LORAMAC_IDLE )
 800894c:	23d0      	movs	r3, #208	; 0xd0
 800894e:	009b      	lsls	r3, r3, #2
 8008950:	58e3      	ldr	r3, [r4, r3]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d10b      	bne.n	800896e <LoRaMacProcess+0x2c2>
        bool isStickyMacCommandPending = false;
 8008956:	ae20      	add	r6, sp, #128	; 0x80
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 8008958:	0030      	movs	r0, r6
        bool isStickyMacCommandPending = false;
 800895a:	7033      	strb	r3, [r6, #0]
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 800895c:	f001 fc02 	bl	800a164 <LoRaMacCommandsStickyCmdsPending>
        if( isStickyMacCommandPending == true )
 8008960:	7833      	ldrb	r3, [r6, #0]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d003      	beq.n	800896e <LoRaMacProcess+0x2c2>
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 8008966:	2310      	movs	r3, #16
 8008968:	5d62      	ldrb	r2, [r4, r5]
 800896a:	4313      	orrs	r3, r2
 800896c:	5563      	strb	r3, [r4, r5]
    MacCtx.AllowRequests = requestState;
 800896e:	2301      	movs	r3, #1
 8008970:	9a02      	ldr	r2, [sp, #8]
 8008972:	54a3      	strb	r3, [r4, r2]
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 8008974:	2208      	movs	r2, #8
 8008976:	5d63      	ldrb	r3, [r4, r5]
 8008978:	4213      	tst	r3, r2
 800897a:	d007      	beq.n	800898c <LoRaMacProcess+0x2e0>
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 800897c:	4393      	bics	r3, r2
 800897e:	5563      	strb	r3, [r4, r5]
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication );
 8008980:	23d1      	movs	r3, #209	; 0xd1
 8008982:	009b      	lsls	r3, r3, #2
 8008984:	58e3      	ldr	r3, [r4, r3]
 8008986:	4831      	ldr	r0, [pc, #196]	; (8008a4c <LoRaMacProcess+0x3a0>)
 8008988:	68db      	ldr	r3, [r3, #12]
 800898a:	4798      	blx	r3
    if( MacCtx.MacFlags.Bits.MlmeSchedUplinkInd == 1 )
 800898c:	2610      	movs	r6, #16
 800898e:	5d63      	ldrb	r3, [r4, r5]
 8008990:	4233      	tst	r3, r6
 8008992:	d00c      	beq.n	80089ae <LoRaMacProcess+0x302>
        schduleUplinkIndication.MlmeIndication = MLME_SCHEDULE_UPLINK;
 8008994:	2306      	movs	r3, #6
 8008996:	a820      	add	r0, sp, #128	; 0x80
 8008998:	7003      	strb	r3, [r0, #0]
        schduleUplinkIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800899a:	2300      	movs	r3, #0
 800899c:	7043      	strb	r3, [r0, #1]
        MacCtx.MacPrimitives->MacMlmeIndication( &schduleUplinkIndication );
 800899e:	23d1      	movs	r3, #209	; 0xd1
 80089a0:	009b      	lsls	r3, r3, #2
 80089a2:	58e3      	ldr	r3, [r4, r3]
 80089a4:	68db      	ldr	r3, [r3, #12]
 80089a6:	4798      	blx	r3
        MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 0;
 80089a8:	5d63      	ldrb	r3, [r4, r5]
 80089aa:	43b3      	bics	r3, r6
 80089ac:	5563      	strb	r3, [r4, r5]
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 80089ae:	2202      	movs	r2, #2
 80089b0:	5d63      	ldrb	r3, [r4, r5]
 80089b2:	4213      	tst	r3, r2
 80089b4:	d007      	beq.n	80089c6 <LoRaMacProcess+0x31a>
        MacCtx.MacFlags.Bits.McpsInd = 0;
 80089b6:	4393      	bics	r3, r2
 80089b8:	5563      	strb	r3, [r4, r5]
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication );
 80089ba:	23d1      	movs	r3, #209	; 0xd1
 80089bc:	009b      	lsls	r3, r3, #2
 80089be:	58e3      	ldr	r3, [r4, r3]
 80089c0:	4823      	ldr	r0, [pc, #140]	; (8008a50 <LoRaMacProcess+0x3a4>)
 80089c2:	685b      	ldr	r3, [r3, #4]
 80089c4:	4798      	blx	r3
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 80089c6:	2390      	movs	r3, #144	; 0x90
 80089c8:	00db      	lsls	r3, r3, #3
 80089ca:	5ce3      	ldrb	r3, [r4, r3]
 80089cc:	2b02      	cmp	r3, #2
 80089ce:	d101      	bne.n	80089d4 <LoRaMacProcess+0x328>
        OpenContinuousRxCWindow( );
 80089d0:	f7fe fd50 	bl	8007474 <OpenContinuousRxCWindow>
}
 80089d4:	b02d      	add	sp, #180	; 0xb4
 80089d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        txDone.Joined  = true;
 80089d8:	2201      	movs	r2, #1
 80089da:	e6c2      	b.n	8008762 <LoRaMacProcess+0xb6>
 80089dc:	2000073c 	.word	0x2000073c
 80089e0:	2000091c 	.word	0x2000091c
 80089e4:	00000484 	.word	0x00000484
 80089e8:	0800eaa4 	.word	0x0800eaa4
 80089ec:	20000c9c 	.word	0x20000c9c
 80089f0:	20000cb4 	.word	0x20000cb4
 80089f4:	00000414 	.word	0x00000414
 80089f8:	20000d14 	.word	0x20000d14
 80089fc:	00000415 	.word	0x00000415
 8008a00:	200015dc 	.word	0x200015dc
 8008a04:	0000043d 	.word	0x0000043d
 8008a08:	200015e0 	.word	0x200015e0
 8008a0c:	0000042a 	.word	0x0000042a
 8008a10:	0000042c 	.word	0x0000042c
 8008a14:	0000042d 	.word	0x0000042d
 8008a18:	0000041e 	.word	0x0000041e
 8008a1c:	00000421 	.word	0x00000421
 8008a20:	00000424 	.word	0x00000424
 8008a24:	00000429 	.word	0x00000429
 8008a28:	0000042e 	.word	0x0000042e
 8008a2c:	0000041c 	.word	0x0000041c
 8008a30:	00000434 	.word	0x00000434
 8008a34:	00000476 	.word	0x00000476
 8008a38:	00000413 	.word	0x00000413
 8008a3c:	00000481 	.word	0x00000481
 8008a40:	00000482 	.word	0x00000482
 8008a44:	20000d58 	.word	0x20000d58
 8008a48:	20000d6c 	.word	0x20000d6c
 8008a4c:	20000d80 	.word	0x20000d80
 8008a50:	20000d38 	.word	0x20000d38
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 8008a54:	9b02      	ldr	r3, [sp, #8]
 8008a56:	58e3      	ldr	r3, [r4, r3]
 8008a58:	9306      	str	r3, [sp, #24]
 8008a5a:	33f0      	adds	r3, #240	; 0xf0
 8008a5c:	781b      	ldrb	r3, [r3, #0]
 8008a5e:	2b01      	cmp	r3, #1
 8008a60:	d10c      	bne.n	8008a7c <LoRaMacProcess+0x3d0>
        if( LoRaMacClassBIsPingExpected( ) == true )
 8008a62:	f001 fa58 	bl	8009f16 <LoRaMacClassBIsPingExpected>
 8008a66:	1e06      	subs	r6, r0, #0
 8008a68:	d018      	beq.n	8008a9c <LoRaMacProcess+0x3f0>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8008a6a:	0028      	movs	r0, r5
 8008a6c:	f001 fa48 	bl	8009f00 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 8008a70:	0028      	movs	r0, r5
 8008a72:	f001 fa4a 	bl	8009f0a <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 8008a76:	2304      	movs	r3, #4
            MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 8008a78:	4abd      	ldr	r2, [pc, #756]	; (8008d70 <LoRaMacProcess+0x6c4>)
 8008a7a:	54a3      	strb	r3, [r4, r2]
    macHdr.Value = payload[pktHeaderLen++];
 8008a7c:	783b      	ldrb	r3, [r7, #0]
    switch( macHdr.Bits.MType )
 8008a7e:	0958      	lsrs	r0, r3, #5
 8008a80:	3801      	subs	r0, #1
    macHdr.Value = payload[pktHeaderLen++];
 8008a82:	9306      	str	r3, [sp, #24]
    switch( macHdr.Bits.MType )
 8008a84:	2806      	cmp	r0, #6
 8008a86:	d900      	bls.n	8008a8a <LoRaMacProcess+0x3de>
 8008a88:	e21f      	b.n	8008eca <LoRaMacProcess+0x81e>
 8008a8a:	f7f7 fb51 	bl	8000130 <__gnu_thumb1_case_uhi>
 8008a8e:	0013      	.short	0x0013
 8008a90:	009b021e 	.word	0x009b021e
 8008a94:	0098021e 	.word	0x0098021e
 8008a98:	020b021e 	.word	0x020b021e
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8008a9c:	f001 fa3d 	bl	8009f1a <LoRaMacClassBIsMulticastExpected>
 8008aa0:	2800      	cmp	r0, #0
 8008aa2:	d0eb      	beq.n	8008a7c <LoRaMacProcess+0x3d0>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8008aa4:	0030      	movs	r0, r6
 8008aa6:	f001 fa2c 	bl	8009f02 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8008aaa:	0030      	movs	r0, r6
 8008aac:	f001 fa2e 	bl	8009f0c <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 8008ab0:	2305      	movs	r3, #5
 8008ab2:	e7e1      	b.n	8008a78 <LoRaMacProcess+0x3cc>
            macMsgJoinAccept.BufSize = size;
 8008ab4:	466b      	mov	r3, sp
 8008ab6:	7c1e      	ldrb	r6, [r3, #16]
            if( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE )
 8008ab8:	9b02      	ldr	r3, [sp, #8]
            macMsgJoinAccept.Buffer = payload;
 8008aba:	ad16      	add	r5, sp, #88	; 0x58
            if( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE )
 8008abc:	58e3      	ldr	r3, [r4, r3]
            macMsgJoinAccept.Buffer = payload;
 8008abe:	9716      	str	r7, [sp, #88]	; 0x58
            if( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE )
 8008ac0:	9304      	str	r3, [sp, #16]
 8008ac2:	23ea      	movs	r3, #234	; 0xea
 8008ac4:	9a04      	ldr	r2, [sp, #16]
            macMsgJoinAccept.BufSize = size;
 8008ac6:	712e      	strb	r6, [r5, #4]
            if( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE )
 8008ac8:	005b      	lsls	r3, r3, #1
 8008aca:	5cd7      	ldrb	r7, [r2, r3]
 8008acc:	2f00      	cmp	r7, #0
 8008ace:	d006      	beq.n	8008ade <LoRaMacProcess+0x432>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008ad0:	2101      	movs	r1, #1
 8008ad2:	4aa8      	ldr	r2, [pc, #672]	; (8008d74 <LoRaMacProcess+0x6c8>)
 8008ad4:	4ba8      	ldr	r3, [pc, #672]	; (8008d78 <LoRaMacProcess+0x6cc>)
 8008ad6:	54d1      	strb	r1, [r2, r3]
                PrepareRxDoneAbort( );
 8008ad8:	f7fe fbcc 	bl	8007274 <PrepareRxDoneAbort>
 8008adc:	e6ac      	b.n	8008838 <LoRaMacProcess+0x18c>
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, SecureElementGetJoinEui( ), &macMsgJoinAccept );
 8008ade:	f7fe faf1 	bl	80070c4 <SecureElementGetJoinEui>
 8008ae2:	002a      	movs	r2, r5
 8008ae4:	0001      	movs	r1, r0
 8008ae6:	20ff      	movs	r0, #255	; 0xff
 8008ae8:	f001 ff84 	bl	800a9f4 <LoRaMacCryptoHandleJoinAccept>
            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 8008aec:	2800      	cmp	r0, #0
 8008aee:	d15e      	bne.n	8008bae <LoRaMacProcess+0x502>
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 8008af0:	7aaa      	ldrb	r2, [r5, #10]
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 8008af2:	7ae9      	ldrb	r1, [r5, #11]
                MacCtx.NvmCtx->NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 8008af4:	9b02      	ldr	r3, [sp, #8]
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 8008af6:	0409      	lsls	r1, r1, #16
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 8008af8:	0212      	lsls	r2, r2, #8
                MacCtx.NvmCtx->NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 8008afa:	58e3      	ldr	r3, [r4, r3]
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 8008afc:	430a      	orrs	r2, r1
                MacCtx.NvmCtx->NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 8008afe:	7a69      	ldrb	r1, [r5, #9]
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 8008b00:	430a      	orrs	r2, r1
                MacCtx.NvmCtx->MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 8008b02:	0019      	movs	r1, r3
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 8008b04:	649a      	str	r2, [r3, #72]	; 0x48
                MacCtx.NvmCtx->DevAddr = macMsgJoinAccept.DevAddr;
 8008b06:	68ea      	ldr	r2, [r5, #12]
                MacCtx.NvmCtx->MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 8008b08:	31ff      	adds	r1, #255	; 0xff
                MacCtx.NvmCtx->DevAddr = macMsgJoinAccept.DevAddr;
 8008b0a:	64da      	str	r2, [r3, #76]	; 0x4c
                MacCtx.NvmCtx->MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 8008b0c:	7c2a      	ldrb	r2, [r5, #16]
 8008b0e:	0652      	lsls	r2, r2, #25
 8008b10:	0f52      	lsrs	r2, r2, #29
 8008b12:	768a      	strb	r2, [r1, #26]
                MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 8008b14:	2190      	movs	r1, #144	; 0x90
 8008b16:	7c2a      	ldrb	r2, [r5, #16]
 8008b18:	0049      	lsls	r1, r1, #1
 8008b1a:	0712      	lsls	r2, r2, #28
 8008b1c:	0f12      	lsrs	r2, r2, #28
 8008b1e:	545a      	strb	r2, [r3, r1]
                MacCtx.NvmCtx->MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 8008b20:	3108      	adds	r1, #8
 8008b22:	545a      	strb	r2, [r3, r1]
 8008b24:	0019      	movs	r1, r3
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 8008b26:	7c6a      	ldrb	r2, [r5, #17]
 8008b28:	31fc      	adds	r1, #252	; 0xfc
                if( MacCtx.NvmCtx->MacParams.ReceiveDelay1 == 0 )
 8008b2a:	2a00      	cmp	r2, #0
 8008b2c:	d03d      	beq.n	8008baa <LoRaMacProcess+0x4fe>
                    MacCtx.NvmCtx->MacParams.ReceiveDelay1 = 1;
 8008b2e:	60ca      	str	r2, [r1, #12]
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 *= 1000;
 8008b30:	22fa      	movs	r2, #250	; 0xfa
 8008b32:	68c8      	ldr	r0, [r1, #12]
 8008b34:	0092      	lsls	r2, r2, #2
 8008b36:	4342      	muls	r2, r0
                MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + 1000;
 8008b38:	20fa      	movs	r0, #250	; 0xfa
 8008b3a:	0080      	lsls	r0, r0, #2
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 *= 1000;
 8008b3c:	60ca      	str	r2, [r1, #12]
                MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + 1000;
 8008b3e:	1812      	adds	r2, r2, r0
 8008b40:	610a      	str	r2, [r1, #16]
                MacCtx.NvmCtx->Version.Fields.Minor = 0;
 8008b42:	22e9      	movs	r2, #233	; 0xe9
 8008b44:	2500      	movs	r5, #0
 8008b46:	0052      	lsls	r2, r2, #1
 8008b48:	549d      	strb	r5, [r3, r2]
                applyCFList.Payload = macMsgJoinAccept.CFList;
 8008b4a:	a914      	add	r1, sp, #80	; 0x50
 8008b4c:	3aa1      	subs	r2, #161	; 0xa1
                applyCFList.Size = size - 17;
 8008b4e:	3e11      	subs	r6, #17
 8008b50:	710e      	strb	r6, [r1, #4]
                applyCFList.Payload = macMsgJoinAccept.CFList;
 8008b52:	a80e      	add	r0, sp, #56	; 0x38
 8008b54:	3aff      	subs	r2, #255	; 0xff
 8008b56:	1812      	adds	r2, r2, r0
                RegionApplyCFList( MacCtx.NvmCtx->Region, &applyCFList );
 8008b58:	7818      	ldrb	r0, [r3, #0]
                applyCFList.Payload = macMsgJoinAccept.CFList;
 8008b5a:	9214      	str	r2, [sp, #80]	; 0x50
                RegionApplyCFList( MacCtx.NvmCtx->Region, &applyCFList );
 8008b5c:	f002 f97e 	bl	800ae5c <RegionApplyCFList>
                MacCtx.NvmCtx->NetworkActivation = ACTIVATION_TYPE_OTAA;
 8008b60:	9b02      	ldr	r3, [sp, #8]
 8008b62:	2102      	movs	r1, #2
 8008b64:	58e2      	ldr	r2, [r4, r3]
 8008b66:	23ea      	movs	r3, #234	; 0xea
 8008b68:	005b      	lsls	r3, r3, #1
 8008b6a:	54d1      	strb	r1, [r2, r3]
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8008b6c:	0028      	movs	r0, r5
 8008b6e:	f001 fbc7 	bl	800a300 <LoRaMacConfirmQueueIsCmdActive>
 8008b72:	42a8      	cmp	r0, r5
 8008b74:	d003      	beq.n	8008b7e <LoRaMacProcess+0x4d2>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 8008b76:	0029      	movs	r1, r5
 8008b78:	0028      	movs	r0, r5
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 8008b7a:	f001 fb6b 	bl	800a254 <LoRaMacConfirmQueueSetStatus>
    if( MacCtx.NodeAckRequested == true )
 8008b7e:	4c7d      	ldr	r4, [pc, #500]	; (8008d74 <LoRaMacProcess+0x6c8>)
 8008b80:	4b7e      	ldr	r3, [pc, #504]	; (8008d7c <LoRaMacProcess+0x6d0>)
 8008b82:	5ce3      	ldrb	r3, [r4, r3]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d100      	bne.n	8008b8a <LoRaMacProcess+0x4de>
 8008b88:	e1a5      	b.n	8008ed6 <LoRaMacProcess+0x82a>
        if( MacCtx.McpsConfirm.AckReceived == true )
 8008b8a:	2388      	movs	r3, #136	; 0x88
 8008b8c:	00db      	lsls	r3, r3, #3
 8008b8e:	5ce3      	ldrb	r3, [r4, r3]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d002      	beq.n	8008b9a <LoRaMacProcess+0x4ee>
            OnAckTimeoutTimerEvent( NULL );
 8008b94:	2000      	movs	r0, #0
 8008b96:	f7fe fb3f 	bl	8007218 <OnAckTimeoutTimerEvent>
    MacCtx.MacFlags.Bits.MacDone = 1;
 8008b9a:	2320      	movs	r3, #32
 8008b9c:	4a78      	ldr	r2, [pc, #480]	; (8008d80 <LoRaMacProcess+0x6d4>)
 8008b9e:	5ca1      	ldrb	r1, [r4, r2]
 8008ba0:	430b      	orrs	r3, r1
 8008ba2:	54a3      	strb	r3, [r4, r2]
    UpdateRxSlotIdleState( );
 8008ba4:	f7fe faa8 	bl	80070f8 <UpdateRxSlotIdleState>
 8008ba8:	e646      	b.n	8008838 <LoRaMacProcess+0x18c>
                    MacCtx.NvmCtx->MacParams.ReceiveDelay1 = 1;
 8008baa:	2201      	movs	r2, #1
 8008bac:	e7bf      	b.n	8008b2e <LoRaMacProcess+0x482>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8008bae:	0038      	movs	r0, r7
 8008bb0:	f001 fba6 	bl	800a300 <LoRaMacConfirmQueueIsCmdActive>
 8008bb4:	2800      	cmp	r0, #0
 8008bb6:	d0e2      	beq.n	8008b7e <LoRaMacProcess+0x4d2>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 8008bb8:	0039      	movs	r1, r7
 8008bba:	2007      	movs	r0, #7
 8008bbc:	e7dd      	b.n	8008b7a <LoRaMacProcess+0x4ce>
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 8008bbe:	2301      	movs	r3, #1
 8008bc0:	4a70      	ldr	r2, [pc, #448]	; (8008d84 <LoRaMacProcess+0x6d8>)
 8008bc2:	54a3      	strb	r3, [r4, r2]
            getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8008bc4:	222e      	movs	r2, #46	; 0x2e
 8008bc6:	4e6b      	ldr	r6, [pc, #428]	; (8008d74 <LoRaMacProcess+0x6c8>)
 8008bc8:	9b02      	ldr	r3, [sp, #8]
 8008bca:	32ff      	adds	r2, #255	; 0xff
 8008bcc:	58f3      	ldr	r3, [r6, r3]
 8008bce:	a911      	add	r1, sp, #68	; 0x44
 8008bd0:	5c9a      	ldrb	r2, [r3, r2]
 8008bd2:	708a      	strb	r2, [r1, #2]
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 8008bd4:	2284      	movs	r2, #132	; 0x84
 8008bd6:	00d2      	lsls	r2, r2, #3
 8008bd8:	5cb2      	ldrb	r2, [r6, r2]
 8008bda:	704a      	strb	r2, [r1, #1]
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 8008bdc:	220d      	movs	r2, #13
 8008bde:	700a      	strb	r2, [r1, #0]
            if( MacCtx.NvmCtx->RepeaterSupport == true )
 8008be0:	2240      	movs	r2, #64	; 0x40
 8008be2:	32ff      	adds	r2, #255	; 0xff
 8008be4:	5c9a      	ldrb	r2, [r3, r2]
 8008be6:	2a00      	cmp	r2, #0
 8008be8:	d001      	beq.n	8008bee <LoRaMacProcess+0x542>
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 8008bea:	220e      	movs	r2, #14
 8008bec:	700a      	strb	r2, [r1, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8008bee:	7818      	ldrb	r0, [r3, #0]
 8008bf0:	f002 f906 	bl	800ae00 <RegionGetPhyParam>
            if( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORA_MAC_FRMPAYLOAD_OVERHEAD ) ) > ( int16_t )phyParam.Value )
 8008bf4:	9a04      	ldr	r2, [sp, #16]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8008bf6:	9012      	str	r0, [sp, #72]	; 0x48
            if( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORA_MAC_FRMPAYLOAD_OVERHEAD ) ) > ( int16_t )phyParam.Value )
 8008bf8:	3a0d      	subs	r2, #13
 8008bfa:	1c13      	adds	r3, r2, #0
 8008bfc:	0412      	lsls	r2, r2, #16
 8008bfe:	d500      	bpl.n	8008c02 <LoRaMacProcess+0x556>
 8008c00:	2300      	movs	r3, #0
 8008c02:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008c04:	b21b      	sxth	r3, r3
 8008c06:	b212      	sxth	r2, r2
 8008c08:	4293      	cmp	r3, r2
 8008c0a:	dd00      	ble.n	8008c0e <LoRaMacProcess+0x562>
 8008c0c:	e760      	b.n	8008ad0 <LoRaMacProcess+0x424>
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 8008c0e:	22ff      	movs	r2, #255	; 0xff
            macMsgData.BufSize = size;
 8008c10:	9b04      	ldr	r3, [sp, #16]
            macMsgData.Buffer = payload;
 8008c12:	ad20      	add	r5, sp, #128	; 0x80
            macMsgData.BufSize = size;
 8008c14:	712b      	strb	r3, [r5, #4]
            macMsgData.FRMPayload = MacCtx.RxPayload;
 8008c16:	4b5c      	ldr	r3, [pc, #368]	; (8008d88 <LoRaMacProcess+0x6dc>)
            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 8008c18:	0028      	movs	r0, r5
            macMsgData.FRMPayload = MacCtx.RxPayload;
 8008c1a:	9329      	str	r3, [sp, #164]	; 0xa4
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 8008c1c:	ab2a      	add	r3, sp, #168	; 0xa8
            macMsgData.Buffer = payload;
 8008c1e:	9720      	str	r7, [sp, #128]	; 0x80
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 8008c20:	701a      	strb	r2, [r3, #0]
            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 8008c22:	f001 ffeb 	bl	800abfc <LoRaMacParserData>
 8008c26:	2800      	cmp	r0, #0
 8008c28:	d000      	beq.n	8008c2c <LoRaMacProcess+0x580>
 8008c2a:	e751      	b.n	8008ad0 <LoRaMacProcess+0x424>
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 8008c2c:	4b57      	ldr	r3, [pc, #348]	; (8008d8c <LoRaMacProcess+0x6e0>)
 8008c2e:	68aa      	ldr	r2, [r5, #8]
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 8008c30:	a914      	add	r1, sp, #80	; 0x50
 8008c32:	0028      	movs	r0, r5
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 8008c34:	50f2      	str	r2, [r6, r3]
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 8008c36:	f7ff fd11 	bl	800865c <DetermineFrameType>
 8008c3a:	2800      	cmp	r0, #0
 8008c3c:	d000      	beq.n	8008c40 <LoRaMacProcess+0x594>
 8008c3e:	e747      	b.n	8008ad0 <LoRaMacProcess+0x424>
                if( ( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 8008c40:	9b02      	ldr	r3, [sp, #8]
 8008c42:	0004      	movs	r4, r0
 8008c44:	58f3      	ldr	r3, [r6, r3]
 8008c46:	68a9      	ldr	r1, [r5, #8]
 8008c48:	001a      	movs	r2, r3
            downLinkCounter = 0;
 8008c4a:	9013      	str	r0, [sp, #76]	; 0x4c
 8008c4c:	3251      	adds	r2, #81	; 0x51
                if( ( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 8008c4e:	1cd0      	adds	r0, r2, #3
 8008c50:	6800      	ldr	r0, [r0, #0]
 8008c52:	9004      	str	r0, [sp, #16]
 8008c54:	4288      	cmp	r0, r1
 8008c56:	d12f      	bne.n	8008cb8 <LoRaMacProcess+0x60c>
 8008c58:	7810      	ldrb	r0, [r2, #0]
 8008c5a:	2800      	cmp	r0, #0
 8008c5c:	d02c      	beq.n	8008cb8 <LoRaMacProcess+0x60c>
                    addrID = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.GroupID;
 8008c5e:	2028      	movs	r0, #40	; 0x28
 8008c60:	4360      	muls	r0, r4
 8008c62:	1818      	adds	r0, r3, r0
 8008c64:	0002      	movs	r2, r0
 8008c66:	3252      	adds	r2, #82	; 0x52
 8008c68:	7814      	ldrb	r4, [r2, #0]
                    downLinkCounter = *( MacCtx.NvmCtx->MulticastChannelList[i].DownLinkCounter );
 8008c6a:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
                    multicast = 1;
 8008c6c:	2101      	movs	r1, #1
                    downLinkCounter = *( MacCtx.NvmCtx->MulticastChannelList[i].DownLinkCounter );
 8008c6e:	6812      	ldr	r2, [r2, #0]
 8008c70:	9213      	str	r2, [sp, #76]	; 0x4c
                    if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 8008c72:	001a      	movs	r2, r3
 8008c74:	32f0      	adds	r2, #240	; 0xf0
 8008c76:	7812      	ldrb	r2, [r2, #0]
                    multicast = 1;
 8008c78:	9107      	str	r1, [sp, #28]
                    if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 8008c7a:	2a02      	cmp	r2, #2
 8008c7c:	d103      	bne.n	8008c86 <LoRaMacProcess+0x5da>
                        MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 8008c7e:	4a3d      	ldr	r2, [pc, #244]	; (8008d74 <LoRaMacProcess+0x6c8>)
 8008c80:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008c82:	3102      	adds	r1, #2
 8008c84:	5411      	strb	r1, [r2, r0]
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 8008c86:	2215      	movs	r2, #21
 8008c88:	a911      	add	r1, sp, #68	; 0x44
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8008c8a:	7818      	ldrb	r0, [r3, #0]
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 8008c8c:	700a      	strb	r2, [r1, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8008c8e:	f002 f8b7 	bl	800ae00 <RegionGetPhyParam>
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, MacCtx.NvmCtx->Version, phyParam.Value, &fCntID, &downLinkCounter );
 8008c92:	4a38      	ldr	r2, [pc, #224]	; (8008d74 <LoRaMacProcess+0x6c8>)
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8008c94:	9012      	str	r0, [sp, #72]	; 0x48
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, MacCtx.NvmCtx->Version, phyParam.Value, &fCntID, &downLinkCounter );
 8008c96:	b281      	uxth	r1, r0
 8008c98:	9802      	ldr	r0, [sp, #8]
 8008c9a:	ab14      	add	r3, sp, #80	; 0x50
 8008c9c:	5810      	ldr	r0, [r2, r0]
 8008c9e:	22e9      	movs	r2, #233	; 0xe9
 8008ca0:	0052      	lsls	r2, r2, #1
 8008ca2:	781b      	ldrb	r3, [r3, #0]
 8008ca4:	5c82      	ldrb	r2, [r0, r2]
 8008ca6:	4e34      	ldr	r6, [pc, #208]	; (8008d78 <LoRaMacProcess+0x6cc>)
    switch( addrID )
 8008ca8:	2c04      	cmp	r4, #4
 8008caa:	d84d      	bhi.n	8008d48 <LoRaMacProcess+0x69c>
 8008cac:	0020      	movs	r0, r4
 8008cae:	f7f7 fa2b 	bl	8000108 <__gnu_thumb1_case_uqi>
 8008cb2:	460c      	.short	0x460c
 8008cb4:	4442      	.short	0x4442
 8008cb6:	37          	.byte	0x37
 8008cb7:	00          	.byte	0x00
 8008cb8:	3401      	adds	r4, #1
 8008cba:	3228      	adds	r2, #40	; 0x28
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8008cbc:	2c04      	cmp	r4, #4
 8008cbe:	d1c6      	bne.n	8008c4e <LoRaMacProcess+0x5a2>
    uint32_t address = MacCtx.NvmCtx->DevAddr;
 8008cc0:	9a07      	ldr	r2, [sp, #28]
 8008cc2:	9204      	str	r2, [sp, #16]
            multicast = 0;
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	9207      	str	r2, [sp, #28]
 8008cc8:	e7dd      	b.n	8008c86 <LoRaMacProcess+0x5da>
            *fCntID = MC_FCNT_DOWN_0;
 8008cca:	2504      	movs	r5, #4
    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
 8008ccc:	af20      	add	r7, sp, #128	; 0x80
 8008cce:	89fa      	ldrh	r2, [r7, #14]
 8008cd0:	ab13      	add	r3, sp, #76	; 0x4c
 8008cd2:	0028      	movs	r0, r5
 8008cd4:	f001 fcea 	bl	800a6ac <LoRaMacCryptoGetFCntDown>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8008cd8:	2800      	cmp	r0, #0
 8008cda:	d039      	beq.n	8008d50 <LoRaMacProcess+0x6a4>
 8008cdc:	4b25      	ldr	r3, [pc, #148]	; (8008d74 <LoRaMacProcess+0x6c8>)
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 8008cde:	2807      	cmp	r0, #7
 8008ce0:	d12f      	bne.n	8008d42 <LoRaMacProcess+0x696>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 8008ce2:	2208      	movs	r2, #8
 8008ce4:	559a      	strb	r2, [r3, r6]
                    if( ( MacCtx.NvmCtx->Version.Fields.Minor == 0 ) && ( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN ) && ( MacCtx.NvmCtx->LastRxMic == macMsgData.MIC ) )
 8008ce6:	9a02      	ldr	r2, [sp, #8]
 8008ce8:	589b      	ldr	r3, [r3, r2]
 8008cea:	22e9      	movs	r2, #233	; 0xe9
 8008cec:	0052      	lsls	r2, r2, #1
 8008cee:	5c9a      	ldrb	r2, [r3, r2]
 8008cf0:	2a00      	cmp	r2, #0
 8008cf2:	d10f      	bne.n	8008d14 <LoRaMacProcess+0x668>
 8008cf4:	9906      	ldr	r1, [sp, #24]
 8008cf6:	321f      	adds	r2, #31
 8008cf8:	4391      	bics	r1, r2
 8008cfa:	000a      	movs	r2, r1
 8008cfc:	29a0      	cmp	r1, #160	; 0xa0
 8008cfe:	d109      	bne.n	8008d14 <LoRaMacProcess+0x668>
 8008d00:	3239      	adds	r2, #57	; 0x39
 8008d02:	32ff      	adds	r2, #255	; 0xff
 8008d04:	5899      	ldr	r1, [r3, r2]
 8008d06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d08:	4291      	cmp	r1, r2
 8008d0a:	d103      	bne.n	8008d14 <LoRaMacProcess+0x668>
                        MacCtx.NvmCtx->SrvAckRequested = true;
 8008d0c:	22e0      	movs	r2, #224	; 0xe0
 8008d0e:	2101      	movs	r1, #1
 8008d10:	0052      	lsls	r2, r2, #1
 8008d12:	5499      	strb	r1, [r3, r2]
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 8008d14:	2386      	movs	r3, #134	; 0x86
 8008d16:	4a17      	ldr	r2, [pc, #92]	; (8008d74 <LoRaMacProcess+0x6c8>)
 8008d18:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008d1a:	00db      	lsls	r3, r3, #3
 8008d1c:	50d1      	str	r1, [r2, r3]
 8008d1e:	e6db      	b.n	8008ad8 <LoRaMacProcess+0x42c>
                *fCntID = FCNT_DOWN;
 8008d20:	2503      	movs	r5, #3
            if( lrWanVersion.Fields.Minor == 1 )
 8008d22:	2a01      	cmp	r2, #1
 8008d24:	d1d2      	bne.n	8008ccc <LoRaMacProcess+0x620>
                    *fCntID = A_FCNT_DOWN;
 8008d26:	3d01      	subs	r5, #1
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d0cf      	beq.n	8008ccc <LoRaMacProcess+0x620>
                    *fCntID = A_FCNT_DOWN;
 8008d2c:	3b03      	subs	r3, #3
 8008d2e:	425d      	negs	r5, r3
 8008d30:	415d      	adcs	r5, r3
 8008d32:	3501      	adds	r5, #1
 8008d34:	e7ca      	b.n	8008ccc <LoRaMacProcess+0x620>
            *fCntID = MC_FCNT_DOWN_2;
 8008d36:	2506      	movs	r5, #6
 8008d38:	e7c8      	b.n	8008ccc <LoRaMacProcess+0x620>
            *fCntID = MC_FCNT_DOWN_3;
 8008d3a:	2507      	movs	r5, #7
 8008d3c:	e7c6      	b.n	8008ccc <LoRaMacProcess+0x620>
            *fCntID = MC_FCNT_DOWN_1;
 8008d3e:	2505      	movs	r5, #5
 8008d40:	e7c4      	b.n	8008ccc <LoRaMacProcess+0x620>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
 8008d42:	220a      	movs	r2, #10
                else if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT )
 8008d44:	2808      	cmp	r0, #8
 8008d46:	d001      	beq.n	8008d4c <LoRaMacProcess+0x6a0>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008d48:	2201      	movs	r2, #1
 8008d4a:	4b0a      	ldr	r3, [pc, #40]	; (8008d74 <LoRaMacProcess+0x6c8>)
 8008d4c:	559a      	strb	r2, [r3, r6]
 8008d4e:	e7e1      	b.n	8008d14 <LoRaMacProcess+0x668>
            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 8008d50:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008d52:	9700      	str	r7, [sp, #0]
 8008d54:	002a      	movs	r2, r5
 8008d56:	9904      	ldr	r1, [sp, #16]
 8008d58:	0020      	movs	r0, r4
 8008d5a:	f001 fd8d 	bl	800a878 <LoRaMacCryptoUnsecureMessage>
 8008d5e:	4b05      	ldr	r3, [pc, #20]	; (8008d74 <LoRaMacProcess+0x6c8>)
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8008d60:	2800      	cmp	r0, #0
 8008d62:	d015      	beq.n	8008d90 <LoRaMacProcess+0x6e4>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 8008d64:	220b      	movs	r2, #11
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 8008d66:	2802      	cmp	r0, #2
 8008d68:	d000      	beq.n	8008d6c <LoRaMacProcess+0x6c0>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 8008d6a:	220c      	movs	r2, #12
 8008d6c:	559a      	strb	r2, [r3, r6]
 8008d6e:	e6b3      	b.n	8008ad8 <LoRaMacProcess+0x42c>
 8008d70:	0000042d 	.word	0x0000042d
 8008d74:	2000091c 	.word	0x2000091c
 8008d78:	0000041d 	.word	0x0000041d
 8008d7c:	00000414 	.word	0x00000414
 8008d80:	00000481 	.word	0x00000481
 8008d84:	0000041c 	.word	0x0000041c
 8008d88:	20000b54 	.word	0x20000b54
 8008d8c:	00000434 	.word	0x00000434
            MacCtx.McpsIndication.Multicast = multicast;
 8008d90:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008d92:	9907      	ldr	r1, [sp, #28]
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 8008d94:	9c0d      	ldr	r4, [sp, #52]	; 0x34
            MacCtx.McpsIndication.Multicast = multicast;
 8008d96:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 8008d98:	7b3a      	ldrb	r2, [r7, #12]
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8008d9a:	5598      	strb	r0, [r3, r6]
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 8008d9c:	06d1      	lsls	r1, r2, #27
 8008d9e:	0fc9      	lsrs	r1, r1, #31
 8008da0:	5519      	strb	r1, [r3, r4]
            MacCtx.McpsIndication.Buffer = NULL;
 8008da2:	9908      	ldr	r1, [sp, #32]
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 8008da4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
            MacCtx.McpsIndication.Buffer = NULL;
 8008da6:	5058      	str	r0, [r3, r1]
            MacCtx.McpsIndication.BufferSize = 0;
 8008da8:	2185      	movs	r1, #133	; 0x85
 8008daa:	00c9      	lsls	r1, r1, #3
 8008dac:	5458      	strb	r0, [r3, r1]
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 8008dae:	3108      	adds	r1, #8
 8008db0:	505c      	str	r4, [r3, r1]
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 8008db2:	0692      	lsls	r2, r2, #26
 8008db4:	990e      	ldr	r1, [sp, #56]	; 0x38
 8008db6:	0fd2      	lsrs	r2, r2, #31
 8008db8:	545a      	strb	r2, [r3, r1]
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8008dba:	499e      	ldr	r1, [pc, #632]	; (8009034 <LoRaMacProcess+0x988>)
 8008dbc:	5458      	strb	r0, [r3, r1]
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 8008dbe:	3103      	adds	r1, #3
 8008dc0:	545a      	strb	r2, [r3, r1]
            if( ( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 ) ||
 8008dc2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008dc4:	5c9a      	ldrb	r2, [r3, r2]
 8008dc6:	2a01      	cmp	r2, #1
 8008dc8:	d803      	bhi.n	8008dd2 <LoRaMacProcess+0x726>
                MacCtx.NvmCtx->AdrAckCounter = 0;
 8008dca:	9902      	ldr	r1, [sp, #8]
 8008dcc:	585b      	ldr	r3, [r3, r1]
 8008dce:	33f4      	adds	r3, #244	; 0xf4
 8008dd0:	6018      	str	r0, [r3, #0]
            if( multicast == 1 )
 8008dd2:	9b07      	ldr	r3, [sp, #28]
 8008dd4:	4c98      	ldr	r4, [pc, #608]	; (8009038 <LoRaMacProcess+0x98c>)
 8008dd6:	ad20      	add	r5, sp, #128	; 0x80
 8008dd8:	2b01      	cmp	r3, #1
 8008dda:	d119      	bne.n	8008e10 <LoRaMacProcess+0x764>
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 8008ddc:	3301      	adds	r3, #1
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 8008dde:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008de0:	5463      	strb	r3, [r4, r1]
            RemoveMacCommands( MacCtx.McpsIndication.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 8008de2:	4b96      	ldr	r3, [pc, #600]	; (800903c <LoRaMacProcess+0x990>)
 8008de4:	5ce1      	ldrb	r1, [r4, r3]
 8008de6:	7b2b      	ldrb	r3, [r5, #12]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 8008de8:	2a01      	cmp	r2, #1
 8008dea:	d805      	bhi.n	8008df8 <LoRaMacProcess+0x74c>
        if( request == MCPS_CONFIRMED )
 8008dec:	2901      	cmp	r1, #1
 8008dee:	d101      	bne.n	8008df4 <LoRaMacProcess+0x748>
            if( fCtrl.Bits.Ack == 1 )
 8008df0:	069b      	lsls	r3, r3, #26
 8008df2:	d501      	bpl.n	8008df8 <LoRaMacProcess+0x74c>
                LoRaMacCommandsRemoveStickyAnsCmds( );
 8008df4:	f001 f968 	bl	800a0c8 <LoRaMacCommandsRemoveStickyAnsCmds>
            switch( fType )
 8008df8:	ab14      	add	r3, sp, #80	; 0x50
 8008dfa:	7818      	ldrb	r0, [r3, #0]
 8008dfc:	2803      	cmp	r0, #3
 8008dfe:	d84c      	bhi.n	8008e9a <LoRaMacProcess+0x7ee>
 8008e00:	2749      	movs	r7, #73	; 0x49
 8008e02:	ab0e      	add	r3, sp, #56	; 0x38
 8008e04:	18ff      	adds	r7, r7, r3
 8008e06:	4e8e      	ldr	r6, [pc, #568]	; (8009040 <LoRaMacProcess+0x994>)
 8008e08:	f7f7 f97e 	bl	8000108 <__gnu_thumb1_case_uqi>
 8008e0c:	2342331c 	.word	0x2342331c
 8008e10:	9b02      	ldr	r3, [sp, #8]
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 8008e12:	9806      	ldr	r0, [sp, #24]
 8008e14:	58e1      	ldr	r1, [r4, r3]
 8008e16:	231f      	movs	r3, #31
 8008e18:	4398      	bics	r0, r3
 8008e1a:	0003      	movs	r3, r0
 8008e1c:	20e0      	movs	r0, #224	; 0xe0
 8008e1e:	0040      	lsls	r0, r0, #1
 8008e20:	2ba0      	cmp	r3, #160	; 0xa0
 8008e22:	d10c      	bne.n	8008e3e <LoRaMacProcess+0x792>
                    MacCtx.NvmCtx->SrvAckRequested = true;
 8008e24:	3b9f      	subs	r3, #159	; 0x9f
 8008e26:	540b      	strb	r3, [r1, r0]
                    if( MacCtx.NvmCtx->Version.Fields.Minor == 0 )
 8008e28:	33d2      	adds	r3, #210	; 0xd2
 8008e2a:	33ff      	adds	r3, #255	; 0xff
 8008e2c:	5ccb      	ldrb	r3, [r1, r3]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d103      	bne.n	8008e3a <LoRaMacProcess+0x78e>
                        MacCtx.NvmCtx->LastRxMic = macMsgData.MIC;
 8008e32:	33d9      	adds	r3, #217	; 0xd9
 8008e34:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8008e36:	33ff      	adds	r3, #255	; 0xff
 8008e38:	50c8      	str	r0, [r1, r3]
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 8008e3a:	2301      	movs	r3, #1
 8008e3c:	e7cf      	b.n	8008dde <LoRaMacProcess+0x732>
                    MacCtx.NvmCtx->SrvAckRequested = false;
 8008e3e:	2300      	movs	r3, #0
 8008e40:	540b      	strb	r3, [r1, r0]
 8008e42:	e7cc      	b.n	8008dde <LoRaMacProcess+0x732>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.McpsIndication.RxSlot );
 8008e44:	7b29      	ldrb	r1, [r5, #12]
 8008e46:	9a05      	ldr	r2, [sp, #20]
 8008e48:	0709      	lsls	r1, r1, #28
 8008e4a:	0f09      	lsrs	r1, r1, #28
 8008e4c:	a824      	add	r0, sp, #144	; 0x90
 8008e4e:	f7fe fd23 	bl	8007898 <ProcessMacCommands.isra.1.constprop.7>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8008e52:	7ffb      	ldrb	r3, [r7, #31]
 8008e54:	55a3      	strb	r3, [r4, r6]
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 8008e56:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008e58:	9304      	str	r3, [sp, #16]
 8008e5a:	9a04      	ldr	r2, [sp, #16]
 8008e5c:	9b08      	ldr	r3, [sp, #32]
 8008e5e:	50e2      	str	r2, [r4, r3]
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 8008e60:	ab2a      	add	r3, sp, #168	; 0xa8
 8008e62:	781a      	ldrb	r2, [r3, #0]
 8008e64:	2385      	movs	r3, #133	; 0x85
 8008e66:	00db      	lsls	r3, r3, #3
 8008e68:	54e2      	strb	r2, [r4, r3]
                    MacCtx.McpsIndication.RxData = true;
 8008e6a:	2301      	movs	r3, #1
 8008e6c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008e6e:	54a3      	strb	r3, [r4, r2]
 8008e70:	e008      	b.n	8008e84 <LoRaMacProcess+0x7d8>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.McpsIndication.RxSlot );
 8008e72:	7b29      	ldrb	r1, [r5, #12]
 8008e74:	9a05      	ldr	r2, [sp, #20]
 8008e76:	0709      	lsls	r1, r1, #28
 8008e78:	0f09      	lsrs	r1, r1, #28
 8008e7a:	a824      	add	r0, sp, #144	; 0x90
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.McpsIndication.RxSlot );
 8008e7c:	f7fe fd0c 	bl	8007898 <ProcessMacCommands.isra.1.constprop.7>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8008e80:	7ffb      	ldrb	r3, [r7, #31]
 8008e82:	55a3      	strb	r3, [r4, r6]
            MacCtx.MacFlags.Bits.McpsInd = 1;
 8008e84:	2302      	movs	r3, #2
 8008e86:	4a6f      	ldr	r2, [pc, #444]	; (8009044 <LoRaMacProcess+0x998>)
 8008e88:	5ca1      	ldrb	r1, [r4, r2]
 8008e8a:	430b      	orrs	r3, r1
 8008e8c:	54a3      	strb	r3, [r4, r2]
 8008e8e:	e676      	b.n	8008b7e <LoRaMacProcess+0x4d2>
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.McpsIndication.RxSlot );
 8008e90:	ab2a      	add	r3, sp, #168	; 0xa8
 8008e92:	7819      	ldrb	r1, [r3, #0]
 8008e94:	9a05      	ldr	r2, [sp, #20]
 8008e96:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8008e98:	e7f0      	b.n	8008e7c <LoRaMacProcess+0x7d0>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008e9a:	2301      	movs	r3, #1
 8008e9c:	55a3      	strb	r3, [r4, r6]
                    PrepareRxDoneAbort( );
 8008e9e:	f7fe f9e9 	bl	8007274 <PrepareRxDoneAbort>
 8008ea2:	e7ef      	b.n	8008e84 <LoRaMacProcess+0x7d8>
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 8008ea4:	9e04      	ldr	r6, [sp, #16]
 8008ea6:	4d68      	ldr	r5, [pc, #416]	; (8009048 <LoRaMacProcess+0x99c>)
 8008ea8:	3e01      	subs	r6, #1
 8008eaa:	b2b2      	uxth	r2, r6
 8008eac:	1c79      	adds	r1, r7, #1
 8008eae:	0028      	movs	r0, r5
 8008eb0:	f003 fe61 	bl	800cb76 <memcpy1>
            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 8008eb4:	2303      	movs	r3, #3
 8008eb6:	4a65      	ldr	r2, [pc, #404]	; (800904c <LoRaMacProcess+0x9a0>)
 8008eb8:	54a3      	strb	r3, [r4, r2]
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8008eba:	2200      	movs	r2, #0
 8008ebc:	4b64      	ldr	r3, [pc, #400]	; (8009050 <LoRaMacProcess+0x9a4>)
 8008ebe:	54e2      	strb	r2, [r4, r3]
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 8008ec0:	4b64      	ldr	r3, [pc, #400]	; (8009054 <LoRaMacProcess+0x9a8>)
 8008ec2:	50e5      	str	r5, [r4, r3]
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 8008ec4:	3304      	adds	r3, #4
 8008ec6:	54e6      	strb	r6, [r4, r3]
 8008ec8:	e7dc      	b.n	8008e84 <LoRaMacProcess+0x7d8>
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008eca:	2201      	movs	r2, #1
 8008ecc:	4b60      	ldr	r3, [pc, #384]	; (8009050 <LoRaMacProcess+0x9a4>)
 8008ece:	54e2      	strb	r2, [r4, r3]
            PrepareRxDoneAbort( );
 8008ed0:	f7fe f9d0 	bl	8007274 <PrepareRxDoneAbort>
 8008ed4:	e653      	b.n	8008b7e <LoRaMacProcess+0x4d2>
        if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 8008ed6:	9b02      	ldr	r3, [sp, #8]
 8008ed8:	58e3      	ldr	r3, [r4, r3]
 8008eda:	33f0      	adds	r3, #240	; 0xf0
 8008edc:	781b      	ldrb	r3, [r3, #0]
 8008ede:	2b02      	cmp	r3, #2
 8008ee0:	d000      	beq.n	8008ee4 <LoRaMacProcess+0x838>
 8008ee2:	e65a      	b.n	8008b9a <LoRaMacProcess+0x4ee>
 8008ee4:	e656      	b.n	8008b94 <LoRaMacProcess+0x4e8>
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8008ee6:	2704      	movs	r7, #4
 8008ee8:	5d63      	ldrb	r3, [r4, r5]
 8008eea:	423b      	tst	r3, r7
 8008eec:	d012      	beq.n	8008f14 <LoRaMacProcess+0x868>
        if( ( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true ) )
 8008eee:	2000      	movs	r0, #0
 8008ef0:	26d0      	movs	r6, #208	; 0xd0
 8008ef2:	f001 fa05 	bl	800a300 <LoRaMacConfirmQueueIsCmdActive>
 8008ef6:	00b6      	lsls	r6, r6, #2
 8008ef8:	2800      	cmp	r0, #0
 8008efa:	d035      	beq.n	8008f68 <LoRaMacProcess+0x8bc>
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 8008efc:	2000      	movs	r0, #0
 8008efe:	f001 f9c5 	bl	800a28c <LoRaMacConfirmQueueGetStatus>
 8008f02:	2800      	cmp	r0, #0
 8008f04:	d102      	bne.n	8008f0c <LoRaMacProcess+0x860>
                MacCtx.ChannelsNbTransCounter = 0;
 8008f06:	2382      	movs	r3, #130	; 0x82
 8008f08:	00db      	lsls	r3, r3, #3
 8008f0a:	54e0      	strb	r0, [r4, r3]
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8008f0c:	2302      	movs	r3, #2
 8008f0e:	59a2      	ldr	r2, [r4, r6]
 8008f10:	439a      	bics	r2, r3
 8008f12:	51a2      	str	r2, [r4, r6]
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8008f14:	5d61      	ldrb	r1, [r4, r5]
 8008f16:	07cb      	lsls	r3, r1, #31
 8008f18:	d400      	bmi.n	8008f1c <LoRaMacProcess+0x870>
 8008f1a:	e4e6      	b.n	80088ea <LoRaMacProcess+0x23e>
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 8008f1c:	4b47      	ldr	r3, [pc, #284]	; (800903c <LoRaMacProcess+0x990>)
 8008f1e:	5ce3      	ldrb	r3, [r4, r3]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d001      	beq.n	8008f28 <LoRaMacProcess+0x87c>
 8008f24:	2b03      	cmp	r3, #3
 8008f26:	d12a      	bne.n	8008f7e <LoRaMacProcess+0x8d2>
        MacCtx.NvmCtx->MacParams.ChannelsNbTrans )
 8008f28:	4b4b      	ldr	r3, [pc, #300]	; (8009058 <LoRaMacProcess+0x9ac>)
    if( MacCtx.ChannelsNbTransCounter >=
 8008f2a:	2082      	movs	r0, #130	; 0x82
        MacCtx.NvmCtx->MacParams.ChannelsNbTrans )
 8008f2c:	58e3      	ldr	r3, [r4, r3]
    if( MacCtx.ChannelsNbTransCounter >=
 8008f2e:	00c0      	lsls	r0, r0, #3
        MacCtx.NvmCtx->MacParams.ChannelsNbTrans )
 8008f30:	001a      	movs	r2, r3
 8008f32:	32ff      	adds	r2, #255	; 0xff
    if( MacCtx.ChannelsNbTransCounter >=
 8008f34:	5c20      	ldrb	r0, [r4, r0]
 8008f36:	7e52      	ldrb	r2, [r2, #25]
 8008f38:	4290      	cmp	r0, r2
 8008f3a:	d209      	bcs.n	8008f50 <LoRaMacProcess+0x8a4>
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8008f3c:	078a      	lsls	r2, r1, #30
 8008f3e:	d555      	bpl.n	8008fec <LoRaMacProcess+0x940>
        if( MacCtx.NvmCtx->DeviceClass == CLASS_A )
 8008f40:	33f0      	adds	r3, #240	; 0xf0
 8008f42:	781b      	ldrb	r3, [r3, #0]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d003      	beq.n	8008f50 <LoRaMacProcess+0x8a4>
            if( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 )
 8008f48:	4b44      	ldr	r3, [pc, #272]	; (800905c <LoRaMacProcess+0x9b0>)
 8008f4a:	5ce3      	ldrb	r3, [r4, r3]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d14d      	bne.n	8008fec <LoRaMacProcess+0x940>
            TimerStop( &MacCtx.TxDelayedTimer );
 8008f50:	4843      	ldr	r0, [pc, #268]	; (8009060 <LoRaMacProcess+0x9b4>)
 8008f52:	f003 fd1f 	bl	800c994 <TimerStop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8008f56:	22d0      	movs	r2, #208	; 0xd0
 8008f58:	2320      	movs	r3, #32
 8008f5a:	0092      	lsls	r2, r2, #2
 8008f5c:	58a1      	ldr	r1, [r4, r2]
 8008f5e:	4399      	bics	r1, r3
 8008f60:	50a1      	str	r1, [r4, r2]
            StopRetransmission( );
 8008f62:	f7fe f8d9 	bl	8007118 <StopRetransmission>
 8008f66:	e4c0      	b.n	80088ea <LoRaMacProcess+0x23e>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 8008f68:	0038      	movs	r0, r7
 8008f6a:	f001 f9c9 	bl	800a300 <LoRaMacConfirmQueueIsCmdActive>
 8008f6e:	2800      	cmp	r0, #0
 8008f70:	d1cc      	bne.n	8008f0c <LoRaMacProcess+0x860>
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
 8008f72:	2005      	movs	r0, #5
 8008f74:	f001 f9c4 	bl	800a300 <LoRaMacConfirmQueueIsCmdActive>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 8008f78:	2800      	cmp	r0, #0
 8008f7a:	d1c7      	bne.n	8008f0c <LoRaMacProcess+0x860>
 8008f7c:	e7ca      	b.n	8008f14 <LoRaMacProcess+0x868>
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 8008f7e:	2b01      	cmp	r3, #1
 8008f80:	d134      	bne.n	8008fec <LoRaMacProcess+0x940>
            if( MacCtx.AckTimeoutRetry == true )
 8008f82:	4b38      	ldr	r3, [pc, #224]	; (8009064 <LoRaMacProcess+0x9b8>)
 8008f84:	5ce2      	ldrb	r2, [r4, r3]
 8008f86:	2a00      	cmp	r2, #0
 8008f88:	d100      	bne.n	8008f8c <LoRaMacProcess+0x8e0>
 8008f8a:	e4ae      	b.n	80088ea <LoRaMacProcess+0x23e>
    if( MacCtx.AckTimeoutRetriesCounter >=
 8008f8c:	4836      	ldr	r0, [pc, #216]	; (8009068 <LoRaMacProcess+0x9bc>)
        MacCtx.AckTimeoutRetries )
 8008f8e:	4e37      	ldr	r6, [pc, #220]	; (800906c <LoRaMacProcess+0x9c0>)
    if( MacCtx.AckTimeoutRetriesCounter >=
 8008f90:	5c23      	ldrb	r3, [r4, r0]
        MacCtx.AckTimeoutRetries )
 8008f92:	5da7      	ldrb	r7, [r4, r6]
 8008f94:	9003      	str	r0, [sp, #12]
    if( MacCtx.AckTimeoutRetriesCounter >=
 8008f96:	42bb      	cmp	r3, r7
 8008f98:	d205      	bcs.n	8008fa6 <LoRaMacProcess+0x8fa>
    return false;
 8008f9a:	2200      	movs	r2, #0
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8008f9c:	0789      	lsls	r1, r1, #30
 8008f9e:	d502      	bpl.n	8008fa6 <LoRaMacProcess+0x8fa>
        if( MacCtx.McpsConfirm.AckReceived == true )
 8008fa0:	2288      	movs	r2, #136	; 0x88
 8008fa2:	00d2      	lsls	r2, r2, #3
 8008fa4:	5ca2      	ldrb	r2, [r4, r2]
                if( MacCtx.NvmCtx->Version.Fields.Minor == 0 )
 8008fa6:	21e9      	movs	r1, #233	; 0xe9
 8008fa8:	4e2b      	ldr	r6, [pc, #172]	; (8009058 <LoRaMacProcess+0x9ac>)
 8008faa:	0049      	lsls	r1, r1, #1
 8008fac:	59a0      	ldr	r0, [r4, r6]
 8008fae:	5c41      	ldrb	r1, [r0, r1]
 8008fb0:	2900      	cmp	r1, #0
 8008fb2:	d13b      	bne.n	800902c <LoRaMacProcess+0x980>
                    if( stopRetransmission == false )
 8008fb4:	2a00      	cmp	r2, #0
 8008fb6:	d123      	bne.n	8009000 <LoRaMacProcess+0x954>
    if( MacCtx.AckTimeoutRetriesCounter < MacCtx.AckTimeoutRetries )
 8008fb8:	42bb      	cmp	r3, r7
 8008fba:	d217      	bcs.n	8008fec <LoRaMacProcess+0x940>
        MacCtx.AckTimeoutRetriesCounter++;
 8008fbc:	3301      	adds	r3, #1
 8008fbe:	9a03      	ldr	r2, [sp, #12]
 8008fc0:	b2db      	uxtb	r3, r3
 8008fc2:	54a3      	strb	r3, [r4, r2]
        if( ( MacCtx.AckTimeoutRetriesCounter % 2 ) == 1 )
 8008fc4:	07db      	lsls	r3, r3, #31
 8008fc6:	d511      	bpl.n	8008fec <LoRaMacProcess+0x940>
            getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8008fc8:	2322      	movs	r3, #34	; 0x22
 8008fca:	a916      	add	r1, sp, #88	; 0x58
 8008fcc:	700b      	strb	r3, [r1, #0]
            getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8008fce:	330b      	adds	r3, #11
 8008fd0:	33ff      	adds	r3, #255	; 0xff
 8008fd2:	5cc3      	ldrb	r3, [r0, r3]
 8008fd4:	708b      	strb	r3, [r1, #2]
            getPhy.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8008fd6:	0003      	movs	r3, r0
 8008fd8:	33f9      	adds	r3, #249	; 0xf9
 8008fda:	781b      	ldrb	r3, [r3, #0]
 8008fdc:	704b      	strb	r3, [r1, #1]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8008fde:	7800      	ldrb	r0, [r0, #0]
 8008fe0:	f001 ff0e 	bl	800ae00 <RegionGetPhyParam>
            MacCtx.NvmCtx->MacParams.ChannelsDatarate = phyParam.Value;
 8008fe4:	59a3      	ldr	r3, [r4, r6]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8008fe6:	9020      	str	r0, [sp, #128]	; 0x80
            MacCtx.NvmCtx->MacParams.ChannelsDatarate = phyParam.Value;
 8008fe8:	33f9      	adds	r3, #249	; 0xf9
 8008fea:	7018      	strb	r0, [r3, #0]
            MacCtx.MacFlags.Bits.MacDone = 0;
 8008fec:	2220      	movs	r2, #32
            MacCtx.AckTimeoutRetry = false;
 8008fee:	2000      	movs	r0, #0
            MacCtx.MacFlags.Bits.MacDone = 0;
 8008ff0:	5d63      	ldrb	r3, [r4, r5]
 8008ff2:	4393      	bics	r3, r2
 8008ff4:	5563      	strb	r3, [r4, r5]
            MacCtx.AckTimeoutRetry = false;
 8008ff6:	4b1b      	ldr	r3, [pc, #108]	; (8009064 <LoRaMacProcess+0x9b8>)
 8008ff8:	54e0      	strb	r0, [r4, r3]
            OnTxDelayedTimerEvent( NULL );
 8008ffa:	f7ff f973 	bl	80082e4 <OnTxDelayedTimerEvent>
 8008ffe:	e474      	b.n	80088ea <LoRaMacProcess+0x23e>
    if( MacCtx.McpsConfirm.AckReceived == false )
 8009000:	2788      	movs	r7, #136	; 0x88
 8009002:	00ff      	lsls	r7, r7, #3
 8009004:	5de6      	ldrb	r6, [r4, r7]
 8009006:	2e00      	cmp	r6, #0
 8009008:	d10b      	bne.n	8009022 <LoRaMacProcess+0x976>
        params.Type = INIT_TYPE_RESTORE_DEFAULT_CHANNELS;
 800900a:	2301      	movs	r3, #1
 800900c:	a920      	add	r1, sp, #128	; 0x80
 800900e:	710b      	strb	r3, [r1, #4]
        params.NvmCtx = Contexts.RegionNvmCtx;
 8009010:	4b17      	ldr	r3, [pc, #92]	; (8009070 <LoRaMacProcess+0x9c4>)
        RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 8009012:	7800      	ldrb	r0, [r0, #0]
        params.NvmCtx = Contexts.RegionNvmCtx;
 8009014:	689b      	ldr	r3, [r3, #8]
 8009016:	9320      	str	r3, [sp, #128]	; 0x80
        RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 8009018:	f001 ff05 	bl	800ae26 <RegionInitDefaults>
        MacCtx.NodeAckRequested = false;
 800901c:	4b15      	ldr	r3, [pc, #84]	; (8009074 <LoRaMacProcess+0x9c8>)
        MacCtx.McpsConfirm.AckReceived = false;
 800901e:	55e6      	strb	r6, [r4, r7]
        MacCtx.NodeAckRequested = false;
 8009020:	54e6      	strb	r6, [r4, r3]
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 8009022:	9b03      	ldr	r3, [sp, #12]
 8009024:	5ce2      	ldrb	r2, [r4, r3]
 8009026:	4b14      	ldr	r3, [pc, #80]	; (8009078 <LoRaMacProcess+0x9cc>)
 8009028:	54e2      	strb	r2, [r4, r3]
 800902a:	e791      	b.n	8008f50 <LoRaMacProcess+0x8a4>
        if( stopRetransmission == true )
 800902c:	2a00      	cmp	r2, #0
 800902e:	d0dd      	beq.n	8008fec <LoRaMacProcess+0x940>
 8009030:	e78e      	b.n	8008f50 <LoRaMacProcess+0x8a4>
 8009032:	46c0      	nop			; (mov r8, r8)
 8009034:	0000043d 	.word	0x0000043d
 8009038:	2000091c 	.word	0x2000091c
 800903c:	0000043c 	.word	0x0000043c
 8009040:	0000041f 	.word	0x0000041f
 8009044:	00000481 	.word	0x00000481
 8009048:	20000b54 	.word	0x20000b54
 800904c:	0000041c 	.word	0x0000041c
 8009050:	0000041d 	.word	0x0000041d
 8009054:	00000424 	.word	0x00000424
 8009058:	00000484 	.word	0x00000484
 800905c:	0000042d 	.word	0x0000042d
 8009060:	20000c84 	.word	0x20000c84
 8009064:	00000413 	.word	0x00000413
 8009068:	00000412 	.word	0x00000412
 800906c:	00000411 	.word	0x00000411
 8009070:	200015f0 	.word	0x200015f0
 8009074:	00000414 	.word	0x00000414
 8009078:	00000441 	.word	0x00000441

0800907c <LoRaMacInitialization>:
    return 0;
}


LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 800907c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800907e:	b091      	sub	sp, #68	; 0x44
 8009080:	0007      	movs	r7, r0
 8009082:	9100      	str	r1, [sp, #0]
 8009084:	9201      	str	r2, [sp, #4]
    LoRaMacClassBParams_t classBParams;

    if( ( primitives == NULL ) ||
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8009086:	2303      	movs	r3, #3
    if( ( primitives == NULL ) ||
 8009088:	2800      	cmp	r0, #0
 800908a:	d100      	bne.n	800908e <LoRaMacInitialization+0x12>
 800908c:	e15b      	b.n	8009346 <LoRaMacInitialization+0x2ca>
 800908e:	2900      	cmp	r1, #0
 8009090:	d100      	bne.n	8009094 <LoRaMacInitialization+0x18>
 8009092:	e158      	b.n	8009346 <LoRaMacInitialization+0x2ca>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8009094:	6802      	ldr	r2, [r0, #0]
 8009096:	2a00      	cmp	r2, #0
 8009098:	d100      	bne.n	800909c <LoRaMacInitialization+0x20>
 800909a:	e154      	b.n	8009346 <LoRaMacInitialization+0x2ca>
 800909c:	6842      	ldr	r2, [r0, #4]
 800909e:	2a00      	cmp	r2, #0
 80090a0:	d100      	bne.n	80090a4 <LoRaMacInitialization+0x28>
 80090a2:	e150      	b.n	8009346 <LoRaMacInitialization+0x2ca>
        ( primitives->MacMcpsIndication == NULL ) ||
 80090a4:	6882      	ldr	r2, [r0, #8]
 80090a6:	2a00      	cmp	r2, #0
 80090a8:	d100      	bne.n	80090ac <LoRaMacInitialization+0x30>
 80090aa:	e14c      	b.n	8009346 <LoRaMacInitialization+0x2ca>
        ( primitives->MacMlmeConfirm == NULL ) ||
 80090ac:	68c2      	ldr	r2, [r0, #12]
 80090ae:	2a00      	cmp	r2, #0
 80090b0:	d100      	bne.n	80090b4 <LoRaMacInitialization+0x38>
 80090b2:	e148      	b.n	8009346 <LoRaMacInitialization+0x2ca>
        ( primitives->MacMlmeIndication == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 80090b4:	9801      	ldr	r0, [sp, #4]
 80090b6:	f001 fea0 	bl	800adfa <RegionIsActive>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 80090ba:	2309      	movs	r3, #9
    if( RegionIsActive( region ) == false )
 80090bc:	2800      	cmp	r0, #0
 80090be:	d100      	bne.n	80090c2 <LoRaMacInitialization+0x46>
 80090c0:	e141      	b.n	8009346 <LoRaMacInitialization+0x2ca>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives, EventConfirmQueueNvmCtxChanged );
 80090c2:	0038      	movs	r0, r7
 80090c4:	49c2      	ldr	r1, [pc, #776]	; (80093d0 <LoRaMacInitialization+0x354>)
 80090c6:	f001 f863 	bl	800a190 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &NvmMacCtx, 0x00, sizeof( LoRaMacNvmCtx_t ) );
 80090ca:	22ee      	movs	r2, #238	; 0xee
 80090cc:	4ec1      	ldr	r6, [pc, #772]	; (80093d4 <LoRaMacInitialization+0x358>)
 80090ce:	0052      	lsls	r2, r2, #1
 80090d0:	0030      	movs	r0, r6
 80090d2:	2100      	movs	r1, #0
 80090d4:	f003 fd64 	bl	800cba0 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 80090d8:	2291      	movs	r2, #145	; 0x91
 80090da:	4cbf      	ldr	r4, [pc, #764]	; (80093d8 <LoRaMacInitialization+0x35c>)
 80090dc:	00d2      	lsls	r2, r2, #3
 80090de:	2100      	movs	r1, #0
 80090e0:	0020      	movs	r0, r4
 80090e2:	f003 fd5d 	bl	800cba0 <memset1>
    MacCtx.NvmCtx = &NvmMacCtx;

    // Set non zero variables to its default value
    MacCtx.AckTimeoutRetriesCounter = 1;
 80090e6:	2001      	movs	r0, #1
 80090e8:	4bbc      	ldr	r3, [pc, #752]	; (80093dc <LoRaMacInitialization+0x360>)
    MacCtx.AckTimeoutRetries = 1;
    MacCtx.NvmCtx->Region = region;
    MacCtx.NvmCtx->DeviceClass = CLASS_A;
 80090ea:	2200      	movs	r2, #0
    MacCtx.AckTimeoutRetriesCounter = 1;
 80090ec:	54e0      	strb	r0, [r4, r3]
    MacCtx.AckTimeoutRetries = 1;
 80090ee:	4bbc      	ldr	r3, [pc, #752]	; (80093e0 <LoRaMacInitialization+0x364>)
    MacCtx.NvmCtx = &NvmMacCtx;
 80090f0:	4dbc      	ldr	r5, [pc, #752]	; (80093e4 <LoRaMacInitialization+0x368>)
    MacCtx.AckTimeoutRetries = 1;
 80090f2:	54e0      	strb	r0, [r4, r3]
    MacCtx.NvmCtx->Region = region;
 80090f4:	9b01      	ldr	r3, [sp, #4]
    lrWanVersion.Fields.Revision = 3;
    lrWanVersion.Fields.Rfu      = 0;
    MacCtx.NvmCtx->Version = lrWanVersion;

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 80090f6:	a902      	add	r1, sp, #8
    MacCtx.NvmCtx->Region = region;
 80090f8:	7033      	strb	r3, [r6, #0]
    MacCtx.NvmCtx->DeviceClass = CLASS_A;
 80090fa:	0033      	movs	r3, r6
 80090fc:	33f0      	adds	r3, #240	; 0xf0
 80090fe:	701a      	strb	r2, [r3, #0]
    MacCtx.NvmCtx->RepeaterSupport = false;
 8009100:	2340      	movs	r3, #64	; 0x40
 8009102:	33ff      	adds	r3, #255	; 0xff
 8009104:	54f2      	strb	r2, [r6, r3]
    MacCtx.NvmCtx->Version = lrWanVersion;
 8009106:	4ab8      	ldr	r2, [pc, #736]	; (80093e8 <LoRaMacInitialization+0x36c>)
 8009108:	3391      	adds	r3, #145	; 0x91
 800910a:	50f2      	str	r2, [r6, r3]
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800910c:	3bc2      	subs	r3, #194	; 0xc2
 800910e:	3bff      	subs	r3, #255	; 0xff
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009110:	9801      	ldr	r0, [sp, #4]
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8009112:	700b      	strb	r3, [r1, #0]
    MacCtx.NvmCtx = &NvmMacCtx;
 8009114:	5166      	str	r6, [r4, r5]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009116:	f001 fe73 	bl	800ae00 <RegionGetPhyParam>
 800911a:	9003      	str	r0, [sp, #12]
    MacCtx.NvmCtx->DutyCycleOn = ( bool ) phyParam.Value;
 800911c:	1e42      	subs	r2, r0, #1
 800911e:	4190      	sbcs	r0, r2
 8009120:	223e      	movs	r2, #62	; 0x3e
 8009122:	5963      	ldr	r3, [r4, r5]
 8009124:	32ff      	adds	r2, #255	; 0xff
 8009126:	5498      	strb	r0, [r3, r2]

    getPhy.Attribute = PHY_DEF_TX_POWER;
 8009128:	3a34      	subs	r2, #52	; 0x34
 800912a:	3aff      	subs	r2, #255	; 0xff
 800912c:	a902      	add	r1, sp, #8
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800912e:	7818      	ldrb	r0, [r3, #0]
    getPhy.Attribute = PHY_DEF_TX_POWER;
 8009130:	700a      	strb	r2, [r1, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009132:	f001 fe65 	bl	800ae00 <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower = phyParam.Value;

    getPhy.Attribute = PHY_DEF_TX_DR;
 8009136:	2106      	movs	r1, #6
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower = phyParam.Value;
 8009138:	5963      	ldr	r3, [r4, r5]
    getPhy.Attribute = PHY_DEF_TX_DR;
 800913a:	ae02      	add	r6, sp, #8
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower = phyParam.Value;
 800913c:	7118      	strb	r0, [r3, #4]
    getPhy.Attribute = PHY_DEF_TX_DR;
 800913e:	7031      	strb	r1, [r6, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009140:	9003      	str	r0, [sp, #12]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009142:	0031      	movs	r1, r6
 8009144:	7818      	ldrb	r0, [r3, #0]
 8009146:	f001 fe5b 	bl	800ae00 <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate = phyParam.Value;

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 800914a:	2210      	movs	r2, #16
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate = phyParam.Value;
 800914c:	5963      	ldr	r3, [r4, r5]
    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 800914e:	ae02      	add	r6, sp, #8
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate = phyParam.Value;
 8009150:	7158      	strb	r0, [r3, #5]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009152:	0031      	movs	r1, r6
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009154:	9003      	str	r0, [sp, #12]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009156:	7818      	ldrb	r0, [r3, #0]
    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 8009158:	7032      	strb	r2, [r6, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800915a:	f001 fe51 	bl	800ae00 <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.MaxRxWindow = phyParam.Value;

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 800915e:	2211      	movs	r2, #17
    MacCtx.NvmCtx->MacParamsDefaults.MaxRxWindow = phyParam.Value;
 8009160:	5963      	ldr	r3, [r4, r5]
    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 8009162:	ae02      	add	r6, sp, #8
    MacCtx.NvmCtx->MacParamsDefaults.MaxRxWindow = phyParam.Value;
 8009164:	6118      	str	r0, [r3, #16]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009166:	0031      	movs	r1, r6
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009168:	9003      	str	r0, [sp, #12]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800916a:	7818      	ldrb	r0, [r3, #0]
    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 800916c:	7032      	strb	r2, [r6, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800916e:	f001 fe47 	bl	800ae00 <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay1 = phyParam.Value;

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 8009172:	2212      	movs	r2, #18
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 8009174:	5963      	ldr	r3, [r4, r5]
    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 8009176:	ae02      	add	r6, sp, #8
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 8009178:	6158      	str	r0, [r3, #20]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800917a:	0031      	movs	r1, r6
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800917c:	9003      	str	r0, [sp, #12]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800917e:	7818      	ldrb	r0, [r3, #0]
    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 8009180:	7032      	strb	r2, [r6, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009182:	f001 fe3d 	bl	800ae00 <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay2 = phyParam.Value;

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 8009186:	2213      	movs	r2, #19
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 8009188:	5963      	ldr	r3, [r4, r5]
    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 800918a:	ae02      	add	r6, sp, #8
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 800918c:	6198      	str	r0, [r3, #24]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800918e:	0031      	movs	r1, r6
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009190:	9003      	str	r0, [sp, #12]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009192:	7818      	ldrb	r0, [r3, #0]
    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 8009194:	7032      	strb	r2, [r6, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009196:	f001 fe33 	bl	800ae00 <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 800919a:	2614      	movs	r6, #20
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 800919c:	5963      	ldr	r3, [r4, r5]
    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 800919e:	aa02      	add	r2, sp, #8
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 80091a0:	61d8      	str	r0, [r3, #28]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80091a2:	0011      	movs	r1, r2
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80091a4:	9003      	str	r0, [sp, #12]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80091a6:	7818      	ldrb	r0, [r3, #0]
    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 80091a8:	7016      	strb	r6, [r2, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80091aa:	f001 fe29 	bl	800ae00 <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 80091ae:	2217      	movs	r2, #23
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 80091b0:	5963      	ldr	r3, [r4, r5]
    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 80091b2:	a902      	add	r1, sp, #8
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 80091b4:	6218      	str	r0, [r3, #32]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80091b6:	9003      	str	r0, [sp, #12]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80091b8:	7818      	ldrb	r0, [r3, #0]
    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 80091ba:	700a      	strb	r2, [r1, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80091bc:	f001 fe20 	bl	800ae00 <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 80091c0:	5963      	ldr	r3, [r4, r5]

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 80091c2:	a902      	add	r1, sp, #8
    MacCtx.NvmCtx->MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 80091c4:	1d9a      	adds	r2, r3, #6
 80091c6:	77d0      	strb	r0, [r2, #31]
    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 80091c8:	2218      	movs	r2, #24
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80091ca:	9003      	str	r0, [sp, #12]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80091cc:	7818      	ldrb	r0, [r3, #0]
    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 80091ce:	700a      	strb	r2, [r1, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80091d0:	f001 fe16 	bl	800ae00 <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
    MacCtx.NvmCtx->MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;

    getPhy.Attribute = PHY_DEF_RX2_DR;
 80091d4:	2219      	movs	r2, #25
    MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 80091d6:	5963      	ldr	r3, [r4, r5]
    getPhy.Attribute = PHY_DEF_RX2_DR;
 80091d8:	a902      	add	r1, sp, #8
    MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 80091da:	6298      	str	r0, [r3, #40]	; 0x28
    MacCtx.NvmCtx->MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 80091dc:	6318      	str	r0, [r3, #48]	; 0x30
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80091de:	9003      	str	r0, [sp, #12]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80091e0:	7818      	ldrb	r0, [r3, #0]
    getPhy.Attribute = PHY_DEF_RX2_DR;
 80091e2:	700a      	strb	r2, [r1, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80091e4:	f001 fe0c 	bl	800ae00 <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 80091e8:	5963      	ldr	r3, [r4, r5]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80091ea:	9003      	str	r0, [sp, #12]
    MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 80091ec:	001a      	movs	r2, r3
 80091ee:	b2c0      	uxtb	r0, r0
 80091f0:	322c      	adds	r2, #44	; 0x2c
 80091f2:	7010      	strb	r0, [r2, #0]
    MacCtx.NvmCtx->MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 80091f4:	7210      	strb	r0, [r2, #8]

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 80091f6:	221e      	movs	r2, #30
 80091f8:	a902      	add	r1, sp, #8
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80091fa:	7818      	ldrb	r0, [r3, #0]
    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 80091fc:	700a      	strb	r2, [r1, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80091fe:	f001 fdff 	bl	800ae00 <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 8009202:	5963      	ldr	r3, [r4, r5]

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 8009204:	a902      	add	r1, sp, #8
    MacCtx.NvmCtx->MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 8009206:	001a      	movs	r2, r3
 8009208:	3238      	adds	r2, #56	; 0x38
 800920a:	7010      	strb	r0, [r2, #0]
    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 800920c:	221f      	movs	r2, #31
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800920e:	9003      	str	r0, [sp, #12]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009210:	7818      	ldrb	r0, [r3, #0]
    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 8009212:	700a      	strb	r2, [r1, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009214:	f001 fdf4 	bl	800ae00 <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 8009218:	5963      	ldr	r3, [r4, r5]

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 800921a:	a902      	add	r1, sp, #8
    MacCtx.NvmCtx->MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 800921c:	001a      	movs	r2, r3
 800921e:	3239      	adds	r2, #57	; 0x39
 8009220:	7010      	strb	r0, [r2, #0]
    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 8009222:	2220      	movs	r2, #32
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009224:	9003      	str	r0, [sp, #12]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009226:	7818      	ldrb	r0, [r3, #0]
    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 8009228:	700a      	strb	r2, [r1, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800922a:	f001 fde9 	bl	800ae00 <RegionGetPhyParam>
 800922e:	9003      	str	r0, [sp, #12]
    MacCtx.NvmCtx->MacParamsDefaults.MaxEirp = phyParam.fValue;
 8009230:	5963      	ldr	r3, [r4, r5]
 8009232:	9a03      	ldr	r2, [sp, #12]

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 8009234:	a902      	add	r1, sp, #8
    MacCtx.NvmCtx->MacParamsDefaults.MaxEirp = phyParam.fValue;
 8009236:	63da      	str	r2, [r3, #60]	; 0x3c
    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 8009238:	2221      	movs	r2, #33	; 0x21
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800923a:	7818      	ldrb	r0, [r3, #0]
    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 800923c:	700a      	strb	r2, [r1, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800923e:	f001 fddf 	bl	800ae00 <RegionGetPhyParam>
 8009242:	9003      	str	r0, [sp, #12]
    MacCtx.NvmCtx->MacParamsDefaults.AntennaGain = phyParam.fValue;
 8009244:	5963      	ldr	r3, [r4, r5]
 8009246:	9a03      	ldr	r2, [sp, #12]

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 8009248:	a902      	add	r1, sp, #8
    MacCtx.NvmCtx->MacParamsDefaults.AntennaGain = phyParam.fValue;
 800924a:	641a      	str	r2, [r3, #64]	; 0x40
    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 800924c:	220b      	movs	r2, #11
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800924e:	7818      	ldrb	r0, [r3, #0]
    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 8009250:	700a      	strb	r2, [r1, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009252:	f001 fdd5 	bl	800ae00 <RegionGetPhyParam>
    MacCtx.AdrAckLimit = phyParam.Value;
 8009256:	23fd      	movs	r3, #253	; 0xfd
 8009258:	009b      	lsls	r3, r3, #2
 800925a:	52e0      	strh	r0, [r4, r3]

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 800925c:	230c      	movs	r3, #12
 800925e:	aa02      	add	r2, sp, #8
 8009260:	7013      	strb	r3, [r2, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009262:	5963      	ldr	r3, [r4, r5]
 8009264:	0011      	movs	r1, r2
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009266:	9003      	str	r0, [sp, #12]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009268:	7818      	ldrb	r0, [r3, #0]
 800926a:	f001 fdc9 	bl	800ae00 <RegionGetPhyParam>
    MacCtx.AdrAckDelay = phyParam.Value;
 800926e:	4b5f      	ldr	r3, [pc, #380]	; (80093ec <LoRaMacInitialization+0x370>)
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009270:	9003      	str	r0, [sp, #12]
    MacCtx.AdrAckDelay = phyParam.Value;
 8009272:	52e0      	strh	r0, [r4, r3]

    // Init parameters which are not set in function ResetMacParameters
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsNbTrans = 1;
    MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError = 20;
    MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols = 6;
 8009274:	2106      	movs	r1, #6
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsNbTrans = 1;
 8009276:	2001      	movs	r0, #1
 8009278:	5963      	ldr	r3, [r4, r5]
 800927a:	1d5a      	adds	r2, r3, #5
 800927c:	77d0      	strb	r0, [r2, #31]
    MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols = 6;
 800927e:	7319      	strb	r1, [r3, #12]

    MacCtx.NvmCtx->MacParams.SystemMaxRxError = MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError;
    MacCtx.NvmCtx->MacParams.MinRxSymbols = MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols;
 8009280:	0019      	movs	r1, r3
    MacCtx.NvmCtx->MacParams.SystemMaxRxError = MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError;
 8009282:	32f7      	adds	r2, #247	; 0xf7
    MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError = 20;
 8009284:	609e      	str	r6, [r3, #8]
    MacCtx.NvmCtx->MacParams.MinRxSymbols = MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols;
 8009286:	31ff      	adds	r1, #255	; 0xff
    MacCtx.NvmCtx->MacParams.SystemMaxRxError = MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError;
 8009288:	6016      	str	r6, [r2, #0]
    MacCtx.NvmCtx->MacParams.MinRxSymbols = MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols;
 800928a:	3e0e      	subs	r6, #14
 800928c:	704e      	strb	r6, [r1, #1]
    MacCtx.NvmCtx->MacParams.MaxRxWindow = MacCtx.NvmCtx->MacParamsDefaults.MaxRxWindow;
 800928e:	691e      	ldr	r6, [r3, #16]
 8009290:	6096      	str	r6, [r2, #8]
    MacCtx.NvmCtx->MacParams.ReceiveDelay1 = MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay1;
 8009292:	695e      	ldr	r6, [r3, #20]
 8009294:	60d6      	str	r6, [r2, #12]
    MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay2;
 8009296:	699e      	ldr	r6, [r3, #24]
 8009298:	6116      	str	r6, [r2, #16]
    MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 = MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay1;
 800929a:	69de      	ldr	r6, [r3, #28]
    MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 = MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay2;
 800929c:	6a1b      	ldr	r3, [r3, #32]
    MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 = MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay1;
 800929e:	6156      	str	r6, [r2, #20]
    MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 = MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay2;
 80092a0:	6193      	str	r3, [r2, #24]
    MacCtx.NvmCtx->MacParams.ChannelsNbTrans = MacCtx.NvmCtx->MacParamsDefaults.ChannelsNbTrans;
 80092a2:	7648      	strb	r0, [r1, #25]
 80092a4:	0006      	movs	r6, r0

    ResetMacParameters( );
 80092a6:	f7fe f86b 	bl	8007380 <ResetMacParameters>

    MacCtx.NvmCtx->PublicNetwork = true;
 80092aa:	5963      	ldr	r3, [r4, r5]
    // Reset duty cycle times
    MacCtx.NvmCtx->LastTxDoneTime = 0;
    MacCtx.NvmCtx->AggregatedTimeOff = 0;

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 80092ac:	4850      	ldr	r0, [pc, #320]	; (80093f0 <LoRaMacInitialization+0x374>)
    MacCtx.NvmCtx->PublicNetwork = true;
 80092ae:	0019      	movs	r1, r3
 80092b0:	31f1      	adds	r1, #241	; 0xf1
 80092b2:	000a      	movs	r2, r1
 80092b4:	7016      	strb	r6, [r2, #0]
    MacCtx.MacPrimitives = primitives;
 80092b6:	22d1      	movs	r2, #209	; 0xd1
 80092b8:	0092      	lsls	r2, r2, #2
 80092ba:	50a7      	str	r7, [r4, r2]
    MacCtx.MacFlags.Value = 0;
 80092bc:	2700      	movs	r7, #0
    MacCtx.MacCallbacks = callbacks;
 80092be:	9900      	ldr	r1, [sp, #0]
 80092c0:	3204      	adds	r2, #4
 80092c2:	50a1      	str	r1, [r4, r2]
    MacCtx.MacFlags.Value = 0;
 80092c4:	4a4b      	ldr	r2, [pc, #300]	; (80093f4 <LoRaMacInitialization+0x378>)
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 80092c6:	494c      	ldr	r1, [pc, #304]	; (80093f8 <LoRaMacInitialization+0x37c>)
    MacCtx.MacFlags.Value = 0;
 80092c8:	54a7      	strb	r7, [r4, r2]
    MacCtx.MacState = LORAMAC_STOPPED;
 80092ca:	3a42      	subs	r2, #66	; 0x42
 80092cc:	3aff      	subs	r2, #255	; 0xff
 80092ce:	50a6      	str	r6, [r4, r2]
    MacCtx.NvmCtx->LastTxDoneTime = 0;
 80092d0:	3a7d      	subs	r2, #125	; 0x7d
 80092d2:	3aff      	subs	r2, #255	; 0xff
 80092d4:	509f      	str	r7, [r3, r2]
    MacCtx.NvmCtx->AggregatedTimeOff = 0;
 80092d6:	3204      	adds	r2, #4
 80092d8:	509f      	str	r7, [r3, r2]
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 80092da:	f003 fad5 	bl	800c888 <TimerInit>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 80092de:	4947      	ldr	r1, [pc, #284]	; (80093fc <LoRaMacInitialization+0x380>)
 80092e0:	4847      	ldr	r0, [pc, #284]	; (8009400 <LoRaMacInitialization+0x384>)
 80092e2:	f003 fad1 	bl	800c888 <TimerInit>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 80092e6:	4947      	ldr	r1, [pc, #284]	; (8009404 <LoRaMacInitialization+0x388>)
 80092e8:	4847      	ldr	r0, [pc, #284]	; (8009408 <LoRaMacInitialization+0x38c>)
 80092ea:	f003 facd 	bl	800c888 <TimerInit>
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
 80092ee:	4947      	ldr	r1, [pc, #284]	; (800940c <LoRaMacInitialization+0x390>)
 80092f0:	4847      	ldr	r0, [pc, #284]	; (8009410 <LoRaMacInitialization+0x394>)
 80092f2:	f003 fac9 	bl	800c888 <TimerInit>

    // Store the current initialization time
    MacCtx.NvmCtx->InitializationTime = TimerGetCurrentTime( );
 80092f6:	5966      	ldr	r6, [r4, r5]
 80092f8:	f003 fb89 	bl	800ca0e <TimerGetCurrentTime>
 80092fc:	23e6      	movs	r3, #230	; 0xe6
 80092fe:	005b      	lsls	r3, r3, #1
 8009300:	50f0      	str	r0, [r6, r3]

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 8009302:	4a44      	ldr	r2, [pc, #272]	; (8009414 <LoRaMacInitialization+0x398>)
 8009304:	3381      	adds	r3, #129	; 0x81
 8009306:	33ff      	adds	r3, #255	; 0xff
 8009308:	50e2      	str	r2, [r4, r3]
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 800930a:	4a43      	ldr	r2, [pc, #268]	; (8009418 <LoRaMacInitialization+0x39c>)
 800930c:	3308      	adds	r3, #8
 800930e:	50e2      	str	r2, [r4, r3]
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 8009310:	4a42      	ldr	r2, [pc, #264]	; (800941c <LoRaMacInitialization+0x3a0>)
 8009312:	3308      	adds	r3, #8
 8009314:	50e2      	str	r2, [r4, r3]
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 8009316:	4a42      	ldr	r2, [pc, #264]	; (8009420 <LoRaMacInitialization+0x3a4>)
 8009318:	3b0c      	subs	r3, #12
 800931a:	50e2      	str	r2, [r4, r3]
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
    Radio.Init( &MacCtx.RadioEvents );
 800931c:	4e41      	ldr	r6, [pc, #260]	; (8009424 <LoRaMacInitialization+0x3a8>)
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 800931e:	4a42      	ldr	r2, [pc, #264]	; (8009428 <LoRaMacInitialization+0x3ac>)
 8009320:	3308      	adds	r3, #8
 8009322:	50e2      	str	r2, [r4, r3]
    Radio.Init( &MacCtx.RadioEvents );
 8009324:	68b3      	ldr	r3, [r6, #8]
 8009326:	4841      	ldr	r0, [pc, #260]	; (800942c <LoRaMacInitialization+0x3b0>)
 8009328:	9301      	str	r3, [sp, #4]
 800932a:	4798      	blx	r3

    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_INIT;
    params.NvmCtx = NULL;
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 800932c:	5963      	ldr	r3, [r4, r5]
    params.Type = INIT_TYPE_INIT;
 800932e:	a906      	add	r1, sp, #24
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 8009330:	7818      	ldrb	r0, [r3, #0]
    params.Type = INIT_TYPE_INIT;
 8009332:	710f      	strb	r7, [r1, #4]
    params.NvmCtx = NULL;
 8009334:	9706      	str	r7, [sp, #24]
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 8009336:	f001 fd76 	bl	800ae26 <RegionInitDefaults>

    // Initialize the Secure Element driver
    if( SecureElementInit( EventSecureElementNvmCtxChanged ) != SECURE_ELEMENT_SUCCESS )
 800933a:	483d      	ldr	r0, [pc, #244]	; (8009430 <LoRaMacInitialization+0x3b4>)
 800933c:	f7fd fd06 	bl	8006d4c <SecureElementInit>
 8009340:	42b8      	cmp	r0, r7
 8009342:	d003      	beq.n	800934c <LoRaMacInitialization+0x2d0>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8009344:	2311      	movs	r3, #17
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &EventClassBNvmCtxChanged );

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );

    return LORAMAC_STATUS_OK;
}
 8009346:	0018      	movs	r0, r3
 8009348:	b011      	add	sp, #68	; 0x44
 800934a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( LoRaMacCryptoInit( EventCryptoNvmCtxChanged ) != LORAMAC_CRYPTO_SUCCESS )
 800934c:	4839      	ldr	r0, [pc, #228]	; (8009434 <LoRaMacInitialization+0x3b8>)
 800934e:	f001 f955 	bl	800a5fc <LoRaMacCryptoInit>
 8009352:	2800      	cmp	r0, #0
 8009354:	d1f6      	bne.n	8009344 <LoRaMacInitialization+0x2c8>
    if( LoRaMacCommandsInit( EventCommandsNvmCtxChanged ) != LORAMAC_COMMANDS_SUCCESS )
 8009356:	4838      	ldr	r0, [pc, #224]	; (8009438 <LoRaMacInitialization+0x3bc>)
 8009358:	f000 fe02 	bl	8009f60 <LoRaMacCommandsInit>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800935c:	2313      	movs	r3, #19
    if( LoRaMacCommandsInit( EventCommandsNvmCtxChanged ) != LORAMAC_COMMANDS_SUCCESS )
 800935e:	2800      	cmp	r0, #0
 8009360:	d1f1      	bne.n	8009346 <LoRaMacInitialization+0x2ca>
    if( LoRaMacCryptoSetMulticastReference( MacCtx.NvmCtx->MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 8009362:	5960      	ldr	r0, [r4, r5]
 8009364:	3050      	adds	r0, #80	; 0x50
 8009366:	f001 f9df 	bl	800a728 <LoRaMacCryptoSetMulticastReference>
 800936a:	1e07      	subs	r7, r0, #0
 800936c:	d1ea      	bne.n	8009344 <LoRaMacInitialization+0x2c8>
    srand1( Radio.Random( ) );
 800936e:	69f3      	ldr	r3, [r6, #28]
 8009370:	9301      	str	r3, [sp, #4]
 8009372:	4798      	blx	r3
 8009374:	f003 fbee 	bl	800cb54 <srand1>
    Radio.SetPublicNetwork( MacCtx.NvmCtx->PublicNetwork );
 8009378:	5963      	ldr	r3, [r4, r5]
 800937a:	33f1      	adds	r3, #241	; 0xf1
 800937c:	7818      	ldrb	r0, [r3, #0]
 800937e:	6e33      	ldr	r3, [r6, #96]	; 0x60
 8009380:	9301      	str	r3, [sp, #4]
 8009382:	4798      	blx	r3
    Radio.Sleep( );
 8009384:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8009386:	9301      	str	r3, [sp, #4]
 8009388:	4798      	blx	r3
        classBCallbacks.GetTemperatureLevel = callbacks->GetTemperatureLevel;
 800938a:	9b00      	ldr	r3, [sp, #0]
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &EventClassBNvmCtxChanged );
 800938c:	a904      	add	r1, sp, #16
        classBCallbacks.GetTemperatureLevel = callbacks->GetTemperatureLevel;
 800938e:	685b      	ldr	r3, [r3, #4]
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &EventClassBNvmCtxChanged );
 8009390:	a808      	add	r0, sp, #32
        classBCallbacks.GetTemperatureLevel = callbacks->GetTemperatureLevel;
 8009392:	9301      	str	r3, [sp, #4]
 8009394:	9304      	str	r3, [sp, #16]
        classBCallbacks.MacProcessNotify = callbacks->MacProcessNotify;
 8009396:	9b00      	ldr	r3, [sp, #0]
 8009398:	68db      	ldr	r3, [r3, #12]
 800939a:	9300      	str	r3, [sp, #0]
 800939c:	9305      	str	r3, [sp, #20]
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 800939e:	4b27      	ldr	r3, [pc, #156]	; (800943c <LoRaMacInitialization+0x3c0>)
 80093a0:	9308      	str	r3, [sp, #32]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 80093a2:	4b27      	ldr	r3, [pc, #156]	; (8009440 <LoRaMacInitialization+0x3c4>)
 80093a4:	9309      	str	r3, [sp, #36]	; 0x24
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 80093a6:	4b27      	ldr	r3, [pc, #156]	; (8009444 <LoRaMacInitialization+0x3c8>)
 80093a8:	930a      	str	r3, [sp, #40]	; 0x28
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 80093aa:	4b27      	ldr	r3, [pc, #156]	; (8009448 <LoRaMacInitialization+0x3cc>)
 80093ac:	930b      	str	r3, [sp, #44]	; 0x2c
    classBParams.LoRaMacDevAddr = &MacCtx.NvmCtx->DevAddr;
 80093ae:	5963      	ldr	r3, [r4, r5]
 80093b0:	001a      	movs	r2, r3
 80093b2:	324c      	adds	r2, #76	; 0x4c
 80093b4:	920c      	str	r2, [sp, #48]	; 0x30
    classBParams.LoRaMacParams = &MacCtx.NvmCtx->MacParams;
 80093b6:	32ac      	adds	r2, #172	; 0xac
    classBParams.LoRaMacRegion = &MacCtx.NvmCtx->Region;
 80093b8:	930d      	str	r3, [sp, #52]	; 0x34
    classBParams.LoRaMacParams = &MacCtx.NvmCtx->MacParams;
 80093ba:	920e      	str	r2, [sp, #56]	; 0x38
    classBParams.MulticastChannels = &MacCtx.NvmCtx->MulticastChannelList[0];
 80093bc:	3350      	adds	r3, #80	; 0x50
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &EventClassBNvmCtxChanged );
 80093be:	4a23      	ldr	r2, [pc, #140]	; (800944c <LoRaMacInitialization+0x3d0>)
    classBParams.MulticastChannels = &MacCtx.NvmCtx->MulticastChannelList[0];
 80093c0:	930f      	str	r3, [sp, #60]	; 0x3c
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &EventClassBNvmCtxChanged );
 80093c2:	f000 fd95 	bl	8009ef0 <LoRaMacClassBInit>
    MacCtx.AllowRequests = requestState;
 80093c6:	2201      	movs	r2, #1
 80093c8:	4b21      	ldr	r3, [pc, #132]	; (8009450 <LoRaMacInitialization+0x3d4>)
 80093ca:	54e2      	strb	r2, [r4, r3]
    return LORAMAC_STATUS_OK;
 80093cc:	003b      	movs	r3, r7
 80093ce:	e7ba      	b.n	8009346 <LoRaMacInitialization+0x2ca>
 80093d0:	080071d1 	.word	0x080071d1
 80093d4:	20000740 	.word	0x20000740
 80093d8:	2000091c 	.word	0x2000091c
 80093dc:	00000412 	.word	0x00000412
 80093e0:	00000411 	.word	0x00000411
 80093e4:	00000484 	.word	0x00000484
 80093e8:	01000300 	.word	0x01000300
 80093ec:	000003f6 	.word	0x000003f6
 80093f0:	20000c84 	.word	0x20000c84
 80093f4:	00000481 	.word	0x00000481
 80093f8:	080082e5 	.word	0x080082e5
 80093fc:	080077bd 	.word	0x080077bd
 8009400:	20000c9c 	.word	0x20000c9c
 8009404:	08007825 	.word	0x08007825
 8009408:	20000cb4 	.word	0x20000cb4
 800940c:	08007219 	.word	0x08007219
 8009410:	20000d14 	.word	0x20000d14
 8009414:	080075c9 	.word	0x080075c9
 8009418:	08007561 	.word	0x08007561
 800941c:	080070cd 	.word	0x080070cd
 8009420:	08007515 	.word	0x08007515
 8009424:	0800eaa4 	.word	0x0800eaa4
 8009428:	080074c9 	.word	0x080074c9
 800942c:	20000c68 	.word	0x20000c68
 8009430:	080071b3 	.word	0x080071b3
 8009434:	080071a9 	.word	0x080071a9
 8009438:	080071bd 	.word	0x080071bd
 800943c:	20000d80 	.word	0x20000d80
 8009440:	20000d38 	.word	0x20000d38
 8009444:	20000d6c 	.word	0x20000d6c
 8009448:	20000d9d 	.word	0x20000d9d
 800944c:	080071c7 	.word	0x080071c7
 8009450:	00000482 	.word	0x00000482

08009454 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
    MacCtx.MacState = LORAMAC_IDLE;
 8009454:	23d0      	movs	r3, #208	; 0xd0
 8009456:	2000      	movs	r0, #0
 8009458:	4a01      	ldr	r2, [pc, #4]	; (8009460 <LoRaMacStart+0xc>)
 800945a:	009b      	lsls	r3, r3, #2
 800945c:	50d0      	str	r0, [r2, r3]
    return LORAMAC_STATUS_OK;
}
 800945e:	4770      	bx	lr
 8009460:	2000091c 	.word	0x2000091c

08009464 <LoRaMacQueryTxPossible>:
    }
    return LORAMAC_STATUS_BUSY;
}

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 8009464:	b5f0      	push	{r4, r5, r6, r7, lr}
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 8009466:	4b2e      	ldr	r3, [pc, #184]	; (8009520 <LoRaMacQueryTxPossible+0xbc>)
{
 8009468:	000c      	movs	r4, r1
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 800946a:	492e      	ldr	r1, [pc, #184]	; (8009524 <LoRaMacQueryTxPossible+0xc0>)
    int8_t datarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
    int8_t txPower = MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower;
    size_t macCmdsSize = 0;
 800946c:	2700      	movs	r7, #0
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 800946e:	58cb      	ldr	r3, [r1, r3]
{
 8009470:	b08b      	sub	sp, #44	; 0x2c
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 8009472:	001a      	movs	r2, r3
 8009474:	32f4      	adds	r2, #244	; 0xf4
 8009476:	6816      	ldr	r6, [r2, #0]
{
 8009478:	9001      	str	r0, [sp, #4]
    int8_t datarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
 800947a:	aa02      	add	r2, sp, #8
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 800947c:	9603      	str	r6, [sp, #12]
    int8_t datarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
 800947e:	1c95      	adds	r5, r2, #2
 8009480:	795a      	ldrb	r2, [r3, #5]
 8009482:	702a      	strb	r2, [r5, #0]
    int8_t txPower = MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower;
 8009484:	7918      	ldrb	r0, [r3, #4]
 8009486:	aa02      	add	r2, sp, #8
 8009488:	3203      	adds	r2, #3
 800948a:	7010      	strb	r0, [r2, #0]
    size_t macCmdsSize = 0;
 800948c:	9704      	str	r7, [sp, #16]

    if( txInfo == NULL )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800948e:	2003      	movs	r0, #3
    if( txInfo == NULL )
 8009490:	42bc      	cmp	r4, r7
 8009492:	d03e      	beq.n	8009512 <LoRaMacQueryTxPossible+0xae>
    }

    // Setup ADR request
    adrNext.Version = MacCtx.NvmCtx->Version;
 8009494:	37d1      	adds	r7, #209	; 0xd1
 8009496:	37ff      	adds	r7, #255	; 0xff
 8009498:	59df      	ldr	r7, [r3, r7]
 800949a:	a805      	add	r0, sp, #20
 800949c:	9705      	str	r7, [sp, #20]
    adrNext.UpdateChanMask = false;
 800949e:	2700      	movs	r7, #0
 80094a0:	7107      	strb	r7, [r0, #4]
    adrNext.AdrEnabled = MacCtx.NvmCtx->AdrCtrlOn;
 80094a2:	001f      	movs	r7, r3
 80094a4:	37f2      	adds	r7, #242	; 0xf2
 80094a6:	783f      	ldrb	r7, [r7, #0]
    adrNext.AdrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 80094a8:	6086      	str	r6, [r0, #8]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 80094aa:	26fd      	movs	r6, #253	; 0xfd
    adrNext.AdrEnabled = MacCtx.NvmCtx->AdrCtrlOn;
 80094ac:	7147      	strb	r7, [r0, #5]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 80094ae:	00b6      	lsls	r6, r6, #2
 80094b0:	5b8e      	ldrh	r6, [r1, r6]
 80094b2:	8186      	strh	r6, [r0, #12]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 80094b4:	4e1c      	ldr	r6, [pc, #112]	; (8009528 <LoRaMacQueryTxPossible+0xc4>)
 80094b6:	5b89      	ldrh	r1, [r1, r6]
 80094b8:	81c1      	strh	r1, [r0, #14]
    adrNext.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 80094ba:	0019      	movs	r1, r3
 80094bc:	31f9      	adds	r1, #249	; 0xf9
 80094be:	7809      	ldrb	r1, [r1, #0]
 80094c0:	7401      	strb	r1, [r0, #16]
    adrNext.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 80094c2:	0019      	movs	r1, r3
 80094c4:	31f8      	adds	r1, #248	; 0xf8
 80094c6:	7809      	ldrb	r1, [r1, #0]
 80094c8:	7441      	strb	r1, [r0, #17]
    adrNext.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 80094ca:	2196      	movs	r1, #150	; 0x96
 80094cc:	0049      	lsls	r1, r1, #1
 80094ce:	5c59      	ldrb	r1, [r3, r1]
 80094d0:	7481      	strb	r1, [r0, #18]
    adrNext.Region = MacCtx.NvmCtx->Region;
 80094d2:	781b      	ldrb	r3, [r3, #0]

    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 80094d4:	0029      	movs	r1, r5
    adrNext.Region = MacCtx.NvmCtx->Region;
 80094d6:	74c3      	strb	r3, [r0, #19]
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 80094d8:	ab03      	add	r3, sp, #12
 80094da:	f000 fca3 	bl	8009e24 <LoRaMacAdrCalcNext>

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 80094de:	2000      	movs	r0, #0
 80094e0:	5628      	ldrsb	r0, [r5, r0]
 80094e2:	f7fd fe7b 	bl	80071dc <GetMaxAppPayloadWithoutFOptsLength>
 80094e6:	7060      	strb	r0, [r4, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 80094e8:	a804      	add	r0, sp, #16
 80094ea:	f000 fe09 	bl	800a100 <LoRaMacCommandsGetSizeSerializedCmds>
 80094ee:	0003      	movs	r3, r0
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80094f0:	2013      	movs	r0, #19
    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d10d      	bne.n	8009512 <LoRaMacQueryTxPossible+0xae>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 80094f6:	9804      	ldr	r0, [sp, #16]
 80094f8:	280f      	cmp	r0, #15
 80094fa:	d80c      	bhi.n	8009516 <LoRaMacQueryTxPossible+0xb2>
 80094fc:	7863      	ldrb	r3, [r4, #1]
 80094fe:	4298      	cmp	r0, r3
 8009500:	d809      	bhi.n	8009516 <LoRaMacQueryTxPossible+0xb2>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 8009502:	1a1a      	subs	r2, r3, r0
 8009504:	7022      	strb	r2, [r4, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 8009506:	9a01      	ldr	r2, [sp, #4]
 8009508:	1810      	adds	r0, r2, r0
        {
            return LORAMAC_STATUS_OK;
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 800950a:	4283      	cmp	r3, r0
 800950c:	4180      	sbcs	r0, r0
 800950e:	4240      	negs	r0, r0
 8009510:	00c0      	lsls	r0, r0, #3
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
        return LORAMAC_STATUS_LENGTH_ERROR;
    }
}
 8009512:	b00b      	add	sp, #44	; 0x2c
 8009514:	bdf0      	pop	{r4, r5, r6, r7, pc}
        txInfo->MaxPossibleApplicationDataSize = 0;
 8009516:	2300      	movs	r3, #0
        return LORAMAC_STATUS_LENGTH_ERROR;
 8009518:	2008      	movs	r0, #8
        txInfo->MaxPossibleApplicationDataSize = 0;
 800951a:	7023      	strb	r3, [r4, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 800951c:	e7f9      	b.n	8009512 <LoRaMacQueryTxPossible+0xae>
 800951e:	46c0      	nop			; (mov r8, r8)
 8009520:	00000484 	.word	0x00000484
 8009524:	2000091c 	.word	0x2000091c
 8009528:	000003f6 	.word	0x000003f6

0800952c <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 800952c:	b513      	push	{r0, r1, r4, lr}
 800952e:	0004      	movs	r4, r0
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8009530:	2003      	movs	r0, #3
    if( mibGet == NULL )
 8009532:	2c00      	cmp	r4, #0
 8009534:	d02e      	beq.n	8009594 <LoRaMacMibGetRequestConfirm+0x68>
    }

    switch( mibGet->Type )
 8009536:	7820      	ldrb	r0, [r4, #0]
 8009538:	2834      	cmp	r0, #52	; 0x34
 800953a:	d900      	bls.n	800953e <LoRaMacMibGetRequestConfirm+0x12>
 800953c:	e0ca      	b.n	80096d4 <LoRaMacMibGetRequestConfirm+0x1a8>
 800953e:	f7f6 fde3 	bl	8000108 <__gnu_thumb1_case_uqi>
 8009542:	211b      	.short	0x211b
 8009544:	36312e2a 	.word	0x36312e2a
 8009548:	c9c9c93c 	.word	0xc9c9c93c
 800954c:	c9c9c9c9 	.word	0xc9c9c9c9
 8009550:	c9c9c9c9 	.word	0xc9c9c9c9
 8009554:	c9c9c9c9 	.word	0xc9c9c9c9
 8009558:	c9c9c9c9 	.word	0xc9c9c9c9
 800955c:	41c9c9c9 	.word	0x41c9c9c9
 8009560:	5e574c46 	.word	0x5e574c46
 8009564:	72746c66 	.word	0x72746c66
 8009568:	88827c76 	.word	0x88827c76
 800956c:	9f9a948e 	.word	0x9f9a948e
 8009570:	b4aea4a9 	.word	0xb4aea4a9
 8009574:	c4ba      	.short	0xc4ba
 8009576:	c1          	.byte	0xc1
 8009577:	00          	.byte	0x00
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = MacCtx.NvmCtx->DeviceClass;
 8009578:	4a58      	ldr	r2, [pc, #352]	; (80096dc <LoRaMacMibGetRequestConfirm+0x1b0>)
 800957a:	4b59      	ldr	r3, [pc, #356]	; (80096e0 <LoRaMacMibGetRequestConfirm+0x1b4>)
 800957c:	58d3      	ldr	r3, [r2, r3]
 800957e:	33f0      	adds	r3, #240	; 0xf0
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
            break;
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = MacCtx.NvmCtx->AdrCtrlOn;
 8009580:	781b      	ldrb	r3, [r3, #0]
 8009582:	e005      	b.n	8009590 <LoRaMacMibGetRequestConfirm+0x64>
            mibGet->Param.NetworkActivation = MacCtx.NvmCtx->NetworkActivation;
 8009584:	4b56      	ldr	r3, [pc, #344]	; (80096e0 <LoRaMacMibGetRequestConfirm+0x1b4>)
 8009586:	4a55      	ldr	r2, [pc, #340]	; (80096dc <LoRaMacMibGetRequestConfirm+0x1b0>)
 8009588:	58d2      	ldr	r2, [r2, r3]
 800958a:	23ea      	movs	r3, #234	; 0xea
 800958c:	005b      	lsls	r3, r3, #1
 800958e:	5cd3      	ldrb	r3, [r2, r3]
 8009590:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009592:	2000      	movs	r0, #0
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
            break;
        }
    }
    return status;
}
 8009594:	bd16      	pop	{r1, r2, r4, pc}
            mibGet->Param.DevEui = SecureElementGetDevEui( );
 8009596:	f7fd fd7f 	bl	8007098 <SecureElementGetDevEui>
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 800959a:	6060      	str	r0, [r4, #4]
 800959c:	e7f9      	b.n	8009592 <LoRaMacMibGetRequestConfirm+0x66>
 800959e:	f7fd fd91 	bl	80070c4 <SecureElementGetJoinEui>
 80095a2:	e7fa      	b.n	800959a <LoRaMacMibGetRequestConfirm+0x6e>
            mibGet->Param.AdrEnable = MacCtx.NvmCtx->AdrCtrlOn;
 80095a4:	4a4d      	ldr	r2, [pc, #308]	; (80096dc <LoRaMacMibGetRequestConfirm+0x1b0>)
 80095a6:	4b4e      	ldr	r3, [pc, #312]	; (80096e0 <LoRaMacMibGetRequestConfirm+0x1b4>)
 80095a8:	58d3      	ldr	r3, [r2, r3]
 80095aa:	33f2      	adds	r3, #242	; 0xf2
 80095ac:	e7e8      	b.n	8009580 <LoRaMacMibGetRequestConfirm+0x54>
            mibGet->Param.NetID = MacCtx.NvmCtx->NetID;
 80095ae:	4a4b      	ldr	r2, [pc, #300]	; (80096dc <LoRaMacMibGetRequestConfirm+0x1b0>)
 80095b0:	4b4b      	ldr	r3, [pc, #300]	; (80096e0 <LoRaMacMibGetRequestConfirm+0x1b4>)
 80095b2:	58d3      	ldr	r3, [r2, r3]
 80095b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
            mibGet->Param.SystemMaxRxError = MacCtx.NvmCtx->MacParams.SystemMaxRxError;
 80095b6:	6063      	str	r3, [r4, #4]
 80095b8:	e7eb      	b.n	8009592 <LoRaMacMibGetRequestConfirm+0x66>
            mibGet->Param.DevAddr = MacCtx.NvmCtx->DevAddr;
 80095ba:	4a48      	ldr	r2, [pc, #288]	; (80096dc <LoRaMacMibGetRequestConfirm+0x1b0>)
 80095bc:	4b48      	ldr	r3, [pc, #288]	; (80096e0 <LoRaMacMibGetRequestConfirm+0x1b4>)
 80095be:	58d3      	ldr	r3, [r2, r3]
 80095c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80095c2:	e7f8      	b.n	80095b6 <LoRaMacMibGetRequestConfirm+0x8a>
            mibGet->Param.EnablePublicNetwork = MacCtx.NvmCtx->PublicNetwork;
 80095c4:	4a45      	ldr	r2, [pc, #276]	; (80096dc <LoRaMacMibGetRequestConfirm+0x1b0>)
 80095c6:	4b46      	ldr	r3, [pc, #280]	; (80096e0 <LoRaMacMibGetRequestConfirm+0x1b4>)
 80095c8:	58d3      	ldr	r3, [r2, r3]
 80095ca:	33f1      	adds	r3, #241	; 0xf1
 80095cc:	e7d8      	b.n	8009580 <LoRaMacMibGetRequestConfirm+0x54>
            mibGet->Param.EnableRepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 80095ce:	4b44      	ldr	r3, [pc, #272]	; (80096e0 <LoRaMacMibGetRequestConfirm+0x1b4>)
 80095d0:	4a42      	ldr	r2, [pc, #264]	; (80096dc <LoRaMacMibGetRequestConfirm+0x1b0>)
 80095d2:	58d2      	ldr	r2, [r2, r3]
 80095d4:	2340      	movs	r3, #64	; 0x40
 80095d6:	33ff      	adds	r3, #255	; 0xff
 80095d8:	e7d9      	b.n	800958e <LoRaMacMibGetRequestConfirm+0x62>
            getPhy.Attribute = PHY_CHANNELS;
 80095da:	231d      	movs	r3, #29
            getPhy.Attribute = PHY_CHANNELS_MASK;
 80095dc:	466a      	mov	r2, sp
 80095de:	7013      	strb	r3, [r2, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80095e0:	4a3e      	ldr	r2, [pc, #248]	; (80096dc <LoRaMacMibGetRequestConfirm+0x1b0>)
 80095e2:	4b3f      	ldr	r3, [pc, #252]	; (80096e0 <LoRaMacMibGetRequestConfirm+0x1b4>)
 80095e4:	4669      	mov	r1, sp
 80095e6:	58d3      	ldr	r3, [r2, r3]
 80095e8:	7818      	ldrb	r0, [r3, #0]
 80095ea:	f001 fc09 	bl	800ae00 <RegionGetPhyParam>
 80095ee:	e7d4      	b.n	800959a <LoRaMacMibGetRequestConfirm+0x6e>
            mibGet->Param.Rx2Channel = MacCtx.NvmCtx->MacParams.Rx2Channel;
 80095f0:	4a3a      	ldr	r2, [pc, #232]	; (80096dc <LoRaMacMibGetRequestConfirm+0x1b0>)
 80095f2:	4b3b      	ldr	r3, [pc, #236]	; (80096e0 <LoRaMacMibGetRequestConfirm+0x1b4>)
 80095f4:	3404      	adds	r4, #4
 80095f6:	58d3      	ldr	r3, [r2, r3]
 80095f8:	331d      	adds	r3, #29
            mibGet->Param.RxCChannel = MacCtx.NvmCtx->MacParams.RxCChannel;
 80095fa:	33ff      	adds	r3, #255	; 0xff
 80095fc:	e004      	b.n	8009608 <LoRaMacMibGetRequestConfirm+0xdc>
            mibGet->Param.Rx2Channel = MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel;
 80095fe:	4a37      	ldr	r2, [pc, #220]	; (80096dc <LoRaMacMibGetRequestConfirm+0x1b0>)
 8009600:	4b37      	ldr	r3, [pc, #220]	; (80096e0 <LoRaMacMibGetRequestConfirm+0x1b4>)
 8009602:	3404      	adds	r4, #4
 8009604:	58d3      	ldr	r3, [r2, r3]
 8009606:	3328      	adds	r3, #40	; 0x28
            mibGet->Param.RxCChannel = MacCtx.NvmCtx->MacParamsDefaults.RxCChannel;
 8009608:	cb06      	ldmia	r3!, {r1, r2}
 800960a:	c406      	stmia	r4!, {r1, r2}
 800960c:	e7c1      	b.n	8009592 <LoRaMacMibGetRequestConfirm+0x66>
            mibGet->Param.RxCChannel = MacCtx.NvmCtx->MacParams.RxCChannel;
 800960e:	4a33      	ldr	r2, [pc, #204]	; (80096dc <LoRaMacMibGetRequestConfirm+0x1b0>)
 8009610:	4b33      	ldr	r3, [pc, #204]	; (80096e0 <LoRaMacMibGetRequestConfirm+0x1b4>)
 8009612:	3404      	adds	r4, #4
 8009614:	58d3      	ldr	r3, [r2, r3]
 8009616:	3325      	adds	r3, #37	; 0x25
 8009618:	e7ef      	b.n	80095fa <LoRaMacMibGetRequestConfirm+0xce>
            mibGet->Param.RxCChannel = MacCtx.NvmCtx->MacParamsDefaults.RxCChannel;
 800961a:	4a30      	ldr	r2, [pc, #192]	; (80096dc <LoRaMacMibGetRequestConfirm+0x1b0>)
 800961c:	4b30      	ldr	r3, [pc, #192]	; (80096e0 <LoRaMacMibGetRequestConfirm+0x1b4>)
 800961e:	3404      	adds	r4, #4
 8009620:	58d3      	ldr	r3, [r2, r3]
 8009622:	3330      	adds	r3, #48	; 0x30
 8009624:	e7f0      	b.n	8009608 <LoRaMacMibGetRequestConfirm+0xdc>
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 8009626:	231b      	movs	r3, #27
 8009628:	e7d8      	b.n	80095dc <LoRaMacMibGetRequestConfirm+0xb0>
            getPhy.Attribute = PHY_CHANNELS_MASK;
 800962a:	231a      	movs	r3, #26
 800962c:	e7d6      	b.n	80095dc <LoRaMacMibGetRequestConfirm+0xb0>
            mibGet->Param.ChannelsNbTrans = MacCtx.NvmCtx->MacParams.ChannelsNbTrans;
 800962e:	4a2b      	ldr	r2, [pc, #172]	; (80096dc <LoRaMacMibGetRequestConfirm+0x1b0>)
 8009630:	4b2b      	ldr	r3, [pc, #172]	; (80096e0 <LoRaMacMibGetRequestConfirm+0x1b4>)
 8009632:	58d3      	ldr	r3, [r2, r3]
 8009634:	33ff      	adds	r3, #255	; 0xff
 8009636:	7e5b      	ldrb	r3, [r3, #25]
 8009638:	e7aa      	b.n	8009590 <LoRaMacMibGetRequestConfirm+0x64>
            mibGet->Param.MaxRxWindow = MacCtx.NvmCtx->MacParams.MaxRxWindow;
 800963a:	4a28      	ldr	r2, [pc, #160]	; (80096dc <LoRaMacMibGetRequestConfirm+0x1b0>)
 800963c:	4b28      	ldr	r3, [pc, #160]	; (80096e0 <LoRaMacMibGetRequestConfirm+0x1b4>)
 800963e:	58d3      	ldr	r3, [r2, r3]
 8009640:	33fc      	adds	r3, #252	; 0xfc
 8009642:	689b      	ldr	r3, [r3, #8]
 8009644:	e7b7      	b.n	80095b6 <LoRaMacMibGetRequestConfirm+0x8a>
            mibGet->Param.ReceiveDelay1 = MacCtx.NvmCtx->MacParams.ReceiveDelay1;
 8009646:	4a25      	ldr	r2, [pc, #148]	; (80096dc <LoRaMacMibGetRequestConfirm+0x1b0>)
 8009648:	4b25      	ldr	r3, [pc, #148]	; (80096e0 <LoRaMacMibGetRequestConfirm+0x1b4>)
 800964a:	58d3      	ldr	r3, [r2, r3]
 800964c:	33fc      	adds	r3, #252	; 0xfc
 800964e:	68db      	ldr	r3, [r3, #12]
 8009650:	e7b1      	b.n	80095b6 <LoRaMacMibGetRequestConfirm+0x8a>
            mibGet->Param.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay2;
 8009652:	4a22      	ldr	r2, [pc, #136]	; (80096dc <LoRaMacMibGetRequestConfirm+0x1b0>)
 8009654:	4b22      	ldr	r3, [pc, #136]	; (80096e0 <LoRaMacMibGetRequestConfirm+0x1b4>)
 8009656:	58d3      	ldr	r3, [r2, r3]
 8009658:	33fc      	adds	r3, #252	; 0xfc
 800965a:	691b      	ldr	r3, [r3, #16]
 800965c:	e7ab      	b.n	80095b6 <LoRaMacMibGetRequestConfirm+0x8a>
            mibGet->Param.JoinAcceptDelay1 = MacCtx.NvmCtx->MacParams.JoinAcceptDelay1;
 800965e:	4a1f      	ldr	r2, [pc, #124]	; (80096dc <LoRaMacMibGetRequestConfirm+0x1b0>)
 8009660:	4b1f      	ldr	r3, [pc, #124]	; (80096e0 <LoRaMacMibGetRequestConfirm+0x1b4>)
 8009662:	58d3      	ldr	r3, [r2, r3]
 8009664:	33fc      	adds	r3, #252	; 0xfc
 8009666:	695b      	ldr	r3, [r3, #20]
 8009668:	e7a5      	b.n	80095b6 <LoRaMacMibGetRequestConfirm+0x8a>
            mibGet->Param.JoinAcceptDelay2 = MacCtx.NvmCtx->MacParams.JoinAcceptDelay2;
 800966a:	4a1c      	ldr	r2, [pc, #112]	; (80096dc <LoRaMacMibGetRequestConfirm+0x1b0>)
 800966c:	4b1c      	ldr	r3, [pc, #112]	; (80096e0 <LoRaMacMibGetRequestConfirm+0x1b4>)
 800966e:	58d3      	ldr	r3, [r2, r3]
 8009670:	33fc      	adds	r3, #252	; 0xfc
 8009672:	699b      	ldr	r3, [r3, #24]
 8009674:	e79f      	b.n	80095b6 <LoRaMacMibGetRequestConfirm+0x8a>
            mibGet->Param.ChannelsDefaultDatarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
 8009676:	4a19      	ldr	r2, [pc, #100]	; (80096dc <LoRaMacMibGetRequestConfirm+0x1b0>)
 8009678:	4b19      	ldr	r3, [pc, #100]	; (80096e0 <LoRaMacMibGetRequestConfirm+0x1b4>)
 800967a:	58d3      	ldr	r3, [r2, r3]
 800967c:	795b      	ldrb	r3, [r3, #5]
 800967e:	e787      	b.n	8009590 <LoRaMacMibGetRequestConfirm+0x64>
            mibGet->Param.ChannelsDatarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8009680:	4a16      	ldr	r2, [pc, #88]	; (80096dc <LoRaMacMibGetRequestConfirm+0x1b0>)
 8009682:	4b17      	ldr	r3, [pc, #92]	; (80096e0 <LoRaMacMibGetRequestConfirm+0x1b4>)
 8009684:	58d3      	ldr	r3, [r2, r3]
 8009686:	33f9      	adds	r3, #249	; 0xf9
 8009688:	e77a      	b.n	8009580 <LoRaMacMibGetRequestConfirm+0x54>
            mibGet->Param.ChannelsDefaultTxPower = MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower;
 800968a:	4a14      	ldr	r2, [pc, #80]	; (80096dc <LoRaMacMibGetRequestConfirm+0x1b0>)
 800968c:	4b14      	ldr	r3, [pc, #80]	; (80096e0 <LoRaMacMibGetRequestConfirm+0x1b4>)
 800968e:	58d3      	ldr	r3, [r2, r3]
 8009690:	791b      	ldrb	r3, [r3, #4]
 8009692:	e77d      	b.n	8009590 <LoRaMacMibGetRequestConfirm+0x64>
            mibGet->Param.ChannelsTxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 8009694:	4a11      	ldr	r2, [pc, #68]	; (80096dc <LoRaMacMibGetRequestConfirm+0x1b0>)
 8009696:	4b12      	ldr	r3, [pc, #72]	; (80096e0 <LoRaMacMibGetRequestConfirm+0x1b4>)
 8009698:	58d3      	ldr	r3, [r2, r3]
 800969a:	33f8      	adds	r3, #248	; 0xf8
 800969c:	e770      	b.n	8009580 <LoRaMacMibGetRequestConfirm+0x54>
            mibGet->Param.SystemMaxRxError = MacCtx.NvmCtx->MacParams.SystemMaxRxError;
 800969e:	4a0f      	ldr	r2, [pc, #60]	; (80096dc <LoRaMacMibGetRequestConfirm+0x1b0>)
 80096a0:	4b0f      	ldr	r3, [pc, #60]	; (80096e0 <LoRaMacMibGetRequestConfirm+0x1b4>)
 80096a2:	58d3      	ldr	r3, [r2, r3]
 80096a4:	33fc      	adds	r3, #252	; 0xfc
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	e785      	b.n	80095b6 <LoRaMacMibGetRequestConfirm+0x8a>
            mibGet->Param.MinRxSymbols = MacCtx.NvmCtx->MacParams.MinRxSymbols;
 80096aa:	4a0c      	ldr	r2, [pc, #48]	; (80096dc <LoRaMacMibGetRequestConfirm+0x1b0>)
 80096ac:	4b0c      	ldr	r3, [pc, #48]	; (80096e0 <LoRaMacMibGetRequestConfirm+0x1b4>)
 80096ae:	58d3      	ldr	r3, [r2, r3]
 80096b0:	33ff      	adds	r3, #255	; 0xff
 80096b2:	785b      	ldrb	r3, [r3, #1]
 80096b4:	e76c      	b.n	8009590 <LoRaMacMibGetRequestConfirm+0x64>
            mibGet->Param.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 80096b6:	4a09      	ldr	r2, [pc, #36]	; (80096dc <LoRaMacMibGetRequestConfirm+0x1b0>)
 80096b8:	4b09      	ldr	r3, [pc, #36]	; (80096e0 <LoRaMacMibGetRequestConfirm+0x1b4>)
 80096ba:	58d3      	ldr	r3, [r2, r3]
 80096bc:	33fc      	adds	r3, #252	; 0xfc
 80096be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            mibGet->Param.DefaultAntennaGain = MacCtx.NvmCtx->MacParamsDefaults.AntennaGain;
 80096c0:	6063      	str	r3, [r4, #4]
 80096c2:	e766      	b.n	8009592 <LoRaMacMibGetRequestConfirm+0x66>
            mibGet->Param.Contexts = GetCtxs( );
 80096c4:	f7fe ff48 	bl	8008558 <GetCtxs>
 80096c8:	e767      	b.n	800959a <LoRaMacMibGetRequestConfirm+0x6e>
            mibGet->Param.DefaultAntennaGain = MacCtx.NvmCtx->MacParamsDefaults.AntennaGain;
 80096ca:	4a04      	ldr	r2, [pc, #16]	; (80096dc <LoRaMacMibGetRequestConfirm+0x1b0>)
 80096cc:	4b04      	ldr	r3, [pc, #16]	; (80096e0 <LoRaMacMibGetRequestConfirm+0x1b4>)
 80096ce:	58d3      	ldr	r3, [r2, r3]
 80096d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096d2:	e7f5      	b.n	80096c0 <LoRaMacMibGetRequestConfirm+0x194>
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 80096d4:	0020      	movs	r0, r4
 80096d6:	f000 fc29 	bl	8009f2c <LoRaMacClassBMibGetRequestConfirm>
            break;
 80096da:	e75b      	b.n	8009594 <LoRaMacMibGetRequestConfirm+0x68>
 80096dc:	2000091c 	.word	0x2000091c
 80096e0:	00000484 	.word	0x00000484

080096e4 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 80096e4:	b570      	push	{r4, r5, r6, lr}
 80096e6:	0004      	movs	r4, r0
 80096e8:	b088      	sub	sp, #32
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80096ea:	2603      	movs	r6, #3
    if( mibSet == NULL )
 80096ec:	2800      	cmp	r0, #0
 80096ee:	d079      	beq.n	80097e4 <LoRaMacMibSetRequestConfirm+0x100>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 80096f0:	23d0      	movs	r3, #208	; 0xd0
 80096f2:	4d91      	ldr	r5, [pc, #580]	; (8009938 <LoRaMacMibSetRequestConfirm+0x254>)
 80096f4:	009b      	lsls	r3, r3, #2
 80096f6:	58eb      	ldr	r3, [r5, r3]
    {
        return LORAMAC_STATUS_BUSY;
 80096f8:	3e02      	subs	r6, #2
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 80096fa:	079b      	lsls	r3, r3, #30
 80096fc:	d472      	bmi.n	80097e4 <LoRaMacMibSetRequestConfirm+0x100>
    }

    switch( mibSet->Type )
 80096fe:	7800      	ldrb	r0, [r0, #0]
 8009700:	2835      	cmp	r0, #53	; 0x35
 8009702:	d900      	bls.n	8009706 <LoRaMacMibSetRequestConfirm+0x22>
 8009704:	e219      	b.n	8009b3a <LoRaMacMibSetRequestConfirm+0x456>
 8009706:	f7f6 fd13 	bl	8000130 <__gnu_thumb1_case_uhi>
 800970a:	0036      	.short	0x0036
 800970c:	0045003b 	.word	0x0045003b
 8009710:	00540050 	.word	0x00540050
 8009714:	005f005a 	.word	0x005f005a
 8009718:	00700064 	.word	0x00700064
 800971c:	007a0075 	.word	0x007a0075
 8009720:	0084007f 	.word	0x0084007f
 8009724:	008e0089 	.word	0x008e0089
 8009728:	00980093 	.word	0x00980093
 800972c:	00a2009d 	.word	0x00a2009d
 8009730:	00ac00a7 	.word	0x00ac00a7
 8009734:	00b600b1 	.word	0x00b600b1
 8009738:	00c000bb 	.word	0x00c000bb
 800973c:	00ca00c5 	.word	0x00ca00c5
 8009740:	00d500cf 	.word	0x00d500cf
 8009744:	00e500db 	.word	0x00e500db
 8009748:	00ec0218 	.word	0x00ec0218
 800974c:	011d0103 	.word	0x011d0103
 8009750:	01760155 	.word	0x01760155
 8009754:	017b0168 	.word	0x017b0168
 8009758:	018b0185 	.word	0x018b0185
 800975c:	01970191 	.word	0x01970191
 8009760:	01a3019d 	.word	0x01a3019d
 8009764:	01da01b4 	.word	0x01da01b4
 8009768:	01ea01c9 	.word	0x01ea01c9
 800976c:	01f801f1 	.word	0x01f801f1
 8009770:	020301fe 	.word	0x020301fe
 8009774:	020a      	.short	0x020a
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 8009776:	7920      	ldrb	r0, [r4, #4]
 8009778:	f7fd ff5e 	bl	8007638 <SwitchClass>
            }
            break;
        }
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 800977c:	0006      	movs	r6, r0
            break;
 800977e:	e00f      	b.n	80097a0 <LoRaMacMibSetRequestConfirm+0xbc>
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 8009780:	7923      	ldrb	r3, [r4, #4]
 8009782:	2b02      	cmp	r3, #2
 8009784:	d00b      	beq.n	800979e <LoRaMacMibSetRequestConfirm+0xba>
                MacCtx.NvmCtx->NetworkActivation = mibSet->Param.NetworkActivation;
 8009786:	4a6d      	ldr	r2, [pc, #436]	; (800993c <LoRaMacMibSetRequestConfirm+0x258>)
 8009788:	58a9      	ldr	r1, [r5, r2]
 800978a:	22ea      	movs	r2, #234	; 0xea
 800978c:	0052      	lsls	r2, r2, #1
 800978e:	548b      	strb	r3, [r1, r2]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009790:	2600      	movs	r6, #0
 8009792:	e005      	b.n	80097a0 <LoRaMacMibSetRequestConfirm+0xbc>
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 8009794:	6860      	ldr	r0, [r4, #4]
 8009796:	f7fd fc6d 	bl	8007074 <SecureElementSetDevEui>
 800979a:	2800      	cmp	r0, #0
 800979c:	d0f8      	beq.n	8009790 <LoRaMacMibSetRequestConfirm+0xac>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800979e:	2603      	movs	r6, #3
        }
    }
    EventRegionNvmCtxChanged( );
 80097a0:	f7fd fcfd 	bl	800719e <EventRegionNvmCtxChanged>
    EventMacNvmCtxChanged( );
 80097a4:	f7fd fcf6 	bl	8007194 <EventMacNvmCtxChanged>
    return status;
 80097a8:	e01c      	b.n	80097e4 <LoRaMacMibSetRequestConfirm+0x100>
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 80097aa:	6860      	ldr	r0, [r4, #4]
 80097ac:	f7fd fc78 	bl	80070a0 <SecureElementSetJoinEui>
 80097b0:	e7f3      	b.n	800979a <LoRaMacMibSetRequestConfirm+0xb6>
            MacCtx.NvmCtx->AdrCtrlOn = mibSet->Param.AdrEnable;
 80097b2:	4b62      	ldr	r3, [pc, #392]	; (800993c <LoRaMacMibSetRequestConfirm+0x258>)
 80097b4:	7922      	ldrb	r2, [r4, #4]
 80097b6:	58eb      	ldr	r3, [r5, r3]
 80097b8:	33f2      	adds	r3, #242	; 0xf2
                MacCtx.NvmCtx->MacParams.ChannelsDatarate = verify.DatarateParams.Datarate;
 80097ba:	701a      	strb	r2, [r3, #0]
 80097bc:	e7e8      	b.n	8009790 <LoRaMacMibSetRequestConfirm+0xac>
            MacCtx.NvmCtx->NetID = mibSet->Param.NetID;
 80097be:	4b5f      	ldr	r3, [pc, #380]	; (800993c <LoRaMacMibSetRequestConfirm+0x258>)
 80097c0:	6862      	ldr	r2, [r4, #4]
 80097c2:	58eb      	ldr	r3, [r5, r3]
 80097c4:	649a      	str	r2, [r3, #72]	; 0x48
 80097c6:	e7e3      	b.n	8009790 <LoRaMacMibSetRequestConfirm+0xac>
            MacCtx.NvmCtx->DevAddr = mibSet->Param.DevAddr;
 80097c8:	4b5c      	ldr	r3, [pc, #368]	; (800993c <LoRaMacMibSetRequestConfirm+0x258>)
 80097ca:	6862      	ldr	r2, [r4, #4]
 80097cc:	58eb      	ldr	r3, [r5, r3]
 80097ce:	64da      	str	r2, [r3, #76]	; 0x4c
 80097d0:	e7de      	b.n	8009790 <LoRaMacMibSetRequestConfirm+0xac>
            if( mibSet->Param.GenAppKey != NULL )
 80097d2:	6861      	ldr	r1, [r4, #4]
 80097d4:	2900      	cmp	r1, #0
 80097d6:	d0e2      	beq.n	800979e <LoRaMacMibSetRequestConfirm+0xba>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( GEN_APP_KEY, mibSet->Param.GenAppKey ) )
 80097d8:	2001      	movs	r0, #1
 80097da:	f001 f8f5 	bl	800a9c8 <LoRaMacCryptoSetKey>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80097de:	2611      	movs	r6, #17
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( GEN_APP_KEY, mibSet->Param.GenAppKey ) )
 80097e0:	2800      	cmp	r0, #0
 80097e2:	d0d5      	beq.n	8009790 <LoRaMacMibSetRequestConfirm+0xac>
}
 80097e4:	0030      	movs	r0, r6
 80097e6:	b008      	add	sp, #32
 80097e8:	bd70      	pop	{r4, r5, r6, pc}
            if( mibSet->Param.AppKey != NULL )
 80097ea:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 80097ec:	2000      	movs	r0, #0
            if( mibSet->Param.AppKey != NULL )
 80097ee:	2900      	cmp	r1, #0
 80097f0:	d1f3      	bne.n	80097da <LoRaMacMibSetRequestConfirm+0xf6>
 80097f2:	e7d4      	b.n	800979e <LoRaMacMibSetRequestConfirm+0xba>
            if( mibSet->Param.NwkKey != NULL )
 80097f4:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 80097f6:	2002      	movs	r0, #2
            if( mibSet->Param.NwkKey != NULL )
 80097f8:	2900      	cmp	r1, #0
 80097fa:	d1ee      	bne.n	80097da <LoRaMacMibSetRequestConfirm+0xf6>
 80097fc:	e7cf      	b.n	800979e <LoRaMacMibSetRequestConfirm+0xba>
            if( mibSet->Param.JSIntKey != NULL )
 80097fe:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( J_S_INT_KEY, mibSet->Param.JSIntKey ) )
 8009800:	2003      	movs	r0, #3
            if( mibSet->Param.JSIntKey != NULL )
 8009802:	2900      	cmp	r1, #0
 8009804:	d1e9      	bne.n	80097da <LoRaMacMibSetRequestConfirm+0xf6>
 8009806:	e7ca      	b.n	800979e <LoRaMacMibSetRequestConfirm+0xba>
            if( mibSet->Param.JSEncKey != NULL )
 8009808:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( J_S_ENC_KEY, mibSet->Param.JSEncKey ) )
 800980a:	2004      	movs	r0, #4
            if( mibSet->Param.JSEncKey != NULL )
 800980c:	2900      	cmp	r1, #0
 800980e:	d1e4      	bne.n	80097da <LoRaMacMibSetRequestConfirm+0xf6>
 8009810:	e7c5      	b.n	800979e <LoRaMacMibSetRequestConfirm+0xba>
            if( mibSet->Param.FNwkSIntKey != NULL )
 8009812:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( F_NWK_S_INT_KEY, mibSet->Param.FNwkSIntKey ) )
 8009814:	2005      	movs	r0, #5
            if( mibSet->Param.FNwkSIntKey != NULL )
 8009816:	2900      	cmp	r1, #0
 8009818:	d1df      	bne.n	80097da <LoRaMacMibSetRequestConfirm+0xf6>
 800981a:	e7c0      	b.n	800979e <LoRaMacMibSetRequestConfirm+0xba>
            if( mibSet->Param.SNwkSIntKey != NULL )
 800981c:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( S_NWK_S_INT_KEY, mibSet->Param.SNwkSIntKey ) )
 800981e:	2006      	movs	r0, #6
            if( mibSet->Param.SNwkSIntKey != NULL )
 8009820:	2900      	cmp	r1, #0
 8009822:	d1da      	bne.n	80097da <LoRaMacMibSetRequestConfirm+0xf6>
 8009824:	e7bb      	b.n	800979e <LoRaMacMibSetRequestConfirm+0xba>
            if( mibSet->Param.NwkSEncKey != NULL )
 8009826:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_ENC_KEY, mibSet->Param.NwkSEncKey ) )
 8009828:	2007      	movs	r0, #7
            if( mibSet->Param.NwkSEncKey != NULL )
 800982a:	2900      	cmp	r1, #0
 800982c:	d1d5      	bne.n	80097da <LoRaMacMibSetRequestConfirm+0xf6>
 800982e:	e7b6      	b.n	800979e <LoRaMacMibSetRequestConfirm+0xba>
            if( mibSet->Param.AppSKey != NULL )
 8009830:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 8009832:	2008      	movs	r0, #8
            if( mibSet->Param.AppSKey != NULL )
 8009834:	2900      	cmp	r1, #0
 8009836:	d1d0      	bne.n	80097da <LoRaMacMibSetRequestConfirm+0xf6>
 8009838:	e7b1      	b.n	800979e <LoRaMacMibSetRequestConfirm+0xba>
            if( mibSet->Param.McKEKey != NULL )
 800983a:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 800983c:	207f      	movs	r0, #127	; 0x7f
            if( mibSet->Param.McKEKey != NULL )
 800983e:	2900      	cmp	r1, #0
 8009840:	d1cb      	bne.n	80097da <LoRaMacMibSetRequestConfirm+0xf6>
 8009842:	e7ac      	b.n	800979e <LoRaMacMibSetRequestConfirm+0xba>
            if( mibSet->Param.McKey0 != NULL )
 8009844:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 8009846:	2080      	movs	r0, #128	; 0x80
            if( mibSet->Param.McKey0 != NULL )
 8009848:	2900      	cmp	r1, #0
 800984a:	d1c6      	bne.n	80097da <LoRaMacMibSetRequestConfirm+0xf6>
 800984c:	e7a7      	b.n	800979e <LoRaMacMibSetRequestConfirm+0xba>
            if( mibSet->Param.McAppSKey0 != NULL )
 800984e:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 8009850:	2081      	movs	r0, #129	; 0x81
            if( mibSet->Param.McAppSKey0 != NULL )
 8009852:	2900      	cmp	r1, #0
 8009854:	d1c1      	bne.n	80097da <LoRaMacMibSetRequestConfirm+0xf6>
 8009856:	e7a2      	b.n	800979e <LoRaMacMibSetRequestConfirm+0xba>
            if( mibSet->Param.McNwkSKey0 != NULL )
 8009858:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 800985a:	2082      	movs	r0, #130	; 0x82
            if( mibSet->Param.McNwkSKey0 != NULL )
 800985c:	2900      	cmp	r1, #0
 800985e:	d1bc      	bne.n	80097da <LoRaMacMibSetRequestConfirm+0xf6>
 8009860:	e79d      	b.n	800979e <LoRaMacMibSetRequestConfirm+0xba>
            if( mibSet->Param.McKey1 != NULL )
 8009862:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_1, mibSet->Param.McKey1 ) )
 8009864:	2083      	movs	r0, #131	; 0x83
            if( mibSet->Param.McKey1 != NULL )
 8009866:	2900      	cmp	r1, #0
 8009868:	d1b7      	bne.n	80097da <LoRaMacMibSetRequestConfirm+0xf6>
 800986a:	e798      	b.n	800979e <LoRaMacMibSetRequestConfirm+0xba>
            if( mibSet->Param.McAppSKey1 != NULL )
 800986c:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_1, mibSet->Param.McAppSKey1 ) )
 800986e:	2084      	movs	r0, #132	; 0x84
            if( mibSet->Param.McAppSKey1 != NULL )
 8009870:	2900      	cmp	r1, #0
 8009872:	d1b2      	bne.n	80097da <LoRaMacMibSetRequestConfirm+0xf6>
 8009874:	e793      	b.n	800979e <LoRaMacMibSetRequestConfirm+0xba>
            if( mibSet->Param.McNwkSKey1 != NULL )
 8009876:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_1, mibSet->Param.McNwkSKey1 ) )
 8009878:	2085      	movs	r0, #133	; 0x85
            if( mibSet->Param.McNwkSKey1 != NULL )
 800987a:	2900      	cmp	r1, #0
 800987c:	d1ad      	bne.n	80097da <LoRaMacMibSetRequestConfirm+0xf6>
 800987e:	e78e      	b.n	800979e <LoRaMacMibSetRequestConfirm+0xba>
            if( mibSet->Param.McKey2 != NULL )
 8009880:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_2, mibSet->Param.McKey2 ) )
 8009882:	2086      	movs	r0, #134	; 0x86
            if( mibSet->Param.McKey2 != NULL )
 8009884:	2900      	cmp	r1, #0
 8009886:	d1a8      	bne.n	80097da <LoRaMacMibSetRequestConfirm+0xf6>
 8009888:	e789      	b.n	800979e <LoRaMacMibSetRequestConfirm+0xba>
            if( mibSet->Param.McAppSKey2 != NULL )
 800988a:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_2, mibSet->Param.McAppSKey2 ) )
 800988c:	2087      	movs	r0, #135	; 0x87
            if( mibSet->Param.McAppSKey2 != NULL )
 800988e:	2900      	cmp	r1, #0
 8009890:	d1a3      	bne.n	80097da <LoRaMacMibSetRequestConfirm+0xf6>
 8009892:	e784      	b.n	800979e <LoRaMacMibSetRequestConfirm+0xba>
            if( mibSet->Param.McNwkSKey2 != NULL )
 8009894:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_2, mibSet->Param.McNwkSKey2 ) )
 8009896:	2088      	movs	r0, #136	; 0x88
            if( mibSet->Param.McNwkSKey2 != NULL )
 8009898:	2900      	cmp	r1, #0
 800989a:	d19e      	bne.n	80097da <LoRaMacMibSetRequestConfirm+0xf6>
 800989c:	e77f      	b.n	800979e <LoRaMacMibSetRequestConfirm+0xba>
            if( mibSet->Param.McKey3 != NULL )
 800989e:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_3, mibSet->Param.McKey3 ) )
 80098a0:	2089      	movs	r0, #137	; 0x89
            if( mibSet->Param.McKey3 != NULL )
 80098a2:	2900      	cmp	r1, #0
 80098a4:	d199      	bne.n	80097da <LoRaMacMibSetRequestConfirm+0xf6>
 80098a6:	e77a      	b.n	800979e <LoRaMacMibSetRequestConfirm+0xba>
            if( mibSet->Param.McAppSKey3 != NULL )
 80098a8:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_3, mibSet->Param.McAppSKey3 ) )
 80098aa:	208a      	movs	r0, #138	; 0x8a
            if( mibSet->Param.McAppSKey3 != NULL )
 80098ac:	2900      	cmp	r1, #0
 80098ae:	d000      	beq.n	80098b2 <LoRaMacMibSetRequestConfirm+0x1ce>
 80098b0:	e793      	b.n	80097da <LoRaMacMibSetRequestConfirm+0xf6>
 80098b2:	e774      	b.n	800979e <LoRaMacMibSetRequestConfirm+0xba>
            if( mibSet->Param.McNwkSKey3 != NULL )
 80098b4:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_3, mibSet->Param.McNwkSKey3 ) )
 80098b6:	208b      	movs	r0, #139	; 0x8b
            if( mibSet->Param.McNwkSKey3 != NULL )
 80098b8:	2900      	cmp	r1, #0
 80098ba:	d000      	beq.n	80098be <LoRaMacMibSetRequestConfirm+0x1da>
 80098bc:	e78d      	b.n	80097da <LoRaMacMibSetRequestConfirm+0xf6>
 80098be:	e76e      	b.n	800979e <LoRaMacMibSetRequestConfirm+0xba>
            MacCtx.NvmCtx->PublicNetwork = mibSet->Param.EnablePublicNetwork;
 80098c0:	4b1e      	ldr	r3, [pc, #120]	; (800993c <LoRaMacMibSetRequestConfirm+0x258>)
 80098c2:	7920      	ldrb	r0, [r4, #4]
 80098c4:	58eb      	ldr	r3, [r5, r3]
 80098c6:	33f1      	adds	r3, #241	; 0xf1
 80098c8:	7018      	strb	r0, [r3, #0]
            Radio.SetPublicNetwork( MacCtx.NvmCtx->PublicNetwork );
 80098ca:	4b1d      	ldr	r3, [pc, #116]	; (8009940 <LoRaMacMibSetRequestConfirm+0x25c>)
 80098cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80098ce:	9303      	str	r3, [sp, #12]
 80098d0:	4798      	blx	r3
 80098d2:	e75d      	b.n	8009790 <LoRaMacMibSetRequestConfirm+0xac>
            MacCtx.NvmCtx->RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 80098d4:	4b19      	ldr	r3, [pc, #100]	; (800993c <LoRaMacMibSetRequestConfirm+0x258>)
 80098d6:	7921      	ldrb	r1, [r4, #4]
 80098d8:	58ea      	ldr	r2, [r5, r3]
 80098da:	2340      	movs	r3, #64	; 0x40
 80098dc:	33ff      	adds	r3, #255	; 0xff
 80098de:	54d1      	strb	r1, [r2, r3]
 80098e0:	e756      	b.n	8009790 <LoRaMacMibSetRequestConfirm+0xac>
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 80098e2:	222e      	movs	r2, #46	; 0x2e
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 80098e4:	7a23      	ldrb	r3, [r4, #8]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 80098e6:	4e15      	ldr	r6, [pc, #84]	; (800993c <LoRaMacMibSetRequestConfirm+0x258>)
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 80098e8:	a905      	add	r1, sp, #20
 80098ea:	700b      	strb	r3, [r1, #0]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 80098ec:	59ab      	ldr	r3, [r5, r6]
 80098ee:	32ff      	adds	r2, #255	; 0xff
 80098f0:	5c9a      	ldrb	r2, [r3, r2]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 80098f2:	7818      	ldrb	r0, [r3, #0]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 80098f4:	704a      	strb	r2, [r1, #1]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 80098f6:	2207      	movs	r2, #7
 80098f8:	f001 faa5 	bl	800ae46 <RegionVerify>
 80098fc:	2800      	cmp	r0, #0
 80098fe:	d100      	bne.n	8009902 <LoRaMacMibSetRequestConfirm+0x21e>
 8009900:	e74d      	b.n	800979e <LoRaMacMibSetRequestConfirm+0xba>
                MacCtx.NvmCtx->MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 8009902:	59ab      	ldr	r3, [r5, r6]
 8009904:	331d      	adds	r3, #29
 8009906:	33ff      	adds	r3, #255	; 0xff
                MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 8009908:	3404      	adds	r4, #4
 800990a:	cc06      	ldmia	r4!, {r1, r2}
 800990c:	c306      	stmia	r3!, {r1, r2}
 800990e:	e73f      	b.n	8009790 <LoRaMacMibSetRequestConfirm+0xac>
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8009910:	222e      	movs	r2, #46	; 0x2e
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8009912:	7a23      	ldrb	r3, [r4, #8]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8009914:	4e09      	ldr	r6, [pc, #36]	; (800993c <LoRaMacMibSetRequestConfirm+0x258>)
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8009916:	a905      	add	r1, sp, #20
 8009918:	700b      	strb	r3, [r1, #0]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800991a:	59ab      	ldr	r3, [r5, r6]
 800991c:	32ff      	adds	r2, #255	; 0xff
 800991e:	5c9a      	ldrb	r2, [r3, r2]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 8009920:	7818      	ldrb	r0, [r3, #0]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8009922:	704a      	strb	r2, [r1, #1]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 8009924:	2207      	movs	r2, #7
 8009926:	f001 fa8e 	bl	800ae46 <RegionVerify>
 800992a:	2800      	cmp	r0, #0
 800992c:	d100      	bne.n	8009930 <LoRaMacMibSetRequestConfirm+0x24c>
 800992e:	e736      	b.n	800979e <LoRaMacMibSetRequestConfirm+0xba>
                MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 8009930:	59ab      	ldr	r3, [r5, r6]
 8009932:	3328      	adds	r3, #40	; 0x28
 8009934:	e7e8      	b.n	8009908 <LoRaMacMibSetRequestConfirm+0x224>
 8009936:	46c0      	nop			; (mov r8, r8)
 8009938:	2000091c 	.word	0x2000091c
 800993c:	00000484 	.word	0x00000484
 8009940:	0800eaa4 	.word	0x0800eaa4
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8009944:	222e      	movs	r2, #46	; 0x2e
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8009946:	7a23      	ldrb	r3, [r4, #8]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8009948:	4e7e      	ldr	r6, [pc, #504]	; (8009b44 <LoRaMacMibSetRequestConfirm+0x460>)
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800994a:	a905      	add	r1, sp, #20
 800994c:	700b      	strb	r3, [r1, #0]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800994e:	59ab      	ldr	r3, [r5, r6]
 8009950:	32ff      	adds	r2, #255	; 0xff
 8009952:	5c9a      	ldrb	r2, [r3, r2]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 8009954:	7818      	ldrb	r0, [r3, #0]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8009956:	704a      	strb	r2, [r1, #1]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 8009958:	2207      	movs	r2, #7
 800995a:	f001 fa74 	bl	800ae46 <RegionVerify>
 800995e:	2800      	cmp	r0, #0
 8009960:	d100      	bne.n	8009964 <LoRaMacMibSetRequestConfirm+0x280>
 8009962:	e71c      	b.n	800979e <LoRaMacMibSetRequestConfirm+0xba>
                MacCtx.NvmCtx->MacParams.RxCChannel = mibSet->Param.RxCChannel;
 8009964:	59aa      	ldr	r2, [r5, r6]
 8009966:	3404      	adds	r4, #4
 8009968:	0013      	movs	r3, r2
 800996a:	3325      	adds	r3, #37	; 0x25
 800996c:	33ff      	adds	r3, #255	; 0xff
 800996e:	cc03      	ldmia	r4!, {r0, r1}
 8009970:	c303      	stmia	r3!, {r0, r1}
                if( ( MacCtx.NvmCtx->DeviceClass == CLASS_C ) && ( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE ) )
 8009972:	3b3c      	subs	r3, #60	; 0x3c
 8009974:	781b      	ldrb	r3, [r3, #0]
 8009976:	2b02      	cmp	r3, #2
 8009978:	d000      	beq.n	800997c <LoRaMacMibSetRequestConfirm+0x298>
 800997a:	e709      	b.n	8009790 <LoRaMacMibSetRequestConfirm+0xac>
 800997c:	33d3      	adds	r3, #211	; 0xd3
 800997e:	33ff      	adds	r3, #255	; 0xff
 8009980:	5cd3      	ldrb	r3, [r2, r3]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d100      	bne.n	8009988 <LoRaMacMibSetRequestConfirm+0x2a4>
 8009986:	e703      	b.n	8009790 <LoRaMacMibSetRequestConfirm+0xac>
                    Radio.Sleep( );
 8009988:	4b6f      	ldr	r3, [pc, #444]	; (8009b48 <LoRaMacMibSetRequestConfirm+0x464>)
 800998a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800998c:	9303      	str	r3, [sp, #12]
 800998e:	4798      	blx	r3
                    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8009990:	59ab      	ldr	r3, [r5, r6]
                                                     MacCtx.NvmCtx->MacParams.RxCChannel.Datarate,
 8009992:	2194      	movs	r1, #148	; 0x94
                    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8009994:	001a      	movs	r2, r3
 8009996:	001c      	movs	r4, r3
                                                     MacCtx.NvmCtx->MacParams.RxCChannel.Datarate,
 8009998:	0049      	lsls	r1, r1, #1
                    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800999a:	5659      	ldrsb	r1, [r3, r1]
 800999c:	7818      	ldrb	r0, [r3, #0]
 800999e:	4b6b      	ldr	r3, [pc, #428]	; (8009b4c <LoRaMacMibSetRequestConfirm+0x468>)
 80099a0:	32ff      	adds	r2, #255	; 0xff
 80099a2:	7852      	ldrb	r2, [r2, #1]
 80099a4:	34fc      	adds	r4, #252	; 0xfc
 80099a6:	9300      	str	r3, [sp, #0]
 80099a8:	6823      	ldr	r3, [r4, #0]
 80099aa:	f001 fa67 	bl	800ae7c <RegionComputeRxWindowParameters>
                    OpenContinuousRxCWindow( );
 80099ae:	f7fd fd61 	bl	8007474 <OpenContinuousRxCWindow>
 80099b2:	e6ed      	b.n	8009790 <LoRaMacMibSetRequestConfirm+0xac>
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 80099b4:	222e      	movs	r2, #46	; 0x2e
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 80099b6:	7a23      	ldrb	r3, [r4, #8]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 80099b8:	4e62      	ldr	r6, [pc, #392]	; (8009b44 <LoRaMacMibSetRequestConfirm+0x460>)
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 80099ba:	a905      	add	r1, sp, #20
 80099bc:	700b      	strb	r3, [r1, #0]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 80099be:	59ab      	ldr	r3, [r5, r6]
 80099c0:	32ff      	adds	r2, #255	; 0xff
 80099c2:	5c9a      	ldrb	r2, [r3, r2]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 80099c4:	7818      	ldrb	r0, [r3, #0]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 80099c6:	704a      	strb	r2, [r1, #1]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 80099c8:	2207      	movs	r2, #7
 80099ca:	f001 fa3c 	bl	800ae46 <RegionVerify>
 80099ce:	2800      	cmp	r0, #0
 80099d0:	d100      	bne.n	80099d4 <LoRaMacMibSetRequestConfirm+0x2f0>
 80099d2:	e6e4      	b.n	800979e <LoRaMacMibSetRequestConfirm+0xba>
                MacCtx.NvmCtx->MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 80099d4:	59ab      	ldr	r3, [r5, r6]
 80099d6:	3330      	adds	r3, #48	; 0x30
 80099d8:	e796      	b.n	8009908 <LoRaMacMibSetRequestConfirm+0x224>
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 80099da:	6863      	ldr	r3, [r4, #4]
 80099dc:	a906      	add	r1, sp, #24
 80099de:	9306      	str	r3, [sp, #24]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 80099e0:	2301      	movs	r3, #1
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 80099e2:	710b      	strb	r3, [r1, #4]
            if( RegionChanMaskSet( MacCtx.NvmCtx->Region, &chanMaskSet ) == false )
 80099e4:	4b57      	ldr	r3, [pc, #348]	; (8009b44 <LoRaMacMibSetRequestConfirm+0x460>)
 80099e6:	58eb      	ldr	r3, [r5, r3]
 80099e8:	7818      	ldrb	r0, [r3, #0]
 80099ea:	f001 fa3e 	bl	800ae6a <RegionChanMaskSet>
 80099ee:	2800      	cmp	r0, #0
 80099f0:	d000      	beq.n	80099f4 <LoRaMacMibSetRequestConfirm+0x310>
 80099f2:	e6cd      	b.n	8009790 <LoRaMacMibSetRequestConfirm+0xac>
 80099f4:	e6d3      	b.n	800979e <LoRaMacMibSetRequestConfirm+0xba>
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 80099f6:	6863      	ldr	r3, [r4, #4]
 80099f8:	a906      	add	r1, sp, #24
 80099fa:	9306      	str	r3, [sp, #24]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 80099fc:	2300      	movs	r3, #0
 80099fe:	e7f0      	b.n	80099e2 <LoRaMacMibSetRequestConfirm+0x2fe>
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8009a00:	7922      	ldrb	r2, [r4, #4]
 8009a02:	1e53      	subs	r3, r2, #1
 8009a04:	2b0e      	cmp	r3, #14
 8009a06:	d900      	bls.n	8009a0a <LoRaMacMibSetRequestConfirm+0x326>
 8009a08:	e6c9      	b.n	800979e <LoRaMacMibSetRequestConfirm+0xba>
                MacCtx.NvmCtx->MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 8009a0a:	4b4e      	ldr	r3, [pc, #312]	; (8009b44 <LoRaMacMibSetRequestConfirm+0x460>)
 8009a0c:	58eb      	ldr	r3, [r5, r3]
 8009a0e:	33ff      	adds	r3, #255	; 0xff
 8009a10:	765a      	strb	r2, [r3, #25]
 8009a12:	e6bd      	b.n	8009790 <LoRaMacMibSetRequestConfirm+0xac>
            MacCtx.NvmCtx->MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 8009a14:	4b4b      	ldr	r3, [pc, #300]	; (8009b44 <LoRaMacMibSetRequestConfirm+0x460>)
 8009a16:	6862      	ldr	r2, [r4, #4]
 8009a18:	58eb      	ldr	r3, [r5, r3]
 8009a1a:	33fc      	adds	r3, #252	; 0xfc
 8009a1c:	609a      	str	r2, [r3, #8]
 8009a1e:	e6b7      	b.n	8009790 <LoRaMacMibSetRequestConfirm+0xac>
            MacCtx.NvmCtx->MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 8009a20:	4b48      	ldr	r3, [pc, #288]	; (8009b44 <LoRaMacMibSetRequestConfirm+0x460>)
 8009a22:	6862      	ldr	r2, [r4, #4]
 8009a24:	58eb      	ldr	r3, [r5, r3]
 8009a26:	33fc      	adds	r3, #252	; 0xfc
 8009a28:	60da      	str	r2, [r3, #12]
 8009a2a:	e6b1      	b.n	8009790 <LoRaMacMibSetRequestConfirm+0xac>
            MacCtx.NvmCtx->MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 8009a2c:	4b45      	ldr	r3, [pc, #276]	; (8009b44 <LoRaMacMibSetRequestConfirm+0x460>)
 8009a2e:	6862      	ldr	r2, [r4, #4]
 8009a30:	58eb      	ldr	r3, [r5, r3]
 8009a32:	33fc      	adds	r3, #252	; 0xfc
 8009a34:	611a      	str	r2, [r3, #16]
 8009a36:	e6ab      	b.n	8009790 <LoRaMacMibSetRequestConfirm+0xac>
            MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 8009a38:	4b42      	ldr	r3, [pc, #264]	; (8009b44 <LoRaMacMibSetRequestConfirm+0x460>)
 8009a3a:	6862      	ldr	r2, [r4, #4]
 8009a3c:	58eb      	ldr	r3, [r5, r3]
 8009a3e:	33fc      	adds	r3, #252	; 0xfc
 8009a40:	615a      	str	r2, [r3, #20]
 8009a42:	e6a5      	b.n	8009790 <LoRaMacMibSetRequestConfirm+0xac>
            MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 8009a44:	4b3f      	ldr	r3, [pc, #252]	; (8009b44 <LoRaMacMibSetRequestConfirm+0x460>)
 8009a46:	6862      	ldr	r2, [r4, #4]
 8009a48:	58eb      	ldr	r3, [r5, r3]
 8009a4a:	33fc      	adds	r3, #252	; 0xfc
 8009a4c:	619a      	str	r2, [r3, #24]
 8009a4e:	e69f      	b.n	8009790 <LoRaMacMibSetRequestConfirm+0xac>
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 8009a50:	7923      	ldrb	r3, [r4, #4]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DEF_TX_DR ) == true )
 8009a52:	4c3c      	ldr	r4, [pc, #240]	; (8009b44 <LoRaMacMibSetRequestConfirm+0x460>)
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 8009a54:	ae05      	add	r6, sp, #20
 8009a56:	7033      	strb	r3, [r6, #0]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DEF_TX_DR ) == true )
 8009a58:	592b      	ldr	r3, [r5, r4]
 8009a5a:	2206      	movs	r2, #6
 8009a5c:	7818      	ldrb	r0, [r3, #0]
 8009a5e:	0031      	movs	r1, r6
 8009a60:	f001 f9f1 	bl	800ae46 <RegionVerify>
 8009a64:	2800      	cmp	r0, #0
 8009a66:	d100      	bne.n	8009a6a <LoRaMacMibSetRequestConfirm+0x386>
 8009a68:	e699      	b.n	800979e <LoRaMacMibSetRequestConfirm+0xba>
                MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate = verify.DatarateParams.Datarate;
 8009a6a:	592b      	ldr	r3, [r5, r4]
 8009a6c:	7832      	ldrb	r2, [r6, #0]
 8009a6e:	715a      	strb	r2, [r3, #5]
 8009a70:	e68e      	b.n	8009790 <LoRaMacMibSetRequestConfirm+0xac>
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8009a72:	2296      	movs	r2, #150	; 0x96
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 8009a74:	7923      	ldrb	r3, [r4, #4]
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8009a76:	4c33      	ldr	r4, [pc, #204]	; (8009b44 <LoRaMacMibSetRequestConfirm+0x460>)
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 8009a78:	ae05      	add	r6, sp, #20
 8009a7a:	7033      	strb	r3, [r6, #0]
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8009a7c:	592b      	ldr	r3, [r5, r4]
 8009a7e:	0052      	lsls	r2, r2, #1
 8009a80:	5c9a      	ldrb	r2, [r3, r2]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_DR ) == true )
 8009a82:	7818      	ldrb	r0, [r3, #0]
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8009a84:	70b2      	strb	r2, [r6, #2]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_DR ) == true )
 8009a86:	0031      	movs	r1, r6
 8009a88:	2205      	movs	r2, #5
 8009a8a:	f001 f9dc 	bl	800ae46 <RegionVerify>
 8009a8e:	2800      	cmp	r0, #0
 8009a90:	d100      	bne.n	8009a94 <LoRaMacMibSetRequestConfirm+0x3b0>
 8009a92:	e684      	b.n	800979e <LoRaMacMibSetRequestConfirm+0xba>
                MacCtx.NvmCtx->MacParams.ChannelsDatarate = verify.DatarateParams.Datarate;
 8009a94:	592b      	ldr	r3, [r5, r4]
 8009a96:	33f9      	adds	r3, #249	; 0xf9
 8009a98:	7832      	ldrb	r2, [r6, #0]
 8009a9a:	e68e      	b.n	80097ba <LoRaMacMibSetRequestConfirm+0xd6>
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 8009a9c:	7923      	ldrb	r3, [r4, #4]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DEF_TX_POWER ) == true )
 8009a9e:	4c29      	ldr	r4, [pc, #164]	; (8009b44 <LoRaMacMibSetRequestConfirm+0x460>)
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 8009aa0:	ae05      	add	r6, sp, #20
 8009aa2:	7033      	strb	r3, [r6, #0]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DEF_TX_POWER ) == true )
 8009aa4:	592b      	ldr	r3, [r5, r4]
 8009aa6:	220a      	movs	r2, #10
 8009aa8:	7818      	ldrb	r0, [r3, #0]
 8009aaa:	0031      	movs	r1, r6
 8009aac:	f001 f9cb 	bl	800ae46 <RegionVerify>
 8009ab0:	2800      	cmp	r0, #0
 8009ab2:	d100      	bne.n	8009ab6 <LoRaMacMibSetRequestConfirm+0x3d2>
 8009ab4:	e673      	b.n	800979e <LoRaMacMibSetRequestConfirm+0xba>
                MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower = verify.TxPower;
 8009ab6:	592b      	ldr	r3, [r5, r4]
 8009ab8:	7832      	ldrb	r2, [r6, #0]
 8009aba:	711a      	strb	r2, [r3, #4]
 8009abc:	e668      	b.n	8009790 <LoRaMacMibSetRequestConfirm+0xac>
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 8009abe:	7923      	ldrb	r3, [r4, #4]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_POWER ) == true )
 8009ac0:	4c20      	ldr	r4, [pc, #128]	; (8009b44 <LoRaMacMibSetRequestConfirm+0x460>)
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 8009ac2:	ae05      	add	r6, sp, #20
 8009ac4:	7033      	strb	r3, [r6, #0]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_POWER ) == true )
 8009ac6:	592b      	ldr	r3, [r5, r4]
 8009ac8:	2209      	movs	r2, #9
 8009aca:	7818      	ldrb	r0, [r3, #0]
 8009acc:	0031      	movs	r1, r6
 8009ace:	f001 f9ba 	bl	800ae46 <RegionVerify>
 8009ad2:	2800      	cmp	r0, #0
 8009ad4:	d100      	bne.n	8009ad8 <LoRaMacMibSetRequestConfirm+0x3f4>
 8009ad6:	e662      	b.n	800979e <LoRaMacMibSetRequestConfirm+0xba>
                MacCtx.NvmCtx->MacParams.ChannelsTxPower = verify.TxPower;
 8009ad8:	592b      	ldr	r3, [r5, r4]
 8009ada:	33f8      	adds	r3, #248	; 0xf8
 8009adc:	e7dc      	b.n	8009a98 <LoRaMacMibSetRequestConfirm+0x3b4>
            MacCtx.NvmCtx->MacParams.SystemMaxRxError = MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 8009ade:	4b19      	ldr	r3, [pc, #100]	; (8009b44 <LoRaMacMibSetRequestConfirm+0x460>)
 8009ae0:	6862      	ldr	r2, [r4, #4]
 8009ae2:	58eb      	ldr	r3, [r5, r3]
 8009ae4:	609a      	str	r2, [r3, #8]
 8009ae6:	33fc      	adds	r3, #252	; 0xfc
 8009ae8:	601a      	str	r2, [r3, #0]
 8009aea:	e651      	b.n	8009790 <LoRaMacMibSetRequestConfirm+0xac>
            MacCtx.NvmCtx->MacParams.MinRxSymbols = MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 8009aec:	4b15      	ldr	r3, [pc, #84]	; (8009b44 <LoRaMacMibSetRequestConfirm+0x460>)
 8009aee:	7922      	ldrb	r2, [r4, #4]
 8009af0:	58eb      	ldr	r3, [r5, r3]
 8009af2:	731a      	strb	r2, [r3, #12]
 8009af4:	33ff      	adds	r3, #255	; 0xff
 8009af6:	705a      	strb	r2, [r3, #1]
 8009af8:	e64a      	b.n	8009790 <LoRaMacMibSetRequestConfirm+0xac>
            MacCtx.NvmCtx->MacParams.AntennaGain = mibSet->Param.AntennaGain;
 8009afa:	4b12      	ldr	r3, [pc, #72]	; (8009b44 <LoRaMacMibSetRequestConfirm+0x460>)
 8009afc:	6862      	ldr	r2, [r4, #4]
 8009afe:	58eb      	ldr	r3, [r5, r3]
 8009b00:	33fc      	adds	r3, #252	; 0xfc
 8009b02:	639a      	str	r2, [r3, #56]	; 0x38
 8009b04:	e644      	b.n	8009790 <LoRaMacMibSetRequestConfirm+0xac>
            MacCtx.NvmCtx->MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 8009b06:	4b0f      	ldr	r3, [pc, #60]	; (8009b44 <LoRaMacMibSetRequestConfirm+0x460>)
 8009b08:	6862      	ldr	r2, [r4, #4]
 8009b0a:	58eb      	ldr	r3, [r5, r3]
 8009b0c:	641a      	str	r2, [r3, #64]	; 0x40
 8009b0e:	e63f      	b.n	8009790 <LoRaMacMibSetRequestConfirm+0xac>
            if( mibSet->Param.Contexts != 0 )
 8009b10:	6860      	ldr	r0, [r4, #4]
 8009b12:	2800      	cmp	r0, #0
 8009b14:	d100      	bne.n	8009b18 <LoRaMacMibSetRequestConfirm+0x434>
 8009b16:	e642      	b.n	800979e <LoRaMacMibSetRequestConfirm+0xba>
                status = RestoreCtxs( mibSet->Param.Contexts );
 8009b18:	f7fe fd5a 	bl	80085d0 <RestoreCtxs>
 8009b1c:	e62e      	b.n	800977c <LoRaMacMibSetRequestConfirm+0x98>
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 8009b1e:	79a3      	ldrb	r3, [r4, #6]
 8009b20:	2b01      	cmp	r3, #1
 8009b22:	d900      	bls.n	8009b26 <LoRaMacMibSetRequestConfirm+0x442>
 8009b24:	e63b      	b.n	800979e <LoRaMacMibSetRequestConfirm+0xba>
                MacCtx.NvmCtx->Version = mibSet->Param.AbpLrWanVersion;
 8009b26:	4b07      	ldr	r3, [pc, #28]	; (8009b44 <LoRaMacMibSetRequestConfirm+0x460>)
 8009b28:	6861      	ldr	r1, [r4, #4]
 8009b2a:	58ea      	ldr	r2, [r5, r3]
 8009b2c:	23e8      	movs	r3, #232	; 0xe8
 8009b2e:	005b      	lsls	r3, r3, #1
 8009b30:	50d1      	str	r1, [r2, r3]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 8009b32:	6860      	ldr	r0, [r4, #4]
 8009b34:	f000 fd8e 	bl	800a654 <LoRaMacCryptoSetLrWanVersion>
 8009b38:	e651      	b.n	80097de <LoRaMacMibSetRequestConfirm+0xfa>
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 8009b3a:	0020      	movs	r0, r4
 8009b3c:	f000 f9f8 	bl	8009f30 <LoRaMacMibClassBSetRequestConfirm>
 8009b40:	e61c      	b.n	800977c <LoRaMacMibSetRequestConfirm+0x98>
 8009b42:	46c0      	nop			; (mov r8, r8)
 8009b44:	00000484 	.word	0x00000484
 8009b48:	0800eaa4 	.word	0x0800eaa4
 8009b4c:	20000cfc 	.word	0x20000cfc

08009b50 <LoRaMacMlmeRequest>:

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8009b50:	2300      	movs	r3, #0
{
 8009b52:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b54:	b085      	sub	sp, #20
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8009b56:	aa02      	add	r2, sp, #8
{
 8009b58:	0005      	movs	r5, r0
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8009b5a:	8013      	strh	r3, [r2, #0]

    if( mlmeRequest == NULL )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8009b5c:	2703      	movs	r7, #3
    if( mlmeRequest == NULL )
 8009b5e:	4298      	cmp	r0, r3
 8009b60:	d004      	beq.n	8009b6c <LoRaMacMlmeRequest+0x1c>
    }
    if( LoRaMacIsBusy( ) == true )
 8009b62:	f7fe f92b 	bl	8007dbc <LoRaMacIsBusy>
 8009b66:	2800      	cmp	r0, #0
 8009b68:	d003      	beq.n	8009b72 <LoRaMacMlmeRequest+0x22>
    {
        return LORAMAC_STATUS_BUSY;
 8009b6a:	2701      	movs	r7, #1
    {
        LoRaMacConfirmQueueAdd( &queueElement );
        EventMacNvmCtxChanged( );
    }
    return status;
}
 8009b6c:	0038      	movs	r0, r7
 8009b6e:	b005      	add	sp, #20
 8009b70:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( LoRaMacConfirmQueueIsFull( ) == true )
 8009b72:	f000 fc0f 	bl	800a394 <LoRaMacConfirmQueueIsFull>
 8009b76:	2800      	cmp	r0, #0
 8009b78:	d1f7      	bne.n	8009b6a <LoRaMacMlmeRequest+0x1a>
    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8009b7a:	f000 fc05 	bl	800a388 <LoRaMacConfirmQueueGetCnt>
 8009b7e:	1e01      	subs	r1, r0, #0
 8009b80:	d103      	bne.n	8009b8a <LoRaMacMlmeRequest+0x3a>
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 8009b82:	2214      	movs	r2, #20
 8009b84:	4849      	ldr	r0, [pc, #292]	; (8009cac <LoRaMacMlmeRequest+0x15c>)
 8009b86:	f003 f80b 	bl	800cba0 <memset1>
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009b8a:	2301      	movs	r3, #1
    MacCtx.MacFlags.Bits.MlmeReq = 1;
 8009b8c:	2104      	movs	r1, #4
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009b8e:	4c48      	ldr	r4, [pc, #288]	; (8009cb0 <LoRaMacMlmeRequest+0x160>)
 8009b90:	4a48      	ldr	r2, [pc, #288]	; (8009cb4 <LoRaMacMlmeRequest+0x164>)
    queueElement.Request = mlmeRequest->Type;
 8009b92:	ae03      	add	r6, sp, #12
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009b94:	54a3      	strb	r3, [r4, r2]
    MacCtx.MacFlags.Bits.MlmeReq = 1;
 8009b96:	4a48      	ldr	r2, [pc, #288]	; (8009cb8 <LoRaMacMlmeRequest+0x168>)
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009b98:	7073      	strb	r3, [r6, #1]
    MacCtx.MacFlags.Bits.MlmeReq = 1;
 8009b9a:	5ca0      	ldrb	r0, [r4, r2]
 8009b9c:	9201      	str	r2, [sp, #4]
 8009b9e:	4301      	orrs	r1, r0
 8009ba0:	54a1      	strb	r1, [r4, r2]
    queueElement.RestrictCommonReadyToHandle = false;
 8009ba2:	2100      	movs	r1, #0
    queueElement.Request = mlmeRequest->Type;
 8009ba4:	7828      	ldrb	r0, [r5, #0]
    queueElement.RestrictCommonReadyToHandle = false;
 8009ba6:	70f1      	strb	r1, [r6, #3]
    queueElement.Request = mlmeRequest->Type;
 8009ba8:	7030      	strb	r0, [r6, #0]
    switch( mlmeRequest->Type )
 8009baa:	280d      	cmp	r0, #13
 8009bac:	d900      	bls.n	8009bb0 <LoRaMacMlmeRequest+0x60>
 8009bae:	e07b      	b.n	8009ca8 <LoRaMacMlmeRequest+0x158>
 8009bb0:	f7f6 faaa 	bl	8000108 <__gnu_thumb1_case_uqi>
 8009bb4:	397a7a07 	.word	0x397a7a07
 8009bb8:	7a7a4e48 	.word	0x7a7a4e48
 8009bbc:	6e7a547a 	.word	0x6e7a547a
 8009bc0:	6a58      	.short	0x6a58
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 8009bc2:	23d0      	movs	r3, #208	; 0xd0
 8009bc4:	009b      	lsls	r3, r3, #2
 8009bc6:	58e7      	ldr	r7, [r4, r3]
 8009bc8:	2320      	movs	r3, #32
 8009bca:	401f      	ands	r7, r3
 8009bcc:	d1cd      	bne.n	8009b6a <LoRaMacMlmeRequest+0x1a>
            ResetMacParameters( );
 8009bce:	f7fd fbd7 	bl	8007380 <ResetMacParameters>
            MacCtx.NvmCtx->MacParams.ChannelsDatarate = RegionAlternateDr( MacCtx.NvmCtx->Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 8009bd2:	2104      	movs	r1, #4
 8009bd4:	4b39      	ldr	r3, [pc, #228]	; (8009cbc <LoRaMacMlmeRequest+0x16c>)
 8009bd6:	003a      	movs	r2, r7
 8009bd8:	58e3      	ldr	r3, [r4, r3]
 8009bda:	9300      	str	r3, [sp, #0]
 8009bdc:	5669      	ldrsb	r1, [r5, r1]
 8009bde:	7818      	ldrb	r0, [r3, #0]
 8009be0:	f001 f9a1 	bl	800af26 <RegionAlternateDr>
 8009be4:	9b00      	ldr	r3, [sp, #0]
 8009be6:	33f9      	adds	r3, #249	; 0xf9
 8009be8:	7018      	strb	r0, [r3, #0]
            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 8009bea:	2307      	movs	r3, #7
            status = SendReJoinReq( JOIN_REQ );
 8009bec:	20ff      	movs	r0, #255	; 0xff
            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 8009bee:	7073      	strb	r3, [r6, #1]
            status = SendReJoinReq( JOIN_REQ );
 8009bf0:	f7fe fc42 	bl	8008478 <SendReJoinReq>
 8009bf4:	1e07      	subs	r7, r0, #0
            if( status != LORAMAC_STATUS_OK )
 8009bf6:	d01e      	beq.n	8009c36 <LoRaMacMlmeRequest+0xe6>
                MacCtx.NvmCtx->MacParams.ChannelsDatarate = RegionAlternateDr( MacCtx.NvmCtx->Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 8009bf8:	2104      	movs	r1, #4
 8009bfa:	4b30      	ldr	r3, [pc, #192]	; (8009cbc <LoRaMacMlmeRequest+0x16c>)
 8009bfc:	5669      	ldrsb	r1, [r5, r1]
 8009bfe:	58e6      	ldr	r6, [r4, r3]
 8009c00:	2201      	movs	r2, #1
 8009c02:	7830      	ldrb	r0, [r6, #0]
 8009c04:	f001 f98f 	bl	800af26 <RegionAlternateDr>
 8009c08:	36f9      	adds	r6, #249	; 0xf9
 8009c0a:	7030      	strb	r0, [r6, #0]
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8009c0c:	f000 fbbc 	bl	800a388 <LoRaMacConfirmQueueGetCnt>
 8009c10:	2800      	cmp	r0, #0
 8009c12:	d1ab      	bne.n	8009b6c <LoRaMacMlmeRequest+0x1c>
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8009c14:	2204      	movs	r2, #4
            MacCtx.NodeAckRequested = false;
 8009c16:	4b2a      	ldr	r3, [pc, #168]	; (8009cc0 <LoRaMacMlmeRequest+0x170>)
 8009c18:	54e0      	strb	r0, [r4, r3]
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8009c1a:	9b01      	ldr	r3, [sp, #4]
 8009c1c:	5ce3      	ldrb	r3, [r4, r3]
 8009c1e:	4393      	bics	r3, r2
 8009c20:	9a01      	ldr	r2, [sp, #4]
 8009c22:	54a3      	strb	r3, [r4, r2]
 8009c24:	e7a2      	b.n	8009b6c <LoRaMacMlmeRequest+0x1c>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8009c26:	2200      	movs	r2, #0
 8009c28:	2002      	movs	r0, #2
 8009c2a:	a902      	add	r1, sp, #8
 8009c2c:	f000 f9be 	bl	8009fac <LoRaMacCommandsAddCmd>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8009c30:	2713      	movs	r7, #19
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8009c32:	2800      	cmp	r0, #0
 8009c34:	d1ea      	bne.n	8009c0c <LoRaMacMlmeRequest+0xbc>
        LoRaMacConfirmQueueAdd( &queueElement );
 8009c36:	0030      	movs	r0, r6
 8009c38:	f000 fad8 	bl	800a1ec <LoRaMacConfirmQueueAdd>
        EventMacNvmCtxChanged( );
 8009c3c:	2700      	movs	r7, #0
 8009c3e:	f7fd faa9 	bl	8007194 <EventMacNvmCtxChanged>
 8009c42:	e793      	b.n	8009b6c <LoRaMacMlmeRequest+0x1c>
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 8009c44:	88a8      	ldrh	r0, [r5, #4]
 8009c46:	f7fe fc43 	bl	80084d0 <SetTxContinuousWave>
            status = SetTxContinuousWave1( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 8009c4a:	1e07      	subs	r7, r0, #0
    if( status != LORAMAC_STATUS_OK )
 8009c4c:	d1de      	bne.n	8009c0c <LoRaMacMlmeRequest+0xbc>
 8009c4e:	e7f2      	b.n	8009c36 <LoRaMacMlmeRequest+0xe6>
            status = SetTxContinuousWave1( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 8009c50:	7b2a      	ldrb	r2, [r5, #12]
 8009c52:	88a8      	ldrh	r0, [r5, #4]
 8009c54:	68a9      	ldr	r1, [r5, #8]
 8009c56:	f7fe fc69 	bl	800852c <SetTxContinuousWave1>
 8009c5a:	e7f6      	b.n	8009c4a <LoRaMacMlmeRequest+0xfa>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	a902      	add	r1, sp, #8
 8009c60:	200d      	movs	r0, #13
 8009c62:	e7e3      	b.n	8009c2c <LoRaMacMlmeRequest+0xdc>
            if( MacCtx.NvmCtx->DeviceClass == CLASS_A )
 8009c64:	4b15      	ldr	r3, [pc, #84]	; (8009cbc <LoRaMacMlmeRequest+0x16c>)
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8009c66:	2702      	movs	r7, #2
            if( MacCtx.NvmCtx->DeviceClass == CLASS_A )
 8009c68:	58e3      	ldr	r3, [r4, r3]
 8009c6a:	33f0      	adds	r3, #240	; 0xf0
 8009c6c:	781b      	ldrb	r3, [r3, #0]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d1cc      	bne.n	8009c0c <LoRaMacMlmeRequest+0xbc>
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 8009c72:	792d      	ldrb	r5, [r5, #4]
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 8009c74:	0768      	lsls	r0, r5, #29
 8009c76:	0f40      	lsrs	r0, r0, #29
 8009c78:	f000 f953 	bl	8009f22 <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 8009c7c:	ab02      	add	r3, sp, #8
 8009c7e:	701d      	strb	r5, [r3, #0]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 8009c80:	2201      	movs	r2, #1
 8009c82:	0019      	movs	r1, r3
 8009c84:	2010      	movs	r0, #16
 8009c86:	e7d1      	b.n	8009c2c <LoRaMacMlmeRequest+0xdc>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8009c88:	2200      	movs	r2, #0
 8009c8a:	a902      	add	r1, sp, #8
 8009c8c:	2012      	movs	r0, #18
 8009c8e:	e7cd      	b.n	8009c2c <LoRaMacMlmeRequest+0xdc>
            queueElement.RestrictCommonReadyToHandle = true;
 8009c90:	70f3      	strb	r3, [r6, #3]
            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 8009c92:	f000 f937 	bl	8009f04 <LoRaMacClassBIsAcquisitionInProgress>
                status = LORAMAC_STATUS_BUSY;
 8009c96:	2701      	movs	r7, #1
            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 8009c98:	1e05      	subs	r5, r0, #0
 8009c9a:	d1b7      	bne.n	8009c0c <LoRaMacMlmeRequest+0xbc>
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 8009c9c:	f000 f92f 	bl	8009efe <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 8009ca0:	0028      	movs	r0, r5
 8009ca2:	f000 f931 	bl	8009f08 <LoRaMacClassBBeaconTimerEvent>
 8009ca6:	e7c6      	b.n	8009c36 <LoRaMacMlmeRequest+0xe6>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8009ca8:	2702      	movs	r7, #2
 8009caa:	e7af      	b.n	8009c0c <LoRaMacMlmeRequest+0xbc>
 8009cac:	20000d6c 	.word	0x20000d6c
 8009cb0:	2000091c 	.word	0x2000091c
 8009cb4:	00000451 	.word	0x00000451
 8009cb8:	00000481 	.word	0x00000481
 8009cbc:	00000484 	.word	0x00000484
 8009cc0:	00000414 	.word	0x00000414

08009cc4 <LoRaMacMcpsRequest>:

LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest )
{
 8009cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009cc6:	0004      	movs	r4, r0
 8009cc8:	b089      	sub	sp, #36	; 0x24
    void* fBuffer;
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
    bool readyToSend = false;

    if( mcpsRequest == NULL )
 8009cca:	2800      	cmp	r0, #0
 8009ccc:	d103      	bne.n	8009cd6 <LoRaMacMcpsRequest+0x12>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8009cce:	2503      	movs	r5, #3
        }
    }

    EventMacNvmCtxChanged( );
    return status;
}
 8009cd0:	0028      	movs	r0, r5
 8009cd2:	b009      	add	sp, #36	; 0x24
 8009cd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( LoRaMacIsBusy( ) == true )
 8009cd6:	f7fe f871 	bl	8007dbc <LoRaMacIsBusy>
        return LORAMAC_STATUS_BUSY;
 8009cda:	2501      	movs	r5, #1
    if( LoRaMacIsBusy( ) == true )
 8009cdc:	1e06      	subs	r6, r0, #0
 8009cde:	9001      	str	r0, [sp, #4]
 8009ce0:	d1f6      	bne.n	8009cd0 <LoRaMacMcpsRequest+0xc>
    macHdr.Value = 0;
 8009ce2:	ab04      	add	r3, sp, #16
 8009ce4:	7018      	strb	r0, [r3, #0]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 8009ce6:	0001      	movs	r1, r0
 8009ce8:	2214      	movs	r2, #20
 8009cea:	4845      	ldr	r0, [pc, #276]	; (8009e00 <LoRaMacMcpsRequest+0x13c>)
 8009cec:	f002 ff58 	bl	800cba0 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009cf0:	4f44      	ldr	r7, [pc, #272]	; (8009e04 <LoRaMacMcpsRequest+0x140>)
 8009cf2:	4b45      	ldr	r3, [pc, #276]	; (8009e08 <LoRaMacMcpsRequest+0x144>)
 8009cf4:	54fd      	strb	r5, [r7, r3]
    MacCtx.AckTimeoutRetriesCounter = 1;
 8009cf6:	4b45      	ldr	r3, [pc, #276]	; (8009e0c <LoRaMacMcpsRequest+0x148>)
 8009cf8:	54fd      	strb	r5, [r7, r3]
    switch( mcpsRequest->Type )
 8009cfa:	7823      	ldrb	r3, [r4, #0]
 8009cfc:	42ab      	cmp	r3, r5
 8009cfe:	d05c      	beq.n	8009dba <LoRaMacMcpsRequest+0xf6>
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d004      	beq.n	8009d0e <LoRaMacMcpsRequest+0x4a>
 8009d04:	2b03      	cmp	r3, #3
 8009d06:	d066      	beq.n	8009dd6 <LoRaMacMcpsRequest+0x112>
    int8_t datarate = DR_0;
 8009d08:	9600      	str	r6, [sp, #0]
    uint8_t fPort = 0;
 8009d0a:	9601      	str	r6, [sp, #4]
 8009d0c:	e013      	b.n	8009d36 <LoRaMacMcpsRequest+0x72>
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 8009d0e:	221f      	movs	r2, #31
            MacCtx.AckTimeoutRetries = 1;
 8009d10:	4b3f      	ldr	r3, [pc, #252]	; (8009e10 <LoRaMacMcpsRequest+0x14c>)
 8009d12:	54fd      	strb	r5, [r7, r3]
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 8009d14:	ab04      	add	r3, sp, #16
 8009d16:	781b      	ldrb	r3, [r3, #0]
 8009d18:	401a      	ands	r2, r3
 8009d1a:	2340      	movs	r3, #64	; 0x40
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 8009d1c:	4313      	orrs	r3, r2
 8009d1e:	aa04      	add	r2, sp, #16
 8009d20:	7013      	strb	r3, [r2, #0]
            fPort = mcpsRequest->Req.Confirmed.fPort;
 8009d22:	7923      	ldrb	r3, [r4, #4]
 8009d24:	9301      	str	r3, [sp, #4]
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
 8009d26:	68a3      	ldr	r3, [r4, #8]
 8009d28:	9302      	str	r3, [sp, #8]
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
 8009d2a:	89a3      	ldrh	r3, [r4, #12]
 8009d2c:	9303      	str	r3, [sp, #12]
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 8009d2e:	230e      	movs	r3, #14
            readyToSend = true;
 8009d30:	2601      	movs	r6, #1
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 8009d32:	56e3      	ldrsb	r3, [r4, r3]
 8009d34:	9300      	str	r3, [sp, #0]
    getPhy.Attribute = PHY_MIN_TX_DR;
 8009d36:	2302      	movs	r3, #2
    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8009d38:	2296      	movs	r2, #150	; 0x96
 8009d3a:	4d36      	ldr	r5, [pc, #216]	; (8009e14 <LoRaMacMcpsRequest+0x150>)
    getPhy.Attribute = PHY_MIN_TX_DR;
 8009d3c:	a905      	add	r1, sp, #20
 8009d3e:	700b      	strb	r3, [r1, #0]
    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8009d40:	597b      	ldr	r3, [r7, r5]
 8009d42:	0052      	lsls	r2, r2, #1
 8009d44:	5c9a      	ldrb	r2, [r3, r2]
 8009d46:	708a      	strb	r2, [r1, #2]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009d48:	7818      	ldrb	r0, [r3, #0]
 8009d4a:	f001 f859 	bl	800ae00 <RegionGetPhyParam>
 8009d4e:	9006      	str	r0, [sp, #24]
    if( readyToSend == true )
 8009d50:	2e00      	cmp	r6, #0
 8009d52:	d053      	beq.n	8009dfc <LoRaMacMcpsRequest+0x138>
        if( MacCtx.NvmCtx->AdrCtrlOn == false )
 8009d54:	597b      	ldr	r3, [r7, r5]
 8009d56:	001a      	movs	r2, r3
 8009d58:	32f2      	adds	r2, #242	; 0xf2
 8009d5a:	7812      	ldrb	r2, [r2, #0]
 8009d5c:	2a00      	cmp	r2, #0
 8009d5e:	d118      	bne.n	8009d92 <LoRaMacMcpsRequest+0xce>
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 8009d60:	9900      	ldr	r1, [sp, #0]
 8009d62:	1c02      	adds	r2, r0, #0
 8009d64:	b240      	sxtb	r0, r0
            verify.DatarateParams.Datarate = datarate;
 8009d66:	ae07      	add	r6, sp, #28
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 8009d68:	4288      	cmp	r0, r1
 8009d6a:	da01      	bge.n	8009d70 <LoRaMacMcpsRequest+0xac>
 8009d6c:	466a      	mov	r2, sp
 8009d6e:	7812      	ldrb	r2, [r2, #0]
            verify.DatarateParams.Datarate = datarate;
 8009d70:	7032      	strb	r2, [r6, #0]
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8009d72:	2296      	movs	r2, #150	; 0x96
 8009d74:	0052      	lsls	r2, r2, #1
 8009d76:	5c9a      	ldrb	r2, [r3, r2]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_DR ) == true )
 8009d78:	7818      	ldrb	r0, [r3, #0]
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8009d7a:	70b2      	strb	r2, [r6, #2]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_DR ) == true )
 8009d7c:	0031      	movs	r1, r6
 8009d7e:	2205      	movs	r2, #5
 8009d80:	f001 f861 	bl	800ae46 <RegionVerify>
 8009d84:	2800      	cmp	r0, #0
 8009d86:	d0a2      	beq.n	8009cce <LoRaMacMcpsRequest+0xa>
                MacCtx.NvmCtx->MacParams.ChannelsDatarate = verify.DatarateParams.Datarate;
 8009d88:	4b1e      	ldr	r3, [pc, #120]	; (8009e04 <LoRaMacMcpsRequest+0x140>)
 8009d8a:	7832      	ldrb	r2, [r6, #0]
 8009d8c:	595b      	ldr	r3, [r3, r5]
 8009d8e:	33f9      	adds	r3, #249	; 0xf9
 8009d90:	701a      	strb	r2, [r3, #0]
        status = Send( &macHdr, fPort, fBuffer, fBufferSize );
 8009d92:	9b03      	ldr	r3, [sp, #12]
 8009d94:	9a02      	ldr	r2, [sp, #8]
 8009d96:	9901      	ldr	r1, [sp, #4]
 8009d98:	a804      	add	r0, sp, #16
 8009d9a:	f7fe fad5 	bl	8008348 <Send>
 8009d9e:	4b19      	ldr	r3, [pc, #100]	; (8009e04 <LoRaMacMcpsRequest+0x140>)
 8009da0:	1e05      	subs	r5, r0, #0
        if( status == LORAMAC_STATUS_OK )
 8009da2:	d127      	bne.n	8009df4 <LoRaMacMcpsRequest+0x130>
            MacCtx.McpsConfirm.McpsRequest = mcpsRequest->Type;
 8009da4:	7821      	ldrb	r1, [r4, #0]
 8009da6:	4a1c      	ldr	r2, [pc, #112]	; (8009e18 <LoRaMacMcpsRequest+0x154>)
 8009da8:	5499      	strb	r1, [r3, r2]
            MacCtx.MacFlags.Bits.McpsReq = 1;
 8009daa:	2201      	movs	r2, #1
 8009dac:	491b      	ldr	r1, [pc, #108]	; (8009e1c <LoRaMacMcpsRequest+0x158>)
 8009dae:	5c58      	ldrb	r0, [r3, r1]
 8009db0:	4302      	orrs	r2, r0
 8009db2:	545a      	strb	r2, [r3, r1]
    EventMacNvmCtxChanged( );
 8009db4:	f7fd f9ee 	bl	8007194 <EventMacNvmCtxChanged>
    return status;
 8009db8:	e78a      	b.n	8009cd0 <LoRaMacMcpsRequest+0xc>
            MacCtx.AckTimeoutRetries = MIN( mcpsRequest->Req.Confirmed.NbTrials, MAX_ACK_RETRIES );
 8009dba:	7be2      	ldrb	r2, [r4, #15]
 8009dbc:	1c13      	adds	r3, r2, #0
 8009dbe:	2a08      	cmp	r2, #8
 8009dc0:	d900      	bls.n	8009dc4 <LoRaMacMcpsRequest+0x100>
 8009dc2:	2308      	movs	r3, #8
 8009dc4:	4a12      	ldr	r2, [pc, #72]	; (8009e10 <LoRaMacMcpsRequest+0x14c>)
 8009dc6:	54bb      	strb	r3, [r7, r2]
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 8009dc8:	221f      	movs	r2, #31
 8009dca:	ab04      	add	r3, sp, #16
 8009dcc:	781b      	ldrb	r3, [r3, #0]
 8009dce:	401a      	ands	r2, r3
 8009dd0:	2380      	movs	r3, #128	; 0x80
 8009dd2:	425b      	negs	r3, r3
 8009dd4:	e7a2      	b.n	8009d1c <LoRaMacMcpsRequest+0x58>
            MacCtx.AckTimeoutRetries = 1;
 8009dd6:	4b0e      	ldr	r3, [pc, #56]	; (8009e10 <LoRaMacMcpsRequest+0x14c>)
 8009dd8:	54fd      	strb	r5, [r7, r3]
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 8009dda:	ab04      	add	r3, sp, #16
 8009ddc:	781a      	ldrb	r2, [r3, #0]
 8009dde:	2320      	movs	r3, #32
 8009de0:	425b      	negs	r3, r3
 8009de2:	4313      	orrs	r3, r2
 8009de4:	aa04      	add	r2, sp, #16
 8009de6:	7013      	strb	r3, [r2, #0]
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 8009de8:	6863      	ldr	r3, [r4, #4]
 8009dea:	9302      	str	r3, [sp, #8]
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
 8009dec:	8923      	ldrh	r3, [r4, #8]
 8009dee:	9303      	str	r3, [sp, #12]
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 8009df0:	230a      	movs	r3, #10
 8009df2:	e79d      	b.n	8009d30 <LoRaMacMcpsRequest+0x6c>
            MacCtx.NodeAckRequested = false;
 8009df4:	2100      	movs	r1, #0
 8009df6:	4a0a      	ldr	r2, [pc, #40]	; (8009e20 <LoRaMacMcpsRequest+0x15c>)
 8009df8:	5499      	strb	r1, [r3, r2]
 8009dfa:	e7db      	b.n	8009db4 <LoRaMacMcpsRequest+0xf0>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8009dfc:	2502      	movs	r5, #2
 8009dfe:	e7d9      	b.n	8009db4 <LoRaMacMcpsRequest+0xf0>
 8009e00:	20000d58 	.word	0x20000d58
 8009e04:	2000091c 	.word	0x2000091c
 8009e08:	0000043d 	.word	0x0000043d
 8009e0c:	00000412 	.word	0x00000412
 8009e10:	00000411 	.word	0x00000411
 8009e14:	00000484 	.word	0x00000484
 8009e18:	0000043c 	.word	0x0000043c
 8009e1c:	00000481 	.word	0x00000481
 8009e20:	00000414 	.word	0x00000414

08009e24 <LoRaMacAdrCalcNext>:
 * \param [OUT] adrAckCounter The calculated ADR acknowledgement counter.
 *
 * \retval Returns true, if an ADR request should be performed.
 */
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 8009e24:	b5f0      	push	{r4, r5, r6, r7, lr}
    if( adrNext->Version.Fields.Minor == 0 )
    {
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
    }
    return false;
 8009e26:	2500      	movs	r5, #0
{
 8009e28:	b08b      	sub	sp, #44	; 0x2c
 8009e2a:	9104      	str	r1, [sp, #16]
 8009e2c:	9205      	str	r2, [sp, #20]
 8009e2e:	9303      	str	r3, [sp, #12]
    if( adrNext->Version.Fields.Minor == 0 )
 8009e30:	7883      	ldrb	r3, [r0, #2]
{
 8009e32:	0004      	movs	r4, r0
    if( adrNext->Version.Fields.Minor == 0 )
 8009e34:	42ab      	cmp	r3, r5
 8009e36:	d127      	bne.n	8009e88 <LoRaMacAdrCalcNext+0x64>
    int8_t txPower = adrNext->TxPower;
 8009e38:	2311      	movs	r3, #17
    int8_t datarate = adrNext->Datarate;
 8009e3a:	2610      	movs	r6, #16
    int8_t txPower = adrNext->TxPower;
 8009e3c:	56c3      	ldrsb	r3, [r0, r3]
    int8_t datarate = adrNext->Datarate;
 8009e3e:	5786      	ldrsb	r6, [r0, r6]
    *adrAckCounter = adrNext->AdrAckCounter;
 8009e40:	6882      	ldr	r2, [r0, #8]
    int8_t txPower = adrNext->TxPower;
 8009e42:	9302      	str	r3, [sp, #8]
    *adrAckCounter = adrNext->AdrAckCounter;
 8009e44:	9b03      	ldr	r3, [sp, #12]
    int8_t datarate = adrNext->Datarate;
 8009e46:	0037      	movs	r7, r6
    *adrAckCounter = adrNext->AdrAckCounter;
 8009e48:	601a      	str	r2, [r3, #0]
    if( adrNext->AdrEnabled == true )
 8009e4a:	7945      	ldrb	r5, [r0, #5]
 8009e4c:	2d00      	cmp	r5, #0
 8009e4e:	d016      	beq.n	8009e7e <LoRaMacAdrCalcNext+0x5a>
        getPhy.Attribute = PHY_MIN_TX_DR;
 8009e50:	2302      	movs	r3, #2
 8009e52:	aa06      	add	r2, sp, #24
 8009e54:	7013      	strb	r3, [r2, #0]
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8009e56:	7c83      	ldrb	r3, [r0, #18]
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8009e58:	0011      	movs	r1, r2
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8009e5a:	7093      	strb	r3, [r2, #2]
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8009e5c:	7cc0      	ldrb	r0, [r0, #19]
 8009e5e:	f000 ffcf 	bl	800ae00 <RegionGetPhyParam>
        minTxDatarate = phyParam.Value;
 8009e62:	b243      	sxtb	r3, r0
 8009e64:	9301      	str	r3, [sp, #4]
        datarate = MAX( datarate, minTxDatarate );
 8009e66:	429e      	cmp	r6, r3
 8009e68:	da01      	bge.n	8009e6e <LoRaMacAdrCalcNext+0x4a>
 8009e6a:	466b      	mov	r3, sp
 8009e6c:	791f      	ldrb	r7, [r3, #4]
        if( datarate == minTxDatarate )
 8009e6e:	9b01      	ldr	r3, [sp, #4]
        datarate = MAX( datarate, minTxDatarate );
 8009e70:	b27f      	sxtb	r7, r7
        if( datarate == minTxDatarate )
 8009e72:	429e      	cmp	r6, r3
 8009e74:	dc0b      	bgt.n	8009e8e <LoRaMacAdrCalcNext+0x6a>
            *adrAckCounter = 0;
 8009e76:	2200      	movs	r2, #0
 8009e78:	9b03      	ldr	r3, [sp, #12]
 8009e7a:	601a      	str	r2, [r3, #0]
                        adrAckReq = false;
 8009e7c:	2500      	movs	r5, #0
    *drOut = datarate;
 8009e7e:	9b04      	ldr	r3, [sp, #16]
    *txPowOut = txPower;
 8009e80:	9a02      	ldr	r2, [sp, #8]
    *drOut = datarate;
 8009e82:	701f      	strb	r7, [r3, #0]
    *txPowOut = txPower;
 8009e84:	9b05      	ldr	r3, [sp, #20]
 8009e86:	701a      	strb	r2, [r3, #0]
}
 8009e88:	0028      	movs	r0, r5
 8009e8a:	b00b      	add	sp, #44	; 0x2c
 8009e8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 8009e8e:	2500      	movs	r5, #0
 8009e90:	89a1      	ldrh	r1, [r4, #12]
 8009e92:	68a2      	ldr	r2, [r4, #8]
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 8009e94:	89e3      	ldrh	r3, [r4, #14]
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 8009e96:	428a      	cmp	r2, r1
 8009e98:	416d      	adcs	r5, r5
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 8009e9a:	185b      	adds	r3, r3, r1
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 8009e9c:	b2ed      	uxtb	r5, r5
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 8009e9e:	429a      	cmp	r2, r3
 8009ea0:	d3ed      	bcc.n	8009e7e <LoRaMacAdrCalcNext+0x5a>
                getPhy.Attribute = PHY_MAX_TX_POWER;
 8009ea2:	2308      	movs	r3, #8
 8009ea4:	aa06      	add	r2, sp, #24
 8009ea6:	7013      	strb	r3, [r2, #0]
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8009ea8:	0011      	movs	r1, r2
 8009eaa:	7ce0      	ldrb	r0, [r4, #19]
 8009eac:	f000 ffa8 	bl	800ae00 <RegionGetPhyParam>
                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 8009eb0:	89e1      	ldrh	r1, [r4, #14]
                txPower = phyParam.Value;
 8009eb2:	b243      	sxtb	r3, r0
                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 8009eb4:	68a0      	ldr	r0, [r4, #8]
                txPower = phyParam.Value;
 8009eb6:	9302      	str	r3, [sp, #8]
                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 8009eb8:	f7f6 f9ca 	bl	8000250 <__aeabi_uidivmod>
 8009ebc:	000e      	movs	r6, r1
 8009ebe:	2901      	cmp	r1, #1
 8009ec0:	d1dd      	bne.n	8009e7e <LoRaMacAdrCalcNext+0x5a>
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8009ec2:	2322      	movs	r3, #34	; 0x22
 8009ec4:	aa06      	add	r2, sp, #24
                    getPhy.Datarate = datarate;
 8009ec6:	7057      	strb	r7, [r2, #1]
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8009ec8:	7013      	strb	r3, [r2, #0]
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8009eca:	7ca3      	ldrb	r3, [r4, #18]
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8009ecc:	0011      	movs	r1, r2
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8009ece:	7093      	strb	r3, [r2, #2]
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8009ed0:	7ce0      	ldrb	r0, [r4, #19]
 8009ed2:	f000 ff95 	bl	800ae00 <RegionGetPhyParam>
                    if( datarate == minTxDatarate )
 8009ed6:	9b01      	ldr	r3, [sp, #4]
                    datarate = phyParam.Value;
 8009ed8:	b247      	sxtb	r7, r0
                    if( datarate == minTxDatarate )
 8009eda:	42bb      	cmp	r3, r7
 8009edc:	d1cf      	bne.n	8009e7e <LoRaMacAdrCalcNext+0x5a>
                        if( adrNext->UpdateChanMask == true )
 8009ede:	7925      	ldrb	r5, [r4, #4]
 8009ee0:	2d00      	cmp	r5, #0
 8009ee2:	d0cc      	beq.n	8009e7e <LoRaMacAdrCalcNext+0x5a>
                            params.Type = INIT_TYPE_RESTORE_DEFAULT_CHANNELS;
 8009ee4:	a908      	add	r1, sp, #32
 8009ee6:	710e      	strb	r6, [r1, #4]
                            RegionInitDefaults( adrNext->Region, &params );
 8009ee8:	7ce0      	ldrb	r0, [r4, #19]
 8009eea:	f000 ff9c 	bl	800ae26 <RegionInitDefaults>
 8009eee:	e7c5      	b.n	8009e7c <LoRaMacAdrCalcNext+0x58>

08009ef0 <LoRaMacClassBInit>:
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif // LORAMAC_CLASSB_ENABLED
}
 8009ef0:	4770      	bx	lr

08009ef2 <LoRaMacClassBRestoreNvmCtx>:
        return false;
    }
#else
    return true;
#endif // LORAMAC_CLASSB_ENABLED
}
 8009ef2:	2001      	movs	r0, #1
 8009ef4:	4770      	bx	lr

08009ef6 <LoRaMacClassBGetNvmCtx>:
{
#ifdef LORAMAC_CLASSB_ENABLED
    *classBNvmCtxSize = sizeof( NvmCtx );
    return &NvmCtx;
#else
    *classBNvmCtxSize = 0;
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	6003      	str	r3, [r0, #0]
    return NULL;
#endif // LORAMAC_CLASSB_ENABLED
}
 8009efa:	0018      	movs	r0, r3
 8009efc:	4770      	bx	lr

08009efe <LoRaMacClassBSetBeaconState>:
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 8009efe:	4770      	bx	lr

08009f00 <LoRaMacClassBSetPingSlotState>:
 8009f00:	4770      	bx	lr

08009f02 <LoRaMacClassBSetMulticastSlotState>:
 8009f02:	4770      	bx	lr

08009f04 <LoRaMacClassBIsAcquisitionInProgress>:
    }
    return false;
#else
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}
 8009f04:	2000      	movs	r0, #0
 8009f06:	4770      	bx	lr

08009f08 <LoRaMacClassBBeaconTimerEvent>:
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 8009f08:	4770      	bx	lr

08009f0a <LoRaMacClassBPingSlotTimerEvent>:
 8009f0a:	4770      	bx	lr

08009f0c <LoRaMacClassBMulticastSlotTimerEvent>:
 8009f0c:	4770      	bx	lr

08009f0e <LoRaMacClassBRxBeacon>:
    }
    return beaconProcessed;
#else
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}
 8009f0e:	2000      	movs	r0, #0
 8009f10:	4770      	bx	lr

08009f12 <LoRaMacClassBIsBeaconExpected>:
 8009f12:	2000      	movs	r0, #0
 8009f14:	4770      	bx	lr

08009f16 <LoRaMacClassBIsPingExpected>:
 8009f16:	2000      	movs	r0, #0
 8009f18:	4770      	bx	lr

08009f1a <LoRaMacClassBIsMulticastExpected>:
 8009f1a:	2000      	movs	r0, #0
 8009f1c:	4770      	bx	lr

08009f1e <LoRaMacClassBIsBeaconModeActive>:
 8009f1e:	2000      	movs	r0, #0
 8009f20:	4770      	bx	lr

08009f22 <LoRaMacClassBSetPingSlotInfo>:
 8009f22:	4770      	bx	lr

08009f24 <LoRaMacClassBHaltBeaconing>:

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 8009f24:	4770      	bx	lr

08009f26 <LoRaMacClassBResumeBeaconing>:
 8009f26:	4770      	bx	lr

08009f28 <LoRaMacClassBSwitchClass>:
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif // LORAMAC_CLASSB_ENABLED
}
 8009f28:	2002      	movs	r0, #2
 8009f2a:	4770      	bx	lr

08009f2c <LoRaMacClassBMibGetRequestConfirm>:
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif // LORAMAC_CLASSB_ENABLED
}
 8009f2c:	2002      	movs	r0, #2
 8009f2e:	4770      	bx	lr

08009f30 <LoRaMacMibClassBSetRequestConfirm>:
 8009f30:	2002      	movs	r0, #2
 8009f32:	4770      	bx	lr

08009f34 <LoRaMacClassBPingSlotInfoAns>:
 8009f34:	4770      	bx	lr

08009f36 <LoRaMacClassBPingSlotChannelReq>:

    return status;
#else
    return 0;
#endif // LORAMAC_CLASSB_ENABLED
}
 8009f36:	2000      	movs	r0, #0
 8009f38:	4770      	bx	lr

08009f3a <LoRaMacClassBBeaconTimingAns>:

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 8009f3a:	4770      	bx	lr

08009f3c <LoRaMacClassBDeviceTimeAns>:
 8009f3c:	4770      	bx	lr

08009f3e <LoRaMacClassBBeaconFreqReq>:
    }
    return false;
#else
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}
 8009f3e:	2000      	movs	r0, #0
 8009f40:	4770      	bx	lr

08009f42 <LoRaMacClassBIsUplinkCollision>:
    }
    return 0;
#else
    return 0;
#endif // LORAMAC_CLASSB_ENABLED
}
 8009f42:	2000      	movs	r0, #0
 8009f44:	4770      	bx	lr

08009f46 <LoRaMacClassBStopRxSlots>:
 8009f46:	4770      	bx	lr

08009f48 <LoRaMacClassBProcess>:
 8009f48:	4770      	bx	lr
	...

08009f4c <NvmCtxCallback>:
/*
 * \brief Wrapper function for the NvmCtx
 */
static void NvmCtxCallback( void )
{
    if( CommandsNvmCtxChanged != NULL )
 8009f4c:	4b03      	ldr	r3, [pc, #12]	; (8009f5c <NvmCtxCallback+0x10>)
{
 8009f4e:	b510      	push	{r4, lr}
    if( CommandsNvmCtxChanged != NULL )
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d000      	beq.n	8009f58 <NvmCtxCallback+0xc>
    {
        CommandsNvmCtxChanged( );
 8009f56:	4798      	blx	r3
    }
}
 8009f58:	bd10      	pop	{r4, pc}
 8009f5a:	46c0      	nop			; (mov r8, r8)
 8009f5c:	20000da4 	.word	0x20000da4

08009f60 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( LoRaMacCommandsNvmEvent commandsNvmCtxChanged )
{
 8009f60:	b570      	push	{r4, r5, r6, lr}
    // Initialize with default
    memset1( ( uint8_t* )&NvmCtx, 0, sizeof( NvmCtx ) );
 8009f62:	4c06      	ldr	r4, [pc, #24]	; (8009f7c <LoRaMacCommandsInit+0x1c>)
{
 8009f64:	0005      	movs	r5, r0
    memset1( ( uint8_t* )&NvmCtx, 0, sizeof( NvmCtx ) );
 8009f66:	22fc      	movs	r2, #252	; 0xfc
 8009f68:	0020      	movs	r0, r4
 8009f6a:	2100      	movs	r1, #0
 8009f6c:	f002 fe18 	bl	800cba0 <memset1>
    list->First = 0;
 8009f70:	2000      	movs	r0, #0

    LinkedListInit( &NvmCtx.MacCommandList );

    // Assign callback
    CommandsNvmCtxChanged = commandsNvmCtxChanged;
 8009f72:	4b03      	ldr	r3, [pc, #12]	; (8009f80 <LoRaMacCommandsInit+0x20>)
    list->First = 0;
 8009f74:	6020      	str	r0, [r4, #0]
    CommandsNvmCtxChanged = commandsNvmCtxChanged;
 8009f76:	601d      	str	r5, [r3, #0]
    list->Last = 0;
 8009f78:	6060      	str	r0, [r4, #4]

    return LORAMAC_COMMANDS_SUCCESS;
}
 8009f7a:	bd70      	pop	{r4, r5, r6, pc}
 8009f7c:	20000da8 	.word	0x20000da8
 8009f80:	20000da4 	.word	0x20000da4

08009f84 <LoRaMacCommandsRestoreNvmCtx>:

LoRaMacCommandStatus_t LoRaMacCommandsRestoreNvmCtx( void* commandsNvmCtx )
{
 8009f84:	0001      	movs	r1, r0
 8009f86:	b510      	push	{r4, lr}
        memcpy1( ( uint8_t* )&NvmCtx, ( uint8_t* )commandsNvmCtx, sizeof( NvmCtx ) );
        return LORAMAC_COMMANDS_SUCCESS;
    }
    else
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8009f88:	2001      	movs	r0, #1
    if( commandsNvmCtx != NULL )
 8009f8a:	2900      	cmp	r1, #0
 8009f8c:	d004      	beq.n	8009f98 <LoRaMacCommandsRestoreNvmCtx+0x14>
        memcpy1( ( uint8_t* )&NvmCtx, ( uint8_t* )commandsNvmCtx, sizeof( NvmCtx ) );
 8009f8e:	4803      	ldr	r0, [pc, #12]	; (8009f9c <LoRaMacCommandsRestoreNvmCtx+0x18>)
 8009f90:	22fc      	movs	r2, #252	; 0xfc
 8009f92:	f002 fdf0 	bl	800cb76 <memcpy1>
        return LORAMAC_COMMANDS_SUCCESS;
 8009f96:	2000      	movs	r0, #0
    }
}
 8009f98:	bd10      	pop	{r4, pc}
 8009f9a:	46c0      	nop			; (mov r8, r8)
 8009f9c:	20000da8 	.word	0x20000da8

08009fa0 <LoRaMacCommandsGetNvmCtx>:

void* LoRaMacCommandsGetNvmCtx( size_t* commandsNvmCtxSize )
{
    *commandsNvmCtxSize = sizeof( NvmCtx );
 8009fa0:	23fc      	movs	r3, #252	; 0xfc
 8009fa2:	6003      	str	r3, [r0, #0]
    return &NvmCtx;
}
 8009fa4:	4800      	ldr	r0, [pc, #0]	; (8009fa8 <LoRaMacCommandsGetNvmCtx+0x8>)
 8009fa6:	4770      	bx	lr
 8009fa8:	20000da8 	.word	0x20000da8

08009fac <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 8009fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fae:	0006      	movs	r6, r0
 8009fb0:	0017      	movs	r7, r2
    if( payload == 0 )
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8009fb2:	2001      	movs	r0, #1
    if( payload == 0 )
 8009fb4:	2900      	cmp	r1, #0
 8009fb6:	d03c      	beq.n	800a032 <LoRaMacCommandsAddCmd+0x86>
 8009fb8:	2500      	movs	r5, #0
 8009fba:	4b21      	ldr	r3, [pc, #132]	; (800a040 <LoRaMacCommandsAddCmd+0x94>)
 8009fbc:	0018      	movs	r0, r3
    while( IsSlotFree( ( const MacCommand_t* )&NvmCtx.MacCommandSlots[itr] ) == false )
 8009fbe:	469c      	mov	ip, r3
 8009fc0:	012a      	lsls	r2, r5, #4
 8009fc2:	3010      	adds	r0, #16
        if( mem[size] != 0x00 )
 8009fc4:	781c      	ldrb	r4, [r3, #0]
 8009fc6:	2c00      	cmp	r4, #0
 8009fc8:	d134      	bne.n	800a034 <LoRaMacCommandsAddCmd+0x88>
 8009fca:	3301      	adds	r3, #1
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8009fcc:	4283      	cmp	r3, r0
 8009fce:	d1f9      	bne.n	8009fc4 <LoRaMacCommandsAddCmd+0x18>
    if( list->First == 0 )
 8009fd0:	481c      	ldr	r0, [pc, #112]	; (800a044 <LoRaMacCommandsAddCmd+0x98>)
 8009fd2:	6803      	ldr	r3, [r0, #0]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d101      	bne.n	8009fdc <LoRaMacCommandsAddCmd+0x30>
        list->First = element;
 8009fd8:	4663      	mov	r3, ip
 8009fda:	6003      	str	r3, [r0, #0]
    if( list->Last )
 8009fdc:	6843      	ldr	r3, [r0, #4]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d001      	beq.n	8009fe6 <LoRaMacCommandsAddCmd+0x3a>
        list->Last->Next = element;
 8009fe2:	4664      	mov	r4, ip
 8009fe4:	601c      	str	r4, [r3, #0]
    element->Next = 0;
 8009fe6:	2400      	movs	r4, #0
 8009fe8:	1883      	adds	r3, r0, r2
 8009fea:	609c      	str	r4, [r3, #8]
    list->Last = element;
 8009fec:	4664      	mov	r4, ip
        return LORAMAC_COMMANDS_ERROR;
    }

    // Set Values
    newCmd->CID = cid;
    newCmd->PayloadSize = payloadSize;
 8009fee:	3501      	adds	r5, #1
    newCmd->CID = cid;
 8009ff0:	731e      	strb	r6, [r3, #12]
    newCmd->PayloadSize = payloadSize;
 8009ff2:	012b      	lsls	r3, r5, #4
 8009ff4:	50c7      	str	r7, [r0, r3]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 8009ff6:	320d      	adds	r2, #13
 8009ff8:	b2bb      	uxth	r3, r7
    list->Last = element;
 8009ffa:	6044      	str	r4, [r0, #4]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 8009ffc:	1880      	adds	r0, r0, r2
 8009ffe:	001a      	movs	r2, r3
 800a000:	f002 fdb9 	bl	800cb76 <memcpy1>
            return false;
 800a004:	2400      	movs	r4, #0
 800a006:	2e0a      	cmp	r6, #10
 800a008:	d807      	bhi.n	800a01a <LoRaMacCommandsAddCmd+0x6e>
 800a00a:	3401      	adds	r4, #1
 800a00c:	23a4      	movs	r3, #164	; 0xa4
 800a00e:	40b4      	lsls	r4, r6
 800a010:	00db      	lsls	r3, r3, #3
 800a012:	401c      	ands	r4, r3
 800a014:	1e63      	subs	r3, r4, #1
 800a016:	419c      	sbcs	r4, r3
 800a018:	b2e4      	uxtb	r4, r4
    newCmd->IsSticky = IsSticky( cid );
 800a01a:	4b0a      	ldr	r3, [pc, #40]	; (800a044 <LoRaMacCommandsAddCmd+0x98>)
 800a01c:	012d      	lsls	r5, r5, #4
 800a01e:	195d      	adds	r5, r3, r5

    NvmCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 800a020:	33f8      	adds	r3, #248	; 0xf8
 800a022:	681a      	ldr	r2, [r3, #0]
    newCmd->IsSticky = IsSticky( cid );
 800a024:	712c      	strb	r4, [r5, #4]
    NvmCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 800a026:	3201      	adds	r2, #1
 800a028:	19d7      	adds	r7, r2, r7
 800a02a:	601f      	str	r7, [r3, #0]

    NvmCtxCallback( );
 800a02c:	f7ff ff8e 	bl	8009f4c <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
 800a030:	2000      	movs	r0, #0
}
 800a032:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a034:	3501      	adds	r5, #1
 800a036:	0003      	movs	r3, r0
        if( itr == NUM_OF_MAC_COMMANDS )
 800a038:	2d0f      	cmp	r5, #15
 800a03a:	d1bf      	bne.n	8009fbc <LoRaMacCommandsAddCmd+0x10>
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 800a03c:	2002      	movs	r0, #2
 800a03e:	e7f8      	b.n	800a032 <LoRaMacCommandsAddCmd+0x86>
 800a040:	20000db0 	.word	0x20000db0
 800a044:	20000da8 	.word	0x20000da8

0800a048 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 800a048:	b510      	push	{r4, lr}
    if( macCmd == NULL )
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800a04a:	2401      	movs	r4, #1
    if( macCmd == NULL )
 800a04c:	2800      	cmp	r0, #0
 800a04e:	d023      	beq.n	800a098 <LoRaMacCommandsRemoveCmd+0x50>
    curElement = list->First;
 800a050:	4a12      	ldr	r2, [pc, #72]	; (800a09c <LoRaMacCommandsRemoveCmd+0x54>)
 800a052:	6813      	ldr	r3, [r2, #0]
    if( element != curElement )
 800a054:	4298      	cmp	r0, r3
 800a056:	d104      	bne.n	800a062 <LoRaMacCommandsRemoveCmd+0x1a>
        list->First = element->Next;
 800a058:	6803      	ldr	r3, [r0, #0]
 800a05a:	6013      	str	r3, [r2, #0]
        curElement = NULL;
 800a05c:	2300      	movs	r3, #0
 800a05e:	e005      	b.n	800a06c <LoRaMacCommandsRemoveCmd+0x24>
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 800a060:	000b      	movs	r3, r1
 800a062:	2b00      	cmp	r3, #0
 800a064:	d002      	beq.n	800a06c <LoRaMacCommandsRemoveCmd+0x24>
 800a066:	6819      	ldr	r1, [r3, #0]
 800a068:	4288      	cmp	r0, r1
 800a06a:	d1f9      	bne.n	800a060 <LoRaMacCommandsRemoveCmd+0x18>
    if( list->Last == element )
 800a06c:	6851      	ldr	r1, [r2, #4]
 800a06e:	4288      	cmp	r0, r1
 800a070:	d100      	bne.n	800a074 <LoRaMacCommandsRemoveCmd+0x2c>
        list->Last = PrevElement;
 800a072:	6053      	str	r3, [r2, #4]
    if( PrevElement != NULL )
 800a074:	2b00      	cmp	r3, #0
 800a076:	d001      	beq.n	800a07c <LoRaMacCommandsRemoveCmd+0x34>
        PrevElement->Next = element->Next;
 800a078:	6801      	ldr	r1, [r0, #0]
 800a07a:	6019      	str	r1, [r3, #0]
    element->Next = NULL;
 800a07c:	2400      	movs	r4, #0
    if( LinkedListRemove( &NvmCtx.MacCommandList, macCmd ) == false )
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
    }

    NvmCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 800a07e:	32f8      	adds	r2, #248	; 0xf8
 800a080:	6813      	ldr	r3, [r2, #0]
 800a082:	6881      	ldr	r1, [r0, #8]
 800a084:	3b01      	subs	r3, #1
 800a086:	1a5b      	subs	r3, r3, r1
    element->Next = NULL;
 800a088:	6004      	str	r4, [r0, #0]
    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 800a08a:	0021      	movs	r1, r4
    NvmCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 800a08c:	6013      	str	r3, [r2, #0]
    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 800a08e:	2210      	movs	r2, #16
 800a090:	f002 fd86 	bl	800cba0 <memset1>
    if( FreeMacCommandSlot( macCmd ) == false )
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    NvmCtxCallback( );
 800a094:	f7ff ff5a 	bl	8009f4c <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
}
 800a098:	0020      	movs	r0, r4
 800a09a:	bd10      	pop	{r4, pc}
 800a09c:	20000da8 	.word	0x20000da8

0800a0a0 <LoRaMacCommandsRemoveNoneStickyCmds>:
{
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = NvmCtx.MacCommandList.First;
 800a0a0:	4b08      	ldr	r3, [pc, #32]	; (800a0c4 <LoRaMacCommandsRemoveNoneStickyCmds+0x24>)
{
 800a0a2:	b570      	push	{r4, r5, r6, lr}
    curElement = NvmCtx.MacCommandList.First;
 800a0a4:	681c      	ldr	r4, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800a0a6:	2c00      	cmp	r4, #0
 800a0a8:	d103      	bne.n	800a0b2 <LoRaMacCommandsRemoveNoneStickyCmds+0x12>
        {
            curElement = curElement->Next;
        }
    }

    NvmCtxCallback( );
 800a0aa:	f7ff ff4f 	bl	8009f4c <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
}
 800a0ae:	0020      	movs	r0, r4
 800a0b0:	bd70      	pop	{r4, r5, r6, pc}
        if( curElement->IsSticky == false )
 800a0b2:	7b23      	ldrb	r3, [r4, #12]
 800a0b4:	6825      	ldr	r5, [r4, #0]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d102      	bne.n	800a0c0 <LoRaMacCommandsRemoveNoneStickyCmds+0x20>
            LoRaMacCommandsRemoveCmd( curElement );
 800a0ba:	0020      	movs	r0, r4
 800a0bc:	f7ff ffc4 	bl	800a048 <LoRaMacCommandsRemoveCmd>
{
 800a0c0:	002c      	movs	r4, r5
 800a0c2:	e7f0      	b.n	800a0a6 <LoRaMacCommandsRemoveNoneStickyCmds+0x6>
 800a0c4:	20000da8 	.word	0x20000da8

0800a0c8 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 800a0c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0ca:	26a4      	movs	r6, #164	; 0xa4
 800a0cc:	2501      	movs	r5, #1
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = NvmCtx.MacCommandList.First;
 800a0ce:	4b0b      	ldr	r3, [pc, #44]	; (800a0fc <LoRaMacCommandsRemoveStickyAnsCmds+0x34>)
 800a0d0:	00f6      	lsls	r6, r6, #3
 800a0d2:	681c      	ldr	r4, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800a0d4:	2c00      	cmp	r4, #0
 800a0d6:	d103      	bne.n	800a0e0 <LoRaMacCommandsRemoveStickyAnsCmds+0x18>
            LoRaMacCommandsRemoveCmd( curElement );
        }
        curElement = nexElement;
    }

    NvmCtxCallback( );
 800a0d8:	f7ff ff38 	bl	8009f4c <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
}
 800a0dc:	0020      	movs	r0, r4
 800a0de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if( IsSticky( curElement->CID ) == true )
 800a0e0:	7923      	ldrb	r3, [r4, #4]
        nexElement = curElement->Next;
 800a0e2:	6827      	ldr	r7, [r4, #0]
 800a0e4:	2b0a      	cmp	r3, #10
 800a0e6:	d806      	bhi.n	800a0f6 <LoRaMacCommandsRemoveStickyAnsCmds+0x2e>
 800a0e8:	002a      	movs	r2, r5
 800a0ea:	409a      	lsls	r2, r3
 800a0ec:	4232      	tst	r2, r6
 800a0ee:	d002      	beq.n	800a0f6 <LoRaMacCommandsRemoveStickyAnsCmds+0x2e>
            LoRaMacCommandsRemoveCmd( curElement );
 800a0f0:	0020      	movs	r0, r4
 800a0f2:	f7ff ffa9 	bl	800a048 <LoRaMacCommandsRemoveCmd>
{
 800a0f6:	003c      	movs	r4, r7
 800a0f8:	e7ec      	b.n	800a0d4 <LoRaMacCommandsRemoveStickyAnsCmds+0xc>
 800a0fa:	46c0      	nop			; (mov r8, r8)
 800a0fc:	20000da8 	.word	0x20000da8

0800a100 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
    if( size == NULL )
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800a100:	2301      	movs	r3, #1
    if( size == NULL )
 800a102:	2800      	cmp	r0, #0
 800a104:	d004      	beq.n	800a110 <LoRaMacCommandsGetSizeSerializedCmds+0x10>
    }
    *size = NvmCtx.SerializedCmdsSize;
 800a106:	4b03      	ldr	r3, [pc, #12]	; (800a114 <LoRaMacCommandsGetSizeSerializedCmds+0x14>)
 800a108:	33f8      	adds	r3, #248	; 0xf8
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	6003      	str	r3, [r0, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 800a10e:	2300      	movs	r3, #0
}
 800a110:	0018      	movs	r0, r3
 800a112:	4770      	bx	lr
 800a114:	20000da8 	.word	0x20000da8

0800a118 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 800a118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a11a:	0006      	movs	r6, r0
 800a11c:	0015      	movs	r5, r2
    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800a11e:	2001      	movs	r0, #1
    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 800a120:	2a00      	cmp	r2, #0
 800a122:	d007      	beq.n	800a134 <LoRaMacCommandsSerializeCmds+0x1c>
 800a124:	2900      	cmp	r1, #0
 800a126:	d005      	beq.n	800a134 <LoRaMacCommandsSerializeCmds+0x1c>
    }
    MacCommand_t* curElement;
    curElement = NvmCtx.MacCommandList.First;
 800a128:	4b0d      	ldr	r3, [pc, #52]	; (800a160 <LoRaMacCommandsSerializeCmds+0x48>)
 800a12a:	681c      	ldr	r4, [r3, #0]
    uint8_t itr = 0;
 800a12c:	2300      	movs	r3, #0

    // Loop through all elements
    while( curElement != NULL )
 800a12e:	2c00      	cmp	r4, #0
 800a130:	d101      	bne.n	800a136 <LoRaMacCommandsSerializeCmds+0x1e>
            break;
        }
        curElement = curElement->Next;
    }

    return LORAMAC_COMMANDS_SUCCESS;
 800a132:	2000      	movs	r0, #0
}
 800a134:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 800a136:	68a2      	ldr	r2, [r4, #8]
 800a138:	1af1      	subs	r1, r6, r3
 800a13a:	3201      	adds	r2, #1
 800a13c:	4291      	cmp	r1, r2
 800a13e:	d3f8      	bcc.n	800a132 <LoRaMacCommandsSerializeCmds+0x1a>
            buffer[itr++] = curElement->CID;
 800a140:	7922      	ldrb	r2, [r4, #4]
 800a142:	1c5f      	adds	r7, r3, #1
 800a144:	54ea      	strb	r2, [r5, r3]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 800a146:	68a3      	ldr	r3, [r4, #8]
            buffer[itr++] = curElement->CID;
 800a148:	b2ff      	uxtb	r7, r7
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 800a14a:	b29a      	uxth	r2, r3
 800a14c:	1d61      	adds	r1, r4, #5
 800a14e:	19e8      	adds	r0, r5, r7
 800a150:	f002 fd11 	bl	800cb76 <memcpy1>
            itr = itr + curElement->PayloadSize;
 800a154:	68a3      	ldr	r3, [r4, #8]
        curElement = curElement->Next;
 800a156:	6824      	ldr	r4, [r4, #0]
            itr = itr + curElement->PayloadSize;
 800a158:	18ff      	adds	r7, r7, r3
 800a15a:	b2fb      	uxtb	r3, r7
 800a15c:	e7e7      	b.n	800a12e <LoRaMacCommandsSerializeCmds+0x16>
 800a15e:	46c0      	nop			; (mov r8, r8)
 800a160:	20000da8 	.word	0x20000da8

0800a164 <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
    if( cmdsPending == NULL )
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800a164:	2301      	movs	r3, #1
    if( cmdsPending == NULL )
 800a166:	2800      	cmp	r0, #0
 800a168:	d00b      	beq.n	800a182 <LoRaMacCommandsStickyCmdsPending+0x1e>
    }
    MacCommand_t* curElement;
    curElement = NvmCtx.MacCommandList.First;

    *cmdsPending = false;
 800a16a:	2200      	movs	r2, #0
    curElement = NvmCtx.MacCommandList.First;
 800a16c:	4b07      	ldr	r3, [pc, #28]	; (800a18c <LoRaMacCommandsStickyCmdsPending+0x28>)
 800a16e:	681b      	ldr	r3, [r3, #0]
    *cmdsPending = false;
 800a170:	7002      	strb	r2, [r0, #0]

    // Loop through all elements
    while( curElement != NULL )
 800a172:	2b00      	cmp	r3, #0
 800a174:	d005      	beq.n	800a182 <LoRaMacCommandsStickyCmdsPending+0x1e>
    {
        if( curElement->IsSticky == true )
 800a176:	7b1a      	ldrb	r2, [r3, #12]
 800a178:	2a00      	cmp	r2, #0
 800a17a:	d004      	beq.n	800a186 <LoRaMacCommandsStickyCmdsPending+0x22>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
 800a17c:	2301      	movs	r3, #1
 800a17e:	7003      	strb	r3, [r0, #0]
            return LORAMAC_COMMANDS_SUCCESS;
 800a180:	2300      	movs	r3, #0
        }
        curElement = curElement->Next;
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800a182:	0018      	movs	r0, r3
 800a184:	4770      	bx	lr
        curElement = curElement->Next;
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	e7f3      	b.n	800a172 <LoRaMacCommandsStickyCmdsPending+0xe>
 800a18a:	46c0      	nop			; (mov r8, r8)
 800a18c:	20000da8 	.word	0x20000da8

0800a190 <LoRaMacConfirmQueueInit>:
    }
    return NULL;
}

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives, LoRaMacConfirmQueueNvmEvent confirmQueueNvmCtxChanged )
{
 800a190:	b570      	push	{r4, r5, r6, lr}
    ConfirmQueueCtx.Primitives = primitives;
 800a192:	4c0a      	ldr	r4, [pc, #40]	; (800a1bc <LoRaMacConfirmQueueInit+0x2c>)

    // Assign nvm context
    ConfirmQueueCtx.ConfirmQueueNvmCtx = &ConfirmQueueNvmCtx;

    // Init counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt = 0;
 800a194:	2200      	movs	r2, #0
 800a196:	0023      	movs	r3, r4
    ConfirmQueueCtx.Primitives = primitives;
 800a198:	6020      	str	r0, [r4, #0]
    ConfirmQueueCtx.ConfirmQueueNvmCtx = &ConfirmQueueNvmCtx;
 800a19a:	0020      	movs	r0, r4
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt = 0;
 800a19c:	3328      	adds	r3, #40	; 0x28
    ConfirmQueueCtx.ConfirmQueueNvmCtx = &ConfirmQueueNvmCtx;
 800a19e:	3014      	adds	r0, #20
{
 800a1a0:	000d      	movs	r5, r1
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt = 0;
 800a1a2:	701a      	strb	r2, [r3, #0]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;

    memset1( ( uint8_t* )ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue ) );
 800a1a4:	21ff      	movs	r1, #255	; 0xff
 800a1a6:	3214      	adds	r2, #20
    ConfirmQueueCtx.ConfirmQueueNvmCtx = &ConfirmQueueNvmCtx;
 800a1a8:	6120      	str	r0, [r4, #16]
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 800a1aa:	6060      	str	r0, [r4, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 800a1ac:	60a0      	str	r0, [r4, #8]
    memset1( ( uint8_t* )ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue ) );
 800a1ae:	f002 fcf7 	bl	800cba0 <memset1>

    // Common status
    ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a1b2:	2301      	movs	r3, #1
 800a1b4:	6922      	ldr	r2, [r4, #16]

    // Assign callback
    ConfirmQueueCtx.LoRaMacConfirmQueueNvmEvent = confirmQueueNvmCtxChanged;
 800a1b6:	60e5      	str	r5, [r4, #12]
    ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a1b8:	7553      	strb	r3, [r2, #21]
}
 800a1ba:	bd70      	pop	{r4, r5, r6, pc}
 800a1bc:	20000ea4 	.word	0x20000ea4

0800a1c0 <LoRaMacConfirmQueueRestoreNvmCtx>:

bool LoRaMacConfirmQueueRestoreNvmCtx( void* confirmQueueNvmCtx )
{
 800a1c0:	0001      	movs	r1, r0
        memcpy1( ( uint8_t* )&ConfirmQueueNvmCtx, ( uint8_t* ) confirmQueueNvmCtx, sizeof( ConfirmQueueNvmCtx ) );
        return true;
    }
    else
    {
        return false;
 800a1c2:	2000      	movs	r0, #0
{
 800a1c4:	b510      	push	{r4, lr}
    if( confirmQueueNvmCtx != NULL )
 800a1c6:	4281      	cmp	r1, r0
 800a1c8:	d005      	beq.n	800a1d6 <LoRaMacConfirmQueueRestoreNvmCtx+0x16>
        memcpy1( ( uint8_t* )&ConfirmQueueNvmCtx, ( uint8_t* ) confirmQueueNvmCtx, sizeof( ConfirmQueueNvmCtx ) );
 800a1ca:	4803      	ldr	r0, [pc, #12]	; (800a1d8 <LoRaMacConfirmQueueRestoreNvmCtx+0x18>)
 800a1cc:	2216      	movs	r2, #22
 800a1ce:	3014      	adds	r0, #20
 800a1d0:	f002 fcd1 	bl	800cb76 <memcpy1>
        return true;
 800a1d4:	2001      	movs	r0, #1
    }
}
 800a1d6:	bd10      	pop	{r4, pc}
 800a1d8:	20000ea4 	.word	0x20000ea4

0800a1dc <LoRaMacConfirmQueueGetNvmCtx>:

void* LoRaMacConfirmQueueGetNvmCtx( size_t* confirmQueueNvmCtxSize )
{
    *confirmQueueNvmCtxSize = sizeof( ConfirmQueueNvmCtx );
 800a1dc:	2316      	movs	r3, #22
 800a1de:	6003      	str	r3, [r0, #0]
    return &ConfirmQueueNvmCtx;
 800a1e0:	4801      	ldr	r0, [pc, #4]	; (800a1e8 <LoRaMacConfirmQueueGetNvmCtx+0xc>)
}
 800a1e2:	3014      	adds	r0, #20
 800a1e4:	4770      	bx	lr
 800a1e6:	46c0      	nop			; (mov r8, r8)
 800a1e8:	20000ea4 	.word	0x20000ea4

0800a1ec <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 800a1ec:	b530      	push	{r4, r5, lr}
    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 800a1ee:	4c0d      	ldr	r4, [pc, #52]	; (800a224 <LoRaMacConfirmQueueAdd+0x38>)
    {
        // Protect the buffer against overwrites
        return false;
 800a1f0:	2100      	movs	r1, #0
    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 800a1f2:	6922      	ldr	r2, [r4, #16]
 800a1f4:	7d13      	ldrb	r3, [r2, #20]
 800a1f6:	2b04      	cmp	r3, #4
 800a1f8:	d812      	bhi.n	800a220 <LoRaMacConfirmQueueAdd+0x34>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 800a1fa:	7805      	ldrb	r5, [r0, #0]
 800a1fc:	68a3      	ldr	r3, [r4, #8]
 800a1fe:	701d      	strb	r5, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 800a200:	7845      	ldrb	r5, [r0, #1]
 800a202:	705d      	strb	r5, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 800a204:	78c0      	ldrb	r0, [r0, #3]
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 800a206:	7099      	strb	r1, [r3, #2]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 800a208:	70d8      	strb	r0, [r3, #3]
    // Increase counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt++;
 800a20a:	7d11      	ldrb	r1, [r2, #20]
        bufferPointer++;
 800a20c:	1d18      	adds	r0, r3, #4
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt++;
 800a20e:	3101      	adds	r1, #1
 800a210:	7511      	strb	r1, [r2, #20]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800a212:	0011      	movs	r1, r2
 800a214:	3110      	adds	r1, #16
 800a216:	428b      	cmp	r3, r1
 800a218:	d100      	bne.n	800a21c <LoRaMacConfirmQueueAdd+0x30>
        bufferPointer = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 800a21a:	0010      	movs	r0, r2
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );

    return true;
 800a21c:	2101      	movs	r1, #1
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 800a21e:	60a0      	str	r0, [r4, #8]
}
 800a220:	0008      	movs	r0, r1
 800a222:	bd30      	pop	{r4, r5, pc}
 800a224:	20000ea4 	.word	0x20000ea4

0800a228 <LoRaMacConfirmQueueRemoveFirst>:

bool LoRaMacConfirmQueueRemoveFirst( void )
{
    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt == 0 )
    {
        return false;
 800a228:	2000      	movs	r0, #0
{
 800a22a:	b510      	push	{r4, lr}
    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt == 0 )
 800a22c:	4908      	ldr	r1, [pc, #32]	; (800a250 <LoRaMacConfirmQueueRemoveFirst+0x28>)
 800a22e:	690b      	ldr	r3, [r1, #16]
 800a230:	7d1a      	ldrb	r2, [r3, #20]
 800a232:	4282      	cmp	r2, r0
 800a234:	d00a      	beq.n	800a24c <LoRaMacConfirmQueueRemoveFirst+0x24>
    }

    // Increase counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt--;
 800a236:	3a01      	subs	r2, #1
 800a238:	751a      	strb	r2, [r3, #20]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800a23a:	001a      	movs	r2, r3
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 800a23c:	684c      	ldr	r4, [r1, #4]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800a23e:	3210      	adds	r2, #16
        bufferPointer++;
 800a240:	1d20      	adds	r0, r4, #4
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800a242:	4294      	cmp	r4, r2
 800a244:	d100      	bne.n	800a248 <LoRaMacConfirmQueueRemoveFirst+0x20>
        bufferPointer = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 800a246:	0018      	movs	r0, r3
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 800a248:	6048      	str	r0, [r1, #4]

    return true;
 800a24a:	2001      	movs	r0, #1
}
 800a24c:	bd10      	pop	{r4, pc}
 800a24e:	46c0      	nop			; (mov r8, r8)
 800a250:	20000ea4 	.word	0x20000ea4

0800a254 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 800a254:	b570      	push	{r4, r5, r6, lr}
    MlmeConfirmQueue_t* element = NULL;

    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt > 0 )
 800a256:	4c0c      	ldr	r4, [pc, #48]	; (800a288 <LoRaMacConfirmQueueSetStatus+0x34>)
 800a258:	6922      	ldr	r2, [r4, #16]
 800a25a:	7d13      	ldrb	r3, [r2, #20]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d005      	beq.n	800a26c <LoRaMacConfirmQueueSetStatus+0x18>
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800a260:	0015      	movs	r5, r2
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800a262:	6863      	ldr	r3, [r4, #4]
 800a264:	68a4      	ldr	r4, [r4, #8]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800a266:	3510      	adds	r5, #16
    while( element != bufferEnd )
 800a268:	429c      	cmp	r4, r3
 800a26a:	d100      	bne.n	800a26e <LoRaMacConfirmQueueSetStatus+0x1a>
        {
            element->Status = status;
            element->ReadyToHandle = true;
        }
    }
}
 800a26c:	bd70      	pop	{r4, r5, r6, pc}
        if( element->Request == request )
 800a26e:	781e      	ldrb	r6, [r3, #0]
 800a270:	428e      	cmp	r6, r1
 800a272:	d005      	beq.n	800a280 <LoRaMacConfirmQueueSetStatus+0x2c>
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800a274:	42ab      	cmp	r3, r5
 800a276:	d101      	bne.n	800a27c <LoRaMacConfirmQueueSetStatus+0x28>
        bufferPointer = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 800a278:	0013      	movs	r3, r2
 800a27a:	e7f5      	b.n	800a268 <LoRaMacConfirmQueueSetStatus+0x14>
        bufferPointer++;
 800a27c:	3304      	adds	r3, #4
 800a27e:	e7f3      	b.n	800a268 <LoRaMacConfirmQueueSetStatus+0x14>
            element->ReadyToHandle = true;
 800a280:	2201      	movs	r2, #1
            element->Status = status;
 800a282:	7058      	strb	r0, [r3, #1]
            element->ReadyToHandle = true;
 800a284:	709a      	strb	r2, [r3, #2]
 800a286:	e7f1      	b.n	800a26c <LoRaMacConfirmQueueSetStatus+0x18>
 800a288:	20000ea4 	.word	0x20000ea4

0800a28c <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 800a28c:	b530      	push	{r4, r5, lr}
    MlmeConfirmQueue_t* element = NULL;

    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt > 0 )
 800a28e:	490d      	ldr	r1, [pc, #52]	; (800a2c4 <LoRaMacConfirmQueueGetStatus+0x38>)
        if( element != NULL )
        {
            return element->Status;
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a290:	2301      	movs	r3, #1
    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt > 0 )
 800a292:	690a      	ldr	r2, [r1, #16]
 800a294:	7d14      	ldrb	r4, [r2, #20]
 800a296:	2c00      	cmp	r4, #0
 800a298:	d006      	beq.n	800a2a8 <LoRaMacConfirmQueueGetStatus+0x1c>
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800a29a:	0014      	movs	r4, r2
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800a29c:	684b      	ldr	r3, [r1, #4]
 800a29e:	6889      	ldr	r1, [r1, #8]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800a2a0:	3410      	adds	r4, #16
    while( element != bufferEnd )
 800a2a2:	4299      	cmp	r1, r3
 800a2a4:	d102      	bne.n	800a2ac <LoRaMacConfirmQueueGetStatus+0x20>
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a2a6:	2301      	movs	r3, #1
}
 800a2a8:	0018      	movs	r0, r3
 800a2aa:	bd30      	pop	{r4, r5, pc}
        if( element->Request == request )
 800a2ac:	781d      	ldrb	r5, [r3, #0]
 800a2ae:	4285      	cmp	r5, r0
 800a2b0:	d005      	beq.n	800a2be <LoRaMacConfirmQueueGetStatus+0x32>
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800a2b2:	42a3      	cmp	r3, r4
 800a2b4:	d101      	bne.n	800a2ba <LoRaMacConfirmQueueGetStatus+0x2e>
        bufferPointer = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 800a2b6:	0013      	movs	r3, r2
 800a2b8:	e7f3      	b.n	800a2a2 <LoRaMacConfirmQueueGetStatus+0x16>
        bufferPointer++;
 800a2ba:	3304      	adds	r3, #4
 800a2bc:	e7f1      	b.n	800a2a2 <LoRaMacConfirmQueueGetStatus+0x16>
            return element->Status;
 800a2be:	785b      	ldrb	r3, [r3, #1]
 800a2c0:	e7f2      	b.n	800a2a8 <LoRaMacConfirmQueueGetStatus+0x1c>
 800a2c2:	46c0      	nop			; (mov r8, r8)
 800a2c4:	20000ea4 	.word	0x20000ea4

0800a2c8 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 800a2c8:	b570      	push	{r4, r5, r6, lr}
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 800a2ca:	490c      	ldr	r1, [pc, #48]	; (800a2fc <LoRaMacConfirmQueueSetStatusCmn+0x34>)

    ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus = status;
 800a2cc:	690a      	ldr	r2, [r1, #16]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 800a2ce:	684b      	ldr	r3, [r1, #4]

    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt > 0 )
 800a2d0:	7d14      	ldrb	r4, [r2, #20]
    ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus = status;
 800a2d2:	7550      	strb	r0, [r2, #21]
    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt > 0 )
 800a2d4:	2c00      	cmp	r4, #0
 800a2d6:	d00d      	beq.n	800a2f4 <LoRaMacConfirmQueueSetStatusCmn+0x2c>
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800a2d8:	0014      	movs	r4, r2
            element->Status = status;
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
            {
                element->ReadyToHandle = true;
 800a2da:	2501      	movs	r5, #1
            }
            element = IncreaseBufferPointer( element );
        }while( element != ConfirmQueueCtx.BufferEnd );
 800a2dc:	6889      	ldr	r1, [r1, #8]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800a2de:	3410      	adds	r4, #16
            if( element->RestrictCommonReadyToHandle == false )
 800a2e0:	78de      	ldrb	r6, [r3, #3]
            element->Status = status;
 800a2e2:	7058      	strb	r0, [r3, #1]
            if( element->RestrictCommonReadyToHandle == false )
 800a2e4:	2e00      	cmp	r6, #0
 800a2e6:	d100      	bne.n	800a2ea <LoRaMacConfirmQueueSetStatusCmn+0x22>
                element->ReadyToHandle = true;
 800a2e8:	709d      	strb	r5, [r3, #2]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800a2ea:	42a3      	cmp	r3, r4
 800a2ec:	d103      	bne.n	800a2f6 <LoRaMacConfirmQueueSetStatusCmn+0x2e>
        bufferPointer = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 800a2ee:	0013      	movs	r3, r2
        }while( element != ConfirmQueueCtx.BufferEnd );
 800a2f0:	4299      	cmp	r1, r3
 800a2f2:	d1f5      	bne.n	800a2e0 <LoRaMacConfirmQueueSetStatusCmn+0x18>
    }
}
 800a2f4:	bd70      	pop	{r4, r5, r6, pc}
        bufferPointer++;
 800a2f6:	3304      	adds	r3, #4
 800a2f8:	e7fa      	b.n	800a2f0 <LoRaMacConfirmQueueSetStatusCmn+0x28>
 800a2fa:	46c0      	nop			; (mov r8, r8)
 800a2fc:	20000ea4 	.word	0x20000ea4

0800a300 <LoRaMacConfirmQueueIsCmdActive>:
    return ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 800a300:	4a0a      	ldr	r2, [pc, #40]	; (800a32c <LoRaMacConfirmQueueIsCmdActive+0x2c>)
{
 800a302:	b530      	push	{r4, r5, lr}
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 800a304:	6853      	ldr	r3, [r2, #4]
 800a306:	6891      	ldr	r1, [r2, #8]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800a308:	6912      	ldr	r2, [r2, #16]
 800a30a:	0014      	movs	r4, r2
 800a30c:	3410      	adds	r4, #16
    while( element != bufferEnd )
 800a30e:	4299      	cmp	r1, r3
 800a310:	d101      	bne.n	800a316 <LoRaMacConfirmQueueIsCmdActive+0x16>
    {
        return true;
    }
    return false;
 800a312:	2000      	movs	r0, #0
}
 800a314:	bd30      	pop	{r4, r5, pc}
        if( element->Request == request )
 800a316:	781d      	ldrb	r5, [r3, #0]
 800a318:	4285      	cmp	r5, r0
 800a31a:	d005      	beq.n	800a328 <LoRaMacConfirmQueueIsCmdActive+0x28>
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800a31c:	42a3      	cmp	r3, r4
 800a31e:	d001      	beq.n	800a324 <LoRaMacConfirmQueueIsCmdActive+0x24>
        bufferPointer++;
 800a320:	3304      	adds	r3, #4
 800a322:	e7f4      	b.n	800a30e <LoRaMacConfirmQueueIsCmdActive+0xe>
        bufferPointer = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 800a324:	0013      	movs	r3, r2
 800a326:	e7f2      	b.n	800a30e <LoRaMacConfirmQueueIsCmdActive+0xe>
        return true;
 800a328:	2001      	movs	r0, #1
 800a32a:	e7f3      	b.n	800a314 <LoRaMacConfirmQueueIsCmdActive+0x14>
 800a32c:	20000ea4 	.word	0x20000ea4

0800a330 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 800a330:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a332:	0005      	movs	r5, r0
    uint8_t nbElements = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt;
    bool readyToHandle = false;
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 800a334:	2400      	movs	r4, #0
    uint8_t nbElements = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt;
 800a336:	4e13      	ldr	r6, [pc, #76]	; (800a384 <LoRaMacConfirmQueueHandleCb+0x54>)
{
 800a338:	b085      	sub	sp, #20
    uint8_t nbElements = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt;
 800a33a:	6933      	ldr	r3, [r6, #16]
 800a33c:	7d1b      	ldrb	r3, [r3, #20]
 800a33e:	9301      	str	r3, [sp, #4]
    for( uint8_t i = 0; i < nbElements; i++ )
 800a340:	9b01      	ldr	r3, [sp, #4]
 800a342:	429c      	cmp	r4, r3
 800a344:	d101      	bne.n	800a34a <LoRaMacConfirmQueueHandleCb+0x1a>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
        }
    }
}
 800a346:	b005      	add	sp, #20
 800a348:	bdf0      	pop	{r4, r5, r6, r7, pc}
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 800a34a:	6873      	ldr	r3, [r6, #4]
 800a34c:	7818      	ldrb	r0, [r3, #0]
 800a34e:	7028      	strb	r0, [r5, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 800a350:	7859      	ldrb	r1, [r3, #1]
 800a352:	7069      	strb	r1, [r5, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 800a354:	789f      	ldrb	r7, [r3, #2]
        if( readyToHandle == true )
 800a356:	2f00      	cmp	r7, #0
 800a358:	d00d      	beq.n	800a376 <LoRaMacConfirmQueueHandleCb+0x46>
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 800a35a:	6833      	ldr	r3, [r6, #0]
 800a35c:	0028      	movs	r0, r5
 800a35e:	689b      	ldr	r3, [r3, #8]
 800a360:	4798      	blx	r3
        LoRaMacConfirmQueueRemoveFirst( );
 800a362:	f7ff ff61 	bl	800a228 <LoRaMacConfirmQueueRemoveFirst>
        if( readyToHandle == false )
 800a366:	2f00      	cmp	r7, #0
 800a368:	d102      	bne.n	800a370 <LoRaMacConfirmQueueHandleCb+0x40>
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 800a36a:	a803      	add	r0, sp, #12
 800a36c:	f7ff ff3e 	bl	800a1ec <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 800a370:	3401      	adds	r4, #1
 800a372:	b2e4      	uxtb	r4, r4
 800a374:	e7e4      	b.n	800a340 <LoRaMacConfirmQueueHandleCb+0x10>
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 800a376:	aa03      	add	r2, sp, #12
 800a378:	7010      	strb	r0, [r2, #0]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 800a37a:	7051      	strb	r1, [r2, #1]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 800a37c:	78db      	ldrb	r3, [r3, #3]
 800a37e:	70d3      	strb	r3, [r2, #3]
 800a380:	e7ef      	b.n	800a362 <LoRaMacConfirmQueueHandleCb+0x32>
 800a382:	46c0      	nop			; (mov r8, r8)
 800a384:	20000ea4 	.word	0x20000ea4

0800a388 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
    return ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt;
 800a388:	4b01      	ldr	r3, [pc, #4]	; (800a390 <LoRaMacConfirmQueueGetCnt+0x8>)
 800a38a:	691b      	ldr	r3, [r3, #16]
 800a38c:	7d18      	ldrb	r0, [r3, #20]
}
 800a38e:	4770      	bx	lr
 800a390:	20000ea4 	.word	0x20000ea4

0800a394 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 800a394:	2004      	movs	r0, #4
    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 800a396:	4b03      	ldr	r3, [pc, #12]	; (800a3a4 <LoRaMacConfirmQueueIsFull+0x10>)
 800a398:	691b      	ldr	r3, [r3, #16]
 800a39a:	7d1b      	ldrb	r3, [r3, #20]
 800a39c:	4298      	cmp	r0, r3
 800a39e:	4180      	sbcs	r0, r0
 800a3a0:	4240      	negs	r0, r0
    }
    else
    {
        return false;
    }
}
 800a3a2:	4770      	bx	lr
 800a3a4:	20000ea4 	.word	0x20000ea4

0800a3a8 <GetLastFcntDown>:
{
    if( lastDown == NULL )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }
    switch( fCntID )
 800a3a8:	3801      	subs	r0, #1
{
 800a3aa:	b500      	push	{lr}
            break;
        case MC_FCNT_DOWN_3:
            *lastDown = CryptoCtx.NvmCtx->FCntList.McFCntDown3;
            break;
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 800a3ac:	2305      	movs	r3, #5
    switch( fCntID )
 800a3ae:	2806      	cmp	r0, #6
 800a3b0:	d80d      	bhi.n	800a3ce <GetLastFcntDown+0x26>
 800a3b2:	4b11      	ldr	r3, [pc, #68]	; (800a3f8 <GetLastFcntDown+0x50>)
            *lastDown = CryptoCtx.NvmCtx->FCntList.McFCntDown3;
 800a3b4:	685b      	ldr	r3, [r3, #4]
    switch( fCntID )
 800a3b6:	f7f5 fea7 	bl	8000108 <__gnu_thumb1_case_uqi>
 800a3ba:	0c04      	.short	0x0c04
 800a3bc:	1b191611 	.word	0x1b191611
 800a3c0:	1d          	.byte	0x1d
 800a3c1:	00          	.byte	0x00
            *lastDown = CryptoCtx.NvmCtx->FCntList.NFCntDown;
 800a3c2:	691a      	ldr	r2, [r3, #16]
 800a3c4:	600a      	str	r2, [r1, #0]
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.NFCntDown;
 800a3c6:	001a      	movs	r2, r3
 800a3c8:	3210      	adds	r2, #16
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.FCntDown;
 800a3ca:	631a      	str	r2, [r3, #48]	; 0x30
    }
    return LORAMAC_CRYPTO_SUCCESS;
 800a3cc:	2300      	movs	r3, #0
}
 800a3ce:	0018      	movs	r0, r3
 800a3d0:	bd00      	pop	{pc}
            *lastDown = CryptoCtx.NvmCtx->FCntList.AFCntDown;
 800a3d2:	695a      	ldr	r2, [r3, #20]
 800a3d4:	600a      	str	r2, [r1, #0]
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.AFCntDown;
 800a3d6:	001a      	movs	r2, r3
 800a3d8:	3214      	adds	r2, #20
 800a3da:	e7f6      	b.n	800a3ca <GetLastFcntDown+0x22>
            *lastDown = CryptoCtx.NvmCtx->FCntList.FCntDown;
 800a3dc:	699a      	ldr	r2, [r3, #24]
 800a3de:	600a      	str	r2, [r1, #0]
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.FCntDown;
 800a3e0:	001a      	movs	r2, r3
 800a3e2:	3218      	adds	r2, #24
 800a3e4:	e7f1      	b.n	800a3ca <GetLastFcntDown+0x22>
            *lastDown = CryptoCtx.NvmCtx->FCntList.McFCntDown0;
 800a3e6:	69db      	ldr	r3, [r3, #28]
            *lastDown = CryptoCtx.NvmCtx->FCntList.McFCntDown3;
 800a3e8:	600b      	str	r3, [r1, #0]
 800a3ea:	e7ef      	b.n	800a3cc <GetLastFcntDown+0x24>
            *lastDown = CryptoCtx.NvmCtx->FCntList.McFCntDown1;
 800a3ec:	6a1b      	ldr	r3, [r3, #32]
 800a3ee:	e7fb      	b.n	800a3e8 <GetLastFcntDown+0x40>
            *lastDown = CryptoCtx.NvmCtx->FCntList.McFCntDown2;
 800a3f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3f2:	e7f9      	b.n	800a3e8 <GetLastFcntDown+0x40>
            *lastDown = CryptoCtx.NvmCtx->FCntList.McFCntDown3;
 800a3f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3f6:	e7f7      	b.n	800a3e8 <GetLastFcntDown+0x40>
 800a3f8:	20000ed0 	.word	0x20000ed0

0800a3fc <DummyCB>:
 * Dummy callback in case if the user provides NULL function pointer
 */
static void DummyCB( void )
{
    return;
}
 800a3fc:	4770      	bx	lr

0800a3fe <PayloadEncrypt>:
{
 800a3fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a400:	b08d      	sub	sp, #52	; 0x34
 800a402:	001e      	movs	r6, r3
 800a404:	ab12      	add	r3, sp, #72	; 0x48
 800a406:	781b      	ldrb	r3, [r3, #0]
 800a408:	9001      	str	r0, [sp, #4]
 800a40a:	9302      	str	r3, [sp, #8]
    if( buffer == 0 )
 800a40c:	9b01      	ldr	r3, [sp, #4]
{
 800a40e:	000f      	movs	r7, r1
 800a410:	9203      	str	r2, [sp, #12]
 800a412:	9d13      	ldr	r5, [sp, #76]	; 0x4c
        return LORAMAC_CRYPTO_ERROR_NPE;
 800a414:	200a      	movs	r0, #10
    if( buffer == 0 )
 800a416:	2b00      	cmp	r3, #0
 800a418:	d023      	beq.n	800a462 <PayloadEncrypt+0x64>
    uint8_t aBlock[16] = { 0 };
 800a41a:	ac08      	add	r4, sp, #32
    uint8_t sBlock[16] = { 0 };
 800a41c:	2210      	movs	r2, #16
 800a41e:	2100      	movs	r1, #0
 800a420:	a804      	add	r0, sp, #16
 800a422:	f003 fdb0 	bl	800df86 <memset>
    uint8_t aBlock[16] = { 0 };
 800a426:	0020      	movs	r0, r4
 800a428:	2210      	movs	r2, #16
 800a42a:	2100      	movs	r1, #0
 800a42c:	f003 fdab 	bl	800df86 <memset>
    aBlock[0] = 0x01;
 800a430:	2301      	movs	r3, #1
 800a432:	7023      	strb	r3, [r4, #0]
    aBlock[5] = dir;
 800a434:	9b02      	ldr	r3, [sp, #8]
    aBlock[6] = address & 0xFF;
 800a436:	71a6      	strb	r6, [r4, #6]
    aBlock[5] = dir;
 800a438:	7163      	strb	r3, [r4, #5]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 800a43a:	0a33      	lsrs	r3, r6, #8
 800a43c:	71e3      	strb	r3, [r4, #7]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 800a43e:	0c33      	lsrs	r3, r6, #16
 800a440:	7223      	strb	r3, [r4, #8]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 800a442:	0a2b      	lsrs	r3, r5, #8
    aBlock[10] = frameCounter & 0xFF;
 800a444:	72a5      	strb	r5, [r4, #10]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 800a446:	72e3      	strb	r3, [r4, #11]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 800a448:	0e36      	lsrs	r6, r6, #24
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 800a44a:	0c2b      	lsrs	r3, r5, #16
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 800a44c:	0e2d      	lsrs	r5, r5, #24
    aBlock[9] = ( address >> 24 ) & 0xFF;
 800a44e:	7266      	strb	r6, [r4, #9]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 800a450:	7323      	strb	r3, [r4, #12]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 800a452:	7365      	strb	r5, [r4, #13]
    while( size > 0 )
 800a454:	2400      	movs	r4, #0
 800a456:	0123      	lsls	r3, r4, #4
 800a458:	b2db      	uxtb	r3, r3
 800a45a:	9302      	str	r3, [sp, #8]
 800a45c:	2f00      	cmp	r7, #0
 800a45e:	dc02      	bgt.n	800a466 <PayloadEncrypt+0x68>
    return LORAMAC_CRYPTO_SUCCESS;
 800a460:	2000      	movs	r0, #0
}
 800a462:	b00d      	add	sp, #52	; 0x34
 800a464:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a466:	3401      	adds	r4, #1
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 800a468:	ad04      	add	r5, sp, #16
 800a46a:	b2e4      	uxtb	r4, r4
        aBlock[15] = ctr & 0xFF;
 800a46c:	a808      	add	r0, sp, #32
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 800a46e:	002b      	movs	r3, r5
 800a470:	9a03      	ldr	r2, [sp, #12]
 800a472:	2110      	movs	r1, #16
        aBlock[15] = ctr & 0xFF;
 800a474:	73c4      	strb	r4, [r0, #15]
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 800a476:	f7fc fd3f 	bl	8006ef8 <SecureElementAesEncrypt>
 800a47a:	2800      	cmp	r0, #0
 800a47c:	d115      	bne.n	800a4aa <PayloadEncrypt+0xac>
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 800a47e:	1c3e      	adds	r6, r7, #0
 800a480:	1c33      	adds	r3, r6, #0
 800a482:	2f10      	cmp	r7, #16
 800a484:	dd00      	ble.n	800a488 <PayloadEncrypt+0x8a>
 800a486:	2310      	movs	r3, #16
 800a488:	b21b      	sxth	r3, r3
 800a48a:	4298      	cmp	r0, r3
 800a48c:	db02      	blt.n	800a494 <PayloadEncrypt+0x96>
 800a48e:	3f10      	subs	r7, #16
 800a490:	b23f      	sxth	r7, r7
 800a492:	e7e0      	b.n	800a456 <PayloadEncrypt+0x58>
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 800a494:	9b02      	ldr	r3, [sp, #8]
 800a496:	9a01      	ldr	r2, [sp, #4]
 800a498:	181b      	adds	r3, r3, r0
 800a49a:	18d3      	adds	r3, r2, r3
 800a49c:	781a      	ldrb	r2, [r3, #0]
 800a49e:	5c29      	ldrb	r1, [r5, r0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 800a4a0:	3001      	adds	r0, #1
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 800a4a2:	404a      	eors	r2, r1
 800a4a4:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 800a4a6:	b2c0      	uxtb	r0, r0
 800a4a8:	e7ea      	b.n	800a480 <PayloadEncrypt+0x82>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800a4aa:	200f      	movs	r0, #15
 800a4ac:	e7d9      	b.n	800a462 <PayloadEncrypt+0x64>
	...

0800a4b0 <DeriveSessionKey10x>:
{
 800a4b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a4b2:	001d      	movs	r5, r3
 800a4b4:	b085      	sub	sp, #20
 800a4b6:	0004      	movs	r4, r0
 800a4b8:	000f      	movs	r7, r1
 800a4ba:	0016      	movs	r6, r2
        return LORAMAC_CRYPTO_ERROR_NPE;
 800a4bc:	230a      	movs	r3, #10
    if( ( joinNonce == 0 ) || ( netID == 0 ) || ( devNonce == 0 ) )
 800a4be:	2d00      	cmp	r5, #0
 800a4c0:	d027      	beq.n	800a512 <DeriveSessionKey10x+0x62>
    uint8_t compBase[16] = { 0 };
 800a4c2:	2210      	movs	r2, #16
 800a4c4:	2100      	movs	r1, #0
 800a4c6:	4668      	mov	r0, sp
 800a4c8:	f003 fd5d 	bl	800df86 <memset>
            compBase[0] = 0x01;
 800a4cc:	2301      	movs	r3, #1
    switch( keyID )
 800a4ce:	2c08      	cmp	r4, #8
 800a4d0:	d100      	bne.n	800a4d4 <DeriveSessionKey10x+0x24>
            compBase[0] = 0x02;
 800a4d2:	2302      	movs	r3, #2
 800a4d4:	466a      	mov	r2, sp
 800a4d6:	7013      	strb	r3, [r2, #0]
    memcpy1( compBase + 1, joinNonce, 3 );
 800a4d8:	466b      	mov	r3, sp
 800a4da:	2203      	movs	r2, #3
 800a4dc:	1c58      	adds	r0, r3, #1
 800a4de:	0039      	movs	r1, r7
 800a4e0:	f002 fb49 	bl	800cb76 <memcpy1>
    memcpy1( compBase + 4, netID, 3 );
 800a4e4:	2203      	movs	r2, #3
 800a4e6:	0031      	movs	r1, r6
 800a4e8:	a801      	add	r0, sp, #4
 800a4ea:	f002 fb44 	bl	800cb76 <memcpy1>
    memcpy1( compBase + 7, devNonce, 2 );
 800a4ee:	466b      	mov	r3, sp
 800a4f0:	2202      	movs	r2, #2
 800a4f2:	1dd8      	adds	r0, r3, #7
 800a4f4:	0029      	movs	r1, r5
 800a4f6:	f002 fb3e 	bl	800cb76 <memcpy1>
    if( SecureElementDeriveAndStoreKey( CryptoCtx.NvmCtx->LrWanVersion, compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 800a4fa:	4b07      	ldr	r3, [pc, #28]	; (800a518 <DeriveSessionKey10x+0x68>)
 800a4fc:	2202      	movs	r2, #2
 800a4fe:	6858      	ldr	r0, [r3, #4]
 800a500:	4669      	mov	r1, sp
 800a502:	0023      	movs	r3, r4
 800a504:	6800      	ldr	r0, [r0, #0]
 800a506:	f7fc fd7e 	bl	8007006 <SecureElementDeriveAndStoreKey>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800a50a:	230f      	movs	r3, #15
    if( SecureElementDeriveAndStoreKey( CryptoCtx.NvmCtx->LrWanVersion, compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 800a50c:	2800      	cmp	r0, #0
 800a50e:	d100      	bne.n	800a512 <DeriveSessionKey10x+0x62>
    return LORAMAC_CRYPTO_SUCCESS;
 800a510:	0003      	movs	r3, r0
}
 800a512:	0018      	movs	r0, r3
 800a514:	b005      	add	sp, #20
 800a516:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a518:	20000ed0 	.word	0x20000ed0

0800a51c <LoRaMacCryptoDeriveMcKEKey.part.2>:
    }

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
 800a51c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    // Prevent other keys than McRootKey
    if( keyID != MC_ROOT_KEY )
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
    }
    uint8_t compBase[16] = { 0 };
 800a51e:	2210      	movs	r2, #16
 800a520:	2100      	movs	r1, #0
 800a522:	4668      	mov	r0, sp
 800a524:	f003 fd2f 	bl	800df86 <memset>

    if( SecureElementDeriveAndStoreKey( CryptoCtx.NvmCtx->LrWanVersion, compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 800a528:	4b07      	ldr	r3, [pc, #28]	; (800a548 <LoRaMacCryptoDeriveMcKEKey.part.2+0x2c>)
 800a52a:	2209      	movs	r2, #9
 800a52c:	6858      	ldr	r0, [r3, #4]
 800a52e:	4669      	mov	r1, sp
 800a530:	237f      	movs	r3, #127	; 0x7f
 800a532:	6800      	ldr	r0, [r0, #0]
 800a534:	f7fc fd67 	bl	8007006 <SecureElementDeriveAndStoreKey>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800a538:	230f      	movs	r3, #15
    if( SecureElementDeriveAndStoreKey( CryptoCtx.NvmCtx->LrWanVersion, compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 800a53a:	2800      	cmp	r0, #0
 800a53c:	d100      	bne.n	800a540 <LoRaMacCryptoDeriveMcKEKey.part.2+0x24>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 800a53e:	0003      	movs	r3, r0
}
 800a540:	0018      	movs	r0, r3
 800a542:	b005      	add	sp, #20
 800a544:	bd00      	pop	{pc}
 800a546:	46c0      	nop			; (mov r8, r8)
 800a548:	20000ed0 	.word	0x20000ed0

0800a54c <VerifyCmacB0.constprop.3>:
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
 800a54c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a54e:	b0c7      	sub	sp, #284	; 0x11c
 800a550:	9000      	str	r0, [sp, #0]
 800a552:	001c      	movs	r4, r3
    if( msg == 0 )
 800a554:	9b00      	ldr	r3, [sp, #0]
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
 800a556:	000d      	movs	r5, r1
 800a558:	9201      	str	r2, [sp, #4]
 800a55a:	9f4c      	ldr	r7, [sp, #304]	; 0x130
 800a55c:	9e4d      	ldr	r6, [sp, #308]	; 0x134
        return LORAMAC_CRYPTO_ERROR_NPE;
 800a55e:	200a      	movs	r0, #10
    if( msg == 0 )
 800a560:	2b00      	cmp	r3, #0
 800a562:	d042      	beq.n	800a5ea <VerifyCmacB0.constprop.3+0x9e>
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800a564:	2380      	movs	r3, #128	; 0x80
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800a566:	3004      	adds	r0, #4
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800a568:	005b      	lsls	r3, r3, #1
 800a56a:	4299      	cmp	r1, r3
 800a56c:	d83d      	bhi.n	800a5ea <VerifyCmacB0.constprop.3+0x9e>
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 800a56e:	2288      	movs	r2, #136	; 0x88
 800a570:	2100      	movs	r1, #0
 800a572:	0052      	lsls	r2, r2, #1
 800a574:	a802      	add	r0, sp, #8
 800a576:	f002 fb13 	bl	800cba0 <memset1>
    b0[0] = 0x49;
 800a57a:	2349      	movs	r3, #73	; 0x49
 800a57c:	aa02      	add	r2, sp, #8
 800a57e:	7013      	strb	r3, [r2, #0]
    if( ( isAck == true ) && ( dir == DOWNLINK ) )
 800a580:	2c00      	cmp	r4, #0
 800a582:	d034      	beq.n	800a5ee <VerifyCmacB0.constprop.3+0xa2>
        confFCnt = ( uint16_t )( CryptoCtx.NvmCtx->FCntList.FCntUp % 65536 );
 800a584:	4b1c      	ldr	r3, [pc, #112]	; (800a5f8 <VerifyCmacB0.constprop.3+0xac>)
 800a586:	685b      	ldr	r3, [r3, #4]
 800a588:	68db      	ldr	r3, [r3, #12]
        b0[1] = confFCnt & 0xFF;
 800a58a:	7053      	strb	r3, [r2, #1]
        b0[2] = ( confFCnt >> 8 ) & 0xFF;
 800a58c:	b29b      	uxth	r3, r3
 800a58e:	0a1b      	lsrs	r3, r3, #8
 800a590:	7093      	strb	r3, [r2, #2]
    b0[3] = 0x00;
 800a592:	2400      	movs	r4, #0
    b0[5] = dir;
 800a594:	2201      	movs	r2, #1
    b0[3] = 0x00;
 800a596:	ab02      	add	r3, sp, #8
    b0[5] = dir;
 800a598:	715a      	strb	r2, [r3, #5]
    b0[6] = devAddr & 0xFF;
 800a59a:	719f      	strb	r7, [r3, #6]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 800a59c:	aa02      	add	r2, sp, #8
    b0[3] = 0x00;
 800a59e:	70dc      	strb	r4, [r3, #3]
    b0[4] = 0x00;
 800a5a0:	711c      	strb	r4, [r3, #4]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 800a5a2:	0a3b      	lsrs	r3, r7, #8
 800a5a4:	71d3      	strb	r3, [r2, #7]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 800a5a6:	0c3b      	lsrs	r3, r7, #16
 800a5a8:	7213      	strb	r3, [r2, #8]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 800a5aa:	0a33      	lsrs	r3, r6, #8
    b0[10] = fCnt & 0xFF;
 800a5ac:	7296      	strb	r6, [r2, #10]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 800a5ae:	72d3      	strb	r3, [r2, #11]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 800a5b0:	0e3f      	lsrs	r7, r7, #24
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 800a5b2:	0c33      	lsrs	r3, r6, #16
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 800a5b4:	0e36      	lsrs	r6, r6, #24
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 800a5b6:	7313      	strb	r3, [r2, #12]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 800a5b8:	7257      	strb	r7, [r2, #9]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 800a5ba:	7356      	strb	r6, [r2, #13]
    b0[14] = 0x00;
 800a5bc:	7394      	strb	r4, [r2, #14]
    b0[15] = msgLen & 0xFF;
 800a5be:	73d5      	strb	r5, [r2, #15]
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 800a5c0:	9900      	ldr	r1, [sp, #0]
 800a5c2:	002a      	movs	r2, r5
 800a5c4:	a806      	add	r0, sp, #24
 800a5c6:	f002 fad6 	bl	800cb76 <memcpy1>
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 800a5ca:	0029      	movs	r1, r5
 800a5cc:	3110      	adds	r1, #16
 800a5ce:	9b01      	ldr	r3, [sp, #4]
 800a5d0:	b289      	uxth	r1, r1
 800a5d2:	9a4e      	ldr	r2, [sp, #312]	; 0x138
 800a5d4:	a802      	add	r0, sp, #8
 800a5d6:	f7fc fc77 	bl	8006ec8 <SecureElementVerifyAesCmac>
 800a5da:	0003      	movs	r3, r0
        return LORAMAC_CRYPTO_SUCCESS;
 800a5dc:	0020      	movs	r0, r4
    if( retval == SECURE_ELEMENT_SUCCESS )
 800a5de:	42a3      	cmp	r3, r4
 800a5e0:	d003      	beq.n	800a5ea <VerifyCmacB0.constprop.3+0x9e>
        return LORAMAC_CRYPTO_FAIL_MIC;
 800a5e2:	3001      	adds	r0, #1
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 800a5e4:	4283      	cmp	r3, r0
 800a5e6:	d000      	beq.n	800a5ea <VerifyCmacB0.constprop.3+0x9e>
    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800a5e8:	300e      	adds	r0, #14
}
 800a5ea:	b047      	add	sp, #284	; 0x11c
 800a5ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
        b0[1] = 0x00;
 800a5ee:	ab02      	add	r3, sp, #8
 800a5f0:	705c      	strb	r4, [r3, #1]
        b0[2] = 0x00;
 800a5f2:	709c      	strb	r4, [r3, #2]
 800a5f4:	e7cd      	b.n	800a592 <VerifyCmacB0.constprop.3+0x46>
 800a5f6:	46c0      	nop			; (mov r8, r8)
 800a5f8:	20000ed0 	.word	0x20000ed0

0800a5fc <LoRaMacCryptoInit>:
{
 800a5fc:	b570      	push	{r4, r5, r6, lr}
    CryptoCtx.NvmCtx = &NvmCryptoCtx;
 800a5fe:	4c12      	ldr	r4, [pc, #72]	; (800a648 <LoRaMacCryptoInit+0x4c>)
 800a600:	0023      	movs	r3, r4
 800a602:	330c      	adds	r3, #12
 800a604:	6063      	str	r3, [r4, #4]
    if( cryptoNvmCtxChanged != 0 )
 800a606:	2800      	cmp	r0, #0
 800a608:	d01b      	beq.n	800a642 <LoRaMacCryptoInit+0x46>
        CryptoCtx.EventCryptoNvmCtxChanged = cryptoNvmCtxChanged;
 800a60a:	60a0      	str	r0, [r4, #8]
    memset1( (uint8_t*) CryptoCtx.NvmCtx, 0, sizeof( LoRaMacCryptoNvmCtx_t ) );
 800a60c:	0020      	movs	r0, r4
 800a60e:	2234      	movs	r2, #52	; 0x34
 800a610:	300c      	adds	r0, #12
 800a612:	2100      	movs	r1, #0
 800a614:	f002 fac4 	bl	800cba0 <memset1>
    CryptoCtx.NvmCtx->LrWanVersion.Fields.Major = 1;
 800a618:	6863      	ldr	r3, [r4, #4]
    CryptoCtx.NvmCtx->LrWanVersion.Fields.Rfu = 0;
 800a61a:	4a0c      	ldr	r2, [pc, #48]	; (800a64c <LoRaMacCryptoInit+0x50>)
    CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.FCntDown;
 800a61c:	0019      	movs	r1, r3
    CryptoCtx.NvmCtx->LrWanVersion.Fields.Rfu = 0;
 800a61e:	601a      	str	r2, [r3, #0]
    CryptoCtx.NvmCtx->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 800a620:	2201      	movs	r2, #1
    CryptoCtx.NvmCtx->FCntList.FCntUp = 0;
 800a622:	2500      	movs	r5, #0
    CryptoCtx.NvmCtx->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 800a624:	4252      	negs	r2, r2
    CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.FCntDown;
 800a626:	3118      	adds	r1, #24
    CryptoCtx.NvmCtx->FCntList.FCntUp = 0;
 800a628:	60dd      	str	r5, [r3, #12]
    CryptoCtx.NvmCtx->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 800a62a:	611a      	str	r2, [r3, #16]
    CryptoCtx.NvmCtx->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 800a62c:	615a      	str	r2, [r3, #20]
    CryptoCtx.NvmCtx->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 800a62e:	619a      	str	r2, [r3, #24]
    CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.FCntDown;
 800a630:	6319      	str	r1, [r3, #48]	; 0x30
    CryptoCtx.NvmCtx->FCntList.McFCntDown0 = FCNT_DOWN_INITAL_VALUE;
 800a632:	61da      	str	r2, [r3, #28]
    CryptoCtx.NvmCtx->FCntList.McFCntDown1 = FCNT_DOWN_INITAL_VALUE;
 800a634:	621a      	str	r2, [r3, #32]
    CryptoCtx.NvmCtx->FCntList.McFCntDown2 = FCNT_DOWN_INITAL_VALUE;
 800a636:	625a      	str	r2, [r3, #36]	; 0x24
    CryptoCtx.NvmCtx->FCntList.McFCntDown3 = FCNT_DOWN_INITAL_VALUE;
 800a638:	629a      	str	r2, [r3, #40]	; 0x28
    CryptoCtx.EventCryptoNvmCtxChanged( );
 800a63a:	68a3      	ldr	r3, [r4, #8]
 800a63c:	4798      	blx	r3
}
 800a63e:	0028      	movs	r0, r5
 800a640:	bd70      	pop	{r4, r5, r6, pc}
        CryptoCtx.EventCryptoNvmCtxChanged = DummyCB;
 800a642:	4b03      	ldr	r3, [pc, #12]	; (800a650 <LoRaMacCryptoInit+0x54>)
 800a644:	60a3      	str	r3, [r4, #8]
 800a646:	e7e1      	b.n	800a60c <LoRaMacCryptoInit+0x10>
 800a648:	20000ed0 	.word	0x20000ed0
 800a64c:	01010100 	.word	0x01010100
 800a650:	0800a3fd 	.word	0x0800a3fd

0800a654 <LoRaMacCryptoSetLrWanVersion>:
    CryptoCtx.NvmCtx->LrWanVersion = version;
 800a654:	4b02      	ldr	r3, [pc, #8]	; (800a660 <LoRaMacCryptoSetLrWanVersion+0xc>)
 800a656:	685b      	ldr	r3, [r3, #4]
 800a658:	6018      	str	r0, [r3, #0]
}
 800a65a:	2000      	movs	r0, #0
 800a65c:	4770      	bx	lr
 800a65e:	46c0      	nop			; (mov r8, r8)
 800a660:	20000ed0 	.word	0x20000ed0

0800a664 <LoRaMacCryptoRestoreNvmCtx>:
{
 800a664:	0001      	movs	r1, r0
 800a666:	b510      	push	{r4, lr}
        return LORAMAC_CRYPTO_ERROR_NPE;
 800a668:	200a      	movs	r0, #10
    if( cryptoNvmCtx != 0 )
 800a66a:	2900      	cmp	r1, #0
 800a66c:	d005      	beq.n	800a67a <LoRaMacCryptoRestoreNvmCtx+0x16>
        memcpy1( ( uint8_t* ) &NvmCryptoCtx, ( uint8_t* ) cryptoNvmCtx, CRYPTO_NVM_CTX_SIZE );
 800a66e:	4803      	ldr	r0, [pc, #12]	; (800a67c <LoRaMacCryptoRestoreNvmCtx+0x18>)
 800a670:	2234      	movs	r2, #52	; 0x34
 800a672:	300c      	adds	r0, #12
 800a674:	f002 fa7f 	bl	800cb76 <memcpy1>
        return LORAMAC_CRYPTO_SUCCESS;
 800a678:	2000      	movs	r0, #0
}
 800a67a:	bd10      	pop	{r4, pc}
 800a67c:	20000ed0 	.word	0x20000ed0

0800a680 <LoRaMacCryptoGetNvmCtx>:
    *cryptoNvmCtxSize = CRYPTO_NVM_CTX_SIZE;
 800a680:	2334      	movs	r3, #52	; 0x34
 800a682:	6003      	str	r3, [r0, #0]
    return &NvmCryptoCtx;
 800a684:	4801      	ldr	r0, [pc, #4]	; (800a68c <LoRaMacCryptoGetNvmCtx+0xc>)
}
 800a686:	300c      	adds	r0, #12
 800a688:	4770      	bx	lr
 800a68a:	46c0      	nop			; (mov r8, r8)
 800a68c:	20000ed0 	.word	0x20000ed0

0800a690 <LoRaMacCryptoGetFCntUp>:
        return LORAMAC_CRYPTO_ERROR_NPE;
 800a690:	230a      	movs	r3, #10
    if( currentUp == NULL )
 800a692:	2800      	cmp	r0, #0
 800a694:	d005      	beq.n	800a6a2 <LoRaMacCryptoGetFCntUp+0x12>
    *currentUp = CryptoCtx.NvmCtx->FCntList.FCntUp + 1;
 800a696:	4b04      	ldr	r3, [pc, #16]	; (800a6a8 <LoRaMacCryptoGetFCntUp+0x18>)
 800a698:	685b      	ldr	r3, [r3, #4]
 800a69a:	68db      	ldr	r3, [r3, #12]
 800a69c:	3301      	adds	r3, #1
 800a69e:	6003      	str	r3, [r0, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 800a6a0:	2300      	movs	r3, #0
}
 800a6a2:	0018      	movs	r0, r3
 800a6a4:	4770      	bx	lr
 800a6a6:	46c0      	nop			; (mov r8, r8)
 800a6a8:	20000ed0 	.word	0x20000ed0

0800a6ac <LoRaMacCryptoGetFCntDown>:
{
 800a6ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a6ae:	001c      	movs	r4, r3
    uint32_t lastDown = 0;
 800a6b0:	2300      	movs	r3, #0
{
 800a6b2:	b085      	sub	sp, #20
 800a6b4:	0007      	movs	r7, r0
 800a6b6:	9101      	str	r1, [sp, #4]
 800a6b8:	0016      	movs	r6, r2
    uint32_t lastDown = 0;
 800a6ba:	9303      	str	r3, [sp, #12]
        return LORAMAC_CRYPTO_ERROR_NPE;
 800a6bc:	200a      	movs	r0, #10
    if( currentDown == NULL )
 800a6be:	429c      	cmp	r4, r3
 800a6c0:	d027      	beq.n	800a712 <LoRaMacCryptoGetFCntDown+0x66>
    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 800a6c2:	a903      	add	r1, sp, #12
 800a6c4:	0038      	movs	r0, r7
 800a6c6:	f7ff fe6f 	bl	800a3a8 <GetLastFcntDown>
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800a6ca:	2800      	cmp	r0, #0
 800a6cc:	d121      	bne.n	800a712 <LoRaMacCryptoGetFCntDown+0x66>
    if( lastDown == FCNT_DOWN_INITAL_VALUE )
 800a6ce:	9903      	ldr	r1, [sp, #12]
 800a6d0:	1c4b      	adds	r3, r1, #1
 800a6d2:	d101      	bne.n	800a6d8 <LoRaMacCryptoGetFCntDown+0x2c>
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 800a6d4:	6026      	str	r6, [r4, #0]
 800a6d6:	e005      	b.n	800a6e4 <LoRaMacCryptoGetFCntDown+0x38>
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 800a6d8:	b28b      	uxth	r3, r1
 800a6da:	1af3      	subs	r3, r6, r3
        if( fCntDiff > 0 )
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	dd14      	ble.n	800a70a <LoRaMacCryptoGetFCntDown+0x5e>
            *currentDown = lastDown + fCntDiff;
 800a6e0:	18cb      	adds	r3, r1, r3
 800a6e2:	6023      	str	r3, [r4, #0]
    if( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 0 )
 800a6e4:	4b0f      	ldr	r3, [pc, #60]	; (800a724 <LoRaMacCryptoGetFCntDown+0x78>)
 800a6e6:	685b      	ldr	r3, [r3, #4]
 800a6e8:	789d      	ldrb	r5, [r3, #2]
 800a6ea:	2d00      	cmp	r5, #0
 800a6ec:	d111      	bne.n	800a712 <LoRaMacCryptoGetFCntDown+0x66>
        if( ( ( int64_t )*currentDown - ( int64_t )lastDown ) >= maxFCntGap )
 800a6ee:	002b      	movs	r3, r5
 800a6f0:	000e      	movs	r6, r1
 800a6f2:	002f      	movs	r7, r5
 800a6f4:	6822      	ldr	r2, [r4, #0]
 800a6f6:	1b92      	subs	r2, r2, r6
 800a6f8:	41bb      	sbcs	r3, r7
 800a6fa:	429d      	cmp	r5, r3
 800a6fc:	dc09      	bgt.n	800a712 <LoRaMacCryptoGetFCntDown+0x66>
 800a6fe:	d102      	bne.n	800a706 <LoRaMacCryptoGetFCntDown+0x5a>
 800a700:	9901      	ldr	r1, [sp, #4]
 800a702:	4291      	cmp	r1, r2
 800a704:	d805      	bhi.n	800a712 <LoRaMacCryptoGetFCntDown+0x66>
            return LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT;
 800a706:	2008      	movs	r0, #8
 800a708:	e003      	b.n	800a712 <LoRaMacCryptoGetFCntDown+0x66>
        else if( fCntDiff == 0 )
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d103      	bne.n	800a716 <LoRaMacCryptoGetFCntDown+0x6a>
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 800a70e:	2007      	movs	r0, #7
            *currentDown = lastDown;
 800a710:	6021      	str	r1, [r4, #0]
}
 800a712:	b005      	add	sp, #20
 800a714:	bdf0      	pop	{r4, r5, r6, r7, pc}
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 800a716:	2280      	movs	r2, #128	; 0x80
 800a718:	0c0b      	lsrs	r3, r1, #16
 800a71a:	041b      	lsls	r3, r3, #16
 800a71c:	0252      	lsls	r2, r2, #9
 800a71e:	189b      	adds	r3, r3, r2
 800a720:	199e      	adds	r6, r3, r6
 800a722:	e7d7      	b.n	800a6d4 <LoRaMacCryptoGetFCntDown+0x28>
 800a724:	20000ed0 	.word	0x20000ed0

0800a728 <LoRaMacCryptoSetMulticastReference>:
{
 800a728:	0003      	movs	r3, r0
        return LORAMAC_CRYPTO_ERROR_NPE;
 800a72a:	200a      	movs	r0, #10
    if( multicastList == NULL )
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d00c      	beq.n	800a74a <LoRaMacCryptoSetMulticastReference+0x22>
    multicastList[0].DownLinkCounter = &CryptoCtx.NvmCtx->FCntList.McFCntDown0;
 800a730:	4a06      	ldr	r2, [pc, #24]	; (800a74c <LoRaMacCryptoSetMulticastReference+0x24>)
    return LORAMAC_CRYPTO_SUCCESS;
 800a732:	2000      	movs	r0, #0
    multicastList[0].DownLinkCounter = &CryptoCtx.NvmCtx->FCntList.McFCntDown0;
 800a734:	6852      	ldr	r2, [r2, #4]
 800a736:	0011      	movs	r1, r2
 800a738:	311c      	adds	r1, #28
 800a73a:	61d9      	str	r1, [r3, #28]
    multicastList[1].DownLinkCounter = &CryptoCtx.NvmCtx->FCntList.McFCntDown1;
 800a73c:	3104      	adds	r1, #4
 800a73e:	6459      	str	r1, [r3, #68]	; 0x44
    multicastList[2].DownLinkCounter = &CryptoCtx.NvmCtx->FCntList.McFCntDown2;
 800a740:	3104      	adds	r1, #4
 800a742:	66d9      	str	r1, [r3, #108]	; 0x6c
    multicastList[3].DownLinkCounter = &CryptoCtx.NvmCtx->FCntList.McFCntDown3;
 800a744:	3228      	adds	r2, #40	; 0x28
 800a746:	3394      	adds	r3, #148	; 0x94
 800a748:	601a      	str	r2, [r3, #0]
}
 800a74a:	4770      	bx	lr
 800a74c:	20000ed0 	.word	0x20000ed0

0800a750 <LoRaMacCryptoPrepareJoinRequest>:
{
 800a750:	b530      	push	{r4, r5, lr}
 800a752:	0004      	movs	r4, r0
 800a754:	b085      	sub	sp, #20
        return LORAMAC_CRYPTO_ERROR_NPE;
 800a756:	200a      	movs	r0, #10
    if( macMsg == 0 )
 800a758:	2c00      	cmp	r4, #0
 800a75a:	d013      	beq.n	800a784 <LoRaMacCryptoPrepareJoinRequest+0x34>
    uint32_t devNonce = 0;
 800a75c:	2300      	movs	r3, #0
    SecureElementRandomNumber( &devNonce );
 800a75e:	a803      	add	r0, sp, #12
    uint32_t devNonce = 0;
 800a760:	9303      	str	r3, [sp, #12]
    SecureElementRandomNumber( &devNonce );
 800a762:	f7fc fc79 	bl	8007058 <SecureElementRandomNumber>
    CryptoCtx.NvmCtx->DevNonce = devNonce;
 800a766:	4d11      	ldr	r5, [pc, #68]	; (800a7ac <LoRaMacCryptoPrepareJoinRequest+0x5c>)
 800a768:	9b03      	ldr	r3, [sp, #12]
 800a76a:	686a      	ldr	r2, [r5, #4]
 800a76c:	8093      	strh	r3, [r2, #4]
    CryptoCtx.EventCryptoNvmCtxChanged( );
 800a76e:	68ab      	ldr	r3, [r5, #8]
 800a770:	4798      	blx	r3
    macMsg->DevNonce = CryptoCtx.NvmCtx->DevNonce;
 800a772:	686b      	ldr	r3, [r5, #4]
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800a774:	0020      	movs	r0, r4
    macMsg->DevNonce = CryptoCtx.NvmCtx->DevNonce;
 800a776:	889b      	ldrh	r3, [r3, #4]
 800a778:	82e3      	strh	r3, [r4, #22]
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800a77a:	f000 fa9a 	bl	800acb2 <LoRaMacSerializerJoinRequest>
 800a77e:	2800      	cmp	r0, #0
 800a780:	d002      	beq.n	800a788 <LoRaMacCryptoPrepareJoinRequest+0x38>
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800a782:	2011      	movs	r0, #17
}
 800a784:	b005      	add	sp, #20
 800a786:	bd30      	pop	{r4, r5, pc}
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 800a788:	0023      	movs	r3, r4
 800a78a:	3318      	adds	r3, #24
 800a78c:	9300      	str	r3, [sp, #0]
 800a78e:	2213      	movs	r2, #19
 800a790:	2302      	movs	r3, #2
 800a792:	6821      	ldr	r1, [r4, #0]
 800a794:	f7fc fb88 	bl	8006ea8 <SecureElementComputeAesCmac>
 800a798:	0003      	movs	r3, r0
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800a79a:	200f      	movs	r0, #15
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d1f1      	bne.n	800a784 <LoRaMacCryptoPrepareJoinRequest+0x34>
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800a7a0:	0020      	movs	r0, r4
 800a7a2:	f000 fa86 	bl	800acb2 <LoRaMacSerializerJoinRequest>
 800a7a6:	2800      	cmp	r0, #0
 800a7a8:	d0ec      	beq.n	800a784 <LoRaMacCryptoPrepareJoinRequest+0x34>
 800a7aa:	e7ea      	b.n	800a782 <LoRaMacCryptoPrepareJoinRequest+0x32>
 800a7ac:	20000ed0 	.word	0x20000ed0

0800a7b0 <LoRaMacCryptoSecureMessage>:
{
 800a7b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a7b2:	0006      	movs	r6, r0
 800a7b4:	b089      	sub	sp, #36	; 0x24
 800a7b6:	001d      	movs	r5, r3
        return LORAMAC_CRYPTO_ERROR_NPE;
 800a7b8:	200a      	movs	r0, #10
    if( macMsg == NULL )
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d023      	beq.n	800a806 <LoRaMacCryptoSecureMessage+0x56>
    if( fCntUp < CryptoCtx.NvmCtx->FCntList.FCntUp )
 800a7be:	4c2d      	ldr	r4, [pc, #180]	; (800a874 <LoRaMacCryptoSecureMessage+0xc4>)
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 800a7c0:	3804      	subs	r0, #4
    if( fCntUp < CryptoCtx.NvmCtx->FCntList.FCntUp )
 800a7c2:	6863      	ldr	r3, [r4, #4]
 800a7c4:	68db      	ldr	r3, [r3, #12]
 800a7c6:	42b3      	cmp	r3, r6
 800a7c8:	d81d      	bhi.n	800a806 <LoRaMacCryptoSecureMessage+0x56>
    if( macMsg->FPort == 0 )
 800a7ca:	1c6a      	adds	r2, r5, #1
 800a7cc:	7fd2      	ldrb	r2, [r2, #31]
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
 800a7ce:	1e51      	subs	r1, r2, #1
 800a7d0:	418a      	sbcs	r2, r1
 800a7d2:	3207      	adds	r2, #7
    if( fCntUp > CryptoCtx.NvmCtx->FCntList.FCntUp )
 800a7d4:	42b3      	cmp	r3, r6
 800a7d6:	d30a      	bcc.n	800a7ee <LoRaMacCryptoSecureMessage+0x3e>
    CryptoCtx.NvmCtx->FCntList.FCntUp = fCntUp;
 800a7d8:	6863      	ldr	r3, [r4, #4]
 800a7da:	60de      	str	r6, [r3, #12]
    CryptoCtx.EventCryptoNvmCtxChanged( );
 800a7dc:	68a3      	ldr	r3, [r4, #8]
 800a7de:	4798      	blx	r3
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800a7e0:	0028      	movs	r0, r5
 800a7e2:	f000 fa9b 	bl	800ad1c <LoRaMacSerializerData>
 800a7e6:	1e07      	subs	r7, r0, #0
 800a7e8:	d00f      	beq.n	800a80a <LoRaMacCryptoSecureMessage+0x5a>
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800a7ea:	2011      	movs	r0, #17
 800a7ec:	e00b      	b.n	800a806 <LoRaMacCryptoSecureMessage+0x56>
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 800a7ee:	002b      	movs	r3, r5
 800a7f0:	3328      	adds	r3, #40	; 0x28
 800a7f2:	7819      	ldrb	r1, [r3, #0]
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	9601      	str	r6, [sp, #4]
 800a7f8:	9300      	str	r3, [sp, #0]
 800a7fa:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800a7fc:	68ab      	ldr	r3, [r5, #8]
 800a7fe:	f7ff fdfe 	bl	800a3fe <PayloadEncrypt>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800a802:	2800      	cmp	r0, #0
 800a804:	d0e8      	beq.n	800a7d8 <LoRaMacCryptoSecureMessage+0x28>
}
 800a806:	b009      	add	sp, #36	; 0x24
 800a808:	bdf0      	pop	{r4, r5, r6, r7, pc}
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), NWK_S_ENC_KEY, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 800a80a:	6829      	ldr	r1, [r5, #0]
        return LORAMAC_CRYPTO_ERROR_NPE;
 800a80c:	200a      	movs	r0, #10
    if( ( msg == 0 ) || ( cmac == 0 ) )
 800a80e:	2900      	cmp	r1, #0
 800a810:	d0f9      	beq.n	800a806 <LoRaMacCryptoSecureMessage+0x56>
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), NWK_S_ENC_KEY, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 800a812:	792b      	ldrb	r3, [r5, #4]
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800a814:	2480      	movs	r4, #128	; 0x80
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), NWK_S_ENC_KEY, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 800a816:	3b04      	subs	r3, #4
 800a818:	9303      	str	r3, [sp, #12]
 800a81a:	466b      	mov	r3, sp
 800a81c:	899a      	ldrh	r2, [r3, #12]
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800a81e:	0064      	lsls	r4, r4, #1
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800a820:	200e      	movs	r0, #14
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800a822:	42a2      	cmp	r2, r4
 800a824:	d8ef      	bhi.n	800a806 <LoRaMacCryptoSecureMessage+0x56>
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), NWK_S_ENC_KEY, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 800a826:	68a8      	ldr	r0, [r5, #8]
    b0[0] = 0x49;
 800a828:	3cb7      	subs	r4, #183	; 0xb7
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 800a82a:	0a03      	lsrs	r3, r0, #8
    b0[0] = 0x49;
 800a82c:	9404      	str	r4, [sp, #16]
    b0[3] = 0x00;
 800a82e:	ac04      	add	r4, sp, #16
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 800a830:	71e3      	strb	r3, [r4, #7]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 800a832:	0c03      	lsrs	r3, r0, #16
 800a834:	7223      	strb	r3, [r4, #8]
    b0[15] = msgLen & 0xFF;
 800a836:	9b03      	ldr	r3, [sp, #12]
    b0[6] = devAddr & 0xFF;
 800a838:	71a0      	strb	r0, [r4, #6]
    b0[15] = msgLen & 0xFF;
 800a83a:	73e3      	strb	r3, [r4, #15]
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), NWK_S_ENC_KEY, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 800a83c:	002b      	movs	r3, r5
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 800a83e:	0e00      	lsrs	r0, r0, #24
 800a840:	7260      	strb	r0, [r4, #9]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 800a842:	0a30      	lsrs	r0, r6, #8
    b0[10] = fCnt & 0xFF;
 800a844:	72a6      	strb	r6, [r4, #10]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 800a846:	72e0      	strb	r0, [r4, #11]
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), NWK_S_ENC_KEY, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 800a848:	332c      	adds	r3, #44	; 0x2c
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 800a84a:	0c30      	lsrs	r0, r6, #16
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 800a84c:	0e36      	lsrs	r6, r6, #24
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 800a84e:	7320      	strb	r0, [r4, #12]
    b0[3] = 0x00;
 800a850:	80a7      	strh	r7, [r4, #4]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 800a852:	7366      	strb	r6, [r4, #13]
    b0[14] = 0x00;
 800a854:	73a7      	strb	r7, [r4, #14]
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 800a856:	0020      	movs	r0, r4
 800a858:	9300      	str	r3, [sp, #0]
 800a85a:	2307      	movs	r3, #7
 800a85c:	f7fc fb24 	bl	8006ea8 <SecureElementComputeAesCmac>
 800a860:	0003      	movs	r3, r0
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800a862:	200f      	movs	r0, #15
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 800a864:	2b00      	cmp	r3, #0
 800a866:	d1ce      	bne.n	800a806 <LoRaMacCryptoSecureMessage+0x56>
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800a868:	0028      	movs	r0, r5
 800a86a:	f000 fa57 	bl	800ad1c <LoRaMacSerializerData>
 800a86e:	2800      	cmp	r0, #0
 800a870:	d0c9      	beq.n	800a806 <LoRaMacCryptoSecureMessage+0x56>
 800a872:	e7ba      	b.n	800a7ea <LoRaMacCryptoSecureMessage+0x3a>
 800a874:	20000ed0 	.word	0x20000ed0

0800a878 <LoRaMacCryptoUnsecureMessage>:
{
 800a878:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a87a:	b08b      	sub	sp, #44	; 0x2c
 800a87c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800a87e:	0007      	movs	r7, r0
 800a880:	9106      	str	r1, [sp, #24]
 800a882:	9207      	str	r2, [sp, #28]
 800a884:	001c      	movs	r4, r3
        return LORAMAC_CRYPTO_ERROR_NPE;
 800a886:	260a      	movs	r6, #10
    if( macMsg == 0 )
 800a888:	2d00      	cmp	r5, #0
 800a88a:	d008      	beq.n	800a89e <LoRaMacCryptoUnsecureMessage+0x26>
    uint32_t lastDown = 0;
 800a88c:	2300      	movs	r3, #0
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 800a88e:	a909      	add	r1, sp, #36	; 0x24
 800a890:	0010      	movs	r0, r2
    uint32_t lastDown = 0;
 800a892:	9309      	str	r3, [sp, #36]	; 0x24
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 800a894:	f7ff fd88 	bl	800a3a8 <GetLastFcntDown>
 800a898:	2800      	cmp	r0, #0
 800a89a:	d003      	beq.n	800a8a4 <LoRaMacCryptoUnsecureMessage+0x2c>
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 800a89c:	2606      	movs	r6, #6
}
 800a89e:	0030      	movs	r0, r6
 800a8a0:	b00b      	add	sp, #44	; 0x2c
 800a8a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( ( currentDown > lastDown ) ||
 800a8a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8a6:	429c      	cmp	r4, r3
 800a8a8:	d801      	bhi.n	800a8ae <LoRaMacCryptoUnsecureMessage+0x36>
 800a8aa:	3301      	adds	r3, #1
 800a8ac:	d1f6      	bne.n	800a89c <LoRaMacCryptoUnsecureMessage+0x24>
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800a8ae:	0028      	movs	r0, r5
 800a8b0:	f000 f9a4 	bl	800abfc <LoRaMacParserData>
        return LORAMAC_CRYPTO_ERROR_PARSER;
 800a8b4:	2610      	movs	r6, #16
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800a8b6:	2800      	cmp	r0, #0
 800a8b8:	d1f1      	bne.n	800a89e <LoRaMacCryptoUnsecureMessage+0x26>
        if( KeyAddrList[i].AddrID == addrID )
 800a8ba:	4a2c      	ldr	r2, [pc, #176]	; (800a96c <LoRaMacCryptoUnsecureMessage+0xf4>)
 800a8bc:	0083      	lsls	r3, r0, #2
 800a8be:	469c      	mov	ip, r3
 800a8c0:	5c9b      	ldrb	r3, [r3, r2]
 800a8c2:	42bb      	cmp	r3, r7
 800a8c4:	d13d      	bne.n	800a942 <LoRaMacCryptoUnsecureMessage+0xca>
    if( address != macMsg->FHDR.DevAddr )
 800a8c6:	68ab      	ldr	r3, [r5, #8]
 800a8c8:	9906      	ldr	r1, [sp, #24]
 800a8ca:	9305      	str	r3, [sp, #20]
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 800a8cc:	2602      	movs	r6, #2
    if( address != macMsg->FHDR.DevAddr )
 800a8ce:	428b      	cmp	r3, r1
 800a8d0:	d1e5      	bne.n	800a89e <LoRaMacCryptoUnsecureMessage+0x26>
    if( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 0 )
 800a8d2:	4927      	ldr	r1, [pc, #156]	; (800a970 <LoRaMacCryptoUnsecureMessage+0xf8>)
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 800a8d4:	7b2b      	ldrb	r3, [r5, #12]
    if( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 0 )
 800a8d6:	6849      	ldr	r1, [r1, #4]
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 800a8d8:	069b      	lsls	r3, r3, #26
    if( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 0 )
 800a8da:	7889      	ldrb	r1, [r1, #2]
    payloadDecryptionKeyID = curItem->AppSkey;
 800a8dc:	4462      	add	r2, ip
        isAck = false;
 800a8de:	1e48      	subs	r0, r1, #1
 800a8e0:	4181      	sbcs	r1, r0
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 800a8e2:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
        isAck = false;
 800a8e4:	4249      	negs	r1, r1
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 800a8e6:	0fdb      	lsrs	r3, r3, #31
    payloadDecryptionKeyID = curItem->AppSkey;
 800a8e8:	7857      	ldrb	r7, [r2, #1]
        isAck = false;
 800a8ea:	400b      	ands	r3, r1
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 800a8ec:	7892      	ldrb	r2, [r2, #2]
 800a8ee:	7929      	ldrb	r1, [r5, #4]
 800a8f0:	9002      	str	r0, [sp, #8]
 800a8f2:	9806      	ldr	r0, [sp, #24]
 800a8f4:	9401      	str	r4, [sp, #4]
 800a8f6:	9000      	str	r0, [sp, #0]
 800a8f8:	3904      	subs	r1, #4
 800a8fa:	b289      	uxth	r1, r1
 800a8fc:	6828      	ldr	r0, [r5, #0]
 800a8fe:	f7ff fe25 	bl	800a54c <VerifyCmacB0.constprop.3>
 800a902:	1e06      	subs	r6, r0, #0
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800a904:	d1cb      	bne.n	800a89e <LoRaMacCryptoUnsecureMessage+0x26>
    if( macMsg->FPort == 0 )
 800a906:	1c6b      	adds	r3, r5, #1
 800a908:	7fdb      	ldrb	r3, [r3, #31]
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d100      	bne.n	800a910 <LoRaMacCryptoUnsecureMessage+0x98>
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
 800a90e:	2707      	movs	r7, #7
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 800a910:	002b      	movs	r3, r5
 800a912:	3328      	adds	r3, #40	; 0x28
 800a914:	7819      	ldrb	r1, [r3, #0]
 800a916:	2301      	movs	r3, #1
 800a918:	9401      	str	r4, [sp, #4]
 800a91a:	9300      	str	r3, [sp, #0]
 800a91c:	003a      	movs	r2, r7
 800a91e:	9b05      	ldr	r3, [sp, #20]
 800a920:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800a922:	f7ff fd6c 	bl	800a3fe <PayloadEncrypt>
 800a926:	1e06      	subs	r6, r0, #0
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800a928:	d1b9      	bne.n	800a89e <LoRaMacCryptoUnsecureMessage+0x26>
    switch( fCntID )
 800a92a:	9807      	ldr	r0, [sp, #28]
 800a92c:	4b10      	ldr	r3, [pc, #64]	; (800a970 <LoRaMacCryptoUnsecureMessage+0xf8>)
 800a92e:	3801      	subs	r0, #1
 800a930:	2806      	cmp	r0, #6
 800a932:	d80c      	bhi.n	800a94e <LoRaMacCryptoUnsecureMessage+0xd6>
            CryptoCtx.NvmCtx->FCntList.McFCntDown3 = currentDown;
 800a934:	685a      	ldr	r2, [r3, #4]
    switch( fCntID )
 800a936:	f7f5 fbe7 	bl	8000108 <__gnu_thumb1_case_uqi>
 800a93a:	0d09      	.short	0x0d09
 800a93c:	1513110f 	.word	0x1513110f
 800a940:	17          	.byte	0x17
 800a941:	00          	.byte	0x00
 800a942:	3001      	adds	r0, #1
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 800a944:	2805      	cmp	r0, #5
 800a946:	d1b9      	bne.n	800a8bc <LoRaMacCryptoUnsecureMessage+0x44>
 800a948:	260c      	movs	r6, #12
 800a94a:	e7a8      	b.n	800a89e <LoRaMacCryptoUnsecureMessage+0x26>
            CryptoCtx.NvmCtx->FCntList.NFCntDown = currentDown;
 800a94c:	6114      	str	r4, [r2, #16]
    CryptoCtx.EventCryptoNvmCtxChanged( );
 800a94e:	689b      	ldr	r3, [r3, #8]
 800a950:	4798      	blx	r3
 800a952:	e7a4      	b.n	800a89e <LoRaMacCryptoUnsecureMessage+0x26>
            CryptoCtx.NvmCtx->FCntList.AFCntDown = currentDown;
 800a954:	6154      	str	r4, [r2, #20]
 800a956:	e7fa      	b.n	800a94e <LoRaMacCryptoUnsecureMessage+0xd6>
            CryptoCtx.NvmCtx->FCntList.FCntDown = currentDown;
 800a958:	6194      	str	r4, [r2, #24]
 800a95a:	e7f8      	b.n	800a94e <LoRaMacCryptoUnsecureMessage+0xd6>
            CryptoCtx.NvmCtx->FCntList.McFCntDown0 = currentDown;
 800a95c:	61d4      	str	r4, [r2, #28]
 800a95e:	e7f6      	b.n	800a94e <LoRaMacCryptoUnsecureMessage+0xd6>
            CryptoCtx.NvmCtx->FCntList.McFCntDown1 = currentDown;
 800a960:	6214      	str	r4, [r2, #32]
 800a962:	e7f4      	b.n	800a94e <LoRaMacCryptoUnsecureMessage+0xd6>
            CryptoCtx.NvmCtx->FCntList.McFCntDown2 = currentDown;
 800a964:	6254      	str	r4, [r2, #36]	; 0x24
 800a966:	e7f2      	b.n	800a94e <LoRaMacCryptoUnsecureMessage+0xd6>
            CryptoCtx.NvmCtx->FCntList.McFCntDown3 = currentDown;
 800a968:	6294      	str	r4, [r2, #40]	; 0x28
 800a96a:	e7f0      	b.n	800a94e <LoRaMacCryptoUnsecureMessage+0xd6>
 800a96c:	20000048 	.word	0x20000048
 800a970:	20000ed0 	.word	0x20000ed0

0800a974 <LoRaMacCryptoDeriveMcRootKey>:
{
 800a974:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800a976:	4b13      	ldr	r3, [pc, #76]	; (800a9c4 <LoRaMacCryptoDeriveMcRootKey+0x50>)
 800a978:	0004      	movs	r4, r0
 800a97a:	685e      	ldr	r6, [r3, #4]
 800a97c:	78b5      	ldrb	r5, [r6, #2]
    if( ( ( keyID == APP_KEY ) && ( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 0 ) ) ||
 800a97e:	2800      	cmp	r0, #0
 800a980:	d105      	bne.n	800a98e <LoRaMacCryptoDeriveMcRootKey+0x1a>
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 800a982:	230b      	movs	r3, #11
    if( ( ( keyID == APP_KEY ) && ( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 0 ) ) ||
 800a984:	2d00      	cmp	r5, #0
 800a986:	d107      	bne.n	800a998 <LoRaMacCryptoDeriveMcRootKey+0x24>
}
 800a988:	0018      	movs	r0, r3
 800a98a:	b004      	add	sp, #16
 800a98c:	bd70      	pop	{r4, r5, r6, pc}
    if( ( ( keyID == APP_KEY ) && ( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 0 ) ) ||
 800a98e:	2801      	cmp	r0, #1
 800a990:	d102      	bne.n	800a998 <LoRaMacCryptoDeriveMcRootKey+0x24>
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 800a992:	230b      	movs	r3, #11
        ( ( keyID == GEN_APP_KEY ) && ( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 1 ) ) )
 800a994:	2d01      	cmp	r5, #1
 800a996:	d0f7      	beq.n	800a988 <LoRaMacCryptoDeriveMcRootKey+0x14>
    uint8_t compBase[16] = { 0 };
 800a998:	2210      	movs	r2, #16
 800a99a:	2100      	movs	r1, #0
 800a99c:	4668      	mov	r0, sp
 800a99e:	f003 faf2 	bl	800df86 <memset>
    if( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 1 )
 800a9a2:	2d01      	cmp	r5, #1
 800a9a4:	d102      	bne.n	800a9ac <LoRaMacCryptoDeriveMcRootKey+0x38>
        compBase[0] = 0x20;
 800a9a6:	2320      	movs	r3, #32
 800a9a8:	466a      	mov	r2, sp
 800a9aa:	7013      	strb	r3, [r2, #0]
    if( SecureElementDeriveAndStoreKey( CryptoCtx.NvmCtx->LrWanVersion, compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 800a9ac:	2309      	movs	r3, #9
 800a9ae:	0022      	movs	r2, r4
 800a9b0:	4669      	mov	r1, sp
 800a9b2:	6830      	ldr	r0, [r6, #0]
 800a9b4:	f7fc fb27 	bl	8007006 <SecureElementDeriveAndStoreKey>
    return LORAMAC_CRYPTO_SUCCESS;
 800a9b8:	2300      	movs	r3, #0
    if( SecureElementDeriveAndStoreKey( CryptoCtx.NvmCtx->LrWanVersion, compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 800a9ba:	4298      	cmp	r0, r3
 800a9bc:	d0e4      	beq.n	800a988 <LoRaMacCryptoDeriveMcRootKey+0x14>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800a9be:	330f      	adds	r3, #15
 800a9c0:	e7e2      	b.n	800a988 <LoRaMacCryptoDeriveMcRootKey+0x14>
 800a9c2:	46c0      	nop			; (mov r8, r8)
 800a9c4:	20000ed0 	.word	0x20000ed0

0800a9c8 <LoRaMacCryptoSetKey>:
{
 800a9c8:	b510      	push	{r4, lr}
 800a9ca:	0004      	movs	r4, r0
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 800a9cc:	f7fc fb12 	bl	8006ff4 <SecureElementSetKey>
 800a9d0:	2800      	cmp	r0, #0
 800a9d2:	d001      	beq.n	800a9d8 <LoRaMacCryptoSetKey+0x10>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800a9d4:	200f      	movs	r0, #15
}
 800a9d6:	bd10      	pop	{r4, pc}
    if( ( keyID == GEN_APP_KEY ) || ( keyID == APP_KEY ) )
 800a9d8:	2c01      	cmp	r4, #1
 800a9da:	d808      	bhi.n	800a9ee <LoRaMacCryptoSetKey+0x26>
        if( LoRaMacCryptoDeriveMcRootKey( keyID ) != LORAMAC_CRYPTO_SUCCESS )
 800a9dc:	0020      	movs	r0, r4
 800a9de:	f7ff ffc9 	bl	800a974 <LoRaMacCryptoDeriveMcRootKey>
 800a9e2:	2800      	cmp	r0, #0
 800a9e4:	d1f6      	bne.n	800a9d4 <LoRaMacCryptoSetKey+0xc>
 800a9e6:	f7ff fd99 	bl	800a51c <LoRaMacCryptoDeriveMcKEKey.part.2>
        if( LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 800a9ea:	2800      	cmp	r0, #0
 800a9ec:	d1f2      	bne.n	800a9d4 <LoRaMacCryptoSetKey+0xc>
    return LORAMAC_CRYPTO_SUCCESS;
 800a9ee:	2000      	movs	r0, #0
 800a9f0:	e7f1      	b.n	800a9d6 <LoRaMacCryptoSetKey+0xe>
	...

0800a9f4 <LoRaMacCryptoHandleJoinAccept>:
{
 800a9f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a9f6:	b0c9      	sub	sp, #292	; 0x124
 800a9f8:	9001      	str	r0, [sp, #4]
 800a9fa:	9102      	str	r1, [sp, #8]
 800a9fc:	0014      	movs	r4, r2
        return LORAMAC_CRYPTO_ERROR_NPE;
 800a9fe:	250a      	movs	r5, #10
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 800aa00:	2a00      	cmp	r2, #0
 800aa02:	d01b      	beq.n	800aa3c <LoRaMacCryptoHandleJoinAccept+0x48>
 800aa04:	2900      	cmp	r1, #0
 800aa06:	d019      	beq.n	800aa3c <LoRaMacCryptoHandleJoinAccept+0x48>
        micComputationOffset = CRYPTO_MIC_COMPUTATION_OFFSET;
 800aa08:	3502      	adds	r5, #2
    if( joinReqType == JOIN_REQ )
 800aa0a:	28ff      	cmp	r0, #255	; 0xff
 800aa0c:	d000      	beq.n	800aa10 <LoRaMacCryptoHandleJoinAccept+0x1c>
    uint8_t micComputationOffset = 0;
 800aa0e:	2500      	movs	r5, #0
    memset1( procBuffer, 0, ( macMsg->BufSize + micComputationOffset ) );
 800aa10:	b2ab      	uxth	r3, r5
 800aa12:	9303      	str	r3, [sp, #12]
 800aa14:	7922      	ldrb	r2, [r4, #4]
 800aa16:	af05      	add	r7, sp, #20
 800aa18:	189a      	adds	r2, r3, r2
 800aa1a:	2100      	movs	r1, #0
 800aa1c:	0038      	movs	r0, r7
 800aa1e:	f002 f8bf 	bl	800cba0 <memset1>
    if( SecureElementAesEncrypt( macMsg->Buffer + LORAMAC_MHDR_FIELD_SIZE, ( macMsg->BufSize - LORAMAC_MHDR_FIELD_SIZE ), encryptionKeyID, ( procBuffer + micComputationOffset ) ) != SECURE_ELEMENT_SUCCESS )
 800aa22:	7921      	ldrb	r1, [r4, #4]
 800aa24:	6823      	ldr	r3, [r4, #0]
 800aa26:	197d      	adds	r5, r7, r5
 800aa28:	3901      	subs	r1, #1
 800aa2a:	1c58      	adds	r0, r3, #1
 800aa2c:	b289      	uxth	r1, r1
 800aa2e:	002b      	movs	r3, r5
 800aa30:	2202      	movs	r2, #2
 800aa32:	f7fc fa61 	bl	8006ef8 <SecureElementAesEncrypt>
 800aa36:	2800      	cmp	r0, #0
 800aa38:	d003      	beq.n	800aa42 <LoRaMacCryptoHandleJoinAccept+0x4e>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800aa3a:	250f      	movs	r5, #15
}
 800aa3c:	0028      	movs	r0, r5
 800aa3e:	b049      	add	sp, #292	; 0x124
 800aa40:	bdf0      	pop	{r4, r5, r6, r7, pc}
    memcpy1( macMsg->Buffer + LORAMAC_MHDR_FIELD_SIZE, ( procBuffer + micComputationOffset ), ( macMsg->BufSize - LORAMAC_MHDR_FIELD_SIZE ) );
 800aa42:	7922      	ldrb	r2, [r4, #4]
 800aa44:	6823      	ldr	r3, [r4, #0]
 800aa46:	3a01      	subs	r2, #1
 800aa48:	1c58      	adds	r0, r3, #1
 800aa4a:	0029      	movs	r1, r5
 800aa4c:	b292      	uxth	r2, r2
 800aa4e:	f002 f892 	bl	800cb76 <memcpy1>
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800aa52:	0020      	movs	r0, r4
 800aa54:	f000 f886 	bl	800ab64 <LoRaMacParserJoinAccept>
        return LORAMAC_CRYPTO_ERROR_PARSER;
 800aa58:	2510      	movs	r5, #16
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800aa5a:	2800      	cmp	r0, #0
 800aa5c:	d1ee      	bne.n	800aa3c <LoRaMacCryptoHandleJoinAccept+0x48>
 800aa5e:	4e40      	ldr	r6, [pc, #256]	; (800ab60 <LoRaMacCryptoHandleJoinAccept+0x16c>)
    if( macMsg->DLSettings.Bits.OptNeg == 1 )
 800aa60:	7c22      	ldrb	r2, [r4, #16]
 800aa62:	6873      	ldr	r3, [r6, #4]
 800aa64:	2a7f      	cmp	r2, #127	; 0x7f
 800aa66:	d949      	bls.n	800aafc <LoRaMacCryptoHandleJoinAccept+0x108>
        CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor = 1;
 800aa68:	2201      	movs	r2, #1
        micComputationKeyID = J_S_INT_KEY;
 800aa6a:	3d0d      	subs	r5, #13
        CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor = 1;
 800aa6c:	709a      	strb	r2, [r3, #2]
    if( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 0 )
 800aa6e:	789b      	ldrb	r3, [r3, #2]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d146      	bne.n	800ab02 <LoRaMacCryptoHandleJoinAccept+0x10e>
        if( SecureElementVerifyAesCmac( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), macMsg->MIC, micComputationKeyID ) != SECURE_ELEMENT_SUCCESS )
 800aa74:	7921      	ldrb	r1, [r4, #4]
 800aa76:	002b      	movs	r3, r5
 800aa78:	3904      	subs	r1, #4
 800aa7a:	b289      	uxth	r1, r1
 800aa7c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800aa7e:	6820      	ldr	r0, [r4, #0]
 800aa80:	f7fc fa22 	bl	8006ec8 <SecureElementVerifyAesCmac>
 800aa84:	2800      	cmp	r0, #0
 800aa86:	d1d8      	bne.n	800aa3a <LoRaMacCryptoHandleJoinAccept+0x46>
        retval = LoRaMacCryptoDeriveMcRootKey( GEN_APP_KEY );
 800aa88:	2001      	movs	r0, #1
 800aa8a:	f7ff ff73 	bl	800a974 <LoRaMacCryptoDeriveMcRootKey>
 800aa8e:	1e05      	subs	r5, r0, #0
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800aa90:	d1d4      	bne.n	800aa3c <LoRaMacCryptoHandleJoinAccept+0x48>
 800aa92:	f7ff fd43 	bl	800a51c <LoRaMacCryptoDeriveMcKEKey.part.2>
 800aa96:	1e05      	subs	r5, r0, #0
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800aa98:	d1d0      	bne.n	800aa3c <LoRaMacCryptoHandleJoinAccept+0x48>
        retval = DeriveSessionKey10x( APP_S_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* ) &CryptoCtx.NvmCtx->DevNonce );
 800aa9a:	6873      	ldr	r3, [r6, #4]
 800aa9c:	1da7      	adds	r7, r4, #6
 800aa9e:	3409      	adds	r4, #9
 800aaa0:	3304      	adds	r3, #4
 800aaa2:	0022      	movs	r2, r4
 800aaa4:	0039      	movs	r1, r7
 800aaa6:	2008      	movs	r0, #8
 800aaa8:	f7ff fd02 	bl	800a4b0 <DeriveSessionKey10x>
 800aaac:	1e05      	subs	r5, r0, #0
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800aaae:	d1c5      	bne.n	800aa3c <LoRaMacCryptoHandleJoinAccept+0x48>
        retval = DeriveSessionKey10x( NWK_S_ENC_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* ) &CryptoCtx.NvmCtx->DevNonce );
 800aab0:	6873      	ldr	r3, [r6, #4]
 800aab2:	0022      	movs	r2, r4
 800aab4:	3304      	adds	r3, #4
 800aab6:	0039      	movs	r1, r7
 800aab8:	2007      	movs	r0, #7
 800aaba:	f7ff fcf9 	bl	800a4b0 <DeriveSessionKey10x>
 800aabe:	1e05      	subs	r5, r0, #0
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800aac0:	d1bc      	bne.n	800aa3c <LoRaMacCryptoHandleJoinAccept+0x48>
        retval = DeriveSessionKey10x( F_NWK_S_INT_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* ) &CryptoCtx.NvmCtx->DevNonce );
 800aac2:	6873      	ldr	r3, [r6, #4]
 800aac4:	0022      	movs	r2, r4
 800aac6:	3304      	adds	r3, #4
 800aac8:	0039      	movs	r1, r7
 800aaca:	2005      	movs	r0, #5
 800aacc:	f7ff fcf0 	bl	800a4b0 <DeriveSessionKey10x>
 800aad0:	1e05      	subs	r5, r0, #0
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800aad2:	d1b3      	bne.n	800aa3c <LoRaMacCryptoHandleJoinAccept+0x48>
        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* ) &CryptoCtx.NvmCtx->DevNonce );
 800aad4:	6873      	ldr	r3, [r6, #4]
 800aad6:	0022      	movs	r2, r4
 800aad8:	3304      	adds	r3, #4
 800aada:	0039      	movs	r1, r7
 800aadc:	2006      	movs	r0, #6
 800aade:	f7ff fce7 	bl	800a4b0 <DeriveSessionKey10x>
 800aae2:	1e05      	subs	r5, r0, #0
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800aae4:	d1aa      	bne.n	800aa3c <LoRaMacCryptoHandleJoinAccept+0x48>
    CryptoCtx.NvmCtx->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 800aae6:	2201      	movs	r2, #1
    CryptoCtx.NvmCtx->FCntList.FCntUp = 0;
 800aae8:	6873      	ldr	r3, [r6, #4]
    CryptoCtx.NvmCtx->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 800aaea:	4252      	negs	r2, r2
    CryptoCtx.NvmCtx->FCntList.FCntUp = 0;
 800aaec:	60d8      	str	r0, [r3, #12]
    CryptoCtx.NvmCtx->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 800aaee:	619a      	str	r2, [r3, #24]
    CryptoCtx.NvmCtx->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 800aaf0:	611a      	str	r2, [r3, #16]
    CryptoCtx.NvmCtx->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 800aaf2:	615a      	str	r2, [r3, #20]
    CryptoCtx.EventCryptoNvmCtxChanged( );
 800aaf4:	68b3      	ldr	r3, [r6, #8]
    CryptoCtx.RJcount0 = 0;
 800aaf6:	8030      	strh	r0, [r6, #0]
    CryptoCtx.EventCryptoNvmCtxChanged( );
 800aaf8:	4798      	blx	r3
    return LORAMAC_CRYPTO_SUCCESS;
 800aafa:	e79f      	b.n	800aa3c <LoRaMacCryptoHandleJoinAccept+0x48>
        CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor = 0;
 800aafc:	7098      	strb	r0, [r3, #2]
        micComputationKeyID = NWK_KEY;
 800aafe:	2502      	movs	r5, #2
 800ab00:	e7b5      	b.n	800aa6e <LoRaMacCryptoHandleJoinAccept+0x7a>
        procBuffer[bufItr++] = ( uint8_t ) joinReqType;
 800ab02:	9b01      	ldr	r3, [sp, #4]
        memcpyr( &procBuffer[bufItr], joinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 800ab04:	2208      	movs	r2, #8
        procBuffer[bufItr++] = ( uint8_t ) joinReqType;
 800ab06:	703b      	strb	r3, [r7, #0]
        memcpyr( &procBuffer[bufItr], joinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 800ab08:	ab04      	add	r3, sp, #16
 800ab0a:	1d58      	adds	r0, r3, #5
 800ab0c:	9902      	ldr	r1, [sp, #8]
 800ab0e:	f002 f83b 	bl	800cb88 <memcpyr>
        procBuffer[bufItr++] = CryptoCtx.NvmCtx->DevNonce & 0xFF;
 800ab12:	6873      	ldr	r3, [r6, #4]
        if( SecureElementVerifyAesCmac( procBuffer,  ( macMsg->BufSize + micComputationOffset - LORAMAC_MHDR_FIELD_SIZE - LORAMAC_MIC_FIELD_SIZE ), macMsg->MIC, micComputationKeyID ) != SECURE_ELEMENT_SUCCESS )
 800ab14:	0038      	movs	r0, r7
        procBuffer[bufItr++] = CryptoCtx.NvmCtx->DevNonce & 0xFF;
 800ab16:	889a      	ldrh	r2, [r3, #4]
 800ab18:	727a      	strb	r2, [r7, #9]
        procBuffer[bufItr++] = ( CryptoCtx.NvmCtx->DevNonce >> 8 ) & 0xFF;
 800ab1a:	889b      	ldrh	r3, [r3, #4]
        if( SecureElementVerifyAesCmac( procBuffer,  ( macMsg->BufSize + micComputationOffset - LORAMAC_MHDR_FIELD_SIZE - LORAMAC_MIC_FIELD_SIZE ), macMsg->MIC, micComputationKeyID ) != SECURE_ELEMENT_SUCCESS )
 800ab1c:	6a62      	ldr	r2, [r4, #36]	; 0x24
        procBuffer[bufItr++] = ( CryptoCtx.NvmCtx->DevNonce >> 8 ) & 0xFF;
 800ab1e:	0a1b      	lsrs	r3, r3, #8
 800ab20:	72bb      	strb	r3, [r7, #10]
        procBuffer[bufItr++] = macMsg->MHDR.Value;
 800ab22:	7963      	ldrb	r3, [r4, #5]
 800ab24:	72fb      	strb	r3, [r7, #11]
        if( SecureElementVerifyAesCmac( procBuffer,  ( macMsg->BufSize + micComputationOffset - LORAMAC_MHDR_FIELD_SIZE - LORAMAC_MIC_FIELD_SIZE ), macMsg->MIC, micComputationKeyID ) != SECURE_ELEMENT_SUCCESS )
 800ab26:	7921      	ldrb	r1, [r4, #4]
 800ab28:	9b03      	ldr	r3, [sp, #12]
 800ab2a:	3905      	subs	r1, #5
 800ab2c:	1859      	adds	r1, r3, r1
 800ab2e:	b289      	uxth	r1, r1
 800ab30:	002b      	movs	r3, r5
 800ab32:	f7fc f9c9 	bl	8006ec8 <SecureElementVerifyAesCmac>
 800ab36:	2800      	cmp	r0, #0
 800ab38:	d000      	beq.n	800ab3c <LoRaMacCryptoHandleJoinAccept+0x148>
 800ab3a:	e77e      	b.n	800aa3a <LoRaMacCryptoHandleJoinAccept+0x46>
        currentJoinNonce |= ( ( uint32_t ) macMsg->JoinNonce[1] << 8 );
 800ab3c:	79e3      	ldrb	r3, [r4, #7]
        currentJoinNonce |= ( ( uint32_t ) macMsg->JoinNonce[2] << 16 );
 800ab3e:	7a22      	ldrb	r2, [r4, #8]
        currentJoinNonce |= ( ( uint32_t ) macMsg->JoinNonce[1] << 8 );
 800ab40:	021b      	lsls	r3, r3, #8
        currentJoinNonce |= ( ( uint32_t ) macMsg->JoinNonce[2] << 16 );
 800ab42:	0412      	lsls	r2, r2, #16
        currentJoinNonce = ( uint32_t ) macMsg->JoinNonce[0];
 800ab44:	79a1      	ldrb	r1, [r4, #6]
        currentJoinNonce |= ( ( uint32_t ) macMsg->JoinNonce[2] << 16 );
 800ab46:	4313      	orrs	r3, r2
        if( currentJoinNonce > CryptoCtx.NvmCtx->JoinNonce )
 800ab48:	6872      	ldr	r2, [r6, #4]
        currentJoinNonce |= ( ( uint32_t ) macMsg->JoinNonce[2] << 16 );
 800ab4a:	430b      	orrs	r3, r1
        if( currentJoinNonce > CryptoCtx.NvmCtx->JoinNonce )
 800ab4c:	6891      	ldr	r1, [r2, #8]
            return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 800ab4e:	2503      	movs	r5, #3
        if( currentJoinNonce > CryptoCtx.NvmCtx->JoinNonce )
 800ab50:	4299      	cmp	r1, r3
 800ab52:	d300      	bcc.n	800ab56 <LoRaMacCryptoHandleJoinAccept+0x162>
 800ab54:	e772      	b.n	800aa3c <LoRaMacCryptoHandleJoinAccept+0x48>
            CryptoCtx.NvmCtx->JoinNonce = currentJoinNonce;
 800ab56:	6093      	str	r3, [r2, #8]
            CryptoCtx.EventCryptoNvmCtxChanged( );
 800ab58:	68b3      	ldr	r3, [r6, #8]
 800ab5a:	4798      	blx	r3
 800ab5c:	e794      	b.n	800aa88 <LoRaMacCryptoHandleJoinAccept+0x94>
 800ab5e:	46c0      	nop			; (mov r8, r8)
 800ab60:	20000ed0 	.word	0x20000ed0

0800ab64 <LoRaMacParserJoinAccept>:
*/
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 800ab64:	b510      	push	{r4, lr}
 800ab66:	0004      	movs	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
    {
        return LORAMAC_PARSER_ERROR_NPE;
 800ab68:	2002      	movs	r0, #2
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800ab6a:	2c00      	cmp	r4, #0
 800ab6c:	d040      	beq.n	800abf0 <LoRaMacParserJoinAccept+0x8c>
 800ab6e:	6821      	ldr	r1, [r4, #0]
 800ab70:	2900      	cmp	r1, #0
 800ab72:	d03d      	beq.n	800abf0 <LoRaMacParserJoinAccept+0x8c>
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800ab74:	780b      	ldrb	r3, [r1, #0]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 800ab76:	1da0      	adds	r0, r4, #6
    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800ab78:	7163      	strb	r3, [r4, #5]
    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 800ab7a:	3101      	adds	r1, #1
 800ab7c:	2203      	movs	r2, #3
 800ab7e:	f001 fffa 	bl	800cb76 <memcpy1>
    bufItr = bufItr + 3;

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 800ab82:	0020      	movs	r0, r4
 800ab84:	6823      	ldr	r3, [r4, #0]
 800ab86:	2203      	movs	r2, #3
 800ab88:	1d19      	adds	r1, r3, #4
 800ab8a:	3009      	adds	r0, #9
 800ab8c:	f001 fff3 	bl	800cb76 <memcpy1>
    bufItr = bufItr + 3;

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 800ab90:	6821      	ldr	r1, [r4, #0]
 800ab92:	79ca      	ldrb	r2, [r1, #7]
 800ab94:	60e2      	str	r2, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800ab96:	7a0b      	ldrb	r3, [r1, #8]
 800ab98:	021b      	lsls	r3, r3, #8
 800ab9a:	431a      	orrs	r2, r3
 800ab9c:	60e2      	str	r2, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800ab9e:	7a4b      	ldrb	r3, [r1, #9]
 800aba0:	041b      	lsls	r3, r3, #16
 800aba2:	4313      	orrs	r3, r2
 800aba4:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800aba6:	7a8a      	ldrb	r2, [r1, #10]
 800aba8:	0612      	lsls	r2, r2, #24
 800abaa:	4313      	orrs	r3, r2
 800abac:	60e3      	str	r3, [r4, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 800abae:	7acb      	ldrb	r3, [r1, #11]
 800abb0:	7423      	strb	r3, [r4, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 800abb2:	7b0b      	ldrb	r3, [r1, #12]
 800abb4:	7463      	strb	r3, [r4, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_C_FLIST_FIELD_SIZE )
 800abb6:	7923      	ldrb	r3, [r4, #4]
 800abb8:	2b21      	cmp	r3, #33	; 0x21
 800abba:	d11a      	bne.n	800abf2 <LoRaMacParserJoinAccept+0x8e>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_C_FLIST_FIELD_SIZE );
 800abbc:	0020      	movs	r0, r4
 800abbe:	310d      	adds	r1, #13
 800abc0:	2210      	movs	r2, #16
 800abc2:	3012      	adds	r0, #18
 800abc4:	f001 ffd7 	bl	800cb76 <memcpy1>
        bufItr = bufItr + LORAMAC_C_FLIST_FIELD_SIZE;
 800abc8:	231d      	movs	r3, #29
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
    {
        return LORAMAC_PARSER_FAIL;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 800abca:	6820      	ldr	r0, [r4, #0]
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800abcc:	1c5a      	adds	r2, r3, #1
    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 800abce:	5cc1      	ldrb	r1, [r0, r3]
 800abd0:	6261      	str	r1, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800abd2:	5c82      	ldrb	r2, [r0, r2]
 800abd4:	0212      	lsls	r2, r2, #8
 800abd6:	4311      	orrs	r1, r2
 800abd8:	6261      	str	r1, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800abda:	1c9a      	adds	r2, r3, #2
 800abdc:	5c82      	ldrb	r2, [r0, r2]
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800abde:	3303      	adds	r3, #3
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800abe0:	0412      	lsls	r2, r2, #16
 800abe2:	430a      	orrs	r2, r1
 800abe4:	6262      	str	r2, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800abe6:	5cc3      	ldrb	r3, [r0, r3]

    return LORAMAC_PARSER_SUCCESS;
 800abe8:	2000      	movs	r0, #0
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800abea:	061b      	lsls	r3, r3, #24
 800abec:	431a      	orrs	r2, r3
 800abee:	6262      	str	r2, [r4, #36]	; 0x24
}
 800abf0:	bd10      	pop	{r4, pc}
        return LORAMAC_PARSER_FAIL;
 800abf2:	2001      	movs	r0, #1
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 800abf4:	2b11      	cmp	r3, #17
 800abf6:	dcfb      	bgt.n	800abf0 <LoRaMacParserJoinAccept+0x8c>
    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 800abf8:	230d      	movs	r3, #13
 800abfa:	e7e6      	b.n	800abca <LoRaMacParserJoinAccept+0x66>

0800abfc <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 800abfc:	b570      	push	{r4, r5, r6, lr}
 800abfe:	0004      	movs	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
    {
        return LORAMAC_PARSER_ERROR_NPE;
 800ac00:	2002      	movs	r0, #2
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800ac02:	2c00      	cmp	r4, #0
 800ac04:	d054      	beq.n	800acb0 <LoRaMacParserData+0xb4>
 800ac06:	6821      	ldr	r1, [r4, #0]
 800ac08:	2900      	cmp	r1, #0
 800ac0a:	d051      	beq.n	800acb0 <LoRaMacParserData+0xb4>
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800ac0c:	780b      	ldrb	r3, [r1, #0]
    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800ac0e:	0020      	movs	r0, r4
    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800ac10:	7163      	strb	r3, [r4, #5]
    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 800ac12:	784a      	ldrb	r2, [r1, #1]
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800ac14:	3010      	adds	r0, #16
    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 800ac16:	60a2      	str	r2, [r4, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800ac18:	788b      	ldrb	r3, [r1, #2]
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 800ac1a:	1c65      	adds	r5, r4, #1
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800ac1c:	021b      	lsls	r3, r3, #8
 800ac1e:	431a      	orrs	r2, r3
 800ac20:	60a2      	str	r2, [r4, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800ac22:	78cb      	ldrb	r3, [r1, #3]
 800ac24:	041b      	lsls	r3, r3, #16
 800ac26:	4313      	orrs	r3, r2
 800ac28:	60a3      	str	r3, [r4, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800ac2a:	790a      	ldrb	r2, [r1, #4]
 800ac2c:	0612      	lsls	r2, r2, #24
 800ac2e:	4313      	orrs	r3, r2
 800ac30:	60a3      	str	r3, [r4, #8]
    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 800ac32:	794b      	ldrb	r3, [r1, #5]
 800ac34:	7323      	strb	r3, [r4, #12]
    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 800ac36:	798b      	ldrb	r3, [r1, #6]
 800ac38:	81e3      	strh	r3, [r4, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 800ac3a:	79ca      	ldrb	r2, [r1, #7]
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800ac3c:	3108      	adds	r1, #8
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 800ac3e:	0212      	lsls	r2, r2, #8
 800ac40:	4313      	orrs	r3, r2
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800ac42:	7b22      	ldrb	r2, [r4, #12]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 800ac44:	81e3      	strh	r3, [r4, #14]
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800ac46:	0712      	lsls	r2, r2, #28
 800ac48:	0f12      	lsrs	r2, r2, #28
 800ac4a:	f001 ff94 	bl	800cb76 <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800ac4e:	7b21      	ldrb	r1, [r4, #12]
    macMsg->FRMPayloadSize = 0;
 800ac50:	0020      	movs	r0, r4
    macMsg->FPort = 0;
 800ac52:	2300      	movs	r3, #0
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800ac54:	0709      	lsls	r1, r1, #28
 800ac56:	0f09      	lsrs	r1, r1, #28
 800ac58:	000e      	movs	r6, r1
    macMsg->FRMPayloadSize = 0;
 800ac5a:	3028      	adds	r0, #40	; 0x28
    macMsg->FPort = 0;
 800ac5c:	77eb      	strb	r3, [r5, #31]
    macMsg->FRMPayloadSize = 0;
 800ac5e:	7003      	strb	r3, [r0, #0]

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 800ac60:	7922      	ldrb	r2, [r4, #4]
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800ac62:	3608      	adds	r6, #8
    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 800ac64:	1b93      	subs	r3, r2, r6
 800ac66:	2b04      	cmp	r3, #4
 800ac68:	dd0c      	ble.n	800ac84 <LoRaMacParserData+0x88>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 800ac6a:	6823      	ldr	r3, [r4, #0]
 800ac6c:	3109      	adds	r1, #9

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 800ac6e:	3a04      	subs	r2, #4
        macMsg->FPort = macMsg->Buffer[bufItr++];
 800ac70:	5d9e      	ldrb	r6, [r3, r6]
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 800ac72:	1a52      	subs	r2, r2, r1
 800ac74:	b2d2      	uxtb	r2, r2
        macMsg->FPort = macMsg->Buffer[bufItr++];
 800ac76:	77ee      	strb	r6, [r5, #31]
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 800ac78:	7002      	strb	r2, [r0, #0]
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 800ac7a:	1859      	adds	r1, r3, r1
 800ac7c:	b292      	uxth	r2, r2
 800ac7e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ac80:	f001 ff79 	bl	800cb76 <memcpy1>
    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );

    return LORAMAC_PARSER_SUCCESS;
 800ac84:	2000      	movs	r0, #0
    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 800ac86:	6822      	ldr	r2, [r4, #0]
 800ac88:	7923      	ldrb	r3, [r4, #4]
 800ac8a:	18d3      	adds	r3, r2, r3
 800ac8c:	1f1a      	subs	r2, r3, #4
 800ac8e:	7811      	ldrb	r1, [r2, #0]
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 800ac90:	1eda      	subs	r2, r3, #3
    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 800ac92:	62e1      	str	r1, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 800ac94:	7812      	ldrb	r2, [r2, #0]
 800ac96:	0212      	lsls	r2, r2, #8
 800ac98:	4311      	orrs	r1, r2
 800ac9a:	62e1      	str	r1, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 800ac9c:	1e9a      	subs	r2, r3, #2
 800ac9e:	7812      	ldrb	r2, [r2, #0]
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 800aca0:	3b01      	subs	r3, #1
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 800aca2:	0412      	lsls	r2, r2, #16
 800aca4:	430a      	orrs	r2, r1
 800aca6:	62e2      	str	r2, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 800aca8:	781b      	ldrb	r3, [r3, #0]
 800acaa:	061b      	lsls	r3, r3, #24
 800acac:	431a      	orrs	r2, r3
 800acae:	62e2      	str	r2, [r4, #44]	; 0x2c
}
 800acb0:	bd70      	pop	{r4, r5, r6, pc}

0800acb2 <LoRaMacSerializerJoinRequest>:
*/
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 800acb2:	b510      	push	{r4, lr}
 800acb4:	0004      	movs	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800acb6:	2001      	movs	r0, #1
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800acb8:	2c00      	cmp	r4, #0
 800acba:	d02e      	beq.n	800ad1a <LoRaMacSerializerJoinRequest+0x68>
 800acbc:	6823      	ldr	r3, [r4, #0]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d02b      	beq.n	800ad1a <LoRaMacSerializerJoinRequest+0x68>
    }

    uint16_t bufItr = 0;

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 800acc2:	7922      	ldrb	r2, [r4, #4]
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 800acc4:	1800      	adds	r0, r0, r0
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 800acc6:	2a16      	cmp	r2, #22
 800acc8:	d927      	bls.n	800ad1a <LoRaMacSerializerJoinRequest+0x68>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800acca:	7962      	ldrb	r2, [r4, #5]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 800accc:	1da1      	adds	r1, r4, #6
    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800acce:	701a      	strb	r2, [r3, #0]
    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 800acd0:	6823      	ldr	r3, [r4, #0]
 800acd2:	2208      	movs	r2, #8
 800acd4:	1c58      	adds	r0, r3, #1
 800acd6:	f001 ff57 	bl	800cb88 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 800acda:	0021      	movs	r1, r4
 800acdc:	6820      	ldr	r0, [r4, #0]
 800acde:	2208      	movs	r2, #8
 800ace0:	3009      	adds	r0, #9
 800ace2:	310e      	adds	r1, #14
 800ace4:	f001 ff50 	bl	800cb88 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 800ace8:	8ae3      	ldrh	r3, [r4, #22]
 800acea:	6822      	ldr	r2, [r4, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;

    macMsg->BufSize = bufItr;

    return LORAMAC_SERIALIZER_SUCCESS;
 800acec:	2000      	movs	r0, #0
    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 800acee:	7453      	strb	r3, [r2, #17]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 800acf0:	8ae3      	ldrh	r3, [r4, #22]
 800acf2:	6822      	ldr	r2, [r4, #0]
 800acf4:	0a1b      	lsrs	r3, r3, #8
 800acf6:	7493      	strb	r3, [r2, #18]
    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800acf8:	69a3      	ldr	r3, [r4, #24]
 800acfa:	6822      	ldr	r2, [r4, #0]
 800acfc:	74d3      	strb	r3, [r2, #19]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800acfe:	69a3      	ldr	r3, [r4, #24]
 800ad00:	6822      	ldr	r2, [r4, #0]
 800ad02:	0a1b      	lsrs	r3, r3, #8
 800ad04:	7513      	strb	r3, [r2, #20]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800ad06:	69a3      	ldr	r3, [r4, #24]
 800ad08:	6822      	ldr	r2, [r4, #0]
 800ad0a:	0c1b      	lsrs	r3, r3, #16
 800ad0c:	7553      	strb	r3, [r2, #21]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800ad0e:	69a3      	ldr	r3, [r4, #24]
 800ad10:	6822      	ldr	r2, [r4, #0]
 800ad12:	0e1b      	lsrs	r3, r3, #24
 800ad14:	7593      	strb	r3, [r2, #22]
    macMsg->BufSize = bufItr;
 800ad16:	2317      	movs	r3, #23
 800ad18:	7123      	strb	r3, [r4, #4]
}
 800ad1a:	bd10      	pop	{r4, pc}

0800ad1c <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 800ad1c:	b570      	push	{r4, r5, r6, lr}
 800ad1e:	0004      	movs	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800ad20:	2001      	movs	r0, #1
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800ad22:	2c00      	cmp	r4, #0
 800ad24:	d068      	beq.n	800adf8 <LoRaMacSerializerData+0xdc>
 800ad26:	6821      	ldr	r1, [r4, #0]
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800ad28:	2001      	movs	r0, #1
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800ad2a:	2900      	cmp	r1, #0
 800ad2c:	d064      	beq.n	800adf8 <LoRaMacSerializerData+0xdc>
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;

    if( macMsg->FRMPayloadSize > 0 )
 800ad2e:	0025      	movs	r5, r4
 800ad30:	3528      	adds	r5, #40	; 0x28
 800ad32:	7828      	ldrb	r0, [r5, #0]
    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800ad34:	7b22      	ldrb	r2, [r4, #12]
 800ad36:	0003      	movs	r3, r0
 800ad38:	1e5e      	subs	r6, r3, #1
 800ad3a:	41b3      	sbcs	r3, r6
 800ad3c:	0712      	lsls	r2, r2, #28
 800ad3e:	0f12      	lsrs	r2, r2, #28
 800ad40:	189b      	adds	r3, r3, r2
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
    }

    computedBufSize += macMsg->FRMPayloadSize;
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 800ad42:	3004      	adds	r0, #4
    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800ad44:	3308      	adds	r3, #8
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 800ad46:	181b      	adds	r3, r3, r0

    if( macMsg->BufSize < computedBufSize )
 800ad48:	7922      	ldrb	r2, [r4, #4]
 800ad4a:	b29b      	uxth	r3, r3
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 800ad4c:	2002      	movs	r0, #2
    if( macMsg->BufSize < computedBufSize )
 800ad4e:	429a      	cmp	r2, r3
 800ad50:	d352      	bcc.n	800adf8 <LoRaMacSerializerData+0xdc>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800ad52:	7963      	ldrb	r3, [r4, #5]
 800ad54:	700b      	strb	r3, [r1, #0]
    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800ad56:	0021      	movs	r1, r4
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 800ad58:	68a3      	ldr	r3, [r4, #8]
 800ad5a:	6822      	ldr	r2, [r4, #0]
    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800ad5c:	3110      	adds	r1, #16
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 800ad5e:	7053      	strb	r3, [r2, #1]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 800ad60:	68a3      	ldr	r3, [r4, #8]
 800ad62:	6822      	ldr	r2, [r4, #0]
 800ad64:	0a1b      	lsrs	r3, r3, #8
 800ad66:	7093      	strb	r3, [r2, #2]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 800ad68:	68a3      	ldr	r3, [r4, #8]
 800ad6a:	6822      	ldr	r2, [r4, #0]
 800ad6c:	0c1b      	lsrs	r3, r3, #16
 800ad6e:	70d3      	strb	r3, [r2, #3]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 800ad70:	68a3      	ldr	r3, [r4, #8]
 800ad72:	6822      	ldr	r2, [r4, #0]
 800ad74:	0e1b      	lsrs	r3, r3, #24
 800ad76:	7113      	strb	r3, [r2, #4]
    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 800ad78:	7b23      	ldrb	r3, [r4, #12]
 800ad7a:	6822      	ldr	r2, [r4, #0]
 800ad7c:	7153      	strb	r3, [r2, #5]
    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 800ad7e:	89e3      	ldrh	r3, [r4, #14]
 800ad80:	6822      	ldr	r2, [r4, #0]
 800ad82:	7193      	strb	r3, [r2, #6]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 800ad84:	89e3      	ldrh	r3, [r4, #14]
 800ad86:	6822      	ldr	r2, [r4, #0]
 800ad88:	0a1b      	lsrs	r3, r3, #8
 800ad8a:	71d3      	strb	r3, [r2, #7]
    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800ad8c:	7b22      	ldrb	r2, [r4, #12]
 800ad8e:	6820      	ldr	r0, [r4, #0]
 800ad90:	0712      	lsls	r2, r2, #28
 800ad92:	0f12      	lsrs	r2, r2, #28
 800ad94:	3008      	adds	r0, #8
 800ad96:	f001 feee 	bl	800cb76 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800ad9a:	7b23      	ldrb	r3, [r4, #12]

    if( macMsg->FRMPayloadSize > 0 )
 800ad9c:	782a      	ldrb	r2, [r5, #0]
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800ad9e:	071b      	lsls	r3, r3, #28
 800ada0:	0f1b      	lsrs	r3, r3, #28
 800ada2:	001e      	movs	r6, r3
 800ada4:	3608      	adds	r6, #8
    if( macMsg->FRMPayloadSize > 0 )
 800ada6:	2a00      	cmp	r2, #0
 800ada8:	d005      	beq.n	800adb6 <LoRaMacSerializerData+0x9a>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 800adaa:	1c62      	adds	r2, r4, #1
 800adac:	7fd2      	ldrb	r2, [r2, #31]
 800adae:	6821      	ldr	r1, [r4, #0]
 800adb0:	3309      	adds	r3, #9
 800adb2:	558a      	strb	r2, [r1, r6]
 800adb4:	001e      	movs	r6, r3
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 800adb6:	6823      	ldr	r3, [r4, #0]
 800adb8:	782a      	ldrb	r2, [r5, #0]
 800adba:	1998      	adds	r0, r3, r6
 800adbc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800adbe:	f001 feda 	bl	800cb76 <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 800adc2:	782b      	ldrb	r3, [r5, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800adc4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800adc6:	6821      	ldr	r1, [r4, #0]
    bufItr = bufItr + macMsg->FRMPayloadSize;
 800adc8:	18f3      	adds	r3, r6, r3
 800adca:	b29b      	uxth	r3, r3
    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800adcc:	54ca      	strb	r2, [r1, r3]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800adce:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800add0:	6820      	ldr	r0, [r4, #0]
    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800add2:	1c5a      	adds	r2, r3, #1
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800add4:	b292      	uxth	r2, r2
 800add6:	0a09      	lsrs	r1, r1, #8
 800add8:	5481      	strb	r1, [r0, r2]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800adda:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800addc:	6820      	ldr	r0, [r4, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800adde:	1c9a      	adds	r2, r3, #2
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800ade0:	b292      	uxth	r2, r2
 800ade2:	0c09      	lsrs	r1, r1, #16
 800ade4:	5481      	strb	r1, [r0, r2]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800ade6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800ade8:	1cda      	adds	r2, r3, #3
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800adea:	6820      	ldr	r0, [r4, #0]
 800adec:	b292      	uxth	r2, r2
 800adee:	0e09      	lsrs	r1, r1, #24
 800adf0:	5481      	strb	r1, [r0, r2]

    macMsg->BufSize = bufItr;

    return LORAMAC_SERIALIZER_SUCCESS;
 800adf2:	2000      	movs	r0, #0
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800adf4:	3304      	adds	r3, #4
    macMsg->BufSize = bufItr;
 800adf6:	7123      	strb	r3, [r4, #4]
}
 800adf8:	bd70      	pop	{r4, r5, r6, pc}

0800adfa <RegionIsActive>:
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 800adfa:	4243      	negs	r3, r0
 800adfc:	4158      	adcs	r0, r3
        }
    }
}
 800adfe:	4770      	bx	lr

0800ae00 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 800ae00:	b507      	push	{r0, r1, r2, lr}
    PhyParam_t phyParam = { 0 };
    switch( region )
 800ae02:	2800      	cmp	r0, #0
 800ae04:	d105      	bne.n	800ae12 <RegionGetPhyParam+0x12>
    {
        AS923_GET_PHY_PARAM( );
 800ae06:	0008      	movs	r0, r1
 800ae08:	f000 f8d6 	bl	800afb8 <RegionAS923GetPhyParam>
 800ae0c:	9001      	str	r0, [sp, #4]
        default:
        {
            return phyParam;
        }
    }
}
 800ae0e:	9801      	ldr	r0, [sp, #4]
 800ae10:	bd0e      	pop	{r1, r2, r3, pc}
            return phyParam;
 800ae12:	2300      	movs	r3, #0
 800ae14:	9301      	str	r3, [sp, #4]
 800ae16:	e7fa      	b.n	800ae0e <RegionGetPhyParam+0xe>

0800ae18 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 800ae18:	b510      	push	{r4, lr}
    switch( region )
 800ae1a:	2800      	cmp	r0, #0
 800ae1c:	d102      	bne.n	800ae24 <RegionSetBandTxDone+0xc>
    {
        AS923_SET_BAND_TX_DONE( );
 800ae1e:	0008      	movs	r0, r1
 800ae20:	f000 f96c 	bl	800b0fc <RegionAS923SetBandTxDone>
        default:
        {
            return;
        }
    }
}
 800ae24:	bd10      	pop	{r4, pc}

0800ae26 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 800ae26:	b510      	push	{r4, lr}
    switch( region )
 800ae28:	2800      	cmp	r0, #0
 800ae2a:	d102      	bne.n	800ae32 <RegionInitDefaults+0xc>
    {
        AS923_INIT_DEFAULTS( );
 800ae2c:	0008      	movs	r0, r1
 800ae2e:	f000 f977 	bl	800b120 <RegionAS923InitDefaults>
        default:
        {
            break;
        }
    }
}
 800ae32:	bd10      	pop	{r4, pc}

0800ae34 <RegionGetNvmCtx>:

void* RegionGetNvmCtx( LoRaMacRegion_t region, GetNvmCtxParams_t* params )
{
 800ae34:	b510      	push	{r4, lr}
    switch( region )
 800ae36:	2800      	cmp	r0, #0
 800ae38:	d103      	bne.n	800ae42 <RegionGetNvmCtx+0xe>
    {
        AS923_GET_NVM_CTX( );
 800ae3a:	0008      	movs	r0, r1
 800ae3c:	f000 f9bc 	bl	800b1b8 <RegionAS923GetNvmCtx>
        default:
        {
           return 0;
        }
    }
}
 800ae40:	bd10      	pop	{r4, pc}
           return 0;
 800ae42:	2000      	movs	r0, #0
 800ae44:	e7fc      	b.n	800ae40 <RegionGetNvmCtx+0xc>

0800ae46 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800ae46:	b510      	push	{r4, lr}
 800ae48:	000b      	movs	r3, r1
    switch( region )
 800ae4a:	2800      	cmp	r0, #0
 800ae4c:	d104      	bne.n	800ae58 <RegionVerify+0x12>
    {
        AS923_VERIFY( );
 800ae4e:	0011      	movs	r1, r2
 800ae50:	0018      	movs	r0, r3
 800ae52:	f000 f9b7 	bl	800b1c4 <RegionAS923Verify>
        default:
        {
            return false;
        }
    }
}
 800ae56:	bd10      	pop	{r4, pc}
            return false;
 800ae58:	2000      	movs	r0, #0
 800ae5a:	e7fc      	b.n	800ae56 <RegionVerify+0x10>

0800ae5c <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 800ae5c:	b510      	push	{r4, lr}
    switch( region )
 800ae5e:	2800      	cmp	r0, #0
 800ae60:	d102      	bne.n	800ae68 <RegionApplyCFList+0xc>
    {
        AS923_APPLY_CF_LIST( );
 800ae62:	0008      	movs	r0, r1
 800ae64:	f000 fd48 	bl	800b8f8 <RegionAS923ApplyCFList>
        default:
        {
            break;
        }
    }
}
 800ae68:	bd10      	pop	{r4, pc}

0800ae6a <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 800ae6a:	b510      	push	{r4, lr}
    switch( region )
 800ae6c:	2800      	cmp	r0, #0
 800ae6e:	d103      	bne.n	800ae78 <RegionChanMaskSet+0xe>
    {
        AS923_CHAN_MASK_SET( );
 800ae70:	0008      	movs	r0, r1
 800ae72:	f000 f9d5 	bl	800b220 <RegionAS923ChanMaskSet>
        default:
        {
            return false;
        }
    }
}
 800ae76:	bd10      	pop	{r4, pc}
            return false;
 800ae78:	2000      	movs	r0, #0
 800ae7a:	e7fc      	b.n	800ae76 <RegionChanMaskSet+0xc>

0800ae7c <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800ae7c:	b510      	push	{r4, lr}
 800ae7e:	0004      	movs	r4, r0
 800ae80:	0008      	movs	r0, r1
 800ae82:	0011      	movs	r1, r2
 800ae84:	001a      	movs	r2, r3
    switch( region )
 800ae86:	2c00      	cmp	r4, #0
 800ae88:	d102      	bne.n	800ae90 <RegionComputeRxWindowParameters+0x14>
    {
        AS923_COMPUTE_RX_WINDOW_PARAMETERS( );
 800ae8a:	9b02      	ldr	r3, [sp, #8]
 800ae8c:	f000 f9e0 	bl	800b250 <RegionAS923ComputeRxWindowParameters>
        default:
        {
            break;
        }
    }
}
 800ae90:	bd10      	pop	{r4, pc}

0800ae92 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800ae92:	b510      	push	{r4, lr}
 800ae94:	000b      	movs	r3, r1
    switch( region )
 800ae96:	2800      	cmp	r0, #0
 800ae98:	d104      	bne.n	800aea4 <RegionRxConfig+0x12>
    {
        AS923_RX_CONFIG( );
 800ae9a:	0011      	movs	r1, r2
 800ae9c:	0018      	movs	r0, r3
 800ae9e:	f000 fa19 	bl	800b2d4 <RegionAS923RxConfig>
        default:
        {
            return false;
        }
    }
}
 800aea2:	bd10      	pop	{r4, pc}
            return false;
 800aea4:	2000      	movs	r0, #0
 800aea6:	e7fc      	b.n	800aea2 <RegionRxConfig+0x10>

0800aea8 <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800aea8:	b510      	push	{r4, lr}
 800aeaa:	0004      	movs	r4, r0
 800aeac:	0008      	movs	r0, r1
 800aeae:	0011      	movs	r1, r2
    switch( region )
 800aeb0:	2c00      	cmp	r4, #0
 800aeb2:	d103      	bne.n	800aebc <RegionTxConfig+0x14>
    {
        AS923_TX_CONFIG( );
 800aeb4:	001a      	movs	r2, r3
 800aeb6:	f000 fa81 	bl	800b3bc <RegionAS923TxConfig>
        default:
        {
            return false;
        }
    }
}
 800aeba:	bd10      	pop	{r4, pc}
            return false;
 800aebc:	2000      	movs	r0, #0
 800aebe:	e7fc      	b.n	800aeba <RegionTxConfig+0x12>

0800aec0 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800aec0:	b513      	push	{r0, r1, r4, lr}
 800aec2:	0004      	movs	r4, r0
 800aec4:	0008      	movs	r0, r1
 800aec6:	0011      	movs	r1, r2
 800aec8:	001a      	movs	r2, r3
    switch( region )
 800aeca:	2c00      	cmp	r4, #0
 800aecc:	d105      	bne.n	800aeda <RegionLinkAdrReq+0x1a>
    {
        AS923_LINK_ADR_REQ( );
 800aece:	9b05      	ldr	r3, [sp, #20]
 800aed0:	9300      	str	r3, [sp, #0]
 800aed2:	9b04      	ldr	r3, [sp, #16]
 800aed4:	f000 fafa 	bl	800b4cc <RegionAS923LinkAdrReq>
        default:
        {
            return 0;
        }
    }
}
 800aed8:	bd16      	pop	{r1, r2, r4, pc}
            return 0;
 800aeda:	2000      	movs	r0, #0
 800aedc:	e7fc      	b.n	800aed8 <RegionLinkAdrReq+0x18>

0800aede <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 800aede:	b510      	push	{r4, lr}
    switch( region )
 800aee0:	2800      	cmp	r0, #0
 800aee2:	d103      	bne.n	800aeec <RegionRxParamSetupReq+0xe>
    {
        AS923_RX_PARAM_SETUP_REQ( );
 800aee4:	0008      	movs	r0, r1
 800aee6:	f000 fb95 	bl	800b614 <RegionAS923RxParamSetupReq>
        default:
        {
            return 0;
        }
    }
}
 800aeea:	bd10      	pop	{r4, pc}
            return 0;
 800aeec:	2000      	movs	r0, #0
 800aeee:	e7fc      	b.n	800aeea <RegionRxParamSetupReq+0xc>

0800aef0 <RegionNewChannelReq>:

uint8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 800aef0:	b510      	push	{r4, lr}
    switch( region )
 800aef2:	2800      	cmp	r0, #0
 800aef4:	d103      	bne.n	800aefe <RegionNewChannelReq+0xe>
    {
        AS923_NEW_CHANNEL_REQ( );
 800aef6:	0008      	movs	r0, r1
 800aef8:	f000 fd37 	bl	800b96a <RegionAS923NewChannelReq>
        default:
        {
            return 0;
        }
    }
}
 800aefc:	bd10      	pop	{r4, pc}
            return 0;
 800aefe:	2000      	movs	r0, #0
 800af00:	e7fc      	b.n	800aefc <RegionNewChannelReq+0xc>

0800af02 <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 800af02:	b510      	push	{r4, lr}
    switch( region )
 800af04:	2800      	cmp	r0, #0
 800af06:	d103      	bne.n	800af10 <RegionTxParamSetupReq+0xe>
    {
        AS923_TX_PARAM_SETUP_REQ( );
 800af08:	0008      	movs	r0, r1
 800af0a:	f000 fba2 	bl	800b652 <RegionAS923TxParamSetupReq>
        default:
        {
            return 0;
        }
    }
}
 800af0e:	bd10      	pop	{r4, pc}
            return 0;
 800af10:	2000      	movs	r0, #0
 800af12:	e7fc      	b.n	800af0e <RegionTxParamSetupReq+0xc>

0800af14 <RegionDlChannelReq>:

uint8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 800af14:	b510      	push	{r4, lr}
    switch( region )
 800af16:	2800      	cmp	r0, #0
 800af18:	d103      	bne.n	800af22 <RegionDlChannelReq+0xe>
    {
        AS923_DL_CHANNEL_REQ( );
 800af1a:	0008      	movs	r0, r1
 800af1c:	f000 fb9c 	bl	800b658 <RegionAS923DlChannelReq>
        default:
        {
            return 0;
        }
    }
}
 800af20:	bd10      	pop	{r4, pc}
            return 0;
 800af22:	2000      	movs	r0, #0
 800af24:	e7fc      	b.n	800af20 <RegionDlChannelReq+0xc>

0800af26 <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 800af26:	b510      	push	{r4, lr}
 800af28:	000b      	movs	r3, r1
    switch( region )
 800af2a:	2800      	cmp	r0, #0
 800af2c:	d104      	bne.n	800af38 <RegionAlternateDr+0x12>
    {
        AS923_ALTERNATE_DR( );
 800af2e:	0011      	movs	r1, r2
 800af30:	0018      	movs	r0, r3
 800af32:	f000 fbad 	bl	800b690 <RegionAS923AlternateDr>
        default:
        {
            return 0;
        }
    }
}
 800af36:	bd10      	pop	{r4, pc}
            return 0;
 800af38:	2000      	movs	r0, #0
 800af3a:	e7fc      	b.n	800af36 <RegionAlternateDr+0x10>

0800af3c <RegionCalcBackOff>:

void RegionCalcBackOff( LoRaMacRegion_t region, CalcBackOffParams_t* calcBackOff )
{
 800af3c:	b510      	push	{r4, lr}
    switch( region )
 800af3e:	2800      	cmp	r0, #0
 800af40:	d102      	bne.n	800af48 <RegionCalcBackOff+0xc>
    {
        AS923_CALC_BACKOFF( );
 800af42:	0008      	movs	r0, r1
 800af44:	f000 fba6 	bl	800b694 <RegionAS923CalcBackOff>
        default:
        {
            break;
        }
    }
}
 800af48:	bd10      	pop	{r4, pc}

0800af4a <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800af4a:	b510      	push	{r4, lr}
 800af4c:	0004      	movs	r4, r0
 800af4e:	0008      	movs	r0, r1
 800af50:	0011      	movs	r1, r2
 800af52:	001a      	movs	r2, r3
    switch( region )
 800af54:	2c00      	cmp	r4, #0
 800af56:	d103      	bne.n	800af60 <RegionNextChannel+0x16>
    {
        AS923_NEXT_CHANNEL( );
 800af58:	9b02      	ldr	r3, [sp, #8]
 800af5a:	f000 fbb7 	bl	800b6cc <RegionAS923NextChannel>
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
        }
    }
}
 800af5e:	bd10      	pop	{r4, pc}
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 800af60:	2009      	movs	r0, #9
 800af62:	e7fc      	b.n	800af5e <RegionNextChannel+0x14>

0800af64 <RegionSetContinuousWave>:
        }
    }
}

void RegionSetContinuousWave( LoRaMacRegion_t region, ContinuousWaveParams_t* continuousWave )
{
 800af64:	b510      	push	{r4, lr}
    switch( region )
 800af66:	2800      	cmp	r0, #0
 800af68:	d102      	bne.n	800af70 <RegionSetContinuousWave+0xc>
    {
        AS923_SET_CONTINUOUS_WAVE( );
 800af6a:	0008      	movs	r0, r1
 800af6c:	f000 fd20 	bl	800b9b0 <RegionAS923SetContinuousWave>
        default:
        {
            break;
        }
    }
}
 800af70:	bd10      	pop	{r4, pc}

0800af72 <RegionApplyDrOffset>:

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 800af72:	b510      	push	{r4, lr}
 800af74:	0004      	movs	r4, r0
 800af76:	0008      	movs	r0, r1
 800af78:	0011      	movs	r1, r2
    switch( region )
 800af7a:	2c00      	cmp	r4, #0
 800af7c:	d103      	bne.n	800af86 <RegionApplyDrOffset+0x14>
    {
        AS923_APPLY_DR_OFFSET( );
 800af7e:	001a      	movs	r2, r3
 800af80:	f000 fd3c 	bl	800b9fc <RegionAS923ApplyDrOffset>
        default:
        {
            return dr;
        }
    }
}
 800af84:	bd10      	pop	{r4, pc}
            return dr;
 800af86:	b2d0      	uxtb	r0, r2
 800af88:	e7fc      	b.n	800af84 <RegionApplyDrOffset+0x12>
	...

0800af8c <VerifyRfFreq>:

    return txPowerResult;
}

static bool VerifyRfFreq( uint32_t freq )
{
 800af8c:	b513      	push	{r0, r1, r4, lr}
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 800af8e:	4b07      	ldr	r3, [pc, #28]	; (800afac <VerifyRfFreq+0x20>)
{
 800af90:	0004      	movs	r4, r0
    if( Radio.CheckRfFrequency( freq ) == false )
 800af92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af94:	9301      	str	r3, [sp, #4]
 800af96:	4798      	blx	r3
 800af98:	2800      	cmp	r0, #0
 800af9a:	d006      	beq.n	800afaa <VerifyRfFreq+0x1e>
    {
        return false;
    }

    if( ( freq < 915000000 ) || ( freq > 928000000 ) )
 800af9c:	2000      	movs	r0, #0
 800af9e:	4b04      	ldr	r3, [pc, #16]	; (800afb0 <VerifyRfFreq+0x24>)
 800afa0:	18e4      	adds	r4, r4, r3
 800afa2:	4b04      	ldr	r3, [pc, #16]	; (800afb4 <VerifyRfFreq+0x28>)
 800afa4:	42a3      	cmp	r3, r4
 800afa6:	4140      	adcs	r0, r0
 800afa8:	b2c0      	uxtb	r0, r0
    {
        return false;
    }
    return true;
}
 800afaa:	bd16      	pop	{r1, r2, r4, pc}
 800afac:	0800eaa4 	.word	0x0800eaa4
 800afb0:	c9763540 	.word	0xc9763540
 800afb4:	00c65d40 	.word	0x00c65d40

0800afb8 <RegionAS923GetPhyParam>:
    *delayTx = delayTransmission;
    return nbEnabledChannels;
}

PhyParam_t RegionAS923GetPhyParam( GetPhyParams_t* getPhy )
{
 800afb8:	b507      	push	{r0, r1, r2, lr}
    PhyParam_t phyParam = { 0 };
 800afba:	2200      	movs	r2, #0
{
 800afbc:	0003      	movs	r3, r0

    switch( getPhy->Attribute )
 800afbe:	7800      	ldrb	r0, [r0, #0]
    PhyParam_t phyParam = { 0 };
 800afc0:	9200      	str	r2, [sp, #0]
    switch( getPhy->Attribute )
 800afc2:	3801      	subs	r0, #1
 800afc4:	2834      	cmp	r0, #52	; 0x34
 800afc6:	d833      	bhi.n	800b030 <RegionAS923GetPhyParam+0x78>
 800afc8:	f7f5 f89e 	bl	8000108 <__gnu_thumb1_case_uqi>
 800afcc:	3232211b 	.word	0x3232211b
 800afd0:	32321e32 	.word	0x32321e32
 800afd4:	36343232 	.word	0x36343232
 800afd8:	4c324338 	.word	0x4c324338
 800afdc:	5654514e 	.word	0x5654514e
 800afe0:	65325b58 	.word	0x65325b58
 800afe4:	6b69671e 	.word	0x6b69671e
 800afe8:	716f6f6d 	.word	0x716f6f6d
 800afec:	32322375 	.word	0x32322375
 800aff0:	32323232 	.word	0x32323232
 800aff4:	32323232 	.word	0x32323232
 800aff8:	77323232 	.word	0x77323232
 800affc:	32327d79 	.word	0x32327d79
 800b000:	7d          	.byte	0x7d
 800b001:	00          	.byte	0x00
    {
        case PHY_MIN_RX_DR:
        {
            if( getPhy->DownlinkDwellTime == 0 )
 800b002:	78db      	ldrb	r3, [r3, #3]
 800b004:	2b00      	cmp	r3, #0
 800b006:	d013      	beq.n	800b030 <RegionAS923GetPhyParam+0x78>
            }
            break;
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = AS923_DEFAULT_DATARATE;
 800b008:	2302      	movs	r3, #2
            phyParam.BeaconFormat.Rfu2Size = AS923_RFU2_SIZE;
            break;
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = AS923_BEACON_CHANNEL_DR;
 800b00a:	9300      	str	r3, [sp, #0]
            break;
 800b00c:	e010      	b.n	800b030 <RegionAS923GetPhyParam+0x78>
            if( getPhy->UplinkDwellTime == 0 )
 800b00e:	789b      	ldrb	r3, [r3, #2]
 800b010:	e7f8      	b.n	800b004 <RegionAS923GetPhyParam+0x4c>
            if( getPhy->UplinkDwellTime == 0 )
 800b012:	789a      	ldrb	r2, [r3, #2]
 800b014:	785b      	ldrb	r3, [r3, #1]
 800b016:	b25b      	sxtb	r3, r3
 800b018:	2a00      	cmp	r2, #0
 800b01a:	d104      	bne.n	800b026 <RegionAS923GetPhyParam+0x6e>
    if( dr == minDr )
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d005      	beq.n	800b02c <RegionAS923GetPhyParam+0x74>
        nextLowerDr = dr - 1;
 800b020:	3b01      	subs	r3, #1
 800b022:	b2da      	uxtb	r2, r3
 800b024:	e002      	b.n	800b02c <RegionAS923GetPhyParam+0x74>
        nextLowerDr = minDr;
 800b026:	001a      	movs	r2, r3
    if( dr == minDr )
 800b028:	2b02      	cmp	r3, #2
 800b02a:	d1f9      	bne.n	800b020 <RegionAS923GetPhyParam+0x68>
                phyParam.Value = GetNextLowerTxDr( getPhy->Datarate, AS923_DWELL_LIMIT_DATARATE );
 800b02c:	b252      	sxtb	r2, r2
 800b02e:	9200      	str	r2, [sp, #0]
            break;
        }
    }

    return phyParam;
}
 800b030:	9800      	ldr	r0, [sp, #0]
 800b032:	bd0e      	pop	{r1, r2, r3, pc}
            phyParam.Value = AS923_ADR_ACK_LIMIT;
 800b034:	2340      	movs	r3, #64	; 0x40
 800b036:	e7e8      	b.n	800b00a <RegionAS923GetPhyParam+0x52>
            phyParam.Value = AS923_ADR_ACK_DELAY;
 800b038:	2320      	movs	r3, #32
 800b03a:	e7e6      	b.n	800b00a <RegionAS923GetPhyParam+0x52>
 800b03c:	2201      	movs	r2, #1
            if( getPhy->UplinkDwellTime == 0 )
 800b03e:	7899      	ldrb	r1, [r3, #2]
 800b040:	569a      	ldrsb	r2, [r3, r2]
 800b042:	4b22      	ldr	r3, [pc, #136]	; (800b0cc <RegionAS923GetPhyParam+0x114>)
 800b044:	2900      	cmp	r1, #0
 800b046:	d101      	bne.n	800b04c <RegionAS923GetPhyParam+0x94>
                phyParam.Value = MaxPayloadOfDatarateDwell0AS923[getPhy->Datarate];
 800b048:	5c9b      	ldrb	r3, [r3, r2]
 800b04a:	e7de      	b.n	800b00a <RegionAS923GetPhyParam+0x52>
                phyParam.Value = MaxPayloadOfDatarateDwell1UpAS923[getPhy->Datarate];
 800b04c:	189b      	adds	r3, r3, r2
                phyParam.Value = MaxPayloadOfDatarateDwell1UpAS923[getPhy->Datarate];
 800b04e:	7a1b      	ldrb	r3, [r3, #8]
 800b050:	e7db      	b.n	800b00a <RegionAS923GetPhyParam+0x52>
 800b052:	2201      	movs	r2, #1
            if( getPhy->UplinkDwellTime == 0 )
 800b054:	7899      	ldrb	r1, [r3, #2]
 800b056:	569a      	ldrsb	r2, [r3, r2]
 800b058:	4b1c      	ldr	r3, [pc, #112]	; (800b0cc <RegionAS923GetPhyParam+0x114>)
                phyParam.Value = MaxPayloadOfDatarateRepeaterDwell0AS923[getPhy->Datarate];
 800b05a:	189b      	adds	r3, r3, r2
            if( getPhy->UplinkDwellTime == 0 )
 800b05c:	2900      	cmp	r1, #0
 800b05e:	d1f6      	bne.n	800b04e <RegionAS923GetPhyParam+0x96>
                phyParam.Value = MaxPayloadOfDatarateRepeaterDwell0AS923[getPhy->Datarate];
 800b060:	7c1b      	ldrb	r3, [r3, #16]
 800b062:	e7d2      	b.n	800b00a <RegionAS923GetPhyParam+0x52>
            phyParam.Value = AS923_MAX_RX_WINDOW;
 800b064:	4b1a      	ldr	r3, [pc, #104]	; (800b0d0 <RegionAS923GetPhyParam+0x118>)
 800b066:	e7d0      	b.n	800b00a <RegionAS923GetPhyParam+0x52>
            phyParam.Value = AS923_RECEIVE_DELAY1;
 800b068:	23fa      	movs	r3, #250	; 0xfa
 800b06a:	009b      	lsls	r3, r3, #2
 800b06c:	e7cd      	b.n	800b00a <RegionAS923GetPhyParam+0x52>
            phyParam.Value = AS923_RECEIVE_DELAY2;
 800b06e:	23fa      	movs	r3, #250	; 0xfa
 800b070:	00db      	lsls	r3, r3, #3
 800b072:	e7ca      	b.n	800b00a <RegionAS923GetPhyParam+0x52>
            phyParam.Value = AS923_JOIN_ACCEPT_DELAY1;
 800b074:	4b17      	ldr	r3, [pc, #92]	; (800b0d4 <RegionAS923GetPhyParam+0x11c>)
 800b076:	e7c8      	b.n	800b00a <RegionAS923GetPhyParam+0x52>
            phyParam.Value = AS923_JOIN_ACCEPT_DELAY2;
 800b078:	4b17      	ldr	r3, [pc, #92]	; (800b0d8 <RegionAS923GetPhyParam+0x120>)
 800b07a:	e7c6      	b.n	800b00a <RegionAS923GetPhyParam+0x52>
            phyParam.Value = AS923_MAX_FCNT_GAP;
 800b07c:	2380      	movs	r3, #128	; 0x80
 800b07e:	01db      	lsls	r3, r3, #7
 800b080:	e7c3      	b.n	800b00a <RegionAS923GetPhyParam+0x52>
            phyParam.Value = ( AS923_ACKTIMEOUT + randr( -AS923_ACK_TIMEOUT_RND, AS923_ACK_TIMEOUT_RND ) );
 800b082:	21fa      	movs	r1, #250	; 0xfa
 800b084:	4815      	ldr	r0, [pc, #84]	; (800b0dc <RegionAS923GetPhyParam+0x124>)
 800b086:	0089      	lsls	r1, r1, #2
 800b088:	f001 fd6a 	bl	800cb60 <randr>
 800b08c:	23fa      	movs	r3, #250	; 0xfa
 800b08e:	00db      	lsls	r3, r3, #3
 800b090:	18c0      	adds	r0, r0, r3
 800b092:	9000      	str	r0, [sp, #0]
            break;
 800b094:	e7cc      	b.n	800b030 <RegionAS923GetPhyParam+0x78>
            phyParam.Value = AS923_RX_WND_2_FREQ;
 800b096:	4b12      	ldr	r3, [pc, #72]	; (800b0e0 <RegionAS923GetPhyParam+0x128>)
 800b098:	e7b7      	b.n	800b00a <RegionAS923GetPhyParam+0x52>
            phyParam.ChannelsMask = NvmCtx.ChannelsMask;
 800b09a:	4b12      	ldr	r3, [pc, #72]	; (800b0e4 <RegionAS923GetPhyParam+0x12c>)
 800b09c:	e7b5      	b.n	800b00a <RegionAS923GetPhyParam+0x52>
            phyParam.ChannelsMask = NvmCtx.ChannelsDefaultMask;
 800b09e:	4b12      	ldr	r3, [pc, #72]	; (800b0e8 <RegionAS923GetPhyParam+0x130>)
 800b0a0:	e7b3      	b.n	800b00a <RegionAS923GetPhyParam+0x52>
            phyParam.Value = AS923_MAX_NB_CHANNELS;
 800b0a2:	2310      	movs	r3, #16
 800b0a4:	e7b1      	b.n	800b00a <RegionAS923GetPhyParam+0x52>
            phyParam.Channels = NvmCtx.Channels;
 800b0a6:	4b11      	ldr	r3, [pc, #68]	; (800b0ec <RegionAS923GetPhyParam+0x134>)
 800b0a8:	e7af      	b.n	800b00a <RegionAS923GetPhyParam+0x52>
            phyParam.Value = AS923_DEFAULT_UPLINK_DWELL_TIME;
 800b0aa:	2301      	movs	r3, #1
 800b0ac:	e7ad      	b.n	800b00a <RegionAS923GetPhyParam+0x52>
            phyParam.fValue = AS923_DEFAULT_MAX_EIRP;
 800b0ae:	2383      	movs	r3, #131	; 0x83
 800b0b0:	05db      	lsls	r3, r3, #23
            phyParam.fValue = AS923_DEFAULT_ANTENNA_GAIN;
 800b0b2:	9300      	str	r3, [sp, #0]
            break;
 800b0b4:	e7bc      	b.n	800b030 <RegionAS923GetPhyParam+0x78>
            phyParam.fValue = AS923_DEFAULT_ANTENNA_GAIN;
 800b0b6:	4b0e      	ldr	r3, [pc, #56]	; (800b0f0 <RegionAS923GetPhyParam+0x138>)
 800b0b8:	e7fb      	b.n	800b0b2 <RegionAS923GetPhyParam+0xfa>
            phyParam.Value = AS923_BEACON_CHANNEL_FREQ;
 800b0ba:	4b0e      	ldr	r3, [pc, #56]	; (800b0f4 <RegionAS923GetPhyParam+0x13c>)
 800b0bc:	e7a5      	b.n	800b00a <RegionAS923GetPhyParam+0x52>
            phyParam.BeaconFormat.BeaconSize = AS923_BEACON_SIZE;
 800b0be:	466a      	mov	r2, sp
 800b0c0:	4b0d      	ldr	r3, [pc, #52]	; (800b0f8 <RegionAS923GetPhyParam+0x140>)
 800b0c2:	8013      	strh	r3, [r2, #0]
            break;
 800b0c4:	e7b4      	b.n	800b030 <RegionAS923GetPhyParam+0x78>
            phyParam.Value = AS923_BEACON_CHANNEL_DR;
 800b0c6:	2303      	movs	r3, #3
 800b0c8:	e79f      	b.n	800b00a <RegionAS923GetPhyParam+0x52>
 800b0ca:	46c0      	nop			; (mov r8, r8)
 800b0cc:	0800ef54 	.word	0x0800ef54
 800b0d0:	00000bb8 	.word	0x00000bb8
 800b0d4:	00001388 	.word	0x00001388
 800b0d8:	00001770 	.word	0x00001770
 800b0dc:	fffffc18 	.word	0xfffffc18
 800b0e0:	3706ea00 	.word	0x3706ea00
 800b0e4:	20000fe0 	.word	0x20000fe0
 800b0e8:	20000fe2 	.word	0x20000fe2
 800b0ec:	20000f10 	.word	0x20000f10
 800b0f0:	4009999a 	.word	0x4009999a
 800b0f4:	3709f740 	.word	0x3709f740
 800b0f8:	00000211 	.word	0x00000211

0800b0fc <RegionAS923SetBandTxDone>:

void RegionAS923SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 800b0fc:	0002      	movs	r2, r0
    RegionCommonSetBandTxDone( txDone->Joined, &NvmCtx.Bands[NvmCtx.Channels[txDone->Channel].Band], txDone->LastTxDoneTime );
 800b0fe:	230c      	movs	r3, #12
 800b100:	7811      	ldrb	r1, [r2, #0]
 800b102:	4806      	ldr	r0, [pc, #24]	; (800b11c <RegionAS923SetBandTxDone+0x20>)
 800b104:	434b      	muls	r3, r1
{
 800b106:	b510      	push	{r4, lr}
    RegionCommonSetBandTxDone( txDone->Joined, &NvmCtx.Bands[NvmCtx.Channels[txDone->Channel].Band], txDone->LastTxDoneTime );
 800b108:	18c3      	adds	r3, r0, r3
 800b10a:	7a59      	ldrb	r1, [r3, #9]
 800b10c:	310c      	adds	r1, #12
 800b10e:	0109      	lsls	r1, r1, #4
 800b110:	1809      	adds	r1, r1, r0
 800b112:	7850      	ldrb	r0, [r2, #1]
 800b114:	6852      	ldr	r2, [r2, #4]
 800b116:	f000 fd1f 	bl	800bb58 <RegionCommonSetBandTxDone>
}
 800b11a:	bd10      	pop	{r4, pc}
 800b11c:	20000f10 	.word	0x20000f10

0800b120 <RegionAS923InitDefaults>:

void RegionAS923InitDefaults( InitDefaultsParams_t* params )
{
 800b120:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    Band_t bands[AS923_MAX_NB_BANDS] =
 800b122:	2364      	movs	r3, #100	; 0x64
 800b124:	466a      	mov	r2, sp
 800b126:	8013      	strh	r3, [r2, #0]
 800b128:	2300      	movs	r3, #0
 800b12a:	7093      	strb	r3, [r2, #2]
 800b12c:	9301      	str	r3, [sp, #4]
 800b12e:	9302      	str	r3, [sp, #8]
 800b130:	9303      	str	r3, [sp, #12]
    {
        AS923_BAND0
    };

    switch( params->Type )
 800b132:	7903      	ldrb	r3, [r0, #4]
 800b134:	2b01      	cmp	r3, #1
 800b136:	d023      	beq.n	800b180 <RegionAS923InitDefaults+0x60>
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d002      	beq.n	800b142 <RegionAS923InitDefaults+0x22>
 800b13c:	2b02      	cmp	r3, #2
 800b13e:	d017      	beq.n	800b170 <RegionAS923InitDefaults+0x50>
        default:
        {
            break;
        }
    }
}
 800b140:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
            memcpy1( ( uint8_t* )NvmCtx.Bands, ( uint8_t* )bands, sizeof( Band_t ) * AS923_MAX_NB_BANDS );
 800b142:	4669      	mov	r1, sp
 800b144:	2210      	movs	r2, #16
 800b146:	4818      	ldr	r0, [pc, #96]	; (800b1a8 <RegionAS923InitDefaults+0x88>)
 800b148:	f001 fd15 	bl	800cb76 <memcpy1>
            NvmCtx.Channels[0] = ( ChannelParams_t ) AS923_LC1;
 800b14c:	4b17      	ldr	r3, [pc, #92]	; (800b1ac <RegionAS923InitDefaults+0x8c>)
 800b14e:	4918      	ldr	r1, [pc, #96]	; (800b1b0 <RegionAS923InitDefaults+0x90>)
 800b150:	001a      	movs	r2, r3
 800b152:	0008      	movs	r0, r1
 800b154:	3218      	adds	r2, #24
 800b156:	ca70      	ldmia	r2!, {r4, r5, r6}
 800b158:	c070      	stmia	r0!, {r4, r5, r6}
            NvmCtx.Channels[1] = ( ChannelParams_t ) AS923_LC2;
 800b15a:	3324      	adds	r3, #36	; 0x24
 800b15c:	cb34      	ldmia	r3!, {r2, r4, r5}
 800b15e:	c034      	stmia	r0!, {r2, r4, r5}
            NvmCtx.ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 );
 800b160:	2303      	movs	r3, #3
 800b162:	31d2      	adds	r1, #210	; 0xd2
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, NvmCtx.ChannelsDefaultMask, 1 );
 800b164:	2201      	movs	r2, #1
 800b166:	4813      	ldr	r0, [pc, #76]	; (800b1b4 <RegionAS923InitDefaults+0x94>)
            NvmCtx.ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 );
 800b168:	800b      	strh	r3, [r1, #0]
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, NvmCtx.ChannelsDefaultMask, 1 );
 800b16a:	f000 fce7 	bl	800bb3c <RegionCommonChanMaskCopy>
            break;
 800b16e:	e7e7      	b.n	800b140 <RegionAS923InitDefaults+0x20>
            if( params->NvmCtx != 0 )
 800b170:	6801      	ldr	r1, [r0, #0]
 800b172:	2900      	cmp	r1, #0
 800b174:	d0e4      	beq.n	800b140 <RegionAS923InitDefaults+0x20>
                memcpy1( (uint8_t*) &NvmCtx, (uint8_t*) params->NvmCtx, sizeof( NvmCtx ) );
 800b176:	22d4      	movs	r2, #212	; 0xd4
 800b178:	480d      	ldr	r0, [pc, #52]	; (800b1b0 <RegionAS923InitDefaults+0x90>)
 800b17a:	f001 fcfc 	bl	800cb76 <memcpy1>
 800b17e:	e7df      	b.n	800b140 <RegionAS923InitDefaults+0x20>
            NvmCtx.ChannelsMask[0] |= NvmCtx.ChannelsDefaultMask[0];
 800b180:	4a0b      	ldr	r2, [pc, #44]	; (800b1b0 <RegionAS923InitDefaults+0x90>)
 800b182:	0011      	movs	r1, r2
 800b184:	0010      	movs	r0, r2
 800b186:	31d0      	adds	r1, #208	; 0xd0
 800b188:	30d2      	adds	r0, #210	; 0xd2
 800b18a:	880b      	ldrh	r3, [r1, #0]
 800b18c:	8800      	ldrh	r0, [r0, #0]
 800b18e:	4303      	orrs	r3, r0
 800b190:	800b      	strh	r3, [r1, #0]
            NvmCtx.Channels[0] = ( ChannelParams_t ) AS923_LC1;
 800b192:	4b06      	ldr	r3, [pc, #24]	; (800b1ac <RegionAS923InitDefaults+0x8c>)
 800b194:	0019      	movs	r1, r3
 800b196:	3118      	adds	r1, #24
 800b198:	c931      	ldmia	r1!, {r0, r4, r5}
 800b19a:	c231      	stmia	r2!, {r0, r4, r5}
 800b19c:	0010      	movs	r0, r2
            NvmCtx.Channels[1] = ( ChannelParams_t ) AS923_LC2;
 800b19e:	3324      	adds	r3, #36	; 0x24
 800b1a0:	cb16      	ldmia	r3!, {r1, r2, r4}
 800b1a2:	c016      	stmia	r0!, {r1, r2, r4}
}
 800b1a4:	e7cc      	b.n	800b140 <RegionAS923InitDefaults+0x20>
 800b1a6:	46c0      	nop			; (mov r8, r8)
 800b1a8:	20000fd0 	.word	0x20000fd0
 800b1ac:	0800ef54 	.word	0x0800ef54
 800b1b0:	20000f10 	.word	0x20000f10
 800b1b4:	20000fe0 	.word	0x20000fe0

0800b1b8 <RegionAS923GetNvmCtx>:

void* RegionAS923GetNvmCtx( GetNvmCtxParams_t* params )
{
    params->nvmCtxSize = sizeof( RegionAS923NvmCtx_t );
 800b1b8:	23d4      	movs	r3, #212	; 0xd4
 800b1ba:	6003      	str	r3, [r0, #0]
    return &NvmCtx;
}
 800b1bc:	4800      	ldr	r0, [pc, #0]	; (800b1c0 <RegionAS923GetNvmCtx+0x8>)
 800b1be:	4770      	bx	lr
 800b1c0:	20000f10 	.word	0x20000f10

0800b1c4 <RegionAS923Verify>:

bool RegionAS923Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800b1c4:	b510      	push	{r4, lr}
 800b1c6:	0003      	movs	r3, r0
    switch( phyAttribute )
 800b1c8:	290a      	cmp	r1, #10
 800b1ca:	d827      	bhi.n	800b21c <RegionAS923Verify+0x58>
 800b1cc:	0008      	movs	r0, r1
 800b1ce:	f7f4 ff9b 	bl	8000108 <__gnu_thumb1_case_uqi>
 800b1d2:	2506      	.short	0x2506
 800b1d4:	0a252525 	.word	0x0a252525
 800b1d8:	21251b16 	.word	0x21251b16
 800b1dc:	21          	.byte	0x21
 800b1dd:	00          	.byte	0x00
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 800b1de:	6818      	ldr	r0, [r3, #0]
 800b1e0:	f7ff fed4 	bl	800af8c <VerifyRfFreq>
            return AS923_DUTY_CYCLE_ENABLED;
        }
        default:
            return false;
    }
}
 800b1e4:	bd10      	pop	{r4, pc}
 800b1e6:	2000      	movs	r0, #0
            if( verify->DatarateParams.UplinkDwellTime == 0 )
 800b1e8:	7899      	ldrb	r1, [r3, #2]
 800b1ea:	5618      	ldrsb	r0, [r3, r0]
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AS923_RX_MIN_DATARATE, AS923_RX_MAX_DATARATE );
 800b1ec:	2207      	movs	r2, #7
            if( verify->DatarateParams.DownlinkDwellTime == 0 )
 800b1ee:	2900      	cmp	r1, #0
 800b1f0:	d10e      	bne.n	800b210 <RegionAS923Verify+0x4c>
            return RegionCommonValueInRange( verify->TxPower, AS923_MAX_TX_POWER, AS923_MIN_TX_POWER );
 800b1f2:	f000 fc64 	bl	800babe <RegionCommonValueInRange>
 800b1f6:	1e43      	subs	r3, r0, #1
 800b1f8:	4198      	sbcs	r0, r3
 800b1fa:	b2c0      	uxtb	r0, r0
 800b1fc:	e7f2      	b.n	800b1e4 <RegionAS923Verify+0x20>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 800b1fe:	2000      	movs	r0, #0
 800b200:	2205      	movs	r2, #5
 800b202:	5618      	ldrsb	r0, [r3, r0]
            return RegionCommonValueInRange( verify->TxPower, AS923_MAX_TX_POWER, AS923_MIN_TX_POWER );
 800b204:	2100      	movs	r1, #0
 800b206:	e7f4      	b.n	800b1f2 <RegionAS923Verify+0x2e>
 800b208:	2000      	movs	r0, #0
            if( verify->DatarateParams.DownlinkDwellTime == 0 )
 800b20a:	7859      	ldrb	r1, [r3, #1]
 800b20c:	5618      	ldrsb	r0, [r3, r0]
 800b20e:	e7ed      	b.n	800b1ec <RegionAS923Verify+0x28>
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AS923_DWELL_LIMIT_DATARATE, AS923_RX_MAX_DATARATE );
 800b210:	2102      	movs	r1, #2
 800b212:	e7ee      	b.n	800b1f2 <RegionAS923Verify+0x2e>
            return RegionCommonValueInRange( verify->TxPower, AS923_MAX_TX_POWER, AS923_MIN_TX_POWER );
 800b214:	2000      	movs	r0, #0
 800b216:	2207      	movs	r2, #7
 800b218:	5618      	ldrsb	r0, [r3, r0]
 800b21a:	e7f3      	b.n	800b204 <RegionAS923Verify+0x40>
            return AS923_DUTY_CYCLE_ENABLED;
 800b21c:	2000      	movs	r0, #0
 800b21e:	e7e1      	b.n	800b1e4 <RegionAS923Verify+0x20>

0800b220 <RegionAS923ChanMaskSet>:
        }
    }
}

bool RegionAS923ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 800b220:	b510      	push	{r4, lr}
    switch( chanMaskSet->ChannelsMaskType )
 800b222:	7904      	ldrb	r4, [r0, #4]
 800b224:	2c00      	cmp	r4, #0
 800b226:	d003      	beq.n	800b230 <RegionAS923ChanMaskSet+0x10>
 800b228:	2c01      	cmp	r4, #1
 800b22a:	d008      	beq.n	800b23e <RegionAS923ChanMaskSet+0x1e>
        {
            RegionCommonChanMaskCopy( NvmCtx.ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, 1 );
            break;
        }
        default:
            return false;
 800b22c:	2000      	movs	r0, #0
 800b22e:	e005      	b.n	800b23c <RegionAS923ChanMaskSet+0x1c>
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, chanMaskSet->ChannelsMaskIn, 1 );
 800b230:	2201      	movs	r2, #1
 800b232:	6801      	ldr	r1, [r0, #0]
 800b234:	4804      	ldr	r0, [pc, #16]	; (800b248 <RegionAS923ChanMaskSet+0x28>)
 800b236:	f000 fc81 	bl	800bb3c <RegionCommonChanMaskCopy>
    }
    return true;
 800b23a:	2001      	movs	r0, #1
}
 800b23c:	bd10      	pop	{r4, pc}
            RegionCommonChanMaskCopy( NvmCtx.ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, 1 );
 800b23e:	6801      	ldr	r1, [r0, #0]
 800b240:	0022      	movs	r2, r4
 800b242:	4802      	ldr	r0, [pc, #8]	; (800b24c <RegionAS923ChanMaskSet+0x2c>)
 800b244:	e7f7      	b.n	800b236 <RegionAS923ChanMaskSet+0x16>
 800b246:	46c0      	nop			; (mov r8, r8)
 800b248:	20000fe0 	.word	0x20000fe0
 800b24c:	20000fe2 	.word	0x20000fe2

0800b250 <RegionAS923ComputeRxWindowParameters>:

void RegionAS923ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800b250:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b252:	b087      	sub	sp, #28
 800b254:	001c      	movs	r4, r3
 800b256:	9104      	str	r1, [sp, #16]
 800b258:	0015      	movs	r5, r2
    double tSymbol = 0.0;

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, AS923_RX_MAX_DATARATE );
 800b25a:	1c03      	adds	r3, r0, #0
 800b25c:	2807      	cmp	r0, #7
 800b25e:	dd00      	ble.n	800b262 <RegionAS923ComputeRxWindowParameters+0x12>
 800b260:	2307      	movs	r3, #7
    switch( BandwidthsAS923[drIndex] )
 800b262:	4f18      	ldr	r7, [pc, #96]	; (800b2c4 <RegionAS923ComputeRxWindowParameters+0x74>)
    rxConfigParams->Datarate = MIN( datarate, AS923_RX_MAX_DATARATE );
 800b264:	b25e      	sxtb	r6, r3
    switch( BandwidthsAS923[drIndex] )
 800b266:	46bc      	mov	ip, r7
 800b268:	4a17      	ldr	r2, [pc, #92]	; (800b2c8 <RegionAS923ComputeRxWindowParameters+0x78>)
 800b26a:	00b1      	lsls	r1, r6, #2
    rxConfigParams->Datarate = MIN( datarate, AS923_RX_MAX_DATARATE );
 800b26c:	7063      	strb	r3, [r4, #1]
    switch( BandwidthsAS923[drIndex] )
 800b26e:	1853      	adds	r3, r2, r1
 800b270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            return 1;
 800b272:	2701      	movs	r7, #1
    switch( BandwidthsAS923[drIndex] )
 800b274:	4563      	cmp	r3, ip
 800b276:	d004      	beq.n	800b282 <RegionAS923ComputeRxWindowParameters+0x32>
            return 0;
 800b278:	4f14      	ldr	r7, [pc, #80]	; (800b2cc <RegionAS923ComputeRxWindowParameters+0x7c>)
 800b27a:	19db      	adds	r3, r3, r7
 800b27c:	425f      	negs	r7, r3
 800b27e:	415f      	adcs	r7, r3
 800b280:	007f      	lsls	r7, r7, #1
    rxConfigParams->Bandwidth = GetBandwidth( rxConfigParams->Datarate );
 800b282:	70a7      	strb	r7, [r4, #2]

    if( rxConfigParams->Datarate == DR_7 )
 800b284:	2806      	cmp	r0, #6
 800b286:	dd16      	ble.n	800b2b6 <RegionAS923ComputeRxWindowParameters+0x66>
    { // FSK
        tSymbol = RegionCommonComputeSymbolTimeFsk( DataratesAS923[rxConfigParams->Datarate] );
 800b288:	2032      	movs	r0, #50	; 0x32
 800b28a:	f000 fd21 	bl	800bcd0 <RegionCommonComputeSymbolTimeFsk>
    else
    { // LoRa
        tSymbol = RegionCommonComputeSymbolTimeLoRa( DataratesAS923[rxConfigParams->Datarate], BandwidthsAS923[rxConfigParams->Datarate] );
    }

    RegionCommonComputeRxWindowParameters( tSymbol, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 800b28e:	4b10      	ldr	r3, [pc, #64]	; (800b2d0 <RegionAS923ComputeRxWindowParameters+0x80>)
        tSymbol = RegionCommonComputeSymbolTimeLoRa( DataratesAS923[rxConfigParams->Datarate], BandwidthsAS923[rxConfigParams->Datarate] );
 800b290:	0006      	movs	r6, r0
    RegionCommonComputeRxWindowParameters( tSymbol, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 800b292:	6e5b      	ldr	r3, [r3, #100]	; 0x64
        tSymbol = RegionCommonComputeSymbolTimeLoRa( DataratesAS923[rxConfigParams->Datarate], BandwidthsAS923[rxConfigParams->Datarate] );
 800b294:	000f      	movs	r7, r1
    RegionCommonComputeRxWindowParameters( tSymbol, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 800b296:	9305      	str	r3, [sp, #20]
 800b298:	4798      	blx	r3
 800b29a:	0023      	movs	r3, r4
 800b29c:	3408      	adds	r4, #8
 800b29e:	330c      	adds	r3, #12
 800b2a0:	9302      	str	r3, [sp, #8]
 800b2a2:	9000      	str	r0, [sp, #0]
 800b2a4:	9401      	str	r4, [sp, #4]
 800b2a6:	002b      	movs	r3, r5
 800b2a8:	9a04      	ldr	r2, [sp, #16]
 800b2aa:	0030      	movs	r0, r6
 800b2ac:	0039      	movs	r1, r7
 800b2ae:	f000 fd1b 	bl	800bce8 <RegionCommonComputeRxWindowParameters>
}
 800b2b2:	b007      	add	sp, #28
 800b2b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        tSymbol = RegionCommonComputeSymbolTimeLoRa( DataratesAS923[rxConfigParams->Datarate], BandwidthsAS923[rxConfigParams->Datarate] );
 800b2b6:	1851      	adds	r1, r2, r1
 800b2b8:	3250      	adds	r2, #80	; 0x50
 800b2ba:	5d90      	ldrb	r0, [r2, r6]
 800b2bc:	6b09      	ldr	r1, [r1, #48]	; 0x30
 800b2be:	f000 fced 	bl	800bc9c <RegionCommonComputeSymbolTimeLoRa>
 800b2c2:	e7e4      	b.n	800b28e <RegionAS923ComputeRxWindowParameters+0x3e>
 800b2c4:	0003d090 	.word	0x0003d090
 800b2c8:	0800ef54 	.word	0x0800ef54
 800b2cc:	fff85ee0 	.word	0xfff85ee0
 800b2d0:	0800eaa4 	.word	0x0800eaa4

0800b2d4 <RegionAS923RxConfig>:

bool RegionAS923RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800b2d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 800b2d6:	2701      	movs	r7, #1
    uint8_t maxPayload = 0;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;

    if( Radio.GetStatus( ) != RF_IDLE )
 800b2d8:	4b33      	ldr	r3, [pc, #204]	; (800b3a8 <RegionAS923RxConfig+0xd4>)
{
 800b2da:	b08d      	sub	sp, #52	; 0x34
    if( Radio.GetStatus( ) != RF_IDLE )
 800b2dc:	68db      	ldr	r3, [r3, #12]
{
 800b2de:	910b      	str	r1, [sp, #44]	; 0x2c
    int8_t dr = rxConfig->Datarate;
 800b2e0:	57c7      	ldrsb	r7, [r0, r7]
{
 800b2e2:	0005      	movs	r5, r0
    if( Radio.GetStatus( ) != RF_IDLE )
 800b2e4:	930a      	str	r3, [sp, #40]	; 0x28
    uint32_t frequency = rxConfig->Frequency;
 800b2e6:	6844      	ldr	r4, [r0, #4]
    if( Radio.GetStatus( ) != RF_IDLE )
 800b2e8:	4798      	blx	r3
    {
        return false;
 800b2ea:	2300      	movs	r3, #0
    if( Radio.GetStatus( ) != RF_IDLE )
 800b2ec:	4298      	cmp	r0, r3
 800b2ee:	d143      	bne.n	800b378 <RegionAS923RxConfig+0xa4>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 800b2f0:	7ceb      	ldrb	r3, [r5, #19]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d109      	bne.n	800b30a <RegionAS923RxConfig+0x36>
    {
        // Apply window 1 frequency
        frequency = NvmCtx.Channels[rxConfig->Channel].Frequency;
 800b2f6:	220c      	movs	r2, #12
 800b2f8:	7829      	ldrb	r1, [r5, #0]
 800b2fa:	4b2c      	ldr	r3, [pc, #176]	; (800b3ac <RegionAS923RxConfig+0xd8>)
 800b2fc:	434a      	muls	r2, r1
 800b2fe:	58d1      	ldr	r1, [r2, r3]
        // Apply the alternative RX 1 window frequency, if it is available
        if( NvmCtx.Channels[rxConfig->Channel].Rx1Frequency != 0 )
 800b300:	189b      	adds	r3, r3, r2
 800b302:	685c      	ldr	r4, [r3, #4]
 800b304:	2c00      	cmp	r4, #0
 800b306:	d100      	bne.n	800b30a <RegionAS923RxConfig+0x36>
        frequency = NvmCtx.Channels[rxConfig->Channel].Frequency;
 800b308:	000c      	movs	r4, r1
            frequency = NvmCtx.Channels[rxConfig->Channel].Rx1Frequency;
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesAS923[dr];
 800b30a:	4b29      	ldr	r3, [pc, #164]	; (800b3b0 <RegionAS923RxConfig+0xdc>)

    Radio.SetChannel( frequency );
 800b30c:	0020      	movs	r0, r4
    phyDr = DataratesAS923[dr];
 800b30e:	3350      	adds	r3, #80	; 0x50
 800b310:	57db      	ldrsb	r3, [r3, r7]
 800b312:	001e      	movs	r6, r3
    Radio.SetChannel( frequency );
 800b314:	4b24      	ldr	r3, [pc, #144]	; (800b3a8 <RegionAS923RxConfig+0xd4>)
 800b316:	695b      	ldr	r3, [r3, #20]
 800b318:	930a      	str	r3, [sp, #40]	; 0x28
 800b31a:	4798      	blx	r3
 800b31c:	4b22      	ldr	r3, [pc, #136]	; (800b3a8 <RegionAS923RxConfig+0xd4>)
 800b31e:	6a1b      	ldr	r3, [r3, #32]
 800b320:	930a      	str	r3, [sp, #40]	; 0x28
 800b322:	7cab      	ldrb	r3, [r5, #18]

    // Radio configuration
    if( dr == DR_7 )
 800b324:	2f07      	cmp	r7, #7
 800b326:	d12a      	bne.n	800b37e <RegionAS923RxConfig+0xaa>
    {
        modem = MODEM_FSK;
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 800b328:	9309      	str	r3, [sp, #36]	; 0x24
 800b32a:	2301      	movs	r3, #1
 800b32c:	9305      	str	r3, [sp, #20]
 800b32e:	68ab      	ldr	r3, [r5, #8]
 800b330:	2400      	movs	r4, #0
 800b332:	b29b      	uxth	r3, r3
 800b334:	9302      	str	r3, [sp, #8]
 800b336:	2305      	movs	r3, #5
 800b338:	22fa      	movs	r2, #250	; 0xfa
 800b33a:	9301      	str	r3, [sp, #4]
 800b33c:	4b1d      	ldr	r3, [pc, #116]	; (800b3b4 <RegionAS923RxConfig+0xe0>)
 800b33e:	0092      	lsls	r2, r2, #2
 800b340:	9300      	str	r3, [sp, #0]
 800b342:	0023      	movs	r3, r4
 800b344:	4372      	muls	r2, r6
 800b346:	491c      	ldr	r1, [pc, #112]	; (800b3b8 <RegionAS923RxConfig+0xe4>)
 800b348:	9408      	str	r4, [sp, #32]
 800b34a:	9407      	str	r4, [sp, #28]
 800b34c:	9406      	str	r4, [sp, #24]
 800b34e:	9404      	str	r4, [sp, #16]
 800b350:	9403      	str	r4, [sp, #12]
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 800b352:	0020      	movs	r0, r4
 800b354:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800b356:	47b0      	blx	r6
    }

    // Check for repeater support
    if( rxConfig->RepeaterSupport == true )
 800b358:	7c6a      	ldrb	r2, [r5, #17]
        modem = MODEM_LORA;
 800b35a:	0020      	movs	r0, r4
 800b35c:	4b14      	ldr	r3, [pc, #80]	; (800b3b0 <RegionAS923RxConfig+0xdc>)
    if( rxConfig->RepeaterSupport == true )
 800b35e:	2a00      	cmp	r2, #0
 800b360:	d020      	beq.n	800b3a4 <RegionAS923RxConfig+0xd0>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterDwell0AS923[dr];
 800b362:	19db      	adds	r3, r3, r7
 800b364:	7c19      	ldrb	r1, [r3, #16]
    else
    {
        maxPayload = MaxPayloadOfDatarateDwell0AS923[dr];
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORA_MAC_FRMPAYLOAD_OVERHEAD );
 800b366:	4b10      	ldr	r3, [pc, #64]	; (800b3a8 <RegionAS923RxConfig+0xd4>)
 800b368:	310d      	adds	r1, #13
 800b36a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b36c:	b2c9      	uxtb	r1, r1
 800b36e:	930a      	str	r3, [sp, #40]	; 0x28
 800b370:	4798      	blx	r3
    TVL1( PRINTF( "RX on freq %d Hz at DR %d\n\r", frequency, dr );)

    *datarate = (uint8_t) dr;
 800b372:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b374:	701f      	strb	r7, [r3, #0]
    return true;
 800b376:	2301      	movs	r3, #1
}
 800b378:	0018      	movs	r0, r3
 800b37a:	b00d      	add	sp, #52	; 0x34
 800b37c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 800b37e:	68aa      	ldr	r2, [r5, #8]
 800b380:	2401      	movs	r4, #1
 800b382:	b292      	uxth	r2, r2
 800b384:	9309      	str	r3, [sp, #36]	; 0x24
 800b386:	9202      	str	r2, [sp, #8]
 800b388:	2300      	movs	r3, #0
 800b38a:	2208      	movs	r2, #8
 800b38c:	9307      	str	r3, [sp, #28]
 800b38e:	9306      	str	r3, [sp, #24]
 800b390:	9305      	str	r3, [sp, #20]
 800b392:	9304      	str	r3, [sp, #16]
 800b394:	9303      	str	r3, [sp, #12]
 800b396:	9201      	str	r2, [sp, #4]
 800b398:	9300      	str	r3, [sp, #0]
 800b39a:	78a9      	ldrb	r1, [r5, #2]
 800b39c:	9408      	str	r4, [sp, #32]
 800b39e:	0023      	movs	r3, r4
 800b3a0:	0032      	movs	r2, r6
 800b3a2:	e7d6      	b.n	800b352 <RegionAS923RxConfig+0x7e>
        maxPayload = MaxPayloadOfDatarateDwell0AS923[dr];
 800b3a4:	5dd9      	ldrb	r1, [r3, r7]
 800b3a6:	e7de      	b.n	800b366 <RegionAS923RxConfig+0x92>
 800b3a8:	0800eaa4 	.word	0x0800eaa4
 800b3ac:	20000f10 	.word	0x20000f10
 800b3b0:	0800ef54 	.word	0x0800ef54
 800b3b4:	00014585 	.word	0x00014585
 800b3b8:	0000c350 	.word	0x0000c350

0800b3bc <RegionAS923TxConfig>:

bool RegionAS923TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800b3bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    RadioModems_t modem;
    int8_t phyDr = DataratesAS923[txConfig->Datarate];
 800b3be:	4b3d      	ldr	r3, [pc, #244]	; (800b4b4 <RegionAS923TxConfig+0xf8>)
{
 800b3c0:	b091      	sub	sp, #68	; 0x44
 800b3c2:	920f      	str	r2, [sp, #60]	; 0x3c
    int8_t phyDr = DataratesAS923[txConfig->Datarate];
 800b3c4:	2201      	movs	r2, #1
{
 800b3c6:	910e      	str	r1, [sp, #56]	; 0x38
    int8_t phyDr = DataratesAS923[txConfig->Datarate];
 800b3c8:	0019      	movs	r1, r3
 800b3ca:	5682      	ldrsb	r2, [r0, r2]
 800b3cc:	3150      	adds	r1, #80	; 0x50
{
 800b3ce:	0005      	movs	r5, r0
    int8_t phyDr = DataratesAS923[txConfig->Datarate];
 800b3d0:	5689      	ldrsb	r1, [r1, r2]
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, NvmCtx.Bands[NvmCtx.Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, NvmCtx.ChannelsMask );
 800b3d2:	782c      	ldrb	r4, [r5, #0]
    int8_t phyDr = DataratesAS923[txConfig->Datarate];
 800b3d4:	910a      	str	r1, [sp, #40]	; 0x28
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, NvmCtx.Bands[NvmCtx.Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, NvmCtx.ChannelsMask );
 800b3d6:	210c      	movs	r1, #12
 800b3d8:	4361      	muls	r1, r4
 800b3da:	4837      	ldr	r0, [pc, #220]	; (800b4b8 <RegionAS923TxConfig+0xfc>)
    txPowerResult =  MAX( txPower, maxBandTxPower );
 800b3dc:	78ac      	ldrb	r4, [r5, #2]
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, NvmCtx.Bands[NvmCtx.Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, NvmCtx.ChannelsMask );
 800b3de:	1841      	adds	r1, r0, r1
 800b3e0:	7a49      	ldrb	r1, [r1, #9]
    txPowerResult =  MAX( txPower, maxBandTxPower );
 800b3e2:	b266      	sxtb	r6, r4
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, NvmCtx.Bands[NvmCtx.Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, NvmCtx.ChannelsMask );
 800b3e4:	310c      	adds	r1, #12
 800b3e6:	0109      	lsls	r1, r1, #4
 800b3e8:	1841      	adds	r1, r0, r1
    txPowerResult =  MAX( txPower, maxBandTxPower );
 800b3ea:	7889      	ldrb	r1, [r1, #2]
 800b3ec:	1c08      	adds	r0, r1, #0
 800b3ee:	b249      	sxtb	r1, r1
 800b3f0:	42b1      	cmp	r1, r6
 800b3f2:	da00      	bge.n	800b3f6 <RegionAS923TxConfig+0x3a>
 800b3f4:	1c20      	adds	r0, r4, #0
    switch( BandwidthsAS923[drIndex] )
 800b3f6:	0092      	lsls	r2, r2, #2
 800b3f8:	189b      	adds	r3, r3, r2
 800b3fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3fc:	4a2f      	ldr	r2, [pc, #188]	; (800b4bc <RegionAS923TxConfig+0x100>)
    txPowerResult =  MAX( txPower, maxBandTxPower );
 800b3fe:	b241      	sxtb	r1, r0
 800b400:	910b      	str	r1, [sp, #44]	; 0x2c
            return 1;
 800b402:	2701      	movs	r7, #1
    switch( BandwidthsAS923[drIndex] )
 800b404:	4293      	cmp	r3, r2
 800b406:	d004      	beq.n	800b412 <RegionAS923TxConfig+0x56>
            return 0;
 800b408:	4a2d      	ldr	r2, [pc, #180]	; (800b4c0 <RegionAS923TxConfig+0x104>)
 800b40a:	189b      	adds	r3, r3, r2
 800b40c:	425f      	negs	r7, r3
 800b40e:	415f      	adcs	r7, r3
 800b410:	007f      	lsls	r7, r7, #1
    uint32_t bandwidth = GetBandwidth( txConfig->Datarate );
    int8_t phyTxPower = 0;

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 800b412:	68aa      	ldr	r2, [r5, #8]
 800b414:	6869      	ldr	r1, [r5, #4]
 800b416:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800b418:	f000 fcc0 	bl	800bd9c <RegionCommonComputeTxPower>

    // Setup the radio frequency
    Radio.SetChannel( NvmCtx.Channels[txConfig->Channel].Frequency );
 800b41c:	230c      	movs	r3, #12
 800b41e:	4c29      	ldr	r4, [pc, #164]	; (800b4c4 <RegionAS923TxConfig+0x108>)
 800b420:	782a      	ldrb	r2, [r5, #0]
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 800b422:	900d      	str	r0, [sp, #52]	; 0x34
    Radio.SetChannel( NvmCtx.Channels[txConfig->Channel].Frequency );
 800b424:	4353      	muls	r3, r2
 800b426:	6962      	ldr	r2, [r4, #20]
 800b428:	920c      	str	r2, [sp, #48]	; 0x30
 800b42a:	4a23      	ldr	r2, [pc, #140]	; (800b4b8 <RegionAS923TxConfig+0xfc>)
 800b42c:	5898      	ldr	r0, [r3, r2]
 800b42e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b430:	4798      	blx	r3
 800b432:	6a63      	ldr	r3, [r4, #36]	; 0x24

    if( txConfig->Datarate == DR_7 )
 800b434:	2201      	movs	r2, #1
 800b436:	930c      	str	r3, [sp, #48]	; 0x30
 800b438:	23fa      	movs	r3, #250	; 0xfa
 800b43a:	2400      	movs	r4, #0
 800b43c:	56aa      	ldrsb	r2, [r5, r2]
 800b43e:	011b      	lsls	r3, r3, #4
    { // High Speed FSK channel
        modem = MODEM_FSK;
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 800b440:	9308      	str	r3, [sp, #32]
 800b442:	9407      	str	r4, [sp, #28]
 800b444:	9406      	str	r4, [sp, #24]
 800b446:	9405      	str	r4, [sp, #20]
    if( txConfig->Datarate == DR_7 )
 800b448:	2a07      	cmp	r2, #7
 800b44a:	d123      	bne.n	800b494 <RegionAS923TxConfig+0xd8>
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 800b44c:	2301      	movs	r3, #1
 800b44e:	9304      	str	r3, [sp, #16]
 800b450:	3304      	adds	r3, #4
 800b452:	9302      	str	r3, [sp, #8]
 800b454:	23fa      	movs	r3, #250	; 0xfa
 800b456:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b458:	009b      	lsls	r3, r3, #2
 800b45a:	4353      	muls	r3, r2
 800b45c:	9403      	str	r4, [sp, #12]
 800b45e:	9300      	str	r3, [sp, #0]
 800b460:	9401      	str	r4, [sp, #4]
 800b462:	003b      	movs	r3, r7
 800b464:	4a18      	ldr	r2, [pc, #96]	; (800b4c8 <RegionAS923TxConfig+0x10c>)
 800b466:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b468:	0020      	movs	r0, r4
 800b46a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800b46c:	47b0      	blx	r6
        modem = MODEM_LORA;
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
    }
    TVL1( PRINTF( "TX on freq %d Hz at DR %d\n\r", NvmCtx.Channels[txConfig->Channel].Frequency, txConfig->Datarate );)
    // Setup maximum payload lenght of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 800b46e:	4e15      	ldr	r6, [pc, #84]	; (800b4c4 <RegionAS923TxConfig+0x108>)
 800b470:	7b29      	ldrb	r1, [r5, #12]
 800b472:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 800b474:	0020      	movs	r0, r4
 800b476:	930a      	str	r3, [sp, #40]	; 0x28
 800b478:	4798      	blx	r3
    // Get the time-on-air of the next tx frame
    *txTimeOnAir = Radio.TimeOnAir( modem, txConfig->PktLen );
 800b47a:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800b47c:	7b29      	ldrb	r1, [r5, #12]
 800b47e:	0020      	movs	r0, r4
 800b480:	930a      	str	r3, [sp, #40]	; 0x28
 800b482:	4798      	blx	r3
 800b484:	9b0f      	ldr	r3, [sp, #60]	; 0x3c

    *txPower = txPowerLimited;
 800b486:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    *txTimeOnAir = Radio.TimeOnAir( modem, txConfig->PktLen );
 800b488:	6018      	str	r0, [r3, #0]
    return true;
}
 800b48a:	2001      	movs	r0, #1
    *txPower = txPowerLimited;
 800b48c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b48e:	701a      	strb	r2, [r3, #0]
}
 800b490:	b011      	add	sp, #68	; 0x44
 800b492:	bdf0      	pop	{r4, r5, r6, r7, pc}
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 800b494:	2308      	movs	r3, #8
 800b496:	2601      	movs	r6, #1
 800b498:	9302      	str	r3, [sp, #8]
 800b49a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b49c:	9403      	str	r4, [sp, #12]
 800b49e:	9300      	str	r3, [sp, #0]
 800b4a0:	0022      	movs	r2, r4
 800b4a2:	9604      	str	r6, [sp, #16]
 800b4a4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800b4a6:	9601      	str	r6, [sp, #4]
 800b4a8:	003b      	movs	r3, r7
 800b4aa:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b4ac:	0030      	movs	r0, r6
 800b4ae:	47a0      	blx	r4
        modem = MODEM_LORA;
 800b4b0:	0034      	movs	r4, r6
 800b4b2:	e7dc      	b.n	800b46e <RegionAS923TxConfig+0xb2>
 800b4b4:	0800ef54 	.word	0x0800ef54
 800b4b8:	20000f10 	.word	0x20000f10
 800b4bc:	0003d090 	.word	0x0003d090
 800b4c0:	fff85ee0 	.word	0xfff85ee0
 800b4c4:	0800eaa4 	.word	0x0800eaa4
 800b4c8:	000061a8 	.word	0x000061a8

0800b4cc <RegionAS923LinkAdrReq>:

uint8_t RegionAS923LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800b4cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b4ce:	0005      	movs	r5, r0
    uint8_t status = 0x07;
    RegionCommonLinkAdrParams_t linkAdrParams;
    uint8_t nextIndex = 0;
    uint8_t bytesProcessed = 0;
    uint16_t chMask = 0;
 800b4d0:	2000      	movs	r0, #0
    uint8_t status = 0x07;
 800b4d2:	2407      	movs	r4, #7
        chMask = linkAdrParams.ChMask;

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
        {
            status &= 0xFE; // Channel mask KO
 800b4d4:	2706      	movs	r7, #6
{
 800b4d6:	b095      	sub	sp, #84	; 0x54
 800b4d8:	9305      	str	r3, [sp, #20]
    uint16_t chMask = 0;
 800b4da:	ab06      	add	r3, sp, #24
{
 800b4dc:	9103      	str	r1, [sp, #12]
 800b4de:	9204      	str	r2, [sp, #16]
    uint16_t chMask = 0;
 800b4e0:	80d8      	strh	r0, [r3, #6]
    uint8_t bytesProcessed = 0;
 800b4e2:	9001      	str	r0, [sp, #4]
    while( bytesProcessed < linkAdrReq->PayloadSize )
 800b4e4:	7a2b      	ldrb	r3, [r5, #8]
 800b4e6:	9a01      	ldr	r2, [sp, #4]
 800b4e8:	4293      	cmp	r3, r2
 800b4ea:	d908      	bls.n	800b4fe <RegionAS923LinkAdrReq+0x32>
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 800b4ec:	686b      	ldr	r3, [r5, #4]
 800b4ee:	9a01      	ldr	r2, [sp, #4]
 800b4f0:	ae0a      	add	r6, sp, #40	; 0x28
 800b4f2:	1898      	adds	r0, r3, r2
 800b4f4:	0031      	movs	r1, r6
 800b4f6:	f000 fb6f 	bl	800bbd8 <RegionCommonParseLinkAdrReq>
        if( nextIndex == 0 )
 800b4fa:	2800      	cmp	r0, #0
 800b4fc:	d148      	bne.n	800b590 <RegionAS923LinkAdrReq+0xc4>
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 800b4fe:	2302      	movs	r3, #2
 800b500:	a808      	add	r0, sp, #32
 800b502:	7003      	strb	r3, [r0, #0]
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 800b504:	7a6b      	ldrb	r3, [r5, #9]
    phyParam = RegionAS923GetPhyParam( &getPhy );

    linkAdrVerifyParams.Status = status;
 800b506:	ae0c      	add	r6, sp, #48	; 0x30
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 800b508:	7083      	strb	r3, [r0, #2]
    phyParam = RegionAS923GetPhyParam( &getPhy );
 800b50a:	f7ff fd55 	bl	800afb8 <RegionAS923GetPhyParam>
    linkAdrVerifyParams.Status = status;
 800b50e:	7134      	strb	r4, [r6, #4]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 800b510:	7aab      	ldrb	r3, [r5, #10]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 800b512:	ac0a      	add	r4, sp, #40	; 0x28
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 800b514:	7173      	strb	r3, [r6, #5]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 800b516:	7863      	ldrb	r3, [r4, #1]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
    linkAdrVerifyParams.NbChannels = AS923_MAX_NB_CHANNELS;
    linkAdrVerifyParams.ChannelsMask = &chMask;
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
    linkAdrVerifyParams.MaxDatarate = AS923_TX_MAX_DATARATE;
    linkAdrVerifyParams.Channels = NvmCtx.Channels;
 800b518:	4a3c      	ldr	r2, [pc, #240]	; (800b60c <RegionAS923LinkAdrReq+0x140>)
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 800b51a:	71b3      	strb	r3, [r6, #6]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 800b51c:	78a3      	ldrb	r3, [r4, #2]
    linkAdrVerifyParams.MinTxPower = AS923_MIN_TX_POWER;
    linkAdrVerifyParams.MaxTxPower = AS923_MAX_TX_POWER;
    linkAdrVerifyParams.Version = linkAdrReq->Version;

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800b51e:	a906      	add	r1, sp, #24
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 800b520:	71f3      	strb	r3, [r6, #7]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 800b522:	7823      	ldrb	r3, [r4, #0]
 800b524:	7233      	strb	r3, [r6, #8]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 800b526:	7aeb      	ldrb	r3, [r5, #11]
 800b528:	7273      	strb	r3, [r6, #9]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 800b52a:	7b2b      	ldrb	r3, [r5, #12]
 800b52c:	72b3      	strb	r3, [r6, #10]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 800b52e:	7b6b      	ldrb	r3, [r5, #13]
    linkAdrVerifyParams.Channels = NvmCtx.Channels;
 800b530:	9212      	str	r2, [sp, #72]	; 0x48
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 800b532:	72f3      	strb	r3, [r6, #11]
    linkAdrVerifyParams.NbChannels = AS923_MAX_NB_CHANNELS;
 800b534:	2310      	movs	r3, #16
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800b536:	2212      	movs	r2, #18
    linkAdrVerifyParams.NbChannels = AS923_MAX_NB_CHANNELS;
 800b538:	7333      	strb	r3, [r6, #12]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 800b53a:	ab06      	add	r3, sp, #24
 800b53c:	1d9f      	adds	r7, r3, #6
    linkAdrVerifyParams.MaxDatarate = AS923_TX_MAX_DATARATE;
 800b53e:	2307      	movs	r3, #7
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800b540:	1852      	adds	r2, r2, r1
 800b542:	2111      	movs	r1, #17
    linkAdrVerifyParams.MaxDatarate = AS923_TX_MAX_DATARATE;
 800b544:	7573      	strb	r3, [r6, #21]
    linkAdrVerifyParams.MinTxPower = AS923_MIN_TX_POWER;
 800b546:	83b3      	strh	r3, [r6, #28]
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 800b548:	682b      	ldr	r3, [r5, #0]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 800b54a:	7530      	strb	r0, [r6, #20]
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800b54c:	a806      	add	r0, sp, #24
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 800b54e:	930c      	str	r3, [sp, #48]	; 0x30
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800b550:	1809      	adds	r1, r1, r0
 800b552:	0023      	movs	r3, r4
 800b554:	0030      	movs	r0, r6
    linkAdrVerifyParams.ChannelsMask = &chMask;
 800b556:	9710      	str	r7, [sp, #64]	; 0x40
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800b558:	f000 fb59 	bl	800bc0e <RegionCommonLinkAdrReqVerifyParams>
 800b55c:	0005      	movs	r5, r0

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 800b55e:	2807      	cmp	r0, #7
 800b560:	d107      	bne.n	800b572 <RegionAS923LinkAdrReq+0xa6>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) NvmCtx.ChannelsMask, 0, sizeof( NvmCtx.ChannelsMask ) );
 800b562:	4e2b      	ldr	r6, [pc, #172]	; (800b610 <RegionAS923LinkAdrReq+0x144>)
 800b564:	2202      	movs	r2, #2
 800b566:	2100      	movs	r1, #0
 800b568:	0030      	movs	r0, r6
 800b56a:	f001 fb19 	bl	800cba0 <memset1>
        // Update the channels mask
        NvmCtx.ChannelsMask[0] = chMask;
 800b56e:	883b      	ldrh	r3, [r7, #0]
 800b570:	8033      	strh	r3, [r6, #0]
    *txPowOut = linkAdrParams.TxPower;
    *nbRepOut = linkAdrParams.NbRep;
    *nbBytesParsed = bytesProcessed;

    return status;
}
 800b572:	0028      	movs	r0, r5
    *drOut = linkAdrParams.Datarate;
 800b574:	7863      	ldrb	r3, [r4, #1]
 800b576:	9a03      	ldr	r2, [sp, #12]
 800b578:	7013      	strb	r3, [r2, #0]
    *txPowOut = linkAdrParams.TxPower;
 800b57a:	78a3      	ldrb	r3, [r4, #2]
 800b57c:	9a04      	ldr	r2, [sp, #16]
 800b57e:	7013      	strb	r3, [r2, #0]
    *nbRepOut = linkAdrParams.NbRep;
 800b580:	7823      	ldrb	r3, [r4, #0]
 800b582:	9a05      	ldr	r2, [sp, #20]
 800b584:	7013      	strb	r3, [r2, #0]
    *nbBytesParsed = bytesProcessed;
 800b586:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800b588:	9a01      	ldr	r2, [sp, #4]
 800b58a:	701a      	strb	r2, [r3, #0]
}
 800b58c:	b015      	add	sp, #84	; 0x54
 800b58e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        bytesProcessed += nextIndex;
 800b590:	9b01      	ldr	r3, [sp, #4]
 800b592:	1818      	adds	r0, r3, r0
 800b594:	b2c3      	uxtb	r3, r0
 800b596:	9301      	str	r3, [sp, #4]
        chMask = linkAdrParams.ChMask;
 800b598:	88b2      	ldrh	r2, [r6, #4]
 800b59a:	ab06      	add	r3, sp, #24
 800b59c:	80da      	strh	r2, [r3, #6]
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 800b59e:	78f1      	ldrb	r1, [r6, #3]
 800b5a0:	2900      	cmp	r1, #0
 800b5a2:	d102      	bne.n	800b5aa <RegionAS923LinkAdrReq+0xde>
            status &= 0xFE; // Channel mask KO
 800b5a4:	003c      	movs	r4, r7
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 800b5a6:	2a00      	cmp	r2, #0
 800b5a8:	d09c      	beq.n	800b4e4 <RegionAS923LinkAdrReq+0x18>
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 800b5aa:	1e4b      	subs	r3, r1, #1
            status &= 0xFE; // Channel mask KO
 800b5ac:	003c      	movs	r4, r7
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 800b5ae:	2b04      	cmp	r3, #4
 800b5b0:	d998      	bls.n	800b4e4 <RegionAS923LinkAdrReq+0x18>
 800b5b2:	2906      	cmp	r1, #6
 800b5b4:	d900      	bls.n	800b5b8 <RegionAS923LinkAdrReq+0xec>
 800b5b6:	e795      	b.n	800b4e4 <RegionAS923LinkAdrReq+0x18>
 800b5b8:	2300      	movs	r3, #0
        status = 0x07;
 800b5ba:	2407      	movs	r4, #7
 800b5bc:	9302      	str	r3, [sp, #8]
                if( linkAdrParams.ChMaskCtrl == 6 )
 800b5be:	2906      	cmp	r1, #6
 800b5c0:	d117      	bne.n	800b5f2 <RegionAS923LinkAdrReq+0x126>
                    if( NvmCtx.Channels[i].Frequency != 0 )
 800b5c2:	4e12      	ldr	r6, [pc, #72]	; (800b60c <RegionAS923LinkAdrReq+0x140>)
 800b5c4:	46b4      	mov	ip, r6
 800b5c6:	260c      	movs	r6, #12
 800b5c8:	4660      	mov	r0, ip
 800b5ca:	435e      	muls	r6, r3
 800b5cc:	5986      	ldr	r6, [r0, r6]
 800b5ce:	2e00      	cmp	r6, #0
 800b5d0:	d005      	beq.n	800b5de <RegionAS923LinkAdrReq+0x112>
                        chMask |= 1 << i;
 800b5d2:	2601      	movs	r6, #1
 800b5d4:	409e      	lsls	r6, r3
 800b5d6:	2001      	movs	r0, #1
 800b5d8:	4332      	orrs	r2, r6
 800b5da:	b292      	uxth	r2, r2
 800b5dc:	9002      	str	r0, [sp, #8]
 800b5de:	3301      	adds	r3, #1
            for( uint8_t i = 0; i < AS923_MAX_NB_CHANNELS; i++ )
 800b5e0:	2b10      	cmp	r3, #16
 800b5e2:	d1ec      	bne.n	800b5be <RegionAS923LinkAdrReq+0xf2>
 800b5e4:	9b02      	ldr	r3, [sp, #8]
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d100      	bne.n	800b5ec <RegionAS923LinkAdrReq+0x120>
 800b5ea:	e77b      	b.n	800b4e4 <RegionAS923LinkAdrReq+0x18>
 800b5ec:	ab06      	add	r3, sp, #24
 800b5ee:	80da      	strh	r2, [r3, #6]
 800b5f0:	e778      	b.n	800b4e4 <RegionAS923LinkAdrReq+0x18>
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 800b5f2:	0016      	movs	r6, r2
 800b5f4:	2001      	movs	r0, #1
 800b5f6:	411e      	asrs	r6, r3
 800b5f8:	4206      	tst	r6, r0
 800b5fa:	d0f0      	beq.n	800b5de <RegionAS923LinkAdrReq+0x112>
 800b5fc:	260c      	movs	r6, #12
 800b5fe:	435e      	muls	r6, r3
 800b600:	4802      	ldr	r0, [pc, #8]	; (800b60c <RegionAS923LinkAdrReq+0x140>)
 800b602:	5986      	ldr	r6, [r0, r6]
 800b604:	2e00      	cmp	r6, #0
 800b606:	d1ea      	bne.n	800b5de <RegionAS923LinkAdrReq+0x112>
                        status &= 0xFE; // Channel mask KO
 800b608:	003c      	movs	r4, r7
 800b60a:	e7e8      	b.n	800b5de <RegionAS923LinkAdrReq+0x112>
 800b60c:	20000f10 	.word	0x20000f10
 800b610:	20000fe0 	.word	0x20000fe0

0800b614 <RegionAS923RxParamSetupReq>:

uint8_t RegionAS923RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 800b614:	b570      	push	{r4, r5, r6, lr}
 800b616:	0005      	movs	r5, r0
    uint8_t status = 0x07;

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 800b618:	6840      	ldr	r0, [r0, #4]
 800b61a:	f7ff fcb7 	bl	800af8c <VerifyRfFreq>
    {
        status &= 0xFE; // Channel frequency KO
 800b61e:	0004      	movs	r4, r0
 800b620:	1e60      	subs	r0, r4, #1
 800b622:	4184      	sbcs	r4, r0
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, AS923_RX_MIN_DATARATE, AS923_RX_MAX_DATARATE ) == false )
 800b624:	2000      	movs	r0, #0
 800b626:	2207      	movs	r2, #7
 800b628:	5628      	ldrsb	r0, [r5, r0]
 800b62a:	2100      	movs	r1, #0
        status &= 0xFE; // Channel frequency KO
 800b62c:	3406      	adds	r4, #6
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, AS923_RX_MIN_DATARATE, AS923_RX_MAX_DATARATE ) == false )
 800b62e:	f000 fa46 	bl	800babe <RegionCommonValueInRange>
 800b632:	2800      	cmp	r0, #0
 800b634:	d101      	bne.n	800b63a <RegionAS923RxParamSetupReq+0x26>
    {
        status &= 0xFD; // Datarate KO
 800b636:	2302      	movs	r3, #2
 800b638:	439c      	bics	r4, r3
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, AS923_MIN_RX1_DR_OFFSET, AS923_MAX_RX1_DR_OFFSET ) == false )
 800b63a:	2001      	movs	r0, #1
 800b63c:	2207      	movs	r2, #7
 800b63e:	5628      	ldrsb	r0, [r5, r0]
 800b640:	2100      	movs	r1, #0
 800b642:	f000 fa3c 	bl	800babe <RegionCommonValueInRange>
 800b646:	2800      	cmp	r0, #0
 800b648:	d101      	bne.n	800b64e <RegionAS923RxParamSetupReq+0x3a>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 800b64a:	2304      	movs	r3, #4
 800b64c:	439c      	bics	r4, r3
    }

    return status;
}
 800b64e:	0020      	movs	r0, r4
 800b650:	bd70      	pop	{r4, r5, r6, pc}

0800b652 <RegionAS923TxParamSetupReq>:

int8_t RegionAS923TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
    // Accept the request
    return 0;
}
 800b652:	2000      	movs	r0, #0
 800b654:	4770      	bx	lr
	...

0800b658 <RegionAS923DlChannelReq>:

uint8_t RegionAS923DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 800b658:	b510      	push	{r4, lr}
 800b65a:	0004      	movs	r4, r0
    uint8_t status = 0x03;

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency ) == false )
 800b65c:	6840      	ldr	r0, [r0, #4]
 800b65e:	f7ff fc95 	bl	800af8c <VerifyRfFreq>
    {
        status &= 0xFE;
    }

    // Verify if an uplink frequency exists
    if( NvmCtx.Channels[dlChannelReq->ChannelId].Frequency == 0 )
 800b662:	220c      	movs	r2, #12
        status &= 0xFE;
 800b664:	1e43      	subs	r3, r0, #1
 800b666:	4198      	sbcs	r0, r3
    if( NvmCtx.Channels[dlChannelReq->ChannelId].Frequency == 0 )
 800b668:	7821      	ldrb	r1, [r4, #0]
 800b66a:	4b08      	ldr	r3, [pc, #32]	; (800b68c <RegionAS923DlChannelReq+0x34>)
 800b66c:	434a      	muls	r2, r1
 800b66e:	58d1      	ldr	r1, [r2, r3]
        status &= 0xFE;
 800b670:	3002      	adds	r0, #2
    if( NvmCtx.Channels[dlChannelReq->ChannelId].Frequency == 0 )
 800b672:	2900      	cmp	r1, #0
 800b674:	d102      	bne.n	800b67c <RegionAS923DlChannelReq+0x24>
    {
        status &= 0xFD;
 800b676:	2302      	movs	r3, #2
 800b678:	4398      	bics	r0, r3
    {
        NvmCtx.Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
    }

    return status;
}
 800b67a:	bd10      	pop	{r4, pc}
    if( status == 0x03 )
 800b67c:	2803      	cmp	r0, #3
 800b67e:	d103      	bne.n	800b688 <RegionAS923DlChannelReq+0x30>
        NvmCtx.Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 800b680:	189b      	adds	r3, r3, r2
 800b682:	6862      	ldr	r2, [r4, #4]
 800b684:	605a      	str	r2, [r3, #4]
 800b686:	e7f8      	b.n	800b67a <RegionAS923DlChannelReq+0x22>
 800b688:	2002      	movs	r0, #2
 800b68a:	e7f6      	b.n	800b67a <RegionAS923DlChannelReq+0x22>
 800b68c:	20000f10 	.word	0x20000f10

0800b690 <RegionAS923AlternateDr>:

int8_t RegionAS923AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
    // Only AS923_DWELL_LIMIT_DATARATE is supported
    return AS923_DWELL_LIMIT_DATARATE;
}
 800b690:	2002      	movs	r0, #2
 800b692:	4770      	bx	lr

0800b694 <RegionAS923CalcBackOff>:

void RegionAS923CalcBackOff( CalcBackOffParams_t* calcBackOff )
{
 800b694:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    RegionCommonCalcBackOffParams_t calcBackOffParams;

    calcBackOffParams.Channels = NvmCtx.Channels;
 800b696:	4a0b      	ldr	r2, [pc, #44]	; (800b6c4 <RegionAS923CalcBackOff+0x30>)
 800b698:	ab01      	add	r3, sp, #4
 800b69a:	9201      	str	r2, [sp, #4]
    calcBackOffParams.Bands = NvmCtx.Bands;
 800b69c:	4a0a      	ldr	r2, [pc, #40]	; (800b6c8 <RegionAS923CalcBackOff+0x34>)
 800b69e:	9202      	str	r2, [sp, #8]
    calcBackOffParams.LastTxIsJoinRequest = calcBackOff->LastTxIsJoinRequest;
 800b6a0:	7842      	ldrb	r2, [r0, #1]
 800b6a2:	721a      	strb	r2, [r3, #8]
    calcBackOffParams.Joined = calcBackOff->Joined;
 800b6a4:	7802      	ldrb	r2, [r0, #0]
 800b6a6:	725a      	strb	r2, [r3, #9]
    calcBackOffParams.DutyCycleEnabled = calcBackOff->DutyCycleEnabled;
 800b6a8:	7882      	ldrb	r2, [r0, #2]
 800b6aa:	729a      	strb	r2, [r3, #10]
    calcBackOffParams.Channel = calcBackOff->Channel;
 800b6ac:	78c2      	ldrb	r2, [r0, #3]
 800b6ae:	72da      	strb	r2, [r3, #11]
    calcBackOffParams.ElapsedTime = calcBackOff->ElapsedTime;
 800b6b0:	6842      	ldr	r2, [r0, #4]
 800b6b2:	9204      	str	r2, [sp, #16]
    calcBackOffParams.TxTimeOnAir = calcBackOff->TxTimeOnAir;
 800b6b4:	6882      	ldr	r2, [r0, #8]

    RegionCommonCalcBackOff( &calcBackOffParams );
 800b6b6:	0018      	movs	r0, r3
    calcBackOffParams.TxTimeOnAir = calcBackOff->TxTimeOnAir;
 800b6b8:	9205      	str	r2, [sp, #20]
    RegionCommonCalcBackOff( &calcBackOffParams );
 800b6ba:	f000 fb84 	bl	800bdc6 <RegionCommonCalcBackOff>
}
 800b6be:	b007      	add	sp, #28
 800b6c0:	bd00      	pop	{pc}
 800b6c2:	46c0      	nop			; (mov r8, r8)
 800b6c4:	20000f10 	.word	0x20000f10
 800b6c8:	20000fd0 	.word	0x20000fd0

0800b6cc <RegionAS923NextChannel>:

LoRaMacStatus_t RegionAS923NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800b6cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b6ce:	b08b      	sub	sp, #44	; 0x2c
 800b6d0:	9104      	str	r1, [sp, #16]
 800b6d2:	9200      	str	r2, [sp, #0]
    uint8_t channelNext = 0;
    uint8_t nbEnabledChannels = 0;
    uint8_t delayTx = 0;
    uint8_t enabledChannels[AS923_MAX_NB_CHANNELS] = { 0 };
 800b6d4:	2100      	movs	r1, #0
 800b6d6:	2210      	movs	r2, #16
{
 800b6d8:	0005      	movs	r5, r0
    uint8_t enabledChannels[AS923_MAX_NB_CHANNELS] = { 0 };
 800b6da:	a806      	add	r0, sp, #24
{
 800b6dc:	001e      	movs	r6, r3
    uint8_t enabledChannels[AS923_MAX_NB_CHANNELS] = { 0 };
 800b6de:	f002 fc52 	bl	800df86 <memset>
    TimerTime_t nextTxDelay = 0;

    if( RegionCommonCountChannels( NvmCtx.ChannelsMask, 0, 1 ) == 0 )
 800b6e2:	4c4f      	ldr	r4, [pc, #316]	; (800b820 <RegionAS923NextChannel+0x154>)
 800b6e4:	2201      	movs	r2, #1
 800b6e6:	2100      	movs	r1, #0
 800b6e8:	0020      	movs	r0, r4
 800b6ea:	f000 fa07 	bl	800bafc <RegionCommonCountChannels>
 800b6ee:	2800      	cmp	r0, #0
 800b6f0:	d103      	bne.n	800b6fa <RegionAS923NextChannel+0x2e>
    { // Reactivate default channels
        NvmCtx.ChannelsMask[0] |= LC( 1 ) + LC( 2 );
 800b6f2:	2303      	movs	r3, #3
 800b6f4:	8822      	ldrh	r2, [r4, #0]
 800b6f6:	4313      	orrs	r3, r2
 800b6f8:	8023      	strh	r3, [r4, #0]
    }

    TimerTime_t elapsed = TimerGetElapsedTime( nextChanParams->LastAggrTx );
 800b6fa:	6868      	ldr	r0, [r5, #4]
 800b6fc:	f001 f98d 	bl	800ca1a <TimerGetElapsedTime>
    if( ( nextChanParams->LastAggrTx == 0 ) || ( nextChanParams->AggrTimeOff <= elapsed ) )
 800b700:	686b      	ldr	r3, [r5, #4]
 800b702:	2b00      	cmp	r3, #0
 800b704:	d003      	beq.n	800b70e <RegionAS923NextChannel+0x42>
 800b706:	682f      	ldr	r7, [r5, #0]
 800b708:	4287      	cmp	r7, r0
 800b70a:	d900      	bls.n	800b70e <RegionAS923NextChannel+0x42>
 800b70c:	e06e      	b.n	800b7ec <RegionAS923NextChannel+0x120>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 800b70e:	2400      	movs	r4, #0
 800b710:	6034      	str	r4, [r6, #0]

        // Update bands Time OFF
        nextTxDelay = RegionCommonUpdateBandTimeOff( nextChanParams->Joined, nextChanParams->DutyCycleEnabled, NvmCtx.Bands, AS923_MAX_NB_BANDS );
 800b712:	2301      	movs	r3, #1
 800b714:	7aa9      	ldrb	r1, [r5, #10]
 800b716:	7a68      	ldrb	r0, [r5, #9]
 800b718:	4a42      	ldr	r2, [pc, #264]	; (800b824 <RegionAS923NextChannel+0x158>)
 800b71a:	f000 fa23 	bl	800bb64 <RegionCommonUpdateBandTimeOff>
 800b71e:	9001      	str	r0, [sp, #4]

        // Search how many channels are enabled
        nbEnabledChannels = CountNbOfEnabledChannels( nextChanParams->Joined, nextChanParams->Datarate,
 800b720:	7a6b      	ldrb	r3, [r5, #9]
    uint8_t delayTransmission = 0;
 800b722:	0026      	movs	r6, r4
        nbEnabledChannels = CountNbOfEnabledChannels( nextChanParams->Joined, nextChanParams->Datarate,
 800b724:	9302      	str	r3, [sp, #8]
 800b726:	2308      	movs	r3, #8
    uint8_t nbEnabledChannels = 0;
 800b728:	0027      	movs	r7, r4
        nbEnabledChannels = CountNbOfEnabledChannels( nextChanParams->Joined, nextChanParams->Datarate,
 800b72a:	56eb      	ldrsb	r3, [r5, r3]
 800b72c:	9303      	str	r3, [sp, #12]
 800b72e:	b2e3      	uxtb	r3, r4
 800b730:	9305      	str	r3, [sp, #20]
            if( ( channelsMask[k] & ( 1 << j ) ) != 0 )
 800b732:	4b3d      	ldr	r3, [pc, #244]	; (800b828 <RegionAS923NextChannel+0x15c>)
 800b734:	2101      	movs	r1, #1
 800b736:	001a      	movs	r2, r3
 800b738:	32d0      	adds	r2, #208	; 0xd0
 800b73a:	8812      	ldrh	r2, [r2, #0]
 800b73c:	4122      	asrs	r2, r4
 800b73e:	420a      	tst	r2, r1
 800b740:	d129      	bne.n	800b796 <RegionAS923NextChannel+0xca>
 800b742:	3401      	adds	r4, #1
        for( uint8_t j = 0; j < 16; j++ )
 800b744:	2c10      	cmp	r4, #16
 800b746:	d1f2      	bne.n	800b72e <RegionAS923NextChannel+0x62>
    {
        delayTx++;
        nextTxDelay = nextChanParams->AggrTimeOff - elapsed;
    }

    if( nbEnabledChannels > 0 )
 800b748:	2f00      	cmp	r7, #0
 800b74a:	d05c      	beq.n	800b806 <RegionAS923NextChannel+0x13a>
    {
        for( uint8_t  i = 0, j = randr( 0, nbEnabledChannels - 1 ); i < AS923_MAX_NB_CHANNELS; i++ )
 800b74c:	1e79      	subs	r1, r7, #1
 800b74e:	2000      	movs	r0, #0
 800b750:	f001 fa06 	bl	800cb60 <randr>
            channelNext = enabledChannels[j];
            j = ( j + 1 ) % nbEnabledChannels;

            // Perform carrier sense for AS923_CARRIER_SENSE_TIME
            // If the channel is free, we can stop the LBT mechanism
            if( Radio.IsChannelFree( MODEM_LORA, NvmCtx.Channels[channelNext].Frequency, AS923_RSSI_FREE_TH, AS923_CARRIER_SENSE_TIME ) == true )
 800b754:	4b35      	ldr	r3, [pc, #212]	; (800b82c <RegionAS923NextChannel+0x160>)
        for( uint8_t  i = 0, j = randr( 0, nbEnabledChannels - 1 ); i < AS923_MAX_NB_CHANNELS; i++ )
 800b756:	b2c5      	uxtb	r5, r0
            if( Radio.IsChannelFree( MODEM_LORA, NvmCtx.Channels[channelNext].Frequency, AS923_RSSI_FREE_TH, AS923_CARRIER_SENSE_TIME ) == true )
 800b758:	699b      	ldr	r3, [r3, #24]
 800b75a:	9302      	str	r3, [sp, #8]
            channelNext = enabledChannels[j];
 800b75c:	ab06      	add	r3, sp, #24
 800b75e:	5d5b      	ldrb	r3, [r3, r5]
            j = ( j + 1 ) % nbEnabledChannels;
 800b760:	1c68      	adds	r0, r5, #1
 800b762:	0039      	movs	r1, r7
            channelNext = enabledChannels[j];
 800b764:	9301      	str	r3, [sp, #4]
            j = ( j + 1 ) % nbEnabledChannels;
 800b766:	f7f4 fe5d 	bl	8000424 <__aeabi_idivmod>
            if( Radio.IsChannelFree( MODEM_LORA, NvmCtx.Channels[channelNext].Frequency, AS923_RSSI_FREE_TH, AS923_CARRIER_SENSE_TIME ) == true )
 800b76a:	200c      	movs	r0, #12
 800b76c:	2255      	movs	r2, #85	; 0x55
 800b76e:	9b01      	ldr	r3, [sp, #4]
            j = ( j + 1 ) % nbEnabledChannels;
 800b770:	b2cd      	uxtb	r5, r1
            if( Radio.IsChannelFree( MODEM_LORA, NvmCtx.Channels[channelNext].Frequency, AS923_RSSI_FREE_TH, AS923_CARRIER_SENSE_TIME ) == true )
 800b772:	4358      	muls	r0, r3
 800b774:	492c      	ldr	r1, [pc, #176]	; (800b828 <RegionAS923NextChannel+0x15c>)
 800b776:	2306      	movs	r3, #6
 800b778:	5841      	ldr	r1, [r0, r1]
 800b77a:	4252      	negs	r2, r2
 800b77c:	2001      	movs	r0, #1
 800b77e:	9e02      	ldr	r6, [sp, #8]
 800b780:	47b0      	blx	r6
 800b782:	2800      	cmp	r0, #0
 800b784:	d039      	beq.n	800b7fa <RegionAS923NextChannel+0x12e>
            {
                // Free channel found
                *channel = channelNext;
                *time = 0;
 800b786:	2000      	movs	r0, #0
                *channel = channelNext;
 800b788:	9b04      	ldr	r3, [sp, #16]
 800b78a:	9a01      	ldr	r2, [sp, #4]
 800b78c:	701a      	strb	r2, [r3, #0]
                *time = 0;
 800b78e:	9b00      	ldr	r3, [sp, #0]
 800b790:	6018      	str	r0, [r3, #0]
        // Datarate not supported by any channel, restore defaults
        NvmCtx.ChannelsMask[0] |= LC( 1 ) + LC( 2 );
        *time = 0;
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
    }
}
 800b792:	b00b      	add	sp, #44	; 0x2c
 800b794:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b796:	250c      	movs	r5, #12
 800b798:	4365      	muls	r5, r4
 800b79a:	18eb      	adds	r3, r5, r3
                if( channels[i + j].Frequency == 0 )
 800b79c:	681a      	ldr	r2, [r3, #0]
 800b79e:	2a00      	cmp	r2, #0
 800b7a0:	d0cf      	beq.n	800b742 <RegionAS923NextChannel+0x76>
                if( joined == false )
 800b7a2:	9a02      	ldr	r2, [sp, #8]
 800b7a4:	2a00      	cmp	r2, #0
 800b7a6:	d01b      	beq.n	800b7e0 <RegionAS923NextChannel+0x114>
                                              channels[i + j].DrRange.Fields.Max ) == false )
 800b7a8:	7a19      	ldrb	r1, [r3, #8]
                if( RegionCommonValueInRange( datarate, channels[i + j].DrRange.Fields.Min,
 800b7aa:	9803      	ldr	r0, [sp, #12]
                                              channels[i + j].DrRange.Fields.Max ) == false )
 800b7ac:	b24a      	sxtb	r2, r1
                if( RegionCommonValueInRange( datarate, channels[i + j].DrRange.Fields.Min,
 800b7ae:	0709      	lsls	r1, r1, #28
 800b7b0:	1112      	asrs	r2, r2, #4
 800b7b2:	1709      	asrs	r1, r1, #28
 800b7b4:	f000 f983 	bl	800babe <RegionCommonValueInRange>
 800b7b8:	2800      	cmp	r0, #0
 800b7ba:	d0c2      	beq.n	800b742 <RegionAS923NextChannel+0x76>
                if( bands[channels[i + j].Band].TimeOff > 0 )
 800b7bc:	4b1a      	ldr	r3, [pc, #104]	; (800b828 <RegionAS923NextChannel+0x15c>)
 800b7be:	4a19      	ldr	r2, [pc, #100]	; (800b824 <RegionAS923NextChannel+0x158>)
 800b7c0:	18ed      	adds	r5, r5, r3
 800b7c2:	7a6b      	ldrb	r3, [r5, #9]
 800b7c4:	011b      	lsls	r3, r3, #4
 800b7c6:	189b      	adds	r3, r3, r2
 800b7c8:	68db      	ldr	r3, [r3, #12]
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d105      	bne.n	800b7da <RegionAS923NextChannel+0x10e>
                enabledChannels[nbEnabledChannels++] = i + j;
 800b7ce:	1c7b      	adds	r3, r7, #1
 800b7d0:	aa06      	add	r2, sp, #24
 800b7d2:	b2e1      	uxtb	r1, r4
 800b7d4:	55d1      	strb	r1, [r2, r7]
 800b7d6:	b2df      	uxtb	r7, r3
 800b7d8:	e7b3      	b.n	800b742 <RegionAS923NextChannel+0x76>
                    delayTransmission++;
 800b7da:	3601      	adds	r6, #1
 800b7dc:	b2f6      	uxtb	r6, r6
 800b7de:	e7b0      	b.n	800b742 <RegionAS923NextChannel+0x76>
                    if( ( AS923_JOIN_CHANNELS & ( 1 << j ) ) == 0 )
 800b7e0:	2203      	movs	r2, #3
 800b7e2:	2101      	movs	r1, #1
 800b7e4:	4122      	asrs	r2, r4
 800b7e6:	420a      	tst	r2, r1
 800b7e8:	d1de      	bne.n	800b7a8 <RegionAS923NextChannel+0xdc>
 800b7ea:	e7aa      	b.n	800b742 <RegionAS923NextChannel+0x76>
        nextTxDelay = nextChanParams->AggrTimeOff - elapsed;
 800b7ec:	1a3b      	subs	r3, r7, r0
 800b7ee:	9301      	str	r3, [sp, #4]
            *time = nextTxDelay;
 800b7f0:	9b00      	ldr	r3, [sp, #0]
 800b7f2:	9a01      	ldr	r2, [sp, #4]
            return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 800b7f4:	200b      	movs	r0, #11
            *time = nextTxDelay;
 800b7f6:	601a      	str	r2, [r3, #0]
            return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 800b7f8:	e7cb      	b.n	800b792 <RegionAS923NextChannel+0xc6>
 800b7fa:	3c01      	subs	r4, #1
 800b7fc:	b2e4      	uxtb	r4, r4
        for( uint8_t  i = 0, j = randr( 0, nbEnabledChannels - 1 ); i < AS923_MAX_NB_CHANNELS; i++ )
 800b7fe:	2c00      	cmp	r4, #0
 800b800:	d1ac      	bne.n	800b75c <RegionAS923NextChannel+0x90>
        return LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND;
 800b802:	200d      	movs	r0, #13
 800b804:	e7c5      	b.n	800b792 <RegionAS923NextChannel+0xc6>
        if( delayTx > 0 )
 800b806:	2e00      	cmp	r6, #0
 800b808:	d1f2      	bne.n	800b7f0 <RegionAS923NextChannel+0x124>
        NvmCtx.ChannelsMask[0] |= LC( 1 ) + LC( 2 );
 800b80a:	2203      	movs	r2, #3
 800b80c:	4b06      	ldr	r3, [pc, #24]	; (800b828 <RegionAS923NextChannel+0x15c>)
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 800b80e:	200c      	movs	r0, #12
        NvmCtx.ChannelsMask[0] |= LC( 1 ) + LC( 2 );
 800b810:	33d0      	adds	r3, #208	; 0xd0
 800b812:	8819      	ldrh	r1, [r3, #0]
 800b814:	430a      	orrs	r2, r1
 800b816:	801a      	strh	r2, [r3, #0]
        *time = 0;
 800b818:	9b00      	ldr	r3, [sp, #0]
 800b81a:	601e      	str	r6, [r3, #0]
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 800b81c:	e7b9      	b.n	800b792 <RegionAS923NextChannel+0xc6>
 800b81e:	46c0      	nop			; (mov r8, r8)
 800b820:	20000fe0 	.word	0x20000fe0
 800b824:	20000fd0 	.word	0x20000fd0
 800b828:	20000f10 	.word	0x20000f10
 800b82c:	0800eaa4 	.word	0x0800eaa4

0800b830 <RegionAS923ChannelAdd>:

LoRaMacStatus_t RegionAS923ChannelAdd( ChannelAddParams_t* channelAdd )
{
 800b830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bool drInvalid = false;
    bool freqInvalid = false;
    uint8_t id = channelAdd->ChannelId;
 800b832:	7906      	ldrb	r6, [r0, #4]
{
 800b834:	0005      	movs	r5, r0

    if( id < AS923_NUMB_DEFAULT_CHANNELS )
 800b836:	2e01      	cmp	r6, #1
 800b838:	d801      	bhi.n	800b83e <RegionAS923ChannelAdd+0xe>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 800b83a:	2006      	movs	r0, #6

    memcpy1( ( uint8_t* ) &(NvmCtx.Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( NvmCtx.Channels[id] ) );
    NvmCtx.Channels[id].Band = 0;
    NvmCtx.ChannelsMask[0] |= ( 1 << id );
    return LORAMAC_STATUS_OK;
}
 800b83c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800b83e:	2003      	movs	r0, #3
    if( id >= AS923_MAX_NB_CHANNELS )
 800b840:	2e0f      	cmp	r6, #15
 800b842:	d8fb      	bhi.n	800b83c <RegionAS923ChannelAdd+0xc>
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, AS923_TX_MIN_DATARATE, AS923_TX_MAX_DATARATE ) == false )
 800b844:	682b      	ldr	r3, [r5, #0]
 800b846:	2207      	movs	r2, #7
 800b848:	7a18      	ldrb	r0, [r3, #8]
 800b84a:	2100      	movs	r1, #0
 800b84c:	0700      	lsls	r0, r0, #28
 800b84e:	1700      	asrs	r0, r0, #28
 800b850:	f000 f935 	bl	800babe <RegionCommonValueInRange>
 800b854:	0007      	movs	r7, r0
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, AS923_TX_MIN_DATARATE, AS923_TX_MAX_DATARATE ) == false )
 800b856:	2008      	movs	r0, #8
 800b858:	682b      	ldr	r3, [r5, #0]
 800b85a:	2207      	movs	r2, #7
 800b85c:	5618      	ldrsb	r0, [r3, r0]
 800b85e:	2100      	movs	r1, #0
 800b860:	1100      	asrs	r0, r0, #4
 800b862:	f000 f92c 	bl	800babe <RegionCommonValueInRange>
        drInvalid = true;
 800b866:	2401      	movs	r4, #1
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, AS923_TX_MIN_DATARATE, AS923_TX_MAX_DATARATE ) == false )
 800b868:	2800      	cmp	r0, #0
 800b86a:	d002      	beq.n	800b872 <RegionAS923ChannelAdd+0x42>
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, AS923_TX_MIN_DATARATE, AS923_TX_MAX_DATARATE ) == false )
 800b86c:	427c      	negs	r4, r7
 800b86e:	417c      	adcs	r4, r7
 800b870:	b2e4      	uxtb	r4, r4
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 800b872:	6829      	ldr	r1, [r5, #0]
 800b874:	7a0b      	ldrb	r3, [r1, #8]
 800b876:	071a      	lsls	r2, r3, #28
 800b878:	b25b      	sxtb	r3, r3
 800b87a:	1712      	asrs	r2, r2, #28
 800b87c:	111b      	asrs	r3, r3, #4
 800b87e:	429a      	cmp	r2, r3
 800b880:	dd00      	ble.n	800b884 <RegionAS923ChannelAdd+0x54>
        drInvalid = true;
 800b882:	2401      	movs	r4, #1
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency ) == false )
 800b884:	6808      	ldr	r0, [r1, #0]
 800b886:	f7ff fb81 	bl	800af8c <VerifyRfFreq>
 800b88a:	2800      	cmp	r0, #0
 800b88c:	d103      	bne.n	800b896 <RegionAS923ChannelAdd+0x66>
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 800b88e:	2004      	movs	r0, #4
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 800b890:	2c00      	cmp	r4, #0
 800b892:	d0d3      	beq.n	800b83c <RegionAS923ChannelAdd+0xc>
 800b894:	e7d1      	b.n	800b83a <RegionAS923ChannelAdd+0xa>
        return LORAMAC_STATUS_DATARATE_INVALID;
 800b896:	2005      	movs	r0, #5
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 800b898:	2c00      	cmp	r4, #0
 800b89a:	d1cf      	bne.n	800b83c <RegionAS923ChannelAdd+0xc>
    memcpy1( ( uint8_t* ) &(NvmCtx.Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( NvmCtx.Channels[id] ) );
 800b89c:	220c      	movs	r2, #12
 800b89e:	0017      	movs	r7, r2
 800b8a0:	4377      	muls	r7, r6
 800b8a2:	4b08      	ldr	r3, [pc, #32]	; (800b8c4 <RegionAS923ChannelAdd+0x94>)
 800b8a4:	6829      	ldr	r1, [r5, #0]
 800b8a6:	18ff      	adds	r7, r7, r3
 800b8a8:	0038      	movs	r0, r7
 800b8aa:	f001 f964 	bl	800cb76 <memcpy1>
    NvmCtx.ChannelsMask[0] |= ( 1 << id );
 800b8ae:	2101      	movs	r1, #1
 800b8b0:	40b1      	lsls	r1, r6
 800b8b2:	4b04      	ldr	r3, [pc, #16]	; (800b8c4 <RegionAS923ChannelAdd+0x94>)
    NvmCtx.Channels[id].Band = 0;
 800b8b4:	727c      	strb	r4, [r7, #9]
    NvmCtx.ChannelsMask[0] |= ( 1 << id );
 800b8b6:	33d0      	adds	r3, #208	; 0xd0
 800b8b8:	881a      	ldrh	r2, [r3, #0]
    return LORAMAC_STATUS_OK;
 800b8ba:	0020      	movs	r0, r4
    NvmCtx.ChannelsMask[0] |= ( 1 << id );
 800b8bc:	430a      	orrs	r2, r1
 800b8be:	801a      	strh	r2, [r3, #0]
    return LORAMAC_STATUS_OK;
 800b8c0:	e7bc      	b.n	800b83c <RegionAS923ChannelAdd+0xc>
 800b8c2:	46c0      	nop			; (mov r8, r8)
 800b8c4:	20000f10 	.word	0x20000f10

0800b8c8 <RegionAS923ChannelsRemove>:

bool RegionAS923ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 800b8c8:	b510      	push	{r4, lr}
    uint8_t id = channelRemove->ChannelId;
 800b8ca:	7804      	ldrb	r4, [r0, #0]

    if( id < AS923_NUMB_DEFAULT_CHANNELS )
    {
        return false;
 800b8cc:	2100      	movs	r1, #0
    if( id < AS923_NUMB_DEFAULT_CHANNELS )
 800b8ce:	2c01      	cmp	r4, #1
 800b8d0:	d90c      	bls.n	800b8ec <RegionAS923ChannelsRemove+0x24>
    }

    // Remove the channel from the list of channels
    NvmCtx.Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 800b8d2:	220c      	movs	r2, #12
 800b8d4:	0013      	movs	r3, r2
 800b8d6:	4363      	muls	r3, r4
 800b8d8:	4805      	ldr	r0, [pc, #20]	; (800b8f0 <RegionAS923ChannelsRemove+0x28>)
 800b8da:	18c0      	adds	r0, r0, r3
 800b8dc:	f002 fb53 	bl	800df86 <memset>

    return RegionCommonChanDisable( NvmCtx.ChannelsMask, id, AS923_MAX_NB_CHANNELS );
 800b8e0:	0021      	movs	r1, r4
 800b8e2:	2210      	movs	r2, #16
 800b8e4:	4803      	ldr	r0, [pc, #12]	; (800b8f4 <RegionAS923ChannelsRemove+0x2c>)
 800b8e6:	f000 f8f4 	bl	800bad2 <RegionCommonChanDisable>
 800b8ea:	0001      	movs	r1, r0
}
 800b8ec:	0008      	movs	r0, r1
 800b8ee:	bd10      	pop	{r4, pc}
 800b8f0:	20000f10 	.word	0x20000f10
 800b8f4:	20000fe0 	.word	0x20000fe0

0800b8f8 <RegionAS923ApplyCFList>:
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 800b8f8:	2350      	movs	r3, #80	; 0x50
{
 800b8fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b8fc:	b087      	sub	sp, #28
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 800b8fe:	ac03      	add	r4, sp, #12
 800b900:	7223      	strb	r3, [r4, #8]
    if( applyCFList->Size != 16 )
 800b902:	7903      	ldrb	r3, [r0, #4]
{
 800b904:	0007      	movs	r7, r0
    if( applyCFList->Size != 16 )
 800b906:	2b10      	cmp	r3, #16
 800b908:	d123      	bne.n	800b952 <RegionAS923ApplyCFList+0x5a>
    if( applyCFList->Payload[15] != 0 )
 800b90a:	6803      	ldr	r3, [r0, #0]
 800b90c:	7bde      	ldrb	r6, [r3, #15]
 800b90e:	2e00      	cmp	r6, #0
 800b910:	d11f      	bne.n	800b952 <RegionAS923ApplyCFList+0x5a>
    for( uint8_t i = 0, chanIdx = AS923_NUMB_DEFAULT_CHANNELS; chanIdx < AS923_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 800b912:	2502      	movs	r5, #2
        if( chanIdx < ( AS923_NUMB_CHANNELS_CF_LIST + AS923_NUMB_DEFAULT_CHANNELS ) )
 800b914:	2d06      	cmp	r5, #6
 800b916:	d81e      	bhi.n	800b956 <RegionAS923ApplyCFList+0x5e>
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 800b918:	6839      	ldr	r1, [r7, #0]
 800b91a:	5d8a      	ldrb	r2, [r1, r6]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 800b91c:	1989      	adds	r1, r1, r6
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 800b91e:	6022      	str	r2, [r4, #0]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 800b920:	784b      	ldrb	r3, [r1, #1]
 800b922:	021b      	lsls	r3, r3, #8
 800b924:	431a      	orrs	r2, r3
 800b926:	6022      	str	r2, [r4, #0]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 800b928:	788b      	ldrb	r3, [r1, #2]
 800b92a:	041b      	lsls	r3, r3, #16
 800b92c:	4313      	orrs	r3, r2
            newChannel.Frequency *= 100;
 800b92e:	2264      	movs	r2, #100	; 0x64
 800b930:	4353      	muls	r3, r2
 800b932:	6023      	str	r3, [r4, #0]
            newChannel.Rx1Frequency = 0;
 800b934:	2300      	movs	r3, #0
            newChannel.Rx1Frequency = 0;
 800b936:	6063      	str	r3, [r4, #4]
        if( newChannel.Frequency != 0 )
 800b938:	6823      	ldr	r3, [r4, #0]
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d00f      	beq.n	800b95e <RegionAS923ApplyCFList+0x66>
            channelAdd.NewChannel = &newChannel;
 800b93e:	a801      	add	r0, sp, #4
 800b940:	9401      	str	r4, [sp, #4]
            channelAdd.ChannelId = chanIdx;
 800b942:	7105      	strb	r5, [r0, #4]
            RegionAS923ChannelAdd( &channelAdd );
 800b944:	f7ff ff74 	bl	800b830 <RegionAS923ChannelAdd>
    for( uint8_t i = 0, chanIdx = AS923_NUMB_DEFAULT_CHANNELS; chanIdx < AS923_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 800b948:	3501      	adds	r5, #1
 800b94a:	b2ed      	uxtb	r5, r5
 800b94c:	3603      	adds	r6, #3
 800b94e:	2d10      	cmp	r5, #16
 800b950:	d1e0      	bne.n	800b914 <RegionAS923ApplyCFList+0x1c>
}
 800b952:	b007      	add	sp, #28
 800b954:	bdf0      	pop	{r4, r5, r6, r7, pc}
            newChannel.Frequency = 0;
 800b956:	2300      	movs	r3, #0
 800b958:	6023      	str	r3, [r4, #0]
            newChannel.DrRange.Value = 0;
 800b95a:	7223      	strb	r3, [r4, #8]
 800b95c:	e7eb      	b.n	800b936 <RegionAS923ApplyCFList+0x3e>
            channelRemove.ChannelId = chanIdx;
 800b95e:	466b      	mov	r3, sp
            RegionAS923ChannelsRemove( &channelRemove );
 800b960:	4668      	mov	r0, sp
            channelRemove.ChannelId = chanIdx;
 800b962:	701d      	strb	r5, [r3, #0]
            RegionAS923ChannelsRemove( &channelRemove );
 800b964:	f7ff ffb0 	bl	800b8c8 <RegionAS923ChannelsRemove>
 800b968:	e7ee      	b.n	800b948 <RegionAS923ApplyCFList+0x50>

0800b96a <RegionAS923NewChannelReq>:
{
 800b96a:	b513      	push	{r0, r1, r4, lr}
    if( newChannelReq->NewChannel->Frequency == 0 )
 800b96c:	6802      	ldr	r2, [r0, #0]
 800b96e:	7903      	ldrb	r3, [r0, #4]
 800b970:	6814      	ldr	r4, [r2, #0]
 800b972:	2c00      	cmp	r4, #0
 800b974:	d109      	bne.n	800b98a <RegionAS923NewChannelReq+0x20>
        channelRemove.ChannelId = newChannelReq->ChannelId;
 800b976:	466a      	mov	r2, sp
        if( RegionAS923ChannelsRemove( &channelRemove ) == false )
 800b978:	4668      	mov	r0, sp
        channelRemove.ChannelId = newChannelReq->ChannelId;
 800b97a:	7013      	strb	r3, [r2, #0]
        if( RegionAS923ChannelsRemove( &channelRemove ) == false )
 800b97c:	f7ff ffa4 	bl	800b8c8 <RegionAS923ChannelsRemove>
 800b980:	2800      	cmp	r0, #0
 800b982:	d000      	beq.n	800b986 <RegionAS923NewChannelReq+0x1c>
    uint8_t status = 0x03;
 800b984:	3403      	adds	r4, #3
}
 800b986:	0020      	movs	r0, r4
 800b988:	bd16      	pop	{r1, r2, r4, pc}
        channelAdd.NewChannel = newChannelReq->NewChannel;
 800b98a:	9200      	str	r2, [sp, #0]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 800b98c:	466a      	mov	r2, sp
        switch( RegionAS923ChannelAdd( &channelAdd ) )
 800b98e:	4668      	mov	r0, sp
        channelAdd.ChannelId = newChannelReq->ChannelId;
 800b990:	7113      	strb	r3, [r2, #4]
        switch( RegionAS923ChannelAdd( &channelAdd ) )
 800b992:	f7ff ff4d 	bl	800b830 <RegionAS923ChannelAdd>
                status &= 0xFE;
 800b996:	2402      	movs	r4, #2
        switch( RegionAS923ChannelAdd( &channelAdd ) )
 800b998:	2804      	cmp	r0, #4
 800b99a:	d0f4      	beq.n	800b986 <RegionAS923NewChannelReq+0x1c>
                status &= 0xFD;
 800b99c:	3c01      	subs	r4, #1
        switch( RegionAS923ChannelAdd( &channelAdd ) )
 800b99e:	2805      	cmp	r0, #5
 800b9a0:	d0f1      	beq.n	800b986 <RegionAS923NewChannelReq+0x1c>
                status &= 0xFC;
 800b9a2:	4242      	negs	r2, r0
 800b9a4:	4150      	adcs	r0, r2
    uint8_t status = 0x03;
 800b9a6:	3402      	adds	r4, #2
                status &= 0xFC;
 800b9a8:	4240      	negs	r0, r0
 800b9aa:	4004      	ands	r4, r0
 800b9ac:	e7eb      	b.n	800b986 <RegionAS923NewChannelReq+0x1c>
	...

0800b9b0 <RegionAS923SetContinuousWave>:

void RegionAS923SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
    int8_t txPowerLimited = LimitTxPower( continuousWave->TxPower, NvmCtx.Bands[NvmCtx.Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, NvmCtx.ChannelsMask );
    int8_t phyTxPower = 0;
    uint32_t frequency = NvmCtx.Channels[continuousWave->Channel].Frequency;
 800b9b0:	230c      	movs	r3, #12
{
 800b9b2:	b537      	push	{r0, r1, r2, r4, r5, lr}
    int8_t txPowerLimited = LimitTxPower( continuousWave->TxPower, NvmCtx.Bands[NvmCtx.Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, NvmCtx.ChannelsMask );
 800b9b4:	7801      	ldrb	r1, [r0, #0]
    uint32_t frequency = NvmCtx.Channels[continuousWave->Channel].Frequency;
 800b9b6:	4a0f      	ldr	r2, [pc, #60]	; (800b9f4 <RegionAS923SetContinuousWave+0x44>)
 800b9b8:	434b      	muls	r3, r1
 800b9ba:	589d      	ldr	r5, [r3, r2]
    int8_t txPowerLimited = LimitTxPower( continuousWave->TxPower, NvmCtx.Bands[NvmCtx.Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, NvmCtx.ChannelsMask );
 800b9bc:	18d3      	adds	r3, r2, r3
 800b9be:	7a5b      	ldrb	r3, [r3, #9]
    txPowerResult =  MAX( txPower, maxBandTxPower );
 800b9c0:	7881      	ldrb	r1, [r0, #2]
    int8_t txPowerLimited = LimitTxPower( continuousWave->TxPower, NvmCtx.Bands[NvmCtx.Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, NvmCtx.ChannelsMask );
 800b9c2:	330c      	adds	r3, #12
 800b9c4:	011b      	lsls	r3, r3, #4
 800b9c6:	18d2      	adds	r2, r2, r3
    txPowerResult =  MAX( txPower, maxBandTxPower );
 800b9c8:	7893      	ldrb	r3, [r2, #2]
{
 800b9ca:	0004      	movs	r4, r0
    txPowerResult =  MAX( txPower, maxBandTxPower );
 800b9cc:	b24a      	sxtb	r2, r1
 800b9ce:	1c18      	adds	r0, r3, #0
 800b9d0:	b25b      	sxtb	r3, r3
 800b9d2:	4293      	cmp	r3, r2
 800b9d4:	da00      	bge.n	800b9d8 <RegionAS923SetContinuousWave+0x28>
 800b9d6:	1c08      	adds	r0, r1, #0

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 800b9d8:	68a2      	ldr	r2, [r4, #8]
 800b9da:	6861      	ldr	r1, [r4, #4]
 800b9dc:	b240      	sxtb	r0, r0
 800b9de:	f000 f9dd 	bl	800bd9c <RegionCommonComputeTxPower>

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 800b9e2:	4b05      	ldr	r3, [pc, #20]	; (800b9f8 <RegionAS923SetContinuousWave+0x48>)
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 800b9e4:	0001      	movs	r1, r0
    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 800b9e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b9e8:	0028      	movs	r0, r5
 800b9ea:	89a2      	ldrh	r2, [r4, #12]
 800b9ec:	9301      	str	r3, [sp, #4]
 800b9ee:	4798      	blx	r3
}
 800b9f0:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 800b9f2:	46c0      	nop			; (mov r8, r8)
 800b9f4:	20000f10 	.word	0x20000f10
 800b9f8:	0800eaa4 	.word	0x0800eaa4

0800b9fc <RegionAS923ApplyDrOffset>:
    int8_t minDr = DR_0;

    // Update the minDR for a downlink dwell time configuration of 1
    if( downlinkDwellTime == 1 )
    {
        minDr = AS923_DWELL_LIMIT_DATARATE;
 800b9fc:	3801      	subs	r0, #1
 800b9fe:	4243      	negs	r3, r0
 800ba00:	4158      	adcs	r0, r3
    }

    // Apply offset formula
    return MIN( DR_5, MAX( minDr, dr - EffectiveRx1DrOffsetAS923[drOffset] ) );
 800ba02:	4b06      	ldr	r3, [pc, #24]	; (800ba1c <RegionAS923ApplyDrOffset+0x20>)
        minDr = AS923_DWELL_LIMIT_DATARATE;
 800ba04:	0040      	lsls	r0, r0, #1
    return MIN( DR_5, MAX( minDr, dr - EffectiveRx1DrOffsetAS923[drOffset] ) );
 800ba06:	3358      	adds	r3, #88	; 0x58
 800ba08:	569b      	ldrsb	r3, [r3, r2]
 800ba0a:	1ac9      	subs	r1, r1, r3
 800ba0c:	4281      	cmp	r1, r0
 800ba0e:	da00      	bge.n	800ba12 <RegionAS923ApplyDrOffset+0x16>
 800ba10:	0001      	movs	r1, r0
 800ba12:	2905      	cmp	r1, #5
 800ba14:	dd00      	ble.n	800ba18 <RegionAS923ApplyDrOffset+0x1c>
 800ba16:	2105      	movs	r1, #5
 800ba18:	b2c8      	uxtb	r0, r1
}
 800ba1a:	4770      	bx	lr
 800ba1c:	0800ef54 	.word	0x0800ef54

0800ba20 <RegionCommonGetJoinDc>:

uint16_t RegionCommonGetJoinDc( TimerTime_t elapsedTime )
{
    uint16_t dutyCycle = 0;

    if( elapsedTime < 3600000 )
 800ba20:	4b07      	ldr	r3, [pc, #28]	; (800ba40 <RegionCommonGetJoinDc+0x20>)
{
 800ba22:	0002      	movs	r2, r0
    {
        dutyCycle = BACKOFF_DC_1_HOUR;
 800ba24:	2064      	movs	r0, #100	; 0x64
    if( elapsedTime < 3600000 )
 800ba26:	429a      	cmp	r2, r3
 800ba28:	d908      	bls.n	800ba3c <RegionCommonGetJoinDc+0x1c>
    {
        dutyCycle = BACKOFF_DC_10_HOURS;
    }
    else
    {
        dutyCycle = BACKOFF_DC_24_HOURS;
 800ba2a:	2300      	movs	r3, #0
 800ba2c:	4905      	ldr	r1, [pc, #20]	; (800ba44 <RegionCommonGetJoinDc+0x24>)
 800ba2e:	4291      	cmp	r1, r2
 800ba30:	415b      	adcs	r3, r3
 800ba32:	4258      	negs	r0, r3
 800ba34:	4b04      	ldr	r3, [pc, #16]	; (800ba48 <RegionCommonGetJoinDc+0x28>)
 800ba36:	4018      	ands	r0, r3
 800ba38:	4b04      	ldr	r3, [pc, #16]	; (800ba4c <RegionCommonGetJoinDc+0x2c>)
 800ba3a:	18c0      	adds	r0, r0, r3
    }
    return dutyCycle;
}
 800ba3c:	4770      	bx	lr
 800ba3e:	46c0      	nop			; (mov r8, r8)
 800ba40:	0036ee7f 	.word	0x0036ee7f
 800ba44:	025c3f7f 	.word	0x025c3f7f
 800ba48:	ffffdcd8 	.word	0xffffdcd8
 800ba4c:	00002710 	.word	0x00002710

0800ba50 <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 800ba50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ba52:	2600      	movs	r6, #0
 800ba54:	9101      	str	r1, [sp, #4]
 800ba56:	ac08      	add	r4, sp, #32
 800ba58:	57a6      	ldrsb	r6, [r4, r6]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
    {
        return false;
 800ba5a:	2500      	movs	r5, #0
    return false;
}

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
    if( ( value >= min ) && ( value <= max ) )
 800ba5c:	429a      	cmp	r2, r3
 800ba5e:	db09      	blt.n	800ba74 <RegionCommonChanVerifyDr+0x24>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 800ba60:	002c      	movs	r4, r5
    if( ( value >= min ) && ( value <= max ) )
 800ba62:	42b2      	cmp	r2, r6
 800ba64:	dc06      	bgt.n	800ba74 <RegionCommonChanVerifyDr+0x24>
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 800ba66:	230f      	movs	r3, #15
 800ba68:	469c      	mov	ip, r3
 800ba6a:	0127      	lsls	r7, r4, #4
 800ba6c:	b2ff      	uxtb	r7, r7
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 800ba6e:	42b8      	cmp	r0, r7
 800ba70:	d802      	bhi.n	800ba78 <RegionCommonChanVerifyDr+0x28>
        return false;
 800ba72:	2500      	movs	r5, #0
}
 800ba74:	0028      	movs	r0, r5
 800ba76:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 800ba78:	2500      	movs	r5, #0
 800ba7a:	9901      	ldr	r1, [sp, #4]
 800ba7c:	0063      	lsls	r3, r4, #1
 800ba7e:	5a5b      	ldrh	r3, [r3, r1]
 800ba80:	9300      	str	r3, [sp, #0]
 800ba82:	9b00      	ldr	r3, [sp, #0]
 800ba84:	2601      	movs	r6, #1
 800ba86:	412b      	asrs	r3, r5
 800ba88:	4233      	tst	r3, r6
 800ba8a:	d010      	beq.n	800baae <RegionCommonChanVerifyDr+0x5e>
    if( ( value >= min ) && ( value <= max ) )
 800ba8c:	4661      	mov	r1, ip
 800ba8e:	360b      	adds	r6, #11
 800ba90:	197b      	adds	r3, r7, r5
 800ba92:	4373      	muls	r3, r6
 800ba94:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800ba96:	18f3      	adds	r3, r6, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 800ba98:	7a1b      	ldrb	r3, [r3, #8]
 800ba9a:	b25e      	sxtb	r6, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 800ba9c:	071b      	lsls	r3, r3, #28
 800ba9e:	171b      	asrs	r3, r3, #28
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 800baa0:	1136      	asrs	r6, r6, #4
    if( ( value >= min ) && ( value <= max ) )
 800baa2:	400b      	ands	r3, r1
 800baa4:	429a      	cmp	r2, r3
 800baa6:	db02      	blt.n	800baae <RegionCommonChanVerifyDr+0x5e>
 800baa8:	400e      	ands	r6, r1
 800baaa:	42b2      	cmp	r2, r6
 800baac:	dd05      	ble.n	800baba <RegionCommonChanVerifyDr+0x6a>
 800baae:	3501      	adds	r5, #1
        for( uint8_t j = 0; j < 16; j++ )
 800bab0:	2d10      	cmp	r5, #16
 800bab2:	d1e6      	bne.n	800ba82 <RegionCommonChanVerifyDr+0x32>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 800bab4:	3401      	adds	r4, #1
 800bab6:	b2e4      	uxtb	r4, r4
 800bab8:	e7d7      	b.n	800ba6a <RegionCommonChanVerifyDr+0x1a>
                    return true;
 800baba:	2501      	movs	r5, #1
 800babc:	e7da      	b.n	800ba74 <RegionCommonChanVerifyDr+0x24>

0800babe <RegionCommonValueInRange>:
    {
        return 1;
    }
    return 0;
 800babe:	2300      	movs	r3, #0
    if( ( value >= min ) && ( value <= max ) )
 800bac0:	4288      	cmp	r0, r1
 800bac2:	db04      	blt.n	800bace <RegionCommonValueInRange+0x10>
 800bac4:	0fc3      	lsrs	r3, r0, #31
 800bac6:	17d1      	asrs	r1, r2, #31
 800bac8:	4282      	cmp	r2, r0
 800baca:	414b      	adcs	r3, r1
        return 1;
 800bacc:	b2db      	uxtb	r3, r3
}
 800bace:	0018      	movs	r0, r3
 800bad0:	4770      	bx	lr

0800bad2 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 800bad2:	b530      	push	{r4, r5, lr}
    uint8_t index = id / 16;

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
    {
        return false;
 800bad4:	2300      	movs	r3, #0
    uint8_t index = id / 16;
 800bad6:	090c      	lsrs	r4, r1, #4
    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 800bad8:	0915      	lsrs	r5, r2, #4
 800bada:	42a5      	cmp	r5, r4
 800badc:	d30c      	bcc.n	800baf8 <RegionCommonChanDisable+0x26>
 800bade:	4291      	cmp	r1, r2
 800bae0:	d20a      	bcs.n	800baf8 <RegionCommonChanDisable+0x26>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 800bae2:	330f      	adds	r3, #15
 800bae4:	4019      	ands	r1, r3
 800bae6:	3b0e      	subs	r3, #14
 800bae8:	001a      	movs	r2, r3
 800baea:	408a      	lsls	r2, r1
 800baec:	0011      	movs	r1, r2
 800baee:	0064      	lsls	r4, r4, #1
 800baf0:	1900      	adds	r0, r0, r4
 800baf2:	8802      	ldrh	r2, [r0, #0]
 800baf4:	438a      	bics	r2, r1
 800baf6:	8002      	strh	r2, [r0, #0]

    return true;
}
 800baf8:	0018      	movs	r0, r3
 800bafa:	bd30      	pop	{r4, r5, pc}

0800bafc <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 800bafc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    uint8_t nbChannels = 0;

    if( channelsMask == NULL )
    {
        return 0;
 800bafe:	1e06      	subs	r6, r0, #0
{
 800bb00:	9201      	str	r2, [sp, #4]
    if( channelsMask == NULL )
 800bb02:	d005      	beq.n	800bb10 <RegionCommonCountChannels+0x14>
    uint8_t nbChannels = 0;
 800bb04:	2600      	movs	r6, #0
 800bb06:	004b      	lsls	r3, r1, #1
 800bb08:	18c3      	adds	r3, r0, r3
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 800bb0a:	9a01      	ldr	r2, [sp, #4]
 800bb0c:	4291      	cmp	r1, r2
 800bb0e:	d301      	bcc.n	800bb14 <RegionCommonCountChannels+0x18>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
    }

    return nbChannels;
}
 800bb10:	0030      	movs	r0, r6
 800bb12:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        nbChannels += CountChannels( channelsMask[i], 16 );
 800bb14:	2500      	movs	r5, #0
    uint8_t nbActiveBits = 0;
 800bb16:	002c      	movs	r4, r5
        nbChannels += CountChannels( channelsMask[i], 16 );
 800bb18:	881f      	ldrh	r7, [r3, #0]
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 800bb1a:	2001      	movs	r0, #1
 800bb1c:	40a8      	lsls	r0, r5
 800bb1e:	0002      	movs	r2, r0
 800bb20:	403a      	ands	r2, r7
 800bb22:	4290      	cmp	r0, r2
 800bb24:	d101      	bne.n	800bb2a <RegionCommonCountChannels+0x2e>
            nbActiveBits++;
 800bb26:	3401      	adds	r4, #1
 800bb28:	b2e4      	uxtb	r4, r4
 800bb2a:	3501      	adds	r5, #1
    for( uint8_t j = 0; j < nbBits; j++ )
 800bb2c:	2d10      	cmp	r5, #16
 800bb2e:	d1f4      	bne.n	800bb1a <RegionCommonCountChannels+0x1e>
        nbChannels += CountChannels( channelsMask[i], 16 );
 800bb30:	1936      	adds	r6, r6, r4
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 800bb32:	3101      	adds	r1, #1
        nbChannels += CountChannels( channelsMask[i], 16 );
 800bb34:	b2f6      	uxtb	r6, r6
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 800bb36:	b2c9      	uxtb	r1, r1
 800bb38:	3302      	adds	r3, #2
 800bb3a:	e7e6      	b.n	800bb0a <RegionCommonCountChannels+0xe>

0800bb3c <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 800bb3c:	b510      	push	{r4, lr}
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 800bb3e:	2800      	cmp	r0, #0
 800bb40:	d005      	beq.n	800bb4e <RegionCommonChanMaskCopy+0x12>
 800bb42:	2900      	cmp	r1, #0
 800bb44:	d003      	beq.n	800bb4e <RegionCommonChanMaskCopy+0x12>
 800bb46:	2300      	movs	r3, #0
 800bb48:	0052      	lsls	r2, r2, #1
    {
        for( uint8_t i = 0; i < len; i++ )
 800bb4a:	4293      	cmp	r3, r2
 800bb4c:	d100      	bne.n	800bb50 <RegionCommonChanMaskCopy+0x14>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
        }
    }
}
 800bb4e:	bd10      	pop	{r4, pc}
            channelsMaskDest[i] = channelsMaskSrc[i];
 800bb50:	5acc      	ldrh	r4, [r1, r3]
 800bb52:	52c4      	strh	r4, [r0, r3]
 800bb54:	3302      	adds	r3, #2
 800bb56:	e7f8      	b.n	800bb4a <RegionCommonChanMaskCopy+0xe>

0800bb58 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( bool joined, Band_t* band, TimerTime_t lastTxDone )
{
    if( joined == true )
    {
        band->LastTxDoneTime = lastTxDone;
 800bb58:	608a      	str	r2, [r1, #8]
    if( joined == true )
 800bb5a:	2800      	cmp	r0, #0
 800bb5c:	d000      	beq.n	800bb60 <RegionCommonSetBandTxDone+0x8>
    else
    {
        band->LastTxDoneTime = lastTxDone;
        band->LastJoinTxDoneTime = lastTxDone;
    }
}
 800bb5e:	4770      	bx	lr
        band->LastJoinTxDoneTime = lastTxDone;
 800bb60:	604a      	str	r2, [r1, #4]
}
 800bb62:	e7fc      	b.n	800bb5e <RegionCommonSetBandTxDone+0x6>

0800bb64 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, bool dutyCycle, Band_t* bands, uint8_t nbBands )
{
 800bb64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    TimerTime_t nextTxDelay = TIMERTIME_T_MAX;
 800bb66:	2501      	movs	r5, #1
{
 800bb68:	000e      	movs	r6, r1
 800bb6a:	1d14      	adds	r4, r2, #4
 800bb6c:	011b      	lsls	r3, r3, #4
 800bb6e:	191b      	adds	r3, r3, r4
 800bb70:	9001      	str	r0, [sp, #4]
 800bb72:	9300      	str	r3, [sp, #0]
    TimerTime_t nextTxDelay = TIMERTIME_T_MAX;
 800bb74:	426d      	negs	r5, r5

    // Update bands Time OFF
    for( uint8_t i = 0; i < nbBands; i++ )
 800bb76:	9b00      	ldr	r3, [sp, #0]
 800bb78:	429c      	cmp	r4, r3
 800bb7a:	d104      	bne.n	800bb86 <RegionCommonUpdateBandTimeOff+0x22>
                bands[i].TimeOff = 0;
            }
        }
    }

    return ( nextTxDelay == TIMERTIME_T_MAX ) ? 0 : nextTxDelay;
 800bb7c:	1c6b      	adds	r3, r5, #1
 800bb7e:	d100      	bne.n	800bb82 <RegionCommonUpdateBandTimeOff+0x1e>
 800bb80:	2500      	movs	r5, #0
}
 800bb82:	0028      	movs	r0, r5
 800bb84:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        if( joined == false )
 800bb86:	9b01      	ldr	r3, [sp, #4]
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d11c      	bne.n	800bbc6 <RegionCommonUpdateBandTimeOff+0x62>
            TimerTime_t elapsedJoin = TimerGetElapsedTime( bands[i].LastJoinTxDoneTime );
 800bb8c:	6820      	ldr	r0, [r4, #0]
 800bb8e:	f000 ff44 	bl	800ca1a <TimerGetElapsedTime>
 800bb92:	0007      	movs	r7, r0
            TimerTime_t elapsedTx = TimerGetElapsedTime( bands[i].LastTxDoneTime );
 800bb94:	6860      	ldr	r0, [r4, #4]
 800bb96:	f000 ff40 	bl	800ca1a <TimerGetElapsedTime>
            TimerTime_t txDoneTime =  MAX( elapsedJoin,
 800bb9a:	0033      	movs	r3, r6
 800bb9c:	1e5a      	subs	r2, r3, #1
 800bb9e:	4193      	sbcs	r3, r2
 800bba0:	425b      	negs	r3, r3
 800bba2:	4018      	ands	r0, r3
 800bba4:	42b8      	cmp	r0, r7
 800bba6:	d200      	bcs.n	800bbaa <RegionCommonUpdateBandTimeOff+0x46>
 800bba8:	0038      	movs	r0, r7
                if( bands[i].TimeOff <= elapsed )
 800bbaa:	68a3      	ldr	r3, [r4, #8]
 800bbac:	4283      	cmp	r3, r0
 800bbae:	d801      	bhi.n	800bbb4 <RegionCommonUpdateBandTimeOff+0x50>
                    bands[i].TimeOff = 0;
 800bbb0:	2300      	movs	r3, #0
 800bbb2:	60a3      	str	r3, [r4, #8]
                if( bands[i].TimeOff != 0 )
 800bbb4:	68a3      	ldr	r3, [r4, #8]
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d003      	beq.n	800bbc2 <RegionCommonUpdateBandTimeOff+0x5e>
                    nextTxDelay = MIN( bands[i].TimeOff - elapsed, nextTxDelay );
 800bbba:	1a18      	subs	r0, r3, r0
 800bbbc:	4285      	cmp	r5, r0
 800bbbe:	d900      	bls.n	800bbc2 <RegionCommonUpdateBandTimeOff+0x5e>
 800bbc0:	0005      	movs	r5, r0
 800bbc2:	3410      	adds	r4, #16
 800bbc4:	e7d7      	b.n	800bb76 <RegionCommonUpdateBandTimeOff+0x12>
            if( dutyCycle == true )
 800bbc6:	2e00      	cmp	r6, #0
 800bbc8:	d003      	beq.n	800bbd2 <RegionCommonUpdateBandTimeOff+0x6e>
                TimerTime_t elapsed = TimerGetElapsedTime( bands[i].LastTxDoneTime );
 800bbca:	6860      	ldr	r0, [r4, #4]
 800bbcc:	f000 ff25 	bl	800ca1a <TimerGetElapsedTime>
 800bbd0:	e7eb      	b.n	800bbaa <RegionCommonUpdateBandTimeOff+0x46>
                bands[i].TimeOff = 0;
 800bbd2:	60a6      	str	r6, [r4, #8]
                nextTxDelay = 0;
 800bbd4:	0035      	movs	r5, r6
 800bbd6:	e7f4      	b.n	800bbc2 <RegionCommonUpdateBandTimeOff+0x5e>

0800bbd8 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 800bbd8:	b510      	push	{r4, lr}
    uint8_t retIndex = 0;

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 800bbda:	7802      	ldrb	r2, [r0, #0]
{
 800bbdc:	0003      	movs	r3, r0
    uint8_t retIndex = 0;
 800bbde:	2000      	movs	r0, #0
    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 800bbe0:	2a03      	cmp	r2, #3
 800bbe2:	d113      	bne.n	800bc0c <RegionCommonParseLinkAdrReq+0x34>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 800bbe4:	785a      	ldrb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 800bbe6:	300f      	adds	r0, #15
 800bbe8:	0014      	movs	r4, r2
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 800bbea:	0912      	lsrs	r2, r2, #4
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 800bbec:	4004      	ands	r4, r0
 800bbee:	708c      	strb	r4, [r1, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 800bbf0:	704a      	strb	r2, [r1, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 800bbf2:	789a      	ldrb	r2, [r3, #2]
 800bbf4:	808a      	strh	r2, [r1, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 800bbf6:	78dc      	ldrb	r4, [r3, #3]
 800bbf8:	0224      	lsls	r4, r4, #8
 800bbfa:	4322      	orrs	r2, r4
 800bbfc:	808a      	strh	r2, [r1, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 800bbfe:	791b      	ldrb	r3, [r3, #4]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 800bc00:	065a      	lsls	r2, r3, #25
 800bc02:	0f52      	lsrs	r2, r2, #29
        linkAdrParams->NbRep &= 0x0F;
 800bc04:	4003      	ands	r3, r0
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 800bc06:	70ca      	strb	r2, [r1, #3]
        linkAdrParams->NbRep &= 0x0F;
 800bc08:	700b      	strb	r3, [r1, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 800bc0a:	380a      	subs	r0, #10
    }
    return retIndex;
}
 800bc0c:	bd10      	pop	{r4, pc}

0800bc0e <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 800bc0e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc10:	b087      	sub	sp, #28
 800bc12:	9305      	str	r3, [sp, #20]
    uint8_t status = verifyParams->Status;
    int8_t datarate = verifyParams->Datarate;
 800bc14:	2306      	movs	r3, #6
    int8_t txPower = verifyParams->TxPower;
 800bc16:	2707      	movs	r7, #7
{
 800bc18:	9103      	str	r1, [sp, #12]
 800bc1a:	9204      	str	r2, [sp, #16]
    int8_t datarate = verifyParams->Datarate;
 800bc1c:	56c3      	ldrsb	r3, [r0, r3]
    uint8_t status = verifyParams->Status;
 800bc1e:	7905      	ldrb	r5, [r0, #4]
    int8_t datarate = verifyParams->Datarate;
 800bc20:	9302      	str	r3, [sp, #8]
    int8_t nbRepetitions = verifyParams->NbRep;

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 800bc22:	7943      	ldrb	r3, [r0, #5]
{
 800bc24:	0004      	movs	r4, r0
    int8_t txPower = verifyParams->TxPower;
 800bc26:	57c7      	ldrsb	r7, [r0, r7]
    int8_t nbRepetitions = verifyParams->NbRep;
 800bc28:	7a06      	ldrb	r6, [r0, #8]
    if( verifyParams->AdrEnabled == false )
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d02b      	beq.n	800bc86 <RegionCommonLinkAdrReqVerifyParams+0x78>
    int8_t nbRepetitions = verifyParams->NbRep;
 800bc2e:	b276      	sxtb	r6, r6
        nbRepetitions = verifyParams->CurrentNbRep;
        datarate =  verifyParams->CurrentDatarate;
        txPower =  verifyParams->CurrentTxPower;
    }

    if( status != 0 )
 800bc30:	2d00      	cmp	r5, #0
 800bc32:	d01e      	beq.n	800bc72 <RegionCommonLinkAdrReqVerifyParams+0x64>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 800bc34:	69a2      	ldr	r2, [r4, #24]
 800bc36:	2314      	movs	r3, #20
 800bc38:	9201      	str	r2, [sp, #4]
 800bc3a:	2215      	movs	r2, #21
 800bc3c:	56a2      	ldrsb	r2, [r4, r2]
 800bc3e:	56e3      	ldrsb	r3, [r4, r3]
 800bc40:	9200      	str	r2, [sp, #0]
 800bc42:	7b20      	ldrb	r0, [r4, #12]
 800bc44:	9a02      	ldr	r2, [sp, #8]
 800bc46:	6921      	ldr	r1, [r4, #16]
 800bc48:	f7ff ff02 	bl	800ba50 <RegionCommonChanVerifyDr>
 800bc4c:	2800      	cmp	r0, #0
 800bc4e:	d101      	bne.n	800bc54 <RegionCommonLinkAdrReqVerifyParams+0x46>
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
        {
            status &= 0xFD; // Datarate KO
 800bc50:	2302      	movs	r3, #2
 800bc52:	439d      	bics	r5, r3
        }

        // Verify tx power
        if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 800bc54:	231d      	movs	r3, #29
 800bc56:	221c      	movs	r2, #28
 800bc58:	56e3      	ldrsb	r3, [r4, r3]
 800bc5a:	56a2      	ldrsb	r2, [r4, r2]
    if( ( value >= min ) && ( value <= max ) )
 800bc5c:	42bb      	cmp	r3, r7
 800bc5e:	dc1a      	bgt.n	800bc96 <RegionCommonLinkAdrReqVerifyParams+0x88>
 800bc60:	42ba      	cmp	r2, r7
 800bc62:	da01      	bge.n	800bc68 <RegionCommonLinkAdrReqVerifyParams+0x5a>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
            }
            else
            {
                status &= 0xFB; // TxPower KO
 800bc64:	2304      	movs	r3, #4
 800bc66:	439d      	bics	r5, r3
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 800bc68:	2d07      	cmp	r5, #7
 800bc6a:	d102      	bne.n	800bc72 <RegionCommonLinkAdrReqVerifyParams+0x64>
    {
        if( nbRepetitions == 0 )
 800bc6c:	2e00      	cmp	r6, #0
 800bc6e:	d100      	bne.n	800bc72 <RegionCommonLinkAdrReqVerifyParams+0x64>
        { // Restore the default value according to the LoRaWAN specification
            nbRepetitions = 1;
 800bc70:	3601      	adds	r6, #1
    *dr = datarate;
    *txPow = txPower;
    *nbRep = nbRepetitions;

    return status;
}
 800bc72:	0028      	movs	r0, r5
    *dr = datarate;
 800bc74:	9b03      	ldr	r3, [sp, #12]
 800bc76:	9a02      	ldr	r2, [sp, #8]
 800bc78:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 800bc7a:	9b04      	ldr	r3, [sp, #16]
 800bc7c:	701f      	strb	r7, [r3, #0]
    *nbRep = nbRepetitions;
 800bc7e:	9b05      	ldr	r3, [sp, #20]
 800bc80:	701e      	strb	r6, [r3, #0]
}
 800bc82:	b007      	add	sp, #28
 800bc84:	bdf0      	pop	{r4, r5, r6, r7, pc}
        datarate =  verifyParams->CurrentDatarate;
 800bc86:	2309      	movs	r3, #9
        nbRepetitions = verifyParams->CurrentNbRep;
 800bc88:	260b      	movs	r6, #11
        txPower =  verifyParams->CurrentTxPower;
 800bc8a:	270a      	movs	r7, #10
        datarate =  verifyParams->CurrentDatarate;
 800bc8c:	56c3      	ldrsb	r3, [r0, r3]
        nbRepetitions = verifyParams->CurrentNbRep;
 800bc8e:	5786      	ldrsb	r6, [r0, r6]
        datarate =  verifyParams->CurrentDatarate;
 800bc90:	9302      	str	r3, [sp, #8]
        txPower =  verifyParams->CurrentTxPower;
 800bc92:	57c7      	ldrsb	r7, [r0, r7]
 800bc94:	e7cc      	b.n	800bc30 <RegionCommonLinkAdrReqVerifyParams+0x22>
    if( ( value >= min ) && ( value <= max ) )
 800bc96:	001f      	movs	r7, r3
 800bc98:	e7e6      	b.n	800bc68 <RegionCommonLinkAdrReqVerifyParams+0x5a>
	...

0800bc9c <RegionCommonComputeSymbolTimeLoRa>:

double RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidth )
{
    return ( ( double )( 1 << phyDr ) / ( double )bandwidth ) * 1000;
 800bc9c:	2301      	movs	r3, #1
 800bc9e:	4083      	lsls	r3, r0
{
 800bca0:	b5d0      	push	{r4, r6, r7, lr}
    return ( ( double )( 1 << phyDr ) / ( double )bandwidth ) * 1000;
 800bca2:	0018      	movs	r0, r3
{
 800bca4:	000c      	movs	r4, r1
    return ( ( double )( 1 << phyDr ) / ( double )bandwidth ) * 1000;
 800bca6:	f7f6 fc1b 	bl	80024e0 <__aeabi_i2d>
 800bcaa:	0006      	movs	r6, r0
 800bcac:	0020      	movs	r0, r4
 800bcae:	000f      	movs	r7, r1
 800bcb0:	f7f6 fc50 	bl	8002554 <__aeabi_ui2d>
 800bcb4:	0002      	movs	r2, r0
 800bcb6:	000b      	movs	r3, r1
 800bcb8:	0030      	movs	r0, r6
 800bcba:	0039      	movs	r1, r7
 800bcbc:	f7f5 fa16 	bl	80010ec <__aeabi_ddiv>
 800bcc0:	2200      	movs	r2, #0
 800bcc2:	4b02      	ldr	r3, [pc, #8]	; (800bccc <RegionCommonComputeSymbolTimeLoRa+0x30>)
 800bcc4:	f7f5 fe1c 	bl	8001900 <__aeabi_dmul>
}
 800bcc8:	bdd0      	pop	{r4, r6, r7, pc}
 800bcca:	46c0      	nop			; (mov r8, r8)
 800bccc:	408f4000 	.word	0x408f4000

0800bcd0 <RegionCommonComputeSymbolTimeFsk>:

double RegionCommonComputeSymbolTimeFsk( uint8_t phyDr )
{
 800bcd0:	b510      	push	{r4, lr}
    return ( 8.0 / ( double )phyDr ); // 1 symbol equals 1 byte
 800bcd2:	f7f6 fc3f 	bl	8002554 <__aeabi_ui2d>
 800bcd6:	0002      	movs	r2, r0
 800bcd8:	000b      	movs	r3, r1
 800bcda:	2000      	movs	r0, #0
 800bcdc:	4901      	ldr	r1, [pc, #4]	; (800bce4 <RegionCommonComputeSymbolTimeFsk+0x14>)
 800bcde:	f7f5 fa05 	bl	80010ec <__aeabi_ddiv>
}
 800bce2:	bd10      	pop	{r4, pc}
 800bce4:	40200000 	.word	0x40200000

0800bce8 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( double tSymbol, uint8_t minRxSymbols, uint32_t rxError, uint32_t wakeUpTime, uint32_t* windowTimeout, int32_t* windowOffset )
{
 800bce8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bcea:	0004      	movs	r4, r0
 800bcec:	000d      	movs	r5, r1
    *windowTimeout = MAX( ( uint32_t )ceil( ( ( 2 * minRxSymbols - 8 ) * tSymbol + 2 * rxError ) / tSymbol ), minRxSymbols ); // Computed number of symbols
 800bcee:	1f10      	subs	r0, r2, #4
{
 800bcf0:	b085      	sub	sp, #20
    *windowTimeout = MAX( ( uint32_t )ceil( ( ( 2 * minRxSymbols - 8 ) * tSymbol + 2 * rxError ) / tSymbol ), minRxSymbols ); // Computed number of symbols
 800bcf2:	0040      	lsls	r0, r0, #1
{
 800bcf4:	9200      	str	r2, [sp, #0]
 800bcf6:	9303      	str	r3, [sp, #12]
    *windowTimeout = MAX( ( uint32_t )ceil( ( ( 2 * minRxSymbols - 8 ) * tSymbol + 2 * rxError ) / tSymbol ), minRxSymbols ); // Computed number of symbols
 800bcf8:	f7f6 fbf2 	bl	80024e0 <__aeabi_i2d>
 800bcfc:	0022      	movs	r2, r4
 800bcfe:	002b      	movs	r3, r5
 800bd00:	f7f5 fdfe 	bl	8001900 <__aeabi_dmul>
 800bd04:	9b03      	ldr	r3, [sp, #12]
 800bd06:	0006      	movs	r6, r0
 800bd08:	0058      	lsls	r0, r3, #1
 800bd0a:	000f      	movs	r7, r1
 800bd0c:	f7f6 fc22 	bl	8002554 <__aeabi_ui2d>
 800bd10:	0002      	movs	r2, r0
 800bd12:	000b      	movs	r3, r1
 800bd14:	0030      	movs	r0, r6
 800bd16:	0039      	movs	r1, r7
 800bd18:	f7f4 fecc 	bl	8000ab4 <__aeabi_dadd>
 800bd1c:	002b      	movs	r3, r5
 800bd1e:	0022      	movs	r2, r4
 800bd20:	f7f5 f9e4 	bl	80010ec <__aeabi_ddiv>
 800bd24:	f002 fd4c 	bl	800e7c0 <ceil>
 800bd28:	f7f4 fbe0 	bl	80004ec <__aeabi_d2uiz>
 800bd2c:	9b00      	ldr	r3, [sp, #0]
 800bd2e:	0006      	movs	r6, r0
 800bd30:	4298      	cmp	r0, r3
 800bd32:	d200      	bcs.n	800bd36 <RegionCommonComputeRxWindowParameters+0x4e>
 800bd34:	001e      	movs	r6, r3
 800bd36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    *windowOffset = ( int32_t )ceil( ( 4.0 * tSymbol ) - ( ( *windowTimeout * tSymbol ) / 2.0 ) - wakeUpTime );
 800bd38:	2200      	movs	r2, #0
    *windowTimeout = MAX( ( uint32_t )ceil( ( ( 2 * minRxSymbols - 8 ) * tSymbol + 2 * rxError ) / tSymbol ), minRxSymbols ); // Computed number of symbols
 800bd3a:	601e      	str	r6, [r3, #0]
    *windowOffset = ( int32_t )ceil( ( 4.0 * tSymbol ) - ( ( *windowTimeout * tSymbol ) / 2.0 ) - wakeUpTime );
 800bd3c:	0020      	movs	r0, r4
 800bd3e:	4b15      	ldr	r3, [pc, #84]	; (800bd94 <RegionCommonComputeRxWindowParameters+0xac>)
 800bd40:	0029      	movs	r1, r5
 800bd42:	f7f5 fddd 	bl	8001900 <__aeabi_dmul>
 800bd46:	9000      	str	r0, [sp, #0]
 800bd48:	9101      	str	r1, [sp, #4]
 800bd4a:	0030      	movs	r0, r6
 800bd4c:	f7f6 fc02 	bl	8002554 <__aeabi_ui2d>
 800bd50:	0022      	movs	r2, r4
 800bd52:	002b      	movs	r3, r5
 800bd54:	f7f5 fdd4 	bl	8001900 <__aeabi_dmul>
 800bd58:	2200      	movs	r2, #0
 800bd5a:	4b0f      	ldr	r3, [pc, #60]	; (800bd98 <RegionCommonComputeRxWindowParameters+0xb0>)
 800bd5c:	f7f5 fdd0 	bl	8001900 <__aeabi_dmul>
 800bd60:	0002      	movs	r2, r0
 800bd62:	000b      	movs	r3, r1
 800bd64:	9800      	ldr	r0, [sp, #0]
 800bd66:	9901      	ldr	r1, [sp, #4]
 800bd68:	f7f6 f83c 	bl	8001de4 <__aeabi_dsub>
 800bd6c:	0004      	movs	r4, r0
 800bd6e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800bd70:	000d      	movs	r5, r1
 800bd72:	f7f6 fbef 	bl	8002554 <__aeabi_ui2d>
 800bd76:	0002      	movs	r2, r0
 800bd78:	000b      	movs	r3, r1
 800bd7a:	0020      	movs	r0, r4
 800bd7c:	0029      	movs	r1, r5
 800bd7e:	f7f6 f831 	bl	8001de4 <__aeabi_dsub>
 800bd82:	f002 fd1d 	bl	800e7c0 <ceil>
 800bd86:	f7f6 fb75 	bl	8002474 <__aeabi_d2iz>
 800bd8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bd8c:	6018      	str	r0, [r3, #0]
}
 800bd8e:	b005      	add	sp, #20
 800bd90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd92:	46c0      	nop			; (mov r8, r8)
 800bd94:	40100000 	.word	0x40100000
 800bd98:	3fe00000 	.word	0x3fe00000

0800bd9c <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 800bd9c:	b570      	push	{r4, r5, r6, lr}
    int8_t phyTxPower = 0;

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 800bd9e:	0040      	lsls	r0, r0, #1
{
 800bda0:	1c14      	adds	r4, r2, #0
 800bda2:	1c0d      	adds	r5, r1, #0
    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 800bda4:	f7f4 fe46 	bl	8000a34 <__aeabi_ui2f>
 800bda8:	1c01      	adds	r1, r0, #0
 800bdaa:	1c28      	adds	r0, r5, #0
 800bdac:	f7f4 fc7e 	bl	80006ac <__aeabi_fsub>
 800bdb0:	1c21      	adds	r1, r4, #0
 800bdb2:	f7f4 fc7b 	bl	80006ac <__aeabi_fsub>
 800bdb6:	f7f6 fbff 	bl	80025b8 <__aeabi_f2d>
 800bdba:	f002 fd83 	bl	800e8c4 <floor>
 800bdbe:	f7f6 fb59 	bl	8002474 <__aeabi_d2iz>

    return phyTxPower;
 800bdc2:	b240      	sxtb	r0, r0
}
 800bdc4:	bd70      	pop	{r4, r5, r6, pc}

0800bdc6 <RegionCommonCalcBackOff>:

void RegionCommonCalcBackOff( RegionCommonCalcBackOffParams_t* calcBackOffParams )
{
 800bdc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t bandIdx = calcBackOffParams->Channels[calcBackOffParams->Channel].Band;
 800bdc8:	230c      	movs	r3, #12
 800bdca:	7ac2      	ldrb	r2, [r0, #11]
{
 800bdcc:	0004      	movs	r4, r0
    uint8_t bandIdx = calcBackOffParams->Channels[calcBackOffParams->Channel].Band;
 800bdce:	4353      	muls	r3, r2
 800bdd0:	6802      	ldr	r2, [r0, #0]
 800bdd2:	18d3      	adds	r3, r2, r3
    uint16_t dutyCycle = calcBackOffParams->Bands[bandIdx].DCycle;
 800bdd4:	7a5d      	ldrb	r5, [r3, #9]
 800bdd6:	6843      	ldr	r3, [r0, #4]
 800bdd8:	012d      	lsls	r5, r5, #4
 800bdda:	195d      	adds	r5, r3, r5
    uint16_t joinDutyCycle = 0;

    // Reset time-off to initial value.
    calcBackOffParams->Bands[bandIdx].TimeOff = 0;
 800bddc:	2300      	movs	r3, #0
 800bdde:	60eb      	str	r3, [r5, #12]

    if( calcBackOffParams->Joined == false )
 800bde0:	7a43      	ldrb	r3, [r0, #9]
    uint16_t dutyCycle = calcBackOffParams->Bands[bandIdx].DCycle;
 800bde2:	882e      	ldrh	r6, [r5, #0]
 800bde4:	7a87      	ldrb	r7, [r0, #10]
    if( calcBackOffParams->Joined == false )
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d112      	bne.n	800be10 <RegionCommonCalcBackOff+0x4a>
    {
        // Get the join duty cycle
        joinDutyCycle = RegionCommonGetJoinDc( calcBackOffParams->ElapsedTime );
 800bdea:	68c0      	ldr	r0, [r0, #12]
 800bdec:	f7ff fe18 	bl	800ba20 <RegionCommonGetJoinDc>
        // Apply the most restricting duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
        // Reset the timeoff if the last frame was not a join request and when the duty cycle is not enabled
        if( ( calcBackOffParams->DutyCycleEnabled == false ) && ( calcBackOffParams->LastTxIsJoinRequest == false ) )
 800bdf0:	2f00      	cmp	r7, #0
 800bdf2:	d102      	bne.n	800bdfa <RegionCommonCalcBackOff+0x34>
 800bdf4:	7a23      	ldrb	r3, [r4, #8]
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d009      	beq.n	800be0e <RegionCommonCalcBackOff+0x48>
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 800bdfa:	b282      	uxth	r2, r0
 800bdfc:	1c33      	adds	r3, r6, #0
 800bdfe:	4296      	cmp	r6, r2
 800be00:	d200      	bcs.n	800be04 <RegionCommonCalcBackOff+0x3e>
 800be02:	1c03      	adds	r3, r0, #0
            calcBackOffParams->Bands[bandIdx].TimeOff = 0;
        }
        else
        {
            // Apply band time-off.
            calcBackOffParams->Bands[bandIdx].TimeOff = calcBackOffParams->TxTimeOnAir * dutyCycle - calcBackOffParams->TxTimeOnAir;
 800be04:	6922      	ldr	r2, [r4, #16]
 800be06:	b29b      	uxth	r3, r3
 800be08:	3b01      	subs	r3, #1
 800be0a:	4353      	muls	r3, r2
 800be0c:	60eb      	str	r3, [r5, #12]
        else
        {
            calcBackOffParams->Bands[bandIdx].TimeOff = 0;
        }
    }
}
 800be0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if( calcBackOffParams->DutyCycleEnabled == true )
 800be10:	2f00      	cmp	r7, #0
 800be12:	d0fc      	beq.n	800be0e <RegionCommonCalcBackOff+0x48>
            calcBackOffParams->Bands[bandIdx].TimeOff = calcBackOffParams->TxTimeOnAir * dutyCycle - calcBackOffParams->TxTimeOnAir;
 800be14:	6903      	ldr	r3, [r0, #16]
 800be16:	3e01      	subs	r6, #1
 800be18:	435e      	muls	r6, r3
 800be1a:	60ee      	str	r6, [r5, #12]
}
 800be1c:	e7f7      	b.n	800be0e <RegionCommonCalcBackOff+0x48>
	...

0800be20 <certif_tx>:
  certifParam.DemodMargin = mlmeConfirm->DemodMargin;
  certifParam.NbGateways = mlmeConfirm->NbGateways;
}

static bool certif_tx( void )
{
 800be20:	b530      	push	{r4, r5, lr}
  McpsReq_t mcpsReq;
  LoRaMacTxInfo_t txInfo;
  
  if( certifParam.LinkCheck == true )
 800be22:	4c29      	ldr	r4, [pc, #164]	; (800bec8 <certif_tx+0xa8>)
{
 800be24:	b087      	sub	sp, #28
  if( certifParam.LinkCheck == true )
 800be26:	0023      	movs	r3, r4
 800be28:	33f8      	adds	r3, #248	; 0xf8
 800be2a:	781a      	ldrb	r2, [r3, #0]
 800be2c:	2a00      	cmp	r2, #0
 800be2e:	d027      	beq.n	800be80 <certif_tx+0x60>
  {
    certifParam.LinkCheck = false;
 800be30:	2200      	movs	r2, #0
 800be32:	701a      	strb	r2, [r3, #0]
    certifParam.DataBufferSize = 3;
 800be34:	2303      	movs	r3, #3
 800be36:	70e3      	strb	r3, [r4, #3]
    certifParam.DataBuffer[0] = 5;
 800be38:	3302      	adds	r3, #2
 800be3a:	7123      	strb	r3, [r4, #4]
    certifParam.DataBuffer[1] = certifParam.DemodMargin;
 800be3c:	0023      	movs	r3, r4
 800be3e:	33f9      	adds	r3, #249	; 0xf9
 800be40:	781b      	ldrb	r3, [r3, #0]
 800be42:	7163      	strb	r3, [r4, #5]
    certifParam.DataBuffer[2] = certifParam.NbGateways;
 800be44:	0023      	movs	r3, r4
 800be46:	33fa      	adds	r3, #250	; 0xfa
 800be48:	781b      	ldrb	r3, [r3, #0]
 800be4a:	71a3      	strb	r3, [r4, #6]
    certifParam.State = 1;
 800be4c:	2301      	movs	r3, #1
 800be4e:	7063      	strb	r3, [r4, #1]
      certifParam.DataBuffer[1] = certifParam.DownLinkCounter;
      break;
    }
  }
    
  if( LoRaMacQueryTxPossible( certifParam.DataBufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 800be50:	78e0      	ldrb	r0, [r4, #3]
 800be52:	a901      	add	r1, sp, #4
 800be54:	f7fd fb06 	bl	8009464 <LoRaMacQueryTxPossible>
 800be58:	ad02      	add	r5, sp, #8
 800be5a:	4b1c      	ldr	r3, [pc, #112]	; (800becc <certif_tx+0xac>)
 800be5c:	2800      	cmp	r0, #0
 800be5e:	d01e      	beq.n	800be9e <certif_tx+0x7e>
  {
      // Send empty frame in order to flush MAC commands
      mcpsReq.Type = MCPS_UNCONFIRMED;
 800be60:	2200      	movs	r2, #0
 800be62:	702a      	strb	r2, [r5, #0]
      mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800be64:	60aa      	str	r2, [r5, #8]
      mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800be66:	81aa      	strh	r2, [r5, #12]
      {
          mcpsReq.Type = MCPS_UNCONFIRMED;
          mcpsReq.Req.Unconfirmed.fPort = CERTIF_PORT;
          mcpsReq.Req.Unconfirmed.fBufferSize = certifParam.DataBufferSize;
          mcpsReq.Req.Unconfirmed.fBuffer = &(certifParam.DataBuffer);
          mcpsReq.Req.Unconfirmed.Datarate = DR_0;
 800be68:	73aa      	strb	r2, [r5, #14]
          mcpsReq.Req.Confirmed.Datarate = DR_0;
      }
  }

  /*cerification test on-going*/
  TimerStart( &CertifTxNextPacketTimer );
 800be6a:	1d18      	adds	r0, r3, #4
 800be6c:	f000 fd16 	bl	800c89c <TimerStart>
	
  if( LoRaMacMcpsRequest( &mcpsReq ) == LORAMAC_STATUS_OK )
 800be70:	0028      	movs	r0, r5
 800be72:	f7fd ff27 	bl	8009cc4 <LoRaMacMcpsRequest>
 800be76:	1e43      	subs	r3, r0, #1
 800be78:	4198      	sbcs	r0, r3
 800be7a:	b2c0      	uxtb	r0, r0
  {
      return false;
  }
    return true;
}
 800be7c:	b007      	add	sp, #28
 800be7e:	bd30      	pop	{r4, r5, pc}
    switch( certifParam.State )
 800be80:	7863      	ldrb	r3, [r4, #1]
 800be82:	2b01      	cmp	r3, #1
 800be84:	d002      	beq.n	800be8c <certif_tx+0x6c>
 800be86:	2b04      	cmp	r3, #4
 800be88:	d1e2      	bne.n	800be50 <certif_tx+0x30>
 800be8a:	e7df      	b.n	800be4c <certif_tx+0x2c>
      certifParam.DataBufferSize = 2;
 800be8c:	2302      	movs	r3, #2
 800be8e:	70e3      	strb	r3, [r4, #3]
      certifParam.DataBuffer[0] = certifParam.DownLinkCounter >> 8;
 800be90:	0023      	movs	r3, r4
 800be92:	33f6      	adds	r3, #246	; 0xf6
 800be94:	881b      	ldrh	r3, [r3, #0]
 800be96:	0a1a      	lsrs	r2, r3, #8
 800be98:	7122      	strb	r2, [r4, #4]
      certifParam.DataBuffer[1] = certifParam.DownLinkCounter;
 800be9a:	7163      	strb	r3, [r4, #5]
      break;
 800be9c:	e7d8      	b.n	800be50 <certif_tx+0x30>
      if( IsTxConfirmed == LORAWAN_UNCONFIRMED_MSG )
 800be9e:	781a      	ldrb	r2, [r3, #0]
 800bea0:	78e0      	ldrb	r0, [r4, #3]
 800bea2:	490b      	ldr	r1, [pc, #44]	; (800bed0 <certif_tx+0xb0>)
 800bea4:	24e0      	movs	r4, #224	; 0xe0
 800bea6:	2a00      	cmp	r2, #0
 800bea8:	d104      	bne.n	800beb4 <certif_tx+0x94>
          mcpsReq.Type = MCPS_UNCONFIRMED;
 800beaa:	702a      	strb	r2, [r5, #0]
          mcpsReq.Req.Unconfirmed.fPort = CERTIF_PORT;
 800beac:	712c      	strb	r4, [r5, #4]
          mcpsReq.Req.Unconfirmed.fBufferSize = certifParam.DataBufferSize;
 800beae:	81a8      	strh	r0, [r5, #12]
          mcpsReq.Req.Unconfirmed.fBuffer = &(certifParam.DataBuffer);
 800beb0:	60a9      	str	r1, [r5, #8]
 800beb2:	e7d9      	b.n	800be68 <certif_tx+0x48>
          mcpsReq.Type = MCPS_CONFIRMED;
 800beb4:	2201      	movs	r2, #1
 800beb6:	702a      	strb	r2, [r5, #0]
          mcpsReq.Req.Confirmed.Datarate = DR_0;
 800beb8:	2280      	movs	r2, #128	; 0x80
 800beba:	0112      	lsls	r2, r2, #4
          mcpsReq.Req.Confirmed.fPort = CERTIF_PORT;
 800bebc:	712c      	strb	r4, [r5, #4]
          mcpsReq.Req.Confirmed.fBufferSize = certifParam.DataBufferSize;
 800bebe:	81a8      	strh	r0, [r5, #12]
          mcpsReq.Req.Confirmed.fBuffer = &(certifParam.DataBuffer);
 800bec0:	60a9      	str	r1, [r5, #8]
          mcpsReq.Req.Confirmed.Datarate = DR_0;
 800bec2:	81ea      	strh	r2, [r5, #14]
 800bec4:	e7d1      	b.n	800be6a <certif_tx+0x4a>
 800bec6:	46c0      	nop			; (mov r8, r8)
 800bec8:	20001002 	.word	0x20001002
 800becc:	20000fe4 	.word	0x20000fe4
 800bed0:	20001006 	.word	0x20001006

0800bed4 <OnCertifTxNextPacketTimerEvent>:

/*!
 * \brief Function executed on TxNextPacket Timeout event
 */
static void OnCertifTxNextPacketTimerEvent( void* context )
{
 800bed4:	b510      	push	{r4, lr}
    certif_tx( );
 800bed6:	f7ff ffa3 	bl	800be20 <certif_tx>

}
 800beda:	bd10      	pop	{r4, pc}

0800bedc <certif_running>:
    return certifParam.Running;
 800bedc:	4b01      	ldr	r3, [pc, #4]	; (800bee4 <certif_running+0x8>)
 800bede:	7818      	ldrb	r0, [r3, #0]
}
 800bee0:	4770      	bx	lr
 800bee2:	46c0      	nop			; (mov r8, r8)
 800bee4:	20001002 	.word	0x20001002

0800bee8 <certif_DownLinkIncrement>:
    certifParam.DownLinkCounter++;
 800bee8:	4b02      	ldr	r3, [pc, #8]	; (800bef4 <certif_DownLinkIncrement+0xc>)
 800beea:	33f6      	adds	r3, #246	; 0xf6
 800beec:	881a      	ldrh	r2, [r3, #0]
 800beee:	3201      	adds	r2, #1
 800bef0:	801a      	strh	r2, [r3, #0]
}
 800bef2:	4770      	bx	lr
 800bef4:	20001002 	.word	0x20001002

0800bef8 <certif_linkCheck>:
  certifParam.LinkCheck = true;
 800bef8:	4b06      	ldr	r3, [pc, #24]	; (800bf14 <certif_linkCheck+0x1c>)
 800befa:	2101      	movs	r1, #1
 800befc:	001a      	movs	r2, r3
 800befe:	32f8      	adds	r2, #248	; 0xf8
 800bf00:	7011      	strb	r1, [r2, #0]
  certifParam.DemodMargin = mlmeConfirm->DemodMargin;
 800bf02:	001a      	movs	r2, r3
 800bf04:	7a01      	ldrb	r1, [r0, #8]
 800bf06:	32f9      	adds	r2, #249	; 0xf9
 800bf08:	7011      	strb	r1, [r2, #0]
  certifParam.NbGateways = mlmeConfirm->NbGateways;
 800bf0a:	7a42      	ldrb	r2, [r0, #9]
 800bf0c:	33fa      	adds	r3, #250	; 0xfa
 800bf0e:	701a      	strb	r2, [r3, #0]
}
 800bf10:	4770      	bx	lr
 800bf12:	46c0      	nop			; (mov r8, r8)
 800bf14:	20001002 	.word	0x20001002

0800bf18 <certif_rx>:
{
 800bf18:	b5f0      	push	{r4, r5, r6, r7, lr}
  if( certifParam.Running == false )
 800bf1a:	4c61      	ldr	r4, [pc, #388]	; (800c0a0 <certif_rx+0x188>)
{
 800bf1c:	b08d      	sub	sp, #52	; 0x34
  if( certifParam.Running == false )
 800bf1e:	7823      	ldrb	r3, [r4, #0]
{
 800bf20:	0002      	movs	r2, r0
 800bf22:	000d      	movs	r5, r1
  if( certifParam.Running == false )
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d143      	bne.n	800bfb0 <certif_rx+0x98>
      if( ( mcpsIndication->BufferSize == 4 ) &&
 800bf28:	7b07      	ldrb	r7, [r0, #12]
 800bf2a:	2f04      	cmp	r7, #4
 800bf2c:	d13a      	bne.n	800bfa4 <certif_rx+0x8c>
          ( mcpsIndication->Buffer[0] == 0x01 ) &&
 800bf2e:	6882      	ldr	r2, [r0, #8]
      if( ( mcpsIndication->BufferSize == 4 ) &&
 800bf30:	7811      	ldrb	r1, [r2, #0]
 800bf32:	2901      	cmp	r1, #1
 800bf34:	d136      	bne.n	800bfa4 <certif_rx+0x8c>
          ( mcpsIndication->Buffer[0] == 0x01 ) &&
 800bf36:	7851      	ldrb	r1, [r2, #1]
 800bf38:	2901      	cmp	r1, #1
 800bf3a:	d133      	bne.n	800bfa4 <certif_rx+0x8c>
          ( mcpsIndication->Buffer[1] == 0x01 ) &&
 800bf3c:	7891      	ldrb	r1, [r2, #2]
 800bf3e:	2901      	cmp	r1, #1
 800bf40:	d130      	bne.n	800bfa4 <certif_rx+0x8c>
          ( mcpsIndication->Buffer[2] == 0x01 ) &&
 800bf42:	78d6      	ldrb	r6, [r2, #3]
 800bf44:	2e01      	cmp	r6, #1
 800bf46:	d12d      	bne.n	800bfa4 <certif_rx+0x8c>
          IsTxConfirmed = LORAWAN_UNCONFIRMED_MSG;
 800bf48:	4a56      	ldr	r2, [pc, #344]	; (800c0a4 <certif_rx+0x18c>)
          mibReq.Type = MIB_ADR;
 800bf4a:	ad04      	add	r5, sp, #16
          IsTxConfirmed = LORAWAN_UNCONFIRMED_MSG;
 800bf4c:	7013      	strb	r3, [r2, #0]
          certifParam.DataBufferSize = 2;
 800bf4e:	2202      	movs	r2, #2
 800bf50:	70e2      	strb	r2, [r4, #3]
          certifParam.DownLinkCounter = 0;
 800bf52:	0022      	movs	r2, r4
 800bf54:	32f6      	adds	r2, #246	; 0xf6
 800bf56:	8013      	strh	r3, [r2, #0]
          certifParam.LinkCheck = false;
 800bf58:	0022      	movs	r2, r4
 800bf5a:	32f8      	adds	r2, #248	; 0xf8
 800bf5c:	7013      	strb	r3, [r2, #0]
          certifParam.DemodMargin = 0;
 800bf5e:	0022      	movs	r2, r4
 800bf60:	32f9      	adds	r2, #249	; 0xf9
 800bf62:	7013      	strb	r3, [r2, #0]
          certifParam.NbGateways = 0;
 800bf64:	0022      	movs	r2, r4
          LoRaMacMibGetRequestConfirm( &mibReq );
 800bf66:	0028      	movs	r0, r5
          certifParam.NbGateways = 0;
 800bf68:	32fa      	adds	r2, #250	; 0xfa
 800bf6a:	7013      	strb	r3, [r2, #0]
          mibReq.Type = MIB_ADR;
 800bf6c:	702f      	strb	r7, [r5, #0]
          certifParam.Running = true;
 800bf6e:	7026      	strb	r6, [r4, #0]
          certifParam.State = 1;
 800bf70:	7066      	strb	r6, [r4, #1]
          LoRaMacMibGetRequestConfirm( &mibReq );
 800bf72:	f7fd fadb 	bl	800952c <LoRaMacMibGetRequestConfirm>
          AdrEnableInit=mibReq.Param.AdrEnable;
 800bf76:	792b      	ldrb	r3, [r5, #4]
 800bf78:	4a4a      	ldr	r2, [pc, #296]	; (800c0a4 <certif_rx+0x18c>)
          LoRaMacMibSetRequestConfirm( &mibReq );
 800bf7a:	0028      	movs	r0, r5
          AdrEnableInit=mibReq.Param.AdrEnable;
 800bf7c:	7713      	strb	r3, [r2, #28]
          mibReq.Type = MIB_ADR;
 800bf7e:	702f      	strb	r7, [r5, #0]
          mibReq.Param.AdrEnable = true;
 800bf80:	712e      	strb	r6, [r5, #4]
          LoRaMacMibSetRequestConfirm( &mibReq );
 800bf82:	f7fd fbaf 	bl	80096e4 <LoRaMacMibSetRequestConfirm>
        TimerInit( &CertifTxNextPacketTimer, OnCertifTxNextPacketTimerEvent );
 800bf86:	4b47      	ldr	r3, [pc, #284]	; (800c0a4 <certif_rx+0x18c>)
 800bf88:	4947      	ldr	r1, [pc, #284]	; (800c0a8 <certif_rx+0x190>)
 800bf8a:	1d1d      	adds	r5, r3, #4
 800bf8c:	0028      	movs	r0, r5
 800bf8e:	f000 fc7b 	bl	800c888 <TimerInit>
        TimerSetValue( &CertifTxNextPacketTimer,  TEST_TX_DUTYCYCLE); 
 800bf92:	4946      	ldr	r1, [pc, #280]	; (800c0ac <certif_rx+0x194>)
 800bf94:	0028      	movs	r0, r5
 800bf96:	f000 fd29 	bl	800c9ec <TimerSetValue>
        certif_tx( );
 800bf9a:	f7ff ff41 	bl	800be20 <certif_tx>
    if ( certifParam.Running == false )
 800bf9e:	7823      	ldrb	r3, [r4, #0]
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d103      	bne.n	800bfac <certif_rx+0x94>
      TimerStop( &CertifTxNextPacketTimer );
 800bfa4:	483f      	ldr	r0, [pc, #252]	; (800c0a4 <certif_rx+0x18c>)
 800bfa6:	3004      	adds	r0, #4
 800bfa8:	f000 fcf4 	bl	800c994 <TimerStop>
}
 800bfac:	b00d      	add	sp, #52	; 0x34
 800bfae:	bdf0      	pop	{r4, r5, r6, r7, pc}
      certifParam.State = mcpsIndication->Buffer[0];
 800bfb0:	6883      	ldr	r3, [r0, #8]
 800bfb2:	7818      	ldrb	r0, [r3, #0]
 800bfb4:	7060      	strb	r0, [r4, #1]
      switch( certifParam.State )
 800bfb6:	2808      	cmp	r0, #8
 800bfb8:	d8f1      	bhi.n	800bf9e <certif_rx+0x86>
 800bfba:	f7f4 f8a5 	bl	8000108 <__gnu_thumb1_case_uqi>
 800bfbe:	1305      	.short	0x1305
 800bfc0:	2e201b16 	.word	0x2e201b16
 800bfc4:	4832      	.short	0x4832
 800bfc6:	6d          	.byte	0x6d
 800bfc7:	00          	.byte	0x00
          certifParam.DownLinkCounter = 0;
 800bfc8:	0022      	movs	r2, r4
 800bfca:	2300      	movs	r3, #0
 800bfcc:	32f6      	adds	r2, #246	; 0xf6
          mibReq.Type = MIB_ADR;
 800bfce:	a804      	add	r0, sp, #16
          certifParam.DownLinkCounter = 0;
 800bfd0:	8013      	strh	r3, [r2, #0]
          certifParam.Running = false;
 800bfd2:	7023      	strb	r3, [r4, #0]
          mibReq.Type = MIB_ADR;
 800bfd4:	3304      	adds	r3, #4
 800bfd6:	7003      	strb	r3, [r0, #0]
          mibReq.Param.AdrEnable = AdrEnableInit;
 800bfd8:	4b32      	ldr	r3, [pc, #200]	; (800c0a4 <certif_rx+0x18c>)
 800bfda:	7f1b      	ldrb	r3, [r3, #28]
 800bfdc:	7103      	strb	r3, [r0, #4]
          LoRaMacMibSetRequestConfirm( &mibReq );
 800bfde:	f7fd fb81 	bl	80096e4 <LoRaMacMibSetRequestConfirm>
 800bfe2:	e7dc      	b.n	800bf9e <certif_rx+0x86>
          certifParam.DataBufferSize = 2;
 800bfe4:	2302      	movs	r3, #2
 800bfe6:	70e3      	strb	r3, [r4, #3]
          break;
 800bfe8:	e7d9      	b.n	800bf9e <certif_rx+0x86>
          IsTxConfirmed = LORAWAN_CONFIRMED_MSG;
 800bfea:	2301      	movs	r3, #1
 800bfec:	4a2d      	ldr	r2, [pc, #180]	; (800c0a4 <certif_rx+0x18c>)
 800bfee:	7013      	strb	r3, [r2, #0]
          certifParam.State = 1;
 800bff0:	7063      	strb	r3, [r4, #1]
          break;
 800bff2:	e7d4      	b.n	800bf9e <certif_rx+0x86>
          IsTxConfirmed = LORAWAN_UNCONFIRMED_MSG;
 800bff4:	2200      	movs	r2, #0
 800bff6:	4b2b      	ldr	r3, [pc, #172]	; (800c0a4 <certif_rx+0x18c>)
 800bff8:	701a      	strb	r2, [r3, #0]
          certifParam.State = 1;
 800bffa:	2301      	movs	r3, #1
 800bffc:	e7f8      	b.n	800bff0 <certif_rx+0xd8>
          certifParam.DataBufferSize = mcpsIndication->BufferSize;
 800bffe:	7b15      	ldrb	r5, [r2, #12]
          certifParam.DataBuffer[0] = 4;
 800c000:	2204      	movs	r2, #4
 800c002:	7122      	strb	r2, [r4, #4]
          for( uint8_t i = 1; i < certifParam.DataBufferSize; i++ )
 800c004:	2200      	movs	r2, #0
          certifParam.DataBufferSize = mcpsIndication->BufferSize;
 800c006:	70e5      	strb	r5, [r4, #3]
 800c008:	3201      	adds	r2, #1
          for( uint8_t i = 1; i < certifParam.DataBufferSize; i++ )
 800c00a:	b2d1      	uxtb	r1, r2
 800c00c:	428d      	cmp	r5, r1
 800c00e:	d9c6      	bls.n	800bf9e <certif_rx+0x86>
              certifParam.DataBuffer[i] = mcpsIndication->Buffer[i] + 1;
 800c010:	5c98      	ldrb	r0, [r3, r2]
 800c012:	18a1      	adds	r1, r4, r2
 800c014:	3001      	adds	r0, #1
 800c016:	7108      	strb	r0, [r1, #4]
 800c018:	e7f6      	b.n	800c008 <certif_rx+0xf0>
          mlmeReq.Type = MLME_LINK_CHECK;
 800c01a:	2303      	movs	r3, #3
 800c01c:	a804      	add	r0, sp, #16
          mlmeReq.Type = MLME_DEVICE_TIME;
 800c01e:	7003      	strb	r3, [r0, #0]
 800c020:	e012      	b.n	800c048 <certif_rx+0x130>
            certifParam.DownLinkCounter = 0;
 800c022:	0023      	movs	r3, r4
 800c024:	2600      	movs	r6, #0
 800c026:	33f6      	adds	r3, #246	; 0xf6
 800c028:	801e      	strh	r6, [r3, #0]
            mibReq.Type = MIB_ADR;
 800c02a:	2304      	movs	r3, #4
 800c02c:	a804      	add	r0, sp, #16
 800c02e:	7003      	strb	r3, [r0, #0]
            mibReq.Param.AdrEnable = AdrEnableInit;
 800c030:	4b1c      	ldr	r3, [pc, #112]	; (800c0a4 <certif_rx+0x18c>)
            certifParam.Running = false;
 800c032:	7026      	strb	r6, [r4, #0]
            mibReq.Param.AdrEnable = AdrEnableInit;
 800c034:	7f1b      	ldrb	r3, [r3, #28]
 800c036:	7103      	strb	r3, [r0, #4]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800c038:	f7fd fb54 	bl	80096e4 <LoRaMacMibSetRequestConfirm>
            mlmeReq.Type = MLME_JOIN;
 800c03c:	466b      	mov	r3, sp
            mlmeReq.Req.Join = *JoinParameters;
 800c03e:	466a      	mov	r2, sp
            LoRaMacMlmeRequest( &mlmeReq );
 800c040:	4668      	mov	r0, sp
            mlmeReq.Type = MLME_JOIN;
 800c042:	701e      	strb	r6, [r3, #0]
            mlmeReq.Req.Join = *JoinParameters;
 800c044:	782b      	ldrb	r3, [r5, #0]
 800c046:	7113      	strb	r3, [r2, #4]
          LoRaMacMlmeRequest( &mlmeReq );
 800c048:	f7fd fd82 	bl	8009b50 <LoRaMacMlmeRequest>
 800c04c:	e7a7      	b.n	800bf9e <certif_rx+0x86>
          if( mcpsIndication->BufferSize == 3 )
 800c04e:	7b12      	ldrb	r2, [r2, #12]
 800c050:	2a03      	cmp	r2, #3
 800c052:	d10a      	bne.n	800c06a <certif_rx+0x152>
              mlmeReq.Type = MLME_TXCW;
 800c054:	a804      	add	r0, sp, #16
 800c056:	3201      	adds	r2, #1
 800c058:	7002      	strb	r2, [r0, #0]
              mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 800c05a:	785a      	ldrb	r2, [r3, #1]
 800c05c:	789b      	ldrb	r3, [r3, #2]
 800c05e:	0212      	lsls	r2, r2, #8
 800c060:	4313      	orrs	r3, r2
 800c062:	8083      	strh	r3, [r0, #4]
              LoRaMacMlmeRequest( &mlmeReq );
 800c064:	f7fd fd74 	bl	8009b50 <LoRaMacMlmeRequest>
 800c068:	e7c7      	b.n	800bffa <certif_rx+0xe2>
          else if( mcpsIndication->BufferSize == 7 )
 800c06a:	2a07      	cmp	r2, #7
 800c06c:	d1c5      	bne.n	800bffa <certif_rx+0xe2>
              mlmeReq.Type = MLME_TXCW_1;
 800c06e:	a804      	add	r0, sp, #16
 800c070:	3a02      	subs	r2, #2
 800c072:	7002      	strb	r2, [r0, #0]
              mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 800c074:	7859      	ldrb	r1, [r3, #1]
 800c076:	789a      	ldrb	r2, [r3, #2]
 800c078:	0209      	lsls	r1, r1, #8
 800c07a:	430a      	orrs	r2, r1
 800c07c:	8082      	strh	r2, [r0, #4]
              mlmeReq.Req.TxCw.Frequency = ( uint32_t )( ( mcpsIndication->Buffer[3] << 16 ) | ( mcpsIndication->Buffer[4] << 8 ) | mcpsIndication->Buffer[5] ) * 100;
 800c07e:	78da      	ldrb	r2, [r3, #3]
 800c080:	7919      	ldrb	r1, [r3, #4]
 800c082:	0412      	lsls	r2, r2, #16
 800c084:	0209      	lsls	r1, r1, #8
 800c086:	430a      	orrs	r2, r1
 800c088:	7959      	ldrb	r1, [r3, #5]
 800c08a:	430a      	orrs	r2, r1
 800c08c:	2164      	movs	r1, #100	; 0x64
 800c08e:	434a      	muls	r2, r1
 800c090:	6082      	str	r2, [r0, #8]
              mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[6];
 800c092:	799b      	ldrb	r3, [r3, #6]
 800c094:	7303      	strb	r3, [r0, #12]
 800c096:	e7e5      	b.n	800c064 <certif_rx+0x14c>
          mlmeReq.Type = MLME_DEVICE_TIME;
 800c098:	a804      	add	r0, sp, #16
 800c09a:	2309      	movs	r3, #9
 800c09c:	e7bf      	b.n	800c01e <certif_rx+0x106>
 800c09e:	46c0      	nop			; (mov r8, r8)
 800c0a0:	20001002 	.word	0x20001002
 800c0a4:	20000fe4 	.word	0x20000fe4
 800c0a8:	0800bed5 	.word	0x0800bed5
 800c0ac:	00001388 	.word	0x00001388

0800c0b0 <MlmeIndication>:
    MibRequestConfirm_t mibReq;
#endif /* LORAMAC_CLASSB_ENABLED */

    TVL2( PRINTNOW(); PRINTF("APP> MLMEInd STATUS: %s\r\n", EventInfoStatusStrings[MlmeIndication->Status] );    )

    switch( MlmeIndication->MlmeIndication )
 800c0b0:	7803      	ldrb	r3, [r0, #0]
{
 800c0b2:	b510      	push	{r4, lr}
    switch( MlmeIndication->MlmeIndication )
 800c0b4:	2b06      	cmp	r3, #6
 800c0b6:	d103      	bne.n	800c0c0 <MlmeIndication+0x10>
    {
        case MLME_SCHEDULE_UPLINK:
        {
            // The MAC signals that we shall provide an uplink as soon as possible
            LoRaMainCallbacks->LORA_TxNeeded( );			
 800c0b8:	4b02      	ldr	r3, [pc, #8]	; (800c0c4 <MlmeIndication+0x14>)
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	69db      	ldr	r3, [r3, #28]
 800c0be:	4798      	blx	r3
        }
#endif /* LORAMAC_CLASSB_ENABLED */
        default:
            break;
    }
}
 800c0c0:	bd10      	pop	{r4, pc}
 800c0c2:	46c0      	nop			; (mov r8, r8)
 800c0c4:	20001100 	.word	0x20001100

0800c0c8 <McpsIndication>:
{
 800c0c8:	b513      	push	{r0, r1, r4, lr}
    if( mcpsIndication->Status != LORAMAC_EVENT_INFO_STATUS_OK )
 800c0ca:	7843      	ldrb	r3, [r0, #1]
{
 800c0cc:	0004      	movs	r4, r0
    if( mcpsIndication->Status != LORAMAC_EVENT_INFO_STATUS_OK )
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d117      	bne.n	800c102 <McpsIndication+0x3a>
    if( mcpsIndication->FramePending == true )
 800c0d2:	7943      	ldrb	r3, [r0, #5]
 800c0d4:	2b01      	cmp	r3, #1
 800c0d6:	d103      	bne.n	800c0e0 <McpsIndication+0x18>
        LoRaMainCallbacks->LORA_TxNeeded( );
 800c0d8:	4b10      	ldr	r3, [pc, #64]	; (800c11c <McpsIndication+0x54>)
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	69db      	ldr	r3, [r3, #28]
 800c0de:	4798      	blx	r3
    if (certif_running() == true )
 800c0e0:	f7ff fefc 	bl	800bedc <certif_running>
 800c0e4:	2800      	cmp	r0, #0
 800c0e6:	d001      	beq.n	800c0ec <McpsIndication+0x24>
      certif_DownLinkIncrement( );
 800c0e8:	f7ff fefe 	bl	800bee8 <certif_DownLinkIncrement>
    if( mcpsIndication->RxData == true )
 800c0ec:	7b63      	ldrb	r3, [r4, #13]
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d007      	beq.n	800c102 <McpsIndication+0x3a>
      switch( mcpsIndication->Port )
 800c0f2:	78e3      	ldrb	r3, [r4, #3]
 800c0f4:	4909      	ldr	r1, [pc, #36]	; (800c11c <McpsIndication+0x54>)
 800c0f6:	2be0      	cmp	r3, #224	; 0xe0
 800c0f8:	d104      	bne.n	800c104 <McpsIndication+0x3c>
          certif_rx( mcpsIndication, &JoinParameters );
 800c0fa:	3104      	adds	r1, #4
 800c0fc:	0020      	movs	r0, r4
 800c0fe:	f7ff ff0b 	bl	800bf18 <certif_rx>
}
 800c102:	bd13      	pop	{r0, r1, r4, pc}
          AppData.Port = mcpsIndication->Port;
 800c104:	466a      	mov	r2, sp
 800c106:	7153      	strb	r3, [r2, #5]
          AppData.BuffSize = mcpsIndication->BufferSize;
 800c108:	7b23      	ldrb	r3, [r4, #12]
          LoRaMainCallbacks->LORA_RxData( &AppData );
 800c10a:	4668      	mov	r0, sp
          AppData.BuffSize = mcpsIndication->BufferSize;
 800c10c:	7113      	strb	r3, [r2, #4]
          AppData.Buff = mcpsIndication->Buffer;
 800c10e:	68a3      	ldr	r3, [r4, #8]
 800c110:	9300      	str	r3, [sp, #0]
          LoRaMainCallbacks->LORA_RxData( &AppData );
 800c112:	680b      	ldr	r3, [r1, #0]
 800c114:	691b      	ldr	r3, [r3, #16]
 800c116:	4798      	blx	r3
 800c118:	e7f3      	b.n	800c102 <McpsIndication+0x3a>
 800c11a:	46c0      	nop			; (mov r8, r8)
 800c11c:	20001100 	.word	0x20001100

0800c120 <McpsConfirm>:
{

    MibRequestConfirm_t mibGet;
    MibRequestConfirm_t mibReq;

    mibReq.Type = MIB_DEVICE_CLASS;
 800c120:	2300      	movs	r3, #0
{
 800c122:	b500      	push	{lr}
 800c124:	b091      	sub	sp, #68	; 0x44
    mibReq.Type = MIB_DEVICE_CLASS;
 800c126:	a808      	add	r0, sp, #32
 800c128:	7003      	strb	r3, [r0, #0]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800c12a:	f7fd f9ff 	bl	800952c <LoRaMacMibGetRequestConfirm>
                             "ABC"[mibReq.Param.Class], \
                             AppData.Port, \
                             AppData.BuffSize, \
                             mcpsConfirm->TxPower );)

    mibGet.Type  = MIB_CHANNELS_MASK;
 800c12e:	2324      	movs	r3, #36	; 0x24
 800c130:	466a      	mov	r2, sp
    if( LoRaMacMibGetRequestConfirm( &mibGet ) == LORAMAC_STATUS_OK )
 800c132:	4668      	mov	r0, sp
    mibGet.Type  = MIB_CHANNELS_MASK;
 800c134:	7013      	strb	r3, [r2, #0]
    if( LoRaMacMibGetRequestConfirm( &mibGet ) == LORAMAC_STATUS_OK )
 800c136:	f7fd f9f9 	bl	800952c <LoRaMacMibGetRequestConfirm>
}
 800c13a:	b011      	add	sp, #68	; 0x44
 800c13c:	bd00      	pop	{pc}
	...

0800c140 <LORA_Init>:
{
 800c140:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t devEui[] = LORAWAN_DEVICE_EUI;
 800c142:	4e66      	ldr	r6, [pc, #408]	; (800c2dc <LORA_Init+0x19c>)
{
 800c144:	b095      	sub	sp, #84	; 0x54
  uint8_t devEui[] = LORAWAN_DEVICE_EUI;
 800c146:	af10      	add	r7, sp, #64	; 0x40
{
 800c148:	0004      	movs	r4, r0
 800c14a:	000d      	movs	r5, r1
  uint8_t devEui[] = LORAWAN_DEVICE_EUI;
 800c14c:	2208      	movs	r2, #8
 800c14e:	0031      	movs	r1, r6
 800c150:	0038      	movs	r0, r7
 800c152:	f001 ff0f 	bl	800df74 <memcpy>
  uint8_t joinEui[] = LORAWAN_JOIN_EUI;
 800c156:	0031      	movs	r1, r6
 800c158:	2208      	movs	r2, #8
 800c15a:	3108      	adds	r1, #8
 800c15c:	a812      	add	r0, sp, #72	; 0x48
 800c15e:	f001 ff09 	bl	800df74 <memcpy>
  LoRaParamInit = LoRaParam;
 800c162:	4e5f      	ldr	r6, [pc, #380]	; (800c2e0 <LORA_Init+0x1a0>)
 800c164:	60b5      	str	r5, [r6, #8]
  LoRaMainCallbacks = callbacks;
 800c166:	6034      	str	r4, [r6, #0]
  PPRINTF( "ABP\n\r"); 
 800c168:	485e      	ldr	r0, [pc, #376]	; (800c2e4 <LORA_Init+0x1a4>)
 800c16a:	f000 fca1 	bl	800cab0 <TraceSend>
 800c16e:	2800      	cmp	r0, #0
 800c170:	d1fa      	bne.n	800c168 <LORA_Init+0x28>
  PPRINTF( "DevEui= %02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X\n\r", HEX8(devEui));
 800c172:	79f8      	ldrb	r0, [r7, #7]
 800c174:	78bb      	ldrb	r3, [r7, #2]
 800c176:	787a      	ldrb	r2, [r7, #1]
 800c178:	7839      	ldrb	r1, [r7, #0]
 800c17a:	9004      	str	r0, [sp, #16]
 800c17c:	79b8      	ldrb	r0, [r7, #6]
 800c17e:	9003      	str	r0, [sp, #12]
 800c180:	7978      	ldrb	r0, [r7, #5]
 800c182:	9002      	str	r0, [sp, #8]
 800c184:	7938      	ldrb	r0, [r7, #4]
 800c186:	9001      	str	r0, [sp, #4]
 800c188:	78f8      	ldrb	r0, [r7, #3]
 800c18a:	9000      	str	r0, [sp, #0]
 800c18c:	4856      	ldr	r0, [pc, #344]	; (800c2e8 <LORA_Init+0x1a8>)
 800c18e:	f000 fc8f 	bl	800cab0 <TraceSend>
 800c192:	2800      	cmp	r0, #0
 800c194:	d1ed      	bne.n	800c172 <LORA_Init+0x32>
  PPRINTF( "DevAdd=  %08X\n\r", DevAddr) ;
 800c196:	4955      	ldr	r1, [pc, #340]	; (800c2ec <LORA_Init+0x1ac>)
 800c198:	4855      	ldr	r0, [pc, #340]	; (800c2f0 <LORA_Init+0x1b0>)
 800c19a:	f000 fc89 	bl	800cab0 <TraceSend>
 800c19e:	2800      	cmp	r0, #0
 800c1a0:	d1f9      	bne.n	800c196 <LORA_Init+0x56>
  PPRINTF( "NwkSKey= %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\n\r", HEX16(NwkSEncKey));
 800c1a2:	4854      	ldr	r0, [pc, #336]	; (800c2f4 <LORA_Init+0x1b4>)
 800c1a4:	7bc4      	ldrb	r4, [r0, #15]
 800c1a6:	7883      	ldrb	r3, [r0, #2]
 800c1a8:	7842      	ldrb	r2, [r0, #1]
 800c1aa:	7801      	ldrb	r1, [r0, #0]
 800c1ac:	940c      	str	r4, [sp, #48]	; 0x30
 800c1ae:	7b84      	ldrb	r4, [r0, #14]
 800c1b0:	940b      	str	r4, [sp, #44]	; 0x2c
 800c1b2:	7b44      	ldrb	r4, [r0, #13]
 800c1b4:	940a      	str	r4, [sp, #40]	; 0x28
 800c1b6:	7b04      	ldrb	r4, [r0, #12]
 800c1b8:	9409      	str	r4, [sp, #36]	; 0x24
 800c1ba:	7ac4      	ldrb	r4, [r0, #11]
 800c1bc:	9408      	str	r4, [sp, #32]
 800c1be:	7a84      	ldrb	r4, [r0, #10]
 800c1c0:	9407      	str	r4, [sp, #28]
 800c1c2:	7a44      	ldrb	r4, [r0, #9]
 800c1c4:	9406      	str	r4, [sp, #24]
 800c1c6:	7a04      	ldrb	r4, [r0, #8]
 800c1c8:	9405      	str	r4, [sp, #20]
 800c1ca:	79c4      	ldrb	r4, [r0, #7]
 800c1cc:	9404      	str	r4, [sp, #16]
 800c1ce:	7984      	ldrb	r4, [r0, #6]
 800c1d0:	9403      	str	r4, [sp, #12]
 800c1d2:	7944      	ldrb	r4, [r0, #5]
 800c1d4:	9402      	str	r4, [sp, #8]
 800c1d6:	7904      	ldrb	r4, [r0, #4]
 800c1d8:	9401      	str	r4, [sp, #4]
 800c1da:	78c0      	ldrb	r0, [r0, #3]
 800c1dc:	9000      	str	r0, [sp, #0]
 800c1de:	4846      	ldr	r0, [pc, #280]	; (800c2f8 <LORA_Init+0x1b8>)
 800c1e0:	f000 fc66 	bl	800cab0 <TraceSend>
 800c1e4:	2800      	cmp	r0, #0
 800c1e6:	d1dc      	bne.n	800c1a2 <LORA_Init+0x62>
  PPRINTF( "AppSKey= %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\n\r", HEX16(AppSKey));
 800c1e8:	4c42      	ldr	r4, [pc, #264]	; (800c2f4 <LORA_Init+0x1b4>)
 800c1ea:	7fe0      	ldrb	r0, [r4, #31]
 800c1ec:	7ca3      	ldrb	r3, [r4, #18]
 800c1ee:	7c62      	ldrb	r2, [r4, #17]
 800c1f0:	7c21      	ldrb	r1, [r4, #16]
 800c1f2:	900c      	str	r0, [sp, #48]	; 0x30
 800c1f4:	7fa0      	ldrb	r0, [r4, #30]
 800c1f6:	900b      	str	r0, [sp, #44]	; 0x2c
 800c1f8:	7f60      	ldrb	r0, [r4, #29]
 800c1fa:	900a      	str	r0, [sp, #40]	; 0x28
 800c1fc:	7f20      	ldrb	r0, [r4, #28]
 800c1fe:	9009      	str	r0, [sp, #36]	; 0x24
 800c200:	7ee0      	ldrb	r0, [r4, #27]
 800c202:	9008      	str	r0, [sp, #32]
 800c204:	7ea0      	ldrb	r0, [r4, #26]
 800c206:	9007      	str	r0, [sp, #28]
 800c208:	7e60      	ldrb	r0, [r4, #25]
 800c20a:	9006      	str	r0, [sp, #24]
 800c20c:	7e20      	ldrb	r0, [r4, #24]
 800c20e:	9005      	str	r0, [sp, #20]
 800c210:	7de0      	ldrb	r0, [r4, #23]
 800c212:	9004      	str	r0, [sp, #16]
 800c214:	7da0      	ldrb	r0, [r4, #22]
 800c216:	9003      	str	r0, [sp, #12]
 800c218:	7d60      	ldrb	r0, [r4, #21]
 800c21a:	9002      	str	r0, [sp, #8]
 800c21c:	7d20      	ldrb	r0, [r4, #20]
 800c21e:	9001      	str	r0, [sp, #4]
 800c220:	7ce0      	ldrb	r0, [r4, #19]
 800c222:	9000      	str	r0, [sp, #0]
 800c224:	4835      	ldr	r0, [pc, #212]	; (800c2fc <LORA_Init+0x1bc>)
 800c226:	f000 fc43 	bl	800cab0 <TraceSend>
 800c22a:	900f      	str	r0, [sp, #60]	; 0x3c
 800c22c:	2800      	cmp	r0, #0
 800c22e:	d1db      	bne.n	800c1e8 <LORA_Init+0xa8>
  LoRaMacInitialization( &LoRaMacPrimitives, &LoRaMacCallbacks, LORAMAC_REGION_AS923 );
 800c230:	0031      	movs	r1, r6
 800c232:	311c      	adds	r1, #28
 800c234:	0008      	movs	r0, r1
  LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800c236:	4b32      	ldr	r3, [pc, #200]	; (800c300 <LORA_Init+0x1c0>)
  mibReq.Type = MIB_DEV_EUI;
 800c238:	0035      	movs	r5, r6
  LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800c23a:	60f3      	str	r3, [r6, #12]
  LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800c23c:	4b31      	ldr	r3, [pc, #196]	; (800c304 <LORA_Init+0x1c4>)
  LoRaMacInitialization( &LoRaMacPrimitives, &LoRaMacCallbacks, LORAMAC_REGION_AS923 );
 800c23e:	3810      	subs	r0, #16
  LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800c240:	6133      	str	r3, [r6, #16]
  LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800c242:	4b31      	ldr	r3, [pc, #196]	; (800c308 <LORA_Init+0x1c8>)
  mibReq.Type = MIB_DEV_EUI;
 800c244:	352c      	adds	r5, #44	; 0x2c
  LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800c246:	6173      	str	r3, [r6, #20]
  LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800c248:	4b30      	ldr	r3, [pc, #192]	; (800c30c <LORA_Init+0x1cc>)
 800c24a:	61b3      	str	r3, [r6, #24]
  LoRaMacCallbacks.GetBatteryLevel = LoRaMainCallbacks->BoardGetBatteryLevel;
 800c24c:	6833      	ldr	r3, [r6, #0]
 800c24e:	681a      	ldr	r2, [r3, #0]
 800c250:	61f2      	str	r2, [r6, #28]
  LoRaMacCallbacks.GetTemperatureLevel = LoRaMainCallbacks->BoardGetTemperatureLevel;
 800c252:	685a      	ldr	r2, [r3, #4]
  LoRaMacCallbacks.MacProcessNotify = LoRaMainCallbacks->MacProcessNotify;
 800c254:	6a1b      	ldr	r3, [r3, #32]
  LoRaMacCallbacks.GetTemperatureLevel = LoRaMainCallbacks->BoardGetTemperatureLevel;
 800c256:	6232      	str	r2, [r6, #32]
  LoRaMacInitialization( &LoRaMacPrimitives, &LoRaMacCallbacks, LORAMAC_REGION_AS923 );
 800c258:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  LoRaMacCallbacks.MacProcessNotify = LoRaMainCallbacks->MacProcessNotify;
 800c25a:	62b3      	str	r3, [r6, #40]	; 0x28
  LoRaMacInitialization( &LoRaMacPrimitives, &LoRaMacCallbacks, LORAMAC_REGION_AS923 );
 800c25c:	f7fc ff0e 	bl	800907c <LoRaMacInitialization>
  mibReq.Type = MIB_DEV_EUI;
 800c260:	2302      	movs	r3, #2
  LoRaMacMibSetRequestConfirm( &mibReq );
 800c262:	0028      	movs	r0, r5
  mibReq.Type = MIB_DEV_EUI;
 800c264:	702b      	strb	r3, [r5, #0]
  mibReq.Param.DevEui = devEui;
 800c266:	6337      	str	r7, [r6, #48]	; 0x30
  LoRaMacMibSetRequestConfirm( &mibReq );
 800c268:	f7fd fa3c 	bl	80096e4 <LoRaMacMibSetRequestConfirm>
  mibReq.Type = MIB_JOIN_EUI;
 800c26c:	2303      	movs	r3, #3
  LoRaMacMibSetRequestConfirm( &mibReq );
 800c26e:	0028      	movs	r0, r5
  mibReq.Type = MIB_JOIN_EUI;
 800c270:	702b      	strb	r3, [r5, #0]
  mibReq.Param.JoinEui = joinEui;
 800c272:	ab12      	add	r3, sp, #72	; 0x48
 800c274:	6333      	str	r3, [r6, #48]	; 0x30
  LoRaMacMibSetRequestConfirm( &mibReq );
 800c276:	f7fd fa35 	bl	80096e4 <LoRaMacMibSetRequestConfirm>
  mibReq.Type = MIB_ADR;
 800c27a:	2304      	movs	r3, #4
 800c27c:	702b      	strb	r3, [r5, #0]
  mibReq.Param.AdrEnable = LoRaParamInit->AdrEnable;
 800c27e:	68b3      	ldr	r3, [r6, #8]
  LoRaMacMibSetRequestConfirm( &mibReq );
 800c280:	0028      	movs	r0, r5
  mibReq.Param.AdrEnable = LoRaParamInit->AdrEnable;
 800c282:	781b      	ldrb	r3, [r3, #0]
 800c284:	712b      	strb	r3, [r5, #4]
  LoRaMacMibSetRequestConfirm( &mibReq );
 800c286:	f7fd fa2d 	bl	80096e4 <LoRaMacMibSetRequestConfirm>
  mibReq.Type = MIB_PUBLIC_NETWORK;
 800c28a:	231d      	movs	r3, #29
 800c28c:	702b      	strb	r3, [r5, #0]
  mibReq.Param.EnablePublicNetwork = LoRaParamInit->EnablePublicNetwork;
 800c28e:	68b3      	ldr	r3, [r6, #8]
  LoRaMacMibSetRequestConfirm( &mibReq );
 800c290:	0028      	movs	r0, r5
  mibReq.Param.EnablePublicNetwork = LoRaParamInit->EnablePublicNetwork;
 800c292:	789b      	ldrb	r3, [r3, #2]
 800c294:	712b      	strb	r3, [r5, #4]
  LoRaMacMibSetRequestConfirm( &mibReq );
 800c296:	f7fd fa25 	bl	80096e4 <LoRaMacMibSetRequestConfirm>
  mibReq.Type = MIB_APP_KEY;
 800c29a:	2308      	movs	r3, #8
 800c29c:	702b      	strb	r3, [r5, #0]
  mibReq.Param.AppKey = AppKey;
 800c29e:	0023      	movs	r3, r4
  LoRaMacMibSetRequestConfirm( &mibReq );
 800c2a0:	0028      	movs	r0, r5
  mibReq.Param.AppKey = AppKey;
 800c2a2:	3320      	adds	r3, #32
 800c2a4:	6333      	str	r3, [r6, #48]	; 0x30
  LoRaMacMibSetRequestConfirm( &mibReq );
 800c2a6:	f7fd fa1d 	bl	80096e4 <LoRaMacMibSetRequestConfirm>
  mibReq.Type = MIB_NWK_KEY;
 800c2aa:	2309      	movs	r3, #9
  mibReq.Param.NwkKey = NwkKey;
 800c2ac:	3430      	adds	r4, #48	; 0x30
  LoRaMacMibSetRequestConfirm( &mibReq );
 800c2ae:	0028      	movs	r0, r5
  mibReq.Type = MIB_NWK_KEY;
 800c2b0:	702b      	strb	r3, [r5, #0]
  mibReq.Param.NwkKey = NwkKey;
 800c2b2:	6334      	str	r4, [r6, #48]	; 0x30
  LoRaMacMibSetRequestConfirm( &mibReq );
 800c2b4:	f7fd fa16 	bl	80096e4 <LoRaMacMibSetRequestConfirm>
  mibReq.Type = MIB_DEVICE_CLASS;
 800c2b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  LoRaMacMibSetRequestConfirm( &mibReq );
 800c2ba:	0028      	movs	r0, r5
  mibReq.Type = MIB_DEVICE_CLASS;
 800c2bc:	702b      	strb	r3, [r5, #0]
  mibReq.Param.Class= CLASS_A;
 800c2be:	712b      	strb	r3, [r5, #4]
  LoRaMacMibSetRequestConfirm( &mibReq );
 800c2c0:	f7fd fa10 	bl	80096e4 <LoRaMacMibSetRequestConfirm>
  mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800c2c4:	2330      	movs	r3, #48	; 0x30
  LoRaMacMibSetRequestConfirm( &mibReq );
 800c2c6:	0028      	movs	r0, r5
  mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800c2c8:	702b      	strb	r3, [r5, #0]
  mibReq.Param.SystemMaxRxError = 20;
 800c2ca:	3b1c      	subs	r3, #28
 800c2cc:	6333      	str	r3, [r6, #48]	; 0x30
  LoRaMacMibSetRequestConfirm( &mibReq );
 800c2ce:	f7fd fa09 	bl	80096e4 <LoRaMacMibSetRequestConfirm>
  LoRaMacStart( );
 800c2d2:	f7fd f8bf 	bl	8009454 <LoRaMacStart>
}
 800c2d6:	b015      	add	sp, #84	; 0x54
 800c2d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c2da:	46c0      	nop			; (mov r8, r8)
 800c2dc:	0800efb4 	.word	0x0800efb4
 800c2e0:	20001100 	.word	0x20001100
 800c2e4:	0800f0a2 	.word	0x0800f0a2
 800c2e8:	0800f0a8 	.word	0x0800f0a8
 800c2ec:	14ef1417 	.word	0x14ef1417
 800c2f0:	0800f0da 	.word	0x0800f0da
 800c2f4:	2000005c 	.word	0x2000005c
 800c2f8:	0800f0ea 	.word	0x0800f0ea
 800c2fc:	0800f145 	.word	0x0800f145
 800c300:	0800c121 	.word	0x0800c121
 800c304:	0800c0c9 	.word	0x0800c0c9
 800c308:	0800c3a9 	.word	0x0800c3a9
 800c30c:	0800c0b1 	.word	0x0800c0b1

0800c310 <LORA_Join>:
{
 800c310:	b570      	push	{r4, r5, r6, lr}
    JoinParameters = mlmeReq.Req.Join;
 800c312:	4d21      	ldr	r5, [pc, #132]	; (800c398 <LORA_Join+0x88>)
 800c314:	68ab      	ldr	r3, [r5, #8]
    mibReq.Type = MIB_NET_ID;
 800c316:	002c      	movs	r4, r5
    JoinParameters = mlmeReq.Req.Join;
 800c318:	785b      	ldrb	r3, [r3, #1]
    mibReq.Type = MIB_NET_ID;
 800c31a:	342c      	adds	r4, #44	; 0x2c
    JoinParameters = mlmeReq.Req.Join;
 800c31c:	712b      	strb	r3, [r5, #4]
    mibReq.Type = MIB_NET_ID;
 800c31e:	2305      	movs	r3, #5
 800c320:	7023      	strb	r3, [r4, #0]
    mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 800c322:	2300      	movs	r3, #0
    LoRaMacMibSetRequestConfirm( &mibReq );
 800c324:	0020      	movs	r0, r4
    mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 800c326:	632b      	str	r3, [r5, #48]	; 0x30
    LoRaMacMibSetRequestConfirm( &mibReq );
 800c328:	f7fd f9dc 	bl	80096e4 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_DEV_ADDR;
 800c32c:	2306      	movs	r3, #6
 800c32e:	7023      	strb	r3, [r4, #0]
    mibReq.Param.DevAddr = DevAddr;
 800c330:	4b1a      	ldr	r3, [pc, #104]	; (800c39c <LORA_Join+0x8c>)
    LoRaMacMibSetRequestConfirm( &mibReq );
 800c332:	0020      	movs	r0, r4
    mibReq.Param.DevAddr = DevAddr;
 800c334:	632b      	str	r3, [r5, #48]	; 0x30
    LoRaMacMibSetRequestConfirm( &mibReq );
 800c336:	f7fd f9d5 	bl	80096e4 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_F_NWK_S_INT_KEY;
 800c33a:	230c      	movs	r3, #12
    mibReq.Param.FNwkSIntKey = FNwkSIntKey;
 800c33c:	4e18      	ldr	r6, [pc, #96]	; (800c3a0 <LORA_Join+0x90>)
    mibReq.Type = MIB_F_NWK_S_INT_KEY;
 800c33e:	7023      	strb	r3, [r4, #0]
    mibReq.Param.FNwkSIntKey = FNwkSIntKey;
 800c340:	0033      	movs	r3, r6
    LoRaMacMibSetRequestConfirm( &mibReq );
 800c342:	0020      	movs	r0, r4
    mibReq.Param.FNwkSIntKey = FNwkSIntKey;
 800c344:	3340      	adds	r3, #64	; 0x40
 800c346:	632b      	str	r3, [r5, #48]	; 0x30
    LoRaMacMibSetRequestConfirm( &mibReq );
 800c348:	f7fd f9cc 	bl	80096e4 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_S_NWK_S_INT_KEY;
 800c34c:	230d      	movs	r3, #13
 800c34e:	7023      	strb	r3, [r4, #0]
    mibReq.Param.SNwkSIntKey = SNwkSIntKey;
 800c350:	0033      	movs	r3, r6
    LoRaMacMibSetRequestConfirm( &mibReq );
 800c352:	0020      	movs	r0, r4
    mibReq.Param.SNwkSIntKey = SNwkSIntKey;
 800c354:	3350      	adds	r3, #80	; 0x50
 800c356:	632b      	str	r3, [r5, #48]	; 0x30
    LoRaMacMibSetRequestConfirm( &mibReq );
 800c358:	f7fd f9c4 	bl	80096e4 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_NWK_S_ENC_KEY;
 800c35c:	230e      	movs	r3, #14
    LoRaMacMibSetRequestConfirm( &mibReq );
 800c35e:	0020      	movs	r0, r4
    mibReq.Param.NwkSEncKey = NwkSEncKey;
 800c360:	632e      	str	r6, [r5, #48]	; 0x30
    mibReq.Type = MIB_NWK_S_ENC_KEY;
 800c362:	7023      	strb	r3, [r4, #0]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800c364:	f7fd f9be 	bl	80096e4 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_APP_S_KEY;
 800c368:	230f      	movs	r3, #15
    mibReq.Param.AppSKey = AppSKey;
 800c36a:	3610      	adds	r6, #16
    LoRaMacMibSetRequestConfirm( &mibReq );
 800c36c:	0020      	movs	r0, r4
    mibReq.Param.AppSKey = AppSKey;
 800c36e:	632e      	str	r6, [r5, #48]	; 0x30
    mibReq.Type = MIB_APP_S_KEY;
 800c370:	7023      	strb	r3, [r4, #0]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800c372:	f7fd f9b7 	bl	80096e4 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_NETWORK_ACTIVATION;
 800c376:	2301      	movs	r3, #1
    LoRaMacMibSetRequestConfirm( &mibReq );
 800c378:	0020      	movs	r0, r4
    mibReq.Type = MIB_NETWORK_ACTIVATION;
 800c37a:	7023      	strb	r3, [r4, #0]
    mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 800c37c:	7123      	strb	r3, [r4, #4]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800c37e:	f7fd f9b1 	bl	80096e4 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 800c382:	2335      	movs	r3, #53	; 0x35
 800c384:	7023      	strb	r3, [r4, #0]
    mibReq.Param.AbpLrWanVersion = abpLrWanVersion;
 800c386:	4b07      	ldr	r3, [pc, #28]	; (800c3a4 <LORA_Join+0x94>)
    LoRaMacMibSetRequestConfirm( &mibReq );
 800c388:	0020      	movs	r0, r4
    mibReq.Param.AbpLrWanVersion = abpLrWanVersion;
 800c38a:	632b      	str	r3, [r5, #48]	; 0x30
    LoRaMacMibSetRequestConfirm( &mibReq );
 800c38c:	f7fd f9aa 	bl	80096e4 <LoRaMacMibSetRequestConfirm>
    LoRaMainCallbacks->LORA_HasJoined();
 800c390:	682b      	ldr	r3, [r5, #0]
 800c392:	695b      	ldr	r3, [r3, #20]
 800c394:	4798      	blx	r3
}
 800c396:	bd70      	pop	{r4, r5, r6, pc}
 800c398:	20001100 	.word	0x20001100
 800c39c:	14ef1417 	.word	0x14ef1417
 800c3a0:	2000005c 	.word	0x2000005c
 800c3a4:	01000300 	.word	0x01000300

0800c3a8 <MlmeConfirm>:
    switch( mlmeConfirm->MlmeRequest )
 800c3a8:	7803      	ldrb	r3, [r0, #0]
{
 800c3aa:	b510      	push	{r4, lr}
 800c3ac:	0004      	movs	r4, r0
    switch( mlmeConfirm->MlmeRequest )
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d002      	beq.n	800c3b8 <MlmeConfirm+0x10>
 800c3b2:	2b03      	cmp	r3, #3
 800c3b4:	d00b      	beq.n	800c3ce <MlmeConfirm+0x26>
}
 800c3b6:	bd10      	pop	{r4, pc}
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800c3b8:	7843      	ldrb	r3, [r0, #1]
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d104      	bne.n	800c3c8 <MlmeConfirm+0x20>
              LoRaMainCallbacks->LORA_HasJoined();
 800c3be:	4b09      	ldr	r3, [pc, #36]	; (800c3e4 <MlmeConfirm+0x3c>)
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	695b      	ldr	r3, [r3, #20]
 800c3c4:	4798      	blx	r3
 800c3c6:	e7f6      	b.n	800c3b6 <MlmeConfirm+0xe>
                LORA_Join();
 800c3c8:	f7ff ffa2 	bl	800c310 <LORA_Join>
 800c3cc:	e7f3      	b.n	800c3b6 <MlmeConfirm+0xe>
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800c3ce:	7843      	ldrb	r3, [r0, #1]
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d1f0      	bne.n	800c3b6 <MlmeConfirm+0xe>
                if (certif_running() == true )
 800c3d4:	f7ff fd82 	bl	800bedc <certif_running>
 800c3d8:	2800      	cmp	r0, #0
 800c3da:	d0ec      	beq.n	800c3b6 <MlmeConfirm+0xe>
                     certif_linkCheck( mlmeConfirm);
 800c3dc:	0020      	movs	r0, r4
 800c3de:	f7ff fd8b 	bl	800bef8 <certif_linkCheck>
}
 800c3e2:	e7e8      	b.n	800c3b6 <MlmeConfirm+0xe>
 800c3e4:	20001100 	.word	0x20001100

0800c3e8 <LORA_JoinStatus>:
{
 800c3e8:	b500      	push	{lr}
 800c3ea:	b089      	sub	sp, #36	; 0x24
  mibReq.Type = MIB_NETWORK_ACTIVATION;
 800c3ec:	2301      	movs	r3, #1
 800c3ee:	466a      	mov	r2, sp
  LoRaMacMibGetRequestConfirm( &mibReq );
 800c3f0:	4668      	mov	r0, sp
  mibReq.Type = MIB_NETWORK_ACTIVATION;
 800c3f2:	7013      	strb	r3, [r2, #0]
  LoRaMacMibGetRequestConfirm( &mibReq );
 800c3f4:	f7fd f89a 	bl	800952c <LoRaMacMibGetRequestConfirm>
  if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 800c3f8:	466b      	mov	r3, sp
 800c3fa:	7918      	ldrb	r0, [r3, #4]
 800c3fc:	1e43      	subs	r3, r0, #1
 800c3fe:	4198      	sbcs	r0, r3
    return LORA_RESET;
 800c400:	b2c0      	uxtb	r0, r0
}
 800c402:	b009      	add	sp, #36	; 0x24
 800c404:	bd00      	pop	{pc}
	...

0800c408 <LORA_send>:
{
 800c408:	b570      	push	{r4, r5, r6, lr}
 800c40a:	b086      	sub	sp, #24
 800c40c:	0004      	movs	r4, r0
 800c40e:	000e      	movs	r6, r1
    if (certif_running() == true)
 800c410:	f7ff fd64 	bl	800bedc <certif_running>
 800c414:	0005      	movs	r5, r0
      return false;
 800c416:	2000      	movs	r0, #0
    if (certif_running() == true)
 800c418:	4285      	cmp	r5, r0
 800c41a:	d113      	bne.n	800c444 <LORA_send+0x3c>
    if( LoRaMacQueryTxPossible( AppData->BuffSize, &txInfo ) != LORAMAC_STATUS_OK )
 800c41c:	7920      	ldrb	r0, [r4, #4]
 800c41e:	a901      	add	r1, sp, #4
 800c420:	f7fd f820 	bl	8009464 <LoRaMacQueryTxPossible>
 800c424:	ab02      	add	r3, sp, #8
 800c426:	4a13      	ldr	r2, [pc, #76]	; (800c474 <LORA_send+0x6c>)
 800c428:	2800      	cmp	r0, #0
 800c42a:	d00d      	beq.n	800c448 <LORA_send+0x40>
        mcpsReq.Req.Unconfirmed.Datarate = LoRaParamInit->TxDatarate;
 800c42c:	6892      	ldr	r2, [r2, #8]
        mcpsReq.Type = MCPS_UNCONFIRMED;
 800c42e:	701d      	strb	r5, [r3, #0]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800c430:	609d      	str	r5, [r3, #8]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800c432:	819d      	strh	r5, [r3, #12]
        mcpsReq.Req.Unconfirmed.Datarate = LoRaParamInit->TxDatarate;
 800c434:	7852      	ldrb	r2, [r2, #1]
            mcpsReq.Req.Confirmed.Datarate = LoRaParamInit->TxDatarate;
 800c436:	739a      	strb	r2, [r3, #14]
    if( LoRaMacMcpsRequest( &mcpsReq ) == LORAMAC_STATUS_OK )
 800c438:	0018      	movs	r0, r3
 800c43a:	f7fd fc43 	bl	8009cc4 <LoRaMacMcpsRequest>
 800c43e:	1e43      	subs	r3, r0, #1
 800c440:	4198      	sbcs	r0, r3
 800c442:	b2c0      	uxtb	r0, r0
}  
 800c444:	b006      	add	sp, #24
 800c446:	bd70      	pop	{r4, r5, r6, pc}
 800c448:	6892      	ldr	r2, [r2, #8]
 800c44a:	7965      	ldrb	r5, [r4, #5]
 800c44c:	7852      	ldrb	r2, [r2, #1]
 800c44e:	7920      	ldrb	r0, [r4, #4]
 800c450:	6821      	ldr	r1, [r4, #0]
 800c452:	b252      	sxtb	r2, r2
        if( IsTxConfirmed == LORAWAN_UNCONFIRMED_MSG )
 800c454:	2e00      	cmp	r6, #0
 800c456:	d104      	bne.n	800c462 <LORA_send+0x5a>
            mcpsReq.Type = MCPS_UNCONFIRMED;
 800c458:	701e      	strb	r6, [r3, #0]
            mcpsReq.Req.Unconfirmed.fPort = AppData->Port;
 800c45a:	711d      	strb	r5, [r3, #4]
            mcpsReq.Req.Unconfirmed.fBufferSize = AppData->BuffSize;
 800c45c:	8198      	strh	r0, [r3, #12]
            mcpsReq.Req.Unconfirmed.fBuffer = AppData->Buff;
 800c45e:	6099      	str	r1, [r3, #8]
 800c460:	e7e9      	b.n	800c436 <LORA_send+0x2e>
            mcpsReq.Type = MCPS_CONFIRMED;
 800c462:	2401      	movs	r4, #1
            mcpsReq.Req.Confirmed.fBuffer = AppData->Buff;
 800c464:	6099      	str	r1, [r3, #8]
            mcpsReq.Req.Confirmed.NbTrials = 8;
 800c466:	2108      	movs	r1, #8
            mcpsReq.Type = MCPS_CONFIRMED;
 800c468:	701c      	strb	r4, [r3, #0]
            mcpsReq.Req.Confirmed.fPort = AppData->Port;
 800c46a:	711d      	strb	r5, [r3, #4]
            mcpsReq.Req.Confirmed.fBufferSize = AppData->BuffSize;
 800c46c:	8198      	strh	r0, [r3, #12]
            mcpsReq.Req.Confirmed.NbTrials = 8;
 800c46e:	73d9      	strb	r1, [r3, #15]
 800c470:	e7e1      	b.n	800c436 <LORA_send+0x2e>
 800c472:	46c0      	nop			; (mov r8, r8)
 800c474:	20001100 	.word	0x20001100

0800c478 <LORA_RequestClass>:
{
 800c478:	b570      	push	{r4, r5, r6, lr}
 800c47a:	b088      	sub	sp, #32
  mibReq.Type = MIB_DEVICE_CLASS;
 800c47c:	466b      	mov	r3, sp
 800c47e:	2600      	movs	r6, #0
{
 800c480:	0005      	movs	r5, r0
  LoRaMacMibGetRequestConfirm( &mibReq );
 800c482:	4668      	mov	r0, sp
  mibReq.Type = MIB_DEVICE_CLASS;
 800c484:	701e      	strb	r6, [r3, #0]
  LoRaMacMibGetRequestConfirm( &mibReq );
 800c486:	f7fd f851 	bl	800952c <LoRaMacMibGetRequestConfirm>
  currentClass = mibReq.Param.Class;
 800c48a:	466b      	mov	r3, sp
 800c48c:	791b      	ldrb	r3, [r3, #4]
  LoraErrorStatus Errorstatus = LORA_SUCCESS;
 800c48e:	0034      	movs	r4, r6
  if (currentClass != newClass)
 800c490:	42ab      	cmp	r3, r5
 800c492:	d010      	beq.n	800c4b6 <LORA_RequestClass+0x3e>
    switch (newClass)
 800c494:	2d01      	cmp	r5, #1
 800c496:	d016      	beq.n	800c4c6 <LORA_RequestClass+0x4e>
 800c498:	42b5      	cmp	r5, r6
 800c49a:	d003      	beq.n	800c4a4 <LORA_RequestClass+0x2c>
 800c49c:	2d02      	cmp	r5, #2
 800c49e:	d016      	beq.n	800c4ce <LORA_RequestClass+0x56>
  LoraErrorStatus Errorstatus = LORA_SUCCESS;
 800c4a0:	0034      	movs	r4, r6
 800c4a2:	e008      	b.n	800c4b6 <LORA_RequestClass+0x3e>
        mibReq.Param.Class = CLASS_A;
 800c4a4:	466b      	mov	r3, sp
        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800c4a6:	4668      	mov	r0, sp
        mibReq.Param.Class = CLASS_A;
 800c4a8:	711d      	strb	r5, [r3, #4]
        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800c4aa:	f7fd f91b 	bl	80096e4 <LoRaMacMibSetRequestConfirm>
 800c4ae:	1e04      	subs	r4, r0, #0
 800c4b0:	d004      	beq.n	800c4bc <LORA_RequestClass+0x44>
          Errorstatus = LORA_ERROR;
 800c4b2:	2401      	movs	r4, #1
 800c4b4:	4264      	negs	r4, r4
}
 800c4b6:	0020      	movs	r0, r4
 800c4b8:	b008      	add	sp, #32
 800c4ba:	bd70      	pop	{r4, r5, r6, pc}
          LoRaMainCallbacks->LORA_ConfirmClass(CLASS_A);
 800c4bc:	4b0b      	ldr	r3, [pc, #44]	; (800c4ec <LORA_RequestClass+0x74>)
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	699b      	ldr	r3, [r3, #24]
          LoRaMainCallbacks->LORA_ConfirmClass(CLASS_C);
 800c4c2:	4798      	blx	r3
 800c4c4:	e7f7      	b.n	800c4b6 <LORA_RequestClass+0x3e>
        PRINTF( "warning: LORAMAC_CLASSB_ENABLED has not been defined at compilation\n\r");
 800c4c6:	480a      	ldr	r0, [pc, #40]	; (800c4f0 <LORA_RequestClass+0x78>)
 800c4c8:	f000 faf2 	bl	800cab0 <TraceSend>
 800c4cc:	e7e8      	b.n	800c4a0 <LORA_RequestClass+0x28>
        if (currentClass != CLASS_A)
 800c4ce:	1e5c      	subs	r4, r3, #1
 800c4d0:	41a3      	sbcs	r3, r4
 800c4d2:	425c      	negs	r4, r3
        mibReq.Param.Class = CLASS_C;
 800c4d4:	466b      	mov	r3, sp
        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800c4d6:	4668      	mov	r0, sp
        mibReq.Param.Class = CLASS_C;
 800c4d8:	711d      	strb	r5, [r3, #4]
        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800c4da:	f7fd f903 	bl	80096e4 <LoRaMacMibSetRequestConfirm>
 800c4de:	2800      	cmp	r0, #0
 800c4e0:	d1e7      	bne.n	800c4b2 <LORA_RequestClass+0x3a>
          LoRaMainCallbacks->LORA_ConfirmClass(CLASS_C);
 800c4e2:	4b02      	ldr	r3, [pc, #8]	; (800c4ec <LORA_RequestClass+0x74>)
 800c4e4:	0028      	movs	r0, r5
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	699b      	ldr	r3, [r3, #24]
 800c4ea:	e7ea      	b.n	800c4c2 <LORA_RequestClass+0x4a>
 800c4ec:	20001100 	.word	0x20001100
 800c4f0:	0800f1a0 	.word	0x0800f1a0

0800c4f4 <LPM_SetOffMode>:

/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/
void LPM_SetOffMode(LPM_Id_t id, LPM_SetMode_t mode)
{
 800c4f4:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c4f6:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800c4fa:	b672      	cpsid	i
  BACKUP_PRIMASK();
  
  DISABLE_IRQ( );
  
  
  switch(mode)
 800c4fc:	2900      	cmp	r1, #0
 800c4fe:	d008      	beq.n	800c512 <LPM_SetOffMode+0x1e>
 800c500:	2901      	cmp	r1, #1
 800c502:	d103      	bne.n	800c50c <LPM_SetOffMode+0x18>
  {
    case LPM_Disable:
    {
      OffModeDisable |= (uint32_t)id;
 800c504:	4b05      	ldr	r3, [pc, #20]	; (800c51c <LPM_SetOffMode+0x28>)
 800c506:	681a      	ldr	r2, [r3, #0]
 800c508:	4310      	orrs	r0, r2
 800c50a:	6018      	str	r0, [r3, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c50c:	f384 8810 	msr	PRIMASK, r4
  }
  
  RESTORE_PRIMASK( );

  return;
}
 800c510:	bd10      	pop	{r4, pc}
      OffModeDisable &= ~(uint32_t)id;
 800c512:	4a02      	ldr	r2, [pc, #8]	; (800c51c <LPM_SetOffMode+0x28>)
 800c514:	6813      	ldr	r3, [r2, #0]
 800c516:	4383      	bics	r3, r0
 800c518:	6013      	str	r3, [r2, #0]
      break;
 800c51a:	e7f7      	b.n	800c50c <LPM_SetOffMode+0x18>
 800c51c:	2000114c 	.word	0x2000114c

0800c520 <LPM_SetStopMode>:

void LPM_SetStopMode(LPM_Id_t id, LPM_SetMode_t mode)
{
 800c520:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c522:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800c526:	b672      	cpsid	i
  BACKUP_PRIMASK();
  
  DISABLE_IRQ( );
  
  
  switch(mode)
 800c528:	2900      	cmp	r1, #0
 800c52a:	d008      	beq.n	800c53e <LPM_SetStopMode+0x1e>
 800c52c:	2901      	cmp	r1, #1
 800c52e:	d103      	bne.n	800c538 <LPM_SetStopMode+0x18>
  {
    case LPM_Disable:
    {
      StopModeDisable |= (uint32_t)id;
 800c530:	4b05      	ldr	r3, [pc, #20]	; (800c548 <LPM_SetStopMode+0x28>)
 800c532:	685a      	ldr	r2, [r3, #4]
 800c534:	4310      	orrs	r0, r2
 800c536:	6058      	str	r0, [r3, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c538:	f384 8810 	msr	PRIMASK, r4
      break;
  }
  RESTORE_PRIMASK( );

  return;
}
 800c53c:	bd10      	pop	{r4, pc}
      StopModeDisable &= ~(uint32_t)id;
 800c53e:	4a02      	ldr	r2, [pc, #8]	; (800c548 <LPM_SetStopMode+0x28>)
 800c540:	6853      	ldr	r3, [r2, #4]
 800c542:	4383      	bics	r3, r0
 800c544:	6053      	str	r3, [r2, #4]
      break;
 800c546:	e7f7      	b.n	800c538 <LPM_SetStopMode+0x18>
 800c548:	2000114c 	.word	0x2000114c

0800c54c <LPM_GetMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c54c:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800c550:	b672      	cpsid	i
  
  DISABLE_IRQ( );

  if(StopModeDisable )
  {
    mode_selected = LPM_SleepMode;
 800c552:	2000      	movs	r0, #0
  if(StopModeDisable )
 800c554:	4b05      	ldr	r3, [pc, #20]	; (800c56c <LPM_GetMode+0x20>)
 800c556:	6859      	ldr	r1, [r3, #4]
 800c558:	4281      	cmp	r1, r0
 800c55a:	d103      	bne.n	800c564 <LPM_GetMode+0x18>
  }
  else
  {
    if(OffModeDisable)
 800c55c:	6818      	ldr	r0, [r3, #0]
    {
      mode_selected = LPM_StopMode;
    }
    else
    {
      mode_selected = LPM_OffMode;
 800c55e:	4243      	negs	r3, r0
 800c560:	4158      	adcs	r0, r3
 800c562:	3001      	adds	r0, #1
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c564:	f382 8810 	msr	PRIMASK, r2
  }

  RESTORE_PRIMASK( );

  return mode_selected;
}
 800c568:	4770      	bx	lr
 800c56a:	46c0      	nop			; (mov r8, r8)
 800c56c:	2000114c 	.word	0x2000114c

0800c570 <add_elementSize_and_inc_writeIdx>:
  }
}

static void add_elementSize_and_inc_writeIdx(queue_param_t* queue,uint16_t element_size)
{
  queue->queue_buff[queue->queue_write_idx++]=(uint8_t) (element_size>>8);
 800c570:	8843      	ldrh	r3, [r0, #2]
{
 800c572:	b510      	push	{r4, lr}
  queue->queue_buff[queue->queue_write_idx++]=(uint8_t) (element_size>>8);
 800c574:	1c5a      	adds	r2, r3, #1
 800c576:	6884      	ldr	r4, [r0, #8]
 800c578:	8042      	strh	r2, [r0, #2]
 800c57a:	0a0a      	lsrs	r2, r1, #8
 800c57c:	54e2      	strb	r2, [r4, r3]
  /*wrap if needed*/
  if ( queue->queue_write_idx == queue->queue_size)
 800c57e:	8842      	ldrh	r2, [r0, #2]
 800c580:	88c3      	ldrh	r3, [r0, #6]
 800c582:	429a      	cmp	r2, r3
 800c584:	d101      	bne.n	800c58a <add_elementSize_and_inc_writeIdx+0x1a>
  {
    queue->queue_write_idx=0;
 800c586:	2300      	movs	r3, #0
 800c588:	8043      	strh	r3, [r0, #2]
  }
  queue->queue_buff[queue->queue_write_idx++]=(uint8_t) (element_size);
 800c58a:	8843      	ldrh	r3, [r0, #2]
 800c58c:	1c5a      	adds	r2, r3, #1
 800c58e:	8042      	strh	r2, [r0, #2]
 800c590:	6882      	ldr	r2, [r0, #8]
 800c592:	54d1      	strb	r1, [r2, r3]
  /*wrap if needed*/
  if ( queue->queue_write_idx == queue->queue_size)
 800c594:	8842      	ldrh	r2, [r0, #2]
 800c596:	88c3      	ldrh	r3, [r0, #6]
 800c598:	429a      	cmp	r2, r3
 800c59a:	d101      	bne.n	800c5a0 <add_elementSize_and_inc_writeIdx+0x30>
  {
    queue->queue_write_idx=0;
 800c59c:	2300      	movs	r3, #0
 800c59e:	8043      	strh	r3, [r0, #2]
  }
}
 800c5a0:	bd10      	pop	{r4, pc}

0800c5a2 <circular_queue_init>:
  queue->queue_read_idx=0;
 800c5a2:	2300      	movs	r3, #0
  queue->queue_buff=queue_buff;
 800c5a4:	6081      	str	r1, [r0, #8]
  queue->queue_read_idx=0;
 800c5a6:	6003      	str	r3, [r0, #0]
  queue->queue_write_idx=0;
 800c5a8:	8083      	strh	r3, [r0, #4]
  queue->queue_size=queue_size;
 800c5aa:	80c2      	strh	r2, [r0, #6]
  queue->queue_full=0;
 800c5ac:	7303      	strb	r3, [r0, #12]
}
 800c5ae:	4770      	bx	lr

0800c5b0 <circular_queue_add>:
{
 800c5b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (queue->queue_write_idx>=queue->queue_read_idx)
 800c5b2:	8803      	ldrh	r3, [r0, #0]
{
 800c5b4:	0015      	movs	r5, r2
  if (queue->queue_write_idx>=queue->queue_read_idx)
 800c5b6:	8842      	ldrh	r2, [r0, #2]
{
 800c5b8:	0004      	movs	r4, r0
 800c5ba:	000f      	movs	r7, r1
  if (queue->queue_write_idx>=queue->queue_read_idx)
 800c5bc:	429a      	cmp	r2, r3
 800c5be:	d301      	bcc.n	800c5c4 <circular_queue_add+0x14>
    free_size=queue->queue_size-(queue->queue_write_idx-queue->queue_read_idx); 
 800c5c0:	88c1      	ldrh	r1, [r0, #6]
 800c5c2:	185b      	adds	r3, r3, r1
  if ( queue->queue_full==1)
 800c5c4:	7b21      	ldrb	r1, [r4, #12]
    free_size=(queue->queue_read_idx-queue->queue_write_idx); 
 800c5c6:	1a9b      	subs	r3, r3, r2
 800c5c8:	b21b      	sxth	r3, r3
  if ( queue->queue_full==1)
 800c5ca:	2901      	cmp	r1, #1
 800c5cc:	d100      	bne.n	800c5d0 <circular_queue_add+0x20>
    free_size=0;
 800c5ce:	2300      	movs	r3, #0
  if ((buff_size+ELEMENT_SIZE_LEN<=free_buff_len)&& 
 800c5d0:	1c69      	adds	r1, r5, #1
 800c5d2:	4299      	cmp	r1, r3
 800c5d4:	da27      	bge.n	800c626 <circular_queue_add+0x76>
      ((queue->queue_write_idx+buff_size+ELEMENT_SIZE_LEN<=queue->queue_size) 
 800c5d6:	18a8      	adds	r0, r5, r2
 800c5d8:	88e1      	ldrh	r1, [r4, #6]
 800c5da:	3001      	adds	r0, #1
  if ((buff_size+ELEMENT_SIZE_LEN<=free_buff_len)&& 
 800c5dc:	4288      	cmp	r0, r1
 800c5de:	db02      	blt.n	800c5e6 <circular_queue_add+0x36>
        || (queue->queue_write_idx>=queue->queue_size-ELEMENT_SIZE_LEN))) /*elementSize cut in 2 or elementSize at Top*/
 800c5e0:	3902      	subs	r1, #2
 800c5e2:	428a      	cmp	r2, r1
 800c5e4:	db1f      	blt.n	800c626 <circular_queue_add+0x76>
    add_elementSize_and_inc_writeIdx(queue, buff_size);
 800c5e6:	0029      	movs	r1, r5
 800c5e8:	0020      	movs	r0, r4
 800c5ea:	f7ff ffc1 	bl	800c570 <add_elementSize_and_inc_writeIdx>
    queue_copy(queue->queue_buff+queue->queue_write_idx,buff,buff_size);
 800c5ee:	68a3      	ldr	r3, [r4, #8]
 800c5f0:	8862      	ldrh	r2, [r4, #2]
 800c5f2:	189a      	adds	r2, r3, r2
 800c5f4:	2300      	movs	r3, #0
  while(size--)
 800c5f6:	429d      	cmp	r5, r3
 800c5f8:	d111      	bne.n	800c61e <circular_queue_add+0x6e>
    queue->queue_write_idx+=buff_size;
 800c5fa:	8863      	ldrh	r3, [r4, #2]
 800c5fc:	18ed      	adds	r5, r5, r3
    if (queue->queue_write_idx==queue->queue_size)
 800c5fe:	88e3      	ldrh	r3, [r4, #6]
    queue->queue_write_idx+=buff_size;
 800c600:	b2ad      	uxth	r5, r5
 800c602:	8065      	strh	r5, [r4, #2]
    if (queue->queue_write_idx==queue->queue_size)
 800c604:	42ab      	cmp	r3, r5
 800c606:	d101      	bne.n	800c60c <circular_queue_add+0x5c>
        queue->queue_write_idx=0;
 800c608:	2300      	movs	r3, #0
 800c60a:	8063      	strh	r3, [r4, #2]
    queue->queue_nb_element++; 
 800c60c:	88a3      	ldrh	r3, [r4, #4]
    if (queue->queue_write_idx== queue->queue_read_idx)
 800c60e:	8862      	ldrh	r2, [r4, #2]
    queue->queue_nb_element++; 
 800c610:	3301      	adds	r3, #1
 800c612:	80a3      	strh	r3, [r4, #4]
    if (queue->queue_write_idx== queue->queue_read_idx)
 800c614:	8823      	ldrh	r3, [r4, #0]
 800c616:	429a      	cmp	r2, r3
 800c618:	d031      	beq.n	800c67e <circular_queue_add+0xce>
    status=0;
 800c61a:	2000      	movs	r0, #0
}
 800c61c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    *out++= *in++;
 800c61e:	5cf9      	ldrb	r1, [r7, r3]
 800c620:	54d1      	strb	r1, [r2, r3]
 800c622:	3301      	adds	r3, #1
 800c624:	e7e7      	b.n	800c5f6 <circular_queue_add+0x46>
  else if (buff_size+2*ELEMENT_SIZE_LEN<=free_buff_len)
 800c626:	1ce9      	adds	r1, r5, #3
 800c628:	428b      	cmp	r3, r1
 800c62a:	dd33      	ble.n	800c694 <circular_queue_add+0xe4>
    queue_copy(queue->queue_buff+queue->queue_write_idx,buff,top_size);
 800c62c:	2600      	movs	r6, #0
    uint16_t top_size = queue->queue_size-(queue->queue_write_idx+ELEMENT_SIZE_LEN);
 800c62e:	88e3      	ldrh	r3, [r4, #6]
    add_elementSize_and_inc_writeIdx(queue,top_size);
 800c630:	0020      	movs	r0, r4
    uint16_t top_size = queue->queue_size-(queue->queue_write_idx+ELEMENT_SIZE_LEN);
 800c632:	3b02      	subs	r3, #2
 800c634:	1a9a      	subs	r2, r3, r2
 800c636:	b293      	uxth	r3, r2
    add_elementSize_and_inc_writeIdx(queue,top_size);
 800c638:	0019      	movs	r1, r3
    uint16_t top_size = queue->queue_size-(queue->queue_write_idx+ELEMENT_SIZE_LEN);
 800c63a:	9301      	str	r3, [sp, #4]
    add_elementSize_and_inc_writeIdx(queue,top_size);
 800c63c:	f7ff ff98 	bl	800c570 <add_elementSize_and_inc_writeIdx>
    queue_copy(queue->queue_buff+queue->queue_write_idx,buff,top_size);
 800c640:	8863      	ldrh	r3, [r4, #2]
 800c642:	68a2      	ldr	r2, [r4, #8]
 800c644:	18d3      	adds	r3, r2, r3
  while(size--)
 800c646:	9a01      	ldr	r2, [sp, #4]
 800c648:	4296      	cmp	r6, r2
 800c64a:	d11b      	bne.n	800c684 <circular_queue_add+0xd4>
    queue->queue_write_idx=0;
 800c64c:	2300      	movs	r3, #0
    buff_size-=top_size;
 800c64e:	1bad      	subs	r5, r5, r6
 800c650:	b2ad      	uxth	r5, r5
    queue->queue_write_idx=0;
 800c652:	8063      	strh	r3, [r4, #2]
    add_elementSize_and_inc_writeIdx(queue, buff_size);
 800c654:	0029      	movs	r1, r5
 800c656:	0020      	movs	r0, r4
 800c658:	f7ff ff8a 	bl	800c570 <add_elementSize_and_inc_writeIdx>
    queue_copy(queue->queue_buff+queue->queue_write_idx,buff+top_size,buff_size);
 800c65c:	68a3      	ldr	r3, [r4, #8]
 800c65e:	8862      	ldrh	r2, [r4, #2]
 800c660:	19be      	adds	r6, r7, r6
 800c662:	189a      	adds	r2, r3, r2
 800c664:	2300      	movs	r3, #0
  while(size--)
 800c666:	429d      	cmp	r5, r3
 800c668:	d110      	bne.n	800c68c <circular_queue_add+0xdc>
    queue->queue_write_idx+=buff_size;
 800c66a:	8863      	ldrh	r3, [r4, #2]
 800c66c:	18ed      	adds	r5, r5, r3
    queue->queue_nb_element+=2;
 800c66e:	88a3      	ldrh	r3, [r4, #4]
    queue->queue_write_idx+=buff_size;
 800c670:	b2ad      	uxth	r5, r5
    queue->queue_nb_element+=2;
 800c672:	3302      	adds	r3, #2
 800c674:	80a3      	strh	r3, [r4, #4]
    if (queue->queue_write_idx== queue->queue_read_idx)
 800c676:	8823      	ldrh	r3, [r4, #0]
    queue->queue_write_idx+=buff_size;
 800c678:	8065      	strh	r5, [r4, #2]
    if (queue->queue_write_idx== queue->queue_read_idx)
 800c67a:	42ab      	cmp	r3, r5
 800c67c:	d1cd      	bne.n	800c61a <circular_queue_add+0x6a>
      queue->queue_full=1;
 800c67e:	2301      	movs	r3, #1
 800c680:	7323      	strb	r3, [r4, #12]
 800c682:	e7ca      	b.n	800c61a <circular_queue_add+0x6a>
    *out++= *in++;
 800c684:	5dba      	ldrb	r2, [r7, r6]
 800c686:	559a      	strb	r2, [r3, r6]
 800c688:	3601      	adds	r6, #1
 800c68a:	e7dc      	b.n	800c646 <circular_queue_add+0x96>
 800c68c:	5cf1      	ldrb	r1, [r6, r3]
 800c68e:	54d1      	strb	r1, [r2, r3]
 800c690:	3301      	adds	r3, #1
 800c692:	e7e8      	b.n	800c666 <circular_queue_add+0xb6>
    status=-1;
 800c694:	2001      	movs	r0, #1
 800c696:	4240      	negs	r0, r0
  return status;
 800c698:	e7c0      	b.n	800c61c <circular_queue_add+0x6c>

0800c69a <circular_queue_get>:
{
 800c69a:	b570      	push	{r4, r5, r6, lr}
  if (queue->queue_nb_element==0)
 800c69c:	8883      	ldrh	r3, [r0, #4]
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d015      	beq.n	800c6ce <circular_queue_get+0x34>
    uint16_t read_idx=queue->queue_read_idx;
 800c6a2:	8804      	ldrh	r4, [r0, #0]
    size=(uint16_t) queue->queue_buff[read_idx++]<<8;
 800c6a4:	6885      	ldr	r5, [r0, #8]
 800c6a6:	1c63      	adds	r3, r4, #1
    if (read_idx==queue->queue_size)
 800c6a8:	88c6      	ldrh	r6, [r0, #6]
    size=(uint16_t) queue->queue_buff[read_idx++]<<8;
 800c6aa:	5d2c      	ldrb	r4, [r5, r4]
 800c6ac:	b29b      	uxth	r3, r3
 800c6ae:	0224      	lsls	r4, r4, #8
    if (read_idx==queue->queue_size)
 800c6b0:	429e      	cmp	r6, r3
 800c6b2:	d100      	bne.n	800c6b6 <circular_queue_get+0x1c>
      read_idx=0;
 800c6b4:	2300      	movs	r3, #0
    size|=(uint16_t) queue->queue_buff[read_idx++];
 800c6b6:	1c58      	adds	r0, r3, #1
 800c6b8:	5ceb      	ldrb	r3, [r5, r3]
 800c6ba:	b280      	uxth	r0, r0
 800c6bc:	431c      	orrs	r4, r3
    if (read_idx==queue->queue_size)
 800c6be:	4286      	cmp	r6, r0
 800c6c0:	d100      	bne.n	800c6c4 <circular_queue_get+0x2a>
      read_idx=0;
 800c6c2:	2000      	movs	r0, #0
    *buff= queue->queue_buff+read_idx;
 800c6c4:	1828      	adds	r0, r5, r0
 800c6c6:	6008      	str	r0, [r1, #0]
    status=0;
 800c6c8:	2000      	movs	r0, #0
    * buff_size=size;
 800c6ca:	8014      	strh	r4, [r2, #0]
}
 800c6cc:	bd70      	pop	{r4, r5, r6, pc}
    status=-1;
 800c6ce:	2001      	movs	r0, #1
 800c6d0:	4240      	negs	r0, r0
  return status;
 800c6d2:	e7fb      	b.n	800c6cc <circular_queue_get+0x32>

0800c6d4 <circular_queue_remove>:
{
 800c6d4:	b570      	push	{r4, r5, r6, lr}
  if (queue->queue_nb_element==0)
 800c6d6:	8882      	ldrh	r2, [r0, #4]
 800c6d8:	2a00      	cmp	r2, #0
 800c6da:	d023      	beq.n	800c724 <circular_queue_remove+0x50>
    size=(uint16_t) queue->queue_buff[queue->queue_read_idx++]<<8;
 800c6dc:	8803      	ldrh	r3, [r0, #0]
 800c6de:	6885      	ldr	r5, [r0, #8]
 800c6e0:	1c59      	adds	r1, r3, #1
 800c6e2:	b289      	uxth	r1, r1
 800c6e4:	8001      	strh	r1, [r0, #0]
 800c6e6:	5ceb      	ldrb	r3, [r5, r3]
    if (queue->queue_read_idx==queue->queue_size)
 800c6e8:	88c4      	ldrh	r4, [r0, #6]
    size=(uint16_t) queue->queue_buff[queue->queue_read_idx++]<<8;
 800c6ea:	021b      	lsls	r3, r3, #8
    if (queue->queue_read_idx==queue->queue_size)
 800c6ec:	42a1      	cmp	r1, r4
 800c6ee:	d101      	bne.n	800c6f4 <circular_queue_remove+0x20>
      queue->queue_read_idx=0;
 800c6f0:	2100      	movs	r1, #0
 800c6f2:	8001      	strh	r1, [r0, #0]
    size|=(uint16_t) queue->queue_buff[queue->queue_read_idx++];
 800c6f4:	8806      	ldrh	r6, [r0, #0]
 800c6f6:	1c71      	adds	r1, r6, #1
 800c6f8:	b289      	uxth	r1, r1
 800c6fa:	8001      	strh	r1, [r0, #0]
 800c6fc:	5dad      	ldrb	r5, [r5, r6]
 800c6fe:	432b      	orrs	r3, r5
    if (queue->queue_read_idx==queue->queue_size)
 800c700:	428c      	cmp	r4, r1
 800c702:	d101      	bne.n	800c708 <circular_queue_remove+0x34>
      queue->queue_read_idx=0;
 800c704:	2100      	movs	r1, #0
 800c706:	8001      	strh	r1, [r0, #0]
    queue->queue_read_idx+=size;
 800c708:	8801      	ldrh	r1, [r0, #0]
 800c70a:	185b      	adds	r3, r3, r1
 800c70c:	b29b      	uxth	r3, r3
    if (queue->queue_read_idx==queue->queue_size)
 800c70e:	429c      	cmp	r4, r3
 800c710:	d006      	beq.n	800c720 <circular_queue_remove+0x4c>
        queue->queue_read_idx=0;
 800c712:	8003      	strh	r3, [r0, #0]
    queue->queue_full=0;
 800c714:	2300      	movs	r3, #0
    queue->queue_nb_element--;
 800c716:	3a01      	subs	r2, #1
 800c718:	8082      	strh	r2, [r0, #4]
    queue->queue_full=0;
 800c71a:	7303      	strb	r3, [r0, #12]
    status=0;
 800c71c:	0018      	movs	r0, r3
}
 800c71e:	bd70      	pop	{r4, r5, r6, pc}
        queue->queue_read_idx=0;
 800c720:	2300      	movs	r3, #0
 800c722:	e7f6      	b.n	800c712 <circular_queue_remove+0x3e>
      status=-1;
 800c724:	2001      	movs	r0, #1
 800c726:	4240      	negs	r0, r0
  return status;
 800c728:	e7f9      	b.n	800c71e <circular_queue_remove+0x4a>

0800c72a <circular_queue_sense>:
  if (queue->queue_nb_element==0)
 800c72a:	8880      	ldrh	r0, [r0, #4]
 800c72c:	4243      	negs	r3, r0
 800c72e:	4158      	adcs	r0, r3
 800c730:	4240      	negs	r0, r0
}
 800c732:	4770      	bx	lr

0800c734 <SysTimeAdd>:
static void CalendarDiv60( uint32_t in, uint32_t* out, uint32_t* remainder );

const char *WeekDayString[]={ "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" };

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 800c734:	b082      	sub	sp, #8
 800c736:	b513      	push	{r0, r1, r4, lr}
    SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };

    c.Seconds = a.Seconds + b.Seconds;
 800c738:	18c9      	adds	r1, r1, r3
{
 800c73a:	9305      	str	r3, [sp, #20]
    c.SubSeconds = a.SubSeconds + b.SubSeconds;
 800c73c:	ab05      	add	r3, sp, #20
 800c73e:	889c      	ldrh	r4, [r3, #4]
 800c740:	18a2      	adds	r2, r4, r2
 800c742:	b292      	uxth	r2, r2
    if( c.SubSeconds >= 1000 )
 800c744:	4c06      	ldr	r4, [pc, #24]	; (800c760 <SysTimeAdd+0x2c>)
    c.SubSeconds = a.SubSeconds + b.SubSeconds;
 800c746:	b213      	sxth	r3, r2
    if( c.SubSeconds >= 1000 )
 800c748:	42a3      	cmp	r3, r4
 800c74a:	dd03      	ble.n	800c754 <SysTimeAdd+0x20>
    {
        c.Seconds++;
        c.SubSeconds -= 1000;
 800c74c:	4b05      	ldr	r3, [pc, #20]	; (800c764 <SysTimeAdd+0x30>)
        c.Seconds++;
 800c74e:	3101      	adds	r1, #1
        c.SubSeconds -= 1000;
 800c750:	18d2      	adds	r2, r2, r3
 800c752:	b213      	sxth	r3, r2
    }
    return c;
 800c754:	6001      	str	r1, [r0, #0]
 800c756:	8083      	strh	r3, [r0, #4]
}
 800c758:	bc16      	pop	{r1, r2, r4}
 800c75a:	bc08      	pop	{r3}
 800c75c:	b002      	add	sp, #8
 800c75e:	4718      	bx	r3
 800c760:	000003e7 	.word	0x000003e7
 800c764:	fffffc18 	.word	0xfffffc18

0800c768 <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 800c768:	b082      	sub	sp, #8
 800c76a:	b513      	push	{r0, r1, r4, lr}
    SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };

    c.Seconds = a.Seconds - b.Seconds;
 800c76c:	1ac9      	subs	r1, r1, r3
{
 800c76e:	9305      	str	r3, [sp, #20]
    c.SubSeconds = a.SubSeconds - b.SubSeconds;
 800c770:	ab05      	add	r3, sp, #20
 800c772:	889b      	ldrh	r3, [r3, #4]
 800c774:	1ad2      	subs	r2, r2, r3
 800c776:	b292      	uxth	r2, r2
 800c778:	b213      	sxth	r3, r2
    if( c.SubSeconds < 0 )
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	da04      	bge.n	800c788 <SysTimeSub+0x20>
    {
        c.Seconds--;
        c.SubSeconds += 1000;
 800c77e:	23fa      	movs	r3, #250	; 0xfa
 800c780:	009b      	lsls	r3, r3, #2
 800c782:	18d2      	adds	r2, r2, r3
        c.Seconds--;
 800c784:	3901      	subs	r1, #1
        c.SubSeconds += 1000;
 800c786:	b213      	sxth	r3, r2
    }
    return c;
 800c788:	6001      	str	r1, [r0, #0]
 800c78a:	8083      	strh	r3, [r0, #4]
}
 800c78c:	bc16      	pop	{r1, r2, r4}
 800c78e:	bc08      	pop	{r3}
 800c790:	b002      	add	sp, #8
 800c792:	4718      	bx	r3

0800c794 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 800c794:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    SysTime_t DeltaTime;
  
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800c796:	2300      	movs	r3, #0
{
 800c798:	9000      	str	r0, [sp, #0]
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800c79a:	ac02      	add	r4, sp, #8

    calendarTime.Seconds = HW_RTC_GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800c79c:	a803      	add	r0, sp, #12
{
 800c79e:	9101      	str	r1, [sp, #4]
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800c7a0:	9302      	str	r3, [sp, #8]
 800c7a2:	80a3      	strh	r3, [r4, #4]
    calendarTime.Seconds = HW_RTC_GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800c7a4:	f000 fd9c 	bl	800d2e0 <HW_RTC_GetCalendarTime>
    c.Seconds = a.Seconds - b.Seconds;
 800c7a8:	9b00      	ldr	r3, [sp, #0]
    calendarTime.Seconds = HW_RTC_GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800c7aa:	9002      	str	r0, [sp, #8]
    c.Seconds = a.Seconds - b.Seconds;
 800c7ac:	1a18      	subs	r0, r3, r0
    c.SubSeconds = a.SubSeconds - b.SubSeconds;
 800c7ae:	466b      	mov	r3, sp
 800c7b0:	88a1      	ldrh	r1, [r4, #4]
 800c7b2:	889b      	ldrh	r3, [r3, #4]
 800c7b4:	1a5b      	subs	r3, r3, r1
 800c7b6:	b29b      	uxth	r3, r3
 800c7b8:	b219      	sxth	r1, r3
    if( c.SubSeconds < 0 )
 800c7ba:	2900      	cmp	r1, #0
 800c7bc:	da04      	bge.n	800c7c8 <SysTimeSet+0x34>
        c.SubSeconds += 1000;
 800c7be:	22fa      	movs	r2, #250	; 0xfa
 800c7c0:	0092      	lsls	r2, r2, #2
 800c7c2:	189b      	adds	r3, r3, r2
        c.Seconds--;
 800c7c4:	3801      	subs	r0, #1
        c.SubSeconds += 1000;
 800c7c6:	b219      	sxth	r1, r3

    // sysTime is epoch
    DeltaTime = SysTimeSub( sysTime, calendarTime );

    HW_RTC_BKUPWrite( DeltaTime.Seconds, ( uint32_t )DeltaTime.SubSeconds );
 800c7c8:	f000 fd9e 	bl	800d308 <HW_RTC_BKUPWrite>
}
 800c7cc:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
	...

0800c7d0 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 800c7d0:	b530      	push	{r4, r5, lr}
 800c7d2:	b085      	sub	sp, #20
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800c7d4:	2300      	movs	r3, #0
 800c7d6:	466a      	mov	r2, sp
{
 800c7d8:	0004      	movs	r4, r0
    SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
    SysTime_t DeltaTime;

    calendarTime.Seconds = HW_RTC_GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800c7da:	a801      	add	r0, sp, #4
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800c7dc:	8093      	strh	r3, [r2, #4]
 800c7de:	9300      	str	r3, [sp, #0]
    calendarTime.Seconds = HW_RTC_GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800c7e0:	f000 fd7e 	bl	800d2e0 <HW_RTC_GetCalendarTime>

    HW_RTC_BKUPRead( &DeltaTime.Seconds, ( uint32_t* )&DeltaTime.SubSeconds );
 800c7e4:	ad02      	add	r5, sp, #8
    calendarTime.Seconds = HW_RTC_GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800c7e6:	9000      	str	r0, [sp, #0]
    HW_RTC_BKUPRead( &DeltaTime.Seconds, ( uint32_t* )&DeltaTime.SubSeconds );
 800c7e8:	a903      	add	r1, sp, #12
 800c7ea:	0028      	movs	r0, r5
 800c7ec:	f000 fd9c 	bl	800d328 <HW_RTC_BKUPRead>
    c.SubSeconds = a.SubSeconds + b.SubSeconds;
 800c7f0:	4669      	mov	r1, sp
    c.Seconds = a.Seconds + b.Seconds;
 800c7f2:	9b02      	ldr	r3, [sp, #8]
 800c7f4:	9a00      	ldr	r2, [sp, #0]
    c.SubSeconds = a.SubSeconds + b.SubSeconds;
 800c7f6:	8889      	ldrh	r1, [r1, #4]
    c.Seconds = a.Seconds + b.Seconds;
 800c7f8:	189a      	adds	r2, r3, r2
    c.SubSeconds = a.SubSeconds + b.SubSeconds;
 800c7fa:	88ab      	ldrh	r3, [r5, #4]
    if( c.SubSeconds >= 1000 )
 800c7fc:	4807      	ldr	r0, [pc, #28]	; (800c81c <SysTimeGet+0x4c>)
    c.SubSeconds = a.SubSeconds + b.SubSeconds;
 800c7fe:	185b      	adds	r3, r3, r1
 800c800:	b29b      	uxth	r3, r3
 800c802:	b219      	sxth	r1, r3
    if( c.SubSeconds >= 1000 )
 800c804:	4281      	cmp	r1, r0
 800c806:	dd03      	ble.n	800c810 <SysTimeGet+0x40>
        c.SubSeconds -= 1000;
 800c808:	4905      	ldr	r1, [pc, #20]	; (800c820 <SysTimeGet+0x50>)
        c.Seconds++;
 800c80a:	3201      	adds	r2, #1
        c.SubSeconds -= 1000;
 800c80c:	185b      	adds	r3, r3, r1
 800c80e:	b219      	sxth	r1, r3

    sysTime = SysTimeAdd( DeltaTime, calendarTime );

    return sysTime;
}
 800c810:	0020      	movs	r0, r4
    return sysTime;
 800c812:	6022      	str	r2, [r4, #0]
 800c814:	80a1      	strh	r1, [r4, #4]
}
 800c816:	b005      	add	sp, #20
 800c818:	bd30      	pop	{r4, r5, pc}
 800c81a:	46c0      	nop			; (mov r8, r8)
 800c81c:	000003e7 	.word	0x000003e7
 800c820:	fffffc18 	.word	0xfffffc18

0800c824 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 800c824:	b537      	push	{r0, r1, r2, r4, r5, lr}
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800c826:	2300      	movs	r3, #0
 800c828:	466c      	mov	r4, sp
{
 800c82a:	0005      	movs	r5, r0

    calendarTime.Seconds = HW_RTC_GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800c82c:	a801      	add	r0, sp, #4
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800c82e:	9300      	str	r3, [sp, #0]
 800c830:	80a3      	strh	r3, [r4, #4]
    calendarTime.Seconds = HW_RTC_GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800c832:	f000 fd55 	bl	800d2e0 <HW_RTC_GetCalendarTime>
    
    return calendarTime;
 800c836:	002b      	movs	r3, r5
    calendarTime.Seconds = HW_RTC_GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800c838:	9000      	str	r0, [sp, #0]
    return calendarTime;
 800c83a:	cc06      	ldmia	r4!, {r1, r2}
 800c83c:	c306      	stmia	r3!, {r1, r2}
}
 800c83e:	0028      	movs	r0, r5
 800c840:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0800c842 <TimerSetTimeout>:
    cur = cur->Next;
  }
  return false;
}
static void TimerSetTimeout( TimerEvent_t *obj )
{
 800c842:	b570      	push	{r4, r5, r6, lr}
 800c844:	0004      	movs	r4, r0
  int32_t minTicks= HW_RTC_GetMinimumTimeout( );
 800c846:	f000 fbe1 	bl	800d00c <HW_RTC_GetMinimumTimeout>
  obj->IsNext2Expire = true; 
 800c84a:	2301      	movs	r3, #1
 800c84c:	7263      	strb	r3, [r4, #9]
  int32_t minTicks= HW_RTC_GetMinimumTimeout( );
 800c84e:	0005      	movs	r5, r0

  // In case deadline too soon
  if(obj->Timestamp  < (HW_RTC_GetTimerElapsedTime(  ) + minTicks) )
 800c850:	6826      	ldr	r6, [r4, #0]
 800c852:	f000 fbef 	bl	800d034 <HW_RTC_GetTimerElapsedTime>
 800c856:	1828      	adds	r0, r5, r0
 800c858:	4286      	cmp	r6, r0
 800c85a:	d203      	bcs.n	800c864 <TimerSetTimeout+0x22>
  {
    obj->Timestamp = HW_RTC_GetTimerElapsedTime(  ) + minTicks;
 800c85c:	f000 fbea 	bl	800d034 <HW_RTC_GetTimerElapsedTime>
 800c860:	182d      	adds	r5, r5, r0
 800c862:	6025      	str	r5, [r4, #0]
  }
  HW_RTC_SetAlarm( obj->Timestamp );
 800c864:	6820      	ldr	r0, [r4, #0]
 800c866:	f000 fc11 	bl	800d08c <HW_RTC_SetAlarm>
}
 800c86a:	bd70      	pop	{r4, r5, r6, pc}

0800c86c <TimerInsertNewHeadTimer>:
  obj->Next = NULL;
}

static void TimerInsertNewHeadTimer( TimerEvent_t *obj )
{
  TimerEvent_t* cur = TimerListHead;
 800c86c:	4a05      	ldr	r2, [pc, #20]	; (800c884 <TimerInsertNewHeadTimer+0x18>)
{
 800c86e:	b510      	push	{r4, lr}
  TimerEvent_t* cur = TimerListHead;
 800c870:	6813      	ldr	r3, [r2, #0]

  if( cur != NULL )
 800c872:	2b00      	cmp	r3, #0
 800c874:	d001      	beq.n	800c87a <TimerInsertNewHeadTimer+0xe>
  {
    cur->IsNext2Expire = false;
 800c876:	2100      	movs	r1, #0
 800c878:	7259      	strb	r1, [r3, #9]
  }

  obj->Next = cur;
 800c87a:	6143      	str	r3, [r0, #20]
  TimerListHead = obj;
 800c87c:	6010      	str	r0, [r2, #0]
  TimerSetTimeout( TimerListHead );
 800c87e:	f7ff ffe0 	bl	800c842 <TimerSetTimeout>
}
 800c882:	bd10      	pop	{r4, pc}
 800c884:	20001154 	.word	0x20001154

0800c888 <TimerInit>:
  obj->Timestamp = 0;
 800c888:	2300      	movs	r3, #0
  obj->Callback = callback;
 800c88a:	60c1      	str	r1, [r0, #12]
  obj->Timestamp = 0;
 800c88c:	6003      	str	r3, [r0, #0]
  obj->ReloadValue = 0;
 800c88e:	6043      	str	r3, [r0, #4]
  obj->IsStarted = false;
 800c890:	7203      	strb	r3, [r0, #8]
  obj->IsNext2Expire = false;
 800c892:	7243      	strb	r3, [r0, #9]
  obj->Context = NULL;
 800c894:	6103      	str	r3, [r0, #16]
  obj->Next = NULL;
 800c896:	6143      	str	r3, [r0, #20]
}
 800c898:	4770      	bx	lr
	...

0800c89c <TimerStart>:
{
 800c89c:	b570      	push	{r4, r5, r6, lr}
 800c89e:	0004      	movs	r4, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c8a0:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800c8a4:	b672      	cpsid	i
  if( ( obj == NULL ) || ( TimerExists( obj ) == true ) )
 800c8a6:	2800      	cmp	r0, #0
 800c8a8:	d010      	beq.n	800c8cc <TimerStart+0x30>
  TimerEvent_t* cur = TimerListHead;
 800c8aa:	4e18      	ldr	r6, [pc, #96]	; (800c90c <TimerStart+0x70>)
 800c8ac:	6832      	ldr	r2, [r6, #0]
 800c8ae:	0013      	movs	r3, r2
  while( cur != NULL )
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d10e      	bne.n	800c8d2 <TimerStart+0x36>
  obj->Timestamp = obj->ReloadValue;
 800c8b4:	6861      	ldr	r1, [r4, #4]
  obj->IsNext2Expire = false;
 800c8b6:	7263      	strb	r3, [r4, #9]
  obj->Timestamp = obj->ReloadValue;
 800c8b8:	6021      	str	r1, [r4, #0]
  obj->IsStarted = true;
 800c8ba:	2101      	movs	r1, #1
 800c8bc:	7221      	strb	r1, [r4, #8]
  if( TimerListHead == NULL )
 800c8be:	2a00      	cmp	r2, #0
 800c8c0:	d10b      	bne.n	800c8da <TimerStart+0x3e>
    HW_RTC_SetTimerContext( );
 800c8c2:	f000 fcbf 	bl	800d244 <HW_RTC_SetTimerContext>
      TimerInsertNewHeadTimer( obj);
 800c8c6:	0020      	movs	r0, r4
 800c8c8:	f7ff ffd0 	bl	800c86c <TimerInsertNewHeadTimer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c8cc:	f385 8810 	msr	PRIMASK, r5
}
 800c8d0:	bd70      	pop	{r4, r5, r6, pc}
    if( cur == obj )
 800c8d2:	429c      	cmp	r4, r3
 800c8d4:	d0fa      	beq.n	800c8cc <TimerStart+0x30>
    cur = cur->Next;
 800c8d6:	695b      	ldr	r3, [r3, #20]
 800c8d8:	e7ea      	b.n	800c8b0 <TimerStart+0x14>
    elapsedTime = HW_RTC_GetTimerElapsedTime( );
 800c8da:	f000 fbab 	bl	800d034 <HW_RTC_GetTimerElapsedTime>
    obj->Timestamp += elapsedTime;
 800c8de:	6823      	ldr	r3, [r4, #0]
 800c8e0:	18c0      	adds	r0, r0, r3
    if( obj->Timestamp < TimerListHead->Timestamp )
 800c8e2:	6833      	ldr	r3, [r6, #0]
    obj->Timestamp += elapsedTime;
 800c8e4:	6020      	str	r0, [r4, #0]
    if( obj->Timestamp < TimerListHead->Timestamp )
 800c8e6:	681a      	ldr	r2, [r3, #0]
 800c8e8:	4290      	cmp	r0, r2
 800c8ea:	d3ec      	bcc.n	800c8c6 <TimerStart+0x2a>
  TimerEvent_t* next = TimerListHead->Next;
 800c8ec:	695a      	ldr	r2, [r3, #20]
  while (cur->Next != NULL )
 800c8ee:	6959      	ldr	r1, [r3, #20]
 800c8f0:	2900      	cmp	r1, #0
 800c8f2:	d102      	bne.n	800c8fa <TimerStart+0x5e>
  cur->Next = obj;
 800c8f4:	615c      	str	r4, [r3, #20]
  obj->Next = NULL;
 800c8f6:	6161      	str	r1, [r4, #20]
 800c8f8:	e7e8      	b.n	800c8cc <TimerStart+0x30>
    if( obj->Timestamp  > next->Timestamp )
 800c8fa:	6811      	ldr	r1, [r2, #0]
 800c8fc:	4288      	cmp	r0, r1
 800c8fe:	d902      	bls.n	800c906 <TimerStart+0x6a>
        next = next->Next;
 800c900:	0013      	movs	r3, r2
 800c902:	6952      	ldr	r2, [r2, #20]
 800c904:	e7f3      	b.n	800c8ee <TimerStart+0x52>
        cur->Next = obj;
 800c906:	615c      	str	r4, [r3, #20]
        obj->Next = next;
 800c908:	6162      	str	r2, [r4, #20]
 800c90a:	e7df      	b.n	800c8cc <TimerStart+0x30>
 800c90c:	20001154 	.word	0x20001154

0800c910 <TimerIrqHandler>:
{
 800c910:	b570      	push	{r4, r5, r6, lr}
  uint32_t old =  HW_RTC_GetTimerContext( );
 800c912:	f000 fcdf 	bl	800d2d4 <HW_RTC_GetTimerContext>
 800c916:	0005      	movs	r5, r0
  uint32_t now =  HW_RTC_SetTimerContext( );
 800c918:	f000 fc94 	bl	800d244 <HW_RTC_SetTimerContext>
  if ( TimerListHead != NULL )
 800c91c:	4c1c      	ldr	r4, [pc, #112]	; (800c990 <TimerIrqHandler+0x80>)
 800c91e:	6822      	ldr	r2, [r4, #0]
 800c920:	2a00      	cmp	r2, #0
 800c922:	d016      	beq.n	800c952 <TimerIrqHandler+0x42>
  uint32_t DeltaContext = now - old; //intentionnal wrap around
 800c924:	1b40      	subs	r0, r0, r5
 800c926:	0013      	movs	r3, r2
        next->Timestamp = 0 ;
 800c928:	2500      	movs	r5, #0
    for (cur=TimerListHead; cur->Next != NULL; cur= cur->Next)
 800c92a:	695b      	ldr	r3, [r3, #20]
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d106      	bne.n	800c93e <TimerIrqHandler+0x2e>
    TimerListHead = TimerListHead->Next;
 800c930:	6951      	ldr	r1, [r2, #20]
    cur->IsStarted = false;
 800c932:	7213      	strb	r3, [r2, #8]
    exec_cb( cur->Callback, cur->Context );
 800c934:	68d3      	ldr	r3, [r2, #12]
    TimerListHead = TimerListHead->Next;
 800c936:	6021      	str	r1, [r4, #0]
    exec_cb( cur->Callback, cur->Context );
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d108      	bne.n	800c94e <TimerIrqHandler+0x3e>
 800c93c:	e7fe      	b.n	800c93c <TimerIrqHandler+0x2c>
      if (next->Timestamp > DeltaContext)
 800c93e:	6819      	ldr	r1, [r3, #0]
 800c940:	4281      	cmp	r1, r0
 800c942:	d902      	bls.n	800c94a <TimerIrqHandler+0x3a>
        next->Timestamp -= DeltaContext;
 800c944:	1a09      	subs	r1, r1, r0
 800c946:	6019      	str	r1, [r3, #0]
 800c948:	e7ef      	b.n	800c92a <TimerIrqHandler+0x1a>
        next->Timestamp = 0 ;
 800c94a:	601d      	str	r5, [r3, #0]
 800c94c:	e7ed      	b.n	800c92a <TimerIrqHandler+0x1a>
    exec_cb( cur->Callback, cur->Context );
 800c94e:	6910      	ldr	r0, [r2, #16]
 800c950:	4798      	blx	r3
  while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < HW_RTC_GetTimerElapsedTime(  )  ))
 800c952:	6823      	ldr	r3, [r4, #0]
 800c954:	2b00      	cmp	r3, #0
 800c956:	d106      	bne.n	800c966 <TimerIrqHandler+0x56>
  if( ( TimerListHead != NULL ) && ( TimerListHead->IsNext2Expire == false ) )
 800c958:	6820      	ldr	r0, [r4, #0]
 800c95a:	2800      	cmp	r0, #0
 800c95c:	d111      	bne.n	800c982 <TimerIrqHandler+0x72>
}
 800c95e:	bd70      	pop	{r4, r5, r6, pc}
   exec_cb( cur->Callback, cur->Context );
 800c960:	6918      	ldr	r0, [r3, #16]
 800c962:	4790      	blx	r2
 800c964:	e7f5      	b.n	800c952 <TimerIrqHandler+0x42>
  while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < HW_RTC_GetTimerElapsedTime(  )  ))
 800c966:	681d      	ldr	r5, [r3, #0]
 800c968:	f000 fb64 	bl	800d034 <HW_RTC_GetTimerElapsedTime>
 800c96c:	4285      	cmp	r5, r0
 800c96e:	d2f3      	bcs.n	800c958 <TimerIrqHandler+0x48>
   cur = TimerListHead;
 800c970:	6823      	ldr	r3, [r4, #0]
   TimerListHead = TimerListHead->Next;
 800c972:	695a      	ldr	r2, [r3, #20]
 800c974:	6022      	str	r2, [r4, #0]
   cur->IsStarted = false;
 800c976:	2200      	movs	r2, #0
 800c978:	721a      	strb	r2, [r3, #8]
   exec_cb( cur->Callback, cur->Context );
 800c97a:	68da      	ldr	r2, [r3, #12]
 800c97c:	2a00      	cmp	r2, #0
 800c97e:	d1ef      	bne.n	800c960 <TimerIrqHandler+0x50>
 800c980:	e7fe      	b.n	800c980 <TimerIrqHandler+0x70>
  if( ( TimerListHead != NULL ) && ( TimerListHead->IsNext2Expire == false ) )
 800c982:	7a43      	ldrb	r3, [r0, #9]
 800c984:	2b00      	cmp	r3, #0
 800c986:	d1ea      	bne.n	800c95e <TimerIrqHandler+0x4e>
    TimerSetTimeout( TimerListHead );
 800c988:	f7ff ff5b 	bl	800c842 <TimerSetTimeout>
}
 800c98c:	e7e7      	b.n	800c95e <TimerIrqHandler+0x4e>
 800c98e:	46c0      	nop			; (mov r8, r8)
 800c990:	20001154 	.word	0x20001154

0800c994 <TimerStop>:
{
 800c994:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c996:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800c99a:	b672      	cpsid	i
  TimerEvent_t* prev = TimerListHead;
 800c99c:	4c12      	ldr	r4, [pc, #72]	; (800c9e8 <TimerStop+0x54>)
 800c99e:	6823      	ldr	r3, [r4, #0]
  if( ( TimerListHead == NULL ) || ( obj == NULL ) )
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d001      	beq.n	800c9a8 <TimerStop+0x14>
 800c9a4:	2800      	cmp	r0, #0
 800c9a6:	d102      	bne.n	800c9ae <TimerStop+0x1a>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c9a8:	f385 8810 	msr	PRIMASK, r5
}  
 800c9ac:	bd70      	pop	{r4, r5, r6, pc}
  obj->IsStarted = false;
 800c9ae:	2200      	movs	r2, #0
 800c9b0:	7202      	strb	r2, [r0, #8]
  if( TimerListHead == obj ) // Stop the Head                  
 800c9b2:	4283      	cmp	r3, r0
 800c9b4:	d110      	bne.n	800c9d8 <TimerStop+0x44>
    if( TimerListHead->IsNext2Expire == true ) // The head is already running 
 800c9b6:	7a59      	ldrb	r1, [r3, #9]
 800c9b8:	695e      	ldr	r6, [r3, #20]
 800c9ba:	4291      	cmp	r1, r2
 800c9bc:	d009      	beq.n	800c9d2 <TimerStop+0x3e>
      TimerListHead->IsNext2Expire = false;
 800c9be:	725a      	strb	r2, [r3, #9]
      if( TimerListHead->Next != NULL )
 800c9c0:	4296      	cmp	r6, r2
 800c9c2:	d004      	beq.n	800c9ce <TimerStop+0x3a>
        TimerSetTimeout( TimerListHead );
 800c9c4:	0030      	movs	r0, r6
        TimerListHead = TimerListHead->Next;
 800c9c6:	6026      	str	r6, [r4, #0]
        TimerSetTimeout( TimerListHead );
 800c9c8:	f7ff ff3b 	bl	800c842 <TimerSetTimeout>
 800c9cc:	e7ec      	b.n	800c9a8 <TimerStop+0x14>
        HW_RTC_StopAlarm( );
 800c9ce:	f000 fb45 	bl	800d05c <HW_RTC_StopAlarm>
        TimerListHead = NULL;
 800c9d2:	6026      	str	r6, [r4, #0]
 800c9d4:	e7e8      	b.n	800c9a8 <TimerStop+0x14>
 800c9d6:	0013      	movs	r3, r2
        cur = cur->Next;
 800c9d8:	695a      	ldr	r2, [r3, #20]
    while( cur != NULL )
 800c9da:	2a00      	cmp	r2, #0
 800c9dc:	d0e4      	beq.n	800c9a8 <TimerStop+0x14>
      if( cur == obj )
 800c9de:	4290      	cmp	r0, r2
 800c9e0:	d1f9      	bne.n	800c9d6 <TimerStop+0x42>
        if( cur->Next != NULL )
 800c9e2:	6942      	ldr	r2, [r0, #20]
 800c9e4:	615a      	str	r2, [r3, #20]
 800c9e6:	e7df      	b.n	800c9a8 <TimerStop+0x14>
 800c9e8:	20001154 	.word	0x20001154

0800c9ec <TimerSetValue>:
{
 800c9ec:	b570      	push	{r4, r5, r6, lr}
 800c9ee:	0005      	movs	r5, r0
  uint32_t ticks = HW_RTC_ms2Tick( value );
 800c9f0:	0008      	movs	r0, r1
 800c9f2:	f000 fb0d 	bl	800d010 <HW_RTC_ms2Tick>
 800c9f6:	0004      	movs	r4, r0
  TimerStop( obj );
 800c9f8:	0028      	movs	r0, r5
 800c9fa:	f7ff ffcb 	bl	800c994 <TimerStop>
  minValue = HW_RTC_GetMinimumTimeout( );
 800c9fe:	f000 fb05 	bl	800d00c <HW_RTC_GetMinimumTimeout>
 800ca02:	4284      	cmp	r4, r0
 800ca04:	d200      	bcs.n	800ca08 <TimerSetValue+0x1c>
 800ca06:	0004      	movs	r4, r0
  obj->Timestamp = ticks;
 800ca08:	602c      	str	r4, [r5, #0]
  obj->ReloadValue = ticks;
 800ca0a:	606c      	str	r4, [r5, #4]
}
 800ca0c:	bd70      	pop	{r4, r5, r6, pc}

0800ca0e <TimerGetCurrentTime>:
{
 800ca0e:	b510      	push	{r4, lr}
  uint32_t now = HW_RTC_GetTimerValue( );
 800ca10:	f000 fb1c 	bl	800d04c <HW_RTC_GetTimerValue>
  return  HW_RTC_Tick2ms(now);
 800ca14:	f000 fb04 	bl	800d020 <HW_RTC_Tick2ms>
}
 800ca18:	bd10      	pop	{r4, pc}

0800ca1a <TimerGetElapsedTime>:
{
 800ca1a:	b570      	push	{r4, r5, r6, lr}
 800ca1c:	1e04      	subs	r4, r0, #0
  if ( past == 0 )
 800ca1e:	d009      	beq.n	800ca34 <TimerGetElapsedTime+0x1a>
  uint32_t nowInTicks = HW_RTC_GetTimerValue( );
 800ca20:	f000 fb14 	bl	800d04c <HW_RTC_GetTimerValue>
 800ca24:	0005      	movs	r5, r0
  uint32_t pastInTicks = HW_RTC_ms2Tick( past );
 800ca26:	0020      	movs	r0, r4
 800ca28:	f000 faf2 	bl	800d010 <HW_RTC_ms2Tick>
  return HW_RTC_Tick2ms( nowInTicks- pastInTicks );
 800ca2c:	1a28      	subs	r0, r5, r0
 800ca2e:	f000 faf7 	bl	800d020 <HW_RTC_Tick2ms>
 800ca32:	0004      	movs	r4, r0
}
 800ca34:	0020      	movs	r0, r4
 800ca36:	bd70      	pop	{r4, r5, r6, pc}

0800ca38 <Trace_TxCpltCallback>:
}

/* Private Functions Definition ------------------------------------------------------*/

static void Trace_TxCpltCallback(void)
{
 800ca38:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ca3a:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800ca3e:	b672      	cpsid	i

  BACKUP_PRIMASK();

  DISABLE_IRQ(); /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  circular_queue_remove(&MsgTraceQueue);
 800ca40:	4c10      	ldr	r4, [pc, #64]	; (800ca84 <Trace_TxCpltCallback+0x4c>)
 800ca42:	0020      	movs	r0, r4
 800ca44:	f7ff fe46 	bl	800c6d4 <circular_queue_remove>
  //DBG_GPIO_SET(GPIOB, GPIO_PIN_13);
  //DBG_GPIO_RST(GPIOB, GPIO_PIN_13);
  /* Sense if new data to be sent */
  status=circular_queue_sense(&MsgTraceQueue);
 800ca48:	0020      	movs	r0, r4
 800ca4a:	f7ff fe6e 	bl	800c72a <circular_queue_sense>

  if ( status == 0) 
 800ca4e:	2800      	cmp	r0, #0
 800ca50:	d10d      	bne.n	800ca6e <Trace_TxCpltCallback+0x36>
  {
    circular_queue_get(&MsgTraceQueue,&buffer,&bufSize);
 800ca52:	466b      	mov	r3, sp
 800ca54:	1c9e      	adds	r6, r3, #2
 800ca56:	0032      	movs	r2, r6
 800ca58:	a901      	add	r1, sp, #4
 800ca5a:	0020      	movs	r0, r4
 800ca5c:	f7ff fe1d 	bl	800c69a <circular_queue_get>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ca60:	f385 8810 	msr	PRIMASK, r5
    RESTORE_PRIMASK();
    //DBG_GPIO_SET(GPIOB, GPIO_PIN_14);
    //DBG_GPIO_RST(GPIOB, GPIO_PIN_14);
    OutputTrace(buffer, bufSize);
 800ca64:	8831      	ldrh	r1, [r6, #0]
 800ca66:	9801      	ldr	r0, [sp, #4]
 800ca68:	f001 f97c 	bl	800dd64 <vcom_Trace>

    LPM_SetStopMode(LPM_UART_TX_Id , LPM_Enable );
    TracePeripheralReady = SET;
    RESTORE_PRIMASK();
  }
}
 800ca6c:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    LPM_SetStopMode(LPM_UART_TX_Id , LPM_Enable );
 800ca6e:	2100      	movs	r1, #0
 800ca70:	2020      	movs	r0, #32
 800ca72:	f7ff fd55 	bl	800c520 <LPM_SetStopMode>
    TracePeripheralReady = SET;
 800ca76:	2201      	movs	r2, #1
 800ca78:	4b03      	ldr	r3, [pc, #12]	; (800ca88 <Trace_TxCpltCallback+0x50>)
 800ca7a:	701a      	strb	r2, [r3, #0]
 800ca7c:	f385 8810 	msr	PRIMASK, r5
}
 800ca80:	e7f4      	b.n	800ca6c <Trace_TxCpltCallback+0x34>
 800ca82:	46c0      	nop			; (mov r8, r8)
 800ca84:	20001158 	.word	0x20001158
 800ca88:	20000194 	.word	0x20000194

0800ca8c <TraceInit>:
{
 800ca8c:	b510      	push	{r4, lr}
  OutputInit(Trace_TxCpltCallback);
 800ca8e:	4805      	ldr	r0, [pc, #20]	; (800caa4 <TraceInit+0x18>)
 800ca90:	f001 f94a 	bl	800dd28 <vcom_Init>
  circular_queue_init(&MsgTraceQueue, MsgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE);
 800ca94:	2280      	movs	r2, #128	; 0x80
 800ca96:	4904      	ldr	r1, [pc, #16]	; (800caa8 <TraceInit+0x1c>)
 800ca98:	0052      	lsls	r2, r2, #1
 800ca9a:	4804      	ldr	r0, [pc, #16]	; (800caac <TraceInit+0x20>)
 800ca9c:	f7ff fd81 	bl	800c5a2 <circular_queue_init>
}
 800caa0:	bd10      	pop	{r4, pc}
 800caa2:	46c0      	nop			; (mov r8, r8)
 800caa4:	0800ca39 	.word	0x0800ca39
 800caa8:	20001168 	.word	0x20001168
 800caac:	20001158 	.word	0x20001158

0800cab0 <TraceSend>:
{
 800cab0:	b40f      	push	{r0, r1, r2, r3}
  uint16_t bufSize=vsnprintf(buf,TEMPBUFSIZE,strFormat, vaArgs);
 800cab2:	2180      	movs	r1, #128	; 0x80
{
 800cab4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cab6:	b0c5      	sub	sp, #276	; 0x114
 800cab8:	ab4a      	add	r3, sp, #296	; 0x128
 800caba:	cb04      	ldmia	r3!, {r2}
  uint16_t bufSize=vsnprintf(buf,TEMPBUFSIZE,strFormat, vaArgs);
 800cabc:	0049      	lsls	r1, r1, #1
 800cabe:	a804      	add	r0, sp, #16
  va_start( vaArgs, strFormat);
 800cac0:	9302      	str	r3, [sp, #8]
  uint16_t bufSize=vsnprintf(buf,TEMPBUFSIZE,strFormat, vaArgs);
 800cac2:	f001 fa93 	bl	800dfec <vsniprintf>
 800cac6:	466b      	mov	r3, sp
 800cac8:	1d9c      	adds	r4, r3, #6
 800caca:	8020      	strh	r0, [r4, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cacc:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800cad0:	b672      	cpsid	i
  status =circular_queue_add(&MsgTraceQueue,(uint8_t*)buf, bufSize);
 800cad2:	4813      	ldr	r0, [pc, #76]	; (800cb20 <TraceSend+0x70>)
 800cad4:	8822      	ldrh	r2, [r4, #0]
 800cad6:	a904      	add	r1, sp, #16
 800cad8:	f7ff fd6a 	bl	800c5b0 <circular_queue_add>
 800cadc:	1e06      	subs	r6, r0, #0
  if ((status==0 ) && (TracePeripheralReady==SET))
 800cade:	d11b      	bne.n	800cb18 <TraceSend+0x68>
 800cae0:	4b10      	ldr	r3, [pc, #64]	; (800cb24 <TraceSend+0x74>)
 800cae2:	781d      	ldrb	r5, [r3, #0]
 800cae4:	b2ed      	uxtb	r5, r5
 800cae6:	2d01      	cmp	r5, #1
 800cae8:	d116      	bne.n	800cb18 <TraceSend+0x68>
    circular_queue_get(&MsgTraceQueue,&buffer,&bufSize);
 800caea:	0022      	movs	r2, r4
 800caec:	a903      	add	r1, sp, #12
 800caee:	480c      	ldr	r0, [pc, #48]	; (800cb20 <TraceSend+0x70>)
 800caf0:	f7ff fdd3 	bl	800c69a <circular_queue_get>
    TracePeripheralReady = RESET;
 800caf4:	4b0b      	ldr	r3, [pc, #44]	; (800cb24 <TraceSend+0x74>)
    LPM_SetStopMode(LPM_UART_TX_Id , LPM_Disable );
 800caf6:	0029      	movs	r1, r5
 800caf8:	2020      	movs	r0, #32
    TracePeripheralReady = RESET;
 800cafa:	701e      	strb	r6, [r3, #0]
    LPM_SetStopMode(LPM_UART_TX_Id , LPM_Disable );
 800cafc:	f7ff fd10 	bl	800c520 <LPM_SetStopMode>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cb00:	f387 8810 	msr	PRIMASK, r7
    OutputTrace(buffer, bufSize);
 800cb04:	8821      	ldrh	r1, [r4, #0]
 800cb06:	9803      	ldr	r0, [sp, #12]
 800cb08:	f001 f92c 	bl	800dd64 <vcom_Trace>
}
 800cb0c:	0030      	movs	r0, r6
 800cb0e:	b045      	add	sp, #276	; 0x114
 800cb10:	bcf0      	pop	{r4, r5, r6, r7}
 800cb12:	bc08      	pop	{r3}
 800cb14:	b004      	add	sp, #16
 800cb16:	4718      	bx	r3
 800cb18:	f387 8810 	msr	PRIMASK, r7
  return status;
 800cb1c:	e7f6      	b.n	800cb0c <TraceSend+0x5c>
 800cb1e:	46c0      	nop			; (mov r8, r8)
 800cb20:	20001158 	.word	0x20001158
 800cb24:	20000194 	.word	0x20000194

0800cb28 <rand1>:

static uint32_t next = 1;

int32_t rand1( void )
{
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 800cb28:	4b06      	ldr	r3, [pc, #24]	; (800cb44 <rand1+0x1c>)
 800cb2a:	4807      	ldr	r0, [pc, #28]	; (800cb48 <rand1+0x20>)
 800cb2c:	681a      	ldr	r2, [r3, #0]
{
 800cb2e:	b510      	push	{r4, lr}
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 800cb30:	4350      	muls	r0, r2
 800cb32:	4a06      	ldr	r2, [pc, #24]	; (800cb4c <rand1+0x24>)
 800cb34:	4906      	ldr	r1, [pc, #24]	; (800cb50 <rand1+0x28>)
 800cb36:	1880      	adds	r0, r0, r2
 800cb38:	6018      	str	r0, [r3, #0]
 800cb3a:	f7f3 fb89 	bl	8000250 <__aeabi_uidivmod>
}
 800cb3e:	0008      	movs	r0, r1
 800cb40:	bd10      	pop	{r4, pc}
 800cb42:	46c0      	nop			; (mov r8, r8)
 800cb44:	20000198 	.word	0x20000198
 800cb48:	41c64e6d 	.word	0x41c64e6d
 800cb4c:	00003039 	.word	0x00003039
 800cb50:	7fffffff 	.word	0x7fffffff

0800cb54 <srand1>:

void srand1( uint32_t seed )
{
    next = seed;
 800cb54:	4b01      	ldr	r3, [pc, #4]	; (800cb5c <srand1+0x8>)
 800cb56:	6018      	str	r0, [r3, #0]
}
 800cb58:	4770      	bx	lr
 800cb5a:	46c0      	nop			; (mov r8, r8)
 800cb5c:	20000198 	.word	0x20000198

0800cb60 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 800cb60:	b570      	push	{r4, r5, r6, lr}
 800cb62:	0005      	movs	r5, r0
 800cb64:	000c      	movs	r4, r1
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 800cb66:	f7ff ffdf 	bl	800cb28 <rand1>
 800cb6a:	1b61      	subs	r1, r4, r5
 800cb6c:	3101      	adds	r1, #1
 800cb6e:	f7f3 fc59 	bl	8000424 <__aeabi_idivmod>
 800cb72:	1948      	adds	r0, r1, r5
}
 800cb74:	bd70      	pop	{r4, r5, r6, pc}

0800cb76 <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    while( size-- )
 800cb76:	2300      	movs	r3, #0
{
 800cb78:	b510      	push	{r4, lr}
    while( size-- )
 800cb7a:	4293      	cmp	r3, r2
 800cb7c:	d100      	bne.n	800cb80 <memcpy1+0xa>
    {
        *dst++ = *src++;
    }
}
 800cb7e:	bd10      	pop	{r4, pc}
        *dst++ = *src++;
 800cb80:	5ccc      	ldrb	r4, [r1, r3]
 800cb82:	54c4      	strb	r4, [r0, r3]
 800cb84:	3301      	adds	r3, #1
 800cb86:	e7f8      	b.n	800cb7a <memcpy1+0x4>

0800cb88 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    dst = dst + ( size - 1 );
 800cb88:	1e53      	subs	r3, r2, #1
 800cb8a:	18c0      	adds	r0, r0, r3
    while( size-- )
 800cb8c:	2300      	movs	r3, #0
{
 800cb8e:	b530      	push	{r4, r5, lr}
    while( size-- )
 800cb90:	429a      	cmp	r2, r3
 800cb92:	d100      	bne.n	800cb96 <memcpyr+0xe>
    {
        *dst-- = *src++;
    }
}
 800cb94:	bd30      	pop	{r4, r5, pc}
        *dst-- = *src++;
 800cb96:	5ccd      	ldrb	r5, [r1, r3]
 800cb98:	425c      	negs	r4, r3
 800cb9a:	5505      	strb	r5, [r0, r4]
 800cb9c:	3301      	adds	r3, #1
 800cb9e:	e7f7      	b.n	800cb90 <memcpyr+0x8>

0800cba0 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
    while( size-- )
 800cba0:	4b04      	ldr	r3, [pc, #16]	; (800cbb4 <memset1+0x14>)
 800cba2:	3a01      	subs	r2, #1
 800cba4:	b292      	uxth	r2, r2
 800cba6:	429a      	cmp	r2, r3
 800cba8:	d100      	bne.n	800cbac <memset1+0xc>
    {
        *dst++ = value;
    }
}
 800cbaa:	4770      	bx	lr
        *dst++ = value;
 800cbac:	7001      	strb	r1, [r0, #0]
 800cbae:	3001      	adds	r0, #1
 800cbb0:	e7f7      	b.n	800cba2 <memset1+0x2>
 800cbb2:	46c0      	nop			; (mov r8, r8)
 800cbb4:	0000ffff 	.word	0x0000ffff

0800cbb8 <BSP_sensor_Init>:
  BSP_HUMIDITY_Sensor_Enable(HUMIDITY_handle);
  BSP_TEMPERATURE_Sensor_Enable(TEMPERATURE_handle);
  BSP_PRESSURE_Sensor_Enable(PRESSURE_handle);
#endif
  /* USER CODE END 6 */
}
 800cbb8:	4770      	bx	lr
	...

0800cbbc <honey_start>:
        params
            *honey: pointer type of honey_t variable
        return
            command response
    */
    uint8_t resp[2] = {0};
 800cbbc:	2300      	movs	r3, #0
honey_cmd_resp_t honey_start(honey_t* honey) {
 800cbbe:	b537      	push	{r0, r1, r2, r4, r5, lr}
    uint8_t resp[2] = {0};
 800cbc0:	ac01      	add	r4, sp, #4
 800cbc2:	8023      	strh	r3, [r4, #0]

	HAL_UART_Transmit(&honey->huart, (uint8_t*) CMD_STARTMEAS, 4, 500);
 800cbc4:	33f5      	adds	r3, #245	; 0xf5
 800cbc6:	33ff      	adds	r3, #255	; 0xff
 800cbc8:	2204      	movs	r2, #4
 800cbca:	490a      	ldr	r1, [pc, #40]	; (800cbf4 <honey_start+0x38>)
honey_cmd_resp_t honey_start(honey_t* honey) {
 800cbcc:	0005      	movs	r5, r0
	HAL_UART_Transmit(&honey->huart, (uint8_t*) CMD_STARTMEAS, 4, 500);
 800cbce:	f7f9 fbb1 	bl	8006334 <HAL_UART_Transmit>
    HAL_UART_Receive(&honey->huart, (uint8_t*) resp, 2, 500);
 800cbd2:	23fa      	movs	r3, #250	; 0xfa
 800cbd4:	2202      	movs	r2, #2
 800cbd6:	005b      	lsls	r3, r3, #1
 800cbd8:	0021      	movs	r1, r4
 800cbda:	0028      	movs	r0, r5
 800cbdc:	f7f9 fc14 	bl	8006408 <HAL_UART_Receive>

    if (resp[0] == 0xA5 && resp[1] == 0xA5) { // success is 0xA5A5
 800cbe0:	7823      	ldrb	r3, [r4, #0]
        return CMD_RESP_SUCCESS;
    }
    
    return CMD_RESP_ERR;
 800cbe2:	20ff      	movs	r0, #255	; 0xff
    if (resp[0] == 0xA5 && resp[1] == 0xA5) { // success is 0xA5A5
 800cbe4:	2ba5      	cmp	r3, #165	; 0xa5
 800cbe6:	d103      	bne.n	800cbf0 <honey_start+0x34>
 800cbe8:	7863      	ldrb	r3, [r4, #1]
 800cbea:	2ba5      	cmp	r3, #165	; 0xa5
 800cbec:	d100      	bne.n	800cbf0 <honey_start+0x34>
        return CMD_RESP_SUCCESS;
 800cbee:	38fe      	subs	r0, #254	; 0xfe
}
 800cbf0:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 800cbf2:	46c0      	nop			; (mov r8, r8)
 800cbf4:	2000019c 	.word	0x2000019c

0800cbf8 <honey_stop>:

honey_cmd_resp_t honey_stop(honey_t* honey) {
    /* 
        Stop the fan for stopping measuring
    */
    uint8_t resp[2] = {0};
 800cbf8:	2300      	movs	r3, #0
honey_cmd_resp_t honey_stop(honey_t* honey) {
 800cbfa:	b537      	push	{r0, r1, r2, r4, r5, lr}

    HAL_UART_Transmit(&honey->huart, (uint8_t*) CMD_STOPMEAS, 4, 500);
 800cbfc:	2204      	movs	r2, #4
    uint8_t resp[2] = {0};
 800cbfe:	ac01      	add	r4, sp, #4
    HAL_UART_Transmit(&honey->huart, (uint8_t*) CMD_STOPMEAS, 4, 500);
 800cc00:	490b      	ldr	r1, [pc, #44]	; (800cc30 <honey_stop+0x38>)
    uint8_t resp[2] = {0};
 800cc02:	8023      	strh	r3, [r4, #0]
    HAL_UART_Transmit(&honey->huart, (uint8_t*) CMD_STOPMEAS, 4, 500);
 800cc04:	33f5      	adds	r3, #245	; 0xf5
 800cc06:	1889      	adds	r1, r1, r2
 800cc08:	33ff      	adds	r3, #255	; 0xff
honey_cmd_resp_t honey_stop(honey_t* honey) {
 800cc0a:	0005      	movs	r5, r0
    HAL_UART_Transmit(&honey->huart, (uint8_t*) CMD_STOPMEAS, 4, 500);
 800cc0c:	f7f9 fb92 	bl	8006334 <HAL_UART_Transmit>
    HAL_UART_Receive(&honey->huart, (uint8_t*) resp, 2, 500);
 800cc10:	23fa      	movs	r3, #250	; 0xfa
 800cc12:	2202      	movs	r2, #2
 800cc14:	005b      	lsls	r3, r3, #1
 800cc16:	0021      	movs	r1, r4
 800cc18:	0028      	movs	r0, r5
 800cc1a:	f7f9 fbf5 	bl	8006408 <HAL_UART_Receive>

    if (resp[0] == 0xA5 && resp[1] == 0xA5) {
 800cc1e:	7823      	ldrb	r3, [r4, #0]
        return CMD_RESP_SUCCESS;
    }
    
    return CMD_RESP_ERR;
 800cc20:	20ff      	movs	r0, #255	; 0xff
    if (resp[0] == 0xA5 && resp[1] == 0xA5) {
 800cc22:	2ba5      	cmp	r3, #165	; 0xa5
 800cc24:	d103      	bne.n	800cc2e <honey_stop+0x36>
 800cc26:	7863      	ldrb	r3, [r4, #1]
 800cc28:	2ba5      	cmp	r3, #165	; 0xa5
 800cc2a:	d100      	bne.n	800cc2e <honey_stop+0x36>
        return CMD_RESP_SUCCESS;
 800cc2c:	38fe      	subs	r0, #254	; 0xfe
}
 800cc2e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 800cc30:	2000019c 	.word	0x2000019c

0800cc34 <honey_read>:

honey_cmd_resp_t honey_read(honey_t *honey) {
 800cc34:	b513      	push	{r0, r1, r4, lr}
    /*
        Read measurement. Values are stored in the honey_t structure
    */
    uint8_t resp[8] = {0};
 800cc36:	2208      	movs	r2, #8
honey_cmd_resp_t honey_read(honey_t *honey) {
 800cc38:	0004      	movs	r4, r0
    uint8_t resp[8] = {0};
 800cc3a:	2100      	movs	r1, #0
 800cc3c:	4668      	mov	r0, sp
 800cc3e:	f001 f9a2 	bl	800df86 <memset>

    HAL_UART_Transmit(&honey->huart, (uint8_t*) CMD_READMEAS, 4, 500);
 800cc42:	23fa      	movs	r3, #250	; 0xfa
 800cc44:	4915      	ldr	r1, [pc, #84]	; (800cc9c <honey_read+0x68>)
 800cc46:	005b      	lsls	r3, r3, #1
 800cc48:	2204      	movs	r2, #4
 800cc4a:	3108      	adds	r1, #8
 800cc4c:	0020      	movs	r0, r4
 800cc4e:	f7f9 fb71 	bl	8006334 <HAL_UART_Transmit>
    HAL_UART_Receive(&honey->huart, (uint8_t*) resp, 8, 500);
 800cc52:	23fa      	movs	r3, #250	; 0xfa
 800cc54:	2208      	movs	r2, #8
 800cc56:	005b      	lsls	r3, r3, #1
 800cc58:	4669      	mov	r1, sp
 800cc5a:	0020      	movs	r0, r4
 800cc5c:	f7f9 fbd4 	bl	8006408 <HAL_UART_Receive>

    if (resp[0] == 0x40 && resp[1] == 0x05 && resp[2] == 0x04) {
 800cc60:	466b      	mov	r3, sp
 800cc62:	781b      	ldrb	r3, [r3, #0]
        honey->pm10_0 = resp[5] * 256 + resp[6];

        return CMD_RESP_SUCCESS;
    }

    return CMD_RESP_ERR;
 800cc64:	20ff      	movs	r0, #255	; 0xff
    if (resp[0] == 0x40 && resp[1] == 0x05 && resp[2] == 0x04) {
 800cc66:	2b40      	cmp	r3, #64	; 0x40
 800cc68:	d117      	bne.n	800cc9a <honey_read+0x66>
 800cc6a:	466b      	mov	r3, sp
 800cc6c:	785b      	ldrb	r3, [r3, #1]
 800cc6e:	2b05      	cmp	r3, #5
 800cc70:	d113      	bne.n	800cc9a <honey_read+0x66>
 800cc72:	466b      	mov	r3, sp
 800cc74:	789b      	ldrb	r3, [r3, #2]
 800cc76:	2b04      	cmp	r3, #4
 800cc78:	d10f      	bne.n	800cc9a <honey_read+0x66>
        honey->pm2_5 = resp[3] * 256 + resp[4];
 800cc7a:	466b      	mov	r3, sp
 800cc7c:	78da      	ldrb	r2, [r3, #3]
 800cc7e:	791b      	ldrb	r3, [r3, #4]
 800cc80:	0212      	lsls	r2, r2, #8
 800cc82:	189b      	adds	r3, r3, r2
 800cc84:	0022      	movs	r2, r4
 800cc86:	3280      	adds	r2, #128	; 0x80
 800cc88:	8013      	strh	r3, [r2, #0]
        honey->pm10_0 = resp[5] * 256 + resp[6];
 800cc8a:	466b      	mov	r3, sp
 800cc8c:	795a      	ldrb	r2, [r3, #5]
 800cc8e:	799b      	ldrb	r3, [r3, #6]
 800cc90:	0212      	lsls	r2, r2, #8
 800cc92:	189b      	adds	r3, r3, r2
 800cc94:	3482      	adds	r4, #130	; 0x82
 800cc96:	8023      	strh	r3, [r4, #0]
        return CMD_RESP_SUCCESS;
 800cc98:	38fe      	subs	r0, #254	; 0xfe
}
 800cc9a:	bd16      	pop	{r1, r2, r4, pc}
 800cc9c:	2000019c 	.word	0x2000019c

0800cca0 <honey_autosend>:
            mode: can be either 0 or 1, 0 for disable, 1 for enable
        return
            command response
    */
    
    uint8_t resp[2] = {0};
 800cca0:	2300      	movs	r3, #0
honey_cmd_resp_t honey_autosend(honey_t *honey, uint8_t mode) {
 800cca2:	b537      	push	{r0, r1, r2, r4, r5, lr}
    uint8_t resp[2] = {0};
 800cca4:	ac01      	add	r4, sp, #4
honey_cmd_resp_t honey_autosend(honey_t *honey, uint8_t mode) {
 800cca6:	0005      	movs	r5, r0
    uint8_t resp[2] = {0};
 800cca8:	8023      	strh	r3, [r4, #0]

    if (mode == 0) { // stop autosend
 800ccaa:	4299      	cmp	r1, r3
 800ccac:	d117      	bne.n	800ccde <honey_autosend+0x3e>
        HAL_UART_Transmit(&honey->huart, (uint8_t*) CMD_AUTOSTOP, 4, 500);
 800ccae:	2204      	movs	r2, #4
 800ccb0:	490f      	ldr	r1, [pc, #60]	; (800ccf0 <honey_autosend+0x50>)
 800ccb2:	33f5      	adds	r3, #245	; 0xf5
 800ccb4:	33ff      	adds	r3, #255	; 0xff
 800ccb6:	310c      	adds	r1, #12
    } else if (mode == 1) { // enable autosend
        HAL_UART_Transmit(&honey->huart, (uint8_t*) CMD_AUTOEN, 4, 500);
 800ccb8:	0028      	movs	r0, r5
 800ccba:	f7f9 fb3b 	bl	8006334 <HAL_UART_Transmit>
    } else {
        return CMD_RESP_BAD;
    }
    
    // receiving response
    HAL_UART_Receive(&honey->huart, (uint8_t*) resp, 2, 500);
 800ccbe:	23fa      	movs	r3, #250	; 0xfa
 800ccc0:	2202      	movs	r2, #2
 800ccc2:	005b      	lsls	r3, r3, #1
 800ccc4:	0021      	movs	r1, r4
 800ccc6:	0028      	movs	r0, r5
 800ccc8:	f7f9 fb9e 	bl	8006408 <HAL_UART_Receive>

    if (resp[0] == 0xA5 && resp[1] == 0xA5) {
 800cccc:	7823      	ldrb	r3, [r4, #0]
        return CMD_RESP_SUCCESS;
    }
    
    return CMD_RESP_ERR;
 800ccce:	20ff      	movs	r0, #255	; 0xff
    if (resp[0] == 0xA5 && resp[1] == 0xA5) {
 800ccd0:	2ba5      	cmp	r3, #165	; 0xa5
 800ccd2:	d103      	bne.n	800ccdc <honey_autosend+0x3c>
 800ccd4:	7863      	ldrb	r3, [r4, #1]
 800ccd6:	2ba5      	cmp	r3, #165	; 0xa5
 800ccd8:	d100      	bne.n	800ccdc <honey_autosend+0x3c>
        return CMD_RESP_SUCCESS;
 800ccda:	38fe      	subs	r0, #254	; 0xfe
}
 800ccdc:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
        return CMD_RESP_BAD;
 800ccde:	2003      	movs	r0, #3
    } else if (mode == 1) { // enable autosend
 800cce0:	2901      	cmp	r1, #1
 800cce2:	d1fb      	bne.n	800ccdc <honey_autosend+0x3c>
        HAL_UART_Transmit(&honey->huart, (uint8_t*) CMD_AUTOEN, 4, 500);
 800cce4:	23fa      	movs	r3, #250	; 0xfa
 800cce6:	4902      	ldr	r1, [pc, #8]	; (800ccf0 <honey_autosend+0x50>)
 800cce8:	005b      	lsls	r3, r3, #1
 800ccea:	2204      	movs	r2, #4
 800ccec:	3110      	adds	r1, #16
 800ccee:	e7e3      	b.n	800ccb8 <honey_autosend+0x18>
 800ccf0:	2000019c 	.word	0x2000019c

0800ccf4 <honey_read_coef>:
    }

    return CMD_RESP_ERR;
}

honey_cmd_resp_t honey_read_coef(honey_t* honey) {
 800ccf4:	b513      	push	{r0, r1, r4, lr}
    /*
        Read customer coefficient from the sensor and automatically set
        customer coefficient constructor to the value that's been read
    */
    uint8_t resp[5] = {0};
 800ccf6:	2205      	movs	r2, #5
honey_cmd_resp_t honey_read_coef(honey_t* honey) {
 800ccf8:	0004      	movs	r4, r0
    uint8_t resp[5] = {0};
 800ccfa:	2100      	movs	r1, #0
 800ccfc:	4668      	mov	r0, sp
 800ccfe:	f001 f942 	bl	800df86 <memset>

    HAL_UART_Transmit(&honey->huart, (uint8_t*) CMD_READCOEF, 4, 500);
 800cd02:	23fa      	movs	r3, #250	; 0xfa
 800cd04:	490f      	ldr	r1, [pc, #60]	; (800cd44 <honey_read_coef+0x50>)
 800cd06:	005b      	lsls	r3, r3, #1
 800cd08:	2204      	movs	r2, #4
 800cd0a:	3114      	adds	r1, #20
 800cd0c:	0020      	movs	r0, r4
 800cd0e:	f7f9 fb11 	bl	8006334 <HAL_UART_Transmit>
    HAL_UART_Receive(&honey->huart, (uint8_t*) resp, 5, 100);
 800cd12:	2364      	movs	r3, #100	; 0x64
 800cd14:	2205      	movs	r2, #5
 800cd16:	4669      	mov	r1, sp
 800cd18:	0020      	movs	r0, r4
 800cd1a:	f7f9 fb75 	bl	8006408 <HAL_UART_Receive>

    if (resp[0] == 0x40 && resp[1] == 0x02 && resp[2] == 0x10) {
 800cd1e:	466b      	mov	r3, sp
 800cd20:	781b      	ldrb	r3, [r3, #0]
        honey->customer_coef = resp[3];

        return CMD_RESP_SUCCESS;
    }

    return CMD_RESP_ERR;
 800cd22:	20ff      	movs	r0, #255	; 0xff
    if (resp[0] == 0x40 && resp[1] == 0x02 && resp[2] == 0x10) {
 800cd24:	2b40      	cmp	r3, #64	; 0x40
 800cd26:	d10c      	bne.n	800cd42 <honey_read_coef+0x4e>
 800cd28:	466b      	mov	r3, sp
 800cd2a:	785b      	ldrb	r3, [r3, #1]
 800cd2c:	2b02      	cmp	r3, #2
 800cd2e:	d108      	bne.n	800cd42 <honey_read_coef+0x4e>
 800cd30:	466b      	mov	r3, sp
 800cd32:	789b      	ldrb	r3, [r3, #2]
 800cd34:	2b10      	cmp	r3, #16
 800cd36:	d104      	bne.n	800cd42 <honey_read_coef+0x4e>
        honey->customer_coef = resp[3];
 800cd38:	466b      	mov	r3, sp
 800cd3a:	78db      	ldrb	r3, [r3, #3]
 800cd3c:	3484      	adds	r4, #132	; 0x84
 800cd3e:	7023      	strb	r3, [r4, #0]
        return CMD_RESP_SUCCESS;
 800cd40:	38fe      	subs	r0, #254	; 0xfe
}
 800cd42:	bd16      	pop	{r1, r2, r4, pc}
 800cd44:	2000019c 	.word	0x2000019c

0800cd48 <honey_init>:
void honey_init(UART_HandleTypeDef huart, honey_t* honey) {
 800cd48:	b084      	sub	sp, #16
 800cd4a:	b570      	push	{r4, r5, r6, lr}
 800cd4c:	9c24      	ldr	r4, [sp, #144]	; 0x90
    honey->pm2_5  = 0;
 800cd4e:	2500      	movs	r5, #0
void honey_init(UART_HandleTypeDef huart, honey_t* honey) {
 800cd50:	9004      	str	r0, [sp, #16]
 800cd52:	9105      	str	r1, [sp, #20]
 800cd54:	9206      	str	r2, [sp, #24]
    honey->huart  = huart;
 800cd56:	a904      	add	r1, sp, #16
 800cd58:	2280      	movs	r2, #128	; 0x80
 800cd5a:	0020      	movs	r0, r4
void honey_init(UART_HandleTypeDef huart, honey_t* honey) {
 800cd5c:	9307      	str	r3, [sp, #28]
    honey->huart  = huart;
 800cd5e:	f001 f909 	bl	800df74 <memcpy>
    honey->pm10_0 = 0;
 800cd62:	2264      	movs	r2, #100	; 0x64
    honey->pm2_5  = 0;
 800cd64:	1d23      	adds	r3, r4, #4
 800cd66:	67dd      	str	r5, [r3, #124]	; 0x7c
    honey->pm10_0 = 0;
 800cd68:	3380      	adds	r3, #128	; 0x80
 800cd6a:	701a      	strb	r2, [r3, #0]
    honey_stop(honey);          // stop the fan
 800cd6c:	0020      	movs	r0, r4
 800cd6e:	f7ff ff43 	bl	800cbf8 <honey_stop>
    honey_autosend(honey, 0);   // stop autosend
 800cd72:	0029      	movs	r1, r5
 800cd74:	0020      	movs	r0, r4
 800cd76:	f7ff ff93 	bl	800cca0 <honey_autosend>
    honey_read_coef(honey);     // read and set customer coef to recent value
 800cd7a:	0020      	movs	r0, r4
 800cd7c:	f7ff ffba 	bl	800ccf4 <honey_read_coef>
}
 800cd80:	bc70      	pop	{r4, r5, r6}
 800cd82:	bc08      	pop	{r3}
 800cd84:	b004      	add	sp, #16
 800cd86:	4718      	bx	r3

0800cd88 <DBG_Init>:
/* Private variables ---------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Exported functions ------------------------------------------------------- */

void DBG_Init(void)
{
 800cd88:	b570      	push	{r4, r5, r6, lr}
#ifdef DEBUG
  GPIO_InitTypeDef  gpioinitstruct = {0};
 800cd8a:	2600      	movs	r6, #0

  /* Enable the GPIO_B Clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800cd8c:	2102      	movs	r1, #2
{
 800cd8e:	b086      	sub	sp, #24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800cd90:	4c1d      	ldr	r4, [pc, #116]	; (800ce08 <DBG_Init+0x80>)
  GPIO_InitTypeDef  gpioinitstruct = {0};
 800cd92:	9605      	str	r6, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800cd94:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  gpioinitstruct.Mode   = GPIO_MODE_OUTPUT_PP;
  gpioinitstruct.Pull   = GPIO_PULLUP;
  gpioinitstruct.Speed  = GPIO_SPEED_HIGH;

  gpioinitstruct.Pin    = (GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15);
  HAL_GPIO_Init(GPIOB, &gpioinitstruct);
 800cd96:	4d1d      	ldr	r5, [pc, #116]	; (800ce0c <DBG_Init+0x84>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800cd98:	430a      	orrs	r2, r1
 800cd9a:	62e2      	str	r2, [r4, #44]	; 0x2c
 800cd9c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &gpioinitstruct);
 800cd9e:	0028      	movs	r0, r5
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800cda0:	400b      	ands	r3, r1
 800cda2:	9300      	str	r3, [sp, #0]
 800cda4:	9b00      	ldr	r3, [sp, #0]
  gpioinitstruct.Mode   = GPIO_MODE_OUTPUT_PP;
 800cda6:	2301      	movs	r3, #1
 800cda8:	9302      	str	r3, [sp, #8]
  gpioinitstruct.Pull   = GPIO_PULLUP;
 800cdaa:	9303      	str	r3, [sp, #12]
  gpioinitstruct.Speed  = GPIO_SPEED_HIGH;
 800cdac:	185b      	adds	r3, r3, r1
 800cdae:	9304      	str	r3, [sp, #16]
  gpioinitstruct.Pin    = (GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15);
 800cdb0:	23f0      	movs	r3, #240	; 0xf0
  HAL_GPIO_Init(GPIOB, &gpioinitstruct);
 800cdb2:	a901      	add	r1, sp, #4
  gpioinitstruct.Pin    = (GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15);
 800cdb4:	021b      	lsls	r3, r3, #8
 800cdb6:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(GPIOB, &gpioinitstruct);
 800cdb8:	f7f7 fd72 	bl	80048a0 <HAL_GPIO_Init>

  /* Reset debug Pins */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 800cdbc:	2180      	movs	r1, #128	; 0x80
 800cdbe:	0032      	movs	r2, r6
 800cdc0:	0028      	movs	r0, r5
 800cdc2:	0149      	lsls	r1, r1, #5
 800cdc4:	f7f7 fe2c 	bl	8004a20 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 800cdc8:	2180      	movs	r1, #128	; 0x80
 800cdca:	0032      	movs	r2, r6
 800cdcc:	0028      	movs	r0, r5
 800cdce:	0189      	lsls	r1, r1, #6
 800cdd0:	f7f7 fe26 	bl	8004a20 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 800cdd4:	2180      	movs	r1, #128	; 0x80
 800cdd6:	0032      	movs	r2, r6
 800cdd8:	0028      	movs	r0, r5
 800cdda:	01c9      	lsls	r1, r1, #7
 800cddc:	f7f7 fe20 	bl	8004a20 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 800cde0:	2180      	movs	r1, #128	; 0x80
 800cde2:	0028      	movs	r0, r5
 800cde4:	0209      	lsls	r1, r1, #8
 800cde6:	0032      	movs	r2, r6
 800cde8:	f7f7 fe1a 	bl	8004a20 <HAL_GPIO_WritePin>

  __HAL_RCC_DBGMCU_CLK_ENABLE();
 800cdec:	2380      	movs	r3, #128	; 0x80
 800cdee:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800cdf0:	03db      	lsls	r3, r3, #15
 800cdf2:	4313      	orrs	r3, r2
 800cdf4:	6363      	str	r3, [r4, #52]	; 0x34

  HAL_DBGMCU_EnableDBGSleepMode();
 800cdf6:	f7f7 f9b7 	bl	8004168 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 800cdfa:	f7f7 f9bd 	bl	8004178 <HAL_DBGMCU_EnableDBGStopMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
 800cdfe:	f7f7 f9c3 	bl	8004188 <HAL_DBGMCU_EnableDBGStandbyMode>
  HAL_DBGMCU_DisableDBGSleepMode();
  HAL_DBGMCU_DisableDBGStopMode();
  HAL_DBGMCU_DisableDBGStandbyMode();
  __HAL_RCC_DBGMCU_CLK_DISABLE();
#endif
}
 800ce02:	b006      	add	sp, #24
 800ce04:	bd70      	pop	{r4, r5, r6, pc}
 800ce06:	46c0      	nop			; (mov r8, r8)
 800ce08:	40021000 	.word	0x40021000
 800ce0c:	50000400 	.word	0x50000400

0800ce10 <Error_Handler>:

void Error_Handler(void)
{
 800ce10:	b510      	push	{r4, lr}
  PRINTF("Error_Handler\n\r");
 800ce12:	4802      	ldr	r0, [pc, #8]	; (800ce1c <Error_Handler+0xc>)
 800ce14:	f7ff fe4c 	bl	800cab0 <TraceSend>
 800ce18:	e7fe      	b.n	800ce18 <Error_Handler+0x8>
 800ce1a:	46c0      	nop			; (mov r8, r8)
 800ce1c:	0800f552 	.word	0x0800f552

0800ce20 <HW_GPIO_GetBitPos>:
 */
static uint8_t HW_GPIO_GetBitPos(uint16_t GPIO_Pin)
{
  uint8_t PinPos = 0;

  if ((GPIO_Pin & 0xFF00) != 0)
 800ce20:	0001      	movs	r1, r0
 800ce22:	23ff      	movs	r3, #255	; 0xff
 800ce24:	4399      	bics	r1, r3
 800ce26:	000b      	movs	r3, r1
{
 800ce28:	0002      	movs	r2, r0
  {
    PinPos |= 0x8;
 800ce2a:	1e58      	subs	r0, r3, #1
 800ce2c:	4183      	sbcs	r3, r0
 800ce2e:	00d8      	lsls	r0, r3, #3
  }
  if ((GPIO_Pin & 0xF0F0) != 0)
 800ce30:	4b07      	ldr	r3, [pc, #28]	; (800ce50 <HW_GPIO_GetBitPos+0x30>)
 800ce32:	421a      	tst	r2, r3
 800ce34:	d001      	beq.n	800ce3a <HW_GPIO_GetBitPos+0x1a>
  {
    PinPos |= 0x4;
 800ce36:	2304      	movs	r3, #4
 800ce38:	4318      	orrs	r0, r3
  }
  if ((GPIO_Pin & 0xCCCC) != 0)
 800ce3a:	4b06      	ldr	r3, [pc, #24]	; (800ce54 <HW_GPIO_GetBitPos+0x34>)
 800ce3c:	421a      	tst	r2, r3
 800ce3e:	d001      	beq.n	800ce44 <HW_GPIO_GetBitPos+0x24>
  {
    PinPos |= 0x2;
 800ce40:	2302      	movs	r3, #2
 800ce42:	4318      	orrs	r0, r3
  }
  if ((GPIO_Pin & 0xAAAA) != 0)
 800ce44:	4b04      	ldr	r3, [pc, #16]	; (800ce58 <HW_GPIO_GetBitPos+0x38>)
 800ce46:	421a      	tst	r2, r3
 800ce48:	d001      	beq.n	800ce4e <HW_GPIO_GetBitPos+0x2e>
  {
    PinPos |= 0x1;
 800ce4a:	2301      	movs	r3, #1
 800ce4c:	4318      	orrs	r0, r3
  }

  return PinPos;
}
 800ce4e:	4770      	bx	lr
 800ce50:	fffff0f0 	.word	0xfffff0f0
 800ce54:	ffffcccc 	.word	0xffffcccc
 800ce58:	ffffaaaa 	.word	0xffffaaaa

0800ce5c <HW_GPIO_Init>:
{
 800ce5c:	b530      	push	{r4, r5, lr}
  RCC_GPIO_CLK_ENABLE((uint32_t) port);
 800ce5e:	4c21      	ldr	r4, [pc, #132]	; (800cee4 <HW_GPIO_Init+0x88>)
{
 800ce60:	b087      	sub	sp, #28
 800ce62:	4b21      	ldr	r3, [pc, #132]	; (800cee8 <HW_GPIO_Init+0x8c>)
  RCC_GPIO_CLK_ENABLE((uint32_t) port);
 800ce64:	42a0      	cmp	r0, r4
 800ce66:	d02a      	beq.n	800cebe <HW_GPIO_Init+0x62>
 800ce68:	d80c      	bhi.n	800ce84 <HW_GPIO_Init+0x28>
 800ce6a:	24a0      	movs	r4, #160	; 0xa0
 800ce6c:	05e4      	lsls	r4, r4, #23
 800ce6e:	42a0      	cmp	r0, r4
 800ce70:	d017      	beq.n	800cea2 <HW_GPIO_Init+0x46>
 800ce72:	2580      	movs	r5, #128	; 0x80
 800ce74:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800ce76:	432c      	orrs	r4, r5
 800ce78:	62dc      	str	r4, [r3, #44]	; 0x2c
 800ce7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce7c:	402b      	ands	r3, r5
 800ce7e:	9305      	str	r3, [sp, #20]
 800ce80:	9b05      	ldr	r3, [sp, #20]
 800ce82:	e016      	b.n	800ceb2 <HW_GPIO_Init+0x56>
 800ce84:	4c19      	ldr	r4, [pc, #100]	; (800ceec <HW_GPIO_Init+0x90>)
 800ce86:	42a0      	cmp	r0, r4
 800ce88:	d022      	beq.n	800ced0 <HW_GPIO_Init+0x74>
 800ce8a:	4c19      	ldr	r4, [pc, #100]	; (800cef0 <HW_GPIO_Init+0x94>)
 800ce8c:	42a0      	cmp	r0, r4
 800ce8e:	d1f0      	bne.n	800ce72 <HW_GPIO_Init+0x16>
 800ce90:	2508      	movs	r5, #8
 800ce92:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800ce94:	432c      	orrs	r4, r5
 800ce96:	62dc      	str	r4, [r3, #44]	; 0x2c
 800ce98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce9a:	402b      	ands	r3, r5
 800ce9c:	9304      	str	r3, [sp, #16]
 800ce9e:	9b04      	ldr	r3, [sp, #16]
 800cea0:	e007      	b.n	800ceb2 <HW_GPIO_Init+0x56>
 800cea2:	2501      	movs	r5, #1
 800cea4:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800cea6:	432c      	orrs	r4, r5
 800cea8:	62dc      	str	r4, [r3, #44]	; 0x2c
 800ceaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ceac:	402b      	ands	r3, r5
 800ceae:	9301      	str	r3, [sp, #4]
 800ceb0:	9b01      	ldr	r3, [sp, #4]
  initStruct->Pin = GPIO_Pin ;
 800ceb2:	6011      	str	r1, [r2, #0]
  HAL_GPIO_Init(port, initStruct);
 800ceb4:	0011      	movs	r1, r2
 800ceb6:	f7f7 fcf3 	bl	80048a0 <HAL_GPIO_Init>
}
 800ceba:	b007      	add	sp, #28
 800cebc:	bd30      	pop	{r4, r5, pc}
  RCC_GPIO_CLK_ENABLE((uint32_t) port);
 800cebe:	2502      	movs	r5, #2
 800cec0:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800cec2:	432c      	orrs	r4, r5
 800cec4:	62dc      	str	r4, [r3, #44]	; 0x2c
 800cec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cec8:	402b      	ands	r3, r5
 800ceca:	9302      	str	r3, [sp, #8]
 800cecc:	9b02      	ldr	r3, [sp, #8]
 800cece:	e7f0      	b.n	800ceb2 <HW_GPIO_Init+0x56>
 800ced0:	2504      	movs	r5, #4
 800ced2:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800ced4:	432c      	orrs	r4, r5
 800ced6:	62dc      	str	r4, [r3, #44]	; 0x2c
 800ced8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ceda:	402b      	ands	r3, r5
 800cedc:	9303      	str	r3, [sp, #12]
 800cede:	9b03      	ldr	r3, [sp, #12]
 800cee0:	e7e7      	b.n	800ceb2 <HW_GPIO_Init+0x56>
 800cee2:	46c0      	nop			; (mov r8, r8)
 800cee4:	50000400 	.word	0x50000400
 800cee8:	40021000 	.word	0x40021000
 800ceec:	50000800 	.word	0x50000800
 800cef0:	50000c00 	.word	0x50000c00

0800cef4 <HW_GPIO_SetIrq>:
{
 800cef4:	b570      	push	{r4, r5, r6, lr}
  uint32_t BitPos = HW_GPIO_GetBitPos(GPIO_Pin) ;
 800cef6:	0008      	movs	r0, r1
{
 800cef8:	001c      	movs	r4, r3
 800cefa:	000d      	movs	r5, r1
 800cefc:	0016      	movs	r6, r2
  uint32_t BitPos = HW_GPIO_GetBitPos(GPIO_Pin) ;
 800cefe:	f7ff ff8f 	bl	800ce20 <HW_GPIO_GetBitPos>
 800cf02:	4b08      	ldr	r3, [pc, #32]	; (800cf24 <HW_GPIO_SetIrq+0x30>)
 800cf04:	0080      	lsls	r0, r0, #2
    GpioIrq[ BitPos ] = irqHandler;
 800cf06:	501c      	str	r4, [r3, r0]
  if (irqHandler != NULL)
 800cf08:	2c00      	cmp	r4, #0
 800cf0a:	d00a      	beq.n	800cf22 <HW_GPIO_SetIrq+0x2e>
    IRQnb = MSP_GetIRQn(GPIO_Pin);
 800cf0c:	0028      	movs	r0, r5
 800cf0e:	f000 fcd9 	bl	800d8c4 <MSP_GetIRQn>
 800cf12:	0004      	movs	r4, r0
    HAL_NVIC_SetPriority(IRQnb, prio, 0);
 800cf14:	2200      	movs	r2, #0
 800cf16:	0031      	movs	r1, r6
 800cf18:	f7f7 fb98 	bl	800464c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IRQnb);
 800cf1c:	0020      	movs	r0, r4
 800cf1e:	f7f7 fbbf 	bl	80046a0 <HAL_NVIC_EnableIRQ>
}
 800cf22:	bd70      	pop	{r4, r5, r6, pc}
 800cf24:	20001268 	.word	0x20001268

0800cf28 <HW_GPIO_IrqHandler>:
{
 800cf28:	b510      	push	{r4, lr}
  uint32_t BitPos = HW_GPIO_GetBitPos(GPIO_Pin);
 800cf2a:	f7ff ff79 	bl	800ce20 <HW_GPIO_GetBitPos>
  if (GpioIrq[ BitPos ]  != NULL)
 800cf2e:	4b04      	ldr	r3, [pc, #16]	; (800cf40 <HW_GPIO_IrqHandler+0x18>)
 800cf30:	0080      	lsls	r0, r0, #2
 800cf32:	58c3      	ldr	r3, [r0, r3]
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d001      	beq.n	800cf3c <HW_GPIO_IrqHandler+0x14>
    GpioIrq[ BitPos ](NULL);
 800cf38:	2000      	movs	r0, #0
 800cf3a:	4798      	blx	r3
}
 800cf3c:	bd10      	pop	{r4, pc}
 800cf3e:	46c0      	nop			; (mov r8, r8)
 800cf40:	20001268 	.word	0x20001268

0800cf44 <HW_GPIO_Write>:
{
 800cf44:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin(GPIOx, GPIO_Pin, (GPIO_PinState) value);
 800cf46:	b2d2      	uxtb	r2, r2
 800cf48:	f7f7 fd6a 	bl	8004a20 <HAL_GPIO_WritePin>
}
 800cf4c:	bd10      	pop	{r4, pc}
	...

0800cf50 <HW_RTC_GetCalendarValue>:
 * @param pointer to RTC_DateStruct
 * @param pointer to RTC_TimeStruct
 * @retval time in ticks
 */
static uint64_t HW_RTC_GetCalendarValue(RTC_DateTypeDef *RTC_DateStruct, RTC_TimeTypeDef *RTC_TimeStruct)
{
 800cf50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t first_read;
  uint32_t correction;
  uint32_t seconds;

  /* Get Time and Date*/
  HAL_RTC_GetTime(&RtcHandle, RTC_TimeStruct, RTC_FORMAT_BIN);
 800cf52:	4e27      	ldr	r6, [pc, #156]	; (800cff0 <HW_RTC_GetCalendarValue+0xa0>)
{
 800cf54:	0005      	movs	r5, r0
  HAL_RTC_GetTime(&RtcHandle, RTC_TimeStruct, RTC_FORMAT_BIN);
 800cf56:	2200      	movs	r2, #0
 800cf58:	0030      	movs	r0, r6
{
 800cf5a:	000c      	movs	r4, r1
  HAL_RTC_GetTime(&RtcHandle, RTC_TimeStruct, RTC_FORMAT_BIN);
 800cf5c:	f7f8 fcc8 	bl	80058f0 <HAL_RTC_GetTime>
  * @param  RTCx RTC Instance
  * @retval Sub second value (number between 0 and 65535)
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 800cf60:	4f24      	ldr	r7, [pc, #144]	; (800cff4 <HW_RTC_GetCalendarValue+0xa4>)

  /* make sure it is correct due to asynchronus nature of RTC*/
  do
  {
    first_read = LL_RTC_TIME_GetSubSecond(RTC);
    HAL_RTC_GetDate(&RtcHandle, RTC_DateStruct, RTC_FORMAT_BIN);
 800cf62:	2200      	movs	r2, #0
 800cf64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf66:	0029      	movs	r1, r5
 800cf68:	0030      	movs	r0, r6
 800cf6a:	9301      	str	r3, [sp, #4]
 800cf6c:	f7f8 fcea 	bl	8005944 <HAL_RTC_GetDate>
    HAL_RTC_GetTime(&RtcHandle, RTC_TimeStruct, RTC_FORMAT_BIN);
 800cf70:	2200      	movs	r2, #0
 800cf72:	0021      	movs	r1, r4
 800cf74:	0030      	movs	r0, r6
 800cf76:	f7f8 fcbb 	bl	80058f0 <HAL_RTC_GetTime>
 800cf7a:	466b      	mov	r3, sp
 800cf7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cf7e:	889b      	ldrh	r3, [r3, #4]
 800cf80:	b292      	uxth	r2, r2

  }
  while (first_read != LL_RTC_TIME_GetSubSecond(RTC));
 800cf82:	429a      	cmp	r2, r3
 800cf84:	d1ec      	bne.n	800cf60 <HW_RTC_GetCalendarValue+0x10>

  /* calculte amount of elapsed days since 01/01/2000 */
  seconds = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);

  correction = ((RTC_DateStruct->Year % 4) == 0) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM ;
 800cf86:	2103      	movs	r1, #3
  seconds = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 800cf88:	78ea      	ldrb	r2, [r5, #3]
 800cf8a:	481b      	ldr	r0, [pc, #108]	; (800cff8 <HW_RTC_GetCalendarValue+0xa8>)

  seconds += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31), 2) - (((correction >> ((RTC_DateStruct->Month - 1) * 2)) & 0x3)));
 800cf8c:	786e      	ldrb	r6, [r5, #1]
  seconds = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 800cf8e:	4350      	muls	r0, r2
  correction = ((RTC_DateStruct->Year % 4) == 0) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM ;
 800cf90:	400a      	ands	r2, r1
 800cf92:	4253      	negs	r3, r2
 800cf94:	4153      	adcs	r3, r2
 800cf96:	4a19      	ldr	r2, [pc, #100]	; (800cffc <HW_RTC_GetCalendarValue+0xac>)
 800cf98:	425b      	negs	r3, r3
 800cf9a:	4013      	ands	r3, r2
 800cf9c:	4a18      	ldr	r2, [pc, #96]	; (800d000 <HW_RTC_GetCalendarValue+0xb0>)
  seconds += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31), 2) - (((correction >> ((RTC_DateStruct->Month - 1) * 2)) & 0x3)));
 800cf9e:	3e01      	subs	r6, #1
  correction = ((RTC_DateStruct->Year % 4) == 0) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM ;
 800cfa0:	189b      	adds	r3, r3, r2
  seconds += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31), 2) - (((correction >> ((RTC_DateStruct->Month - 1) * 2)) & 0x3)));
 800cfa2:	223d      	movs	r2, #61	; 0x3d
 800cfa4:	4372      	muls	r2, r6
 800cfa6:	0076      	lsls	r6, r6, #1
 800cfa8:	40f3      	lsrs	r3, r6
 800cfaa:	3201      	adds	r2, #1

  seconds += (RTC_DateStruct->Date - 1);
 800cfac:	78ad      	ldrb	r5, [r5, #2]
  seconds += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31), 2) - (((correction >> ((RTC_DateStruct->Month - 1) * 2)) & 0x3)));
 800cfae:	0fd7      	lsrs	r7, r2, #31
  seconds = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 800cfb0:	3003      	adds	r0, #3
  seconds += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31), 2) - (((correction >> ((RTC_DateStruct->Month - 1) * 2)) & 0x3)));
 800cfb2:	18ba      	adds	r2, r7, r2
 800cfb4:	3d01      	subs	r5, #1
  seconds = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 800cfb6:	0880      	lsrs	r0, r0, #2
  seconds += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31), 2) - (((correction >> ((RTC_DateStruct->Month - 1) * 2)) & 0x3)));
 800cfb8:	1052      	asrs	r2, r2, #1
 800cfba:	1828      	adds	r0, r5, r0
 800cfbc:	1810      	adds	r0, r2, r0
 800cfbe:	400b      	ands	r3, r1
  seconds += (RTC_DateStruct->Date - 1);
 800cfc0:	1ac3      	subs	r3, r0, r3

  /* convert from days to seconds */
  seconds *= SECONDS_IN_1DAY;
 800cfc2:	4810      	ldr	r0, [pc, #64]	; (800d004 <HW_RTC_GetCalendarValue+0xb4>)

  seconds += ((uint32_t)RTC_TimeStruct->Seconds +
              ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
              ((uint32_t)RTC_TimeStruct->Hours * SECONDS_IN_1HOUR)) ;
 800cfc4:	7822      	ldrb	r2, [r4, #0]
  seconds *= SECONDS_IN_1DAY;
 800cfc6:	4358      	muls	r0, r3
              ((uint32_t)RTC_TimeStruct->Hours * SECONDS_IN_1HOUR)) ;
 800cfc8:	23e1      	movs	r3, #225	; 0xe1
 800cfca:	011b      	lsls	r3, r3, #4
 800cfcc:	4353      	muls	r3, r2
              ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
 800cfce:	223c      	movs	r2, #60	; 0x3c
 800cfd0:	7861      	ldrb	r1, [r4, #1]



  calendarValue = (((uint64_t) seconds) << N_PREDIV_S) + (PREDIV_S - RTC_TimeStruct->SubSeconds);
 800cfd2:	4d0d      	ldr	r5, [pc, #52]	; (800d008 <HW_RTC_GetCalendarValue+0xb8>)
              ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
 800cfd4:	434a      	muls	r2, r1
 800cfd6:	189b      	adds	r3, r3, r2
  seconds += ((uint32_t)RTC_TimeStruct->Seconds +
 800cfd8:	78a2      	ldrb	r2, [r4, #2]
  calendarValue = (((uint64_t) seconds) << N_PREDIV_S) + (PREDIV_S - RTC_TimeStruct->SubSeconds);
 800cfda:	6864      	ldr	r4, [r4, #4]
              ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
 800cfdc:	189b      	adds	r3, r3, r2
  seconds += ((uint32_t)RTC_TimeStruct->Seconds +
 800cfde:	181b      	adds	r3, r3, r0
  calendarValue = (((uint64_t) seconds) << N_PREDIV_S) + (PREDIV_S - RTC_TimeStruct->SubSeconds);
 800cfe0:	0d99      	lsrs	r1, r3, #22
 800cfe2:	0298      	lsls	r0, r3, #10
 800cfe4:	2300      	movs	r3, #0
 800cfe6:	1b2a      	subs	r2, r5, r4
 800cfe8:	1880      	adds	r0, r0, r2
 800cfea:	4159      	adcs	r1, r3

  return (calendarValue);
}
 800cfec:	b003      	add	sp, #12
 800cfee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cff0:	200012a8 	.word	0x200012a8
 800cff4:	40002800 	.word	0x40002800
 800cff8:	000005b5 	.word	0x000005b5
 800cffc:	ffaaaab0 	.word	0xffaaaab0
 800d000:	0099aaa0 	.word	0x0099aaa0
 800d004:	00015180 	.word	0x00015180
 800d008:	000003ff 	.word	0x000003ff

0800d00c <HW_RTC_GetMinimumTimeout>:
}
 800d00c:	2003      	movs	r0, #3
 800d00e:	4770      	bx	lr

0800d010 <HW_RTC_ms2Tick>:
{
 800d010:	b510      	push	{r4, lr}
  return (uint32_t)((((uint64_t)timeMilliSec) * CONV_DENOM) / CONV_NUMER);
 800d012:	0e41      	lsrs	r1, r0, #25
 800d014:	227d      	movs	r2, #125	; 0x7d
 800d016:	01c0      	lsls	r0, r0, #7
 800d018:	2300      	movs	r3, #0
 800d01a:	f7f3 fa47 	bl	80004ac <__aeabi_uldivmod>
}
 800d01e:	bd10      	pop	{r4, pc}

0800d020 <HW_RTC_Tick2ms>:
  return ((seconds * 1000) + ((tick * 1000) >> N_PREDIV_S));
 800d020:	22fa      	movs	r2, #250	; 0xfa
  tick = tick & PREDIV_S;
 800d022:	0583      	lsls	r3, r0, #22
  return ((seconds * 1000) + ((tick * 1000) >> N_PREDIV_S));
 800d024:	0092      	lsls	r2, r2, #2
  tick = tick & PREDIV_S;
 800d026:	0d9b      	lsrs	r3, r3, #22
  return ((seconds * 1000) + ((tick * 1000) >> N_PREDIV_S));
 800d028:	4353      	muls	r3, r2
  uint32_t seconds = tick >> N_PREDIV_S;
 800d02a:	0a80      	lsrs	r0, r0, #10
  return ((seconds * 1000) + ((tick * 1000) >> N_PREDIV_S));
 800d02c:	4350      	muls	r0, r2
 800d02e:	0a9b      	lsrs	r3, r3, #10
 800d030:	1818      	adds	r0, r3, r0
}
 800d032:	4770      	bx	lr

0800d034 <HW_RTC_GetTimerElapsedTime>:
{
 800d034:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint32_t CalendarValue = (uint32_t) HW_RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 800d036:	a901      	add	r1, sp, #4
 800d038:	4668      	mov	r0, sp
 800d03a:	f7ff ff89 	bl	800cf50 <HW_RTC_GetCalendarValue>
  return ((uint32_t)(CalendarValue - RtcTimerContext.Rtc_Time));
 800d03e:	4b02      	ldr	r3, [pc, #8]	; (800d048 <HW_RTC_GetTimerElapsedTime+0x14>)
 800d040:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d042:	1ac0      	subs	r0, r0, r3
}
 800d044:	b007      	add	sp, #28
 800d046:	bd00      	pop	{pc}
 800d048:	200012a8 	.word	0x200012a8

0800d04c <HW_RTC_GetTimerValue>:
{
 800d04c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint32_t CalendarValue = (uint32_t) HW_RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 800d04e:	a901      	add	r1, sp, #4
 800d050:	4668      	mov	r0, sp
 800d052:	f7ff ff7d 	bl	800cf50 <HW_RTC_GetCalendarValue>
}
 800d056:	b007      	add	sp, #28
 800d058:	bd00      	pop	{pc}
	...

0800d05c <HW_RTC_StopAlarm>:
  HAL_RTC_DeactivateAlarm(&RtcHandle, RTC_ALARM_A);
 800d05c:	2180      	movs	r1, #128	; 0x80
{
 800d05e:	b510      	push	{r4, lr}
  HAL_RTC_DeactivateAlarm(&RtcHandle, RTC_ALARM_A);
 800d060:	4c07      	ldr	r4, [pc, #28]	; (800d080 <HW_RTC_StopAlarm+0x24>)
 800d062:	0049      	lsls	r1, r1, #1
 800d064:	0020      	movs	r0, r4
 800d066:	f7f8 f989 	bl	800537c <HAL_RTC_DeactivateAlarm>
  __HAL_RTC_ALARM_CLEAR_FLAG(&RtcHandle, RTC_FLAG_ALRAF);
 800d06a:	6821      	ldr	r1, [r4, #0]
 800d06c:	4b05      	ldr	r3, [pc, #20]	; (800d084 <HW_RTC_StopAlarm+0x28>)
 800d06e:	68ca      	ldr	r2, [r1, #12]
 800d070:	b2d2      	uxtb	r2, r2
 800d072:	4313      	orrs	r3, r2
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800d074:	2280      	movs	r2, #128	; 0x80
  __HAL_RTC_ALARM_CLEAR_FLAG(&RtcHandle, RTC_FLAG_ALRAF);
 800d076:	60cb      	str	r3, [r1, #12]
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800d078:	4b03      	ldr	r3, [pc, #12]	; (800d088 <HW_RTC_StopAlarm+0x2c>)
 800d07a:	0292      	lsls	r2, r2, #10
 800d07c:	615a      	str	r2, [r3, #20]
}
 800d07e:	bd10      	pop	{r4, pc}
 800d080:	200012a8 	.word	0x200012a8
 800d084:	fffffe7f 	.word	0xfffffe7f
 800d088:	40010400 	.word	0x40010400

0800d08c <HW_RTC_SetAlarm>:
{
 800d08c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if ((MIN_ALARM_DELAY + McuWakeUpTimeCal) < ((timeout - HW_RTC_GetTimerElapsedTime())))
 800d08e:	4c4c      	ldr	r4, [pc, #304]	; (800d1c0 <HW_RTC_SetAlarm+0x134>)
{
 800d090:	b087      	sub	sp, #28
  if ((MIN_ALARM_DELAY + McuWakeUpTimeCal) < ((timeout - HW_RTC_GetTimerElapsedTime())))
 800d092:	0023      	movs	r3, r4
 800d094:	3350      	adds	r3, #80	; 0x50
{
 800d096:	0006      	movs	r6, r0
  if ((MIN_ALARM_DELAY + McuWakeUpTimeCal) < ((timeout - HW_RTC_GetTimerElapsedTime())))
 800d098:	2500      	movs	r5, #0
 800d09a:	5f5d      	ldrsh	r5, [r3, r5]
 800d09c:	f7ff ffca 	bl	800d034 <HW_RTC_GetTimerElapsedTime>
 800d0a0:	3503      	adds	r5, #3
 800d0a2:	1a30      	subs	r0, r6, r0
    LPM_SetStopMode(LPM_RTC_Id, LPM_Enable);
 800d0a4:	2100      	movs	r1, #0
  if ((MIN_ALARM_DELAY + McuWakeUpTimeCal) < ((timeout - HW_RTC_GetTimerElapsedTime())))
 800d0a6:	4285      	cmp	r5, r0
 800d0a8:	d300      	bcc.n	800d0ac <HW_RTC_SetAlarm+0x20>
    LPM_SetStopMode(LPM_RTC_Id, LPM_Disable);
 800d0aa:	2101      	movs	r1, #1
 800d0ac:	2004      	movs	r0, #4
 800d0ae:	f7ff fa37 	bl	800c520 <LPM_SetStopMode>
  if (LPM_GetMode() == LPM_StopMode)
 800d0b2:	f7ff fa4b 	bl	800c54c <LPM_GetMode>
 800d0b6:	2801      	cmp	r0, #1
 800d0b8:	d104      	bne.n	800d0c4 <HW_RTC_SetAlarm+0x38>
    timeout = timeout -  McuWakeUpTimeCal;
 800d0ba:	0023      	movs	r3, r4
 800d0bc:	3350      	adds	r3, #80	; 0x50
 800d0be:	2200      	movs	r2, #0
 800d0c0:	5e9b      	ldrsh	r3, [r3, r2]
 800d0c2:	1af6      	subs	r6, r6, r3
  RTC_TimeTypeDef RTC_TimeStruct = RtcTimerContext.RTC_Calndr_Time;
 800d0c4:	0023      	movs	r3, r4
 800d0c6:	3354      	adds	r3, #84	; 0x54
 800d0c8:	795a      	ldrb	r2, [r3, #5]
 800d0ca:	6de7      	ldr	r7, [r4, #92]	; 0x5c
 800d0cc:	9200      	str	r2, [sp, #0]
 800d0ce:	799a      	ldrb	r2, [r3, #6]
  RTC_DateTypeDef RTC_DateStruct = RtcTimerContext.RTC_Calndr_Date;
 800d0d0:	7e9c      	ldrb	r4, [r3, #26]
  RTC_TimeTypeDef RTC_TimeStruct = RtcTimerContext.RTC_Calndr_Time;
 800d0d2:	9201      	str	r2, [sp, #4]
 800d0d4:	79da      	ldrb	r2, [r3, #7]
 800d0d6:	791d      	ldrb	r5, [r3, #4]
 800d0d8:	9202      	str	r2, [sp, #8]
  RTC_DateTypeDef RTC_DateStruct = RtcTimerContext.RTC_Calndr_Date;
 800d0da:	7e5a      	ldrb	r2, [r3, #25]
 800d0dc:	7edb      	ldrb	r3, [r3, #27]
 800d0de:	9203      	str	r2, [sp, #12]
 800d0e0:	9304      	str	r3, [sp, #16]
  HW_RTC_StopAlarm();
 800d0e2:	f7ff ffbb 	bl	800d05c <HW_RTC_StopAlarm>
  rtcAlarmSubSeconds =  PREDIV_S - RTC_TimeStruct.SubSeconds;
 800d0e6:	4a37      	ldr	r2, [pc, #220]	; (800d1c4 <HW_RTC_SetAlarm+0x138>)
  rtcAlarmSubSeconds += (timeoutValue & PREDIV_S);
 800d0e8:	05b3      	lsls	r3, r6, #22
  rtcAlarmSubSeconds =  PREDIV_S - RTC_TimeStruct.SubSeconds;
 800d0ea:	1bd7      	subs	r7, r2, r7
  rtcAlarmSubSeconds += (timeoutValue & PREDIV_S);
 800d0ec:	0d9b      	lsrs	r3, r3, #22
 800d0ee:	18fb      	adds	r3, r7, r3
 800d0f0:	9205      	str	r2, [sp, #20]
  while (timeoutValue >= SECONDS_IN_1DAY)
 800d0f2:	4a35      	ldr	r2, [pc, #212]	; (800d1c8 <HW_RTC_SetAlarm+0x13c>)
  rtcAlarmSubSeconds += (timeoutValue & PREDIV_S);
 800d0f4:	b29b      	uxth	r3, r3
  timeoutValue >>= N_PREDIV_S;  /* convert timeout  in seconds */
 800d0f6:	0ab6      	lsrs	r6, r6, #10
  rtcAlarmDays =  RTC_DateStruct.Date;
 800d0f8:	b2a0      	uxth	r0, r4
  while (timeoutValue >= SECONDS_IN_1DAY)
 800d0fa:	4296      	cmp	r6, r2
 800d0fc:	d83f      	bhi.n	800d17e <HW_RTC_SetAlarm+0xf2>
  while (timeoutValue >= SECONDS_IN_1HOUR)
 800d0fe:	4a33      	ldr	r2, [pc, #204]	; (800d1cc <HW_RTC_SetAlarm+0x140>)
  rtcAlarmHours = RTC_TimeStruct.Hours;
 800d100:	b2ad      	uxth	r5, r5
  while (timeoutValue >= SECONDS_IN_1HOUR)
 800d102:	4296      	cmp	r6, r2
 800d104:	d840      	bhi.n	800d188 <HW_RTC_SetAlarm+0xfc>
  rtcAlarmMinutes = RTC_TimeStruct.Minutes;
 800d106:	466a      	mov	r2, sp
 800d108:	8817      	ldrh	r7, [r2, #0]
  while (timeoutValue >= SECONDS_IN_1MINUTE)
 800d10a:	2e3b      	cmp	r6, #59	; 0x3b
 800d10c:	d841      	bhi.n	800d192 <HW_RTC_SetAlarm+0x106>
 800d10e:	0a9a      	lsrs	r2, r3, #10
 800d110:	0294      	lsls	r4, r2, #10
 800d112:	1b1c      	subs	r4, r3, r4
 800d114:	9b01      	ldr	r3, [sp, #4]
 800d116:	b2a4      	uxth	r4, r4
 800d118:	18d2      	adds	r2, r2, r3
 800d11a:	1996      	adds	r6, r2, r6
 800d11c:	b2b6      	uxth	r6, r6
  while (rtcAlarmSeconds >= SECONDS_IN_1MINUTE)
 800d11e:	2e3b      	cmp	r6, #59	; 0x3b
 800d120:	d83b      	bhi.n	800d19a <HW_RTC_SetAlarm+0x10e>
  while (rtcAlarmMinutes >= MINUTES_IN_1HOUR)
 800d122:	2f3b      	cmp	r7, #59	; 0x3b
 800d124:	d83e      	bhi.n	800d1a4 <HW_RTC_SetAlarm+0x118>
  while (rtcAlarmHours >= HOURS_IN_1DAY)
 800d126:	2d17      	cmp	r5, #23
 800d128:	d841      	bhi.n	800d1ae <HW_RTC_SetAlarm+0x122>
 800d12a:	9a03      	ldr	r2, [sp, #12]
  if (RTC_DateStruct.Year % 4 == 0)
 800d12c:	9904      	ldr	r1, [sp, #16]
 800d12e:	3a01      	subs	r2, #1
 800d130:	4b27      	ldr	r3, [pc, #156]	; (800d1d0 <HW_RTC_SetAlarm+0x144>)
 800d132:	0789      	lsls	r1, r1, #30
 800d134:	d140      	bne.n	800d1b8 <HW_RTC_SetAlarm+0x12c>
    if (rtcAlarmDays > DaysInMonthLeapYear[ RTC_DateStruct.Month - 1 ])
 800d136:	5c99      	ldrb	r1, [r3, r2]
    if (rtcAlarmDays > DaysInMonth[ RTC_DateStruct.Month - 1 ])
 800d138:	4288      	cmp	r0, r1
 800d13a:	d902      	bls.n	800d142 <HW_RTC_SetAlarm+0xb6>
      rtcAlarmDays = rtcAlarmDays % DaysInMonth[ RTC_DateStruct.Month - 1 ];
 800d13c:	f7f3 f972 	bl	8000424 <__aeabi_idivmod>
 800d140:	b288      	uxth	r0, r1
  RTC_AlarmStructure.AlarmTime.SubSeconds = PREDIV_S - rtcAlarmSubSeconds;
 800d142:	9a05      	ldr	r2, [sp, #20]
 800d144:	4b1e      	ldr	r3, [pc, #120]	; (800d1c0 <HW_RTC_SetAlarm+0x134>)
 800d146:	1b14      	subs	r4, r2, r4
  RTC_AlarmStructure.AlarmSubSecondMask  = HW_RTC_ALARMSUBSECONDMASK;
 800d148:	22a0      	movs	r2, #160	; 0xa0
 800d14a:	0512      	lsls	r2, r2, #20
 800d14c:	641a      	str	r2, [r3, #64]	; 0x40
  RTC_AlarmStructure.AlarmDateWeekDay    = (uint8_t)rtcAlarmDays;
 800d14e:	001a      	movs	r2, r3
  RTC_AlarmStructure.AlarmTime.Seconds = rtcAlarmSeconds;
 800d150:	0019      	movs	r1, r3
  RTC_AlarmStructure.AlarmDateWeekDay    = (uint8_t)rtcAlarmDays;
 800d152:	3229      	adds	r2, #41	; 0x29
 800d154:	77d0      	strb	r0, [r2, #31]
  RTC_AlarmStructure.AlarmTime.TimeFormat   = RTC_TimeStruct.TimeFormat;
 800d156:	9a02      	ldr	r2, [sp, #8]
  RTC_AlarmStructure.Alarm = RTC_ALARM_A;
 800d158:	2080      	movs	r0, #128	; 0x80
  RTC_AlarmStructure.AlarmTime.Seconds = rtcAlarmSeconds;
 800d15a:	3128      	adds	r1, #40	; 0x28
  RTC_AlarmStructure.AlarmTime.TimeFormat   = RTC_TimeStruct.TimeFormat;
 800d15c:	70ca      	strb	r2, [r1, #3]
  RTC_AlarmStructure.AlarmDateWeekDaySel   = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800d15e:	2200      	movs	r2, #0
  RTC_AlarmStructure.Alarm = RTC_ALARM_A;
 800d160:	0040      	lsls	r0, r0, #1
 800d162:	64d8      	str	r0, [r3, #76]	; 0x4c
  HAL_RTC_SetAlarm_IT(&RtcHandle, &RTC_AlarmStructure, RTC_FORMAT_BIN);
 800d164:	0018      	movs	r0, r3
  RTC_AlarmStructure.AlarmTime.SubSeconds = PREDIV_S - rtcAlarmSubSeconds;
 800d166:	62dc      	str	r4, [r3, #44]	; 0x2c
  RTC_AlarmStructure.AlarmTime.Seconds = rtcAlarmSeconds;
 800d168:	708e      	strb	r6, [r1, #2]
  RTC_AlarmStructure.AlarmTime.Minutes = rtcAlarmMinutes;
 800d16a:	704f      	strb	r7, [r1, #1]
  RTC_AlarmStructure.AlarmTime.Hours   = rtcAlarmHours;
 800d16c:	700d      	strb	r5, [r1, #0]
  RTC_AlarmStructure.AlarmDateWeekDaySel   = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800d16e:	645a      	str	r2, [r3, #68]	; 0x44
  RTC_AlarmStructure.AlarmMask       = RTC_ALARMMASK_NONE;
 800d170:	63da      	str	r2, [r3, #60]	; 0x3c
  RTC_AlarmStructure.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800d172:	635a      	str	r2, [r3, #52]	; 0x34
  RTC_AlarmStructure.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800d174:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_RTC_SetAlarm_IT(&RtcHandle, &RTC_AlarmStructure, RTC_FORMAT_BIN);
 800d176:	f7f8 faeb 	bl	8005750 <HAL_RTC_SetAlarm_IT>
}
 800d17a:	b007      	add	sp, #28
 800d17c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    timeoutValue -= SECONDS_IN_1DAY;
 800d17e:	4915      	ldr	r1, [pc, #84]	; (800d1d4 <HW_RTC_SetAlarm+0x148>)
    rtcAlarmDays++;
 800d180:	3001      	adds	r0, #1
    timeoutValue -= SECONDS_IN_1DAY;
 800d182:	1876      	adds	r6, r6, r1
    rtcAlarmDays++;
 800d184:	b280      	uxth	r0, r0
 800d186:	e7b8      	b.n	800d0fa <HW_RTC_SetAlarm+0x6e>
    timeoutValue -= SECONDS_IN_1HOUR;
 800d188:	4913      	ldr	r1, [pc, #76]	; (800d1d8 <HW_RTC_SetAlarm+0x14c>)
    rtcAlarmHours++;
 800d18a:	3501      	adds	r5, #1
    timeoutValue -= SECONDS_IN_1HOUR;
 800d18c:	1876      	adds	r6, r6, r1
    rtcAlarmHours++;
 800d18e:	b2ad      	uxth	r5, r5
 800d190:	e7b7      	b.n	800d102 <HW_RTC_SetAlarm+0x76>
    rtcAlarmMinutes++;
 800d192:	3701      	adds	r7, #1
    timeoutValue -= SECONDS_IN_1MINUTE;
 800d194:	3e3c      	subs	r6, #60	; 0x3c
    rtcAlarmMinutes++;
 800d196:	b2bf      	uxth	r7, r7
 800d198:	e7b7      	b.n	800d10a <HW_RTC_SetAlarm+0x7e>
    rtcAlarmSeconds -= SECONDS_IN_1MINUTE;
 800d19a:	3e3c      	subs	r6, #60	; 0x3c
    rtcAlarmMinutes++;
 800d19c:	3701      	adds	r7, #1
    rtcAlarmSeconds -= SECONDS_IN_1MINUTE;
 800d19e:	b2b6      	uxth	r6, r6
    rtcAlarmMinutes++;
 800d1a0:	b2bf      	uxth	r7, r7
 800d1a2:	e7bc      	b.n	800d11e <HW_RTC_SetAlarm+0x92>
    rtcAlarmMinutes -= MINUTES_IN_1HOUR;
 800d1a4:	3f3c      	subs	r7, #60	; 0x3c
    rtcAlarmHours++;
 800d1a6:	3501      	adds	r5, #1
    rtcAlarmMinutes -= MINUTES_IN_1HOUR;
 800d1a8:	b2bf      	uxth	r7, r7
    rtcAlarmHours++;
 800d1aa:	b2ad      	uxth	r5, r5
 800d1ac:	e7b9      	b.n	800d122 <HW_RTC_SetAlarm+0x96>
    rtcAlarmHours -= HOURS_IN_1DAY;
 800d1ae:	3d18      	subs	r5, #24
    rtcAlarmDays++;
 800d1b0:	3001      	adds	r0, #1
    rtcAlarmHours -= HOURS_IN_1DAY;
 800d1b2:	b2ad      	uxth	r5, r5
    rtcAlarmDays++;
 800d1b4:	b280      	uxth	r0, r0
 800d1b6:	e7b6      	b.n	800d126 <HW_RTC_SetAlarm+0x9a>
    if (rtcAlarmDays > DaysInMonth[ RTC_DateStruct.Month - 1 ])
 800d1b8:	189b      	adds	r3, r3, r2
 800d1ba:	7b19      	ldrb	r1, [r3, #12]
 800d1bc:	e7bc      	b.n	800d138 <HW_RTC_SetAlarm+0xac>
 800d1be:	46c0      	nop			; (mov r8, r8)
 800d1c0:	200012a8 	.word	0x200012a8
 800d1c4:	000003ff 	.word	0x000003ff
 800d1c8:	0001517f 	.word	0x0001517f
 800d1cc:	00000e0f 	.word	0x00000e0f
 800d1d0:	0800efc4 	.word	0x0800efc4
 800d1d4:	fffeae80 	.word	0xfffeae80
 800d1d8:	fffff1f0 	.word	0xfffff1f0

0800d1dc <HW_RTC_IrqHandler>:
  LPM_SetStopMode(LPM_RTC_Id, LPM_Enable);
 800d1dc:	2004      	movs	r0, #4
{
 800d1de:	b510      	push	{r4, lr}
  LPM_SetStopMode(LPM_RTC_Id, LPM_Enable);
 800d1e0:	2100      	movs	r1, #0
 800d1e2:	f7ff f99d 	bl	800c520 <LPM_SetStopMode>
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800d1e6:	2280      	movs	r2, #128	; 0x80
 800d1e8:	4b09      	ldr	r3, [pc, #36]	; (800d210 <HW_RTC_IrqHandler+0x34>)
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != RESET)
 800d1ea:	480a      	ldr	r0, [pc, #40]	; (800d214 <HW_RTC_IrqHandler+0x38>)
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800d1ec:	0292      	lsls	r2, r2, #10
 800d1ee:	615a      	str	r2, [r3, #20]
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != RESET)
 800d1f0:	6803      	ldr	r3, [r0, #0]
 800d1f2:	689a      	ldr	r2, [r3, #8]
 800d1f4:	04d2      	lsls	r2, r2, #19
 800d1f6:	d509      	bpl.n	800d20c <HW_RTC_IrqHandler+0x30>
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != RESET)
 800d1f8:	68da      	ldr	r2, [r3, #12]
 800d1fa:	05d2      	lsls	r2, r2, #23
 800d1fc:	d506      	bpl.n	800d20c <HW_RTC_IrqHandler+0x30>
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800d1fe:	68d9      	ldr	r1, [r3, #12]
 800d200:	4a05      	ldr	r2, [pc, #20]	; (800d218 <HW_RTC_IrqHandler+0x3c>)
 800d202:	b2c9      	uxtb	r1, r1
 800d204:	430a      	orrs	r2, r1
 800d206:	60da      	str	r2, [r3, #12]
      HAL_RTC_AlarmAEventCallback(hrtc);
 800d208:	f000 fb54 	bl	800d8b4 <HAL_RTC_AlarmAEventCallback>
}
 800d20c:	bd10      	pop	{r4, pc}
 800d20e:	46c0      	nop			; (mov r8, r8)
 800d210:	40010400 	.word	0x40010400
 800d214:	200012a8 	.word	0x200012a8
 800d218:	fffffe7f 	.word	0xfffffe7f

0800d21c <HW_RTC_DelayMs>:
{
 800d21c:	b570      	push	{r4, r5, r6, lr}
  return (uint32_t)((((uint64_t)timeMilliSec) * CONV_DENOM) / CONV_NUMER);
 800d21e:	0e41      	lsrs	r1, r0, #25
 800d220:	227d      	movs	r2, #125	; 0x7d
 800d222:	2300      	movs	r3, #0
 800d224:	01c0      	lsls	r0, r0, #7
 800d226:	f7f3 f941 	bl	80004ac <__aeabi_uldivmod>
 800d22a:	0004      	movs	r4, r0
  timeout = HW_RTC_GetTimerValue();
 800d22c:	f7ff ff0e 	bl	800d04c <HW_RTC_GetTimerValue>
 800d230:	0005      	movs	r5, r0
  while (((HW_RTC_GetTimerValue() - timeout)) < delayValue)
 800d232:	f7ff ff0b 	bl	800d04c <HW_RTC_GetTimerValue>
 800d236:	1b40      	subs	r0, r0, r5
 800d238:	42a0      	cmp	r0, r4
 800d23a:	d300      	bcc.n	800d23e <HW_RTC_DelayMs+0x22>
}
 800d23c:	bd70      	pop	{r4, r5, r6, pc}
    __NOP();
 800d23e:	46c0      	nop			; (mov r8, r8)
 800d240:	e7f7      	b.n	800d232 <HW_RTC_DelayMs+0x16>
	...

0800d244 <HW_RTC_SetTimerContext>:
{
 800d244:	b510      	push	{r4, lr}
  RtcTimerContext.Rtc_Time = (uint32_t) HW_RTC_GetCalendarValue(&RtcTimerContext.RTC_Calndr_Date, &RtcTimerContext.RTC_Calndr_Time);
 800d246:	4c04      	ldr	r4, [pc, #16]	; (800d258 <HW_RTC_SetTimerContext+0x14>)
 800d248:	0021      	movs	r1, r4
 800d24a:	0020      	movs	r0, r4
 800d24c:	3158      	adds	r1, #88	; 0x58
 800d24e:	306c      	adds	r0, #108	; 0x6c
 800d250:	f7ff fe7e 	bl	800cf50 <HW_RTC_GetCalendarValue>
 800d254:	6560      	str	r0, [r4, #84]	; 0x54
}
 800d256:	bd10      	pop	{r4, pc}
 800d258:	200012a8 	.word	0x200012a8

0800d25c <HW_RTC_Init>:
{
 800d25c:	b570      	push	{r4, r5, r6, lr}
  if (HW_RTC_Initalized == false)
 800d25e:	4c19      	ldr	r4, [pc, #100]	; (800d2c4 <HW_RTC_Init+0x68>)
{
 800d260:	b086      	sub	sp, #24
  if (HW_RTC_Initalized == false)
 800d262:	0026      	movs	r6, r4
 800d264:	3670      	adds	r6, #112	; 0x70
 800d266:	7835      	ldrb	r5, [r6, #0]
 800d268:	2d00      	cmp	r5, #0
 800d26a:	d128      	bne.n	800d2be <HW_RTC_Init+0x62>
  RtcHandle.Instance = RTC;
 800d26c:	4b16      	ldr	r3, [pc, #88]	; (800d2c8 <HW_RTC_Init+0x6c>)
  HAL_RTC_Init(&RtcHandle);
 800d26e:	0020      	movs	r0, r4
  RtcHandle.Instance = RTC;
 800d270:	6023      	str	r3, [r4, #0]
  RtcHandle.Init.AsynchPrediv = PREDIV_A; /* RTC_ASYNCH_PREDIV; */
 800d272:	231f      	movs	r3, #31
 800d274:	60a3      	str	r3, [r4, #8]
  RtcHandle.Init.SynchPrediv = PREDIV_S; /* RTC_SYNCH_PREDIV; */
 800d276:	4b15      	ldr	r3, [pc, #84]	; (800d2cc <HW_RTC_Init+0x70>)
  RtcHandle.Init.HourFormat = RTC_HOURFORMAT_24;
 800d278:	6065      	str	r5, [r4, #4]
  RtcHandle.Init.SynchPrediv = PREDIV_S; /* RTC_SYNCH_PREDIV; */
 800d27a:	60e3      	str	r3, [r4, #12]
  RtcHandle.Init.OutPut = RTC_OUTPUT;
 800d27c:	6125      	str	r5, [r4, #16]
  RtcHandle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800d27e:	61a5      	str	r5, [r4, #24]
  RtcHandle.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800d280:	61e5      	str	r5, [r4, #28]
  HAL_RTC_Init(&RtcHandle);
 800d282:	f7f8 f911 	bl	80054a8 <HAL_RTC_Init>
  RTC_DateStruct.WeekDay = RTC_WEEKDAY_MONDAY;
 800d286:	4b12      	ldr	r3, [pc, #72]	; (800d2d0 <HW_RTC_Init+0x74>)
  HAL_RTC_SetDate(&RtcHandle, &RTC_DateStruct, RTC_FORMAT_BIN);
 800d288:	002a      	movs	r2, r5
 800d28a:	4669      	mov	r1, sp
 800d28c:	0020      	movs	r0, r4
  RTC_DateStruct.WeekDay = RTC_WEEKDAY_MONDAY;
 800d28e:	9300      	str	r3, [sp, #0]
  HAL_RTC_SetDate(&RtcHandle, &RTC_DateStruct, RTC_FORMAT_BIN);
 800d290:	f7f8 f9f2 	bl	8005678 <HAL_RTC_SetDate>
  HAL_RTC_SetTime(&RtcHandle, &RTC_TimeStruct, RTC_FORMAT_BIN);
 800d294:	002a      	movs	r2, r5
 800d296:	a901      	add	r1, sp, #4
 800d298:	0020      	movs	r0, r4
  RTC_TimeStruct.Hours = 0;
 800d29a:	9501      	str	r5, [sp, #4]
  RTC_TimeStruct.TimeFormat = 0;
 800d29c:	9502      	str	r5, [sp, #8]
  RTC_TimeStruct.StoreOperation = RTC_DAYLIGHTSAVING_NONE;
 800d29e:	9505      	str	r5, [sp, #20]
  RTC_TimeStruct.DayLightSaving = RTC_STOREOPERATION_RESET;
 800d2a0:	9504      	str	r5, [sp, #16]
  HAL_RTC_SetTime(&RtcHandle, &RTC_TimeStruct, RTC_FORMAT_BIN);
 800d2a2:	f7f8 f969 	bl	8005578 <HAL_RTC_SetTime>
  HAL_RTCEx_EnableBypassShadow(&RtcHandle);
 800d2a6:	0020      	movs	r0, r4
 800d2a8:	f7f8 fb7a 	bl	80059a0 <HAL_RTCEx_EnableBypassShadow>
  HAL_RTC_DeactivateAlarm(&RtcHandle, RTC_ALARM_A);
 800d2ac:	2180      	movs	r1, #128	; 0x80
 800d2ae:	0020      	movs	r0, r4
 800d2b0:	0049      	lsls	r1, r1, #1
 800d2b2:	f7f8 f863 	bl	800537c <HAL_RTC_DeactivateAlarm>
    HW_RTC_SetTimerContext();
 800d2b6:	f7ff ffc5 	bl	800d244 <HW_RTC_SetTimerContext>
    HW_RTC_Initalized = true;
 800d2ba:	2301      	movs	r3, #1
 800d2bc:	7033      	strb	r3, [r6, #0]
}
 800d2be:	b006      	add	sp, #24
 800d2c0:	bd70      	pop	{r4, r5, r6, pc}
 800d2c2:	46c0      	nop			; (mov r8, r8)
 800d2c4:	200012a8 	.word	0x200012a8
 800d2c8:	40002800 	.word	0x40002800
 800d2cc:	000003ff 	.word	0x000003ff
 800d2d0:	03091201 	.word	0x03091201

0800d2d4 <HW_RTC_GetTimerContext>:
  return RtcTimerContext.Rtc_Time;
 800d2d4:	4b01      	ldr	r3, [pc, #4]	; (800d2dc <HW_RTC_GetTimerContext+0x8>)
 800d2d6:	6d58      	ldr	r0, [r3, #84]	; 0x54
}
 800d2d8:	4770      	bx	lr
 800d2da:	46c0      	nop			; (mov r8, r8)
 800d2dc:	200012a8 	.word	0x200012a8

0800d2e0 <HW_RTC_GetCalendarTime>:
 * \param [IN]   pointer to ms
 *
 * \return uint32_t seconds
 */
uint32_t HW_RTC_GetCalendarTime(uint16_t *mSeconds)
{
 800d2e0:	b570      	push	{r4, r5, r6, lr}
 800d2e2:	b086      	sub	sp, #24
 800d2e4:	0006      	movs	r6, r0
  RTC_TimeTypeDef RTC_TimeStruct ;
  RTC_DateTypeDef RTC_DateStruct;
  uint32_t ticks;

  uint64_t calendarValue = HW_RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 800d2e6:	a901      	add	r1, sp, #4
 800d2e8:	4668      	mov	r0, sp
 800d2ea:	f7ff fe31 	bl	800cf50 <HW_RTC_GetCalendarValue>
 800d2ee:	0004      	movs	r4, r0

  uint32_t seconds = (uint32_t)(calendarValue >> N_PREDIV_S);

  ticks = (uint32_t) calendarValue & PREDIV_S;
 800d2f0:	0580      	lsls	r0, r0, #22
 800d2f2:	0d80      	lsrs	r0, r0, #22
  uint64_t calendarValue = HW_RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 800d2f4:	000d      	movs	r5, r1

  *mSeconds = HW_RTC_Tick2ms(ticks);
 800d2f6:	f7ff fe93 	bl	800d020 <HW_RTC_Tick2ms>
  uint32_t seconds = (uint32_t)(calendarValue >> N_PREDIV_S);
 800d2fa:	05ad      	lsls	r5, r5, #22
  *mSeconds = HW_RTC_Tick2ms(ticks);
 800d2fc:	8030      	strh	r0, [r6, #0]
  uint32_t seconds = (uint32_t)(calendarValue >> N_PREDIV_S);
 800d2fe:	0aa0      	lsrs	r0, r4, #10
 800d300:	4328      	orrs	r0, r5

  return seconds;
}
 800d302:	b006      	add	sp, #24
 800d304:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d308 <HW_RTC_BKUPWrite>:

void HW_RTC_BKUPWrite(uint32_t Data0, uint32_t Data1)
{
 800d308:	b570      	push	{r4, r5, r6, lr}
 800d30a:	000d      	movs	r5, r1
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR0, Data0);
 800d30c:	4c05      	ldr	r4, [pc, #20]	; (800d324 <HW_RTC_BKUPWrite+0x1c>)
{
 800d30e:	0002      	movs	r2, r0
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR0, Data0);
 800d310:	2100      	movs	r1, #0
 800d312:	0020      	movs	r0, r4
 800d314:	f7f8 fb38 	bl	8005988 <HAL_RTCEx_BKUPWrite>
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR1, Data1);
 800d318:	002a      	movs	r2, r5
 800d31a:	2101      	movs	r1, #1
 800d31c:	0020      	movs	r0, r4
 800d31e:	f7f8 fb33 	bl	8005988 <HAL_RTCEx_BKUPWrite>
}
 800d322:	bd70      	pop	{r4, r5, r6, pc}
 800d324:	200012a8 	.word	0x200012a8

0800d328 <HW_RTC_BKUPRead>:

void HW_RTC_BKUPRead(uint32_t *Data0, uint32_t *Data1)
{
 800d328:	b570      	push	{r4, r5, r6, lr}
  *Data0 = HAL_RTCEx_BKUPRead(&RtcHandle, RTC_BKP_DR0);
 800d32a:	4c07      	ldr	r4, [pc, #28]	; (800d348 <HW_RTC_BKUPRead+0x20>)
{
 800d32c:	0006      	movs	r6, r0
 800d32e:	000d      	movs	r5, r1
  *Data0 = HAL_RTCEx_BKUPRead(&RtcHandle, RTC_BKP_DR0);
 800d330:	0020      	movs	r0, r4
 800d332:	2100      	movs	r1, #0
 800d334:	f7f8 fb2e 	bl	8005994 <HAL_RTCEx_BKUPRead>
  *Data1 = HAL_RTCEx_BKUPRead(&RtcHandle, RTC_BKP_DR1);
 800d338:	2101      	movs	r1, #1
  *Data0 = HAL_RTCEx_BKUPRead(&RtcHandle, RTC_BKP_DR0);
 800d33a:	6030      	str	r0, [r6, #0]
  *Data1 = HAL_RTCEx_BKUPRead(&RtcHandle, RTC_BKP_DR1);
 800d33c:	0020      	movs	r0, r4
 800d33e:	f7f8 fb29 	bl	8005994 <HAL_RTCEx_BKUPRead>
 800d342:	6028      	str	r0, [r5, #0]
}
 800d344:	bd70      	pop	{r4, r5, r6, pc}
 800d346:	46c0      	nop			; (mov r8, r8)
 800d348:	200012a8 	.word	0x200012a8

0800d34c <HW_SPI_IoInit>:
  /*##-2- Configure the SPI GPIOs */
  HW_SPI_IoDeInit();
}

void HW_SPI_IoInit(void)
{
 800d34c:	b570      	push	{r4, r5, r6, lr}
 800d34e:	b086      	sub	sp, #24
  GPIO_InitTypeDef initStruct = {0};
 800d350:	2214      	movs	r2, #20
 800d352:	2100      	movs	r1, #0
 800d354:	a801      	add	r0, sp, #4
 800d356:	f000 fe16 	bl	800df86 <memset>
  initStruct.Pull = GPIO_NOPULL  ;
  initStruct.Speed = GPIO_SPEED_HIGH;
  initStruct.Alternate = SPI1_AF ;

  HW_GPIO_Init(RADIO_SCLK_PORT, RADIO_SCLK_PIN, &initStruct);
  HW_GPIO_Init(RADIO_MISO_PORT, RADIO_MISO_PIN, &initStruct);
 800d35a:	24a0      	movs	r4, #160	; 0xa0
  initStruct.Mode = GPIO_MODE_AF_PP;
 800d35c:	2302      	movs	r3, #2
  HW_GPIO_Init(RADIO_MISO_PORT, RADIO_MISO_PIN, &initStruct);
 800d35e:	05e4      	lsls	r4, r4, #23
  initStruct.Mode = GPIO_MODE_AF_PP;
 800d360:	9302      	str	r3, [sp, #8]
  HW_GPIO_Init(RADIO_SCLK_PORT, RADIO_SCLK_PIN, &initStruct);
 800d362:	aa01      	add	r2, sp, #4
  initStruct.Speed = GPIO_SPEED_HIGH;
 800d364:	3301      	adds	r3, #1
  HW_GPIO_Init(RADIO_SCLK_PORT, RADIO_SCLK_PIN, &initStruct);
 800d366:	2108      	movs	r1, #8
 800d368:	480f      	ldr	r0, [pc, #60]	; (800d3a8 <HW_SPI_IoInit+0x5c>)
  initStruct.Speed = GPIO_SPEED_HIGH;
 800d36a:	9304      	str	r3, [sp, #16]
  HW_GPIO_Init(RADIO_MOSI_PORT, RADIO_MOSI_PIN, &initStruct);

  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
  initStruct.Pull = GPIO_NOPULL;

  HW_GPIO_Init(RADIO_NSS_PORT, RADIO_NSS_PIN, &initStruct);
 800d36c:	2580      	movs	r5, #128	; 0x80
  HW_GPIO_Init(RADIO_SCLK_PORT, RADIO_SCLK_PIN, &initStruct);
 800d36e:	f7ff fd75 	bl	800ce5c <HW_GPIO_Init>
  HW_GPIO_Init(RADIO_MISO_PORT, RADIO_MISO_PIN, &initStruct);
 800d372:	aa01      	add	r2, sp, #4
 800d374:	0020      	movs	r0, r4
 800d376:	2140      	movs	r1, #64	; 0x40
 800d378:	f7ff fd70 	bl	800ce5c <HW_GPIO_Init>
  HW_GPIO_Init(RADIO_MOSI_PORT, RADIO_MOSI_PIN, &initStruct);
 800d37c:	aa01      	add	r2, sp, #4
 800d37e:	0020      	movs	r0, r4
 800d380:	2180      	movs	r1, #128	; 0x80
 800d382:	f7ff fd6b 	bl	800ce5c <HW_GPIO_Init>
  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d386:	2601      	movs	r6, #1
  initStruct.Pull = GPIO_NOPULL;
 800d388:	2300      	movs	r3, #0
  HW_GPIO_Init(RADIO_NSS_PORT, RADIO_NSS_PIN, &initStruct);
 800d38a:	022d      	lsls	r5, r5, #8
 800d38c:	aa01      	add	r2, sp, #4
 800d38e:	0029      	movs	r1, r5
 800d390:	0020      	movs	r0, r4
  initStruct.Pull = GPIO_NOPULL;
 800d392:	9303      	str	r3, [sp, #12]
  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d394:	9602      	str	r6, [sp, #8]
  HW_GPIO_Init(RADIO_NSS_PORT, RADIO_NSS_PIN, &initStruct);
 800d396:	f7ff fd61 	bl	800ce5c <HW_GPIO_Init>

  HW_GPIO_Write(RADIO_NSS_PORT, RADIO_NSS_PIN, 1);
 800d39a:	0032      	movs	r2, r6
 800d39c:	0029      	movs	r1, r5
 800d39e:	0020      	movs	r0, r4
 800d3a0:	f7ff fdd0 	bl	800cf44 <HW_GPIO_Write>
}
 800d3a4:	b006      	add	sp, #24
 800d3a6:	bd70      	pop	{r4, r5, r6, pc}
 800d3a8:	50000400 	.word	0x50000400

0800d3ac <HW_SPI_Init>:
  hspi.Instance = SPI1;
 800d3ac:	4b1c      	ldr	r3, [pc, #112]	; (800d420 <HW_SPI_Init+0x74>)
 800d3ae:	481d      	ldr	r0, [pc, #116]	; (800d424 <HW_SPI_Init+0x78>)
{
 800d3b0:	b510      	push	{r4, lr}
  hspi.Instance = SPI1;
 800d3b2:	6003      	str	r3, [r0, #0]
/* Private functions ---------------------------------------------------------*/

static uint32_t SpiFrequency(uint32_t hz)
{
  uint32_t divisor = 0;
  uint32_t SysClkTmp = SystemCoreClock;
 800d3b4:	4b1c      	ldr	r3, [pc, #112]	; (800d428 <HW_SPI_Init+0x7c>)
  uint32_t baudRate;

  while (SysClkTmp > hz)
 800d3b6:	491d      	ldr	r1, [pc, #116]	; (800d42c <HW_SPI_Init+0x80>)
  uint32_t SysClkTmp = SystemCoreClock;
 800d3b8:	681a      	ldr	r2, [r3, #0]
  uint32_t divisor = 0;
 800d3ba:	2300      	movs	r3, #0
  while (SysClkTmp > hz)
 800d3bc:	428a      	cmp	r2, r1
 800d3be:	d903      	bls.n	800d3c8 <HW_SPI_Init+0x1c>
  {
    divisor++;
 800d3c0:	3301      	adds	r3, #1
    SysClkTmp = (SysClkTmp >> 1);
 800d3c2:	0852      	lsrs	r2, r2, #1

    if (divisor >= 7)
 800d3c4:	2b07      	cmp	r3, #7
 800d3c6:	d1f9      	bne.n	800d3bc <HW_SPI_Init+0x10>
    {
      break;
    }
  }

  baudRate = (((divisor & 0x4) == 0) ? 0x0 : SPI_CR1_BR_2) |
 800d3c8:	2204      	movs	r2, #4
 800d3ca:	401a      	ands	r2, r3
 800d3cc:	d000      	beq.n	800d3d0 <HW_SPI_Init+0x24>
 800d3ce:	2220      	movs	r2, #32
             (((divisor & 0x2) == 0) ? 0x0 : SPI_CR1_BR_1) |
 800d3d0:	2102      	movs	r1, #2
 800d3d2:	4019      	ands	r1, r3
 800d3d4:	d000      	beq.n	800d3d8 <HW_SPI_Init+0x2c>
 800d3d6:	2110      	movs	r1, #16
  baudRate = (((divisor & 0x4) == 0) ? 0x0 : SPI_CR1_BR_2) |
 800d3d8:	430a      	orrs	r2, r1
             (((divisor & 0x1) == 0) ? 0x0 : SPI_CR1_BR_0);
 800d3da:	2101      	movs	r1, #1
 800d3dc:	400b      	ands	r3, r1
 800d3de:	d000      	beq.n	800d3e2 <HW_SPI_Init+0x36>
 800d3e0:	2308      	movs	r3, #8
  baudRate = (((divisor & 0x4) == 0) ? 0x0 : SPI_CR1_BR_2) |
 800d3e2:	4313      	orrs	r3, r2
  hspi.Init.BaudRatePrescaler = SpiFrequency(10000000);
 800d3e4:	61c3      	str	r3, [r0, #28]
  hspi.Init.Direction      = SPI_DIRECTION_2LINES;
 800d3e6:	2300      	movs	r3, #0
  hspi.Init.Mode           = SPI_MODE_MASTER;
 800d3e8:	2282      	movs	r2, #130	; 0x82
  hspi.Init.Direction      = SPI_DIRECTION_2LINES;
 800d3ea:	6083      	str	r3, [r0, #8]
  hspi.Init.CLKPolarity    = SPI_POLARITY_LOW;
 800d3ec:	6103      	str	r3, [r0, #16]
  hspi.Init.CLKPhase       = SPI_PHASE_1EDGE;
 800d3ee:	6143      	str	r3, [r0, #20]
  hspi.Init.DataSize       = SPI_DATASIZE_8BIT;
 800d3f0:	60c3      	str	r3, [r0, #12]
  hspi.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d3f2:	6283      	str	r3, [r0, #40]	; 0x28
  hspi.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 800d3f4:	6203      	str	r3, [r0, #32]
  hspi.Init.TIMode         = SPI_TIMODE_DISABLE;
 800d3f6:	6243      	str	r3, [r0, #36]	; 0x24
  SPI_CLK_ENABLE();
 800d3f8:	2380      	movs	r3, #128	; 0x80
  hspi.Init.Mode           = SPI_MODE_MASTER;
 800d3fa:	0052      	lsls	r2, r2, #1
 800d3fc:	6042      	str	r2, [r0, #4]
  hspi.Init.NSS            = SPI_NSS_SOFT;
 800d3fe:	32fc      	adds	r2, #252	; 0xfc
 800d400:	6182      	str	r2, [r0, #24]
  SPI_CLK_ENABLE();
 800d402:	4a0b      	ldr	r2, [pc, #44]	; (800d430 <HW_SPI_Init+0x84>)
 800d404:	015b      	lsls	r3, r3, #5
 800d406:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800d408:	430b      	orrs	r3, r1
 800d40a:	6353      	str	r3, [r2, #52]	; 0x34
  if (HAL_SPI_Init(&hspi) != HAL_OK)
 800d40c:	f7f8 fb44 	bl	8005a98 <HAL_SPI_Init>
 800d410:	2800      	cmp	r0, #0
 800d412:	d001      	beq.n	800d418 <HW_SPI_Init+0x6c>
    Error_Handler();
 800d414:	f7ff fcfc 	bl	800ce10 <Error_Handler>
  HW_SPI_IoInit();
 800d418:	f7ff ff98 	bl	800d34c <HW_SPI_IoInit>
}
 800d41c:	bd10      	pop	{r4, pc}
 800d41e:	46c0      	nop			; (mov r8, r8)
 800d420:	40013000 	.word	0x40013000
 800d424:	2000131c 	.word	0x2000131c
 800d428:	20000044 	.word	0x20000044
 800d42c:	00989680 	.word	0x00989680
 800d430:	40021000 	.word	0x40021000

0800d434 <HW_SPI_InOut>:
{
 800d434:	b510      	push	{r4, lr}
 800d436:	210e      	movs	r1, #14
  HAL_SPI_TransmitReceive(&hspi, (uint8_t *) &txData, (uint8_t *) &rxData, 1, HAL_MAX_DELAY);
 800d438:	2416      	movs	r4, #22
 800d43a:	2301      	movs	r3, #1
{
 800d43c:	b086      	sub	sp, #24
 800d43e:	4469      	add	r1, sp
  HAL_SPI_TransmitReceive(&hspi, (uint8_t *) &txData, (uint8_t *) &rxData, 1, HAL_MAX_DELAY);
 800d440:	446c      	add	r4, sp
 800d442:	425b      	negs	r3, r3
{
 800d444:	8008      	strh	r0, [r1, #0]
  HAL_SPI_TransmitReceive(&hspi, (uint8_t *) &txData, (uint8_t *) &rxData, 1, HAL_MAX_DELAY);
 800d446:	0022      	movs	r2, r4
 800d448:	9300      	str	r3, [sp, #0]
 800d44a:	4803      	ldr	r0, [pc, #12]	; (800d458 <HW_SPI_InOut+0x24>)
 800d44c:	3302      	adds	r3, #2
 800d44e:	f7f8 fb63 	bl	8005b18 <HAL_SPI_TransmitReceive>
  return rxData;
 800d452:	8820      	ldrh	r0, [r4, #0]
}
 800d454:	b006      	add	sp, #24
 800d456:	bd10      	pop	{r4, pc}
 800d458:	2000131c 	.word	0x2000131c

0800d45c <LoraMacProcessNotify>:
}


void LoraMacProcessNotify(void)
{
  LoraMacProcessRequest = LORA_SET;
 800d45c:	2201      	movs	r2, #1
 800d45e:	4b01      	ldr	r3, [pc, #4]	; (800d464 <LoraMacProcessNotify+0x8>)
 800d460:	701a      	strb	r2, [r3, #0]
}
 800d462:	4770      	bx	lr
 800d464:	20001374 	.word	0x20001374

0800d468 <OnTimerLedEvent>:
  return batteryLevel;
}

#ifdef USE_B_L072Z_LRWAN1
static void OnTimerLedEvent(void *context)
{
 800d468:	b510      	push	{r4, lr}
  LED_Off(LED_RED1) ;
 800d46a:	2001      	movs	r0, #1
 800d46c:	f7f5 f99c 	bl	80027a8 <BSP_LED_Off>
}
 800d470:	bd10      	pop	{r4, pc}
	...

0800d474 <LORA_TxNeeded>:
  AppData.BuffSize = 0;
 800d474:	2380      	movs	r3, #128	; 0x80
{
 800d476:	b510      	push	{r4, lr}
  AppData.BuffSize = 0;
 800d478:	4803      	ldr	r0, [pc, #12]	; (800d488 <LORA_TxNeeded+0x14>)
 800d47a:	009b      	lsls	r3, r3, #2
 800d47c:	8083      	strh	r3, [r0, #4]
  LORA_send(&AppData, LORAWAN_UNCONFIRMED_MSG);
 800d47e:	2100      	movs	r1, #0
 800d480:	f7fe ffc2 	bl	800c408 <LORA_send>
}
 800d484:	bd10      	pop	{r4, pc}
 800d486:	46c0      	nop			; (mov r8, r8)
 800d488:	200001bc 	.word	0x200001bc

0800d48c <LORA_ConfirmClass>:
  PRINTF("switch to class %c done\n\r", "ABC"[Class]);
 800d48c:	4b06      	ldr	r3, [pc, #24]	; (800d4a8 <LORA_ConfirmClass+0x1c>)
{
 800d48e:	b510      	push	{r4, lr}
  PRINTF("switch to class %c done\n\r", "ABC"[Class]);
 800d490:	5c19      	ldrb	r1, [r3, r0]
 800d492:	4806      	ldr	r0, [pc, #24]	; (800d4ac <LORA_ConfirmClass+0x20>)
 800d494:	f7ff fb0c 	bl	800cab0 <TraceSend>
  AppData.BuffSize = 0;
 800d498:	2380      	movs	r3, #128	; 0x80
 800d49a:	4805      	ldr	r0, [pc, #20]	; (800d4b0 <LORA_ConfirmClass+0x24>)
 800d49c:	009b      	lsls	r3, r3, #2
 800d49e:	8083      	strh	r3, [r0, #4]
  LORA_send(&AppData, LORAWAN_UNCONFIRMED_MSG);
 800d4a0:	2100      	movs	r1, #0
 800d4a2:	f7fe ffb1 	bl	800c408 <LORA_send>
}
 800d4a6:	bd10      	pop	{r4, pc}
 800d4a8:	0800f57c 	.word	0x0800f57c
 800d4ac:	0800f562 	.word	0x0800f562
 800d4b0:	200001bc 	.word	0x200001bc

0800d4b4 <LORA_HasJoined>:
{
 800d4b4:	b510      	push	{r4, lr}
  LORA_RequestClass(LORAWAN_DEFAULT_CLASS);
 800d4b6:	2000      	movs	r0, #0
 800d4b8:	f7fe ffde 	bl	800c478 <LORA_RequestClass>
}
 800d4bc:	bd10      	pop	{r4, pc}
	...

0800d4c0 <LORA_RxData>:
{
 800d4c0:	b510      	push	{r4, lr}
 800d4c2:	0004      	movs	r4, r0
  PRINTF("PACKET RECEIVED ON PORT %d\n\r", AppData->Port);
 800d4c4:	7941      	ldrb	r1, [r0, #5]
 800d4c6:	4819      	ldr	r0, [pc, #100]	; (800d52c <LORA_RxData+0x6c>)
 800d4c8:	f7ff faf2 	bl	800cab0 <TraceSend>
  switch (AppData->Port)
 800d4cc:	7963      	ldrb	r3, [r4, #5]
 800d4ce:	2b03      	cmp	r3, #3
 800d4d0:	d011      	beq.n	800d4f6 <LORA_RxData+0x36>
 800d4d2:	2b63      	cmp	r3, #99	; 0x63
 800d4d4:	d01e      	beq.n	800d514 <LORA_RxData+0x54>
 800d4d6:	2b02      	cmp	r3, #2
 800d4d8:	d118      	bne.n	800d50c <LORA_RxData+0x4c>
      if (AppData->BuffSize == 1)
 800d4da:	7923      	ldrb	r3, [r4, #4]
 800d4dc:	2b01      	cmp	r3, #1
 800d4de:	d115      	bne.n	800d50c <LORA_RxData+0x4c>
        AppLedStateOn = AppData->Buff[0] & 0x01;
 800d4e0:	6822      	ldr	r2, [r4, #0]
 800d4e2:	7812      	ldrb	r2, [r2, #0]
        if (AppLedStateOn == RESET)
 800d4e4:	421a      	tst	r2, r3
 800d4e6:	d119      	bne.n	800d51c <LORA_RxData+0x5c>
          PRINTF("LED OFF\n\r");
 800d4e8:	4811      	ldr	r0, [pc, #68]	; (800d530 <LORA_RxData+0x70>)
 800d4ea:	f7ff fae1 	bl	800cab0 <TraceSend>
          LED_Off(LED_BLUE) ;
 800d4ee:	2002      	movs	r0, #2
 800d4f0:	f7f5 f95a 	bl	80027a8 <BSP_LED_Off>
 800d4f4:	e00a      	b.n	800d50c <LORA_RxData+0x4c>
      if (AppData->BuffSize == 1)
 800d4f6:	7923      	ldrb	r3, [r4, #4]
 800d4f8:	2b01      	cmp	r3, #1
 800d4fa:	d107      	bne.n	800d50c <LORA_RxData+0x4c>
        switch (AppData->Buff[0])
 800d4fc:	6823      	ldr	r3, [r4, #0]
 800d4fe:	7818      	ldrb	r0, [r3, #0]
 800d500:	2801      	cmp	r0, #1
 800d502:	d004      	beq.n	800d50e <LORA_RxData+0x4e>
 800d504:	2800      	cmp	r0, #0
 800d506:	d002      	beq.n	800d50e <LORA_RxData+0x4e>
 800d508:	2802      	cmp	r0, #2
 800d50a:	d000      	beq.n	800d50e <LORA_RxData+0x4e>
}
 800d50c:	bd10      	pop	{r4, pc}
            LORA_RequestClass(CLASS_C);
 800d50e:	f7fe ffb3 	bl	800c478 <LORA_RequestClass>
            break;
 800d512:	e7fb      	b.n	800d50c <LORA_RxData+0x4c>
      AppLedStateOn = (AppData->Buff[2] == 100) ?  0x01 : 0x00;
 800d514:	6823      	ldr	r3, [r4, #0]
      if (AppLedStateOn == RESET)
 800d516:	789b      	ldrb	r3, [r3, #2]
 800d518:	2b64      	cmp	r3, #100	; 0x64
 800d51a:	d1e5      	bne.n	800d4e8 <LORA_RxData+0x28>
          PRINTF("LED ON\n\r");
 800d51c:	4805      	ldr	r0, [pc, #20]	; (800d534 <LORA_RxData+0x74>)
 800d51e:	f7ff fac7 	bl	800cab0 <TraceSend>
          LED_On(LED_BLUE) ;
 800d522:	2002      	movs	r0, #2
 800d524:	f7f5 f930 	bl	8002788 <BSP_LED_On>
 800d528:	e7f0      	b.n	800d50c <LORA_RxData+0x4c>
 800d52a:	46c0      	nop			; (mov r8, r8)
 800d52c:	0800f580 	.word	0x0800f580
 800d530:	0800f59d 	.word	0x0800f59d
 800d534:	0800f5a7 	.word	0x0800f5a7

0800d538 <LORA_GetBatteryLevel>:
{
 800d538:	b510      	push	{r4, lr}
  batteryLevelmV = HW_GetBatteryLevel();
 800d53a:	f000 fb8b 	bl	800dc54 <HW_GetBatteryLevel>
  if (batteryLevelmV > VDD_BAT)
 800d53e:	4a09      	ldr	r2, [pc, #36]	; (800d564 <LORA_GetBatteryLevel+0x2c>)
    batteryLevel = LORAWAN_MAX_BAT;
 800d540:	23fe      	movs	r3, #254	; 0xfe
  if (batteryLevelmV > VDD_BAT)
 800d542:	4290      	cmp	r0, r2
 800d544:	d80c      	bhi.n	800d560 <LORA_GetBatteryLevel+0x28>
  else if (batteryLevelmV < VDD_MIN)
 800d546:	4a08      	ldr	r2, [pc, #32]	; (800d568 <LORA_GetBatteryLevel+0x30>)
    batteryLevel = 0;
 800d548:	2300      	movs	r3, #0
  else if (batteryLevelmV < VDD_MIN)
 800d54a:	4290      	cmp	r0, r2
 800d54c:	d908      	bls.n	800d560 <LORA_GetBatteryLevel+0x28>
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 800d54e:	4b07      	ldr	r3, [pc, #28]	; (800d56c <LORA_GetBatteryLevel+0x34>)
 800d550:	2196      	movs	r1, #150	; 0x96
 800d552:	18c0      	adds	r0, r0, r3
 800d554:	23fe      	movs	r3, #254	; 0xfe
 800d556:	00c9      	lsls	r1, r1, #3
 800d558:	4358      	muls	r0, r3
 800d55a:	f7f2 fdf3 	bl	8000144 <__udivsi3>
 800d55e:	b2c3      	uxtb	r3, r0
}
 800d560:	0018      	movs	r0, r3
 800d562:	bd10      	pop	{r4, pc}
 800d564:	00000bb8 	.word	0x00000bb8
 800d568:	00000707 	.word	0x00000707
 800d56c:	fffff8f8 	.word	0xfffff8f8

0800d570 <OnTxTimerEvent>:
{
 800d570:	b510      	push	{r4, lr}
  TimerStart(&TxTimer);
 800d572:	4c03      	ldr	r4, [pc, #12]	; (800d580 <OnTxTimerEvent+0x10>)
 800d574:	1d20      	adds	r0, r4, #4
 800d576:	f7ff f991 	bl	800c89c <TimerStart>
  AppProcessRequest = LORA_SET;
 800d57a:	2301      	movs	r3, #1
 800d57c:	7723      	strb	r3, [r4, #28]
}
 800d57e:	bd10      	pop	{r4, pc}
 800d580:	20001374 	.word	0x20001374

0800d584 <Send>:
{
 800d584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (LORA_JoinStatus() != LORA_SET)
 800d586:	f7fe ff2f 	bl	800c3e8 <LORA_JoinStatus>
 800d58a:	0005      	movs	r5, r0
 800d58c:	2801      	cmp	r0, #1
 800d58e:	d002      	beq.n	800d596 <Send+0x12>
    LORA_Join();
 800d590:	f7fe febe 	bl	800c310 <LORA_Join>
}
 800d594:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  TimerInit(&TxLedTimer, OnTimerLedEvent);
 800d596:	4c31      	ldr	r4, [pc, #196]	; (800d65c <Send+0xd8>)
 800d598:	4931      	ldr	r1, [pc, #196]	; (800d660 <Send+0xdc>)
 800d59a:	3420      	adds	r4, #32
 800d59c:	0020      	movs	r0, r4
 800d59e:	f7ff f973 	bl	800c888 <TimerInit>
  TimerSetValue(&TxLedTimer, 200);
 800d5a2:	21c8      	movs	r1, #200	; 0xc8
 800d5a4:	0020      	movs	r0, r4
 800d5a6:	f7ff fa21 	bl	800c9ec <TimerSetValue>
  LED_On(LED_RED1) ;
 800d5aa:	0028      	movs	r0, r5
 800d5ac:	f7f5 f8ec 	bl	8002788 <BSP_LED_On>
  TimerStart(&TxLedTimer);
 800d5b0:	0020      	movs	r0, r4
 800d5b2:	f7ff f973 	bl	800c89c <TimerStart>
  if (honey_read(&honey) == CMD_RESP_SUCCESS) {
 800d5b6:	4c2b      	ldr	r4, [pc, #172]	; (800d664 <Send+0xe0>)
 800d5b8:	0020      	movs	r0, r4
 800d5ba:	f7ff fb3b 	bl	800cc34 <honey_read>
 800d5be:	2801      	cmp	r0, #1
 800d5c0:	d11f      	bne.n	800d602 <Send+0x7e>
	  PRINTF("[s] Read PM2.5 Success!\r\n");
 800d5c2:	4829      	ldr	r0, [pc, #164]	; (800d668 <Send+0xe4>)
	  pm2_5 = honey.pm2_5;
 800d5c4:	3480      	adds	r4, #128	; 0x80
	  PRINTF("[s] Read PM2.5 Success!\r\n");
 800d5c6:	f7ff fa73 	bl	800cab0 <TraceSend>
	  pm2_5 = honey.pm2_5;
 800d5ca:	8827      	ldrh	r7, [r4, #0]
  uint8_t  sensor_err = 0;  // if sensor has error
 800d5cc:	2500      	movs	r5, #0
	  if (pm2_5 == 191) {
 800d5ce:	2fbf      	cmp	r7, #191	; 0xbf
 800d5d0:	d100      	bne.n	800d5d4 <Send+0x50>
		  pm2_5 = 190;
 800d5d2:	3f01      	subs	r7, #1
  batteryLevel = LORA_GetBatteryLevel();                      /* 1 (very low) to 254 (fully charged) */
 800d5d4:	f7ff ffb0 	bl	800d538 <LORA_GetBatteryLevel>
  if (batteryLevel < 5) {
 800d5d8:	2300      	movs	r3, #0
 800d5da:	2204      	movs	r2, #4
  AppData.Port = LORAWAN_APP_PORT;
 800d5dc:	2602      	movs	r6, #2
  if (batteryLevel < 5) {
 800d5de:	4282      	cmp	r2, r0
 800d5e0:	415b      	adcs	r3, r3
  AppData.Port = LORAWAN_APP_PORT;
 800d5e2:	4c22      	ldr	r4, [pc, #136]	; (800d66c <Send+0xe8>)
  if (lowBatt || sensor_err) {
 800d5e4:	431d      	orrs	r5, r3
  AppData.Port = LORAWAN_APP_PORT;
 800d5e6:	7166      	strb	r6, [r4, #5]
  if (lowBatt || sensor_err) {
 800d5e8:	d00f      	beq.n	800d60a <Send+0x86>
	AppData.Buff[i++] = 17;
 800d5ea:	2311      	movs	r3, #17
 800d5ec:	6822      	ldr	r2, [r4, #0]
 800d5ee:	7013      	strb	r3, [r2, #0]
	AppData.Buff[i++] = 191;
 800d5f0:	6822      	ldr	r2, [r4, #0]
 800d5f2:	33ae      	adds	r3, #174	; 0xae
 800d5f4:	7053      	strb	r3, [r2, #1]
  LORA_send(&AppData, LORAWAN_DEFAULT_CONFIRM_MSG_STATE);
 800d5f6:	2100      	movs	r1, #0
 800d5f8:	0020      	movs	r0, r4
  AppData.BuffSize = i;
 800d5fa:	7126      	strb	r6, [r4, #4]
  LORA_send(&AppData, LORAWAN_DEFAULT_CONFIRM_MSG_STATE);
 800d5fc:	f7fe ff04 	bl	800c408 <LORA_send>
 800d600:	e7c8      	b.n	800d594 <Send+0x10>
	  PRINTF("[e] Read PM2.5 Error!\r\n");
 800d602:	481b      	ldr	r0, [pc, #108]	; (800d670 <Send+0xec>)
 800d604:	f7ff fa54 	bl	800cab0 <TraceSend>
 800d608:	e7e4      	b.n	800d5d4 <Send+0x50>
	if (send_pm_toggler) {
 800d60a:	7a23      	ldrb	r3, [r4, #8]
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d00c      	beq.n	800d62a <Send+0xa6>
		PRINTF("[i] sending pm2.5 data...\r\n");
 800d610:	4818      	ldr	r0, [pc, #96]	; (800d674 <Send+0xf0>)
 800d612:	f7ff fa4d 	bl	800cab0 <TraceSend>
		AppData.Buff[i++] = 17;
 800d616:	2311      	movs	r3, #17
 800d618:	6822      	ldr	r2, [r4, #0]
 800d61a:	7013      	strb	r3, [r2, #0]
		AppData.Buff[i++] = pm2_5;
 800d61c:	6823      	ldr	r3, [r4, #0]
 800d61e:	705f      	strb	r7, [r3, #1]
	send_pm_toggler = !send_pm_toggler;
 800d620:	7a23      	ldrb	r3, [r4, #8]
 800d622:	425a      	negs	r2, r3
 800d624:	4153      	adcs	r3, r2
 800d626:	7223      	strb	r3, [r4, #8]
 800d628:	e7e5      	b.n	800d5f6 <Send+0x72>
		PRINTF("[i] sending geolocation data...\r\n");
 800d62a:	4813      	ldr	r0, [pc, #76]	; (800d678 <Send+0xf4>)
 800d62c:	f7ff fa40 	bl	800cab0 <TraceSend>
		AppData.Buff[i++] = 17;
 800d630:	2311      	movs	r3, #17
 800d632:	6822      	ldr	r2, [r4, #0]
		AppData.Buff[i++] = longitude & 0xFF;
 800d634:	2607      	movs	r6, #7
		AppData.Buff[i++] = 17;
 800d636:	7013      	strb	r3, [r2, #0]
		AppData.Buff[i++] = (latitude >> 16) & 0xFF;
 800d638:	6822      	ldr	r2, [r4, #0]
 800d63a:	3303      	adds	r3, #3
 800d63c:	7053      	strb	r3, [r2, #1]
		AppData.Buff[i++] = (latitude >> 8) & 0xFF;
 800d63e:	6822      	ldr	r2, [r4, #0]
 800d640:	33e1      	adds	r3, #225	; 0xe1
 800d642:	7093      	strb	r3, [r2, #2]
		AppData.Buff[i++] = latitude & 0xFF;
 800d644:	6822      	ldr	r2, [r4, #0]
 800d646:	3b1f      	subs	r3, #31
 800d648:	70d3      	strb	r3, [r2, #3]
		AppData.Buff[i++] = (longitude >> 16) & 0xFF;
 800d64a:	2299      	movs	r2, #153	; 0x99
 800d64c:	6823      	ldr	r3, [r4, #0]
 800d64e:	711a      	strb	r2, [r3, #4]
		AppData.Buff[i++] = (longitude >> 8) & 0xFF;
 800d650:	3a34      	subs	r2, #52	; 0x34
 800d652:	715a      	strb	r2, [r3, #5]
		AppData.Buff[i++] = longitude & 0xFF;
 800d654:	3a58      	subs	r2, #88	; 0x58
 800d656:	719a      	strb	r2, [r3, #6]
 800d658:	e7e2      	b.n	800d620 <Send+0x9c>
 800d65a:	46c0      	nop			; (mov r8, r8)
 800d65c:	20001374 	.word	0x20001374
 800d660:	0800d469 	.word	0x0800d469
 800d664:	20001628 	.word	0x20001628
 800d668:	0800f5b0 	.word	0x0800f5b0
 800d66c:	200001bc 	.word	0x200001bc
 800d670:	0800f5ca 	.word	0x0800f5ca
 800d674:	0800f5e2 	.word	0x0800f5e2
 800d678:	0800f5fe 	.word	0x0800f5fe

0800d67c <main>:
{
 800d67c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d67e:	b0a7      	sub	sp, #156	; 0x9c
  HAL_Init();
 800d680:	f7f6 fd50 	bl	8004124 <HAL_Init>
  SystemClock_Config();
 800d684:	f000 f988 	bl	800d998 <SystemClock_Config>
  DBG_Init();
 800d688:	f7ff fb7e 	bl	800cd88 <DBG_Init>
  HW_Init();
 800d68c:	f000 fa38 	bl	800db00 <HW_Init>
  huart1.Instance = USART1;
 800d690:	4c4b      	ldr	r4, [pc, #300]	; (800d7c0 <main+0x144>)
 800d692:	4b4c      	ldr	r3, [pc, #304]	; (800d7c4 <main+0x148>)
  huart1.Init.Mode = UART_MODE_TX_RX;
 800d694:	220c      	movs	r2, #12
  huart1.Instance = USART1;
 800d696:	6023      	str	r3, [r4, #0]
  huart1.Init.BaudRate = 9600;
 800d698:	2396      	movs	r3, #150	; 0x96
 800d69a:	019b      	lsls	r3, r3, #6
 800d69c:	6063      	str	r3, [r4, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800d69e:	2300      	movs	r3, #0
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800d6a0:	0020      	movs	r0, r4
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800d6a2:	60a3      	str	r3, [r4, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800d6a4:	60e3      	str	r3, [r4, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800d6a6:	6123      	str	r3, [r4, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800d6a8:	6162      	str	r2, [r4, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d6aa:	61a3      	str	r3, [r4, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800d6ac:	61e3      	str	r3, [r4, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800d6ae:	6223      	str	r3, [r4, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800d6b0:	6263      	str	r3, [r4, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800d6b2:	f7f8 ff5d 	bl	8006570 <HAL_UART_Init>
 800d6b6:	2800      	cmp	r0, #0
 800d6b8:	d001      	beq.n	800d6be <main+0x42>
	Error_Handler();
 800d6ba:	f7ff fba9 	bl	800ce10 <Error_Handler>

static void initUserBtn(void)
{
	GPIO_InitTypeDef GPIO_InitStruct = {0};

	__HAL_RCC_GPIOB_CLK_ENABLE();
 800d6be:	2702      	movs	r7, #2

	GPIO_InitStruct.Pin = GPIO_PIN_2;
 800d6c0:	2604      	movs	r6, #4
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d6c2:	2210      	movs	r2, #16
 800d6c4:	2100      	movs	r1, #0
 800d6c6:	a822      	add	r0, sp, #136	; 0x88
 800d6c8:	f000 fc5d 	bl	800df86 <memset>
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800d6cc:	4b3e      	ldr	r3, [pc, #248]	; (800d7c8 <main+0x14c>)
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d6ce:	a921      	add	r1, sp, #132	; 0x84
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800d6d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d6d2:	483e      	ldr	r0, [pc, #248]	; (800d7cc <main+0x150>)
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800d6d4:	433a      	orrs	r2, r7
 800d6d6:	62da      	str	r2, [r3, #44]	; 0x2c
 800d6d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 800d6da:	9621      	str	r6, [sp, #132]	; 0x84
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800d6dc:	403b      	ands	r3, r7
 800d6de:	9320      	str	r3, [sp, #128]	; 0x80
 800d6e0:	9b20      	ldr	r3, [sp, #128]	; 0x80
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d6e2:	f7f7 f8dd 	bl	80048a0 <HAL_GPIO_Init>
  honey_init(huart1, &honey);
 800d6e6:	0021      	movs	r1, r4
  volatile uint32_t time = 0;
 800d6e8:	2500      	movs	r5, #0
  honey_init(huart1, &honey);
 800d6ea:	4b39      	ldr	r3, [pc, #228]	; (800d7d0 <main+0x154>)
 800d6ec:	3110      	adds	r1, #16
 800d6ee:	2270      	movs	r2, #112	; 0x70
 800d6f0:	4668      	mov	r0, sp
  volatile uint32_t time = 0;
 800d6f2:	951e      	str	r5, [sp, #120]	; 0x78
  honey_init(huart1, &honey);
 800d6f4:	931c      	str	r3, [sp, #112]	; 0x70
  volatile uint32_t time_tick = 0;
 800d6f6:	951f      	str	r5, [sp, #124]	; 0x7c
  volatile uint32_t time_ms = 0;
 800d6f8:	9521      	str	r5, [sp, #132]	; 0x84
  honey_init(huart1, &honey);
 800d6fa:	f000 fc3b 	bl	800df74 <memcpy>
 800d6fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d700:	f7ff fb22 	bl	800cd48 <honey_init>
  LPM_SetOffMode(LPM_APPLI_Id, LPM_Disable);
 800d704:	2101      	movs	r1, #1
 800d706:	0008      	movs	r0, r1
 800d708:	f7fe fef4 	bl	800c4f4 <LPM_SetOffMode>
  PRINTF("APP_VERSION= %02X.%02X.%02X.%02X\r\n", (uint8_t)(__APP_VERSION >> 24), (uint8_t)(__APP_VERSION >> 16), (uint8_t)(__APP_VERSION >> 8), (uint8_t)__APP_VERSION);
 800d70c:	002b      	movs	r3, r5
 800d70e:	2203      	movs	r2, #3
 800d710:	2101      	movs	r1, #1
 800d712:	9500      	str	r5, [sp, #0]
 800d714:	482f      	ldr	r0, [pc, #188]	; (800d7d4 <main+0x158>)
 800d716:	f7ff f9cb 	bl	800cab0 <TraceSend>
  PRINTF("MAC_VERSION= %02X.%02X.%02X.%02X\r\n", (uint8_t)(__LORA_MAC_VERSION >> 24), (uint8_t)(__LORA_MAC_VERSION >> 16), (uint8_t)(__LORA_MAC_VERSION >> 8), (uint8_t)__LORA_MAC_VERSION);
 800d71a:	0032      	movs	r2, r6
 800d71c:	003b      	movs	r3, r7
 800d71e:	0031      	movs	r1, r6
 800d720:	9500      	str	r5, [sp, #0]
 800d722:	482d      	ldr	r0, [pc, #180]	; (800d7d8 <main+0x15c>)
 800d724:	f7ff f9c4 	bl	800cab0 <TraceSend>
  LORA_Init(&LoRaMainCallbacks, &LoRaParamInit);
 800d728:	482c      	ldr	r0, [pc, #176]	; (800d7dc <main+0x160>)
 800d72a:	0001      	movs	r1, r0
 800d72c:	300c      	adds	r0, #12
 800d72e:	3109      	adds	r1, #9
 800d730:	f7fe fd06 	bl	800c140 <LORA_Init>
  LORA_Join();
 800d734:	f7fe fdec 	bl	800c310 <LORA_Join>
    TimerInit(&TxTimer, OnTxTimerEvent);
 800d738:	4c29      	ldr	r4, [pc, #164]	; (800d7e0 <main+0x164>)
 800d73a:	492a      	ldr	r1, [pc, #168]	; (800d7e4 <main+0x168>)
 800d73c:	19a6      	adds	r6, r4, r6
 800d73e:	0030      	movs	r0, r6
 800d740:	f7ff f8a2 	bl	800c888 <TimerInit>
    TimerSetValue(&TxTimer,  APP_TX_DUTYCYCLE);
 800d744:	0030      	movs	r0, r6
 800d746:	4928      	ldr	r1, [pc, #160]	; (800d7e8 <main+0x16c>)
 800d748:	f7ff f950 	bl	800c9ec <TimerSetValue>
    OnTxTimerEvent(NULL);
 800d74c:	0028      	movs	r0, r5
 800d74e:	f7ff ff0f 	bl	800d570 <OnTxTimerEvent>
	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == 0) {
 800d752:	2104      	movs	r1, #4
 800d754:	481d      	ldr	r0, [pc, #116]	; (800d7cc <main+0x150>)
 800d756:	f7f7 f95d 	bl	8004a14 <HAL_GPIO_ReadPin>
 800d75a:	2800      	cmp	r0, #0
 800d75c:	d10c      	bne.n	800d778 <main+0xfc>
		PRINTF("BTN pressed!\r\n");
 800d75e:	4823      	ldr	r0, [pc, #140]	; (800d7ec <main+0x170>)
 800d760:	f7ff f9a6 	bl	800cab0 <TraceSend>
		LED_On(LED_RED2);
 800d764:	2003      	movs	r0, #3
 800d766:	f7f5 f80f 	bl	8002788 <BSP_LED_On>
		HAL_Delay(1000);
 800d76a:	20fa      	movs	r0, #250	; 0xfa
 800d76c:	0080      	lsls	r0, r0, #2
 800d76e:	f000 f849 	bl	800d804 <HAL_Delay>
		LED_Off(LED_RED2);
 800d772:	2003      	movs	r0, #3
 800d774:	f7f5 f818 	bl	80027a8 <BSP_LED_Off>
    if (AppProcessRequest == LORA_SET)
 800d778:	7f23      	ldrb	r3, [r4, #28]
 800d77a:	2b01      	cmp	r3, #1
 800d77c:	d116      	bne.n	800d7ac <main+0x130>
      AppProcessRequest = LORA_RESET;
 800d77e:	2500      	movs	r5, #0
      PRINTF("STARTING UP PM2.5 MEASUREMENT...\r\n");
 800d780:	481b      	ldr	r0, [pc, #108]	; (800d7f0 <main+0x174>)
      AppProcessRequest = LORA_RESET;
 800d782:	7725      	strb	r5, [r4, #28]
      PRINTF("STARTING UP PM2.5 MEASUREMENT...\r\n");
 800d784:	f7ff f994 	bl	800cab0 <TraceSend>
      honey_start(&honey);
 800d788:	4811      	ldr	r0, [pc, #68]	; (800d7d0 <main+0x154>)
 800d78a:	f7ff fa17 	bl	800cbbc <honey_start>
      HAL_Delay(HONEY_WARMUP_DURATION);
 800d78e:	4819      	ldr	r0, [pc, #100]	; (800d7f4 <main+0x178>)
 800d790:	f000 f838 	bl	800d804 <HAL_Delay>
      PRINTF("Transmitting PM2.5 Concentration...\r\n");
 800d794:	4818      	ldr	r0, [pc, #96]	; (800d7f8 <main+0x17c>)
 800d796:	f7ff f98b 	bl	800cab0 <TraceSend>
      Send(NULL);
 800d79a:	0028      	movs	r0, r5
 800d79c:	f7ff fef2 	bl	800d584 <Send>
      honey_stop(&honey);
 800d7a0:	480b      	ldr	r0, [pc, #44]	; (800d7d0 <main+0x154>)
 800d7a2:	f7ff fa29 	bl	800cbf8 <honey_stop>
      PRINTF("TRANSMISSION COMPLETED.\r\n");
 800d7a6:	4815      	ldr	r0, [pc, #84]	; (800d7fc <main+0x180>)
 800d7a8:	f7ff f982 	bl	800cab0 <TraceSend>
    if (LoraMacProcessRequest == LORA_SET)
 800d7ac:	7823      	ldrb	r3, [r4, #0]
 800d7ae:	2b01      	cmp	r3, #1
 800d7b0:	d103      	bne.n	800d7ba <main+0x13e>
      LoraMacProcessRequest = LORA_RESET;
 800d7b2:	2300      	movs	r3, #0
 800d7b4:	7023      	strb	r3, [r4, #0]
      LoRaMacProcess();
 800d7b6:	f7fa ff79 	bl	80086ac <LoRaMacProcess>
  __ASM volatile ("cpsid i" : : : "memory");
 800d7ba:	b672      	cpsid	i
  __ASM volatile ("cpsie i" : : : "memory");
 800d7bc:	b662      	cpsie	i
 800d7be:	e7c8      	b.n	800d752 <main+0xd6>
 800d7c0:	200016b0 	.word	0x200016b0
 800d7c4:	40013800 	.word	0x40013800
 800d7c8:	40021000 	.word	0x40021000
 800d7cc:	50000400 	.word	0x50000400
 800d7d0:	20001628 	.word	0x20001628
 800d7d4:	0800f620 	.word	0x0800f620
 800d7d8:	0800f643 	.word	0x0800f643
 800d7dc:	200001bc 	.word	0x200001bc
 800d7e0:	20001374 	.word	0x20001374
 800d7e4:	0800d571 	.word	0x0800d571
 800d7e8:	0000ea60 	.word	0x0000ea60
 800d7ec:	0800f666 	.word	0x0800f666
 800d7f0:	0800f675 	.word	0x0800f675
 800d7f4:	00002710 	.word	0x00002710
 800d7f8:	0800f698 	.word	0x0800f698
 800d7fc:	0800f6be 	.word	0x0800f6be

0800d800 <HAL_InitTick>:
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Return function status */
  return HAL_OK;
}
 800d800:	2000      	movs	r0, #0
 800d802:	4770      	bx	lr

0800d804 <HAL_Delay>:
  * @brief This function provides delay (in ms)
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
void HAL_Delay(__IO uint32_t Delay)
{
 800d804:	b507      	push	{r0, r1, r2, lr}
 800d806:	9001      	str	r0, [sp, #4]
  HW_RTC_DelayMs(Delay);   /* based on RTC */
 800d808:	9801      	ldr	r0, [sp, #4]
 800d80a:	f7ff fd07 	bl	800d21c <HW_RTC_DelayMs>
}
 800d80e:	bd07      	pop	{r0, r1, r2, pc}

0800d810 <HAL_MspInit>:
  * @brief  Initializes the MSP.
  * @retval None
  */
void HAL_MspInit(void)
{
  __HAL_RCC_PWR_CLK_ENABLE();
 800d810:	2380      	movs	r3, #128	; 0x80
 800d812:	4a0b      	ldr	r2, [pc, #44]	; (800d840 <HAL_MspInit+0x30>)
 800d814:	055b      	lsls	r3, r3, #21
 800d816:	6b91      	ldr	r1, [r2, #56]	; 0x38
{
 800d818:	b510      	push	{r4, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 800d81a:	430b      	orrs	r3, r1
 800d81c:	6393      	str	r3, [r2, #56]	; 0x38

  /* Disable the Power Voltage Detector */
  HAL_PWR_DisablePVD();
 800d81e:	f7f7 f911 	bl	8004a44 <HAL_PWR_DisablePVD>

  /* Enables the Ultra Low Power mode */
  HAL_PWREx_EnableUltraLowPower();
 800d822:	f7f7 f921 	bl	8004a68 <HAL_PWREx_EnableUltraLowPower>

  __HAL_FLASH_SLEEP_POWERDOWN_ENABLE();
 800d826:	2108      	movs	r1, #8
 800d828:	4b06      	ldr	r3, [pc, #24]	; (800d844 <HAL_MspInit+0x34>)
 800d82a:	681a      	ldr	r2, [r3, #0]
 800d82c:	430a      	orrs	r2, r1
 800d82e:	601a      	str	r2, [r3, #0]

  /*In debug mode, e.g. when DBGMCU is activated, Arm core has always clocks
   * And will not wait that the FLACH is ready to be read. It can miss in this
   * case the first instruction. To overcome this issue, the flash remain clcoked during sleep mode
   */
  DBG(__HAL_FLASH_SLEEP_POWERDOWN_DISABLE(););
 800d830:	681a      	ldr	r2, [r3, #0]
 800d832:	438a      	bics	r2, r1
 800d834:	601a      	str	r2, [r3, #0]

#ifdef ENABLE_FAST_WAKEUP
  /*Enable fast wakeUp*/
  HAL_PWREx_EnableFastWakeUp();
 800d836:	f7f7 f90d 	bl	8004a54 <HAL_PWREx_EnableFastWakeUp>
#else
  HAL_PWREx_DisableFastWakeUp();
#endif

  HW_GpioInit();
 800d83a:	f000 f853 	bl	800d8e4 <HW_GpioInit>
}
 800d83e:	bd10      	pop	{r4, pc}
 800d840:	40021000 	.word	0x40021000
 800d844:	40022000 	.word	0x40022000

0800d848 <HAL_RTC_MspInit>:
  *        order to modify the RTC Clock source, as consequence RTC registers (including
  *        the backup registers) and RCC_CSR register are set to their reset values.
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef *hrtc)
{
 800d848:	b500      	push	{lr}
 800d84a:	b099      	sub	sp, #100	; 0x64
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800d84c:	2234      	movs	r2, #52	; 0x34
 800d84e:	2100      	movs	r1, #0
 800d850:	a80b      	add	r0, sp, #44	; 0x2c
 800d852:	f000 fb98 	bl	800df86 <memset>
  RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct = {0};
 800d856:	2224      	movs	r2, #36	; 0x24
 800d858:	2100      	movs	r1, #0
 800d85a:	a801      	add	r0, sp, #4
 800d85c:	f000 fb93 	bl	800df86 <memset>

  /*##-1- Configue the RTC clock soucre ######################################*/
  /* -a- Enable LSE Oscillator */
  RCC_OscInitStruct.OscillatorType =  RCC_OSCILLATORTYPE_LSE;
 800d860:	2304      	movs	r3, #4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800d862:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.OscillatorType =  RCC_OSCILLATORTYPE_LSE;
 800d864:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800d866:	33fc      	adds	r3, #252	; 0xfc
 800d868:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800d86a:	f7f7 f947 	bl	8004afc <HAL_RCC_OscConfig>
 800d86e:	2800      	cmp	r0, #0
 800d870:	d001      	beq.n	800d876 <HAL_RTC_MspInit+0x2e>
  {
    Error_Handler();
 800d872:	f7ff facd 	bl	800ce10 <Error_Handler>
  }

  /* -b- Select LSI as RTC clock source */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800d876:	2320      	movs	r3, #32
 800d878:	9301      	str	r3, [sp, #4]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800d87a:	2380      	movs	r3, #128	; 0x80
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800d87c:	a801      	add	r0, sp, #4
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800d87e:	025b      	lsls	r3, r3, #9
 800d880:	9302      	str	r3, [sp, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800d882:	f7f7 fc9f 	bl	80051c4 <HAL_RCCEx_PeriphCLKConfig>
 800d886:	2800      	cmp	r0, #0
 800d888:	d001      	beq.n	800d88e <HAL_RTC_MspInit+0x46>
  {
    Error_Handler();
 800d88a:	f7ff fac1 	bl	800ce10 <Error_Handler>
  }

  /*##-2- Enable the RTC peripheral Clock ####################################*/
  /* Enable RTC Clock */
  __HAL_RCC_RTC_ENABLE();
 800d88e:	2380      	movs	r3, #128	; 0x80
 800d890:	4a07      	ldr	r2, [pc, #28]	; (800d8b0 <HAL_RTC_MspInit+0x68>)
 800d892:	02db      	lsls	r3, r3, #11
 800d894:	6d11      	ldr	r1, [r2, #80]	; 0x50

  /*##-3- Configure the NVIC for RTC Alarm ###################################*/
  HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0x0, 0);
 800d896:	2002      	movs	r0, #2
  __HAL_RCC_RTC_ENABLE();
 800d898:	430b      	orrs	r3, r1
 800d89a:	6513      	str	r3, [r2, #80]	; 0x50
  HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0x0, 0);
 800d89c:	2200      	movs	r2, #0
 800d89e:	0011      	movs	r1, r2
 800d8a0:	f7f6 fed4 	bl	800464c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 800d8a4:	2002      	movs	r0, #2
 800d8a6:	f7f6 fefb 	bl	80046a0 <HAL_NVIC_EnableIRQ>
}
 800d8aa:	b019      	add	sp, #100	; 0x64
 800d8ac:	bd00      	pop	{pc}
 800d8ae:	46c0      	nop			; (mov r8, r8)
 800d8b0:	40021000 	.word	0x40021000

0800d8b4 <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  hrtc: RTC handle
  * @retval None
  */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 800d8b4:	b510      	push	{r4, lr}
  TimerIrqHandler();
 800d8b6:	f7ff f82b 	bl	800c910 <TimerIrqHandler>
}
 800d8ba:	bd10      	pop	{r4, pc}

0800d8bc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800d8bc:	b510      	push	{r4, lr}
  HW_GPIO_IrqHandler(GPIO_Pin);
 800d8be:	f7ff fb33 	bl	800cf28 <HW_GPIO_IrqHandler>
}
 800d8c2:	bd10      	pop	{r4, pc}

0800d8c4 <MSP_GetIRQn>:
  * @param  GPIO_Pin: Specifies the pins connected to the EXTI line.
  * @retval IRQ number
  */
IRQn_Type MSP_GetIRQn(uint16_t GPIO_Pin)
{
  switch (GPIO_Pin)
 800d8c4:	3801      	subs	r0, #1
{
 800d8c6:	b500      	push	{lr}
  switch (GPIO_Pin)
 800d8c8:	2807      	cmp	r0, #7
 800d8ca:	d807      	bhi.n	800d8dc <MSP_GetIRQn+0x18>
 800d8cc:	f7f2 fc1c 	bl	8000108 <__gnu_thumb1_case_uqi>
 800d8d0:	04060808 	.word	0x04060808
 800d8d4:	04060606 	.word	0x04060606
    case GPIO_PIN_0:
    case GPIO_PIN_1:
      return EXTI0_1_IRQn;
    case GPIO_PIN_2:
    case GPIO_PIN_3:
      return EXTI2_3_IRQn;
 800d8d8:	2006      	movs	r0, #6
    case GPIO_PIN_14:
    case GPIO_PIN_15:
    default:
      return EXTI4_15_IRQn;
  }
}
 800d8da:	bd00      	pop	{pc}
      return EXTI4_15_IRQn;
 800d8dc:	2007      	movs	r0, #7
 800d8de:	e7fc      	b.n	800d8da <MSP_GetIRQn+0x16>
      return EXTI0_1_IRQn;
 800d8e0:	2005      	movs	r0, #5
 800d8e2:	e7fa      	b.n	800d8da <MSP_GetIRQn+0x16>

0800d8e4 <HW_GpioInit>:
  vcom_IoDeInit();
}


void HW_GpioInit(void)
{
 800d8e4:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* Configure all GPIO as analog to reduce current consumption on non used IOs */
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800d8e6:	2701      	movs	r7, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800d8e8:	2602      	movs	r6, #2
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800d8ea:	2504      	movs	r5, #4
{
 800d8ec:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d8ee:	220c      	movs	r2, #12
 800d8f0:	2100      	movs	r1, #0
 800d8f2:	a807      	add	r0, sp, #28
 800d8f4:	f000 fb47 	bl	800df86 <memset>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800d8f8:	2280      	movs	r2, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800d8fa:	4c21      	ldr	r4, [pc, #132]	; (800d980 <HW_GpioInit+0x9c>)

  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  /* All GPIOs except debug pins (SWCLK and SWD) */
  GPIO_InitStruct.Pin = GPIO_PIN_All & (~(GPIO_PIN_13 | GPIO_PIN_14));
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d8fc:	20a0      	movs	r0, #160	; 0xa0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800d8fe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d900:	a905      	add	r1, sp, #20
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800d902:	433b      	orrs	r3, r7
 800d904:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d906:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d908:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800d90a:	403b      	ands	r3, r7
 800d90c:	9301      	str	r3, [sp, #4]
 800d90e:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800d910:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800d912:	4333      	orrs	r3, r6
 800d914:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d916:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800d918:	4033      	ands	r3, r6
 800d91a:	9302      	str	r3, [sp, #8]
 800d91c:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800d91e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800d920:	432b      	orrs	r3, r5
 800d922:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d924:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800d926:	402b      	ands	r3, r5
 800d928:	9303      	str	r3, [sp, #12]
 800d92a:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800d92c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800d92e:	4313      	orrs	r3, r2
 800d930:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d932:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800d934:	4013      	ands	r3, r2
 800d936:	9304      	str	r3, [sp, #16]
 800d938:	9b04      	ldr	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800d93a:	2303      	movs	r3, #3
 800d93c:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_All & (~(GPIO_PIN_13 | GPIO_PIN_14));
 800d93e:	4b11      	ldr	r3, [pc, #68]	; (800d984 <HW_GpioInit+0xa0>)
 800d940:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d942:	f7f6 ffad 	bl	80048a0 <HAL_GPIO_Init>

  /* All GPIOs */
  GPIO_InitStruct.Pin = GPIO_PIN_All;
 800d946:	4b10      	ldr	r3, [pc, #64]	; (800d988 <HW_GpioInit+0xa4>)
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d948:	a905      	add	r1, sp, #20
 800d94a:	4810      	ldr	r0, [pc, #64]	; (800d98c <HW_GpioInit+0xa8>)
  GPIO_InitStruct.Pin = GPIO_PIN_All;
 800d94c:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d94e:	f7f6 ffa7 	bl	80048a0 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d952:	a905      	add	r1, sp, #20
 800d954:	480e      	ldr	r0, [pc, #56]	; (800d990 <HW_GpioInit+0xac>)
 800d956:	f7f6 ffa3 	bl	80048a0 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800d95a:	a905      	add	r1, sp, #20
 800d95c:	480d      	ldr	r0, [pc, #52]	; (800d994 <HW_GpioInit+0xb0>)
 800d95e:	f7f6 ff9f 	bl	80048a0 <HAL_GPIO_Init>

  /* Disable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_DISABLE();
  __HAL_RCC_GPIOB_CLK_DISABLE();
  __HAL_RCC_GPIOC_CLK_DISABLE();
  __HAL_RCC_GPIOH_CLK_DISABLE();
 800d962:	2280      	movs	r2, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_DISABLE();
 800d964:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800d966:	43bb      	bics	r3, r7
 800d968:	62e3      	str	r3, [r4, #44]	; 0x2c
  __HAL_RCC_GPIOB_CLK_DISABLE();
 800d96a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800d96c:	43b3      	bics	r3, r6
 800d96e:	62e3      	str	r3, [r4, #44]	; 0x2c
  __HAL_RCC_GPIOC_CLK_DISABLE();
 800d970:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800d972:	43ab      	bics	r3, r5
 800d974:	62e3      	str	r3, [r4, #44]	; 0x2c
  __HAL_RCC_GPIOH_CLK_DISABLE();
 800d976:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800d978:	4393      	bics	r3, r2
 800d97a:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 800d97c:	b00b      	add	sp, #44	; 0x2c
 800d97e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d980:	40021000 	.word	0x40021000
 800d984:	00009fff 	.word	0x00009fff
 800d988:	0000ffff 	.word	0x0000ffff
 800d98c:	50000400 	.word	0x50000400
 800d990:	50000800 	.word	0x50000800
 800d994:	50001c00 	.word	0x50001c00

0800d998 <SystemClock_Config>:
  *            Flash Latency(WS)              = 1
  * @retval None
  */

void SystemClock_Config(void)
{
 800d998:	b500      	push	{lr}
 800d99a:	b095      	sub	sp, #84	; 0x54
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800d99c:	2214      	movs	r2, #20
 800d99e:	2100      	movs	r1, #0
 800d9a0:	a801      	add	r0, sp, #4
 800d9a2:	f000 faf0 	bl	800df86 <memset>
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800d9a6:	222c      	movs	r2, #44	; 0x2c
 800d9a8:	2100      	movs	r1, #0
 800d9aa:	a807      	add	r0, sp, #28
 800d9ac:	f000 faeb 	bl	800df86 <memset>

  /* Enable HSE Oscillator and Activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_HSI;
 800d9b0:	2302      	movs	r3, #2
 800d9b2:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSEState            = RCC_HSE_OFF;
  RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_ON;
 800d9b4:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource       = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL          = RCC_PLLMUL_6;
 800d9b6:	2380      	movs	r3, #128	; 0x80
 800d9b8:	031b      	lsls	r3, r3, #12
  RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
 800d9ba:	2201      	movs	r2, #1
  RCC_OscInitStruct.PLL.PLLMUL          = RCC_PLLMUL_6;
 800d9bc:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLDIV          = RCC_PLLDIV_3;
 800d9be:	2380      	movs	r3, #128	; 0x80
  RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
 800d9c0:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLDIV          = RCC_PLLDIV_3;
 800d9c2:	041b      	lsls	r3, r3, #16
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800d9c4:	320f      	adds	r2, #15

  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800d9c6:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800d9c8:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLDIV          = RCC_PLLDIV_3;
 800d9ca:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800d9cc:	f7f7 f896 	bl	8004afc <HAL_RCC_OscConfig>
 800d9d0:	2800      	cmp	r0, #0
 800d9d2:	d001      	beq.n	800d9d8 <SystemClock_Config+0x40>
  {
    Error_Handler();
 800d9d4:	f7ff fa1c 	bl	800ce10 <Error_Handler>
  }

  /* Set Voltage scale1 as MCU will run at 32MHz */
  __HAL_RCC_PWR_CLK_ENABLE();
 800d9d8:	2380      	movs	r3, #128	; 0x80
 800d9da:	4a11      	ldr	r2, [pc, #68]	; (800da20 <SystemClock_Config+0x88>)
 800d9dc:	055b      	lsls	r3, r3, #21
 800d9de:	6b91      	ldr	r1, [r2, #56]	; 0x38
 800d9e0:	430b      	orrs	r3, r1
 800d9e2:	6393      	str	r3, [r2, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800d9e4:	4b0f      	ldr	r3, [pc, #60]	; (800da24 <SystemClock_Config+0x8c>)
 800d9e6:	4910      	ldr	r1, [pc, #64]	; (800da28 <SystemClock_Config+0x90>)
 800d9e8:	681a      	ldr	r2, [r3, #0]
 800d9ea:	4011      	ands	r1, r2
 800d9ec:	2280      	movs	r2, #128	; 0x80
 800d9ee:	0112      	lsls	r2, r2, #4
 800d9f0:	430a      	orrs	r2, r1
 800d9f2:	601a      	str	r2, [r3, #0]

  /* Poll VOSF bit of in PWR_CSR. Wait until it is reset to 0 */
  while (__HAL_PWR_GET_FLAG(PWR_FLAG_VOS) != RESET) {};
 800d9f4:	2110      	movs	r1, #16
 800d9f6:	001a      	movs	r2, r3
 800d9f8:	6853      	ldr	r3, [r2, #4]
 800d9fa:	400b      	ands	r3, r1
 800d9fc:	d1fc      	bne.n	800d9f8 <SystemClock_Config+0x60>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
  clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 800d9fe:	220f      	movs	r2, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800da00:	2101      	movs	r1, #1
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 800da02:	9201      	str	r2, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800da04:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800da06:	3a0c      	subs	r2, #12
 800da08:	9202      	str	r2, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800da0a:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800da0c:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800da0e:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800da10:	f7f7 fb00 	bl	8005014 <HAL_RCC_ClockConfig>
 800da14:	2800      	cmp	r0, #0
 800da16:	d001      	beq.n	800da1c <SystemClock_Config+0x84>
  {
    Error_Handler();
 800da18:	f7ff f9fa 	bl	800ce10 <Error_Handler>
  }
}
 800da1c:	b015      	add	sp, #84	; 0x54
 800da1e:	bd00      	pop	{pc}
 800da20:	40021000 	.word	0x40021000
 800da24:	40007000 	.word	0x40007000
 800da28:	ffffe7ff 	.word	0xffffe7ff

0800da2c <HW_GetRandomSeed>:
  * @param None
  * @retval see
  */
uint32_t HW_GetRandomSeed(void)
{
  return ((*(uint32_t *)ID1) ^ (*(uint32_t *)ID2) ^ (*(uint32_t *)ID3));
 800da2c:	4b04      	ldr	r3, [pc, #16]	; (800da40 <HW_GetRandomSeed+0x14>)
 800da2e:	6818      	ldr	r0, [r3, #0]
 800da30:	4b04      	ldr	r3, [pc, #16]	; (800da44 <HW_GetRandomSeed+0x18>)
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	4058      	eors	r0, r3
 800da36:	4b04      	ldr	r3, [pc, #16]	; (800da48 <HW_GetRandomSeed+0x1c>)
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	4058      	eors	r0, r3
}
 800da3c:	4770      	bx	lr
 800da3e:	46c0      	nop			; (mov r8, r8)
 800da40:	1ff80050 	.word	0x1ff80050
 800da44:	1ff80054 	.word	0x1ff80054
 800da48:	1ff80064 	.word	0x1ff80064

0800da4c <HW_GetUniqueId>:
  * @param unique ID
  * @retval none
  */
void HW_GetUniqueId(uint8_t *id)
{
  id[7] = ((*(uint32_t *)ID1) + (*(uint32_t *)ID3)) >> 24;
 800da4c:	4911      	ldr	r1, [pc, #68]	; (800da94 <HW_GetUniqueId+0x48>)
 800da4e:	4a12      	ldr	r2, [pc, #72]	; (800da98 <HW_GetUniqueId+0x4c>)
 800da50:	680b      	ldr	r3, [r1, #0]
{
 800da52:	b510      	push	{r4, lr}
  id[7] = ((*(uint32_t *)ID1) + (*(uint32_t *)ID3)) >> 24;
 800da54:	6814      	ldr	r4, [r2, #0]
 800da56:	191b      	adds	r3, r3, r4
 800da58:	0e1b      	lsrs	r3, r3, #24
 800da5a:	71c3      	strb	r3, [r0, #7]
  id[6] = ((*(uint32_t *)ID1) + (*(uint32_t *)ID3)) >> 16;
 800da5c:	6814      	ldr	r4, [r2, #0]
 800da5e:	680b      	ldr	r3, [r1, #0]
 800da60:	191b      	adds	r3, r3, r4
 800da62:	0c1b      	lsrs	r3, r3, #16
 800da64:	7183      	strb	r3, [r0, #6]
  id[5] = ((*(uint32_t *)ID1) + (*(uint32_t *)ID3)) >> 8;
 800da66:	6814      	ldr	r4, [r2, #0]
 800da68:	680b      	ldr	r3, [r1, #0]
 800da6a:	191b      	adds	r3, r3, r4
 800da6c:	0a1b      	lsrs	r3, r3, #8
 800da6e:	7143      	strb	r3, [r0, #5]
  id[4] = ((*(uint32_t *)ID1) + (*(uint32_t *)ID3));
 800da70:	6812      	ldr	r2, [r2, #0]
 800da72:	680b      	ldr	r3, [r1, #0]
 800da74:	189b      	adds	r3, r3, r2
 800da76:	7103      	strb	r3, [r0, #4]
  id[3] = ((*(uint32_t *)ID2)) >> 24;
 800da78:	4b08      	ldr	r3, [pc, #32]	; (800da9c <HW_GetUniqueId+0x50>)
 800da7a:	681a      	ldr	r2, [r3, #0]
 800da7c:	0e12      	lsrs	r2, r2, #24
 800da7e:	70c2      	strb	r2, [r0, #3]
  id[2] = ((*(uint32_t *)ID2)) >> 16;
 800da80:	681a      	ldr	r2, [r3, #0]
 800da82:	0c12      	lsrs	r2, r2, #16
 800da84:	7082      	strb	r2, [r0, #2]
  id[1] = ((*(uint32_t *)ID2)) >> 8;
 800da86:	681a      	ldr	r2, [r3, #0]
 800da88:	0a12      	lsrs	r2, r2, #8
 800da8a:	7042      	strb	r2, [r0, #1]
  id[0] = ((*(uint32_t *)ID2));
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	7003      	strb	r3, [r0, #0]
}
 800da90:	bd10      	pop	{r4, pc}
 800da92:	46c0      	nop			; (mov r8, r8)
 800da94:	1ff80050 	.word	0x1ff80050
 800da98:	1ff80064 	.word	0x1ff80064
 800da9c:	1ff80054 	.word	0x1ff80054

0800daa0 <HW_AdcInit>:
  * @param none
  * @retval none
  */
void HW_AdcInit(void)
{
  if (AdcInitialized == false)
 800daa0:	4814      	ldr	r0, [pc, #80]	; (800daf4 <HW_AdcInit+0x54>)
{
 800daa2:	b510      	push	{r4, lr}
  if (AdcInitialized == false)
 800daa4:	7843      	ldrb	r3, [r0, #1]
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d122      	bne.n	800daf0 <HW_AdcInit+0x50>
  {
    AdcInitialized = true;
 800daaa:	2201      	movs	r2, #1

    hadc.Init.OversamplingMode      = DISABLE;

    hadc.Init.ClockPrescaler        = ADC_CLOCK_SYNC_PCLK_DIV4;
    hadc.Init.LowPowerAutoPowerOff  = DISABLE;
    hadc.Init.LowPowerFrequencyMode = ENABLE;
 800daac:	6382      	str	r2, [r0, #56]	; 0x38
    hadc.Init.LowPowerAutoWait      = DISABLE;

    hadc.Init.Resolution            = ADC_RESOLUTION_12B;
    hadc.Init.SamplingTime          = ADC_SAMPLETIME_160CYCLES_5;
    hadc.Init.ScanConvMode          = ADC_SCAN_DIRECTION_FORWARD;
 800daae:	6142      	str	r2, [r0, #20]
    AdcInitialized = true;
 800dab0:	7042      	strb	r2, [r0, #1]
    hadc.Init.DataAlign             = ADC_DATAALIGN_RIGHT;
    hadc.Init.ContinuousConvMode    = DISABLE;
 800dab2:	1d42      	adds	r2, r0, #5
 800dab4:	77d3      	strb	r3, [r2, #31]
    hadc.Init.DiscontinuousConvMode = DISABLE;
 800dab6:	1d82      	adds	r2, r0, #6
 800dab8:	77d3      	strb	r3, [r2, #31]
    hadc.Init.ExternalTrigConvEdge  = ADC_EXTERNALTRIGCONVEDGE_NONE;
    hadc.Init.EOCSelection          = ADC_EOC_SINGLE_CONV;
 800daba:	2204      	movs	r2, #4
    hadc.Instance  = ADC1;
 800dabc:	490e      	ldr	r1, [pc, #56]	; (800daf8 <HW_AdcInit+0x58>)
    hadc.Init.EOCSelection          = ADC_EOC_SINGLE_CONV;
 800dabe:	6182      	str	r2, [r0, #24]
    hadc.Instance  = ADC1;
 800dac0:	6041      	str	r1, [r0, #4]
    hadc.Init.ClockPrescaler        = ADC_CLOCK_SYNC_PCLK_DIV4;
 800dac2:	2180      	movs	r1, #128	; 0x80
    hadc.Init.DMAContinuousRequests = DISABLE;
 800dac4:	0002      	movs	r2, r0
    hadc.Init.ClockPrescaler        = ADC_CLOCK_SYNC_PCLK_DIV4;
 800dac6:	0609      	lsls	r1, r1, #24
 800dac8:	6081      	str	r1, [r0, #8]
    hadc.Init.SamplingTime          = ADC_SAMPLETIME_160CYCLES_5;
 800daca:	2107      	movs	r1, #7
    hadc.Init.DMAContinuousRequests = DISABLE;
 800dacc:	3230      	adds	r2, #48	; 0x30
    hadc.Init.OversamplingMode      = DISABLE;
 800dace:	6403      	str	r3, [r0, #64]	; 0x40
    hadc.Init.LowPowerAutoPowerOff  = DISABLE;
 800dad0:	6203      	str	r3, [r0, #32]
    hadc.Init.LowPowerAutoWait      = DISABLE;
 800dad2:	61c3      	str	r3, [r0, #28]
    hadc.Init.Resolution            = ADC_RESOLUTION_12B;
 800dad4:	60c3      	str	r3, [r0, #12]
    hadc.Init.DataAlign             = ADC_DATAALIGN_RIGHT;
 800dad6:	6103      	str	r3, [r0, #16]
    hadc.Init.ExternalTrigConvEdge  = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800dad8:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc.Init.DMAContinuousRequests = DISABLE;
 800dada:	7013      	strb	r3, [r2, #0]

    ADCCLK_ENABLE();
 800dadc:	2380      	movs	r3, #128	; 0x80
 800dade:	4a07      	ldr	r2, [pc, #28]	; (800dafc <HW_AdcInit+0x5c>)
    hadc.Init.SamplingTime          = ADC_SAMPLETIME_160CYCLES_5;
 800dae0:	63c1      	str	r1, [r0, #60]	; 0x3c
    ADCCLK_ENABLE();
 800dae2:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800dae4:	009b      	lsls	r3, r3, #2
 800dae6:	430b      	orrs	r3, r1
 800dae8:	6353      	str	r3, [r2, #52]	; 0x34


    HAL_ADC_Init(&hadc);
 800daea:	3004      	adds	r0, #4
 800daec:	f7f6 fba4 	bl	8004238 <HAL_ADC_Init>

  }
}
 800daf0:	bd10      	pop	{r4, pc}
 800daf2:	46c0      	nop			; (mov r8, r8)
 800daf4:	200013f0 	.word	0x200013f0
 800daf8:	40012400 	.word	0x40012400
 800dafc:	40021000 	.word	0x40021000

0800db00 <HW_Init>:
{
 800db00:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (McuInitialized == false)
 800db02:	4c10      	ldr	r4, [pc, #64]	; (800db44 <HW_Init+0x44>)
 800db04:	7825      	ldrb	r5, [r4, #0]
 800db06:	2d00      	cmp	r5, #0
 800db08:	d11b      	bne.n	800db42 <HW_Init+0x42>
    HW_AdcInit();
 800db0a:	f7ff ffc9 	bl	800daa0 <HW_AdcInit>
    Radio.IoInit();
 800db0e:	4b0e      	ldr	r3, [pc, #56]	; (800db48 <HW_Init+0x48>)
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	9301      	str	r3, [sp, #4]
 800db14:	4798      	blx	r3
    HW_SPI_Init();
 800db16:	f7ff fc49 	bl	800d3ac <HW_SPI_Init>
    HW_RTC_Init();
 800db1a:	f7ff fb9f 	bl	800d25c <HW_RTC_Init>
    TraceInit();
 800db1e:	f7fe ffb5 	bl	800ca8c <TraceInit>
    BSP_sensor_Init();
 800db22:	f7ff f849 	bl	800cbb8 <BSP_sensor_Init>
    BSP_LED_Init(LED1);
 800db26:	0028      	movs	r0, r5
 800db28:	f7f4 fdec 	bl	8002704 <BSP_LED_Init>
    BSP_LED_Init(LED2);
 800db2c:	2001      	movs	r0, #1
 800db2e:	f7f4 fde9 	bl	8002704 <BSP_LED_Init>
    BSP_LED_Init(LED3);
 800db32:	2002      	movs	r0, #2
 800db34:	f7f4 fde6 	bl	8002704 <BSP_LED_Init>
    BSP_LED_Init(LED4);
 800db38:	2003      	movs	r0, #3
 800db3a:	f7f4 fde3 	bl	8002704 <BSP_LED_Init>
    McuInitialized = true;
 800db3e:	2301      	movs	r3, #1
 800db40:	7023      	strb	r3, [r4, #0]
}
 800db42:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 800db44:	200013f0 	.word	0x200013f0
 800db48:	0800eaa4 	.word	0x0800eaa4

0800db4c <HW_AdcReadChannel>:
  * @brief This function De-initializes the ADC
  * @param Channel
  * @retval Value
  */
uint16_t HW_AdcReadChannel(uint32_t Channel)
{
 800db4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

  ADC_ChannelConfTypeDef adcConf = {0};
 800db4e:	2208      	movs	r2, #8
 800db50:	2100      	movs	r1, #0
{
 800db52:	0007      	movs	r7, r0
  ADC_ChannelConfTypeDef adcConf = {0};
 800db54:	4668      	mov	r0, sp
 800db56:	f000 fa16 	bl	800df86 <memset>

  uint16_t adcData = 0;

  HW_AdcInit();
 800db5a:	f7ff ffa1 	bl	800daa0 <HW_AdcInit>
  uint16_t adcData = 0;
 800db5e:	2000      	movs	r0, #0

  if (AdcInitialized == true)
 800db60:	4e1d      	ldr	r6, [pc, #116]	; (800dbd8 <HW_AdcReadChannel+0x8c>)
 800db62:	7873      	ldrb	r3, [r6, #1]
 800db64:	4283      	cmp	r3, r0
 800db66:	d036      	beq.n	800dbd6 <HW_AdcReadChannel+0x8a>
  {
    /* wait the the Vrefint used by adc is set */
    while (__HAL_PWR_GET_FLAG(PWR_FLAG_VREFINTRDY) == RESET) {};
 800db68:	2308      	movs	r3, #8
 800db6a:	491c      	ldr	r1, [pc, #112]	; (800dbdc <HW_AdcReadChannel+0x90>)
 800db6c:	684a      	ldr	r2, [r1, #4]
 800db6e:	421a      	tst	r2, r3
 800db70:	d0fc      	beq.n	800db6c <HW_AdcReadChannel+0x20>

    ADCCLK_ENABLE();
 800db72:	2380      	movs	r3, #128	; 0x80
 800db74:	4d1a      	ldr	r5, [pc, #104]	; (800dbe0 <HW_AdcReadChannel+0x94>)
 800db76:	009b      	lsls	r3, r3, #2
 800db78:	6b6a      	ldr	r2, [r5, #52]	; 0x34

    /*calibrate ADC if any calibraiton hardware*/
    HAL_ADCEx_Calibration_Start(&hadc, ADC_SINGLE_ENDED);
 800db7a:	1d34      	adds	r4, r6, #4
    ADCCLK_ENABLE();
 800db7c:	4313      	orrs	r3, r2
 800db7e:	636b      	str	r3, [r5, #52]	; 0x34
    HAL_ADCEx_Calibration_Start(&hadc, ADC_SINGLE_ENDED);
 800db80:	2100      	movs	r1, #0
 800db82:	0020      	movs	r0, r4
 800db84:	f7f6 fd12 	bl	80045ac <HAL_ADCEx_Calibration_Start>

    /* Deselects all channels*/
    adcConf.Channel = ADC_CHANNEL_MASK;
 800db88:	4b16      	ldr	r3, [pc, #88]	; (800dbe4 <HW_AdcReadChannel+0x98>)
    adcConf.Rank = ADC_RANK_NONE;
    HAL_ADC_ConfigChannel(&hadc, &adcConf);
 800db8a:	4669      	mov	r1, sp
    adcConf.Channel = ADC_CHANNEL_MASK;
 800db8c:	9300      	str	r3, [sp, #0]
    adcConf.Rank = ADC_RANK_NONE;
 800db8e:	4b16      	ldr	r3, [pc, #88]	; (800dbe8 <HW_AdcReadChannel+0x9c>)
    HAL_ADC_ConfigChannel(&hadc, &adcConf);
 800db90:	0020      	movs	r0, r4
    adcConf.Rank = ADC_RANK_NONE;
 800db92:	9301      	str	r3, [sp, #4]
    HAL_ADC_ConfigChannel(&hadc, &adcConf);
 800db94:	f7f6 fcb6 	bl	8004504 <HAL_ADC_ConfigChannel>

    /* configure adc channel */
    adcConf.Channel = Channel;
    adcConf.Rank = ADC_RANK_CHANNEL_NUMBER;
 800db98:	2380      	movs	r3, #128	; 0x80
    HAL_ADC_ConfigChannel(&hadc, &adcConf);
 800db9a:	4669      	mov	r1, sp
    adcConf.Rank = ADC_RANK_CHANNEL_NUMBER;
 800db9c:	015b      	lsls	r3, r3, #5
    HAL_ADC_ConfigChannel(&hadc, &adcConf);
 800db9e:	0020      	movs	r0, r4
    adcConf.Rank = ADC_RANK_CHANNEL_NUMBER;
 800dba0:	9301      	str	r3, [sp, #4]
    adcConf.Channel = Channel;
 800dba2:	9700      	str	r7, [sp, #0]
    HAL_ADC_ConfigChannel(&hadc, &adcConf);
 800dba4:	f7f6 fcae 	bl	8004504 <HAL_ADC_ConfigChannel>

    /* Start the conversion process */
    HAL_ADC_Start(&hadc);
 800dba8:	0020      	movs	r0, r4
 800dbaa:	f7f6 fc1d 	bl	80043e8 <HAL_ADC_Start>

    /* Wait for the end of conversion */
    HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 800dbae:	2101      	movs	r1, #1
 800dbb0:	0020      	movs	r0, r4
 800dbb2:	4249      	negs	r1, r1
 800dbb4:	f7f6 fc44 	bl	8004440 <HAL_ADC_PollForConversion>

    /* Get the converted value of regular channel */
    adcData = HAL_ADC_GetValue(&hadc);
 800dbb8:	0020      	movs	r0, r4
 800dbba:	f7f6 fc9f 	bl	80044fc <HAL_ADC_GetValue>

    __HAL_ADC_DISABLE(&hadc) ;
 800dbbe:	2202      	movs	r2, #2
 800dbc0:	6873      	ldr	r3, [r6, #4]
    adcData = HAL_ADC_GetValue(&hadc);
 800dbc2:	b280      	uxth	r0, r0
    __HAL_ADC_DISABLE(&hadc) ;
 800dbc4:	6899      	ldr	r1, [r3, #8]
 800dbc6:	430a      	orrs	r2, r1
 800dbc8:	609a      	str	r2, [r3, #8]
 800dbca:	2203      	movs	r2, #3
 800dbcc:	601a      	str	r2, [r3, #0]

    ADCCLK_DISABLE();
 800dbce:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800dbd0:	4a06      	ldr	r2, [pc, #24]	; (800dbec <HW_AdcReadChannel+0xa0>)
 800dbd2:	4013      	ands	r3, r2
 800dbd4:	636b      	str	r3, [r5, #52]	; 0x34
  }
  return adcData;
}
 800dbd6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800dbd8:	200013f0 	.word	0x200013f0
 800dbdc:	40007000 	.word	0x40007000
 800dbe0:	40021000 	.word	0x40021000
 800dbe4:	0007ffff 	.word	0x0007ffff
 800dbe8:	00001001 	.word	0x00001001
 800dbec:	fffffdff 	.word	0xfffffdff

0800dbf0 <HW_GetTemperatureLevel>:
{
 800dbf0:	b570      	push	{r4, r5, r6, lr}
  measuredLevel = HW_AdcReadChannel(ADC_CHANNEL_VREFINT);
 800dbf2:	4812      	ldr	r0, [pc, #72]	; (800dc3c <HW_GetTemperatureLevel+0x4c>)
 800dbf4:	f7ff ffaa 	bl	800db4c <HW_AdcReadChannel>
    batteryLevelmV = 0;
 800dbf8:	2500      	movs	r5, #0
  measuredLevel = HW_AdcReadChannel(ADC_CHANNEL_VREFINT);
 800dbfa:	0001      	movs	r1, r0
  if (measuredLevel == 0)
 800dbfc:	42a8      	cmp	r0, r5
 800dbfe:	d006      	beq.n	800dc0e <HW_GetTemperatureLevel+0x1e>
    batteryLevelmV = (((uint32_t) VDDA_VREFINT_CAL * (*VREFINT_CAL)) / measuredLevel);
 800dc00:	4b0f      	ldr	r3, [pc, #60]	; (800dc40 <HW_GetTemperatureLevel+0x50>)
 800dc02:	8818      	ldrh	r0, [r3, #0]
 800dc04:	4b0f      	ldr	r3, [pc, #60]	; (800dc44 <HW_GetTemperatureLevel+0x54>)
 800dc06:	4358      	muls	r0, r3
 800dc08:	f7f2 fa9c 	bl	8000144 <__udivsi3>
 800dc0c:	0005      	movs	r5, r0
  measuredLevel = HW_AdcReadChannel(ADC_CHANNEL_TEMPSENSOR);
 800dc0e:	480e      	ldr	r0, [pc, #56]	; (800dc48 <HW_GetTemperatureLevel+0x58>)
 800dc10:	f7ff ff9c 	bl	800db4c <HW_AdcReadChannel>
  temperatureDegreeC = COMPUTE_TEMPERATURE(measuredLevel, batteryLevelmV);
 800dc14:	4b0d      	ldr	r3, [pc, #52]	; (800dc4c <HW_GetTemperatureLevel+0x5c>)
 800dc16:	4368      	muls	r0, r5
 800dc18:	490a      	ldr	r1, [pc, #40]	; (800dc44 <HW_GetTemperatureLevel+0x54>)
 800dc1a:	881c      	ldrh	r4, [r3, #0]
 800dc1c:	f7f2 fa92 	bl	8000144 <__udivsi3>
 800dc20:	1b03      	subs	r3, r0, r4
 800dc22:	2050      	movs	r0, #80	; 0x50
 800dc24:	4358      	muls	r0, r3
 800dc26:	4b0a      	ldr	r3, [pc, #40]	; (800dc50 <HW_GetTemperatureLevel+0x60>)
 800dc28:	0200      	lsls	r0, r0, #8
 800dc2a:	8819      	ldrh	r1, [r3, #0]
 800dc2c:	1b09      	subs	r1, r1, r4
 800dc2e:	f7f2 fb13 	bl	8000258 <__divsi3>
 800dc32:	23f0      	movs	r3, #240	; 0xf0
 800dc34:	015b      	lsls	r3, r3, #5
 800dc36:	18c0      	adds	r0, r0, r3
  return (uint16_t) temperatureDegreeC;
 800dc38:	b280      	uxth	r0, r0
}
 800dc3a:	bd70      	pop	{r4, r5, r6, pc}
 800dc3c:	44020000 	.word	0x44020000
 800dc40:	1ff80078 	.word	0x1ff80078
 800dc44:	00000bb8 	.word	0x00000bb8
 800dc48:	48040000 	.word	0x48040000
 800dc4c:	1ff8007a 	.word	0x1ff8007a
 800dc50:	1ff8007e 	.word	0x1ff8007e

0800dc54 <HW_GetBatteryLevel>:
{
 800dc54:	b510      	push	{r4, lr}
  measuredLevel = HW_AdcReadChannel(ADC_CHANNEL_VREFINT);
 800dc56:	4807      	ldr	r0, [pc, #28]	; (800dc74 <HW_GetBatteryLevel+0x20>)
 800dc58:	f7ff ff78 	bl	800db4c <HW_AdcReadChannel>
 800dc5c:	0001      	movs	r1, r0
    batteryLevelmV = 0;
 800dc5e:	2000      	movs	r0, #0
  if (measuredLevel == 0)
 800dc60:	4281      	cmp	r1, r0
 800dc62:	d005      	beq.n	800dc70 <HW_GetBatteryLevel+0x1c>
    batteryLevelmV = (((uint32_t) VDDA_VREFINT_CAL * (*VREFINT_CAL)) / measuredLevel);
 800dc64:	4b04      	ldr	r3, [pc, #16]	; (800dc78 <HW_GetBatteryLevel+0x24>)
 800dc66:	8818      	ldrh	r0, [r3, #0]
 800dc68:	4b04      	ldr	r3, [pc, #16]	; (800dc7c <HW_GetBatteryLevel+0x28>)
 800dc6a:	4358      	muls	r0, r3
 800dc6c:	f7f2 fa6a 	bl	8000144 <__udivsi3>
  return batteryLevelmV;
 800dc70:	b280      	uxth	r0, r0
}
 800dc72:	bd10      	pop	{r4, pc}
 800dc74:	44020000 	.word	0x44020000
 800dc78:	1ff80078 	.word	0x1ff80078
 800dc7c:	00000bb8 	.word	0x00000bb8

0800dc80 <NMI_Handler>:
  * @retval None
  */

void NMI_Handler(void)
{
}
 800dc80:	4770      	bx	lr

0800dc82 <HardFault_Handler>:

void HardFault_Handler(void)
{
  while (1)
  {
    __NOP();
 800dc82:	46c0      	nop			; (mov r8, r8)
 800dc84:	e7fd      	b.n	800dc82 <HardFault_Handler>

0800dc86 <SVC_Handler>:
 800dc86:	4770      	bx	lr

0800dc88 <PendSV_Handler>:
 800dc88:	4770      	bx	lr

0800dc8a <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800dc8a:	b510      	push	{r4, lr}
  HAL_IncTick();
 800dc8c:	f7f6 fa5e 	bl	800414c <HAL_IncTick>
}
 800dc90:	bd10      	pop	{r4, pc}

0800dc92 <USART2_IRQHandler>:
  */
/*void PPP_IRQHandler(void)
{
}*/
void USARTx_IRQHandler(void)
{
 800dc92:	b510      	push	{r4, lr}
  vcom_IRQHandler();
 800dc94:	f000 f880 	bl	800dd98 <vcom_IRQHandler>
}
 800dc98:	bd10      	pop	{r4, pc}

0800dc9a <DMA1_Channel4_5_6_7_IRQHandler>:

void USARTx_DMA_TX_IRQHandler(void)
{
 800dc9a:	b510      	push	{r4, lr}
  vcom_DMA_TX_IRQHandler();
 800dc9c:	f000 f874 	bl	800dd88 <vcom_DMA_TX_IRQHandler>
}
 800dca0:	bd10      	pop	{r4, pc}

0800dca2 <RTC_IRQHandler>:

void RTC_IRQHandler(void)
{
 800dca2:	b510      	push	{r4, lr}
  HW_RTC_IrqHandler();
 800dca4:	f7ff fa9a 	bl	800d1dc <HW_RTC_IrqHandler>
}
 800dca8:	bd10      	pop	{r4, pc}

0800dcaa <EXTI0_1_IRQHandler>:

void EXTI0_1_IRQHandler(void)
{
 800dcaa:	b510      	push	{r4, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800dcac:	2001      	movs	r0, #1
 800dcae:	f7f6 febd 	bl	8004a2c <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800dcb2:	2002      	movs	r0, #2
 800dcb4:	f7f6 feba 	bl	8004a2c <HAL_GPIO_EXTI_IRQHandler>
}
 800dcb8:	bd10      	pop	{r4, pc}

0800dcba <EXTI2_3_IRQHandler>:

void EXTI2_3_IRQHandler(void)
{
 800dcba:	b510      	push	{r4, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 800dcbc:	2004      	movs	r0, #4
 800dcbe:	f7f6 feb5 	bl	8004a2c <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 800dcc2:	2008      	movs	r0, #8
 800dcc4:	f7f6 feb2 	bl	8004a2c <HAL_GPIO_EXTI_IRQHandler>
}
 800dcc8:	bd10      	pop	{r4, pc}

0800dcca <EXTI4_15_IRQHandler>:


void EXTI4_15_IRQHandler(void)
{
 800dcca:	b510      	push	{r4, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800dccc:	2010      	movs	r0, #16
 800dcce:	f7f6 fead 	bl	8004a2c <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 800dcd2:	2020      	movs	r0, #32
 800dcd4:	f7f6 feaa 	bl	8004a2c <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800dcd8:	2040      	movs	r0, #64	; 0x40
 800dcda:	f7f6 fea7 	bl	8004a2c <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 800dcde:	2080      	movs	r0, #128	; 0x80
 800dce0:	f7f6 fea4 	bl	8004a2c <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800dce4:	2080      	movs	r0, #128	; 0x80
 800dce6:	0040      	lsls	r0, r0, #1
 800dce8:	f7f6 fea0 	bl	8004a2c <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 800dcec:	2080      	movs	r0, #128	; 0x80
 800dcee:	0080      	lsls	r0, r0, #2
 800dcf0:	f7f6 fe9c 	bl	8004a2c <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 800dcf4:	2080      	movs	r0, #128	; 0x80
 800dcf6:	00c0      	lsls	r0, r0, #3
 800dcf8:	f7f6 fe98 	bl	8004a2c <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 800dcfc:	2080      	movs	r0, #128	; 0x80
 800dcfe:	0100      	lsls	r0, r0, #4
 800dd00:	f7f6 fe94 	bl	8004a2c <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 800dd04:	2080      	movs	r0, #128	; 0x80
 800dd06:	0140      	lsls	r0, r0, #5
 800dd08:	f7f6 fe90 	bl	8004a2c <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800dd0c:	2080      	movs	r0, #128	; 0x80
 800dd0e:	0180      	lsls	r0, r0, #6
 800dd10:	f7f6 fe8c 	bl	8004a2c <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 800dd14:	2080      	movs	r0, #128	; 0x80
 800dd16:	01c0      	lsls	r0, r0, #7
 800dd18:	f7f6 fe88 	bl	8004a2c <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800dd1c:	2080      	movs	r0, #128	; 0x80
 800dd1e:	0200      	lsls	r0, r0, #8
 800dd20:	f7f6 fe84 	bl	8004a2c <HAL_GPIO_EXTI_IRQHandler>
}
 800dd24:	bd10      	pop	{r4, pc}
	...

0800dd28 <vcom_Init>:
/* Functions Definition ------------------------------------------------------*/
void vcom_Init(void (*TxCb)(void))
{

  /*Record Tx complete for DMA*/
  TxCpltCallback = TxCb;
 800dd28:	4b0b      	ldr	r3, [pc, #44]	; (800dd58 <vcom_Init+0x30>)
{
 800dd2a:	b510      	push	{r4, lr}
  TxCpltCallback = TxCb;
 800dd2c:	6018      	str	r0, [r3, #0]
      - Word Length = 8 Bits
      - Stop Bit = One Stop bit
      - Parity = ODD parity
      - BaudRate = 921600 baud
      - Hardware flow control disabled (RTS and CTS signals) */
  UartHandle.Instance        = USARTx;
 800dd2e:	480b      	ldr	r0, [pc, #44]	; (800dd5c <vcom_Init+0x34>)
 800dd30:	4b0b      	ldr	r3, [pc, #44]	; (800dd60 <vcom_Init+0x38>)
 800dd32:	6003      	str	r3, [r0, #0]

  UartHandle.Init.BaudRate   = 115200;
 800dd34:	23e1      	movs	r3, #225	; 0xe1
 800dd36:	025b      	lsls	r3, r3, #9
 800dd38:	6043      	str	r3, [r0, #4]
  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 800dd3a:	2300      	movs	r3, #0
 800dd3c:	6083      	str	r3, [r0, #8]
  UartHandle.Init.StopBits   = UART_STOPBITS_1;
 800dd3e:	60c3      	str	r3, [r0, #12]
  UartHandle.Init.Parity     = UART_PARITY_NONE;
 800dd40:	6103      	str	r3, [r0, #16]
  UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 800dd42:	6183      	str	r3, [r0, #24]
  UartHandle.Init.Mode       = UART_MODE_TX;
 800dd44:	3308      	adds	r3, #8
 800dd46:	6143      	str	r3, [r0, #20]

  if (HAL_UART_Init(&UartHandle) != HAL_OK)
 800dd48:	f7f8 fc12 	bl	8006570 <HAL_UART_Init>
 800dd4c:	2800      	cmp	r0, #0
 800dd4e:	d001      	beq.n	800dd54 <vcom_Init+0x2c>
  {
    /* Initialization Error */
    Error_Handler();
 800dd50:	f7ff f85e 	bl	800ce10 <Error_Handler>
  }
}
 800dd54:	bd10      	pop	{r4, pc}
 800dd56:	46c0      	nop			; (mov r8, r8)
 800dd58:	20001450 	.word	0x20001450
 800dd5c:	2000149c 	.word	0x2000149c
 800dd60:	40004400 	.word	0x40004400

0800dd64 <vcom_Trace>:

void vcom_Trace(uint8_t *p_data, uint16_t size)
{
 800dd64:	b510      	push	{r4, lr}
 800dd66:	000a      	movs	r2, r1
  HAL_UART_Transmit_DMA(&UartHandle, p_data, size);
 800dd68:	0001      	movs	r1, r0
 800dd6a:	4802      	ldr	r0, [pc, #8]	; (800dd74 <vcom_Trace+0x10>)
 800dd6c:	f7f7 ffda 	bl	8005d24 <HAL_UART_Transmit_DMA>
}
 800dd70:	bd10      	pop	{r4, pc}
 800dd72:	46c0      	nop			; (mov r8, r8)
 800dd74:	2000149c 	.word	0x2000149c

0800dd78 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 800dd78:	b510      	push	{r4, lr}
  /* buffer transmission complete*/
  TxCpltCallback();
 800dd7a:	4b02      	ldr	r3, [pc, #8]	; (800dd84 <HAL_UART_TxCpltCallback+0xc>)
 800dd7c:	681b      	ldr	r3, [r3, #0]
 800dd7e:	4798      	blx	r3
}
 800dd80:	bd10      	pop	{r4, pc}
 800dd82:	46c0      	nop			; (mov r8, r8)
 800dd84:	20001450 	.word	0x20001450

0800dd88 <vcom_DMA_TX_IRQHandler>:

void vcom_DMA_TX_IRQHandler(void)
{
 800dd88:	b510      	push	{r4, lr}
  HAL_DMA_IRQHandler(UartHandle.hdmatx);
 800dd8a:	4b02      	ldr	r3, [pc, #8]	; (800dd94 <vcom_DMA_TX_IRQHandler+0xc>)
 800dd8c:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800dd8e:	f7f6 fd3c 	bl	800480a <HAL_DMA_IRQHandler>
}
 800dd92:	bd10      	pop	{r4, pc}
 800dd94:	2000149c 	.word	0x2000149c

0800dd98 <vcom_IRQHandler>:

void vcom_IRQHandler(void)
{
 800dd98:	b510      	push	{r4, lr}
  HAL_UART_IRQHandler(&UartHandle);
 800dd9a:	4802      	ldr	r0, [pc, #8]	; (800dda4 <vcom_IRQHandler+0xc>)
 800dd9c:	f7f8 f85a 	bl	8005e54 <HAL_UART_IRQHandler>
}
 800dda0:	bd10      	pop	{r4, pc}
 800dda2:	46c0      	nop			; (mov r8, r8)
 800dda4:	2000149c 	.word	0x2000149c

0800dda8 <vcom_IoInit>:
  // }
}

void vcom_IoInit(void)
{
  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 800dda8:	2300      	movs	r3, #0
  /* Enable GPIO TX/RX clock */
  USARTx_TX_GPIO_CLK_ENABLE();
 800ddaa:	2201      	movs	r2, #1
{
 800ddac:	b530      	push	{r4, r5, lr}
 800ddae:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 800ddb0:	9305      	str	r3, [sp, #20]
  USARTx_TX_GPIO_CLK_ENABLE();
 800ddb2:	4b12      	ldr	r3, [pc, #72]	; (800ddfc <vcom_IoInit+0x54>)
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
  GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
  GPIO_InitStruct.Alternate = USARTx_TX_AF;

  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 800ddb4:	25a0      	movs	r5, #160	; 0xa0
  USARTx_TX_GPIO_CLK_ENABLE();
 800ddb6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 800ddb8:	2404      	movs	r4, #4
  USARTx_TX_GPIO_CLK_ENABLE();
 800ddba:	4311      	orrs	r1, r2
 800ddbc:	62d9      	str	r1, [r3, #44]	; 0x2c
 800ddbe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 800ddc0:	05ed      	lsls	r5, r5, #23
  USARTx_TX_GPIO_CLK_ENABLE();
 800ddc2:	4011      	ands	r1, r2
 800ddc4:	9101      	str	r1, [sp, #4]
 800ddc6:	9901      	ldr	r1, [sp, #4]
  USARTx_RX_GPIO_CLK_ENABLE();
 800ddc8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 800ddca:	0028      	movs	r0, r5
  USARTx_RX_GPIO_CLK_ENABLE();
 800ddcc:	4311      	orrs	r1, r2
 800ddce:	62d9      	str	r1, [r3, #44]	; 0x2c
 800ddd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 800ddd2:	a903      	add	r1, sp, #12
  USARTx_RX_GPIO_CLK_ENABLE();
 800ddd4:	401a      	ands	r2, r3
 800ddd6:	9202      	str	r2, [sp, #8]
 800ddd8:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 800ddda:	2302      	movs	r3, #2
 800dddc:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 800ddde:	3301      	adds	r3, #1
 800dde0:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 800dde2:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 800dde4:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 800dde6:	f7f6 fd5b 	bl	80048a0 <HAL_GPIO_Init>

  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 800ddea:	2308      	movs	r3, #8
  GPIO_InitStruct.Alternate = USARTx_RX_AF;

  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 800ddec:	a903      	add	r1, sp, #12
 800ddee:	0028      	movs	r0, r5
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 800ddf0:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
 800ddf2:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 800ddf4:	f7f6 fd54 	bl	80048a0 <HAL_GPIO_Init>
}
 800ddf8:	b009      	add	sp, #36	; 0x24
 800ddfa:	bd30      	pop	{r4, r5, pc}
 800ddfc:	40021000 	.word	0x40021000

0800de00 <HAL_UART_MspInit>:
{
 800de00:	b5f0      	push	{r4, r5, r6, r7, lr}
 800de02:	0007      	movs	r7, r0
 800de04:	b08b      	sub	sp, #44	; 0x2c
 GPIO_InitTypeDef GPIO_InitStruct = {0};
 800de06:	2214      	movs	r2, #20
 800de08:	2100      	movs	r1, #0
 800de0a:	a805      	add	r0, sp, #20
 800de0c:	f000 f8bb 	bl	800df86 <memset>
  if (huart->Instance == USARTx)
 800de10:	683b      	ldr	r3, [r7, #0]
 800de12:	4a3f      	ldr	r2, [pc, #252]	; (800df10 <HAL_UART_MspInit+0x110>)
 800de14:	4293      	cmp	r3, r2
 800de16:	d144      	bne.n	800dea2 <HAL_UART_MspInit+0xa2>
    USARTx_TX_GPIO_CLK_ENABLE();
 800de18:	2501      	movs	r5, #1
 800de1a:	4b3e      	ldr	r3, [pc, #248]	; (800df14 <HAL_UART_MspInit+0x114>)
    hdma_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 800de1c:	2600      	movs	r6, #0
    USARTx_TX_GPIO_CLK_ENABLE();
 800de1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de20:	432a      	orrs	r2, r5
 800de22:	62da      	str	r2, [r3, #44]	; 0x2c
 800de24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de26:	402a      	ands	r2, r5
 800de28:	9200      	str	r2, [sp, #0]
 800de2a:	9a00      	ldr	r2, [sp, #0]
    USARTx_RX_GPIO_CLK_ENABLE();
 800de2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de2e:	432a      	orrs	r2, r5
 800de30:	62da      	str	r2, [r3, #44]	; 0x2c
 800de32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de34:	402a      	ands	r2, r5
 800de36:	9201      	str	r2, [sp, #4]
 800de38:	9a01      	ldr	r2, [sp, #4]
    USARTx_CLK_ENABLE();
 800de3a:	2280      	movs	r2, #128	; 0x80
 800de3c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800de3e:	0292      	lsls	r2, r2, #10
 800de40:	430a      	orrs	r2, r1
 800de42:	639a      	str	r2, [r3, #56]	; 0x38
    DMAx_CLK_ENABLE();
 800de44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800de46:	432a      	orrs	r2, r5
 800de48:	631a      	str	r2, [r3, #48]	; 0x30
 800de4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de4c:	402b      	ands	r3, r5
 800de4e:	9302      	str	r3, [sp, #8]
 800de50:	9b02      	ldr	r3, [sp, #8]
    vcom_IoInit();
 800de52:	f7ff ffa9 	bl	800dda8 <vcom_IoInit>
    hdma_tx.Instance                 = USARTx_TX_DMA_CHANNEL;
 800de56:	4c30      	ldr	r4, [pc, #192]	; (800df18 <HAL_UART_MspInit+0x118>)
 800de58:	4b30      	ldr	r3, [pc, #192]	; (800df1c <HAL_UART_MspInit+0x11c>)
    HAL_DMA_Init(&hdma_tx);
 800de5a:	4831      	ldr	r0, [pc, #196]	; (800df20 <HAL_UART_MspInit+0x120>)
    hdma_tx.Instance                 = USARTx_TX_DMA_CHANNEL;
 800de5c:	6063      	str	r3, [r4, #4]
    hdma_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 800de5e:	2310      	movs	r3, #16
 800de60:	60e3      	str	r3, [r4, #12]
    hdma_tx.Init.MemInc              = DMA_MINC_ENABLE;
 800de62:	3370      	adds	r3, #112	; 0x70
 800de64:	6163      	str	r3, [r4, #20]
    hdma_tx.Init.Request             = USARTx_TX_DMA_REQUEST;
 800de66:	3b7c      	subs	r3, #124	; 0x7c
 800de68:	60a3      	str	r3, [r4, #8]
    hdma_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 800de6a:	6126      	str	r6, [r4, #16]
    hdma_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800de6c:	61a6      	str	r6, [r4, #24]
    hdma_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
 800de6e:	61e6      	str	r6, [r4, #28]
    hdma_tx.Init.Mode                = DMA_NORMAL;
 800de70:	6226      	str	r6, [r4, #32]
    hdma_tx.Init.Priority            = DMA_PRIORITY_LOW;
 800de72:	6266      	str	r6, [r4, #36]	; 0x24
    HAL_DMA_Init(&hdma_tx);
 800de74:	f7f6 fc20 	bl	80046b8 <HAL_DMA_Init>
    __HAL_LINKDMA(huart, hdmatx, hdma_tx);
 800de78:	4b29      	ldr	r3, [pc, #164]	; (800df20 <HAL_UART_MspInit+0x120>)
    HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, USARTx_Priority, 1);
 800de7a:	002a      	movs	r2, r5
    __HAL_LINKDMA(huart, hdmatx, hdma_tx);
 800de7c:	66bb      	str	r3, [r7, #104]	; 0x68
    HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, USARTx_Priority, 1);
 800de7e:	0031      	movs	r1, r6
 800de80:	200b      	movs	r0, #11
    __HAL_LINKDMA(huart, hdmatx, hdma_tx);
 800de82:	62e7      	str	r7, [r4, #44]	; 0x2c
    HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, USARTx_Priority, 1);
 800de84:	f7f6 fbe2 	bl	800464c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USARTx_DMA_TX_IRQn);
 800de88:	200b      	movs	r0, #11
 800de8a:	f7f6 fc09 	bl	80046a0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USARTx_IRQn, USARTx_DMA_Priority, 1);
 800de8e:	201c      	movs	r0, #28
 800de90:	002a      	movs	r2, r5
 800de92:	0031      	movs	r1, r6
 800de94:	f7f6 fbda 	bl	800464c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USARTx_IRQn);
 800de98:	201c      	movs	r0, #28
	      HAL_NVIC_EnableIRQ(USART1_IRQn);
 800de9a:	f7f6 fc01 	bl	80046a0 <HAL_NVIC_EnableIRQ>
}
 800de9e:	b00b      	add	sp, #44	; 0x2c
 800dea0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if (huart->Instance == USART1) {
 800dea2:	4a20      	ldr	r2, [pc, #128]	; (800df24 <HAL_UART_MspInit+0x124>)
 800dea4:	4293      	cmp	r3, r2
 800dea6:	d1fa      	bne.n	800de9e <HAL_UART_MspInit+0x9e>
	      __HAL_RCC_USART1_CLK_ENABLE();
 800dea8:	2280      	movs	r2, #128	; 0x80
	      __HAL_RCC_GPIOB_CLK_ENABLE();
 800deaa:	2402      	movs	r4, #2
	      __HAL_RCC_USART1_CLK_ENABLE();
 800deac:	4b19      	ldr	r3, [pc, #100]	; (800df14 <HAL_UART_MspInit+0x114>)
 800deae:	01d2      	lsls	r2, r2, #7
 800deb0:	6b59      	ldr	r1, [r3, #52]	; 0x34
	      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800deb2:	2503      	movs	r5, #3
	      __HAL_RCC_USART1_CLK_ENABLE();
 800deb4:	430a      	orrs	r2, r1
	      __HAL_RCC_GPIOA_CLK_ENABLE();
 800deb6:	2101      	movs	r1, #1
	      __HAL_RCC_USART1_CLK_ENABLE();
 800deb8:	635a      	str	r2, [r3, #52]	; 0x34
	      __HAL_RCC_GPIOB_CLK_ENABLE();
 800deba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	      HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800debc:	481a      	ldr	r0, [pc, #104]	; (800df28 <HAL_UART_MspInit+0x128>)
	      __HAL_RCC_GPIOB_CLK_ENABLE();
 800debe:	4322      	orrs	r2, r4
 800dec0:	62da      	str	r2, [r3, #44]	; 0x2c
 800dec2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dec4:	4022      	ands	r2, r4
 800dec6:	9203      	str	r2, [sp, #12]
 800dec8:	9a03      	ldr	r2, [sp, #12]
	      __HAL_RCC_GPIOA_CLK_ENABLE();
 800deca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800decc:	430a      	orrs	r2, r1
 800dece:	62da      	str	r2, [r3, #44]	; 0x2c
 800ded0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ded2:	9406      	str	r4, [sp, #24]
	      __HAL_RCC_GPIOA_CLK_ENABLE();
 800ded4:	400b      	ands	r3, r1
 800ded6:	9304      	str	r3, [sp, #16]
 800ded8:	9b04      	ldr	r3, [sp, #16]
	      GPIO_InitStruct.Pin = GPIO_PIN_6;
 800deda:	2340      	movs	r3, #64	; 0x40
	      HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800dedc:	a905      	add	r1, sp, #20
	      GPIO_InitStruct.Pin = GPIO_PIN_6;
 800dede:	9305      	str	r3, [sp, #20]
	      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800dee0:	9508      	str	r5, [sp, #32]
	      HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800dee2:	f7f6 fcdd 	bl	80048a0 <HAL_GPIO_Init>
	      GPIO_InitStruct.Pin = GPIO_PIN_10;
 800dee6:	2380      	movs	r3, #128	; 0x80
	      HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800dee8:	20a0      	movs	r0, #160	; 0xa0
	      GPIO_InitStruct.Pin = GPIO_PIN_10;
 800deea:	00db      	lsls	r3, r3, #3
 800deec:	9305      	str	r3, [sp, #20]
	      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800deee:	9406      	str	r4, [sp, #24]
	      GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800def0:	2304      	movs	r3, #4
	      GPIO_InitStruct.Pull = GPIO_NOPULL;
 800def2:	2400      	movs	r4, #0
	      HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800def4:	a905      	add	r1, sp, #20
 800def6:	05c0      	lsls	r0, r0, #23
	      GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800def8:	9309      	str	r3, [sp, #36]	; 0x24
	      GPIO_InitStruct.Pull = GPIO_NOPULL;
 800defa:	9407      	str	r4, [sp, #28]
	      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800defc:	9508      	str	r5, [sp, #32]
	      HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800defe:	f7f6 fccf 	bl	80048a0 <HAL_GPIO_Init>
	      HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800df02:	201b      	movs	r0, #27
 800df04:	0022      	movs	r2, r4
 800df06:	0021      	movs	r1, r4
 800df08:	f7f6 fba0 	bl	800464c <HAL_NVIC_SetPriority>
	      HAL_NVIC_EnableIRQ(USART1_IRQn);
 800df0c:	201b      	movs	r0, #27
 800df0e:	e7c4      	b.n	800de9a <HAL_UART_MspInit+0x9a>
 800df10:	40004400 	.word	0x40004400
 800df14:	40021000 	.word	0x40021000
 800df18:	20001450 	.word	0x20001450
 800df1c:	40020080 	.word	0x40020080
 800df20:	20001454 	.word	0x20001454
 800df24:	40013800 	.word	0x40013800
 800df28:	50000400 	.word	0x50000400

0800df2c <__libc_init_array>:
 800df2c:	b570      	push	{r4, r5, r6, lr}
 800df2e:	2600      	movs	r6, #0
 800df30:	4d0c      	ldr	r5, [pc, #48]	; (800df64 <__libc_init_array+0x38>)
 800df32:	4c0d      	ldr	r4, [pc, #52]	; (800df68 <__libc_init_array+0x3c>)
 800df34:	1b64      	subs	r4, r4, r5
 800df36:	10a4      	asrs	r4, r4, #2
 800df38:	42a6      	cmp	r6, r4
 800df3a:	d109      	bne.n	800df50 <__libc_init_array+0x24>
 800df3c:	2600      	movs	r6, #0
 800df3e:	f000 fd9d 	bl	800ea7c <_init>
 800df42:	4d0a      	ldr	r5, [pc, #40]	; (800df6c <__libc_init_array+0x40>)
 800df44:	4c0a      	ldr	r4, [pc, #40]	; (800df70 <__libc_init_array+0x44>)
 800df46:	1b64      	subs	r4, r4, r5
 800df48:	10a4      	asrs	r4, r4, #2
 800df4a:	42a6      	cmp	r6, r4
 800df4c:	d105      	bne.n	800df5a <__libc_init_array+0x2e>
 800df4e:	bd70      	pop	{r4, r5, r6, pc}
 800df50:	00b3      	lsls	r3, r6, #2
 800df52:	58eb      	ldr	r3, [r5, r3]
 800df54:	4798      	blx	r3
 800df56:	3601      	adds	r6, #1
 800df58:	e7ee      	b.n	800df38 <__libc_init_array+0xc>
 800df5a:	00b3      	lsls	r3, r6, #2
 800df5c:	58eb      	ldr	r3, [r5, r3]
 800df5e:	4798      	blx	r3
 800df60:	3601      	adds	r6, #1
 800df62:	e7f2      	b.n	800df4a <__libc_init_array+0x1e>
 800df64:	0800f774 	.word	0x0800f774
 800df68:	0800f774 	.word	0x0800f774
 800df6c:	0800f774 	.word	0x0800f774
 800df70:	0800f778 	.word	0x0800f778

0800df74 <memcpy>:
 800df74:	2300      	movs	r3, #0
 800df76:	b510      	push	{r4, lr}
 800df78:	429a      	cmp	r2, r3
 800df7a:	d100      	bne.n	800df7e <memcpy+0xa>
 800df7c:	bd10      	pop	{r4, pc}
 800df7e:	5ccc      	ldrb	r4, [r1, r3]
 800df80:	54c4      	strb	r4, [r0, r3]
 800df82:	3301      	adds	r3, #1
 800df84:	e7f8      	b.n	800df78 <memcpy+0x4>

0800df86 <memset>:
 800df86:	0003      	movs	r3, r0
 800df88:	1812      	adds	r2, r2, r0
 800df8a:	4293      	cmp	r3, r2
 800df8c:	d100      	bne.n	800df90 <memset+0xa>
 800df8e:	4770      	bx	lr
 800df90:	7019      	strb	r1, [r3, #0]
 800df92:	3301      	adds	r3, #1
 800df94:	e7f9      	b.n	800df8a <memset+0x4>

0800df96 <_vsniprintf_r>:
 800df96:	b530      	push	{r4, r5, lr}
 800df98:	0014      	movs	r4, r2
 800df9a:	b09b      	sub	sp, #108	; 0x6c
 800df9c:	0005      	movs	r5, r0
 800df9e:	001a      	movs	r2, r3
 800dfa0:	2c00      	cmp	r4, #0
 800dfa2:	da05      	bge.n	800dfb0 <_vsniprintf_r+0x1a>
 800dfa4:	238b      	movs	r3, #139	; 0x8b
 800dfa6:	6003      	str	r3, [r0, #0]
 800dfa8:	2001      	movs	r0, #1
 800dfaa:	4240      	negs	r0, r0
 800dfac:	b01b      	add	sp, #108	; 0x6c
 800dfae:	bd30      	pop	{r4, r5, pc}
 800dfb0:	2382      	movs	r3, #130	; 0x82
 800dfb2:	4668      	mov	r0, sp
 800dfb4:	009b      	lsls	r3, r3, #2
 800dfb6:	8183      	strh	r3, [r0, #12]
 800dfb8:	2300      	movs	r3, #0
 800dfba:	9100      	str	r1, [sp, #0]
 800dfbc:	9104      	str	r1, [sp, #16]
 800dfbe:	429c      	cmp	r4, r3
 800dfc0:	d000      	beq.n	800dfc4 <_vsniprintf_r+0x2e>
 800dfc2:	1e63      	subs	r3, r4, #1
 800dfc4:	9302      	str	r3, [sp, #8]
 800dfc6:	9305      	str	r3, [sp, #20]
 800dfc8:	2301      	movs	r3, #1
 800dfca:	4669      	mov	r1, sp
 800dfcc:	425b      	negs	r3, r3
 800dfce:	81cb      	strh	r3, [r1, #14]
 800dfd0:	0028      	movs	r0, r5
 800dfd2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800dfd4:	f000 f8d6 	bl	800e184 <_svfiprintf_r>
 800dfd8:	1c43      	adds	r3, r0, #1
 800dfda:	da01      	bge.n	800dfe0 <_vsniprintf_r+0x4a>
 800dfdc:	238b      	movs	r3, #139	; 0x8b
 800dfde:	602b      	str	r3, [r5, #0]
 800dfe0:	2c00      	cmp	r4, #0
 800dfe2:	d0e3      	beq.n	800dfac <_vsniprintf_r+0x16>
 800dfe4:	2300      	movs	r3, #0
 800dfe6:	9a00      	ldr	r2, [sp, #0]
 800dfe8:	7013      	strb	r3, [r2, #0]
 800dfea:	e7df      	b.n	800dfac <_vsniprintf_r+0x16>

0800dfec <vsniprintf>:
 800dfec:	b507      	push	{r0, r1, r2, lr}
 800dfee:	9300      	str	r3, [sp, #0]
 800dff0:	0013      	movs	r3, r2
 800dff2:	000a      	movs	r2, r1
 800dff4:	0001      	movs	r1, r0
 800dff6:	4802      	ldr	r0, [pc, #8]	; (800e000 <vsniprintf+0x14>)
 800dff8:	6800      	ldr	r0, [r0, #0]
 800dffa:	f7ff ffcc 	bl	800df96 <_vsniprintf_r>
 800dffe:	bd0e      	pop	{r1, r2, r3, pc}
 800e000:	200001ec 	.word	0x200001ec

0800e004 <_malloc_r>:
 800e004:	2303      	movs	r3, #3
 800e006:	b570      	push	{r4, r5, r6, lr}
 800e008:	1ccd      	adds	r5, r1, #3
 800e00a:	439d      	bics	r5, r3
 800e00c:	3508      	adds	r5, #8
 800e00e:	0006      	movs	r6, r0
 800e010:	2d0c      	cmp	r5, #12
 800e012:	d21e      	bcs.n	800e052 <_malloc_r+0x4e>
 800e014:	250c      	movs	r5, #12
 800e016:	42a9      	cmp	r1, r5
 800e018:	d81d      	bhi.n	800e056 <_malloc_r+0x52>
 800e01a:	0030      	movs	r0, r6
 800e01c:	f000 fb56 	bl	800e6cc <__malloc_lock>
 800e020:	4a25      	ldr	r2, [pc, #148]	; (800e0b8 <_malloc_r+0xb4>)
 800e022:	6814      	ldr	r4, [r2, #0]
 800e024:	0021      	movs	r1, r4
 800e026:	2900      	cmp	r1, #0
 800e028:	d119      	bne.n	800e05e <_malloc_r+0x5a>
 800e02a:	4c24      	ldr	r4, [pc, #144]	; (800e0bc <_malloc_r+0xb8>)
 800e02c:	6823      	ldr	r3, [r4, #0]
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d103      	bne.n	800e03a <_malloc_r+0x36>
 800e032:	0030      	movs	r0, r6
 800e034:	f000 fb1a 	bl	800e66c <_sbrk_r>
 800e038:	6020      	str	r0, [r4, #0]
 800e03a:	0029      	movs	r1, r5
 800e03c:	0030      	movs	r0, r6
 800e03e:	f000 fb15 	bl	800e66c <_sbrk_r>
 800e042:	1c43      	adds	r3, r0, #1
 800e044:	d12b      	bne.n	800e09e <_malloc_r+0x9a>
 800e046:	230c      	movs	r3, #12
 800e048:	0030      	movs	r0, r6
 800e04a:	6033      	str	r3, [r6, #0]
 800e04c:	f000 fb3f 	bl	800e6ce <__malloc_unlock>
 800e050:	e003      	b.n	800e05a <_malloc_r+0x56>
 800e052:	2d00      	cmp	r5, #0
 800e054:	dadf      	bge.n	800e016 <_malloc_r+0x12>
 800e056:	230c      	movs	r3, #12
 800e058:	6033      	str	r3, [r6, #0]
 800e05a:	2000      	movs	r0, #0
 800e05c:	bd70      	pop	{r4, r5, r6, pc}
 800e05e:	680b      	ldr	r3, [r1, #0]
 800e060:	1b5b      	subs	r3, r3, r5
 800e062:	d419      	bmi.n	800e098 <_malloc_r+0x94>
 800e064:	2b0b      	cmp	r3, #11
 800e066:	d903      	bls.n	800e070 <_malloc_r+0x6c>
 800e068:	600b      	str	r3, [r1, #0]
 800e06a:	18cc      	adds	r4, r1, r3
 800e06c:	6025      	str	r5, [r4, #0]
 800e06e:	e003      	b.n	800e078 <_malloc_r+0x74>
 800e070:	684b      	ldr	r3, [r1, #4]
 800e072:	428c      	cmp	r4, r1
 800e074:	d10d      	bne.n	800e092 <_malloc_r+0x8e>
 800e076:	6013      	str	r3, [r2, #0]
 800e078:	0030      	movs	r0, r6
 800e07a:	f000 fb28 	bl	800e6ce <__malloc_unlock>
 800e07e:	0020      	movs	r0, r4
 800e080:	2207      	movs	r2, #7
 800e082:	300b      	adds	r0, #11
 800e084:	1d23      	adds	r3, r4, #4
 800e086:	4390      	bics	r0, r2
 800e088:	1ac3      	subs	r3, r0, r3
 800e08a:	d0e7      	beq.n	800e05c <_malloc_r+0x58>
 800e08c:	425a      	negs	r2, r3
 800e08e:	50e2      	str	r2, [r4, r3]
 800e090:	e7e4      	b.n	800e05c <_malloc_r+0x58>
 800e092:	6063      	str	r3, [r4, #4]
 800e094:	000c      	movs	r4, r1
 800e096:	e7ef      	b.n	800e078 <_malloc_r+0x74>
 800e098:	000c      	movs	r4, r1
 800e09a:	6849      	ldr	r1, [r1, #4]
 800e09c:	e7c3      	b.n	800e026 <_malloc_r+0x22>
 800e09e:	2303      	movs	r3, #3
 800e0a0:	1cc4      	adds	r4, r0, #3
 800e0a2:	439c      	bics	r4, r3
 800e0a4:	42a0      	cmp	r0, r4
 800e0a6:	d0e1      	beq.n	800e06c <_malloc_r+0x68>
 800e0a8:	1a21      	subs	r1, r4, r0
 800e0aa:	0030      	movs	r0, r6
 800e0ac:	f000 fade 	bl	800e66c <_sbrk_r>
 800e0b0:	1c43      	adds	r3, r0, #1
 800e0b2:	d1db      	bne.n	800e06c <_malloc_r+0x68>
 800e0b4:	e7c7      	b.n	800e046 <_malloc_r+0x42>
 800e0b6:	46c0      	nop			; (mov r8, r8)
 800e0b8:	2000151c 	.word	0x2000151c
 800e0bc:	20001520 	.word	0x20001520

0800e0c0 <__ssputs_r>:
 800e0c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e0c2:	688e      	ldr	r6, [r1, #8]
 800e0c4:	b085      	sub	sp, #20
 800e0c6:	0007      	movs	r7, r0
 800e0c8:	000c      	movs	r4, r1
 800e0ca:	9203      	str	r2, [sp, #12]
 800e0cc:	9301      	str	r3, [sp, #4]
 800e0ce:	429e      	cmp	r6, r3
 800e0d0:	d83c      	bhi.n	800e14c <__ssputs_r+0x8c>
 800e0d2:	2390      	movs	r3, #144	; 0x90
 800e0d4:	898a      	ldrh	r2, [r1, #12]
 800e0d6:	00db      	lsls	r3, r3, #3
 800e0d8:	421a      	tst	r2, r3
 800e0da:	d034      	beq.n	800e146 <__ssputs_r+0x86>
 800e0dc:	2503      	movs	r5, #3
 800e0de:	6909      	ldr	r1, [r1, #16]
 800e0e0:	6823      	ldr	r3, [r4, #0]
 800e0e2:	1a5b      	subs	r3, r3, r1
 800e0e4:	9302      	str	r3, [sp, #8]
 800e0e6:	6963      	ldr	r3, [r4, #20]
 800e0e8:	9802      	ldr	r0, [sp, #8]
 800e0ea:	435d      	muls	r5, r3
 800e0ec:	0feb      	lsrs	r3, r5, #31
 800e0ee:	195d      	adds	r5, r3, r5
 800e0f0:	9b01      	ldr	r3, [sp, #4]
 800e0f2:	106d      	asrs	r5, r5, #1
 800e0f4:	3301      	adds	r3, #1
 800e0f6:	181b      	adds	r3, r3, r0
 800e0f8:	42ab      	cmp	r3, r5
 800e0fa:	d900      	bls.n	800e0fe <__ssputs_r+0x3e>
 800e0fc:	001d      	movs	r5, r3
 800e0fe:	0553      	lsls	r3, r2, #21
 800e100:	d532      	bpl.n	800e168 <__ssputs_r+0xa8>
 800e102:	0029      	movs	r1, r5
 800e104:	0038      	movs	r0, r7
 800e106:	f7ff ff7d 	bl	800e004 <_malloc_r>
 800e10a:	1e06      	subs	r6, r0, #0
 800e10c:	d109      	bne.n	800e122 <__ssputs_r+0x62>
 800e10e:	230c      	movs	r3, #12
 800e110:	603b      	str	r3, [r7, #0]
 800e112:	2340      	movs	r3, #64	; 0x40
 800e114:	2001      	movs	r0, #1
 800e116:	89a2      	ldrh	r2, [r4, #12]
 800e118:	4240      	negs	r0, r0
 800e11a:	4313      	orrs	r3, r2
 800e11c:	81a3      	strh	r3, [r4, #12]
 800e11e:	b005      	add	sp, #20
 800e120:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e122:	9a02      	ldr	r2, [sp, #8]
 800e124:	6921      	ldr	r1, [r4, #16]
 800e126:	f7ff ff25 	bl	800df74 <memcpy>
 800e12a:	89a3      	ldrh	r3, [r4, #12]
 800e12c:	4a14      	ldr	r2, [pc, #80]	; (800e180 <__ssputs_r+0xc0>)
 800e12e:	401a      	ands	r2, r3
 800e130:	2380      	movs	r3, #128	; 0x80
 800e132:	4313      	orrs	r3, r2
 800e134:	81a3      	strh	r3, [r4, #12]
 800e136:	9b02      	ldr	r3, [sp, #8]
 800e138:	6126      	str	r6, [r4, #16]
 800e13a:	18f6      	adds	r6, r6, r3
 800e13c:	6026      	str	r6, [r4, #0]
 800e13e:	6165      	str	r5, [r4, #20]
 800e140:	9e01      	ldr	r6, [sp, #4]
 800e142:	1aed      	subs	r5, r5, r3
 800e144:	60a5      	str	r5, [r4, #8]
 800e146:	9b01      	ldr	r3, [sp, #4]
 800e148:	429e      	cmp	r6, r3
 800e14a:	d900      	bls.n	800e14e <__ssputs_r+0x8e>
 800e14c:	9e01      	ldr	r6, [sp, #4]
 800e14e:	0032      	movs	r2, r6
 800e150:	9903      	ldr	r1, [sp, #12]
 800e152:	6820      	ldr	r0, [r4, #0]
 800e154:	f000 faa7 	bl	800e6a6 <memmove>
 800e158:	68a3      	ldr	r3, [r4, #8]
 800e15a:	2000      	movs	r0, #0
 800e15c:	1b9b      	subs	r3, r3, r6
 800e15e:	60a3      	str	r3, [r4, #8]
 800e160:	6823      	ldr	r3, [r4, #0]
 800e162:	199e      	adds	r6, r3, r6
 800e164:	6026      	str	r6, [r4, #0]
 800e166:	e7da      	b.n	800e11e <__ssputs_r+0x5e>
 800e168:	002a      	movs	r2, r5
 800e16a:	0038      	movs	r0, r7
 800e16c:	f000 fafa 	bl	800e764 <_realloc_r>
 800e170:	1e06      	subs	r6, r0, #0
 800e172:	d1e0      	bne.n	800e136 <__ssputs_r+0x76>
 800e174:	6921      	ldr	r1, [r4, #16]
 800e176:	0038      	movs	r0, r7
 800e178:	f000 faaa 	bl	800e6d0 <_free_r>
 800e17c:	e7c7      	b.n	800e10e <__ssputs_r+0x4e>
 800e17e:	46c0      	nop			; (mov r8, r8)
 800e180:	fffffb7f 	.word	0xfffffb7f

0800e184 <_svfiprintf_r>:
 800e184:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e186:	b0a1      	sub	sp, #132	; 0x84
 800e188:	9003      	str	r0, [sp, #12]
 800e18a:	001d      	movs	r5, r3
 800e18c:	898b      	ldrh	r3, [r1, #12]
 800e18e:	000f      	movs	r7, r1
 800e190:	0016      	movs	r6, r2
 800e192:	061b      	lsls	r3, r3, #24
 800e194:	d511      	bpl.n	800e1ba <_svfiprintf_r+0x36>
 800e196:	690b      	ldr	r3, [r1, #16]
 800e198:	2b00      	cmp	r3, #0
 800e19a:	d10e      	bne.n	800e1ba <_svfiprintf_r+0x36>
 800e19c:	2140      	movs	r1, #64	; 0x40
 800e19e:	f7ff ff31 	bl	800e004 <_malloc_r>
 800e1a2:	6038      	str	r0, [r7, #0]
 800e1a4:	6138      	str	r0, [r7, #16]
 800e1a6:	2800      	cmp	r0, #0
 800e1a8:	d105      	bne.n	800e1b6 <_svfiprintf_r+0x32>
 800e1aa:	230c      	movs	r3, #12
 800e1ac:	9a03      	ldr	r2, [sp, #12]
 800e1ae:	3801      	subs	r0, #1
 800e1b0:	6013      	str	r3, [r2, #0]
 800e1b2:	b021      	add	sp, #132	; 0x84
 800e1b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e1b6:	2340      	movs	r3, #64	; 0x40
 800e1b8:	617b      	str	r3, [r7, #20]
 800e1ba:	2300      	movs	r3, #0
 800e1bc:	ac08      	add	r4, sp, #32
 800e1be:	6163      	str	r3, [r4, #20]
 800e1c0:	3320      	adds	r3, #32
 800e1c2:	7663      	strb	r3, [r4, #25]
 800e1c4:	3310      	adds	r3, #16
 800e1c6:	76a3      	strb	r3, [r4, #26]
 800e1c8:	9507      	str	r5, [sp, #28]
 800e1ca:	0035      	movs	r5, r6
 800e1cc:	782b      	ldrb	r3, [r5, #0]
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d001      	beq.n	800e1d6 <_svfiprintf_r+0x52>
 800e1d2:	2b25      	cmp	r3, #37	; 0x25
 800e1d4:	d146      	bne.n	800e264 <_svfiprintf_r+0xe0>
 800e1d6:	1bab      	subs	r3, r5, r6
 800e1d8:	9305      	str	r3, [sp, #20]
 800e1da:	d00c      	beq.n	800e1f6 <_svfiprintf_r+0x72>
 800e1dc:	0032      	movs	r2, r6
 800e1de:	0039      	movs	r1, r7
 800e1e0:	9803      	ldr	r0, [sp, #12]
 800e1e2:	f7ff ff6d 	bl	800e0c0 <__ssputs_r>
 800e1e6:	1c43      	adds	r3, r0, #1
 800e1e8:	d100      	bne.n	800e1ec <_svfiprintf_r+0x68>
 800e1ea:	e0ae      	b.n	800e34a <_svfiprintf_r+0x1c6>
 800e1ec:	6962      	ldr	r2, [r4, #20]
 800e1ee:	9b05      	ldr	r3, [sp, #20]
 800e1f0:	4694      	mov	ip, r2
 800e1f2:	4463      	add	r3, ip
 800e1f4:	6163      	str	r3, [r4, #20]
 800e1f6:	782b      	ldrb	r3, [r5, #0]
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d100      	bne.n	800e1fe <_svfiprintf_r+0x7a>
 800e1fc:	e0a5      	b.n	800e34a <_svfiprintf_r+0x1c6>
 800e1fe:	2201      	movs	r2, #1
 800e200:	2300      	movs	r3, #0
 800e202:	4252      	negs	r2, r2
 800e204:	6062      	str	r2, [r4, #4]
 800e206:	a904      	add	r1, sp, #16
 800e208:	3254      	adds	r2, #84	; 0x54
 800e20a:	1852      	adds	r2, r2, r1
 800e20c:	1c6e      	adds	r6, r5, #1
 800e20e:	6023      	str	r3, [r4, #0]
 800e210:	60e3      	str	r3, [r4, #12]
 800e212:	60a3      	str	r3, [r4, #8]
 800e214:	7013      	strb	r3, [r2, #0]
 800e216:	65a3      	str	r3, [r4, #88]	; 0x58
 800e218:	7831      	ldrb	r1, [r6, #0]
 800e21a:	2205      	movs	r2, #5
 800e21c:	4853      	ldr	r0, [pc, #332]	; (800e36c <_svfiprintf_r+0x1e8>)
 800e21e:	f000 fa37 	bl	800e690 <memchr>
 800e222:	1c75      	adds	r5, r6, #1
 800e224:	2800      	cmp	r0, #0
 800e226:	d11f      	bne.n	800e268 <_svfiprintf_r+0xe4>
 800e228:	6822      	ldr	r2, [r4, #0]
 800e22a:	06d3      	lsls	r3, r2, #27
 800e22c:	d504      	bpl.n	800e238 <_svfiprintf_r+0xb4>
 800e22e:	2353      	movs	r3, #83	; 0x53
 800e230:	a904      	add	r1, sp, #16
 800e232:	185b      	adds	r3, r3, r1
 800e234:	2120      	movs	r1, #32
 800e236:	7019      	strb	r1, [r3, #0]
 800e238:	0713      	lsls	r3, r2, #28
 800e23a:	d504      	bpl.n	800e246 <_svfiprintf_r+0xc2>
 800e23c:	2353      	movs	r3, #83	; 0x53
 800e23e:	a904      	add	r1, sp, #16
 800e240:	185b      	adds	r3, r3, r1
 800e242:	212b      	movs	r1, #43	; 0x2b
 800e244:	7019      	strb	r1, [r3, #0]
 800e246:	7833      	ldrb	r3, [r6, #0]
 800e248:	2b2a      	cmp	r3, #42	; 0x2a
 800e24a:	d016      	beq.n	800e27a <_svfiprintf_r+0xf6>
 800e24c:	0035      	movs	r5, r6
 800e24e:	2100      	movs	r1, #0
 800e250:	200a      	movs	r0, #10
 800e252:	68e3      	ldr	r3, [r4, #12]
 800e254:	782a      	ldrb	r2, [r5, #0]
 800e256:	1c6e      	adds	r6, r5, #1
 800e258:	3a30      	subs	r2, #48	; 0x30
 800e25a:	2a09      	cmp	r2, #9
 800e25c:	d94e      	bls.n	800e2fc <_svfiprintf_r+0x178>
 800e25e:	2900      	cmp	r1, #0
 800e260:	d018      	beq.n	800e294 <_svfiprintf_r+0x110>
 800e262:	e010      	b.n	800e286 <_svfiprintf_r+0x102>
 800e264:	3501      	adds	r5, #1
 800e266:	e7b1      	b.n	800e1cc <_svfiprintf_r+0x48>
 800e268:	4b40      	ldr	r3, [pc, #256]	; (800e36c <_svfiprintf_r+0x1e8>)
 800e26a:	6822      	ldr	r2, [r4, #0]
 800e26c:	1ac0      	subs	r0, r0, r3
 800e26e:	2301      	movs	r3, #1
 800e270:	4083      	lsls	r3, r0
 800e272:	4313      	orrs	r3, r2
 800e274:	6023      	str	r3, [r4, #0]
 800e276:	002e      	movs	r6, r5
 800e278:	e7ce      	b.n	800e218 <_svfiprintf_r+0x94>
 800e27a:	9b07      	ldr	r3, [sp, #28]
 800e27c:	1d19      	adds	r1, r3, #4
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	9107      	str	r1, [sp, #28]
 800e282:	2b00      	cmp	r3, #0
 800e284:	db01      	blt.n	800e28a <_svfiprintf_r+0x106>
 800e286:	930b      	str	r3, [sp, #44]	; 0x2c
 800e288:	e004      	b.n	800e294 <_svfiprintf_r+0x110>
 800e28a:	425b      	negs	r3, r3
 800e28c:	60e3      	str	r3, [r4, #12]
 800e28e:	2302      	movs	r3, #2
 800e290:	4313      	orrs	r3, r2
 800e292:	6023      	str	r3, [r4, #0]
 800e294:	782b      	ldrb	r3, [r5, #0]
 800e296:	2b2e      	cmp	r3, #46	; 0x2e
 800e298:	d10a      	bne.n	800e2b0 <_svfiprintf_r+0x12c>
 800e29a:	786b      	ldrb	r3, [r5, #1]
 800e29c:	2b2a      	cmp	r3, #42	; 0x2a
 800e29e:	d135      	bne.n	800e30c <_svfiprintf_r+0x188>
 800e2a0:	9b07      	ldr	r3, [sp, #28]
 800e2a2:	3502      	adds	r5, #2
 800e2a4:	1d1a      	adds	r2, r3, #4
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	9207      	str	r2, [sp, #28]
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	db2b      	blt.n	800e306 <_svfiprintf_r+0x182>
 800e2ae:	9309      	str	r3, [sp, #36]	; 0x24
 800e2b0:	4e2f      	ldr	r6, [pc, #188]	; (800e370 <_svfiprintf_r+0x1ec>)
 800e2b2:	7829      	ldrb	r1, [r5, #0]
 800e2b4:	2203      	movs	r2, #3
 800e2b6:	0030      	movs	r0, r6
 800e2b8:	f000 f9ea 	bl	800e690 <memchr>
 800e2bc:	2800      	cmp	r0, #0
 800e2be:	d006      	beq.n	800e2ce <_svfiprintf_r+0x14a>
 800e2c0:	2340      	movs	r3, #64	; 0x40
 800e2c2:	1b80      	subs	r0, r0, r6
 800e2c4:	4083      	lsls	r3, r0
 800e2c6:	6822      	ldr	r2, [r4, #0]
 800e2c8:	3501      	adds	r5, #1
 800e2ca:	4313      	orrs	r3, r2
 800e2cc:	6023      	str	r3, [r4, #0]
 800e2ce:	7829      	ldrb	r1, [r5, #0]
 800e2d0:	2206      	movs	r2, #6
 800e2d2:	4828      	ldr	r0, [pc, #160]	; (800e374 <_svfiprintf_r+0x1f0>)
 800e2d4:	1c6e      	adds	r6, r5, #1
 800e2d6:	7621      	strb	r1, [r4, #24]
 800e2d8:	f000 f9da 	bl	800e690 <memchr>
 800e2dc:	2800      	cmp	r0, #0
 800e2de:	d03c      	beq.n	800e35a <_svfiprintf_r+0x1d6>
 800e2e0:	4b25      	ldr	r3, [pc, #148]	; (800e378 <_svfiprintf_r+0x1f4>)
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d125      	bne.n	800e332 <_svfiprintf_r+0x1ae>
 800e2e6:	2207      	movs	r2, #7
 800e2e8:	9b07      	ldr	r3, [sp, #28]
 800e2ea:	3307      	adds	r3, #7
 800e2ec:	4393      	bics	r3, r2
 800e2ee:	3308      	adds	r3, #8
 800e2f0:	9307      	str	r3, [sp, #28]
 800e2f2:	6963      	ldr	r3, [r4, #20]
 800e2f4:	9a04      	ldr	r2, [sp, #16]
 800e2f6:	189b      	adds	r3, r3, r2
 800e2f8:	6163      	str	r3, [r4, #20]
 800e2fa:	e766      	b.n	800e1ca <_svfiprintf_r+0x46>
 800e2fc:	4343      	muls	r3, r0
 800e2fe:	2101      	movs	r1, #1
 800e300:	189b      	adds	r3, r3, r2
 800e302:	0035      	movs	r5, r6
 800e304:	e7a6      	b.n	800e254 <_svfiprintf_r+0xd0>
 800e306:	2301      	movs	r3, #1
 800e308:	425b      	negs	r3, r3
 800e30a:	e7d0      	b.n	800e2ae <_svfiprintf_r+0x12a>
 800e30c:	2300      	movs	r3, #0
 800e30e:	200a      	movs	r0, #10
 800e310:	001a      	movs	r2, r3
 800e312:	3501      	adds	r5, #1
 800e314:	6063      	str	r3, [r4, #4]
 800e316:	7829      	ldrb	r1, [r5, #0]
 800e318:	1c6e      	adds	r6, r5, #1
 800e31a:	3930      	subs	r1, #48	; 0x30
 800e31c:	2909      	cmp	r1, #9
 800e31e:	d903      	bls.n	800e328 <_svfiprintf_r+0x1a4>
 800e320:	2b00      	cmp	r3, #0
 800e322:	d0c5      	beq.n	800e2b0 <_svfiprintf_r+0x12c>
 800e324:	9209      	str	r2, [sp, #36]	; 0x24
 800e326:	e7c3      	b.n	800e2b0 <_svfiprintf_r+0x12c>
 800e328:	4342      	muls	r2, r0
 800e32a:	2301      	movs	r3, #1
 800e32c:	1852      	adds	r2, r2, r1
 800e32e:	0035      	movs	r5, r6
 800e330:	e7f1      	b.n	800e316 <_svfiprintf_r+0x192>
 800e332:	ab07      	add	r3, sp, #28
 800e334:	9300      	str	r3, [sp, #0]
 800e336:	003a      	movs	r2, r7
 800e338:	4b10      	ldr	r3, [pc, #64]	; (800e37c <_svfiprintf_r+0x1f8>)
 800e33a:	0021      	movs	r1, r4
 800e33c:	9803      	ldr	r0, [sp, #12]
 800e33e:	e000      	b.n	800e342 <_svfiprintf_r+0x1be>
 800e340:	bf00      	nop
 800e342:	9004      	str	r0, [sp, #16]
 800e344:	9b04      	ldr	r3, [sp, #16]
 800e346:	3301      	adds	r3, #1
 800e348:	d1d3      	bne.n	800e2f2 <_svfiprintf_r+0x16e>
 800e34a:	89bb      	ldrh	r3, [r7, #12]
 800e34c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800e34e:	065b      	lsls	r3, r3, #25
 800e350:	d400      	bmi.n	800e354 <_svfiprintf_r+0x1d0>
 800e352:	e72e      	b.n	800e1b2 <_svfiprintf_r+0x2e>
 800e354:	2001      	movs	r0, #1
 800e356:	4240      	negs	r0, r0
 800e358:	e72b      	b.n	800e1b2 <_svfiprintf_r+0x2e>
 800e35a:	ab07      	add	r3, sp, #28
 800e35c:	9300      	str	r3, [sp, #0]
 800e35e:	003a      	movs	r2, r7
 800e360:	4b06      	ldr	r3, [pc, #24]	; (800e37c <_svfiprintf_r+0x1f8>)
 800e362:	0021      	movs	r1, r4
 800e364:	9803      	ldr	r0, [sp, #12]
 800e366:	f000 f879 	bl	800e45c <_printf_i>
 800e36a:	e7ea      	b.n	800e342 <_svfiprintf_r+0x1be>
 800e36c:	0800f738 	.word	0x0800f738
 800e370:	0800f73e 	.word	0x0800f73e
 800e374:	0800f742 	.word	0x0800f742
 800e378:	00000000 	.word	0x00000000
 800e37c:	0800e0c1 	.word	0x0800e0c1

0800e380 <_printf_common>:
 800e380:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e382:	0015      	movs	r5, r2
 800e384:	9301      	str	r3, [sp, #4]
 800e386:	688a      	ldr	r2, [r1, #8]
 800e388:	690b      	ldr	r3, [r1, #16]
 800e38a:	9000      	str	r0, [sp, #0]
 800e38c:	000c      	movs	r4, r1
 800e38e:	4293      	cmp	r3, r2
 800e390:	da00      	bge.n	800e394 <_printf_common+0x14>
 800e392:	0013      	movs	r3, r2
 800e394:	0022      	movs	r2, r4
 800e396:	602b      	str	r3, [r5, #0]
 800e398:	3243      	adds	r2, #67	; 0x43
 800e39a:	7812      	ldrb	r2, [r2, #0]
 800e39c:	2a00      	cmp	r2, #0
 800e39e:	d001      	beq.n	800e3a4 <_printf_common+0x24>
 800e3a0:	3301      	adds	r3, #1
 800e3a2:	602b      	str	r3, [r5, #0]
 800e3a4:	6823      	ldr	r3, [r4, #0]
 800e3a6:	069b      	lsls	r3, r3, #26
 800e3a8:	d502      	bpl.n	800e3b0 <_printf_common+0x30>
 800e3aa:	682b      	ldr	r3, [r5, #0]
 800e3ac:	3302      	adds	r3, #2
 800e3ae:	602b      	str	r3, [r5, #0]
 800e3b0:	2706      	movs	r7, #6
 800e3b2:	6823      	ldr	r3, [r4, #0]
 800e3b4:	401f      	ands	r7, r3
 800e3b6:	d027      	beq.n	800e408 <_printf_common+0x88>
 800e3b8:	0023      	movs	r3, r4
 800e3ba:	3343      	adds	r3, #67	; 0x43
 800e3bc:	781b      	ldrb	r3, [r3, #0]
 800e3be:	1e5a      	subs	r2, r3, #1
 800e3c0:	4193      	sbcs	r3, r2
 800e3c2:	6822      	ldr	r2, [r4, #0]
 800e3c4:	0692      	lsls	r2, r2, #26
 800e3c6:	d430      	bmi.n	800e42a <_printf_common+0xaa>
 800e3c8:	0022      	movs	r2, r4
 800e3ca:	9901      	ldr	r1, [sp, #4]
 800e3cc:	3243      	adds	r2, #67	; 0x43
 800e3ce:	9800      	ldr	r0, [sp, #0]
 800e3d0:	9e08      	ldr	r6, [sp, #32]
 800e3d2:	47b0      	blx	r6
 800e3d4:	1c43      	adds	r3, r0, #1
 800e3d6:	d025      	beq.n	800e424 <_printf_common+0xa4>
 800e3d8:	2306      	movs	r3, #6
 800e3da:	6820      	ldr	r0, [r4, #0]
 800e3dc:	682a      	ldr	r2, [r5, #0]
 800e3de:	68e1      	ldr	r1, [r4, #12]
 800e3e0:	4003      	ands	r3, r0
 800e3e2:	2500      	movs	r5, #0
 800e3e4:	2b04      	cmp	r3, #4
 800e3e6:	d103      	bne.n	800e3f0 <_printf_common+0x70>
 800e3e8:	1a8d      	subs	r5, r1, r2
 800e3ea:	43eb      	mvns	r3, r5
 800e3ec:	17db      	asrs	r3, r3, #31
 800e3ee:	401d      	ands	r5, r3
 800e3f0:	68a3      	ldr	r3, [r4, #8]
 800e3f2:	6922      	ldr	r2, [r4, #16]
 800e3f4:	4293      	cmp	r3, r2
 800e3f6:	dd01      	ble.n	800e3fc <_printf_common+0x7c>
 800e3f8:	1a9b      	subs	r3, r3, r2
 800e3fa:	18ed      	adds	r5, r5, r3
 800e3fc:	2700      	movs	r7, #0
 800e3fe:	42bd      	cmp	r5, r7
 800e400:	d120      	bne.n	800e444 <_printf_common+0xc4>
 800e402:	2000      	movs	r0, #0
 800e404:	e010      	b.n	800e428 <_printf_common+0xa8>
 800e406:	3701      	adds	r7, #1
 800e408:	68e3      	ldr	r3, [r4, #12]
 800e40a:	682a      	ldr	r2, [r5, #0]
 800e40c:	1a9b      	subs	r3, r3, r2
 800e40e:	42bb      	cmp	r3, r7
 800e410:	ddd2      	ble.n	800e3b8 <_printf_common+0x38>
 800e412:	0022      	movs	r2, r4
 800e414:	2301      	movs	r3, #1
 800e416:	3219      	adds	r2, #25
 800e418:	9901      	ldr	r1, [sp, #4]
 800e41a:	9800      	ldr	r0, [sp, #0]
 800e41c:	9e08      	ldr	r6, [sp, #32]
 800e41e:	47b0      	blx	r6
 800e420:	1c43      	adds	r3, r0, #1
 800e422:	d1f0      	bne.n	800e406 <_printf_common+0x86>
 800e424:	2001      	movs	r0, #1
 800e426:	4240      	negs	r0, r0
 800e428:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e42a:	2030      	movs	r0, #48	; 0x30
 800e42c:	18e1      	adds	r1, r4, r3
 800e42e:	3143      	adds	r1, #67	; 0x43
 800e430:	7008      	strb	r0, [r1, #0]
 800e432:	0021      	movs	r1, r4
 800e434:	1c5a      	adds	r2, r3, #1
 800e436:	3145      	adds	r1, #69	; 0x45
 800e438:	7809      	ldrb	r1, [r1, #0]
 800e43a:	18a2      	adds	r2, r4, r2
 800e43c:	3243      	adds	r2, #67	; 0x43
 800e43e:	3302      	adds	r3, #2
 800e440:	7011      	strb	r1, [r2, #0]
 800e442:	e7c1      	b.n	800e3c8 <_printf_common+0x48>
 800e444:	0022      	movs	r2, r4
 800e446:	2301      	movs	r3, #1
 800e448:	321a      	adds	r2, #26
 800e44a:	9901      	ldr	r1, [sp, #4]
 800e44c:	9800      	ldr	r0, [sp, #0]
 800e44e:	9e08      	ldr	r6, [sp, #32]
 800e450:	47b0      	blx	r6
 800e452:	1c43      	adds	r3, r0, #1
 800e454:	d0e6      	beq.n	800e424 <_printf_common+0xa4>
 800e456:	3701      	adds	r7, #1
 800e458:	e7d1      	b.n	800e3fe <_printf_common+0x7e>
	...

0800e45c <_printf_i>:
 800e45c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e45e:	b089      	sub	sp, #36	; 0x24
 800e460:	9204      	str	r2, [sp, #16]
 800e462:	000a      	movs	r2, r1
 800e464:	3243      	adds	r2, #67	; 0x43
 800e466:	9305      	str	r3, [sp, #20]
 800e468:	9003      	str	r0, [sp, #12]
 800e46a:	9202      	str	r2, [sp, #8]
 800e46c:	7e0a      	ldrb	r2, [r1, #24]
 800e46e:	000c      	movs	r4, r1
 800e470:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e472:	2a6e      	cmp	r2, #110	; 0x6e
 800e474:	d100      	bne.n	800e478 <_printf_i+0x1c>
 800e476:	e086      	b.n	800e586 <_printf_i+0x12a>
 800e478:	d81f      	bhi.n	800e4ba <_printf_i+0x5e>
 800e47a:	2a63      	cmp	r2, #99	; 0x63
 800e47c:	d033      	beq.n	800e4e6 <_printf_i+0x8a>
 800e47e:	d808      	bhi.n	800e492 <_printf_i+0x36>
 800e480:	2a00      	cmp	r2, #0
 800e482:	d100      	bne.n	800e486 <_printf_i+0x2a>
 800e484:	e08c      	b.n	800e5a0 <_printf_i+0x144>
 800e486:	2a58      	cmp	r2, #88	; 0x58
 800e488:	d04d      	beq.n	800e526 <_printf_i+0xca>
 800e48a:	0025      	movs	r5, r4
 800e48c:	3542      	adds	r5, #66	; 0x42
 800e48e:	702a      	strb	r2, [r5, #0]
 800e490:	e030      	b.n	800e4f4 <_printf_i+0x98>
 800e492:	2a64      	cmp	r2, #100	; 0x64
 800e494:	d001      	beq.n	800e49a <_printf_i+0x3e>
 800e496:	2a69      	cmp	r2, #105	; 0x69
 800e498:	d1f7      	bne.n	800e48a <_printf_i+0x2e>
 800e49a:	6819      	ldr	r1, [r3, #0]
 800e49c:	6825      	ldr	r5, [r4, #0]
 800e49e:	1d0a      	adds	r2, r1, #4
 800e4a0:	0628      	lsls	r0, r5, #24
 800e4a2:	d529      	bpl.n	800e4f8 <_printf_i+0x9c>
 800e4a4:	6808      	ldr	r0, [r1, #0]
 800e4a6:	601a      	str	r2, [r3, #0]
 800e4a8:	2800      	cmp	r0, #0
 800e4aa:	da03      	bge.n	800e4b4 <_printf_i+0x58>
 800e4ac:	232d      	movs	r3, #45	; 0x2d
 800e4ae:	9a02      	ldr	r2, [sp, #8]
 800e4b0:	4240      	negs	r0, r0
 800e4b2:	7013      	strb	r3, [r2, #0]
 800e4b4:	4e6b      	ldr	r6, [pc, #428]	; (800e664 <_printf_i+0x208>)
 800e4b6:	270a      	movs	r7, #10
 800e4b8:	e04f      	b.n	800e55a <_printf_i+0xfe>
 800e4ba:	2a73      	cmp	r2, #115	; 0x73
 800e4bc:	d074      	beq.n	800e5a8 <_printf_i+0x14c>
 800e4be:	d808      	bhi.n	800e4d2 <_printf_i+0x76>
 800e4c0:	2a6f      	cmp	r2, #111	; 0x6f
 800e4c2:	d01f      	beq.n	800e504 <_printf_i+0xa8>
 800e4c4:	2a70      	cmp	r2, #112	; 0x70
 800e4c6:	d1e0      	bne.n	800e48a <_printf_i+0x2e>
 800e4c8:	2220      	movs	r2, #32
 800e4ca:	6809      	ldr	r1, [r1, #0]
 800e4cc:	430a      	orrs	r2, r1
 800e4ce:	6022      	str	r2, [r4, #0]
 800e4d0:	e003      	b.n	800e4da <_printf_i+0x7e>
 800e4d2:	2a75      	cmp	r2, #117	; 0x75
 800e4d4:	d016      	beq.n	800e504 <_printf_i+0xa8>
 800e4d6:	2a78      	cmp	r2, #120	; 0x78
 800e4d8:	d1d7      	bne.n	800e48a <_printf_i+0x2e>
 800e4da:	0022      	movs	r2, r4
 800e4dc:	2178      	movs	r1, #120	; 0x78
 800e4de:	3245      	adds	r2, #69	; 0x45
 800e4e0:	7011      	strb	r1, [r2, #0]
 800e4e2:	4e61      	ldr	r6, [pc, #388]	; (800e668 <_printf_i+0x20c>)
 800e4e4:	e022      	b.n	800e52c <_printf_i+0xd0>
 800e4e6:	0025      	movs	r5, r4
 800e4e8:	681a      	ldr	r2, [r3, #0]
 800e4ea:	3542      	adds	r5, #66	; 0x42
 800e4ec:	1d11      	adds	r1, r2, #4
 800e4ee:	6019      	str	r1, [r3, #0]
 800e4f0:	6813      	ldr	r3, [r2, #0]
 800e4f2:	702b      	strb	r3, [r5, #0]
 800e4f4:	2301      	movs	r3, #1
 800e4f6:	e065      	b.n	800e5c4 <_printf_i+0x168>
 800e4f8:	6808      	ldr	r0, [r1, #0]
 800e4fa:	601a      	str	r2, [r3, #0]
 800e4fc:	0669      	lsls	r1, r5, #25
 800e4fe:	d5d3      	bpl.n	800e4a8 <_printf_i+0x4c>
 800e500:	b200      	sxth	r0, r0
 800e502:	e7d1      	b.n	800e4a8 <_printf_i+0x4c>
 800e504:	6819      	ldr	r1, [r3, #0]
 800e506:	6825      	ldr	r5, [r4, #0]
 800e508:	1d08      	adds	r0, r1, #4
 800e50a:	6018      	str	r0, [r3, #0]
 800e50c:	6808      	ldr	r0, [r1, #0]
 800e50e:	062e      	lsls	r6, r5, #24
 800e510:	d505      	bpl.n	800e51e <_printf_i+0xc2>
 800e512:	4e54      	ldr	r6, [pc, #336]	; (800e664 <_printf_i+0x208>)
 800e514:	2708      	movs	r7, #8
 800e516:	2a6f      	cmp	r2, #111	; 0x6f
 800e518:	d01b      	beq.n	800e552 <_printf_i+0xf6>
 800e51a:	270a      	movs	r7, #10
 800e51c:	e019      	b.n	800e552 <_printf_i+0xf6>
 800e51e:	066d      	lsls	r5, r5, #25
 800e520:	d5f7      	bpl.n	800e512 <_printf_i+0xb6>
 800e522:	b280      	uxth	r0, r0
 800e524:	e7f5      	b.n	800e512 <_printf_i+0xb6>
 800e526:	3145      	adds	r1, #69	; 0x45
 800e528:	4e4e      	ldr	r6, [pc, #312]	; (800e664 <_printf_i+0x208>)
 800e52a:	700a      	strb	r2, [r1, #0]
 800e52c:	6818      	ldr	r0, [r3, #0]
 800e52e:	6822      	ldr	r2, [r4, #0]
 800e530:	1d01      	adds	r1, r0, #4
 800e532:	6800      	ldr	r0, [r0, #0]
 800e534:	6019      	str	r1, [r3, #0]
 800e536:	0615      	lsls	r5, r2, #24
 800e538:	d521      	bpl.n	800e57e <_printf_i+0x122>
 800e53a:	07d3      	lsls	r3, r2, #31
 800e53c:	d502      	bpl.n	800e544 <_printf_i+0xe8>
 800e53e:	2320      	movs	r3, #32
 800e540:	431a      	orrs	r2, r3
 800e542:	6022      	str	r2, [r4, #0]
 800e544:	2710      	movs	r7, #16
 800e546:	2800      	cmp	r0, #0
 800e548:	d103      	bne.n	800e552 <_printf_i+0xf6>
 800e54a:	2320      	movs	r3, #32
 800e54c:	6822      	ldr	r2, [r4, #0]
 800e54e:	439a      	bics	r2, r3
 800e550:	6022      	str	r2, [r4, #0]
 800e552:	0023      	movs	r3, r4
 800e554:	2200      	movs	r2, #0
 800e556:	3343      	adds	r3, #67	; 0x43
 800e558:	701a      	strb	r2, [r3, #0]
 800e55a:	6863      	ldr	r3, [r4, #4]
 800e55c:	60a3      	str	r3, [r4, #8]
 800e55e:	2b00      	cmp	r3, #0
 800e560:	db58      	blt.n	800e614 <_printf_i+0x1b8>
 800e562:	2204      	movs	r2, #4
 800e564:	6821      	ldr	r1, [r4, #0]
 800e566:	4391      	bics	r1, r2
 800e568:	6021      	str	r1, [r4, #0]
 800e56a:	2800      	cmp	r0, #0
 800e56c:	d154      	bne.n	800e618 <_printf_i+0x1bc>
 800e56e:	9d02      	ldr	r5, [sp, #8]
 800e570:	2b00      	cmp	r3, #0
 800e572:	d05a      	beq.n	800e62a <_printf_i+0x1ce>
 800e574:	0025      	movs	r5, r4
 800e576:	7833      	ldrb	r3, [r6, #0]
 800e578:	3542      	adds	r5, #66	; 0x42
 800e57a:	702b      	strb	r3, [r5, #0]
 800e57c:	e055      	b.n	800e62a <_printf_i+0x1ce>
 800e57e:	0655      	lsls	r5, r2, #25
 800e580:	d5db      	bpl.n	800e53a <_printf_i+0xde>
 800e582:	b280      	uxth	r0, r0
 800e584:	e7d9      	b.n	800e53a <_printf_i+0xde>
 800e586:	681a      	ldr	r2, [r3, #0]
 800e588:	680d      	ldr	r5, [r1, #0]
 800e58a:	1d10      	adds	r0, r2, #4
 800e58c:	6949      	ldr	r1, [r1, #20]
 800e58e:	6018      	str	r0, [r3, #0]
 800e590:	6813      	ldr	r3, [r2, #0]
 800e592:	062e      	lsls	r6, r5, #24
 800e594:	d501      	bpl.n	800e59a <_printf_i+0x13e>
 800e596:	6019      	str	r1, [r3, #0]
 800e598:	e002      	b.n	800e5a0 <_printf_i+0x144>
 800e59a:	066d      	lsls	r5, r5, #25
 800e59c:	d5fb      	bpl.n	800e596 <_printf_i+0x13a>
 800e59e:	8019      	strh	r1, [r3, #0]
 800e5a0:	2300      	movs	r3, #0
 800e5a2:	9d02      	ldr	r5, [sp, #8]
 800e5a4:	6123      	str	r3, [r4, #16]
 800e5a6:	e04f      	b.n	800e648 <_printf_i+0x1ec>
 800e5a8:	681a      	ldr	r2, [r3, #0]
 800e5aa:	1d11      	adds	r1, r2, #4
 800e5ac:	6019      	str	r1, [r3, #0]
 800e5ae:	6815      	ldr	r5, [r2, #0]
 800e5b0:	2100      	movs	r1, #0
 800e5b2:	6862      	ldr	r2, [r4, #4]
 800e5b4:	0028      	movs	r0, r5
 800e5b6:	f000 f86b 	bl	800e690 <memchr>
 800e5ba:	2800      	cmp	r0, #0
 800e5bc:	d001      	beq.n	800e5c2 <_printf_i+0x166>
 800e5be:	1b40      	subs	r0, r0, r5
 800e5c0:	6060      	str	r0, [r4, #4]
 800e5c2:	6863      	ldr	r3, [r4, #4]
 800e5c4:	6123      	str	r3, [r4, #16]
 800e5c6:	2300      	movs	r3, #0
 800e5c8:	9a02      	ldr	r2, [sp, #8]
 800e5ca:	7013      	strb	r3, [r2, #0]
 800e5cc:	e03c      	b.n	800e648 <_printf_i+0x1ec>
 800e5ce:	6923      	ldr	r3, [r4, #16]
 800e5d0:	002a      	movs	r2, r5
 800e5d2:	9904      	ldr	r1, [sp, #16]
 800e5d4:	9803      	ldr	r0, [sp, #12]
 800e5d6:	9d05      	ldr	r5, [sp, #20]
 800e5d8:	47a8      	blx	r5
 800e5da:	1c43      	adds	r3, r0, #1
 800e5dc:	d03e      	beq.n	800e65c <_printf_i+0x200>
 800e5de:	6823      	ldr	r3, [r4, #0]
 800e5e0:	079b      	lsls	r3, r3, #30
 800e5e2:	d415      	bmi.n	800e610 <_printf_i+0x1b4>
 800e5e4:	9b07      	ldr	r3, [sp, #28]
 800e5e6:	68e0      	ldr	r0, [r4, #12]
 800e5e8:	4298      	cmp	r0, r3
 800e5ea:	da39      	bge.n	800e660 <_printf_i+0x204>
 800e5ec:	0018      	movs	r0, r3
 800e5ee:	e037      	b.n	800e660 <_printf_i+0x204>
 800e5f0:	0022      	movs	r2, r4
 800e5f2:	2301      	movs	r3, #1
 800e5f4:	3219      	adds	r2, #25
 800e5f6:	9904      	ldr	r1, [sp, #16]
 800e5f8:	9803      	ldr	r0, [sp, #12]
 800e5fa:	9e05      	ldr	r6, [sp, #20]
 800e5fc:	47b0      	blx	r6
 800e5fe:	1c43      	adds	r3, r0, #1
 800e600:	d02c      	beq.n	800e65c <_printf_i+0x200>
 800e602:	3501      	adds	r5, #1
 800e604:	68e3      	ldr	r3, [r4, #12]
 800e606:	9a07      	ldr	r2, [sp, #28]
 800e608:	1a9b      	subs	r3, r3, r2
 800e60a:	42ab      	cmp	r3, r5
 800e60c:	dcf0      	bgt.n	800e5f0 <_printf_i+0x194>
 800e60e:	e7e9      	b.n	800e5e4 <_printf_i+0x188>
 800e610:	2500      	movs	r5, #0
 800e612:	e7f7      	b.n	800e604 <_printf_i+0x1a8>
 800e614:	2800      	cmp	r0, #0
 800e616:	d0ad      	beq.n	800e574 <_printf_i+0x118>
 800e618:	9d02      	ldr	r5, [sp, #8]
 800e61a:	0039      	movs	r1, r7
 800e61c:	f7f1 fe18 	bl	8000250 <__aeabi_uidivmod>
 800e620:	5c73      	ldrb	r3, [r6, r1]
 800e622:	3d01      	subs	r5, #1
 800e624:	702b      	strb	r3, [r5, #0]
 800e626:	2800      	cmp	r0, #0
 800e628:	d1f7      	bne.n	800e61a <_printf_i+0x1be>
 800e62a:	2f08      	cmp	r7, #8
 800e62c:	d109      	bne.n	800e642 <_printf_i+0x1e6>
 800e62e:	6823      	ldr	r3, [r4, #0]
 800e630:	07db      	lsls	r3, r3, #31
 800e632:	d506      	bpl.n	800e642 <_printf_i+0x1e6>
 800e634:	6863      	ldr	r3, [r4, #4]
 800e636:	6922      	ldr	r2, [r4, #16]
 800e638:	4293      	cmp	r3, r2
 800e63a:	dc02      	bgt.n	800e642 <_printf_i+0x1e6>
 800e63c:	2330      	movs	r3, #48	; 0x30
 800e63e:	3d01      	subs	r5, #1
 800e640:	702b      	strb	r3, [r5, #0]
 800e642:	9b02      	ldr	r3, [sp, #8]
 800e644:	1b5b      	subs	r3, r3, r5
 800e646:	6123      	str	r3, [r4, #16]
 800e648:	9b05      	ldr	r3, [sp, #20]
 800e64a:	aa07      	add	r2, sp, #28
 800e64c:	9300      	str	r3, [sp, #0]
 800e64e:	0021      	movs	r1, r4
 800e650:	9b04      	ldr	r3, [sp, #16]
 800e652:	9803      	ldr	r0, [sp, #12]
 800e654:	f7ff fe94 	bl	800e380 <_printf_common>
 800e658:	1c43      	adds	r3, r0, #1
 800e65a:	d1b8      	bne.n	800e5ce <_printf_i+0x172>
 800e65c:	2001      	movs	r0, #1
 800e65e:	4240      	negs	r0, r0
 800e660:	b009      	add	sp, #36	; 0x24
 800e662:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e664:	0800f749 	.word	0x0800f749
 800e668:	0800f75a 	.word	0x0800f75a

0800e66c <_sbrk_r>:
 800e66c:	2300      	movs	r3, #0
 800e66e:	b570      	push	{r4, r5, r6, lr}
 800e670:	4c06      	ldr	r4, [pc, #24]	; (800e68c <_sbrk_r+0x20>)
 800e672:	0005      	movs	r5, r0
 800e674:	0008      	movs	r0, r1
 800e676:	6023      	str	r3, [r4, #0]
 800e678:	f000 f9f0 	bl	800ea5c <_sbrk>
 800e67c:	1c43      	adds	r3, r0, #1
 800e67e:	d103      	bne.n	800e688 <_sbrk_r+0x1c>
 800e680:	6823      	ldr	r3, [r4, #0]
 800e682:	2b00      	cmp	r3, #0
 800e684:	d000      	beq.n	800e688 <_sbrk_r+0x1c>
 800e686:	602b      	str	r3, [r5, #0]
 800e688:	bd70      	pop	{r4, r5, r6, pc}
 800e68a:	46c0      	nop			; (mov r8, r8)
 800e68c:	20001730 	.word	0x20001730

0800e690 <memchr>:
 800e690:	b2c9      	uxtb	r1, r1
 800e692:	1882      	adds	r2, r0, r2
 800e694:	4290      	cmp	r0, r2
 800e696:	d101      	bne.n	800e69c <memchr+0xc>
 800e698:	2000      	movs	r0, #0
 800e69a:	4770      	bx	lr
 800e69c:	7803      	ldrb	r3, [r0, #0]
 800e69e:	428b      	cmp	r3, r1
 800e6a0:	d0fb      	beq.n	800e69a <memchr+0xa>
 800e6a2:	3001      	adds	r0, #1
 800e6a4:	e7f6      	b.n	800e694 <memchr+0x4>

0800e6a6 <memmove>:
 800e6a6:	b510      	push	{r4, lr}
 800e6a8:	4288      	cmp	r0, r1
 800e6aa:	d902      	bls.n	800e6b2 <memmove+0xc>
 800e6ac:	188b      	adds	r3, r1, r2
 800e6ae:	4298      	cmp	r0, r3
 800e6b0:	d303      	bcc.n	800e6ba <memmove+0x14>
 800e6b2:	2300      	movs	r3, #0
 800e6b4:	e007      	b.n	800e6c6 <memmove+0x20>
 800e6b6:	5c8b      	ldrb	r3, [r1, r2]
 800e6b8:	5483      	strb	r3, [r0, r2]
 800e6ba:	3a01      	subs	r2, #1
 800e6bc:	d2fb      	bcs.n	800e6b6 <memmove+0x10>
 800e6be:	bd10      	pop	{r4, pc}
 800e6c0:	5ccc      	ldrb	r4, [r1, r3]
 800e6c2:	54c4      	strb	r4, [r0, r3]
 800e6c4:	3301      	adds	r3, #1
 800e6c6:	429a      	cmp	r2, r3
 800e6c8:	d1fa      	bne.n	800e6c0 <memmove+0x1a>
 800e6ca:	e7f8      	b.n	800e6be <memmove+0x18>

0800e6cc <__malloc_lock>:
 800e6cc:	4770      	bx	lr

0800e6ce <__malloc_unlock>:
 800e6ce:	4770      	bx	lr

0800e6d0 <_free_r>:
 800e6d0:	b570      	push	{r4, r5, r6, lr}
 800e6d2:	0005      	movs	r5, r0
 800e6d4:	2900      	cmp	r1, #0
 800e6d6:	d010      	beq.n	800e6fa <_free_r+0x2a>
 800e6d8:	1f0c      	subs	r4, r1, #4
 800e6da:	6823      	ldr	r3, [r4, #0]
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	da00      	bge.n	800e6e2 <_free_r+0x12>
 800e6e0:	18e4      	adds	r4, r4, r3
 800e6e2:	0028      	movs	r0, r5
 800e6e4:	f7ff fff2 	bl	800e6cc <__malloc_lock>
 800e6e8:	4a1d      	ldr	r2, [pc, #116]	; (800e760 <_free_r+0x90>)
 800e6ea:	6813      	ldr	r3, [r2, #0]
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d105      	bne.n	800e6fc <_free_r+0x2c>
 800e6f0:	6063      	str	r3, [r4, #4]
 800e6f2:	6014      	str	r4, [r2, #0]
 800e6f4:	0028      	movs	r0, r5
 800e6f6:	f7ff ffea 	bl	800e6ce <__malloc_unlock>
 800e6fa:	bd70      	pop	{r4, r5, r6, pc}
 800e6fc:	42a3      	cmp	r3, r4
 800e6fe:	d909      	bls.n	800e714 <_free_r+0x44>
 800e700:	6821      	ldr	r1, [r4, #0]
 800e702:	1860      	adds	r0, r4, r1
 800e704:	4283      	cmp	r3, r0
 800e706:	d1f3      	bne.n	800e6f0 <_free_r+0x20>
 800e708:	6818      	ldr	r0, [r3, #0]
 800e70a:	685b      	ldr	r3, [r3, #4]
 800e70c:	1841      	adds	r1, r0, r1
 800e70e:	6021      	str	r1, [r4, #0]
 800e710:	e7ee      	b.n	800e6f0 <_free_r+0x20>
 800e712:	0013      	movs	r3, r2
 800e714:	685a      	ldr	r2, [r3, #4]
 800e716:	2a00      	cmp	r2, #0
 800e718:	d001      	beq.n	800e71e <_free_r+0x4e>
 800e71a:	42a2      	cmp	r2, r4
 800e71c:	d9f9      	bls.n	800e712 <_free_r+0x42>
 800e71e:	6819      	ldr	r1, [r3, #0]
 800e720:	1858      	adds	r0, r3, r1
 800e722:	42a0      	cmp	r0, r4
 800e724:	d10b      	bne.n	800e73e <_free_r+0x6e>
 800e726:	6820      	ldr	r0, [r4, #0]
 800e728:	1809      	adds	r1, r1, r0
 800e72a:	1858      	adds	r0, r3, r1
 800e72c:	6019      	str	r1, [r3, #0]
 800e72e:	4282      	cmp	r2, r0
 800e730:	d1e0      	bne.n	800e6f4 <_free_r+0x24>
 800e732:	6810      	ldr	r0, [r2, #0]
 800e734:	6852      	ldr	r2, [r2, #4]
 800e736:	1841      	adds	r1, r0, r1
 800e738:	6019      	str	r1, [r3, #0]
 800e73a:	605a      	str	r2, [r3, #4]
 800e73c:	e7da      	b.n	800e6f4 <_free_r+0x24>
 800e73e:	42a0      	cmp	r0, r4
 800e740:	d902      	bls.n	800e748 <_free_r+0x78>
 800e742:	230c      	movs	r3, #12
 800e744:	602b      	str	r3, [r5, #0]
 800e746:	e7d5      	b.n	800e6f4 <_free_r+0x24>
 800e748:	6821      	ldr	r1, [r4, #0]
 800e74a:	1860      	adds	r0, r4, r1
 800e74c:	4282      	cmp	r2, r0
 800e74e:	d103      	bne.n	800e758 <_free_r+0x88>
 800e750:	6810      	ldr	r0, [r2, #0]
 800e752:	6852      	ldr	r2, [r2, #4]
 800e754:	1841      	adds	r1, r0, r1
 800e756:	6021      	str	r1, [r4, #0]
 800e758:	6062      	str	r2, [r4, #4]
 800e75a:	605c      	str	r4, [r3, #4]
 800e75c:	e7ca      	b.n	800e6f4 <_free_r+0x24>
 800e75e:	46c0      	nop			; (mov r8, r8)
 800e760:	2000151c 	.word	0x2000151c

0800e764 <_realloc_r>:
 800e764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e766:	0007      	movs	r7, r0
 800e768:	000d      	movs	r5, r1
 800e76a:	0016      	movs	r6, r2
 800e76c:	2900      	cmp	r1, #0
 800e76e:	d105      	bne.n	800e77c <_realloc_r+0x18>
 800e770:	0011      	movs	r1, r2
 800e772:	f7ff fc47 	bl	800e004 <_malloc_r>
 800e776:	0004      	movs	r4, r0
 800e778:	0020      	movs	r0, r4
 800e77a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e77c:	2a00      	cmp	r2, #0
 800e77e:	d103      	bne.n	800e788 <_realloc_r+0x24>
 800e780:	f7ff ffa6 	bl	800e6d0 <_free_r>
 800e784:	0034      	movs	r4, r6
 800e786:	e7f7      	b.n	800e778 <_realloc_r+0x14>
 800e788:	f000 f812 	bl	800e7b0 <_malloc_usable_size_r>
 800e78c:	002c      	movs	r4, r5
 800e78e:	42b0      	cmp	r0, r6
 800e790:	d2f2      	bcs.n	800e778 <_realloc_r+0x14>
 800e792:	0031      	movs	r1, r6
 800e794:	0038      	movs	r0, r7
 800e796:	f7ff fc35 	bl	800e004 <_malloc_r>
 800e79a:	1e04      	subs	r4, r0, #0
 800e79c:	d0ec      	beq.n	800e778 <_realloc_r+0x14>
 800e79e:	0029      	movs	r1, r5
 800e7a0:	0032      	movs	r2, r6
 800e7a2:	f7ff fbe7 	bl	800df74 <memcpy>
 800e7a6:	0029      	movs	r1, r5
 800e7a8:	0038      	movs	r0, r7
 800e7aa:	f7ff ff91 	bl	800e6d0 <_free_r>
 800e7ae:	e7e3      	b.n	800e778 <_realloc_r+0x14>

0800e7b0 <_malloc_usable_size_r>:
 800e7b0:	1f0b      	subs	r3, r1, #4
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	1f18      	subs	r0, r3, #4
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	da01      	bge.n	800e7be <_malloc_usable_size_r+0xe>
 800e7ba:	580b      	ldr	r3, [r1, r0]
 800e7bc:	18c0      	adds	r0, r0, r3
 800e7be:	4770      	bx	lr

0800e7c0 <ceil>:
 800e7c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e7c2:	004b      	lsls	r3, r1, #1
 800e7c4:	4a39      	ldr	r2, [pc, #228]	; (800e8ac <ceil+0xec>)
 800e7c6:	0d5b      	lsrs	r3, r3, #21
 800e7c8:	b085      	sub	sp, #20
 800e7ca:	189e      	adds	r6, r3, r2
 800e7cc:	000c      	movs	r4, r1
 800e7ce:	0005      	movs	r5, r0
 800e7d0:	9003      	str	r0, [sp, #12]
 800e7d2:	2e13      	cmp	r6, #19
 800e7d4:	dc32      	bgt.n	800e83c <ceil+0x7c>
 800e7d6:	2e00      	cmp	r6, #0
 800e7d8:	da13      	bge.n	800e802 <ceil+0x42>
 800e7da:	4a35      	ldr	r2, [pc, #212]	; (800e8b0 <ceil+0xf0>)
 800e7dc:	4b35      	ldr	r3, [pc, #212]	; (800e8b4 <ceil+0xf4>)
 800e7de:	f7f2 f969 	bl	8000ab4 <__aeabi_dadd>
 800e7e2:	2200      	movs	r2, #0
 800e7e4:	2300      	movs	r3, #0
 800e7e6:	f7f1 fe4d 	bl	8000484 <__aeabi_dcmpgt>
 800e7ea:	2800      	cmp	r0, #0
 800e7ec:	d006      	beq.n	800e7fc <ceil+0x3c>
 800e7ee:	2c00      	cmp	r4, #0
 800e7f0:	db57      	blt.n	800e8a2 <ceil+0xe2>
 800e7f2:	432c      	orrs	r4, r5
 800e7f4:	2500      	movs	r5, #0
 800e7f6:	42ac      	cmp	r4, r5
 800e7f8:	d000      	beq.n	800e7fc <ceil+0x3c>
 800e7fa:	4c2f      	ldr	r4, [pc, #188]	; (800e8b8 <ceil+0xf8>)
 800e7fc:	0028      	movs	r0, r5
 800e7fe:	0021      	movs	r1, r4
 800e800:	e026      	b.n	800e850 <ceil+0x90>
 800e802:	4f2e      	ldr	r7, [pc, #184]	; (800e8bc <ceil+0xfc>)
 800e804:	4137      	asrs	r7, r6
 800e806:	003b      	movs	r3, r7
 800e808:	400b      	ands	r3, r1
 800e80a:	4303      	orrs	r3, r0
 800e80c:	d020      	beq.n	800e850 <ceil+0x90>
 800e80e:	9000      	str	r0, [sp, #0]
 800e810:	9101      	str	r1, [sp, #4]
 800e812:	4a27      	ldr	r2, [pc, #156]	; (800e8b0 <ceil+0xf0>)
 800e814:	4b27      	ldr	r3, [pc, #156]	; (800e8b4 <ceil+0xf4>)
 800e816:	9800      	ldr	r0, [sp, #0]
 800e818:	9901      	ldr	r1, [sp, #4]
 800e81a:	f7f2 f94b 	bl	8000ab4 <__aeabi_dadd>
 800e81e:	2200      	movs	r2, #0
 800e820:	2300      	movs	r3, #0
 800e822:	f7f1 fe2f 	bl	8000484 <__aeabi_dcmpgt>
 800e826:	2800      	cmp	r0, #0
 800e828:	d0e8      	beq.n	800e7fc <ceil+0x3c>
 800e82a:	2c00      	cmp	r4, #0
 800e82c:	dd03      	ble.n	800e836 <ceil+0x76>
 800e82e:	2380      	movs	r3, #128	; 0x80
 800e830:	035b      	lsls	r3, r3, #13
 800e832:	4133      	asrs	r3, r6
 800e834:	18e4      	adds	r4, r4, r3
 800e836:	43bc      	bics	r4, r7
 800e838:	2500      	movs	r5, #0
 800e83a:	e7df      	b.n	800e7fc <ceil+0x3c>
 800e83c:	2e33      	cmp	r6, #51	; 0x33
 800e83e:	dd09      	ble.n	800e854 <ceil+0x94>
 800e840:	2380      	movs	r3, #128	; 0x80
 800e842:	00db      	lsls	r3, r3, #3
 800e844:	429e      	cmp	r6, r3
 800e846:	d103      	bne.n	800e850 <ceil+0x90>
 800e848:	0002      	movs	r2, r0
 800e84a:	000b      	movs	r3, r1
 800e84c:	f7f2 f932 	bl	8000ab4 <__aeabi_dadd>
 800e850:	b005      	add	sp, #20
 800e852:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e854:	2701      	movs	r7, #1
 800e856:	4a1a      	ldr	r2, [pc, #104]	; (800e8c0 <ceil+0x100>)
 800e858:	427f      	negs	r7, r7
 800e85a:	189b      	adds	r3, r3, r2
 800e85c:	40df      	lsrs	r7, r3
 800e85e:	4238      	tst	r0, r7
 800e860:	d0f6      	beq.n	800e850 <ceil+0x90>
 800e862:	9000      	str	r0, [sp, #0]
 800e864:	9101      	str	r1, [sp, #4]
 800e866:	4a12      	ldr	r2, [pc, #72]	; (800e8b0 <ceil+0xf0>)
 800e868:	4b12      	ldr	r3, [pc, #72]	; (800e8b4 <ceil+0xf4>)
 800e86a:	9800      	ldr	r0, [sp, #0]
 800e86c:	9901      	ldr	r1, [sp, #4]
 800e86e:	f7f2 f921 	bl	8000ab4 <__aeabi_dadd>
 800e872:	2200      	movs	r2, #0
 800e874:	2300      	movs	r3, #0
 800e876:	f7f1 fe05 	bl	8000484 <__aeabi_dcmpgt>
 800e87a:	2800      	cmp	r0, #0
 800e87c:	d0be      	beq.n	800e7fc <ceil+0x3c>
 800e87e:	2c00      	cmp	r4, #0
 800e880:	dd02      	ble.n	800e888 <ceil+0xc8>
 800e882:	2e14      	cmp	r6, #20
 800e884:	d102      	bne.n	800e88c <ceil+0xcc>
 800e886:	3401      	adds	r4, #1
 800e888:	43bd      	bics	r5, r7
 800e88a:	e7b7      	b.n	800e7fc <ceil+0x3c>
 800e88c:	2334      	movs	r3, #52	; 0x34
 800e88e:	1b9e      	subs	r6, r3, r6
 800e890:	3b33      	subs	r3, #51	; 0x33
 800e892:	40b3      	lsls	r3, r6
 800e894:	18ed      	adds	r5, r5, r3
 800e896:	9b03      	ldr	r3, [sp, #12]
 800e898:	429d      	cmp	r5, r3
 800e89a:	419b      	sbcs	r3, r3
 800e89c:	425b      	negs	r3, r3
 800e89e:	18e4      	adds	r4, r4, r3
 800e8a0:	e7f2      	b.n	800e888 <ceil+0xc8>
 800e8a2:	2480      	movs	r4, #128	; 0x80
 800e8a4:	2500      	movs	r5, #0
 800e8a6:	0624      	lsls	r4, r4, #24
 800e8a8:	e7a8      	b.n	800e7fc <ceil+0x3c>
 800e8aa:	46c0      	nop			; (mov r8, r8)
 800e8ac:	fffffc01 	.word	0xfffffc01
 800e8b0:	8800759c 	.word	0x8800759c
 800e8b4:	7e37e43c 	.word	0x7e37e43c
 800e8b8:	3ff00000 	.word	0x3ff00000
 800e8bc:	000fffff 	.word	0x000fffff
 800e8c0:	fffffbed 	.word	0xfffffbed

0800e8c4 <floor>:
 800e8c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e8c6:	004b      	lsls	r3, r1, #1
 800e8c8:	4a39      	ldr	r2, [pc, #228]	; (800e9b0 <floor+0xec>)
 800e8ca:	0d5b      	lsrs	r3, r3, #21
 800e8cc:	b085      	sub	sp, #20
 800e8ce:	189e      	adds	r6, r3, r2
 800e8d0:	000c      	movs	r4, r1
 800e8d2:	0005      	movs	r5, r0
 800e8d4:	9003      	str	r0, [sp, #12]
 800e8d6:	2e13      	cmp	r6, #19
 800e8d8:	dc34      	bgt.n	800e944 <floor+0x80>
 800e8da:	2e00      	cmp	r6, #0
 800e8dc:	da15      	bge.n	800e90a <floor+0x46>
 800e8de:	4a35      	ldr	r2, [pc, #212]	; (800e9b4 <floor+0xf0>)
 800e8e0:	4b35      	ldr	r3, [pc, #212]	; (800e9b8 <floor+0xf4>)
 800e8e2:	f7f2 f8e7 	bl	8000ab4 <__aeabi_dadd>
 800e8e6:	2200      	movs	r2, #0
 800e8e8:	2300      	movs	r3, #0
 800e8ea:	f7f1 fdcb 	bl	8000484 <__aeabi_dcmpgt>
 800e8ee:	2800      	cmp	r0, #0
 800e8f0:	d008      	beq.n	800e904 <floor+0x40>
 800e8f2:	2c00      	cmp	r4, #0
 800e8f4:	da59      	bge.n	800e9aa <floor+0xe6>
 800e8f6:	0063      	lsls	r3, r4, #1
 800e8f8:	085b      	lsrs	r3, r3, #1
 800e8fa:	432b      	orrs	r3, r5
 800e8fc:	2500      	movs	r5, #0
 800e8fe:	42ab      	cmp	r3, r5
 800e900:	d000      	beq.n	800e904 <floor+0x40>
 800e902:	4c2e      	ldr	r4, [pc, #184]	; (800e9bc <floor+0xf8>)
 800e904:	0028      	movs	r0, r5
 800e906:	0021      	movs	r1, r4
 800e908:	e026      	b.n	800e958 <floor+0x94>
 800e90a:	4f2d      	ldr	r7, [pc, #180]	; (800e9c0 <floor+0xfc>)
 800e90c:	4137      	asrs	r7, r6
 800e90e:	003b      	movs	r3, r7
 800e910:	400b      	ands	r3, r1
 800e912:	4303      	orrs	r3, r0
 800e914:	d020      	beq.n	800e958 <floor+0x94>
 800e916:	9000      	str	r0, [sp, #0]
 800e918:	9101      	str	r1, [sp, #4]
 800e91a:	4a26      	ldr	r2, [pc, #152]	; (800e9b4 <floor+0xf0>)
 800e91c:	4b26      	ldr	r3, [pc, #152]	; (800e9b8 <floor+0xf4>)
 800e91e:	9800      	ldr	r0, [sp, #0]
 800e920:	9901      	ldr	r1, [sp, #4]
 800e922:	f7f2 f8c7 	bl	8000ab4 <__aeabi_dadd>
 800e926:	2200      	movs	r2, #0
 800e928:	2300      	movs	r3, #0
 800e92a:	f7f1 fdab 	bl	8000484 <__aeabi_dcmpgt>
 800e92e:	2800      	cmp	r0, #0
 800e930:	d0e8      	beq.n	800e904 <floor+0x40>
 800e932:	2c00      	cmp	r4, #0
 800e934:	da03      	bge.n	800e93e <floor+0x7a>
 800e936:	2380      	movs	r3, #128	; 0x80
 800e938:	035b      	lsls	r3, r3, #13
 800e93a:	4133      	asrs	r3, r6
 800e93c:	18e4      	adds	r4, r4, r3
 800e93e:	43bc      	bics	r4, r7
 800e940:	2500      	movs	r5, #0
 800e942:	e7df      	b.n	800e904 <floor+0x40>
 800e944:	2e33      	cmp	r6, #51	; 0x33
 800e946:	dd09      	ble.n	800e95c <floor+0x98>
 800e948:	2380      	movs	r3, #128	; 0x80
 800e94a:	00db      	lsls	r3, r3, #3
 800e94c:	429e      	cmp	r6, r3
 800e94e:	d103      	bne.n	800e958 <floor+0x94>
 800e950:	0002      	movs	r2, r0
 800e952:	000b      	movs	r3, r1
 800e954:	f7f2 f8ae 	bl	8000ab4 <__aeabi_dadd>
 800e958:	b005      	add	sp, #20
 800e95a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e95c:	2701      	movs	r7, #1
 800e95e:	4a19      	ldr	r2, [pc, #100]	; (800e9c4 <floor+0x100>)
 800e960:	427f      	negs	r7, r7
 800e962:	189b      	adds	r3, r3, r2
 800e964:	40df      	lsrs	r7, r3
 800e966:	4238      	tst	r0, r7
 800e968:	d0f6      	beq.n	800e958 <floor+0x94>
 800e96a:	9000      	str	r0, [sp, #0]
 800e96c:	9101      	str	r1, [sp, #4]
 800e96e:	4a11      	ldr	r2, [pc, #68]	; (800e9b4 <floor+0xf0>)
 800e970:	4b11      	ldr	r3, [pc, #68]	; (800e9b8 <floor+0xf4>)
 800e972:	9800      	ldr	r0, [sp, #0]
 800e974:	9901      	ldr	r1, [sp, #4]
 800e976:	f7f2 f89d 	bl	8000ab4 <__aeabi_dadd>
 800e97a:	2200      	movs	r2, #0
 800e97c:	2300      	movs	r3, #0
 800e97e:	f7f1 fd81 	bl	8000484 <__aeabi_dcmpgt>
 800e982:	2800      	cmp	r0, #0
 800e984:	d0be      	beq.n	800e904 <floor+0x40>
 800e986:	2c00      	cmp	r4, #0
 800e988:	da02      	bge.n	800e990 <floor+0xcc>
 800e98a:	2e14      	cmp	r6, #20
 800e98c:	d102      	bne.n	800e994 <floor+0xd0>
 800e98e:	3401      	adds	r4, #1
 800e990:	43bd      	bics	r5, r7
 800e992:	e7b7      	b.n	800e904 <floor+0x40>
 800e994:	2334      	movs	r3, #52	; 0x34
 800e996:	1b9e      	subs	r6, r3, r6
 800e998:	3b33      	subs	r3, #51	; 0x33
 800e99a:	40b3      	lsls	r3, r6
 800e99c:	18ed      	adds	r5, r5, r3
 800e99e:	9b03      	ldr	r3, [sp, #12]
 800e9a0:	429d      	cmp	r5, r3
 800e9a2:	419b      	sbcs	r3, r3
 800e9a4:	425b      	negs	r3, r3
 800e9a6:	18e4      	adds	r4, r4, r3
 800e9a8:	e7f2      	b.n	800e990 <floor+0xcc>
 800e9aa:	2500      	movs	r5, #0
 800e9ac:	002c      	movs	r4, r5
 800e9ae:	e7a9      	b.n	800e904 <floor+0x40>
 800e9b0:	fffffc01 	.word	0xfffffc01
 800e9b4:	8800759c 	.word	0x8800759c
 800e9b8:	7e37e43c 	.word	0x7e37e43c
 800e9bc:	bff00000 	.word	0xbff00000
 800e9c0:	000fffff 	.word	0x000fffff
 800e9c4:	fffffbed 	.word	0xfffffbed

0800e9c8 <round>:
 800e9c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9ca:	004a      	lsls	r2, r1, #1
 800e9cc:	0007      	movs	r7, r0
 800e9ce:	481f      	ldr	r0, [pc, #124]	; (800ea4c <round+0x84>)
 800e9d0:	0d52      	lsrs	r2, r2, #21
 800e9d2:	1815      	adds	r5, r2, r0
 800e9d4:	000e      	movs	r6, r1
 800e9d6:	2d13      	cmp	r5, #19
 800e9d8:	dc18      	bgt.n	800ea0c <round+0x44>
 800e9da:	2d00      	cmp	r5, #0
 800e9dc:	da09      	bge.n	800e9f2 <round+0x2a>
 800e9de:	0fcb      	lsrs	r3, r1, #31
 800e9e0:	07db      	lsls	r3, r3, #31
 800e9e2:	2200      	movs	r2, #0
 800e9e4:	1c69      	adds	r1, r5, #1
 800e9e6:	d101      	bne.n	800e9ec <round+0x24>
 800e9e8:	4919      	ldr	r1, [pc, #100]	; (800ea50 <round+0x88>)
 800e9ea:	430b      	orrs	r3, r1
 800e9ec:	0019      	movs	r1, r3
 800e9ee:	0010      	movs	r0, r2
 800e9f0:	e017      	b.n	800ea22 <round+0x5a>
 800e9f2:	4a18      	ldr	r2, [pc, #96]	; (800ea54 <round+0x8c>)
 800e9f4:	412a      	asrs	r2, r5
 800e9f6:	420a      	tst	r2, r1
 800e9f8:	d101      	bne.n	800e9fe <round+0x36>
 800e9fa:	2f00      	cmp	r7, #0
 800e9fc:	d012      	beq.n	800ea24 <round+0x5c>
 800e9fe:	2380      	movs	r3, #128	; 0x80
 800ea00:	031b      	lsls	r3, r3, #12
 800ea02:	412b      	asrs	r3, r5
 800ea04:	199b      	adds	r3, r3, r6
 800ea06:	4393      	bics	r3, r2
 800ea08:	2200      	movs	r2, #0
 800ea0a:	e7ef      	b.n	800e9ec <round+0x24>
 800ea0c:	2d33      	cmp	r5, #51	; 0x33
 800ea0e:	dd0b      	ble.n	800ea28 <round+0x60>
 800ea10:	2380      	movs	r3, #128	; 0x80
 800ea12:	00db      	lsls	r3, r3, #3
 800ea14:	429d      	cmp	r5, r3
 800ea16:	d105      	bne.n	800ea24 <round+0x5c>
 800ea18:	003a      	movs	r2, r7
 800ea1a:	000b      	movs	r3, r1
 800ea1c:	0038      	movs	r0, r7
 800ea1e:	f7f2 f849 	bl	8000ab4 <__aeabi_dadd>
 800ea22:	0007      	movs	r7, r0
 800ea24:	0038      	movs	r0, r7
 800ea26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ea28:	2601      	movs	r6, #1
 800ea2a:	480b      	ldr	r0, [pc, #44]	; (800ea58 <round+0x90>)
 800ea2c:	4276      	negs	r6, r6
 800ea2e:	1812      	adds	r2, r2, r0
 800ea30:	40d6      	lsrs	r6, r2
 800ea32:	423e      	tst	r6, r7
 800ea34:	d0f6      	beq.n	800ea24 <round+0x5c>
 800ea36:	2233      	movs	r2, #51	; 0x33
 800ea38:	1b55      	subs	r5, r2, r5
 800ea3a:	3a32      	subs	r2, #50	; 0x32
 800ea3c:	40aa      	lsls	r2, r5
 800ea3e:	19d2      	adds	r2, r2, r7
 800ea40:	42ba      	cmp	r2, r7
 800ea42:	41a4      	sbcs	r4, r4
 800ea44:	4264      	negs	r4, r4
 800ea46:	190b      	adds	r3, r1, r4
 800ea48:	43b2      	bics	r2, r6
 800ea4a:	e7cf      	b.n	800e9ec <round+0x24>
 800ea4c:	fffffc01 	.word	0xfffffc01
 800ea50:	3ff00000 	.word	0x3ff00000
 800ea54:	000fffff 	.word	0x000fffff
 800ea58:	fffffbed 	.word	0xfffffbed

0800ea5c <_sbrk>:
 800ea5c:	4b05      	ldr	r3, [pc, #20]	; (800ea74 <_sbrk+0x18>)
 800ea5e:	0002      	movs	r2, r0
 800ea60:	6819      	ldr	r1, [r3, #0]
 800ea62:	2900      	cmp	r1, #0
 800ea64:	d101      	bne.n	800ea6a <_sbrk+0xe>
 800ea66:	4904      	ldr	r1, [pc, #16]	; (800ea78 <_sbrk+0x1c>)
 800ea68:	6019      	str	r1, [r3, #0]
 800ea6a:	6818      	ldr	r0, [r3, #0]
 800ea6c:	1882      	adds	r2, r0, r2
 800ea6e:	601a      	str	r2, [r3, #0]
 800ea70:	4770      	bx	lr
 800ea72:	46c0      	nop			; (mov r8, r8)
 800ea74:	20001524 	.word	0x20001524
 800ea78:	20001738 	.word	0x20001738

0800ea7c <_init>:
 800ea7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea7e:	46c0      	nop			; (mov r8, r8)
 800ea80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ea82:	bc08      	pop	{r3}
 800ea84:	469e      	mov	lr, r3
 800ea86:	4770      	bx	lr

0800ea88 <_fini>:
 800ea88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea8a:	46c0      	nop			; (mov r8, r8)
 800ea8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ea8e:	bc08      	pop	{r3}
 800ea90:	469e      	mov	lr, r3
 800ea92:	4770      	bx	lr
